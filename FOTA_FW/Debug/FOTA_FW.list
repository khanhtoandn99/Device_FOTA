
FOTA_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08019000  08019000  00009000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa2c  08019190  08019190  00009190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000080c  08023bc0  08023bc0  00013bc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080243cc  080243cc  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  080243cc  080243cc  000143cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080243d4  080243d4  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080243d4  080243d4  000143d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080243dc  080243dc  000143dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  080243e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000204  080245e8  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  080245e8  00020400  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024c88  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043b5  00000000  00000000  00044ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  00049278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb8  00000000  00000000  00049f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bdd5  00000000  00000000  0004ab20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b3d  00000000  00000000  000768f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f90a7  00000000  00000000  00089432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001824d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bc4  00000000  00000000  0018252c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08019190 <__do_global_dtors_aux>:
 8019190:	b510      	push	{r4, lr}
 8019192:	4c05      	ldr	r4, [pc, #20]	; (80191a8 <__do_global_dtors_aux+0x18>)
 8019194:	7823      	ldrb	r3, [r4, #0]
 8019196:	b933      	cbnz	r3, 80191a6 <__do_global_dtors_aux+0x16>
 8019198:	4b04      	ldr	r3, [pc, #16]	; (80191ac <__do_global_dtors_aux+0x1c>)
 801919a:	b113      	cbz	r3, 80191a2 <__do_global_dtors_aux+0x12>
 801919c:	4804      	ldr	r0, [pc, #16]	; (80191b0 <__do_global_dtors_aux+0x20>)
 801919e:	f3af 8000 	nop.w
 80191a2:	2301      	movs	r3, #1
 80191a4:	7023      	strb	r3, [r4, #0]
 80191a6:	bd10      	pop	{r4, pc}
 80191a8:	20000204 	.word	0x20000204
 80191ac:	00000000 	.word	0x00000000
 80191b0:	08023ba4 	.word	0x08023ba4

080191b4 <frame_dummy>:
 80191b4:	b508      	push	{r3, lr}
 80191b6:	4b03      	ldr	r3, [pc, #12]	; (80191c4 <frame_dummy+0x10>)
 80191b8:	b11b      	cbz	r3, 80191c2 <frame_dummy+0xe>
 80191ba:	4903      	ldr	r1, [pc, #12]	; (80191c8 <frame_dummy+0x14>)
 80191bc:	4803      	ldr	r0, [pc, #12]	; (80191cc <frame_dummy+0x18>)
 80191be:	f3af 8000 	nop.w
 80191c2:	bd08      	pop	{r3, pc}
 80191c4:	00000000 	.word	0x00000000
 80191c8:	20000208 	.word	0x20000208
 80191cc:	08023ba4 	.word	0x08023ba4

080191d0 <memchr>:
 80191d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80191d4:	2a10      	cmp	r2, #16
 80191d6:	db2b      	blt.n	8019230 <memchr+0x60>
 80191d8:	f010 0f07 	tst.w	r0, #7
 80191dc:	d008      	beq.n	80191f0 <memchr+0x20>
 80191de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80191e2:	3a01      	subs	r2, #1
 80191e4:	428b      	cmp	r3, r1
 80191e6:	d02d      	beq.n	8019244 <memchr+0x74>
 80191e8:	f010 0f07 	tst.w	r0, #7
 80191ec:	b342      	cbz	r2, 8019240 <memchr+0x70>
 80191ee:	d1f6      	bne.n	80191de <memchr+0xe>
 80191f0:	b4f0      	push	{r4, r5, r6, r7}
 80191f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80191f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80191fa:	f022 0407 	bic.w	r4, r2, #7
 80191fe:	f07f 0700 	mvns.w	r7, #0
 8019202:	2300      	movs	r3, #0
 8019204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8019208:	3c08      	subs	r4, #8
 801920a:	ea85 0501 	eor.w	r5, r5, r1
 801920e:	ea86 0601 	eor.w	r6, r6, r1
 8019212:	fa85 f547 	uadd8	r5, r5, r7
 8019216:	faa3 f587 	sel	r5, r3, r7
 801921a:	fa86 f647 	uadd8	r6, r6, r7
 801921e:	faa5 f687 	sel	r6, r5, r7
 8019222:	b98e      	cbnz	r6, 8019248 <memchr+0x78>
 8019224:	d1ee      	bne.n	8019204 <memchr+0x34>
 8019226:	bcf0      	pop	{r4, r5, r6, r7}
 8019228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801922c:	f002 0207 	and.w	r2, r2, #7
 8019230:	b132      	cbz	r2, 8019240 <memchr+0x70>
 8019232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019236:	3a01      	subs	r2, #1
 8019238:	ea83 0301 	eor.w	r3, r3, r1
 801923c:	b113      	cbz	r3, 8019244 <memchr+0x74>
 801923e:	d1f8      	bne.n	8019232 <memchr+0x62>
 8019240:	2000      	movs	r0, #0
 8019242:	4770      	bx	lr
 8019244:	3801      	subs	r0, #1
 8019246:	4770      	bx	lr
 8019248:	2d00      	cmp	r5, #0
 801924a:	bf06      	itte	eq
 801924c:	4635      	moveq	r5, r6
 801924e:	3803      	subeq	r0, #3
 8019250:	3807      	subne	r0, #7
 8019252:	f015 0f01 	tst.w	r5, #1
 8019256:	d107      	bne.n	8019268 <memchr+0x98>
 8019258:	3001      	adds	r0, #1
 801925a:	f415 7f80 	tst.w	r5, #256	; 0x100
 801925e:	bf02      	ittt	eq
 8019260:	3001      	addeq	r0, #1
 8019262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8019266:	3001      	addeq	r0, #1
 8019268:	bcf0      	pop	{r4, r5, r6, r7}
 801926a:	3801      	subs	r0, #1
 801926c:	4770      	bx	lr
 801926e:	bf00      	nop

08019270 <strlen>:
 8019270:	4603      	mov	r3, r0
 8019272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019276:	2a00      	cmp	r2, #0
 8019278:	d1fb      	bne.n	8019272 <strlen+0x2>
 801927a:	1a18      	subs	r0, r3, r0
 801927c:	3801      	subs	r0, #1
 801927e:	4770      	bx	lr

08019280 <__aeabi_drsub>:
 8019280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8019284:	e002      	b.n	801928c <__adddf3>
 8019286:	bf00      	nop

08019288 <__aeabi_dsub>:
 8019288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0801928c <__adddf3>:
 801928c:	b530      	push	{r4, r5, lr}
 801928e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8019292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8019296:	ea94 0f05 	teq	r4, r5
 801929a:	bf08      	it	eq
 801929c:	ea90 0f02 	teqeq	r0, r2
 80192a0:	bf1f      	itttt	ne
 80192a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80192a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80192aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80192ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80192b2:	f000 80e2 	beq.w	801947a <__adddf3+0x1ee>
 80192b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80192ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80192be:	bfb8      	it	lt
 80192c0:	426d      	neglt	r5, r5
 80192c2:	dd0c      	ble.n	80192de <__adddf3+0x52>
 80192c4:	442c      	add	r4, r5
 80192c6:	ea80 0202 	eor.w	r2, r0, r2
 80192ca:	ea81 0303 	eor.w	r3, r1, r3
 80192ce:	ea82 0000 	eor.w	r0, r2, r0
 80192d2:	ea83 0101 	eor.w	r1, r3, r1
 80192d6:	ea80 0202 	eor.w	r2, r0, r2
 80192da:	ea81 0303 	eor.w	r3, r1, r3
 80192de:	2d36      	cmp	r5, #54	; 0x36
 80192e0:	bf88      	it	hi
 80192e2:	bd30      	pophi	{r4, r5, pc}
 80192e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80192e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80192ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80192f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80192f4:	d002      	beq.n	80192fc <__adddf3+0x70>
 80192f6:	4240      	negs	r0, r0
 80192f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80192fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8019300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8019304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8019308:	d002      	beq.n	8019310 <__adddf3+0x84>
 801930a:	4252      	negs	r2, r2
 801930c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8019310:	ea94 0f05 	teq	r4, r5
 8019314:	f000 80a7 	beq.w	8019466 <__adddf3+0x1da>
 8019318:	f1a4 0401 	sub.w	r4, r4, #1
 801931c:	f1d5 0e20 	rsbs	lr, r5, #32
 8019320:	db0d      	blt.n	801933e <__adddf3+0xb2>
 8019322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8019326:	fa22 f205 	lsr.w	r2, r2, r5
 801932a:	1880      	adds	r0, r0, r2
 801932c:	f141 0100 	adc.w	r1, r1, #0
 8019330:	fa03 f20e 	lsl.w	r2, r3, lr
 8019334:	1880      	adds	r0, r0, r2
 8019336:	fa43 f305 	asr.w	r3, r3, r5
 801933a:	4159      	adcs	r1, r3
 801933c:	e00e      	b.n	801935c <__adddf3+0xd0>
 801933e:	f1a5 0520 	sub.w	r5, r5, #32
 8019342:	f10e 0e20 	add.w	lr, lr, #32
 8019346:	2a01      	cmp	r2, #1
 8019348:	fa03 fc0e 	lsl.w	ip, r3, lr
 801934c:	bf28      	it	cs
 801934e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8019352:	fa43 f305 	asr.w	r3, r3, r5
 8019356:	18c0      	adds	r0, r0, r3
 8019358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801935c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8019360:	d507      	bpl.n	8019372 <__adddf3+0xe6>
 8019362:	f04f 0e00 	mov.w	lr, #0
 8019366:	f1dc 0c00 	rsbs	ip, ip, #0
 801936a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801936e:	eb6e 0101 	sbc.w	r1, lr, r1
 8019372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8019376:	d31b      	bcc.n	80193b0 <__adddf3+0x124>
 8019378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 801937c:	d30c      	bcc.n	8019398 <__adddf3+0x10c>
 801937e:	0849      	lsrs	r1, r1, #1
 8019380:	ea5f 0030 	movs.w	r0, r0, rrx
 8019384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8019388:	f104 0401 	add.w	r4, r4, #1
 801938c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8019390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8019394:	f080 809a 	bcs.w	80194cc <__adddf3+0x240>
 8019398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 801939c:	bf08      	it	eq
 801939e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80193a2:	f150 0000 	adcs.w	r0, r0, #0
 80193a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80193aa:	ea41 0105 	orr.w	r1, r1, r5
 80193ae:	bd30      	pop	{r4, r5, pc}
 80193b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80193b4:	4140      	adcs	r0, r0
 80193b6:	eb41 0101 	adc.w	r1, r1, r1
 80193ba:	3c01      	subs	r4, #1
 80193bc:	bf28      	it	cs
 80193be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80193c2:	d2e9      	bcs.n	8019398 <__adddf3+0x10c>
 80193c4:	f091 0f00 	teq	r1, #0
 80193c8:	bf04      	itt	eq
 80193ca:	4601      	moveq	r1, r0
 80193cc:	2000      	moveq	r0, #0
 80193ce:	fab1 f381 	clz	r3, r1
 80193d2:	bf08      	it	eq
 80193d4:	3320      	addeq	r3, #32
 80193d6:	f1a3 030b 	sub.w	r3, r3, #11
 80193da:	f1b3 0220 	subs.w	r2, r3, #32
 80193de:	da0c      	bge.n	80193fa <__adddf3+0x16e>
 80193e0:	320c      	adds	r2, #12
 80193e2:	dd08      	ble.n	80193f6 <__adddf3+0x16a>
 80193e4:	f102 0c14 	add.w	ip, r2, #20
 80193e8:	f1c2 020c 	rsb	r2, r2, #12
 80193ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80193f0:	fa21 f102 	lsr.w	r1, r1, r2
 80193f4:	e00c      	b.n	8019410 <__adddf3+0x184>
 80193f6:	f102 0214 	add.w	r2, r2, #20
 80193fa:	bfd8      	it	le
 80193fc:	f1c2 0c20 	rsble	ip, r2, #32
 8019400:	fa01 f102 	lsl.w	r1, r1, r2
 8019404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8019408:	bfdc      	itt	le
 801940a:	ea41 010c 	orrle.w	r1, r1, ip
 801940e:	4090      	lslle	r0, r2
 8019410:	1ae4      	subs	r4, r4, r3
 8019412:	bfa2      	ittt	ge
 8019414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8019418:	4329      	orrge	r1, r5
 801941a:	bd30      	popge	{r4, r5, pc}
 801941c:	ea6f 0404 	mvn.w	r4, r4
 8019420:	3c1f      	subs	r4, #31
 8019422:	da1c      	bge.n	801945e <__adddf3+0x1d2>
 8019424:	340c      	adds	r4, #12
 8019426:	dc0e      	bgt.n	8019446 <__adddf3+0x1ba>
 8019428:	f104 0414 	add.w	r4, r4, #20
 801942c:	f1c4 0220 	rsb	r2, r4, #32
 8019430:	fa20 f004 	lsr.w	r0, r0, r4
 8019434:	fa01 f302 	lsl.w	r3, r1, r2
 8019438:	ea40 0003 	orr.w	r0, r0, r3
 801943c:	fa21 f304 	lsr.w	r3, r1, r4
 8019440:	ea45 0103 	orr.w	r1, r5, r3
 8019444:	bd30      	pop	{r4, r5, pc}
 8019446:	f1c4 040c 	rsb	r4, r4, #12
 801944a:	f1c4 0220 	rsb	r2, r4, #32
 801944e:	fa20 f002 	lsr.w	r0, r0, r2
 8019452:	fa01 f304 	lsl.w	r3, r1, r4
 8019456:	ea40 0003 	orr.w	r0, r0, r3
 801945a:	4629      	mov	r1, r5
 801945c:	bd30      	pop	{r4, r5, pc}
 801945e:	fa21 f004 	lsr.w	r0, r1, r4
 8019462:	4629      	mov	r1, r5
 8019464:	bd30      	pop	{r4, r5, pc}
 8019466:	f094 0f00 	teq	r4, #0
 801946a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 801946e:	bf06      	itte	eq
 8019470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8019474:	3401      	addeq	r4, #1
 8019476:	3d01      	subne	r5, #1
 8019478:	e74e      	b.n	8019318 <__adddf3+0x8c>
 801947a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801947e:	bf18      	it	ne
 8019480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8019484:	d029      	beq.n	80194da <__adddf3+0x24e>
 8019486:	ea94 0f05 	teq	r4, r5
 801948a:	bf08      	it	eq
 801948c:	ea90 0f02 	teqeq	r0, r2
 8019490:	d005      	beq.n	801949e <__adddf3+0x212>
 8019492:	ea54 0c00 	orrs.w	ip, r4, r0
 8019496:	bf04      	itt	eq
 8019498:	4619      	moveq	r1, r3
 801949a:	4610      	moveq	r0, r2
 801949c:	bd30      	pop	{r4, r5, pc}
 801949e:	ea91 0f03 	teq	r1, r3
 80194a2:	bf1e      	ittt	ne
 80194a4:	2100      	movne	r1, #0
 80194a6:	2000      	movne	r0, #0
 80194a8:	bd30      	popne	{r4, r5, pc}
 80194aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80194ae:	d105      	bne.n	80194bc <__adddf3+0x230>
 80194b0:	0040      	lsls	r0, r0, #1
 80194b2:	4149      	adcs	r1, r1
 80194b4:	bf28      	it	cs
 80194b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80194ba:	bd30      	pop	{r4, r5, pc}
 80194bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80194c0:	bf3c      	itt	cc
 80194c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80194c6:	bd30      	popcc	{r4, r5, pc}
 80194c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80194cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80194d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80194d4:	f04f 0000 	mov.w	r0, #0
 80194d8:	bd30      	pop	{r4, r5, pc}
 80194da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80194de:	bf1a      	itte	ne
 80194e0:	4619      	movne	r1, r3
 80194e2:	4610      	movne	r0, r2
 80194e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80194e8:	bf1c      	itt	ne
 80194ea:	460b      	movne	r3, r1
 80194ec:	4602      	movne	r2, r0
 80194ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80194f2:	bf06      	itte	eq
 80194f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80194f8:	ea91 0f03 	teqeq	r1, r3
 80194fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8019500:	bd30      	pop	{r4, r5, pc}
 8019502:	bf00      	nop

08019504 <__aeabi_ui2d>:
 8019504:	f090 0f00 	teq	r0, #0
 8019508:	bf04      	itt	eq
 801950a:	2100      	moveq	r1, #0
 801950c:	4770      	bxeq	lr
 801950e:	b530      	push	{r4, r5, lr}
 8019510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8019514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8019518:	f04f 0500 	mov.w	r5, #0
 801951c:	f04f 0100 	mov.w	r1, #0
 8019520:	e750      	b.n	80193c4 <__adddf3+0x138>
 8019522:	bf00      	nop

08019524 <__aeabi_i2d>:
 8019524:	f090 0f00 	teq	r0, #0
 8019528:	bf04      	itt	eq
 801952a:	2100      	moveq	r1, #0
 801952c:	4770      	bxeq	lr
 801952e:	b530      	push	{r4, r5, lr}
 8019530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8019534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8019538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 801953c:	bf48      	it	mi
 801953e:	4240      	negmi	r0, r0
 8019540:	f04f 0100 	mov.w	r1, #0
 8019544:	e73e      	b.n	80193c4 <__adddf3+0x138>
 8019546:	bf00      	nop

08019548 <__aeabi_f2d>:
 8019548:	0042      	lsls	r2, r0, #1
 801954a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801954e:	ea4f 0131 	mov.w	r1, r1, rrx
 8019552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8019556:	bf1f      	itttt	ne
 8019558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 801955c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8019560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8019564:	4770      	bxne	lr
 8019566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 801956a:	bf08      	it	eq
 801956c:	4770      	bxeq	lr
 801956e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8019572:	bf04      	itt	eq
 8019574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8019578:	4770      	bxeq	lr
 801957a:	b530      	push	{r4, r5, lr}
 801957c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8019580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8019584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8019588:	e71c      	b.n	80193c4 <__adddf3+0x138>
 801958a:	bf00      	nop

0801958c <__aeabi_ul2d>:
 801958c:	ea50 0201 	orrs.w	r2, r0, r1
 8019590:	bf08      	it	eq
 8019592:	4770      	bxeq	lr
 8019594:	b530      	push	{r4, r5, lr}
 8019596:	f04f 0500 	mov.w	r5, #0
 801959a:	e00a      	b.n	80195b2 <__aeabi_l2d+0x16>

0801959c <__aeabi_l2d>:
 801959c:	ea50 0201 	orrs.w	r2, r0, r1
 80195a0:	bf08      	it	eq
 80195a2:	4770      	bxeq	lr
 80195a4:	b530      	push	{r4, r5, lr}
 80195a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80195aa:	d502      	bpl.n	80195b2 <__aeabi_l2d+0x16>
 80195ac:	4240      	negs	r0, r0
 80195ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80195b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80195b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80195ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80195be:	f43f aed8 	beq.w	8019372 <__adddf3+0xe6>
 80195c2:	f04f 0203 	mov.w	r2, #3
 80195c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80195ca:	bf18      	it	ne
 80195cc:	3203      	addne	r2, #3
 80195ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80195d2:	bf18      	it	ne
 80195d4:	3203      	addne	r2, #3
 80195d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80195da:	f1c2 0320 	rsb	r3, r2, #32
 80195de:	fa00 fc03 	lsl.w	ip, r0, r3
 80195e2:	fa20 f002 	lsr.w	r0, r0, r2
 80195e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80195ea:	ea40 000e 	orr.w	r0, r0, lr
 80195ee:	fa21 f102 	lsr.w	r1, r1, r2
 80195f2:	4414      	add	r4, r2
 80195f4:	e6bd      	b.n	8019372 <__adddf3+0xe6>
 80195f6:	bf00      	nop

080195f8 <__aeabi_dmul>:
 80195f8:	b570      	push	{r4, r5, r6, lr}
 80195fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80195fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8019602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8019606:	bf1d      	ittte	ne
 8019608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801960c:	ea94 0f0c 	teqne	r4, ip
 8019610:	ea95 0f0c 	teqne	r5, ip
 8019614:	f000 f8de 	bleq	80197d4 <__aeabi_dmul+0x1dc>
 8019618:	442c      	add	r4, r5
 801961a:	ea81 0603 	eor.w	r6, r1, r3
 801961e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8019622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8019626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801962a:	bf18      	it	ne
 801962c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8019630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8019634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019638:	d038      	beq.n	80196ac <__aeabi_dmul+0xb4>
 801963a:	fba0 ce02 	umull	ip, lr, r0, r2
 801963e:	f04f 0500 	mov.w	r5, #0
 8019642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8019646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 801964a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801964e:	f04f 0600 	mov.w	r6, #0
 8019652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8019656:	f09c 0f00 	teq	ip, #0
 801965a:	bf18      	it	ne
 801965c:	f04e 0e01 	orrne.w	lr, lr, #1
 8019660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8019664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8019668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 801966c:	d204      	bcs.n	8019678 <__aeabi_dmul+0x80>
 801966e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8019672:	416d      	adcs	r5, r5
 8019674:	eb46 0606 	adc.w	r6, r6, r6
 8019678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 801967c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8019680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8019684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8019688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 801968c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8019690:	bf88      	it	hi
 8019692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8019696:	d81e      	bhi.n	80196d6 <__aeabi_dmul+0xde>
 8019698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 801969c:	bf08      	it	eq
 801969e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80196a2:	f150 0000 	adcs.w	r0, r0, #0
 80196a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80196aa:	bd70      	pop	{r4, r5, r6, pc}
 80196ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80196b0:	ea46 0101 	orr.w	r1, r6, r1
 80196b4:	ea40 0002 	orr.w	r0, r0, r2
 80196b8:	ea81 0103 	eor.w	r1, r1, r3
 80196bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80196c0:	bfc2      	ittt	gt
 80196c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80196c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80196ca:	bd70      	popgt	{r4, r5, r6, pc}
 80196cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80196d0:	f04f 0e00 	mov.w	lr, #0
 80196d4:	3c01      	subs	r4, #1
 80196d6:	f300 80ab 	bgt.w	8019830 <__aeabi_dmul+0x238>
 80196da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80196de:	bfde      	ittt	le
 80196e0:	2000      	movle	r0, #0
 80196e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80196e6:	bd70      	pople	{r4, r5, r6, pc}
 80196e8:	f1c4 0400 	rsb	r4, r4, #0
 80196ec:	3c20      	subs	r4, #32
 80196ee:	da35      	bge.n	801975c <__aeabi_dmul+0x164>
 80196f0:	340c      	adds	r4, #12
 80196f2:	dc1b      	bgt.n	801972c <__aeabi_dmul+0x134>
 80196f4:	f104 0414 	add.w	r4, r4, #20
 80196f8:	f1c4 0520 	rsb	r5, r4, #32
 80196fc:	fa00 f305 	lsl.w	r3, r0, r5
 8019700:	fa20 f004 	lsr.w	r0, r0, r4
 8019704:	fa01 f205 	lsl.w	r2, r1, r5
 8019708:	ea40 0002 	orr.w	r0, r0, r2
 801970c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8019710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8019714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8019718:	fa21 f604 	lsr.w	r6, r1, r4
 801971c:	eb42 0106 	adc.w	r1, r2, r6
 8019720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8019724:	bf08      	it	eq
 8019726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801972a:	bd70      	pop	{r4, r5, r6, pc}
 801972c:	f1c4 040c 	rsb	r4, r4, #12
 8019730:	f1c4 0520 	rsb	r5, r4, #32
 8019734:	fa00 f304 	lsl.w	r3, r0, r4
 8019738:	fa20 f005 	lsr.w	r0, r0, r5
 801973c:	fa01 f204 	lsl.w	r2, r1, r4
 8019740:	ea40 0002 	orr.w	r0, r0, r2
 8019744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8019748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801974c:	f141 0100 	adc.w	r1, r1, #0
 8019750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8019754:	bf08      	it	eq
 8019756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801975a:	bd70      	pop	{r4, r5, r6, pc}
 801975c:	f1c4 0520 	rsb	r5, r4, #32
 8019760:	fa00 f205 	lsl.w	r2, r0, r5
 8019764:	ea4e 0e02 	orr.w	lr, lr, r2
 8019768:	fa20 f304 	lsr.w	r3, r0, r4
 801976c:	fa01 f205 	lsl.w	r2, r1, r5
 8019770:	ea43 0302 	orr.w	r3, r3, r2
 8019774:	fa21 f004 	lsr.w	r0, r1, r4
 8019778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801977c:	fa21 f204 	lsr.w	r2, r1, r4
 8019780:	ea20 0002 	bic.w	r0, r0, r2
 8019784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8019788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 801978c:	bf08      	it	eq
 801978e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8019792:	bd70      	pop	{r4, r5, r6, pc}
 8019794:	f094 0f00 	teq	r4, #0
 8019798:	d10f      	bne.n	80197ba <__aeabi_dmul+0x1c2>
 801979a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 801979e:	0040      	lsls	r0, r0, #1
 80197a0:	eb41 0101 	adc.w	r1, r1, r1
 80197a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80197a8:	bf08      	it	eq
 80197aa:	3c01      	subeq	r4, #1
 80197ac:	d0f7      	beq.n	801979e <__aeabi_dmul+0x1a6>
 80197ae:	ea41 0106 	orr.w	r1, r1, r6
 80197b2:	f095 0f00 	teq	r5, #0
 80197b6:	bf18      	it	ne
 80197b8:	4770      	bxne	lr
 80197ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80197be:	0052      	lsls	r2, r2, #1
 80197c0:	eb43 0303 	adc.w	r3, r3, r3
 80197c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80197c8:	bf08      	it	eq
 80197ca:	3d01      	subeq	r5, #1
 80197cc:	d0f7      	beq.n	80197be <__aeabi_dmul+0x1c6>
 80197ce:	ea43 0306 	orr.w	r3, r3, r6
 80197d2:	4770      	bx	lr
 80197d4:	ea94 0f0c 	teq	r4, ip
 80197d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80197dc:	bf18      	it	ne
 80197de:	ea95 0f0c 	teqne	r5, ip
 80197e2:	d00c      	beq.n	80197fe <__aeabi_dmul+0x206>
 80197e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80197e8:	bf18      	it	ne
 80197ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80197ee:	d1d1      	bne.n	8019794 <__aeabi_dmul+0x19c>
 80197f0:	ea81 0103 	eor.w	r1, r1, r3
 80197f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80197f8:	f04f 0000 	mov.w	r0, #0
 80197fc:	bd70      	pop	{r4, r5, r6, pc}
 80197fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8019802:	bf06      	itte	eq
 8019804:	4610      	moveq	r0, r2
 8019806:	4619      	moveq	r1, r3
 8019808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801980c:	d019      	beq.n	8019842 <__aeabi_dmul+0x24a>
 801980e:	ea94 0f0c 	teq	r4, ip
 8019812:	d102      	bne.n	801981a <__aeabi_dmul+0x222>
 8019814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8019818:	d113      	bne.n	8019842 <__aeabi_dmul+0x24a>
 801981a:	ea95 0f0c 	teq	r5, ip
 801981e:	d105      	bne.n	801982c <__aeabi_dmul+0x234>
 8019820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8019824:	bf1c      	itt	ne
 8019826:	4610      	movne	r0, r2
 8019828:	4619      	movne	r1, r3
 801982a:	d10a      	bne.n	8019842 <__aeabi_dmul+0x24a>
 801982c:	ea81 0103 	eor.w	r1, r1, r3
 8019830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8019834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8019838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801983c:	f04f 0000 	mov.w	r0, #0
 8019840:	bd70      	pop	{r4, r5, r6, pc}
 8019842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8019846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 801984a:	bd70      	pop	{r4, r5, r6, pc}

0801984c <__aeabi_ddiv>:
 801984c:	b570      	push	{r4, r5, r6, lr}
 801984e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8019852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8019856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801985a:	bf1d      	ittte	ne
 801985c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8019860:	ea94 0f0c 	teqne	r4, ip
 8019864:	ea95 0f0c 	teqne	r5, ip
 8019868:	f000 f8a7 	bleq	80199ba <__aeabi_ddiv+0x16e>
 801986c:	eba4 0405 	sub.w	r4, r4, r5
 8019870:	ea81 0e03 	eor.w	lr, r1, r3
 8019874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8019878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801987c:	f000 8088 	beq.w	8019990 <__aeabi_ddiv+0x144>
 8019880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8019884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8019888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 801988c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8019890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8019894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8019898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 801989c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80198a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80198a4:	429d      	cmp	r5, r3
 80198a6:	bf08      	it	eq
 80198a8:	4296      	cmpeq	r6, r2
 80198aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80198ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80198b2:	d202      	bcs.n	80198ba <__aeabi_ddiv+0x6e>
 80198b4:	085b      	lsrs	r3, r3, #1
 80198b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80198ba:	1ab6      	subs	r6, r6, r2
 80198bc:	eb65 0503 	sbc.w	r5, r5, r3
 80198c0:	085b      	lsrs	r3, r3, #1
 80198c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80198c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80198ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80198ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80198d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80198d6:	bf22      	ittt	cs
 80198d8:	1ab6      	subcs	r6, r6, r2
 80198da:	4675      	movcs	r5, lr
 80198dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80198e0:	085b      	lsrs	r3, r3, #1
 80198e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80198e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80198ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80198ee:	bf22      	ittt	cs
 80198f0:	1ab6      	subcs	r6, r6, r2
 80198f2:	4675      	movcs	r5, lr
 80198f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80198f8:	085b      	lsrs	r3, r3, #1
 80198fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80198fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8019902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8019906:	bf22      	ittt	cs
 8019908:	1ab6      	subcs	r6, r6, r2
 801990a:	4675      	movcs	r5, lr
 801990c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8019910:	085b      	lsrs	r3, r3, #1
 8019912:	ea4f 0232 	mov.w	r2, r2, rrx
 8019916:	ebb6 0e02 	subs.w	lr, r6, r2
 801991a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801991e:	bf22      	ittt	cs
 8019920:	1ab6      	subcs	r6, r6, r2
 8019922:	4675      	movcs	r5, lr
 8019924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8019928:	ea55 0e06 	orrs.w	lr, r5, r6
 801992c:	d018      	beq.n	8019960 <__aeabi_ddiv+0x114>
 801992e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8019932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8019936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801993a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801993e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8019942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8019946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801994a:	d1c0      	bne.n	80198ce <__aeabi_ddiv+0x82>
 801994c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8019950:	d10b      	bne.n	801996a <__aeabi_ddiv+0x11e>
 8019952:	ea41 0100 	orr.w	r1, r1, r0
 8019956:	f04f 0000 	mov.w	r0, #0
 801995a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 801995e:	e7b6      	b.n	80198ce <__aeabi_ddiv+0x82>
 8019960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8019964:	bf04      	itt	eq
 8019966:	4301      	orreq	r1, r0
 8019968:	2000      	moveq	r0, #0
 801996a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 801996e:	bf88      	it	hi
 8019970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8019974:	f63f aeaf 	bhi.w	80196d6 <__aeabi_dmul+0xde>
 8019978:	ebb5 0c03 	subs.w	ip, r5, r3
 801997c:	bf04      	itt	eq
 801997e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8019982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8019986:	f150 0000 	adcs.w	r0, r0, #0
 801998a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801998e:	bd70      	pop	{r4, r5, r6, pc}
 8019990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8019994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8019998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 801999c:	bfc2      	ittt	gt
 801999e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80199a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80199a6:	bd70      	popgt	{r4, r5, r6, pc}
 80199a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80199ac:	f04f 0e00 	mov.w	lr, #0
 80199b0:	3c01      	subs	r4, #1
 80199b2:	e690      	b.n	80196d6 <__aeabi_dmul+0xde>
 80199b4:	ea45 0e06 	orr.w	lr, r5, r6
 80199b8:	e68d      	b.n	80196d6 <__aeabi_dmul+0xde>
 80199ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80199be:	ea94 0f0c 	teq	r4, ip
 80199c2:	bf08      	it	eq
 80199c4:	ea95 0f0c 	teqeq	r5, ip
 80199c8:	f43f af3b 	beq.w	8019842 <__aeabi_dmul+0x24a>
 80199cc:	ea94 0f0c 	teq	r4, ip
 80199d0:	d10a      	bne.n	80199e8 <__aeabi_ddiv+0x19c>
 80199d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80199d6:	f47f af34 	bne.w	8019842 <__aeabi_dmul+0x24a>
 80199da:	ea95 0f0c 	teq	r5, ip
 80199de:	f47f af25 	bne.w	801982c <__aeabi_dmul+0x234>
 80199e2:	4610      	mov	r0, r2
 80199e4:	4619      	mov	r1, r3
 80199e6:	e72c      	b.n	8019842 <__aeabi_dmul+0x24a>
 80199e8:	ea95 0f0c 	teq	r5, ip
 80199ec:	d106      	bne.n	80199fc <__aeabi_ddiv+0x1b0>
 80199ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80199f2:	f43f aefd 	beq.w	80197f0 <__aeabi_dmul+0x1f8>
 80199f6:	4610      	mov	r0, r2
 80199f8:	4619      	mov	r1, r3
 80199fa:	e722      	b.n	8019842 <__aeabi_dmul+0x24a>
 80199fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8019a00:	bf18      	it	ne
 8019a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8019a06:	f47f aec5 	bne.w	8019794 <__aeabi_dmul+0x19c>
 8019a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8019a0e:	f47f af0d 	bne.w	801982c <__aeabi_dmul+0x234>
 8019a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8019a16:	f47f aeeb 	bne.w	80197f0 <__aeabi_dmul+0x1f8>
 8019a1a:	e712      	b.n	8019842 <__aeabi_dmul+0x24a>

08019a1c <__gedf2>:
 8019a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8019a20:	e006      	b.n	8019a30 <__cmpdf2+0x4>
 8019a22:	bf00      	nop

08019a24 <__ledf2>:
 8019a24:	f04f 0c01 	mov.w	ip, #1
 8019a28:	e002      	b.n	8019a30 <__cmpdf2+0x4>
 8019a2a:	bf00      	nop

08019a2c <__cmpdf2>:
 8019a2c:	f04f 0c01 	mov.w	ip, #1
 8019a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8019a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8019a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8019a40:	bf18      	it	ne
 8019a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8019a46:	d01b      	beq.n	8019a80 <__cmpdf2+0x54>
 8019a48:	b001      	add	sp, #4
 8019a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8019a4e:	bf0c      	ite	eq
 8019a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8019a54:	ea91 0f03 	teqne	r1, r3
 8019a58:	bf02      	ittt	eq
 8019a5a:	ea90 0f02 	teqeq	r0, r2
 8019a5e:	2000      	moveq	r0, #0
 8019a60:	4770      	bxeq	lr
 8019a62:	f110 0f00 	cmn.w	r0, #0
 8019a66:	ea91 0f03 	teq	r1, r3
 8019a6a:	bf58      	it	pl
 8019a6c:	4299      	cmppl	r1, r3
 8019a6e:	bf08      	it	eq
 8019a70:	4290      	cmpeq	r0, r2
 8019a72:	bf2c      	ite	cs
 8019a74:	17d8      	asrcs	r0, r3, #31
 8019a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8019a7a:	f040 0001 	orr.w	r0, r0, #1
 8019a7e:	4770      	bx	lr
 8019a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8019a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019a88:	d102      	bne.n	8019a90 <__cmpdf2+0x64>
 8019a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8019a8e:	d107      	bne.n	8019aa0 <__cmpdf2+0x74>
 8019a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8019a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019a98:	d1d6      	bne.n	8019a48 <__cmpdf2+0x1c>
 8019a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8019a9e:	d0d3      	beq.n	8019a48 <__cmpdf2+0x1c>
 8019aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8019aa4:	4770      	bx	lr
 8019aa6:	bf00      	nop

08019aa8 <__aeabi_cdrcmple>:
 8019aa8:	4684      	mov	ip, r0
 8019aaa:	4610      	mov	r0, r2
 8019aac:	4662      	mov	r2, ip
 8019aae:	468c      	mov	ip, r1
 8019ab0:	4619      	mov	r1, r3
 8019ab2:	4663      	mov	r3, ip
 8019ab4:	e000      	b.n	8019ab8 <__aeabi_cdcmpeq>
 8019ab6:	bf00      	nop

08019ab8 <__aeabi_cdcmpeq>:
 8019ab8:	b501      	push	{r0, lr}
 8019aba:	f7ff ffb7 	bl	8019a2c <__cmpdf2>
 8019abe:	2800      	cmp	r0, #0
 8019ac0:	bf48      	it	mi
 8019ac2:	f110 0f00 	cmnmi.w	r0, #0
 8019ac6:	bd01      	pop	{r0, pc}

08019ac8 <__aeabi_dcmpeq>:
 8019ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8019acc:	f7ff fff4 	bl	8019ab8 <__aeabi_cdcmpeq>
 8019ad0:	bf0c      	ite	eq
 8019ad2:	2001      	moveq	r0, #1
 8019ad4:	2000      	movne	r0, #0
 8019ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8019ada:	bf00      	nop

08019adc <__aeabi_dcmplt>:
 8019adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8019ae0:	f7ff ffea 	bl	8019ab8 <__aeabi_cdcmpeq>
 8019ae4:	bf34      	ite	cc
 8019ae6:	2001      	movcc	r0, #1
 8019ae8:	2000      	movcs	r0, #0
 8019aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8019aee:	bf00      	nop

08019af0 <__aeabi_dcmple>:
 8019af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8019af4:	f7ff ffe0 	bl	8019ab8 <__aeabi_cdcmpeq>
 8019af8:	bf94      	ite	ls
 8019afa:	2001      	movls	r0, #1
 8019afc:	2000      	movhi	r0, #0
 8019afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8019b02:	bf00      	nop

08019b04 <__aeabi_dcmpge>:
 8019b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8019b08:	f7ff ffce 	bl	8019aa8 <__aeabi_cdrcmple>
 8019b0c:	bf94      	ite	ls
 8019b0e:	2001      	movls	r0, #1
 8019b10:	2000      	movhi	r0, #0
 8019b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8019b16:	bf00      	nop

08019b18 <__aeabi_dcmpgt>:
 8019b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8019b1c:	f7ff ffc4 	bl	8019aa8 <__aeabi_cdrcmple>
 8019b20:	bf34      	ite	cc
 8019b22:	2001      	movcc	r0, #1
 8019b24:	2000      	movcs	r0, #0
 8019b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8019b2a:	bf00      	nop

08019b2c <__aeabi_dcmpun>:
 8019b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8019b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019b34:	d102      	bne.n	8019b3c <__aeabi_dcmpun+0x10>
 8019b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8019b3a:	d10a      	bne.n	8019b52 <__aeabi_dcmpun+0x26>
 8019b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8019b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019b44:	d102      	bne.n	8019b4c <__aeabi_dcmpun+0x20>
 8019b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8019b4a:	d102      	bne.n	8019b52 <__aeabi_dcmpun+0x26>
 8019b4c:	f04f 0000 	mov.w	r0, #0
 8019b50:	4770      	bx	lr
 8019b52:	f04f 0001 	mov.w	r0, #1
 8019b56:	4770      	bx	lr

08019b58 <__aeabi_d2iz>:
 8019b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8019b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8019b60:	d215      	bcs.n	8019b8e <__aeabi_d2iz+0x36>
 8019b62:	d511      	bpl.n	8019b88 <__aeabi_d2iz+0x30>
 8019b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8019b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8019b6c:	d912      	bls.n	8019b94 <__aeabi_d2iz+0x3c>
 8019b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8019b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8019b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8019b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8019b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8019b82:	bf18      	it	ne
 8019b84:	4240      	negne	r0, r0
 8019b86:	4770      	bx	lr
 8019b88:	f04f 0000 	mov.w	r0, #0
 8019b8c:	4770      	bx	lr
 8019b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8019b92:	d105      	bne.n	8019ba0 <__aeabi_d2iz+0x48>
 8019b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8019b98:	bf08      	it	eq
 8019b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8019b9e:	4770      	bx	lr
 8019ba0:	f04f 0000 	mov.w	r0, #0
 8019ba4:	4770      	bx	lr
 8019ba6:	bf00      	nop

08019ba8 <__aeabi_d2uiz>:
 8019ba8:	004a      	lsls	r2, r1, #1
 8019baa:	d211      	bcs.n	8019bd0 <__aeabi_d2uiz+0x28>
 8019bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8019bb0:	d211      	bcs.n	8019bd6 <__aeabi_d2uiz+0x2e>
 8019bb2:	d50d      	bpl.n	8019bd0 <__aeabi_d2uiz+0x28>
 8019bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8019bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8019bbc:	d40e      	bmi.n	8019bdc <__aeabi_d2uiz+0x34>
 8019bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8019bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8019bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8019bca:	fa23 f002 	lsr.w	r0, r3, r2
 8019bce:	4770      	bx	lr
 8019bd0:	f04f 0000 	mov.w	r0, #0
 8019bd4:	4770      	bx	lr
 8019bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8019bda:	d102      	bne.n	8019be2 <__aeabi_d2uiz+0x3a>
 8019bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8019be0:	4770      	bx	lr
 8019be2:	f04f 0000 	mov.w	r0, #0
 8019be6:	4770      	bx	lr

08019be8 <__aeabi_d2f>:
 8019be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8019bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8019bf0:	bf24      	itt	cs
 8019bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8019bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8019bfa:	d90d      	bls.n	8019c18 <__aeabi_d2f+0x30>
 8019bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8019c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8019c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8019c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8019c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8019c10:	bf08      	it	eq
 8019c12:	f020 0001 	biceq.w	r0, r0, #1
 8019c16:	4770      	bx	lr
 8019c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8019c1c:	d121      	bne.n	8019c62 <__aeabi_d2f+0x7a>
 8019c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8019c22:	bfbc      	itt	lt
 8019c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8019c28:	4770      	bxlt	lr
 8019c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8019c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8019c32:	f1c2 0218 	rsb	r2, r2, #24
 8019c36:	f1c2 0c20 	rsb	ip, r2, #32
 8019c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8019c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8019c42:	bf18      	it	ne
 8019c44:	f040 0001 	orrne.w	r0, r0, #1
 8019c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8019c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8019c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8019c54:	ea40 000c 	orr.w	r0, r0, ip
 8019c58:	fa23 f302 	lsr.w	r3, r3, r2
 8019c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019c60:	e7cc      	b.n	8019bfc <__aeabi_d2f+0x14>
 8019c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8019c66:	d107      	bne.n	8019c78 <__aeabi_d2f+0x90>
 8019c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8019c6c:	bf1e      	ittt	ne
 8019c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8019c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8019c76:	4770      	bxne	lr
 8019c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8019c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8019c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8019c84:	4770      	bx	lr
 8019c86:	bf00      	nop

08019c88 <__aeabi_uldivmod>:
 8019c88:	b953      	cbnz	r3, 8019ca0 <__aeabi_uldivmod+0x18>
 8019c8a:	b94a      	cbnz	r2, 8019ca0 <__aeabi_uldivmod+0x18>
 8019c8c:	2900      	cmp	r1, #0
 8019c8e:	bf08      	it	eq
 8019c90:	2800      	cmpeq	r0, #0
 8019c92:	bf1c      	itt	ne
 8019c94:	f04f 31ff 	movne.w	r1, #4294967295
 8019c98:	f04f 30ff 	movne.w	r0, #4294967295
 8019c9c:	f000 b9a4 	b.w	8019fe8 <__aeabi_idiv0>
 8019ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8019ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8019ca8:	f000 f83c 	bl	8019d24 <__udivmoddi4>
 8019cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8019cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019cb4:	b004      	add	sp, #16
 8019cb6:	4770      	bx	lr

08019cb8 <__aeabi_d2lz>:
 8019cb8:	b538      	push	{r3, r4, r5, lr}
 8019cba:	2200      	movs	r2, #0
 8019cbc:	2300      	movs	r3, #0
 8019cbe:	4604      	mov	r4, r0
 8019cc0:	460d      	mov	r5, r1
 8019cc2:	f7ff ff0b 	bl	8019adc <__aeabi_dcmplt>
 8019cc6:	b928      	cbnz	r0, 8019cd4 <__aeabi_d2lz+0x1c>
 8019cc8:	4620      	mov	r0, r4
 8019cca:	4629      	mov	r1, r5
 8019ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019cd0:	f000 b80a 	b.w	8019ce8 <__aeabi_d2ulz>
 8019cd4:	4620      	mov	r0, r4
 8019cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8019cda:	f000 f805 	bl	8019ce8 <__aeabi_d2ulz>
 8019cde:	4240      	negs	r0, r0
 8019ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8019ce4:	bd38      	pop	{r3, r4, r5, pc}
 8019ce6:	bf00      	nop

08019ce8 <__aeabi_d2ulz>:
 8019ce8:	b5d0      	push	{r4, r6, r7, lr}
 8019cea:	4b0c      	ldr	r3, [pc, #48]	; (8019d1c <__aeabi_d2ulz+0x34>)
 8019cec:	2200      	movs	r2, #0
 8019cee:	4606      	mov	r6, r0
 8019cf0:	460f      	mov	r7, r1
 8019cf2:	f7ff fc81 	bl	80195f8 <__aeabi_dmul>
 8019cf6:	f7ff ff57 	bl	8019ba8 <__aeabi_d2uiz>
 8019cfa:	4604      	mov	r4, r0
 8019cfc:	f7ff fc02 	bl	8019504 <__aeabi_ui2d>
 8019d00:	4b07      	ldr	r3, [pc, #28]	; (8019d20 <__aeabi_d2ulz+0x38>)
 8019d02:	2200      	movs	r2, #0
 8019d04:	f7ff fc78 	bl	80195f8 <__aeabi_dmul>
 8019d08:	4602      	mov	r2, r0
 8019d0a:	460b      	mov	r3, r1
 8019d0c:	4630      	mov	r0, r6
 8019d0e:	4639      	mov	r1, r7
 8019d10:	f7ff faba 	bl	8019288 <__aeabi_dsub>
 8019d14:	f7ff ff48 	bl	8019ba8 <__aeabi_d2uiz>
 8019d18:	4621      	mov	r1, r4
 8019d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8019d1c:	3df00000 	.word	0x3df00000
 8019d20:	41f00000 	.word	0x41f00000

08019d24 <__udivmoddi4>:
 8019d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d28:	9d08      	ldr	r5, [sp, #32]
 8019d2a:	4604      	mov	r4, r0
 8019d2c:	468c      	mov	ip, r1
 8019d2e:	2b00      	cmp	r3, #0
 8019d30:	f040 8083 	bne.w	8019e3a <__udivmoddi4+0x116>
 8019d34:	428a      	cmp	r2, r1
 8019d36:	4617      	mov	r7, r2
 8019d38:	d947      	bls.n	8019dca <__udivmoddi4+0xa6>
 8019d3a:	fab2 f282 	clz	r2, r2
 8019d3e:	b142      	cbz	r2, 8019d52 <__udivmoddi4+0x2e>
 8019d40:	f1c2 0020 	rsb	r0, r2, #32
 8019d44:	fa24 f000 	lsr.w	r0, r4, r0
 8019d48:	4091      	lsls	r1, r2
 8019d4a:	4097      	lsls	r7, r2
 8019d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8019d50:	4094      	lsls	r4, r2
 8019d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8019d56:	0c23      	lsrs	r3, r4, #16
 8019d58:	fbbc f6f8 	udiv	r6, ip, r8
 8019d5c:	fa1f fe87 	uxth.w	lr, r7
 8019d60:	fb08 c116 	mls	r1, r8, r6, ip
 8019d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8019d68:	fb06 f10e 	mul.w	r1, r6, lr
 8019d6c:	4299      	cmp	r1, r3
 8019d6e:	d909      	bls.n	8019d84 <__udivmoddi4+0x60>
 8019d70:	18fb      	adds	r3, r7, r3
 8019d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8019d76:	f080 8119 	bcs.w	8019fac <__udivmoddi4+0x288>
 8019d7a:	4299      	cmp	r1, r3
 8019d7c:	f240 8116 	bls.w	8019fac <__udivmoddi4+0x288>
 8019d80:	3e02      	subs	r6, #2
 8019d82:	443b      	add	r3, r7
 8019d84:	1a5b      	subs	r3, r3, r1
 8019d86:	b2a4      	uxth	r4, r4
 8019d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8019d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8019d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8019d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8019d98:	45a6      	cmp	lr, r4
 8019d9a:	d909      	bls.n	8019db0 <__udivmoddi4+0x8c>
 8019d9c:	193c      	adds	r4, r7, r4
 8019d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8019da2:	f080 8105 	bcs.w	8019fb0 <__udivmoddi4+0x28c>
 8019da6:	45a6      	cmp	lr, r4
 8019da8:	f240 8102 	bls.w	8019fb0 <__udivmoddi4+0x28c>
 8019dac:	3802      	subs	r0, #2
 8019dae:	443c      	add	r4, r7
 8019db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8019db4:	eba4 040e 	sub.w	r4, r4, lr
 8019db8:	2600      	movs	r6, #0
 8019dba:	b11d      	cbz	r5, 8019dc4 <__udivmoddi4+0xa0>
 8019dbc:	40d4      	lsrs	r4, r2
 8019dbe:	2300      	movs	r3, #0
 8019dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8019dc4:	4631      	mov	r1, r6
 8019dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019dca:	b902      	cbnz	r2, 8019dce <__udivmoddi4+0xaa>
 8019dcc:	deff      	udf	#255	; 0xff
 8019dce:	fab2 f282 	clz	r2, r2
 8019dd2:	2a00      	cmp	r2, #0
 8019dd4:	d150      	bne.n	8019e78 <__udivmoddi4+0x154>
 8019dd6:	1bcb      	subs	r3, r1, r7
 8019dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8019ddc:	fa1f f887 	uxth.w	r8, r7
 8019de0:	2601      	movs	r6, #1
 8019de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8019de6:	0c21      	lsrs	r1, r4, #16
 8019de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8019dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8019df0:	fb08 f30c 	mul.w	r3, r8, ip
 8019df4:	428b      	cmp	r3, r1
 8019df6:	d907      	bls.n	8019e08 <__udivmoddi4+0xe4>
 8019df8:	1879      	adds	r1, r7, r1
 8019dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8019dfe:	d202      	bcs.n	8019e06 <__udivmoddi4+0xe2>
 8019e00:	428b      	cmp	r3, r1
 8019e02:	f200 80e9 	bhi.w	8019fd8 <__udivmoddi4+0x2b4>
 8019e06:	4684      	mov	ip, r0
 8019e08:	1ac9      	subs	r1, r1, r3
 8019e0a:	b2a3      	uxth	r3, r4
 8019e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8019e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8019e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8019e18:	fb08 f800 	mul.w	r8, r8, r0
 8019e1c:	45a0      	cmp	r8, r4
 8019e1e:	d907      	bls.n	8019e30 <__udivmoddi4+0x10c>
 8019e20:	193c      	adds	r4, r7, r4
 8019e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8019e26:	d202      	bcs.n	8019e2e <__udivmoddi4+0x10a>
 8019e28:	45a0      	cmp	r8, r4
 8019e2a:	f200 80d9 	bhi.w	8019fe0 <__udivmoddi4+0x2bc>
 8019e2e:	4618      	mov	r0, r3
 8019e30:	eba4 0408 	sub.w	r4, r4, r8
 8019e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8019e38:	e7bf      	b.n	8019dba <__udivmoddi4+0x96>
 8019e3a:	428b      	cmp	r3, r1
 8019e3c:	d909      	bls.n	8019e52 <__udivmoddi4+0x12e>
 8019e3e:	2d00      	cmp	r5, #0
 8019e40:	f000 80b1 	beq.w	8019fa6 <__udivmoddi4+0x282>
 8019e44:	2600      	movs	r6, #0
 8019e46:	e9c5 0100 	strd	r0, r1, [r5]
 8019e4a:	4630      	mov	r0, r6
 8019e4c:	4631      	mov	r1, r6
 8019e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e52:	fab3 f683 	clz	r6, r3
 8019e56:	2e00      	cmp	r6, #0
 8019e58:	d14a      	bne.n	8019ef0 <__udivmoddi4+0x1cc>
 8019e5a:	428b      	cmp	r3, r1
 8019e5c:	d302      	bcc.n	8019e64 <__udivmoddi4+0x140>
 8019e5e:	4282      	cmp	r2, r0
 8019e60:	f200 80b8 	bhi.w	8019fd4 <__udivmoddi4+0x2b0>
 8019e64:	1a84      	subs	r4, r0, r2
 8019e66:	eb61 0103 	sbc.w	r1, r1, r3
 8019e6a:	2001      	movs	r0, #1
 8019e6c:	468c      	mov	ip, r1
 8019e6e:	2d00      	cmp	r5, #0
 8019e70:	d0a8      	beq.n	8019dc4 <__udivmoddi4+0xa0>
 8019e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8019e76:	e7a5      	b.n	8019dc4 <__udivmoddi4+0xa0>
 8019e78:	f1c2 0320 	rsb	r3, r2, #32
 8019e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8019e80:	4097      	lsls	r7, r2
 8019e82:	fa01 f002 	lsl.w	r0, r1, r2
 8019e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8019e8a:	40d9      	lsrs	r1, r3
 8019e8c:	4330      	orrs	r0, r6
 8019e8e:	0c03      	lsrs	r3, r0, #16
 8019e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8019e94:	fa1f f887 	uxth.w	r8, r7
 8019e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8019e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8019ea0:	fb06 f108 	mul.w	r1, r6, r8
 8019ea4:	4299      	cmp	r1, r3
 8019ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8019eaa:	d909      	bls.n	8019ec0 <__udivmoddi4+0x19c>
 8019eac:	18fb      	adds	r3, r7, r3
 8019eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8019eb2:	f080 808d 	bcs.w	8019fd0 <__udivmoddi4+0x2ac>
 8019eb6:	4299      	cmp	r1, r3
 8019eb8:	f240 808a 	bls.w	8019fd0 <__udivmoddi4+0x2ac>
 8019ebc:	3e02      	subs	r6, #2
 8019ebe:	443b      	add	r3, r7
 8019ec0:	1a5b      	subs	r3, r3, r1
 8019ec2:	b281      	uxth	r1, r0
 8019ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8019ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8019ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8019ed0:	fb00 f308 	mul.w	r3, r0, r8
 8019ed4:	428b      	cmp	r3, r1
 8019ed6:	d907      	bls.n	8019ee8 <__udivmoddi4+0x1c4>
 8019ed8:	1879      	adds	r1, r7, r1
 8019eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8019ede:	d273      	bcs.n	8019fc8 <__udivmoddi4+0x2a4>
 8019ee0:	428b      	cmp	r3, r1
 8019ee2:	d971      	bls.n	8019fc8 <__udivmoddi4+0x2a4>
 8019ee4:	3802      	subs	r0, #2
 8019ee6:	4439      	add	r1, r7
 8019ee8:	1acb      	subs	r3, r1, r3
 8019eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8019eee:	e778      	b.n	8019de2 <__udivmoddi4+0xbe>
 8019ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8019ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8019ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8019efc:	431c      	orrs	r4, r3
 8019efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8019f02:	fa01 f306 	lsl.w	r3, r1, r6
 8019f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8019f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8019f0e:	431f      	orrs	r7, r3
 8019f10:	0c3b      	lsrs	r3, r7, #16
 8019f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8019f16:	fa1f f884 	uxth.w	r8, r4
 8019f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8019f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8019f22:	fb09 fa08 	mul.w	sl, r9, r8
 8019f26:	458a      	cmp	sl, r1
 8019f28:	fa02 f206 	lsl.w	r2, r2, r6
 8019f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8019f30:	d908      	bls.n	8019f44 <__udivmoddi4+0x220>
 8019f32:	1861      	adds	r1, r4, r1
 8019f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8019f38:	d248      	bcs.n	8019fcc <__udivmoddi4+0x2a8>
 8019f3a:	458a      	cmp	sl, r1
 8019f3c:	d946      	bls.n	8019fcc <__udivmoddi4+0x2a8>
 8019f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8019f42:	4421      	add	r1, r4
 8019f44:	eba1 010a 	sub.w	r1, r1, sl
 8019f48:	b2bf      	uxth	r7, r7
 8019f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8019f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8019f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8019f56:	fb00 f808 	mul.w	r8, r0, r8
 8019f5a:	45b8      	cmp	r8, r7
 8019f5c:	d907      	bls.n	8019f6e <__udivmoddi4+0x24a>
 8019f5e:	19e7      	adds	r7, r4, r7
 8019f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8019f64:	d22e      	bcs.n	8019fc4 <__udivmoddi4+0x2a0>
 8019f66:	45b8      	cmp	r8, r7
 8019f68:	d92c      	bls.n	8019fc4 <__udivmoddi4+0x2a0>
 8019f6a:	3802      	subs	r0, #2
 8019f6c:	4427      	add	r7, r4
 8019f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8019f72:	eba7 0708 	sub.w	r7, r7, r8
 8019f76:	fba0 8902 	umull	r8, r9, r0, r2
 8019f7a:	454f      	cmp	r7, r9
 8019f7c:	46c6      	mov	lr, r8
 8019f7e:	4649      	mov	r1, r9
 8019f80:	d31a      	bcc.n	8019fb8 <__udivmoddi4+0x294>
 8019f82:	d017      	beq.n	8019fb4 <__udivmoddi4+0x290>
 8019f84:	b15d      	cbz	r5, 8019f9e <__udivmoddi4+0x27a>
 8019f86:	ebb3 020e 	subs.w	r2, r3, lr
 8019f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8019f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8019f92:	40f2      	lsrs	r2, r6
 8019f94:	ea4c 0202 	orr.w	r2, ip, r2
 8019f98:	40f7      	lsrs	r7, r6
 8019f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8019f9e:	2600      	movs	r6, #0
 8019fa0:	4631      	mov	r1, r6
 8019fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019fa6:	462e      	mov	r6, r5
 8019fa8:	4628      	mov	r0, r5
 8019faa:	e70b      	b.n	8019dc4 <__udivmoddi4+0xa0>
 8019fac:	4606      	mov	r6, r0
 8019fae:	e6e9      	b.n	8019d84 <__udivmoddi4+0x60>
 8019fb0:	4618      	mov	r0, r3
 8019fb2:	e6fd      	b.n	8019db0 <__udivmoddi4+0x8c>
 8019fb4:	4543      	cmp	r3, r8
 8019fb6:	d2e5      	bcs.n	8019f84 <__udivmoddi4+0x260>
 8019fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8019fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8019fc0:	3801      	subs	r0, #1
 8019fc2:	e7df      	b.n	8019f84 <__udivmoddi4+0x260>
 8019fc4:	4608      	mov	r0, r1
 8019fc6:	e7d2      	b.n	8019f6e <__udivmoddi4+0x24a>
 8019fc8:	4660      	mov	r0, ip
 8019fca:	e78d      	b.n	8019ee8 <__udivmoddi4+0x1c4>
 8019fcc:	4681      	mov	r9, r0
 8019fce:	e7b9      	b.n	8019f44 <__udivmoddi4+0x220>
 8019fd0:	4666      	mov	r6, ip
 8019fd2:	e775      	b.n	8019ec0 <__udivmoddi4+0x19c>
 8019fd4:	4630      	mov	r0, r6
 8019fd6:	e74a      	b.n	8019e6e <__udivmoddi4+0x14a>
 8019fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8019fdc:	4439      	add	r1, r7
 8019fde:	e713      	b.n	8019e08 <__udivmoddi4+0xe4>
 8019fe0:	3802      	subs	r0, #2
 8019fe2:	443c      	add	r4, r7
 8019fe4:	e724      	b.n	8019e30 <__udivmoddi4+0x10c>
 8019fe6:	bf00      	nop

08019fe8 <__aeabi_idiv0>:
 8019fe8:	4770      	bx	lr
 8019fea:	bf00      	nop

08019fec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8019fec:	b580      	push	{r7, lr}
 8019fee:	b088      	sub	sp, #32
 8019ff0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019ff2:	f107 030c 	add.w	r3, r7, #12
 8019ff6:	2200      	movs	r2, #0
 8019ff8:	601a      	str	r2, [r3, #0]
 8019ffa:	605a      	str	r2, [r3, #4]
 8019ffc:	609a      	str	r2, [r3, #8]
 8019ffe:	60da      	str	r2, [r3, #12]
 801a000:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801a002:	4b25      	ldr	r3, [pc, #148]	; (801a098 <MX_GPIO_Init+0xac>)
 801a004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a006:	4a24      	ldr	r2, [pc, #144]	; (801a098 <MX_GPIO_Init+0xac>)
 801a008:	f043 0304 	orr.w	r3, r3, #4
 801a00c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801a00e:	4b22      	ldr	r3, [pc, #136]	; (801a098 <MX_GPIO_Init+0xac>)
 801a010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a012:	f003 0304 	and.w	r3, r3, #4
 801a016:	60bb      	str	r3, [r7, #8]
 801a018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801a01a:	4b1f      	ldr	r3, [pc, #124]	; (801a098 <MX_GPIO_Init+0xac>)
 801a01c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a01e:	4a1e      	ldr	r2, [pc, #120]	; (801a098 <MX_GPIO_Init+0xac>)
 801a020:	f043 0301 	orr.w	r3, r3, #1
 801a024:	64d3      	str	r3, [r2, #76]	; 0x4c
 801a026:	4b1c      	ldr	r3, [pc, #112]	; (801a098 <MX_GPIO_Init+0xac>)
 801a028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a02a:	f003 0301 	and.w	r3, r3, #1
 801a02e:	607b      	str	r3, [r7, #4]
 801a030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801a032:	4b19      	ldr	r3, [pc, #100]	; (801a098 <MX_GPIO_Init+0xac>)
 801a034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a036:	4a18      	ldr	r2, [pc, #96]	; (801a098 <MX_GPIO_Init+0xac>)
 801a038:	f043 0302 	orr.w	r3, r3, #2
 801a03c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801a03e:	4b16      	ldr	r3, [pc, #88]	; (801a098 <MX_GPIO_Init+0xac>)
 801a040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a042:	f003 0302 	and.w	r3, r3, #2
 801a046:	603b      	str	r3, [r7, #0]
 801a048:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(user_led_GPIO_Port, user_led_Pin, GPIO_PIN_RESET);
 801a04a:	2200      	movs	r2, #0
 801a04c:	2120      	movs	r1, #32
 801a04e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801a052:	f001 ff47 	bl	801bee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = user_btn_Pin;
 801a056:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801a05a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801a05c:	2300      	movs	r3, #0
 801a05e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 801a060:	2301      	movs	r3, #1
 801a062:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(user_btn_GPIO_Port, &GPIO_InitStruct);
 801a064:	f107 030c 	add.w	r3, r7, #12
 801a068:	4619      	mov	r1, r3
 801a06a:	480c      	ldr	r0, [pc, #48]	; (801a09c <MX_GPIO_Init+0xb0>)
 801a06c:	f001 fd90 	bl	801bb90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = user_led_Pin;
 801a070:	2320      	movs	r3, #32
 801a072:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801a074:	2301      	movs	r3, #1
 801a076:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a078:	2300      	movs	r3, #0
 801a07a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801a07c:	2303      	movs	r3, #3
 801a07e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(user_led_GPIO_Port, &GPIO_InitStruct);
 801a080:	f107 030c 	add.w	r3, r7, #12
 801a084:	4619      	mov	r1, r3
 801a086:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801a08a:	f001 fd81 	bl	801bb90 <HAL_GPIO_Init>

}
 801a08e:	bf00      	nop
 801a090:	3720      	adds	r7, #32
 801a092:	46bd      	mov	sp, r7
 801a094:	bd80      	pop	{r7, pc}
 801a096:	bf00      	nop
 801a098:	40021000 	.word	0x40021000
 801a09c:	48000800 	.word	0x48000800

0801a0a0 <_ZSt6strstrPcPKc>:
  strrchr(char* __s, int __n)
  { return __builtin_strrchr(__s, __n); }

  inline char*
  strstr(char* __s1, const char* __s2)
  { return __builtin_strstr(__s1, __s2); }
 801a0a0:	b580      	push	{r7, lr}
 801a0a2:	b082      	sub	sp, #8
 801a0a4:	af00      	add	r7, sp, #0
 801a0a6:	6078      	str	r0, [r7, #4]
 801a0a8:	6039      	str	r1, [r7, #0]
 801a0aa:	6839      	ldr	r1, [r7, #0]
 801a0ac:	6878      	ldr	r0, [r7, #4]
 801a0ae:	f006 f911 	bl	80202d4 <strstr>
 801a0b2:	4603      	mov	r3, r0
 801a0b4:	4618      	mov	r0, r3
 801a0b6:	3708      	adds	r7, #8
 801a0b8:	46bd      	mov	sp, r7
 801a0ba:	bd80      	pop	{r7, pc}

0801a0bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 801a0bc:	b5b0      	push	{r4, r5, r7, lr}
 801a0be:	b096      	sub	sp, #88	; 0x58
 801a0c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	SCB->VTOR = (uint32_t)0x08019000;
 801a0c2:	4b83      	ldr	r3, [pc, #524]	; (801a2d0 <main+0x214>)
 801a0c4:	4a83      	ldr	r2, [pc, #524]	; (801a2d4 <main+0x218>)
 801a0c6:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801a0c8:	f001 f87f 	bl	801b1ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801a0cc:	f000 f92e 	bl	801a32c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 801a0d0:	f7ff ff8c 	bl	8019fec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 801a0d4:	f000 ff9c 	bl	801b010 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 801a0d8:	f000 ff6a 	bl	801afb0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Sim7600.init() ;
 801a0dc:	487e      	ldr	r0, [pc, #504]	; (801a2d8 <main+0x21c>)
 801a0de:	f004 fe65 	bl	801edac <_ZN7Sim76004initEv>
  Terminal.init() ;
 801a0e2:	487e      	ldr	r0, [pc, #504]	; (801a2dc <main+0x220>)
 801a0e4:	f004 ff76 	bl	801efd4 <_ZN8Terminal4initEv>

  Terminal.println( "----------------------------------------------------------------------------------------------------------------" ) ;
 801a0e8:	497d      	ldr	r1, [pc, #500]	; (801a2e0 <main+0x224>)
 801a0ea:	487c      	ldr	r0, [pc, #496]	; (801a2dc <main+0x220>)
 801a0ec:	f004 ffb8 	bl	801f060 <_ZN8Terminal7printlnEPKc>
  Terminal.println( "                                             FIRMWARE OVER THE AIR UPDATE" ) ;
 801a0f0:	497c      	ldr	r1, [pc, #496]	; (801a2e4 <main+0x228>)
 801a0f2:	487a      	ldr	r0, [pc, #488]	; (801a2dc <main+0x220>)
 801a0f4:	f004 ffb4 	bl	801f060 <_ZN8Terminal7printlnEPKc>
  Terminal.println( "----------------------------------------------------------------------------------------------------------------" ) ;
 801a0f8:	4979      	ldr	r1, [pc, #484]	; (801a2e0 <main+0x224>)
 801a0fa:	4878      	ldr	r0, [pc, #480]	; (801a2dc <main+0x220>)
 801a0fc:	f004 ffb0 	bl	801f060 <_ZN8Terminal7printlnEPKc>
  Terminal.println( "Booting on...\nPlease wait for 30 second !" ) ;
 801a100:	4979      	ldr	r1, [pc, #484]	; (801a2e8 <main+0x22c>)
 801a102:	4876      	ldr	r0, [pc, #472]	; (801a2dc <main+0x220>)
 801a104:	f004 ffac 	bl	801f060 <_ZN8Terminal7printlnEPKc>

  Sim7600.sendCmd( "AT+CRESET", "", 200 ) ;
 801a108:	23c8      	movs	r3, #200	; 0xc8
 801a10a:	4a78      	ldr	r2, [pc, #480]	; (801a2ec <main+0x230>)
 801a10c:	4978      	ldr	r1, [pc, #480]	; (801a2f0 <main+0x234>)
 801a10e:	4872      	ldr	r0, [pc, #456]	; (801a2d8 <main+0x21c>)
 801a110:	f004 fe90 	bl	801ee34 <_ZN7Sim76007sendCmdEPKcS1_j>
  HAL_Delay(30000) ;
 801a114:	f247 5030 	movw	r0, #30000	; 0x7530
 801a118:	f001 f8cc 	bl	801b2b4 <HAL_Delay>
  Sim7600.sendCmd( "AT", "OK", 200 ) ;
 801a11c:	23c8      	movs	r3, #200	; 0xc8
 801a11e:	4a75      	ldr	r2, [pc, #468]	; (801a2f4 <main+0x238>)
 801a120:	4975      	ldr	r1, [pc, #468]	; (801a2f8 <main+0x23c>)
 801a122:	486d      	ldr	r0, [pc, #436]	; (801a2d8 <main+0x21c>)
 801a124:	f004 fe86 	bl	801ee34 <_ZN7Sim76007sendCmdEPKcS1_j>
  Sim7600.sendCmd( "AT+FSCD=E:", "OK", 200 ) ;
 801a128:	23c8      	movs	r3, #200	; 0xc8
 801a12a:	4a72      	ldr	r2, [pc, #456]	; (801a2f4 <main+0x238>)
 801a12c:	4973      	ldr	r1, [pc, #460]	; (801a2fc <main+0x240>)
 801a12e:	486a      	ldr	r0, [pc, #424]	; (801a2d8 <main+0x21c>)
 801a130:	f004 fe80 	bl	801ee34 <_ZN7Sim76007sendCmdEPKcS1_j>
  Sim7600.sendCmd( "AT+CATR=1", "OK", 200 ) ;
 801a134:	23c8      	movs	r3, #200	; 0xc8
 801a136:	4a6f      	ldr	r2, [pc, #444]	; (801a2f4 <main+0x238>)
 801a138:	4971      	ldr	r1, [pc, #452]	; (801a300 <main+0x244>)
 801a13a:	4867      	ldr	r0, [pc, #412]	; (801a2d8 <main+0x21c>)
 801a13c:	f004 fe7a 	bl	801ee34 <_ZN7Sim76007sendCmdEPKcS1_j>
  Sim7600.memreset() ;
 801a140:	4865      	ldr	r0, [pc, #404]	; (801a2d8 <main+0x21c>)
 801a142:	f004 fe63 	bl	801ee0c <_ZN7Sim76008memresetEv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	// Code start here :


  char curVersionOnFLASH[24] = {0} ;
 801a146:	2300      	movs	r3, #0
 801a148:	63bb      	str	r3, [r7, #56]	; 0x38
 801a14a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801a14e:	2200      	movs	r2, #0
 801a150:	601a      	str	r2, [r3, #0]
 801a152:	605a      	str	r2, [r3, #4]
 801a154:	609a      	str	r2, [r3, #8]
 801a156:	60da      	str	r2, [r3, #12]
 801a158:	611a      	str	r2, [r3, #16]
  memcpy( curVersionOnFLASH, getCurrentVersion(), 24 ) ;
 801a15a:	f000 fbbd 	bl	801a8d8 <_Z17getCurrentVersionv>
 801a15e:	4603      	mov	r3, r0
 801a160:	f107 0438 	add.w	r4, r7, #56	; 0x38
 801a164:	461d      	mov	r5, r3
 801a166:	6828      	ldr	r0, [r5, #0]
 801a168:	6869      	ldr	r1, [r5, #4]
 801a16a:	68aa      	ldr	r2, [r5, #8]
 801a16c:	68eb      	ldr	r3, [r5, #12]
 801a16e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a170:	6928      	ldr	r0, [r5, #16]
 801a172:	6969      	ldr	r1, [r5, #20]
 801a174:	c403      	stmia	r4!, {r0, r1}

  char onSimVersion[25] = {0} ;
 801a176:	2300      	movs	r3, #0
 801a178:	61fb      	str	r3, [r7, #28]
 801a17a:	f107 0320 	add.w	r3, r7, #32
 801a17e:	2200      	movs	r2, #0
 801a180:	601a      	str	r2, [r3, #0]
 801a182:	605a      	str	r2, [r3, #4]
 801a184:	609a      	str	r2, [r3, #8]
 801a186:	60da      	str	r2, [r3, #12]
 801a188:	611a      	str	r2, [r3, #16]
 801a18a:	751a      	strb	r2, [r3, #20]
  memcpy( onSimVersion, getOnSimVersion(), 24 ) ;
 801a18c:	f000 fc4c 	bl	801aa28 <_Z15getOnSimVersionv>
 801a190:	4601      	mov	r1, r0
 801a192:	f107 031c 	add.w	r3, r7, #28
 801a196:	2218      	movs	r2, #24
 801a198:	4618      	mov	r0, r3
 801a19a:	f005 f8cd 	bl	801f338 <memcpy>

  Terminal.println( "Checking..." ) ;
 801a19e:	4959      	ldr	r1, [pc, #356]	; (801a304 <main+0x248>)
 801a1a0:	484e      	ldr	r0, [pc, #312]	; (801a2dc <main+0x220>)
 801a1a2:	f004 ff5d 	bl	801f060 <_ZN8Terminal7printlnEPKc>
  if( strstr( onSimVersion, curVersionOnFLASH ) == NULL ) {
 801a1a6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801a1aa:	f107 031c 	add.w	r3, r7, #28
 801a1ae:	4611      	mov	r1, r2
 801a1b0:	4618      	mov	r0, r3
 801a1b2:	f7ff ff75 	bl	801a0a0 <_ZSt6strstrPcPKc>
 801a1b6:	4603      	mov	r3, r0
 801a1b8:	2b00      	cmp	r3, #0
 801a1ba:	bf0c      	ite	eq
 801a1bc:	2301      	moveq	r3, #1
 801a1be:	2300      	movne	r3, #0
 801a1c0:	b2db      	uxtb	r3, r3
 801a1c2:	2b00      	cmp	r3, #0
 801a1c4:	d07d      	beq.n	801a2c2 <main+0x206>
	  // Start write firmware tai day
	  Terminal.println( "*New program version detected!\nPage ereasing... " ) ;
 801a1c6:	4950      	ldr	r1, [pc, #320]	; (801a308 <main+0x24c>)
 801a1c8:	4844      	ldr	r0, [pc, #272]	; (801a2dc <main+0x220>)
 801a1ca:	f004 ff49 	bl	801f060 <_ZN8Terminal7printlnEPKc>
	  for( int i = 0; i <= 150; i++ )
 801a1ce:	2300      	movs	r3, #0
 801a1d0:	657b      	str	r3, [r7, #84]	; 0x54
 801a1d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a1d4:	2b96      	cmp	r3, #150	; 0x96
 801a1d6:	dc08      	bgt.n	801a1ea <main+0x12e>
		  Flash_erase( i + 125 ) ;
 801a1d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a1da:	337d      	adds	r3, #125	; 0x7d
 801a1dc:	4618      	mov	r0, r3
 801a1de:	f004 fac1 	bl	801e764 <_Z11Flash_erasem>
	  for( int i = 0; i <= 150; i++ )
 801a1e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a1e4:	3301      	adds	r3, #1
 801a1e6:	657b      	str	r3, [r7, #84]	; 0x54
 801a1e8:	e7f3      	b.n	801a1d2 <main+0x116>

	  Terminal.print( "Done.\nNow flashing... " ) ;
 801a1ea:	4948      	ldr	r1, [pc, #288]	; (801a30c <main+0x250>)
 801a1ec:	483b      	ldr	r0, [pc, #236]	; (801a2dc <main+0x220>)
 801a1ee:	f004 ff21 	bl	801f034 <_ZN8Terminal5printEPKc>
	  if( CF_writeBFFWtoFlash( appFW_BaseAddress ) == true )
 801a1f2:	4b47      	ldr	r3, [pc, #284]	; (801a310 <main+0x254>)
 801a1f4:	681b      	ldr	r3, [r3, #0]
 801a1f6:	4618      	mov	r0, r3
 801a1f8:	f000 fa84 	bl	801a704 <_Z19CF_writeBFFWtoFlashm>
 801a1fc:	4603      	mov	r3, r0
 801a1fe:	2b01      	cmp	r3, #1
 801a200:	bf0c      	ite	eq
 801a202:	2301      	moveq	r3, #1
 801a204:	2300      	movne	r3, #0
 801a206:	b2db      	uxtb	r3, r3
 801a208:	2b00      	cmp	r3, #0
 801a20a:	d004      	beq.n	801a216 <main+0x15a>
		  Terminal.println( "...Flash successful!" ) ;
 801a20c:	4941      	ldr	r1, [pc, #260]	; (801a314 <main+0x258>)
 801a20e:	4833      	ldr	r0, [pc, #204]	; (801a2dc <main+0x220>)
 801a210:	f004 ff26 	bl	801f060 <_ZN8Terminal7printlnEPKc>
 801a214:	e003      	b.n	801a21e <main+0x162>
	  else
		  Terminal.println( "...Flash failed! Please try again!" ) ;
 801a216:	4940      	ldr	r1, [pc, #256]	; (801a318 <main+0x25c>)
 801a218:	4830      	ldr	r0, [pc, #192]	; (801a2dc <main+0x220>)
 801a21a:	f004 ff21 	bl	801f060 <_ZN8Terminal7printlnEPKc>

	  for( int i = 0 ; i < 6 ; i++ ) {
 801a21e:	2300      	movs	r3, #0
 801a220:	653b      	str	r3, [r7, #80]	; 0x50
 801a222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a224:	2b05      	cmp	r3, #5
 801a226:	dc0c      	bgt.n	801a242 <main+0x186>
		  HAL_GPIO_TogglePin( user_led_GPIO_Port,  user_led_Pin ) ;
 801a228:	2120      	movs	r1, #32
 801a22a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801a22e:	f001 fe71 	bl	801bf14 <HAL_GPIO_TogglePin>
		  HAL_Delay(500) ;
 801a232:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801a236:	f001 f83d 	bl	801b2b4 <HAL_Delay>
	  for( int i = 0 ; i < 6 ; i++ ) {
 801a23a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a23c:	3301      	adds	r3, #1
 801a23e:	653b      	str	r3, [r7, #80]	; 0x50
 801a240:	e7ef      	b.n	801a222 <main+0x166>

	  }

	  HAL_GPIO_WritePin( user_led_GPIO_Port,  user_led_Pin, (GPIO_PinState)0 ) ;
 801a242:	2200      	movs	r2, #0
 801a244:	2120      	movs	r1, #32
 801a246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801a24a:	f001 fe4b 	bl	801bee4 <HAL_GPIO_WritePin>

	  // lưu lại firmware hiện tại
	  Terminal.println( "Saving... " ) ;
 801a24e:	4933      	ldr	r1, [pc, #204]	; (801a31c <main+0x260>)
 801a250:	4822      	ldr	r0, [pc, #136]	; (801a2dc <main+0x220>)
 801a252:	f004 ff05 	bl	801f060 <_ZN8Terminal7printlnEPKc>
	  char savedVersion[25] = {0} ;
 801a256:	2300      	movs	r3, #0
 801a258:	603b      	str	r3, [r7, #0]
 801a25a:	1d3b      	adds	r3, r7, #4
 801a25c:	2200      	movs	r2, #0
 801a25e:	601a      	str	r2, [r3, #0]
 801a260:	605a      	str	r2, [r3, #4]
 801a262:	609a      	str	r2, [r3, #8]
 801a264:	60da      	str	r2, [r3, #12]
 801a266:	611a      	str	r2, [r3, #16]
 801a268:	751a      	strb	r2, [r3, #20]
	  HAL_Delay(1000) ;
 801a26a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a26e:	f001 f821 	bl	801b2b4 <HAL_Delay>
	  memcpy( savedVersion, getOnSimVersion(), 24 ) ;
 801a272:	f000 fbd9 	bl	801aa28 <_Z15getOnSimVersionv>
 801a276:	4601      	mov	r1, r0
 801a278:	463b      	mov	r3, r7
 801a27a:	2218      	movs	r2, #24
 801a27c:	4618      	mov	r0, r3
 801a27e:	f005 f85b 	bl	801f338 <memcpy>
	  Flash_erase(500) ;
 801a282:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801a286:	f004 fa6d 	bl	801e764 <_Z11Flash_erasem>
	  HAL_Delay(1000) ;
 801a28a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a28e:	f001 f811 	bl	801b2b4 <HAL_Delay>
	  Flash_write( 0x080FA000, (const uint8_t*)savedVersion, strlen( savedVersion ) ) ;
 801a292:	463b      	mov	r3, r7
 801a294:	4618      	mov	r0, r3
 801a296:	f7fe ffeb 	bl	8019270 <strlen>
 801a29a:	4603      	mov	r3, r0
 801a29c:	461a      	mov	r2, r3
 801a29e:	463b      	mov	r3, r7
 801a2a0:	4619      	mov	r1, r3
 801a2a2:	481f      	ldr	r0, [pc, #124]	; (801a320 <main+0x264>)
 801a2a4:	f004 fa8a 	bl	801e7bc <_Z11Flash_writemPKhi>
	  Terminal.print( "Done" ) ;
 801a2a8:	491e      	ldr	r1, [pc, #120]	; (801a324 <main+0x268>)
 801a2aa:	480c      	ldr	r0, [pc, #48]	; (801a2dc <main+0x220>)
 801a2ac:	f004 fec2 	bl	801f034 <_ZN8Terminal5printEPKc>

	  Sim7600.sendCmd( "AT+CRESET", "", 100 ) ;
 801a2b0:	2364      	movs	r3, #100	; 0x64
 801a2b2:	4a0e      	ldr	r2, [pc, #56]	; (801a2ec <main+0x230>)
 801a2b4:	490e      	ldr	r1, [pc, #56]	; (801a2f0 <main+0x234>)
 801a2b6:	4808      	ldr	r0, [pc, #32]	; (801a2d8 <main+0x21c>)
 801a2b8:	f004 fdbc 	bl	801ee34 <_ZN7Sim76007sendCmdEPKcS1_j>
	  HAL_NVIC_SystemReset() ;
 801a2bc:	f001 f939 	bl	801b532 <HAL_NVIC_SystemReset>
 801a2c0:	e005      	b.n	801a2ce <main+0x212>

  }else {
	  Terminal.println( "Firmware version is up to date." ) ;
 801a2c2:	4919      	ldr	r1, [pc, #100]	; (801a328 <main+0x26c>)
 801a2c4:	4805      	ldr	r0, [pc, #20]	; (801a2dc <main+0x220>)
 801a2c6:	f004 fecb 	bl	801f060 <_ZN8Terminal7printlnEPKc>
	  HAL_NVIC_SystemReset() ;
 801a2ca:	f001 f932 	bl	801b532 <HAL_NVIC_SystemReset>
  }


  while (1)
 801a2ce:	e7fe      	b.n	801a2ce <main+0x212>
 801a2d0:	e000ed00 	.word	0xe000ed00
 801a2d4:	08019000 	.word	0x08019000
 801a2d8:	20000220 	.word	0x20000220
 801a2dc:	20000244 	.word	0x20000244
 801a2e0:	08023bc0 	.word	0x08023bc0
 801a2e4:	08023c34 	.word	0x08023c34
 801a2e8:	08023c80 	.word	0x08023c80
 801a2ec:	08023cac 	.word	0x08023cac
 801a2f0:	08023cb0 	.word	0x08023cb0
 801a2f4:	08023cbc 	.word	0x08023cbc
 801a2f8:	08023cc0 	.word	0x08023cc0
 801a2fc:	08023cc4 	.word	0x08023cc4
 801a300:	08023cd0 	.word	0x08023cd0
 801a304:	08023cdc 	.word	0x08023cdc
 801a308:	08023ce8 	.word	0x08023ce8
 801a30c:	08023d1c 	.word	0x08023d1c
 801a310:	20000000 	.word	0x20000000
 801a314:	08023d34 	.word	0x08023d34
 801a318:	08023d4c 	.word	0x08023d4c
 801a31c:	08023d70 	.word	0x08023d70
 801a320:	080fa000 	.word	0x080fa000
 801a324:	08023d7c 	.word	0x08023d7c
 801a328:	08023d84 	.word	0x08023d84

0801a32c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 801a32c:	b580      	push	{r7, lr}
 801a32e:	b0b8      	sub	sp, #224	; 0xe0
 801a330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801a332:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801a336:	2244      	movs	r2, #68	; 0x44
 801a338:	2100      	movs	r1, #0
 801a33a:	4618      	mov	r0, r3
 801a33c:	f005 f824 	bl	801f388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801a340:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801a344:	2200      	movs	r2, #0
 801a346:	601a      	str	r2, [r3, #0]
 801a348:	605a      	str	r2, [r3, #4]
 801a34a:	609a      	str	r2, [r3, #8]
 801a34c:	60da      	str	r2, [r3, #12]
 801a34e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801a350:	463b      	mov	r3, r7
 801a352:	2288      	movs	r2, #136	; 0x88
 801a354:	2100      	movs	r1, #0
 801a356:	4618      	mov	r0, r3
 801a358:	f005 f816 	bl	801f388 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 801a35c:	2302      	movs	r3, #2
 801a35e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801a362:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a366:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 801a36a:	2310      	movs	r3, #16
 801a36c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801a370:	2302      	movs	r3, #2
 801a372:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 801a376:	2302      	movs	r3, #2
 801a378:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 801a37c:	2301      	movs	r3, #1
 801a37e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 801a382:	230a      	movs	r3, #10
 801a384:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 801a388:	2307      	movs	r3, #7
 801a38a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 801a38e:	2302      	movs	r3, #2
 801a390:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 801a394:	2302      	movs	r3, #2
 801a396:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801a39a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801a39e:	4618      	mov	r0, r3
 801a3a0:	f001 fe36 	bl	801c010 <HAL_RCC_OscConfig>
 801a3a4:	4603      	mov	r3, r0
 801a3a6:	2b00      	cmp	r3, #0
 801a3a8:	bf14      	ite	ne
 801a3aa:	2301      	movne	r3, #1
 801a3ac:	2300      	moveq	r3, #0
 801a3ae:	b2db      	uxtb	r3, r3
 801a3b0:	2b00      	cmp	r3, #0
 801a3b2:	d001      	beq.n	801a3b8 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 801a3b4:	f000 fc5c 	bl	801ac70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801a3b8:	230f      	movs	r3, #15
 801a3ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801a3be:	2303      	movs	r3, #3
 801a3c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801a3c4:	2300      	movs	r3, #0
 801a3c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 801a3ca:	2300      	movs	r3, #0
 801a3cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801a3d0:	2300      	movs	r3, #0
 801a3d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 801a3d6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801a3da:	2104      	movs	r1, #4
 801a3dc:	4618      	mov	r0, r3
 801a3de:	f002 f9fd 	bl	801c7dc <HAL_RCC_ClockConfig>
 801a3e2:	4603      	mov	r3, r0
 801a3e4:	2b00      	cmp	r3, #0
 801a3e6:	bf14      	ite	ne
 801a3e8:	2301      	movne	r3, #1
 801a3ea:	2300      	moveq	r3, #0
 801a3ec:	b2db      	uxtb	r3, r3
 801a3ee:	2b00      	cmp	r3, #0
 801a3f0:	d001      	beq.n	801a3f6 <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 801a3f2:	f000 fc3d 	bl	801ac70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 801a3f6:	2303      	movs	r3, #3
 801a3f8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 801a3fa:	2300      	movs	r3, #0
 801a3fc:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 801a3fe:	2300      	movs	r3, #0
 801a400:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801a402:	463b      	mov	r3, r7
 801a404:	4618      	mov	r0, r3
 801a406:	f002 fbef 	bl	801cbe8 <HAL_RCCEx_PeriphCLKConfig>
 801a40a:	4603      	mov	r3, r0
 801a40c:	2b00      	cmp	r3, #0
 801a40e:	bf14      	ite	ne
 801a410:	2301      	movne	r3, #1
 801a412:	2300      	moveq	r3, #0
 801a414:	b2db      	uxtb	r3, r3
 801a416:	2b00      	cmp	r3, #0
 801a418:	d001      	beq.n	801a41e <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 801a41a:	f000 fc29 	bl	801ac70 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 801a41e:	f44f 7000 	mov.w	r0, #512	; 0x200
 801a422:	f001 fd9f 	bl	801bf64 <HAL_PWREx_ControlVoltageScaling>
 801a426:	4603      	mov	r3, r0
 801a428:	2b00      	cmp	r3, #0
 801a42a:	bf14      	ite	ne
 801a42c:	2301      	movne	r3, #1
 801a42e:	2300      	moveq	r3, #0
 801a430:	b2db      	uxtb	r3, r3
 801a432:	2b00      	cmp	r3, #0
 801a434:	d001      	beq.n	801a43a <_Z18SystemClock_Configv+0x10e>
  {
    Error_Handler();
 801a436:	f000 fc1b 	bl	801ac70 <Error_Handler>
  }
}
 801a43a:	bf00      	nop
 801a43c:	37e0      	adds	r7, #224	; 0xe0
 801a43e:	46bd      	mov	sp, r7
 801a440:	bd80      	pop	{r7, pc}
	...

0801a444 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */



/*____________________________________________________________________________________________________________________________________________*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 801a444:	b580      	push	{r7, lr}
 801a446:	b082      	sub	sp, #8
 801a448:	af00      	add	r7, sp, #0
 801a44a:	6078      	str	r0, [r7, #4]
	if( huart->Instance == USART1 )
 801a44c:	687b      	ldr	r3, [r7, #4]
 801a44e:	681b      	ldr	r3, [r3, #0]
 801a450:	4a09      	ldr	r2, [pc, #36]	; (801a478 <HAL_UART_RxCpltCallback+0x34>)
 801a452:	4293      	cmp	r3, r2
 801a454:	d103      	bne.n	801a45e <HAL_UART_RxCpltCallback+0x1a>
		Sim7600.irqProcess() ;
 801a456:	4809      	ldr	r0, [pc, #36]	; (801a47c <HAL_UART_RxCpltCallback+0x38>)
 801a458:	f004 fcb8 	bl	801edcc <_ZN7Sim760010irqProcessEv>
	else if( huart->Instance == USART2 )
		Terminal.irqProcess() ;
}
 801a45c:	e007      	b.n	801a46e <HAL_UART_RxCpltCallback+0x2a>
	else if( huart->Instance == USART2 )
 801a45e:	687b      	ldr	r3, [r7, #4]
 801a460:	681b      	ldr	r3, [r3, #0]
 801a462:	4a07      	ldr	r2, [pc, #28]	; (801a480 <HAL_UART_RxCpltCallback+0x3c>)
 801a464:	4293      	cmp	r3, r2
 801a466:	d102      	bne.n	801a46e <HAL_UART_RxCpltCallback+0x2a>
		Terminal.irqProcess() ;
 801a468:	4806      	ldr	r0, [pc, #24]	; (801a484 <HAL_UART_RxCpltCallback+0x40>)
 801a46a:	f004 fdc3 	bl	801eff4 <_ZN8Terminal10irqProcessEv>
}
 801a46e:	bf00      	nop
 801a470:	3708      	adds	r7, #8
 801a472:	46bd      	mov	sp, r7
 801a474:	bd80      	pop	{r7, pc}
 801a476:	bf00      	nop
 801a478:	40013800 	.word	0x40013800
 801a47c:	20000220 	.word	0x20000220
 801a480:	40004400 	.word	0x40004400
 801a484:	20000244 	.word	0x20000244

0801a488 <_Z10parseToHexcc>:

/*____________________________________________________________________________________________________________________________________________*/
/*
 * parse from 2 character type 'A' and 'B' to 0xAB
 */
uint8_t parseToHex( char c0, char c1 ){
 801a488:	b480      	push	{r7}
 801a48a:	b085      	sub	sp, #20
 801a48c:	af00      	add	r7, sp, #0
 801a48e:	4603      	mov	r3, r0
 801a490:	460a      	mov	r2, r1
 801a492:	71fb      	strb	r3, [r7, #7]
 801a494:	4613      	mov	r3, r2
 801a496:	71bb      	strb	r3, [r7, #6]
	uint8_t result = 0x00 ;
 801a498:	2300      	movs	r3, #0
 801a49a:	73fb      	strb	r3, [r7, #15]
    if ('0' <= c0 && c0 <= '9') result = c0 - '0';
 801a49c:	79fb      	ldrb	r3, [r7, #7]
 801a49e:	2b2f      	cmp	r3, #47	; 0x2f
 801a4a0:	d905      	bls.n	801a4ae <_Z10parseToHexcc+0x26>
 801a4a2:	79fb      	ldrb	r3, [r7, #7]
 801a4a4:	2b39      	cmp	r3, #57	; 0x39
 801a4a6:	d802      	bhi.n	801a4ae <_Z10parseToHexcc+0x26>
 801a4a8:	79fb      	ldrb	r3, [r7, #7]
 801a4aa:	3b30      	subs	r3, #48	; 0x30
 801a4ac:	73fb      	strb	r3, [r7, #15]
    if ('a' <= c0 && c0 <= 'f') result = 10 + c0 - 'a';
 801a4ae:	79fb      	ldrb	r3, [r7, #7]
 801a4b0:	2b60      	cmp	r3, #96	; 0x60
 801a4b2:	d905      	bls.n	801a4c0 <_Z10parseToHexcc+0x38>
 801a4b4:	79fb      	ldrb	r3, [r7, #7]
 801a4b6:	2b66      	cmp	r3, #102	; 0x66
 801a4b8:	d802      	bhi.n	801a4c0 <_Z10parseToHexcc+0x38>
 801a4ba:	79fb      	ldrb	r3, [r7, #7]
 801a4bc:	3b57      	subs	r3, #87	; 0x57
 801a4be:	73fb      	strb	r3, [r7, #15]
    if ('A' <= c0 && c0 <= 'F') result = 10 + c0 - 'A';
 801a4c0:	79fb      	ldrb	r3, [r7, #7]
 801a4c2:	2b40      	cmp	r3, #64	; 0x40
 801a4c4:	d905      	bls.n	801a4d2 <_Z10parseToHexcc+0x4a>
 801a4c6:	79fb      	ldrb	r3, [r7, #7]
 801a4c8:	2b46      	cmp	r3, #70	; 0x46
 801a4ca:	d802      	bhi.n	801a4d2 <_Z10parseToHexcc+0x4a>
 801a4cc:	79fb      	ldrb	r3, [r7, #7]
 801a4ce:	3b37      	subs	r3, #55	; 0x37
 801a4d0:	73fb      	strb	r3, [r7, #15]

    result <<= 4 ;
 801a4d2:	7bfb      	ldrb	r3, [r7, #15]
 801a4d4:	011b      	lsls	r3, r3, #4
 801a4d6:	73fb      	strb	r3, [r7, #15]

    if ('0' <= c1 && c1 <= '9') result |= c1 - '0';
 801a4d8:	79bb      	ldrb	r3, [r7, #6]
 801a4da:	2b2f      	cmp	r3, #47	; 0x2f
 801a4dc:	d90b      	bls.n	801a4f6 <_Z10parseToHexcc+0x6e>
 801a4de:	79bb      	ldrb	r3, [r7, #6]
 801a4e0:	2b39      	cmp	r3, #57	; 0x39
 801a4e2:	d808      	bhi.n	801a4f6 <_Z10parseToHexcc+0x6e>
 801a4e4:	79bb      	ldrb	r3, [r7, #6]
 801a4e6:	3b30      	subs	r3, #48	; 0x30
 801a4e8:	b2db      	uxtb	r3, r3
 801a4ea:	b25a      	sxtb	r2, r3
 801a4ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a4f0:	4313      	orrs	r3, r2
 801a4f2:	b25b      	sxtb	r3, r3
 801a4f4:	73fb      	strb	r3, [r7, #15]
    if ('a' <= c1 && c1 <= 'f') result |= 10 + c1 - 'a';
 801a4f6:	79bb      	ldrb	r3, [r7, #6]
 801a4f8:	2b60      	cmp	r3, #96	; 0x60
 801a4fa:	d90b      	bls.n	801a514 <_Z10parseToHexcc+0x8c>
 801a4fc:	79bb      	ldrb	r3, [r7, #6]
 801a4fe:	2b66      	cmp	r3, #102	; 0x66
 801a500:	d808      	bhi.n	801a514 <_Z10parseToHexcc+0x8c>
 801a502:	79bb      	ldrb	r3, [r7, #6]
 801a504:	3b57      	subs	r3, #87	; 0x57
 801a506:	b2db      	uxtb	r3, r3
 801a508:	b25a      	sxtb	r2, r3
 801a50a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a50e:	4313      	orrs	r3, r2
 801a510:	b25b      	sxtb	r3, r3
 801a512:	73fb      	strb	r3, [r7, #15]
    if ('A' <= c1 && c1 <= 'F') result |= 10 + c1 - 'A';
 801a514:	79bb      	ldrb	r3, [r7, #6]
 801a516:	2b40      	cmp	r3, #64	; 0x40
 801a518:	d90b      	bls.n	801a532 <_Z10parseToHexcc+0xaa>
 801a51a:	79bb      	ldrb	r3, [r7, #6]
 801a51c:	2b46      	cmp	r3, #70	; 0x46
 801a51e:	d808      	bhi.n	801a532 <_Z10parseToHexcc+0xaa>
 801a520:	79bb      	ldrb	r3, [r7, #6]
 801a522:	3b37      	subs	r3, #55	; 0x37
 801a524:	b2db      	uxtb	r3, r3
 801a526:	b25a      	sxtb	r2, r3
 801a528:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a52c:	4313      	orrs	r3, r2
 801a52e:	b25b      	sxtb	r3, r3
 801a530:	73fb      	strb	r3, [r7, #15]

    return result ;
 801a532:	7bfb      	ldrb	r3, [r7, #15]

}
 801a534:	4618      	mov	r0, r3
 801a536:	3714      	adds	r7, #20
 801a538:	46bd      	mov	sp, r7
 801a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a53e:	4770      	bx	lr

0801a540 <_Z16CS_getDoubleWordm>:



/*____________________________________________________________________________________________________________________________________________*/
BF_dWordHArrTypeDef CS_getDoubleWord( uint32_t _address ) {
 801a540:	b5b0      	push	{r4, r5, r7, lr}
 801a542:	b0a0      	sub	sp, #128	; 0x80
 801a544:	af00      	add	r7, sp, #0
 801a546:	6078      	str	r0, [r7, #4]
 801a548:	6039      	str	r1, [r7, #0]
		for( int i = 0 ; i < 8 ; i++ )
			result.data[i] = dataZone[ i + 9 ] ;
	}


	return (BF_dWordHArrTypeDef)result ;
 801a54a:	466b      	mov	r3, sp
 801a54c:	461d      	mov	r5, r3
	result.isLastDWord = false ;
 801a54e:	4b65      	ldr	r3, [pc, #404]	; (801a6e4 <_Z16CS_getDoubleWordm+0x1a4>)
 801a550:	2200      	movs	r2, #0
 801a552:	701a      	strb	r2, [r3, #0]
	memset( result.data, 0x00, 8 ) ;
 801a554:	2208      	movs	r2, #8
 801a556:	2100      	movs	r1, #0
 801a558:	4863      	ldr	r0, [pc, #396]	; (801a6e8 <_Z16CS_getDoubleWordm+0x1a8>)
 801a55a:	f004 ff15 	bl	801f388 <memset>
	memcpy( fwName, getOnSimVersion(), 24 ) ;
 801a55e:	f000 fa63 	bl	801aa28 <_Z15getOnSimVersionv>
 801a562:	4603      	mov	r3, r0
 801a564:	2218      	movs	r2, #24
 801a566:	4619      	mov	r1, r3
 801a568:	4860      	ldr	r0, [pc, #384]	; (801a6ec <_Z16CS_getDoubleWordm+0x1ac>)
 801a56a:	f004 fee5 	bl	801f338 <memcpy>
	char cmd[ strlen( fwName ) + 30 ] = {0} ;
 801a56e:	485f      	ldr	r0, [pc, #380]	; (801a6ec <_Z16CS_getDoubleWordm+0x1ac>)
 801a570:	f7fe fe7e 	bl	8019270 <strlen>
 801a574:	4603      	mov	r3, r0
 801a576:	331d      	adds	r3, #29
 801a578:	461c      	mov	r4, r3
 801a57a:	677c      	str	r4, [r7, #116]	; 0x74
 801a57c:	4623      	mov	r3, r4
 801a57e:	3301      	adds	r3, #1
 801a580:	4618      	mov	r0, r3
 801a582:	f04f 0100 	mov.w	r1, #0
 801a586:	f04f 0200 	mov.w	r2, #0
 801a58a:	f04f 0300 	mov.w	r3, #0
 801a58e:	00cb      	lsls	r3, r1, #3
 801a590:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 801a594:	00c2      	lsls	r2, r0, #3
 801a596:	4623      	mov	r3, r4
 801a598:	3301      	adds	r3, #1
 801a59a:	4618      	mov	r0, r3
 801a59c:	f04f 0100 	mov.w	r1, #0
 801a5a0:	f04f 0200 	mov.w	r2, #0
 801a5a4:	f04f 0300 	mov.w	r3, #0
 801a5a8:	00cb      	lsls	r3, r1, #3
 801a5aa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 801a5ae:	00c2      	lsls	r2, r0, #3
 801a5b0:	4623      	mov	r3, r4
 801a5b2:	3301      	adds	r3, #1
 801a5b4:	3307      	adds	r3, #7
 801a5b6:	08db      	lsrs	r3, r3, #3
 801a5b8:	00db      	lsls	r3, r3, #3
 801a5ba:	ebad 0d03 	sub.w	sp, sp, r3
 801a5be:	466b      	mov	r3, sp
 801a5c0:	3300      	adds	r3, #0
 801a5c2:	673b      	str	r3, [r7, #112]	; 0x70
 801a5c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a5c6:	2200      	movs	r2, #0
 801a5c8:	701a      	strb	r2, [r3, #0]
 801a5ca:	1c5a      	adds	r2, r3, #1
 801a5cc:	1e63      	subs	r3, r4, #1
 801a5ce:	2b00      	cmp	r3, #0
 801a5d0:	db04      	blt.n	801a5dc <_Z16CS_getDoubleWordm+0x9c>
 801a5d2:	2100      	movs	r1, #0
 801a5d4:	7011      	strb	r1, [r2, #0]
 801a5d6:	3201      	adds	r2, #1
 801a5d8:	3b01      	subs	r3, #1
 801a5da:	e7f8      	b.n	801a5ce <_Z16CS_getDoubleWordm+0x8e>
	sprintf( cmd, "AT+CFTRANTX=\"E:/%s\",%lu,8\r\n", fwName, _address ) ;
 801a5dc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 801a5de:	683b      	ldr	r3, [r7, #0]
 801a5e0:	4a42      	ldr	r2, [pc, #264]	; (801a6ec <_Z16CS_getDoubleWordm+0x1ac>)
 801a5e2:	4943      	ldr	r1, [pc, #268]	; (801a6f0 <_Z16CS_getDoubleWordm+0x1b0>)
 801a5e4:	f005 fe56 	bl	8020294 <siprintf>
	Sim7600.sendCmd( cmd, "+CFTRANTX: DATA", 5000 ) ;
 801a5e8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801a5ea:	f241 3388 	movw	r3, #5000	; 0x1388
 801a5ee:	4a41      	ldr	r2, [pc, #260]	; (801a6f4 <_Z16CS_getDoubleWordm+0x1b4>)
 801a5f0:	4841      	ldr	r0, [pc, #260]	; (801a6f8 <_Z16CS_getDoubleWordm+0x1b8>)
 801a5f2:	f004 fc1f 	bl	801ee34 <_ZN7Sim76007sendCmdEPKcS1_j>
	char dataZone[100] = {0} ;
 801a5f6:	2300      	movs	r3, #0
 801a5f8:	60bb      	str	r3, [r7, #8]
 801a5fa:	f107 030c 	add.w	r3, r7, #12
 801a5fe:	2260      	movs	r2, #96	; 0x60
 801a600:	2100      	movs	r1, #0
 801a602:	4618      	mov	r0, r3
 801a604:	f004 fec0 	bl	801f388 <memset>
	memcpy( dataZone, strstr( Sim7600.rxData.c_str(), "DATA" ), 75 ) ;
 801a608:	483c      	ldr	r0, [pc, #240]	; (801a6fc <_Z16CS_getDoubleWordm+0x1bc>)
 801a60a:	f004 fe2f 	bl	801f26c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 801a60e:	4603      	mov	r3, r0
 801a610:	493b      	ldr	r1, [pc, #236]	; (801a700 <_Z16CS_getDoubleWordm+0x1c0>)
 801a612:	4618      	mov	r0, r3
 801a614:	f005 fe5e 	bl	80202d4 <strstr>
 801a618:	4601      	mov	r1, r0
 801a61a:	f107 0308 	add.w	r3, r7, #8
 801a61e:	224b      	movs	r2, #75	; 0x4b
 801a620:	4618      	mov	r0, r3
 801a622:	f004 fe89 	bl	801f338 <memcpy>
	uint8_t restNbData = parseToHex( dataZone[6], dataZone[7] ) ;
 801a626:	7bbb      	ldrb	r3, [r7, #14]
 801a628:	7bfa      	ldrb	r2, [r7, #15]
 801a62a:	4611      	mov	r1, r2
 801a62c:	4618      	mov	r0, r3
 801a62e:	f7ff ff2b 	bl	801a488 <_Z10parseToHexcc>
 801a632:	4603      	mov	r3, r0
 801a634:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if( strstr( dataZone, "DATA" ) == NULL )
 801a638:	f107 0308 	add.w	r3, r7, #8
 801a63c:	4930      	ldr	r1, [pc, #192]	; (801a700 <_Z16CS_getDoubleWordm+0x1c0>)
 801a63e:	4618      	mov	r0, r3
 801a640:	f7ff fd2e 	bl	801a0a0 <_ZSt6strstrPcPKc>
 801a644:	4603      	mov	r3, r0
 801a646:	2b00      	cmp	r3, #0
 801a648:	bf0c      	ite	eq
 801a64a:	2301      	moveq	r3, #1
 801a64c:	2300      	movne	r3, #0
 801a64e:	b2db      	uxtb	r3, r3
 801a650:	2b00      	cmp	r3, #0
 801a652:	d003      	beq.n	801a65c <_Z16CS_getDoubleWordm+0x11c>
		result.isLastDWord = true ;
 801a654:	4b23      	ldr	r3, [pc, #140]	; (801a6e4 <_Z16CS_getDoubleWordm+0x1a4>)
 801a656:	2201      	movs	r2, #1
 801a658:	701a      	strb	r2, [r3, #0]
 801a65a:	e034      	b.n	801a6c6 <_Z16CS_getDoubleWordm+0x186>
	else if( restNbData < 0x08  ) {
 801a65c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801a660:	2b07      	cmp	r3, #7
 801a662:	d81a      	bhi.n	801a69a <_Z16CS_getDoubleWordm+0x15a>
		result.isLastDWord = true ;
 801a664:	4b1f      	ldr	r3, [pc, #124]	; (801a6e4 <_Z16CS_getDoubleWordm+0x1a4>)
 801a666:	2201      	movs	r2, #1
 801a668:	701a      	strb	r2, [r3, #0]
		for( int i = 0 ; i < restNbData ; i++ )
 801a66a:	2300      	movs	r3, #0
 801a66c:	67bb      	str	r3, [r7, #120]	; 0x78
 801a66e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801a672:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801a674:	429a      	cmp	r2, r3
 801a676:	da26      	bge.n	801a6c6 <_Z16CS_getDoubleWordm+0x186>
			result.data[i] = dataZone[ i + 9 ] ;
 801a678:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a67a:	3309      	adds	r3, #9
 801a67c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801a680:	4413      	add	r3, r2
 801a682:	f813 1c78 	ldrb.w	r1, [r3, #-120]
 801a686:	4a17      	ldr	r2, [pc, #92]	; (801a6e4 <_Z16CS_getDoubleWordm+0x1a4>)
 801a688:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a68a:	4413      	add	r3, r2
 801a68c:	3301      	adds	r3, #1
 801a68e:	460a      	mov	r2, r1
 801a690:	701a      	strb	r2, [r3, #0]
		for( int i = 0 ; i < restNbData ; i++ )
 801a692:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a694:	3301      	adds	r3, #1
 801a696:	67bb      	str	r3, [r7, #120]	; 0x78
 801a698:	e7e9      	b.n	801a66e <_Z16CS_getDoubleWordm+0x12e>
		for( int i = 0 ; i < 8 ; i++ )
 801a69a:	2300      	movs	r3, #0
 801a69c:	67fb      	str	r3, [r7, #124]	; 0x7c
 801a69e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801a6a0:	2b07      	cmp	r3, #7
 801a6a2:	dc10      	bgt.n	801a6c6 <_Z16CS_getDoubleWordm+0x186>
			result.data[i] = dataZone[ i + 9 ] ;
 801a6a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801a6a6:	3309      	adds	r3, #9
 801a6a8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801a6ac:	4413      	add	r3, r2
 801a6ae:	f813 1c78 	ldrb.w	r1, [r3, #-120]
 801a6b2:	4a0c      	ldr	r2, [pc, #48]	; (801a6e4 <_Z16CS_getDoubleWordm+0x1a4>)
 801a6b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801a6b6:	4413      	add	r3, r2
 801a6b8:	3301      	adds	r3, #1
 801a6ba:	460a      	mov	r2, r1
 801a6bc:	701a      	strb	r2, [r3, #0]
		for( int i = 0 ; i < 8 ; i++ )
 801a6be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801a6c0:	3301      	adds	r3, #1
 801a6c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 801a6c4:	e7eb      	b.n	801a69e <_Z16CS_getDoubleWordm+0x15e>
	return (BF_dWordHArrTypeDef)result ;
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	4906      	ldr	r1, [pc, #24]	; (801a6e4 <_Z16CS_getDoubleWordm+0x1a4>)
 801a6ca:	461a      	mov	r2, r3
 801a6cc:	460b      	mov	r3, r1
 801a6ce:	cb03      	ldmia	r3!, {r0, r1}
 801a6d0:	6010      	str	r0, [r2, #0]
 801a6d2:	6051      	str	r1, [r2, #4]
 801a6d4:	781b      	ldrb	r3, [r3, #0]
 801a6d6:	7213      	strb	r3, [r2, #8]
 801a6d8:	46ad      	mov	sp, r5
}
 801a6da:	6878      	ldr	r0, [r7, #4]
 801a6dc:	3780      	adds	r7, #128	; 0x80
 801a6de:	46bd      	mov	sp, r7
 801a6e0:	bdb0      	pop	{r4, r5, r7, pc}
 801a6e2:	bf00      	nop
 801a6e4:	20000268 	.word	0x20000268
 801a6e8:	20000269 	.word	0x20000269
 801a6ec:	20000274 	.word	0x20000274
 801a6f0:	08023da4 	.word	0x08023da4
 801a6f4:	08023dc0 	.word	0x08023dc0
 801a6f8:	20000220 	.word	0x20000220
 801a6fc:	20000224 	.word	0x20000224
 801a700:	08023dd0 	.word	0x08023dd0

0801a704 <_Z19CF_writeBFFWtoFlashm>:



/*____________________________________________________________________________________________________________________________________________*/
bool CF_writeBFFWtoFlash( uint32_t _baseAddress ) {
 801a704:	b580      	push	{r7, lr}
 801a706:	b08c      	sub	sp, #48	; 0x30
 801a708:	af00      	add	r7, sp, #0
 801a70a:	6178      	str	r0, [r7, #20]
	// Before start
	while( Sim7600.sendCmd( "AT", "OK", 100 ) == false )
 801a70c:	2364      	movs	r3, #100	; 0x64
 801a70e:	4a63      	ldr	r2, [pc, #396]	; (801a89c <_Z19CF_writeBFFWtoFlashm+0x198>)
 801a710:	4963      	ldr	r1, [pc, #396]	; (801a8a0 <_Z19CF_writeBFFWtoFlashm+0x19c>)
 801a712:	4864      	ldr	r0, [pc, #400]	; (801a8a4 <_Z19CF_writeBFFWtoFlashm+0x1a0>)
 801a714:	f004 fb8e 	bl	801ee34 <_ZN7Sim76007sendCmdEPKcS1_j>
 801a718:	4603      	mov	r3, r0
 801a71a:	2b00      	cmp	r3, #0
 801a71c:	bf0c      	ite	eq
 801a71e:	2301      	moveq	r3, #1
 801a720:	2300      	movne	r3, #0
 801a722:	b2db      	uxtb	r3, r3
 801a724:	2b00      	cmp	r3, #0
 801a726:	d004      	beq.n	801a732 <_Z19CF_writeBFFWtoFlashm+0x2e>
	  HAL_Delay( 2000 ) ;
 801a728:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 801a72c:	f000 fdc2 	bl	801b2b4 <HAL_Delay>
	while( Sim7600.sendCmd( "AT", "OK", 100 ) == false )
 801a730:	e7ec      	b.n	801a70c <_Z19CF_writeBFFWtoFlashm+0x8>

	bool result = false ;
 801a732:	2300      	movs	r3, #0
 801a734:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t address = 0x00 ;
 801a738:	2300      	movs	r3, #0
 801a73a:	62bb      	str	r3, [r7, #40]	; 0x28
	BF_dWordHArrTypeDef wDWord = { 0, 0 } ;
 801a73c:	2300      	movs	r3, #0
 801a73e:	773b      	strb	r3, [r7, #28]
 801a740:	4b59      	ldr	r3, [pc, #356]	; (801a8a8 <_Z19CF_writeBFFWtoFlashm+0x1a4>)
 801a742:	781b      	ldrb	r3, [r3, #0]
 801a744:	777b      	strb	r3, [r7, #29]
 801a746:	f107 031e 	add.w	r3, r7, #30
 801a74a:	2200      	movs	r2, #0
 801a74c:	601a      	str	r2, [r3, #0]
 801a74e:	f8c3 2003 	str.w	r2, [r3, #3]
	while(1) {
		// Lấy double word
		wDWord = CS_getDoubleWord( address ) ;
 801a752:	463b      	mov	r3, r7
 801a754:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a756:	4618      	mov	r0, r3
 801a758:	f7ff fef2 	bl	801a540 <_Z16CS_getDoubleWordm>
 801a75c:	f107 031c 	add.w	r3, r7, #28
 801a760:	463a      	mov	r2, r7
 801a762:	6810      	ldr	r0, [r2, #0]
 801a764:	6851      	ldr	r1, [r2, #4]
 801a766:	c303      	stmia	r3!, {r0, r1}
 801a768:	7a12      	ldrb	r2, [r2, #8]
 801a76a:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10) ;
 801a76c:	200a      	movs	r0, #10
 801a76e:	f000 fda1 	bl	801b2b4 <HAL_Delay>
//		Terminal.println( "Get double word done!" ) ;

		// Kiểm tra có phải đã đến data cuối cùng chưa ?
		if( ( wDWord.isLastDWord == true ) && ( address > 0x800 ) ) {
 801a772:	7f3b      	ldrb	r3, [r7, #28]
 801a774:	2b01      	cmp	r3, #1
 801a776:	d111      	bne.n	801a79c <_Z19CF_writeBFFWtoFlashm+0x98>
 801a778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a77a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a77e:	d90d      	bls.n	801a79c <_Z19CF_writeBFFWtoFlashm+0x98>
			Flash_write_doubleWord( address + _baseAddress, (const uint8_t*)wDWord.data ) ;
 801a780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a782:	697b      	ldr	r3, [r7, #20]
 801a784:	441a      	add	r2, r3
 801a786:	f107 031c 	add.w	r3, r7, #28
 801a78a:	3301      	adds	r3, #1
 801a78c:	4619      	mov	r1, r3
 801a78e:	4610      	mov	r0, r2
 801a790:	f004 f98d 	bl	801eaae <_Z22Flash_write_doubleWordmPKh>
			result = true ;
 801a794:	2301      	movs	r3, #1
 801a796:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break ;
 801a79a:	e070      	b.n	801a87e <_Z19CF_writeBFFWtoFlashm+0x17a>

		// Trường hợp này là bị lỗi chớ k phải đã hoàn thành
		}else if( ( wDWord.isLastDWord == true ) && ( address < 0x800 )  ){
 801a79c:	7f3b      	ldrb	r3, [r7, #28]
 801a79e:	2b01      	cmp	r3, #1
 801a7a0:	d103      	bne.n	801a7aa <_Z19CF_writeBFFWtoFlashm+0xa6>
 801a7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a7a8:	d369      	bcc.n	801a87e <_Z19CF_writeBFFWtoFlashm+0x17a>
			break ;

		// còn nếu chưa thì cứ tiếp tục
		}else {
			Flash_write_doubleWord( address + _baseAddress, (const uint8_t*)wDWord.data ) ;
 801a7aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a7ac:	697b      	ldr	r3, [r7, #20]
 801a7ae:	441a      	add	r2, r3
 801a7b0:	f107 031c 	add.w	r3, r7, #28
 801a7b4:	3301      	adds	r3, #1
 801a7b6:	4619      	mov	r1, r3
 801a7b8:	4610      	mov	r0, r2
 801a7ba:	f004 f978 	bl	801eaae <_Z22Flash_write_doubleWordmPKh>
			address += 0x08 ;
 801a7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7c0:	3308      	adds	r3, #8
 801a7c2:	62bb      	str	r3, [r7, #40]	; 0x28
		}
//		Terminal.println( "Write to flash done!" ) ;

		// Debug
		if( address == 0x0C60 )
 801a7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7c6:	f5b3 6f46 	cmp.w	r3, #3168	; 0xc60
 801a7ca:	d104      	bne.n	801a7d6 <_Z19CF_writeBFFWtoFlashm+0xd2>
			Terminal.println( "...10%..." ) ;
 801a7cc:	4937      	ldr	r1, [pc, #220]	; (801a8ac <_Z19CF_writeBFFWtoFlashm+0x1a8>)
 801a7ce:	4838      	ldr	r0, [pc, #224]	; (801a8b0 <_Z19CF_writeBFFWtoFlashm+0x1ac>)
 801a7d0:	f004 fc46 	bl	801f060 <_ZN8Terminal7printlnEPKc>
 801a7d4:	e04d      	b.n	801a872 <_Z19CF_writeBFFWtoFlashm+0x16e>
		else if( address == 0x18E0 )
 801a7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7d8:	f5b3 5fc7 	cmp.w	r3, #6368	; 0x18e0
 801a7dc:	d104      	bne.n	801a7e8 <_Z19CF_writeBFFWtoFlashm+0xe4>
			Terminal.println( "...20%..." ) ;
 801a7de:	4935      	ldr	r1, [pc, #212]	; (801a8b4 <_Z19CF_writeBFFWtoFlashm+0x1b0>)
 801a7e0:	4833      	ldr	r0, [pc, #204]	; (801a8b0 <_Z19CF_writeBFFWtoFlashm+0x1ac>)
 801a7e2:	f004 fc3d 	bl	801f060 <_ZN8Terminal7printlnEPKc>
 801a7e6:	e044      	b.n	801a872 <_Z19CF_writeBFFWtoFlashm+0x16e>
		else if( address == 0x2560 )
 801a7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7ea:	f242 5260 	movw	r2, #9568	; 0x2560
 801a7ee:	4293      	cmp	r3, r2
 801a7f0:	d104      	bne.n	801a7fc <_Z19CF_writeBFFWtoFlashm+0xf8>
			Terminal.println( "...30%..." ) ;
 801a7f2:	4931      	ldr	r1, [pc, #196]	; (801a8b8 <_Z19CF_writeBFFWtoFlashm+0x1b4>)
 801a7f4:	482e      	ldr	r0, [pc, #184]	; (801a8b0 <_Z19CF_writeBFFWtoFlashm+0x1ac>)
 801a7f6:	f004 fc33 	bl	801f060 <_ZN8Terminal7printlnEPKc>
 801a7fa:	e03a      	b.n	801a872 <_Z19CF_writeBFFWtoFlashm+0x16e>
		else if( address == 0x31E0 )
 801a7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7fe:	f243 12e0 	movw	r2, #12768	; 0x31e0
 801a802:	4293      	cmp	r3, r2
 801a804:	d104      	bne.n	801a810 <_Z19CF_writeBFFWtoFlashm+0x10c>
			Terminal.println( "...40%..." ) ;
 801a806:	492d      	ldr	r1, [pc, #180]	; (801a8bc <_Z19CF_writeBFFWtoFlashm+0x1b8>)
 801a808:	4829      	ldr	r0, [pc, #164]	; (801a8b0 <_Z19CF_writeBFFWtoFlashm+0x1ac>)
 801a80a:	f004 fc29 	bl	801f060 <_ZN8Terminal7printlnEPKc>
 801a80e:	e030      	b.n	801a872 <_Z19CF_writeBFFWtoFlashm+0x16e>
		else if( address == 0x3E60 )
 801a810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a812:	f643 6260 	movw	r2, #15968	; 0x3e60
 801a816:	4293      	cmp	r3, r2
 801a818:	d104      	bne.n	801a824 <_Z19CF_writeBFFWtoFlashm+0x120>
			Terminal.println( "...50%..." ) ;
 801a81a:	4929      	ldr	r1, [pc, #164]	; (801a8c0 <_Z19CF_writeBFFWtoFlashm+0x1bc>)
 801a81c:	4824      	ldr	r0, [pc, #144]	; (801a8b0 <_Z19CF_writeBFFWtoFlashm+0x1ac>)
 801a81e:	f004 fc1f 	bl	801f060 <_ZN8Terminal7printlnEPKc>
 801a822:	e026      	b.n	801a872 <_Z19CF_writeBFFWtoFlashm+0x16e>
		else if( address == 0x4AE0 )
 801a824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a826:	f644 22e0 	movw	r2, #19168	; 0x4ae0
 801a82a:	4293      	cmp	r3, r2
 801a82c:	d104      	bne.n	801a838 <_Z19CF_writeBFFWtoFlashm+0x134>
			Terminal.println( "...60%..." ) ;
 801a82e:	4925      	ldr	r1, [pc, #148]	; (801a8c4 <_Z19CF_writeBFFWtoFlashm+0x1c0>)
 801a830:	481f      	ldr	r0, [pc, #124]	; (801a8b0 <_Z19CF_writeBFFWtoFlashm+0x1ac>)
 801a832:	f004 fc15 	bl	801f060 <_ZN8Terminal7printlnEPKc>
 801a836:	e01c      	b.n	801a872 <_Z19CF_writeBFFWtoFlashm+0x16e>
		else if( address == 0x5760 )
 801a838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a83a:	f245 7260 	movw	r2, #22368	; 0x5760
 801a83e:	4293      	cmp	r3, r2
 801a840:	d104      	bne.n	801a84c <_Z19CF_writeBFFWtoFlashm+0x148>
			Terminal.println( "...70%..." ) ;
 801a842:	4921      	ldr	r1, [pc, #132]	; (801a8c8 <_Z19CF_writeBFFWtoFlashm+0x1c4>)
 801a844:	481a      	ldr	r0, [pc, #104]	; (801a8b0 <_Z19CF_writeBFFWtoFlashm+0x1ac>)
 801a846:	f004 fc0b 	bl	801f060 <_ZN8Terminal7printlnEPKc>
 801a84a:	e012      	b.n	801a872 <_Z19CF_writeBFFWtoFlashm+0x16e>
		else if( address == 0x63E0 )
 801a84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a84e:	f246 32e0 	movw	r2, #25568	; 0x63e0
 801a852:	4293      	cmp	r3, r2
 801a854:	d104      	bne.n	801a860 <_Z19CF_writeBFFWtoFlashm+0x15c>
			Terminal.println( "...80%..." ) ;
 801a856:	491d      	ldr	r1, [pc, #116]	; (801a8cc <_Z19CF_writeBFFWtoFlashm+0x1c8>)
 801a858:	4815      	ldr	r0, [pc, #84]	; (801a8b0 <_Z19CF_writeBFFWtoFlashm+0x1ac>)
 801a85a:	f004 fc01 	bl	801f060 <_ZN8Terminal7printlnEPKc>
 801a85e:	e008      	b.n	801a872 <_Z19CF_writeBFFWtoFlashm+0x16e>
		else if( address == 0x76A0 )
 801a860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a862:	f247 62a0 	movw	r2, #30368	; 0x76a0
 801a866:	4293      	cmp	r3, r2
 801a868:	d103      	bne.n	801a872 <_Z19CF_writeBFFWtoFlashm+0x16e>
			Terminal.println( "...90%..." ) ;
 801a86a:	4919      	ldr	r1, [pc, #100]	; (801a8d0 <_Z19CF_writeBFFWtoFlashm+0x1cc>)
 801a86c:	4810      	ldr	r0, [pc, #64]	; (801a8b0 <_Z19CF_writeBFFWtoFlashm+0x1ac>)
 801a86e:	f004 fbf7 	bl	801f060 <_ZN8Terminal7printlnEPKc>

		HAL_GPIO_TogglePin( user_led_GPIO_Port, user_led_Pin ) ;
 801a872:	2120      	movs	r1, #32
 801a874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801a878:	f001 fb4c 	bl	801bf14 <HAL_GPIO_TogglePin>
		wDWord = CS_getDoubleWord( address ) ;
 801a87c:	e769      	b.n	801a752 <_Z19CF_writeBFFWtoFlashm+0x4e>


	}

	if( result == true )
 801a87e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a882:	2b01      	cmp	r3, #1
 801a884:	d103      	bne.n	801a88e <_Z19CF_writeBFFWtoFlashm+0x18a>
		Terminal.println( "...100%... Done." ) ;
 801a886:	4913      	ldr	r1, [pc, #76]	; (801a8d4 <_Z19CF_writeBFFWtoFlashm+0x1d0>)
 801a888:	4809      	ldr	r0, [pc, #36]	; (801a8b0 <_Z19CF_writeBFFWtoFlashm+0x1ac>)
 801a88a:	f004 fbe9 	bl	801f060 <_ZN8Terminal7printlnEPKc>

	return result ;
 801a88e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801a892:	4618      	mov	r0, r3
 801a894:	3730      	adds	r7, #48	; 0x30
 801a896:	46bd      	mov	sp, r7
 801a898:	bd80      	pop	{r7, pc}
 801a89a:	bf00      	nop
 801a89c:	08023cbc 	.word	0x08023cbc
 801a8a0:	08023cc0 	.word	0x08023cc0
 801a8a4:	20000220 	.word	0x20000220
 801a8a8:	08023e58 	.word	0x08023e58
 801a8ac:	08023dd8 	.word	0x08023dd8
 801a8b0:	20000244 	.word	0x20000244
 801a8b4:	08023de4 	.word	0x08023de4
 801a8b8:	08023df0 	.word	0x08023df0
 801a8bc:	08023dfc 	.word	0x08023dfc
 801a8c0:	08023e08 	.word	0x08023e08
 801a8c4:	08023e14 	.word	0x08023e14
 801a8c8:	08023e20 	.word	0x08023e20
 801a8cc:	08023e2c 	.word	0x08023e2c
 801a8d0:	08023e38 	.word	0x08023e38
 801a8d4:	08023e44 	.word	0x08023e44

0801a8d8 <_Z17getCurrentVersionv>:



/*__________________________________________________________________________________________________________________________________________*/
char *getCurrentVersion() {
 801a8d8:	b580      	push	{r7, lr}
 801a8da:	b08a      	sub	sp, #40	; 0x28
 801a8dc:	af00      	add	r7, sp, #0
	// version: 1.0.0FF
	static char version[24] ;
	memset( version, 0 , 24 ) ;
 801a8de:	2218      	movs	r2, #24
 801a8e0:	2100      	movs	r1, #0
 801a8e2:	484f      	ldr	r0, [pc, #316]	; (801aa20 <_Z17getCurrentVersionv+0x148>)
 801a8e4:	f004 fd50 	bl	801f388 <memset>

	char firstDW[8] = {0} ;
 801a8e8:	2300      	movs	r3, #0
 801a8ea:	617b      	str	r3, [r7, #20]
 801a8ec:	2300      	movs	r3, #0
 801a8ee:	61bb      	str	r3, [r7, #24]
	char secondDW[8] = {0} ;
 801a8f0:	2300      	movs	r3, #0
 801a8f2:	60fb      	str	r3, [r7, #12]
 801a8f4:	2300      	movs	r3, #0
 801a8f6:	613b      	str	r3, [r7, #16]
	char thirdDW[8] = {0} ;
 801a8f8:	2300      	movs	r3, #0
 801a8fa:	607b      	str	r3, [r7, #4]
 801a8fc:	2300      	movs	r3, #0
 801a8fe:	60bb      	str	r3, [r7, #8]
	memcpy( firstDW, Flash_read_doubleWord(0x080FA000), 8 ) ;
 801a900:	4848      	ldr	r0, [pc, #288]	; (801aa24 <_Z17getCurrentVersionv+0x14c>)
 801a902:	f04f 0100 	mov.w	r1, #0
 801a906:	f004 f9c7 	bl	801ec98 <_Z21Flash_read_doubleWordy>
 801a90a:	4602      	mov	r2, r0
 801a90c:	f107 0314 	add.w	r3, r7, #20
 801a910:	6810      	ldr	r0, [r2, #0]
 801a912:	6851      	ldr	r1, [r2, #4]
 801a914:	c303      	stmia	r3!, {r0, r1}
	memcpy( secondDW, Flash_read_doubleWord(0x080FA008), 8 ) ;
 801a916:	a13e      	add	r1, pc, #248	; (adr r1, 801aa10 <_Z17getCurrentVersionv+0x138>)
 801a918:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a91c:	f004 f9bc 	bl	801ec98 <_Z21Flash_read_doubleWordy>
 801a920:	4602      	mov	r2, r0
 801a922:	f107 030c 	add.w	r3, r7, #12
 801a926:	6810      	ldr	r0, [r2, #0]
 801a928:	6851      	ldr	r1, [r2, #4]
 801a92a:	c303      	stmia	r3!, {r0, r1}
	memcpy( thirdDW, Flash_read_doubleWord(0x080FA010), 8 ) ;
 801a92c:	a13a      	add	r1, pc, #232	; (adr r1, 801aa18 <_Z17getCurrentVersionv+0x140>)
 801a92e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a932:	f004 f9b1 	bl	801ec98 <_Z21Flash_read_doubleWordy>
 801a936:	4602      	mov	r2, r0
 801a938:	1d3b      	adds	r3, r7, #4
 801a93a:	6810      	ldr	r0, [r2, #0]
 801a93c:	6851      	ldr	r1, [r2, #4]
 801a93e:	c303      	stmia	r3!, {r0, r1}

	for( int i = 0 ; i < 8 ; i++ )
 801a940:	2300      	movs	r3, #0
 801a942:	627b      	str	r3, [r7, #36]	; 0x24
 801a944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a946:	2b07      	cmp	r3, #7
 801a948:	dc0d      	bgt.n	801a966 <_Z17getCurrentVersionv+0x8e>
		version[i] = firstDW[i] ;
 801a94a:	f107 0214 	add.w	r2, r7, #20
 801a94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a950:	4413      	add	r3, r2
 801a952:	7819      	ldrb	r1, [r3, #0]
 801a954:	4a32      	ldr	r2, [pc, #200]	; (801aa20 <_Z17getCurrentVersionv+0x148>)
 801a956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a958:	4413      	add	r3, r2
 801a95a:	460a      	mov	r2, r1
 801a95c:	701a      	strb	r2, [r3, #0]
	for( int i = 0 ; i < 8 ; i++ )
 801a95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a960:	3301      	adds	r3, #1
 801a962:	627b      	str	r3, [r7, #36]	; 0x24
 801a964:	e7ee      	b.n	801a944 <_Z17getCurrentVersionv+0x6c>
	for( int i = 0 ; i < 8 ; i++ ) {
 801a966:	2300      	movs	r3, #0
 801a968:	623b      	str	r3, [r7, #32]
 801a96a:	6a3b      	ldr	r3, [r7, #32]
 801a96c:	2b07      	cmp	r3, #7
 801a96e:	dc22      	bgt.n	801a9b6 <_Z17getCurrentVersionv+0xde>
		if( checkFWnameFormat( (char)secondDW[i] ) == 1 )
 801a970:	f107 020c 	add.w	r2, r7, #12
 801a974:	6a3b      	ldr	r3, [r7, #32]
 801a976:	4413      	add	r3, r2
 801a978:	781b      	ldrb	r3, [r3, #0]
 801a97a:	4618      	mov	r0, r3
 801a97c:	f000 f8b2 	bl	801aae4 <_Z17checkFWnameFormatc>
 801a980:	4603      	mov	r3, r0
 801a982:	2b01      	cmp	r3, #1
 801a984:	bf0c      	ite	eq
 801a986:	2301      	moveq	r3, #1
 801a988:	2300      	movne	r3, #0
 801a98a:	b2db      	uxtb	r3, r3
 801a98c:	2b00      	cmp	r3, #0
 801a98e:	d009      	beq.n	801a9a4 <_Z17getCurrentVersionv+0xcc>
			version[ i + 8 ] = secondDW[i] ;
 801a990:	6a3b      	ldr	r3, [r7, #32]
 801a992:	3308      	adds	r3, #8
 801a994:	f107 010c 	add.w	r1, r7, #12
 801a998:	6a3a      	ldr	r2, [r7, #32]
 801a99a:	440a      	add	r2, r1
 801a99c:	7811      	ldrb	r1, [r2, #0]
 801a99e:	4a20      	ldr	r2, [pc, #128]	; (801aa20 <_Z17getCurrentVersionv+0x148>)
 801a9a0:	54d1      	strb	r1, [r2, r3]
 801a9a2:	e004      	b.n	801a9ae <_Z17getCurrentVersionv+0xd6>
		else
			version[ i + 8 ] = 0x00 ;
 801a9a4:	6a3b      	ldr	r3, [r7, #32]
 801a9a6:	3308      	adds	r3, #8
 801a9a8:	4a1d      	ldr	r2, [pc, #116]	; (801aa20 <_Z17getCurrentVersionv+0x148>)
 801a9aa:	2100      	movs	r1, #0
 801a9ac:	54d1      	strb	r1, [r2, r3]
	for( int i = 0 ; i < 8 ; i++ ) {
 801a9ae:	6a3b      	ldr	r3, [r7, #32]
 801a9b0:	3301      	adds	r3, #1
 801a9b2:	623b      	str	r3, [r7, #32]
 801a9b4:	e7d9      	b.n	801a96a <_Z17getCurrentVersionv+0x92>
	}
	for( int i = 0 ; i < 8 ; i++ ) {
 801a9b6:	2300      	movs	r3, #0
 801a9b8:	61fb      	str	r3, [r7, #28]
 801a9ba:	69fb      	ldr	r3, [r7, #28]
 801a9bc:	2b07      	cmp	r3, #7
 801a9be:	dc20      	bgt.n	801aa02 <_Z17getCurrentVersionv+0x12a>
		if( checkFWnameFormat( thirdDW[i] ) == 1 )
 801a9c0:	1d3a      	adds	r2, r7, #4
 801a9c2:	69fb      	ldr	r3, [r7, #28]
 801a9c4:	4413      	add	r3, r2
 801a9c6:	781b      	ldrb	r3, [r3, #0]
 801a9c8:	4618      	mov	r0, r3
 801a9ca:	f000 f88b 	bl	801aae4 <_Z17checkFWnameFormatc>
 801a9ce:	4603      	mov	r3, r0
 801a9d0:	2b01      	cmp	r3, #1
 801a9d2:	bf0c      	ite	eq
 801a9d4:	2301      	moveq	r3, #1
 801a9d6:	2300      	movne	r3, #0
 801a9d8:	b2db      	uxtb	r3, r3
 801a9da:	2b00      	cmp	r3, #0
 801a9dc:	d008      	beq.n	801a9f0 <_Z17getCurrentVersionv+0x118>
			version[ i + 16 ] = thirdDW[i] ;
 801a9de:	69fb      	ldr	r3, [r7, #28]
 801a9e0:	3310      	adds	r3, #16
 801a9e2:	1d39      	adds	r1, r7, #4
 801a9e4:	69fa      	ldr	r2, [r7, #28]
 801a9e6:	440a      	add	r2, r1
 801a9e8:	7811      	ldrb	r1, [r2, #0]
 801a9ea:	4a0d      	ldr	r2, [pc, #52]	; (801aa20 <_Z17getCurrentVersionv+0x148>)
 801a9ec:	54d1      	strb	r1, [r2, r3]
 801a9ee:	e004      	b.n	801a9fa <_Z17getCurrentVersionv+0x122>
		else
			version[ i + 16 ] = 0x00 ;
 801a9f0:	69fb      	ldr	r3, [r7, #28]
 801a9f2:	3310      	adds	r3, #16
 801a9f4:	4a0a      	ldr	r2, [pc, #40]	; (801aa20 <_Z17getCurrentVersionv+0x148>)
 801a9f6:	2100      	movs	r1, #0
 801a9f8:	54d1      	strb	r1, [r2, r3]
	for( int i = 0 ; i < 8 ; i++ ) {
 801a9fa:	69fb      	ldr	r3, [r7, #28]
 801a9fc:	3301      	adds	r3, #1
 801a9fe:	61fb      	str	r3, [r7, #28]
 801aa00:	e7db      	b.n	801a9ba <_Z17getCurrentVersionv+0xe2>
	}

	return version ;
 801aa02:	4b07      	ldr	r3, [pc, #28]	; (801aa20 <_Z17getCurrentVersionv+0x148>)
}
 801aa04:	4618      	mov	r0, r3
 801aa06:	3728      	adds	r7, #40	; 0x28
 801aa08:	46bd      	mov	sp, r7
 801aa0a:	bd80      	pop	{r7, pc}
 801aa0c:	f3af 8000 	nop.w
 801aa10:	080fa008 	.word	0x080fa008
 801aa14:	00000000 	.word	0x00000000
 801aa18:	080fa010 	.word	0x080fa010
 801aa1c:	00000000 	.word	0x00000000
 801aa20:	20000290 	.word	0x20000290
 801aa24:	080fa000 	.word	0x080fa000

0801aa28 <_Z15getOnSimVersionv>:



/*__________________________________________________________________________________________________________________________________________*/
char *getOnSimVersion() {
 801aa28:	b580      	push	{r7, lr}
 801aa2a:	b082      	sub	sp, #8
 801aa2c:	af00      	add	r7, sp, #0
	// version: 1.0.0FF
	static char version[25] ;
	memset( version, 0 , 25 ) ;
 801aa2e:	2219      	movs	r2, #25
 801aa30:	2100      	movs	r1, #0
 801aa32:	4824      	ldr	r0, [pc, #144]	; (801aac4 <_Z15getOnSimVersionv+0x9c>)
 801aa34:	f004 fca8 	bl	801f388 <memset>

	Sim7600.sendCmd( "AT\r", "OK", 2000 ) ;
 801aa38:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801aa3c:	4a22      	ldr	r2, [pc, #136]	; (801aac8 <_Z15getOnSimVersionv+0xa0>)
 801aa3e:	4923      	ldr	r1, [pc, #140]	; (801aacc <_Z15getOnSimVersionv+0xa4>)
 801aa40:	4823      	ldr	r0, [pc, #140]	; (801aad0 <_Z15getOnSimVersionv+0xa8>)
 801aa42:	f004 f9f7 	bl	801ee34 <_ZN7Sim76007sendCmdEPKcS1_j>
	Sim7600.sendCmd( "AT+FSCD=E:\r", "OK", 2000 ) ;
 801aa46:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801aa4a:	4a1f      	ldr	r2, [pc, #124]	; (801aac8 <_Z15getOnSimVersionv+0xa0>)
 801aa4c:	4921      	ldr	r1, [pc, #132]	; (801aad4 <_Z15getOnSimVersionv+0xac>)
 801aa4e:	4820      	ldr	r0, [pc, #128]	; (801aad0 <_Z15getOnSimVersionv+0xa8>)
 801aa50:	f004 f9f0 	bl	801ee34 <_ZN7Sim76007sendCmdEPKcS1_j>
	Sim7600.sendCmd( "AT+FSLS\r", "OK", 2000 ) ;
 801aa54:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801aa58:	4a1b      	ldr	r2, [pc, #108]	; (801aac8 <_Z15getOnSimVersionv+0xa0>)
 801aa5a:	491f      	ldr	r1, [pc, #124]	; (801aad8 <_Z15getOnSimVersionv+0xb0>)
 801aa5c:	481c      	ldr	r0, [pc, #112]	; (801aad0 <_Z15getOnSimVersionv+0xa8>)
 801aa5e:	f004 f9e9 	bl	801ee34 <_ZN7Sim76007sendCmdEPKcS1_j>

	memcpy( version, strstr( Sim7600.rxData.c_str(), "datalogger" ), 24 ) ;
 801aa62:	481e      	ldr	r0, [pc, #120]	; (801aadc <_Z15getOnSimVersionv+0xb4>)
 801aa64:	f004 fc02 	bl	801f26c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 801aa68:	4603      	mov	r3, r0
 801aa6a:	491d      	ldr	r1, [pc, #116]	; (801aae0 <_Z15getOnSimVersionv+0xb8>)
 801aa6c:	4618      	mov	r0, r3
 801aa6e:	f005 fc31 	bl	80202d4 <strstr>
 801aa72:	4603      	mov	r3, r0
 801aa74:	2218      	movs	r2, #24
 801aa76:	4619      	mov	r1, r3
 801aa78:	4812      	ldr	r0, [pc, #72]	; (801aac4 <_Z15getOnSimVersionv+0x9c>)
 801aa7a:	f004 fc5d 	bl	801f338 <memcpy>

	// filter version name
	for( int i = 0 ; i < 24 ; i++ )
 801aa7e:	2300      	movs	r3, #0
 801aa80:	607b      	str	r3, [r7, #4]
 801aa82:	687b      	ldr	r3, [r7, #4]
 801aa84:	2b17      	cmp	r3, #23
 801aa86:	dc17      	bgt.n	801aab8 <_Z15getOnSimVersionv+0x90>
		if( checkFWnameFormat( version[i] ) == false )
 801aa88:	4a0e      	ldr	r2, [pc, #56]	; (801aac4 <_Z15getOnSimVersionv+0x9c>)
 801aa8a:	687b      	ldr	r3, [r7, #4]
 801aa8c:	4413      	add	r3, r2
 801aa8e:	781b      	ldrb	r3, [r3, #0]
 801aa90:	4618      	mov	r0, r3
 801aa92:	f000 f827 	bl	801aae4 <_Z17checkFWnameFormatc>
 801aa96:	4603      	mov	r3, r0
 801aa98:	2b00      	cmp	r3, #0
 801aa9a:	bf0c      	ite	eq
 801aa9c:	2301      	moveq	r3, #1
 801aa9e:	2300      	movne	r3, #0
 801aaa0:	b2db      	uxtb	r3, r3
 801aaa2:	2b00      	cmp	r3, #0
 801aaa4:	d004      	beq.n	801aab0 <_Z15getOnSimVersionv+0x88>
			version[i] = 0x00 ;
 801aaa6:	4a07      	ldr	r2, [pc, #28]	; (801aac4 <_Z15getOnSimVersionv+0x9c>)
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	4413      	add	r3, r2
 801aaac:	2200      	movs	r2, #0
 801aaae:	701a      	strb	r2, [r3, #0]
	for( int i = 0 ; i < 24 ; i++ )
 801aab0:	687b      	ldr	r3, [r7, #4]
 801aab2:	3301      	adds	r3, #1
 801aab4:	607b      	str	r3, [r7, #4]
 801aab6:	e7e4      	b.n	801aa82 <_Z15getOnSimVersionv+0x5a>

	return version ;
 801aab8:	4b02      	ldr	r3, [pc, #8]	; (801aac4 <_Z15getOnSimVersionv+0x9c>)
}
 801aaba:	4618      	mov	r0, r3
 801aabc:	3708      	adds	r7, #8
 801aabe:	46bd      	mov	sp, r7
 801aac0:	bd80      	pop	{r7, pc}
 801aac2:	bf00      	nop
 801aac4:	200002a8 	.word	0x200002a8
 801aac8:	08023cbc 	.word	0x08023cbc
 801aacc:	08023e60 	.word	0x08023e60
 801aad0:	20000220 	.word	0x20000220
 801aad4:	08023e64 	.word	0x08023e64
 801aad8:	08023e70 	.word	0x08023e70
 801aadc:	20000224 	.word	0x20000224
 801aae0:	08023e7c 	.word	0x08023e7c

0801aae4 <_Z17checkFWnameFormatc>:



/*__________________________________________________________________________________________________________________________________________*/
// datalogger_1.1.1.bin => d,a,t,l,o,g,e,r,b,i,n,_,.,'number'
bool checkFWnameFormat( char _character ) {
 801aae4:	b480      	push	{r7}
 801aae6:	b083      	sub	sp, #12
 801aae8:	af00      	add	r7, sp, #0
 801aaea:	4603      	mov	r3, r0
 801aaec:	71fb      	strb	r3, [r7, #7]
	switch ( _character ) {
 801aaee:	79fb      	ldrb	r3, [r7, #7]
 801aaf0:	3b2e      	subs	r3, #46	; 0x2e
 801aaf2:	2b46      	cmp	r3, #70	; 0x46
 801aaf4:	f200 80ac 	bhi.w	801ac50 <_Z17checkFWnameFormatc+0x16c>
 801aaf8:	a201      	add	r2, pc, #4	; (adr r2, 801ab00 <_Z17checkFWnameFormatc+0x1c>)
 801aafa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aafe:	bf00      	nop
 801ab00:	0801ac4d 	.word	0x0801ac4d
 801ab04:	0801ac51 	.word	0x0801ac51
 801ab08:	0801ac51 	.word	0x0801ac51
 801ab0c:	0801ac51 	.word	0x0801ac51
 801ab10:	0801ac51 	.word	0x0801ac51
 801ab14:	0801ac51 	.word	0x0801ac51
 801ab18:	0801ac51 	.word	0x0801ac51
 801ab1c:	0801ac51 	.word	0x0801ac51
 801ab20:	0801ac51 	.word	0x0801ac51
 801ab24:	0801ac51 	.word	0x0801ac51
 801ab28:	0801ac51 	.word	0x0801ac51
 801ab2c:	0801ac51 	.word	0x0801ac51
 801ab30:	0801ac51 	.word	0x0801ac51
 801ab34:	0801ac51 	.word	0x0801ac51
 801ab38:	0801ac51 	.word	0x0801ac51
 801ab3c:	0801ac51 	.word	0x0801ac51
 801ab40:	0801ac51 	.word	0x0801ac51
 801ab44:	0801ac51 	.word	0x0801ac51
 801ab48:	0801ac51 	.word	0x0801ac51
 801ab4c:	0801ac51 	.word	0x0801ac51
 801ab50:	0801ac51 	.word	0x0801ac51
 801ab54:	0801ac51 	.word	0x0801ac51
 801ab58:	0801ac51 	.word	0x0801ac51
 801ab5c:	0801ac51 	.word	0x0801ac51
 801ab60:	0801ac51 	.word	0x0801ac51
 801ab64:	0801ac51 	.word	0x0801ac51
 801ab68:	0801ac51 	.word	0x0801ac51
 801ab6c:	0801ac51 	.word	0x0801ac51
 801ab70:	0801ac51 	.word	0x0801ac51
 801ab74:	0801ac51 	.word	0x0801ac51
 801ab78:	0801ac51 	.word	0x0801ac51
 801ab7c:	0801ac51 	.word	0x0801ac51
 801ab80:	0801ac51 	.word	0x0801ac51
 801ab84:	0801ac51 	.word	0x0801ac51
 801ab88:	0801ac51 	.word	0x0801ac51
 801ab8c:	0801ac51 	.word	0x0801ac51
 801ab90:	0801ac51 	.word	0x0801ac51
 801ab94:	0801ac51 	.word	0x0801ac51
 801ab98:	0801ac51 	.word	0x0801ac51
 801ab9c:	0801ac51 	.word	0x0801ac51
 801aba0:	0801ac51 	.word	0x0801ac51
 801aba4:	0801ac51 	.word	0x0801ac51
 801aba8:	0801ac51 	.word	0x0801ac51
 801abac:	0801ac51 	.word	0x0801ac51
 801abb0:	0801ac51 	.word	0x0801ac51
 801abb4:	0801ac51 	.word	0x0801ac51
 801abb8:	0801ac51 	.word	0x0801ac51
 801abbc:	0801ac51 	.word	0x0801ac51
 801abc0:	0801ac51 	.word	0x0801ac51
 801abc4:	0801ac49 	.word	0x0801ac49
 801abc8:	0801ac51 	.word	0x0801ac51
 801abcc:	0801ac21 	.word	0x0801ac21
 801abd0:	0801ac3d 	.word	0x0801ac3d
 801abd4:	0801ac51 	.word	0x0801ac51
 801abd8:	0801ac1d 	.word	0x0801ac1d
 801abdc:	0801ac35 	.word	0x0801ac35
 801abe0:	0801ac51 	.word	0x0801ac51
 801abe4:	0801ac31 	.word	0x0801ac31
 801abe8:	0801ac51 	.word	0x0801ac51
 801abec:	0801ac41 	.word	0x0801ac41
 801abf0:	0801ac51 	.word	0x0801ac51
 801abf4:	0801ac51 	.word	0x0801ac51
 801abf8:	0801ac29 	.word	0x0801ac29
 801abfc:	0801ac51 	.word	0x0801ac51
 801ac00:	0801ac45 	.word	0x0801ac45
 801ac04:	0801ac2d 	.word	0x0801ac2d
 801ac08:	0801ac51 	.word	0x0801ac51
 801ac0c:	0801ac51 	.word	0x0801ac51
 801ac10:	0801ac39 	.word	0x0801ac39
 801ac14:	0801ac51 	.word	0x0801ac51
 801ac18:	0801ac25 	.word	0x0801ac25
		case 'd':
			return 1 ;
 801ac1c:	2301      	movs	r3, #1
 801ac1e:	e020      	b.n	801ac62 <_Z17checkFWnameFormatc+0x17e>
		case 'a':
			return 1 ;
 801ac20:	2301      	movs	r3, #1
 801ac22:	e01e      	b.n	801ac62 <_Z17checkFWnameFormatc+0x17e>
		case 't':
			return 1 ;
 801ac24:	2301      	movs	r3, #1
 801ac26:	e01c      	b.n	801ac62 <_Z17checkFWnameFormatc+0x17e>
		case 'l':
			return 1 ;
 801ac28:	2301      	movs	r3, #1
 801ac2a:	e01a      	b.n	801ac62 <_Z17checkFWnameFormatc+0x17e>
		case 'o':
			return 1 ;
 801ac2c:	2301      	movs	r3, #1
 801ac2e:	e018      	b.n	801ac62 <_Z17checkFWnameFormatc+0x17e>
		case 'g':
			return 1 ;
 801ac30:	2301      	movs	r3, #1
 801ac32:	e016      	b.n	801ac62 <_Z17checkFWnameFormatc+0x17e>
		case (char)'e':
			return 1 ;
 801ac34:	2301      	movs	r3, #1
 801ac36:	e014      	b.n	801ac62 <_Z17checkFWnameFormatc+0x17e>
		case 'r':
			return 1 ;
 801ac38:	2301      	movs	r3, #1
 801ac3a:	e012      	b.n	801ac62 <_Z17checkFWnameFormatc+0x17e>
		case 'b':
			return 1 ;
 801ac3c:	2301      	movs	r3, #1
 801ac3e:	e010      	b.n	801ac62 <_Z17checkFWnameFormatc+0x17e>
		case 'i':
			return 1 ;
 801ac40:	2301      	movs	r3, #1
 801ac42:	e00e      	b.n	801ac62 <_Z17checkFWnameFormatc+0x17e>
		case 'n':
			return 1 ;
 801ac44:	2301      	movs	r3, #1
 801ac46:	e00c      	b.n	801ac62 <_Z17checkFWnameFormatc+0x17e>
		case '_':
			return 1 ;
 801ac48:	2301      	movs	r3, #1
 801ac4a:	e00a      	b.n	801ac62 <_Z17checkFWnameFormatc+0x17e>
		case '.':
			return 1 ;
 801ac4c:	2301      	movs	r3, #1
 801ac4e:	e008      	b.n	801ac62 <_Z17checkFWnameFormatc+0x17e>

		default:
			if( ( _character >= 0x30 && _character <= 0x39 ) )
 801ac50:	79fb      	ldrb	r3, [r7, #7]
 801ac52:	2b2f      	cmp	r3, #47	; 0x2f
 801ac54:	d904      	bls.n	801ac60 <_Z17checkFWnameFormatc+0x17c>
 801ac56:	79fb      	ldrb	r3, [r7, #7]
 801ac58:	2b39      	cmp	r3, #57	; 0x39
 801ac5a:	d801      	bhi.n	801ac60 <_Z17checkFWnameFormatc+0x17c>
				return 1 ;
 801ac5c:	2301      	movs	r3, #1
 801ac5e:	e000      	b.n	801ac62 <_Z17checkFWnameFormatc+0x17e>
			else
				return 0 ;
 801ac60:	2300      	movs	r3, #0
			break;
	}
}
 801ac62:	4618      	mov	r0, r3
 801ac64:	370c      	adds	r7, #12
 801ac66:	46bd      	mov	sp, r7
 801ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac6c:	4770      	bx	lr
 801ac6e:	bf00      	nop

0801ac70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 801ac70:	b480      	push	{r7}
 801ac72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 801ac74:	b672      	cpsid	i
}
 801ac76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 801ac78:	e7fe      	b.n	801ac78 <Error_Handler+0x8>
	...

0801ac7c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 801ac7c:	b580      	push	{r7, lr}
 801ac7e:	b082      	sub	sp, #8
 801ac80:	af00      	add	r7, sp, #0
 801ac82:	6078      	str	r0, [r7, #4]
 801ac84:	6039      	str	r1, [r7, #0]
 801ac86:	687b      	ldr	r3, [r7, #4]
 801ac88:	2b01      	cmp	r3, #1
 801ac8a:	d10c      	bne.n	801aca6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 801ac8c:	683b      	ldr	r3, [r7, #0]
 801ac8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ac92:	4293      	cmp	r3, r2
 801ac94:	d107      	bne.n	801aca6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
Sim7600 Sim7600( &huart1 ) ;
 801ac96:	490d      	ldr	r1, [pc, #52]	; (801accc <_Z41__static_initialization_and_destruction_0ii+0x50>)
 801ac98:	480d      	ldr	r0, [pc, #52]	; (801acd0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 801ac9a:	f004 f845 	bl	801ed28 <_ZN7Sim7600C1EP20__UART_HandleTypeDef>
Terminal Terminal( &huart2 ) ;
 801ac9e:	490d      	ldr	r1, [pc, #52]	; (801acd4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 801aca0:	480d      	ldr	r0, [pc, #52]	; (801acd8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801aca2:	f004 f955 	bl	801ef50 <_ZN8TerminalC1EP20__UART_HandleTypeDef>
 801aca6:	687b      	ldr	r3, [r7, #4]
 801aca8:	2b00      	cmp	r3, #0
 801acaa:	d10a      	bne.n	801acc2 <_Z41__static_initialization_and_destruction_0ii+0x46>
 801acac:	683b      	ldr	r3, [r7, #0]
 801acae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801acb2:	4293      	cmp	r3, r2
 801acb4:	d105      	bne.n	801acc2 <_Z41__static_initialization_and_destruction_0ii+0x46>
 801acb6:	4808      	ldr	r0, [pc, #32]	; (801acd8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801acb8:	f004 f968 	bl	801ef8c <_ZN8TerminalD1Ev>
Sim7600 Sim7600( &huart1 ) ;
 801acbc:	4804      	ldr	r0, [pc, #16]	; (801acd0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 801acbe:	f004 f851 	bl	801ed64 <_ZN7Sim7600D1Ev>
}
 801acc2:	bf00      	nop
 801acc4:	3708      	adds	r7, #8
 801acc6:	46bd      	mov	sp, r7
 801acc8:	bd80      	pop	{r7, pc}
 801acca:	bf00      	nop
 801accc:	200002e4 	.word	0x200002e4
 801acd0:	20000220 	.word	0x20000220
 801acd4:	20000368 	.word	0x20000368
 801acd8:	20000244 	.word	0x20000244

0801acdc <_GLOBAL__sub_I_Sim7600>:
 801acdc:	b580      	push	{r7, lr}
 801acde:	af00      	add	r7, sp, #0
 801ace0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801ace4:	2001      	movs	r0, #1
 801ace6:	f7ff ffc9 	bl	801ac7c <_Z41__static_initialization_and_destruction_0ii>
 801acea:	bd80      	pop	{r7, pc}

0801acec <_GLOBAL__sub_D_Sim7600>:
 801acec:	b580      	push	{r7, lr}
 801acee:	af00      	add	r7, sp, #0
 801acf0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801acf4:	2000      	movs	r0, #0
 801acf6:	f7ff ffc1 	bl	801ac7c <_Z41__static_initialization_and_destruction_0ii>
 801acfa:	bd80      	pop	{r7, pc}

0801acfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801acfc:	b480      	push	{r7}
 801acfe:	b083      	sub	sp, #12
 801ad00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801ad02:	4b0f      	ldr	r3, [pc, #60]	; (801ad40 <HAL_MspInit+0x44>)
 801ad04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ad06:	4a0e      	ldr	r2, [pc, #56]	; (801ad40 <HAL_MspInit+0x44>)
 801ad08:	f043 0301 	orr.w	r3, r3, #1
 801ad0c:	6613      	str	r3, [r2, #96]	; 0x60
 801ad0e:	4b0c      	ldr	r3, [pc, #48]	; (801ad40 <HAL_MspInit+0x44>)
 801ad10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ad12:	f003 0301 	and.w	r3, r3, #1
 801ad16:	607b      	str	r3, [r7, #4]
 801ad18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801ad1a:	4b09      	ldr	r3, [pc, #36]	; (801ad40 <HAL_MspInit+0x44>)
 801ad1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ad1e:	4a08      	ldr	r2, [pc, #32]	; (801ad40 <HAL_MspInit+0x44>)
 801ad20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ad24:	6593      	str	r3, [r2, #88]	; 0x58
 801ad26:	4b06      	ldr	r3, [pc, #24]	; (801ad40 <HAL_MspInit+0x44>)
 801ad28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ad2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801ad2e:	603b      	str	r3, [r7, #0]
 801ad30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801ad32:	bf00      	nop
 801ad34:	370c      	adds	r7, #12
 801ad36:	46bd      	mov	sp, r7
 801ad38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad3c:	4770      	bx	lr
 801ad3e:	bf00      	nop
 801ad40:	40021000 	.word	0x40021000

0801ad44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801ad44:	b480      	push	{r7}
 801ad46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 801ad48:	e7fe      	b.n	801ad48 <NMI_Handler+0x4>

0801ad4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801ad4a:	b480      	push	{r7}
 801ad4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801ad4e:	e7fe      	b.n	801ad4e <HardFault_Handler+0x4>

0801ad50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801ad50:	b480      	push	{r7}
 801ad52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801ad54:	e7fe      	b.n	801ad54 <MemManage_Handler+0x4>

0801ad56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801ad56:	b480      	push	{r7}
 801ad58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801ad5a:	e7fe      	b.n	801ad5a <BusFault_Handler+0x4>

0801ad5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801ad5c:	b480      	push	{r7}
 801ad5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801ad60:	e7fe      	b.n	801ad60 <UsageFault_Handler+0x4>

0801ad62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801ad62:	b480      	push	{r7}
 801ad64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801ad66:	bf00      	nop
 801ad68:	46bd      	mov	sp, r7
 801ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad6e:	4770      	bx	lr

0801ad70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801ad70:	b480      	push	{r7}
 801ad72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801ad74:	bf00      	nop
 801ad76:	46bd      	mov	sp, r7
 801ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad7c:	4770      	bx	lr

0801ad7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801ad7e:	b480      	push	{r7}
 801ad80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801ad82:	bf00      	nop
 801ad84:	46bd      	mov	sp, r7
 801ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad8a:	4770      	bx	lr

0801ad8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801ad8c:	b580      	push	{r7, lr}
 801ad8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801ad90:	f000 fa70 	bl	801b274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 801ad94:	bf00      	nop
 801ad96:	bd80      	pop	{r7, pc}

0801ad98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 801ad98:	b580      	push	{r7, lr}
 801ad9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 801ad9c:	4802      	ldr	r0, [pc, #8]	; (801ada8 <USART1_IRQHandler+0x10>)
 801ad9e:	f002 fd05 	bl	801d7ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 801ada2:	bf00      	nop
 801ada4:	bd80      	pop	{r7, pc}
 801ada6:	bf00      	nop
 801ada8:	200002e4 	.word	0x200002e4

0801adac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 801adac:	b580      	push	{r7, lr}
 801adae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 801adb0:	4802      	ldr	r0, [pc, #8]	; (801adbc <USART2_IRQHandler+0x10>)
 801adb2:	f002 fcfb 	bl	801d7ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 801adb6:	bf00      	nop
 801adb8:	bd80      	pop	{r7, pc}
 801adba:	bf00      	nop
 801adbc:	20000368 	.word	0x20000368

0801adc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 801adc0:	b480      	push	{r7}
 801adc2:	af00      	add	r7, sp, #0
	return 1;
 801adc4:	2301      	movs	r3, #1
}
 801adc6:	4618      	mov	r0, r3
 801adc8:	46bd      	mov	sp, r7
 801adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adce:	4770      	bx	lr

0801add0 <_kill>:

int _kill(int pid, int sig)
{
 801add0:	b580      	push	{r7, lr}
 801add2:	b082      	sub	sp, #8
 801add4:	af00      	add	r7, sp, #0
 801add6:	6078      	str	r0, [r7, #4]
 801add8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 801adda:	f004 fa73 	bl	801f2c4 <__errno>
 801adde:	4603      	mov	r3, r0
 801ade0:	2216      	movs	r2, #22
 801ade2:	601a      	str	r2, [r3, #0]
	return -1;
 801ade4:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ade8:	4618      	mov	r0, r3
 801adea:	3708      	adds	r7, #8
 801adec:	46bd      	mov	sp, r7
 801adee:	bd80      	pop	{r7, pc}

0801adf0 <_exit>:

void _exit (int status)
{
 801adf0:	b580      	push	{r7, lr}
 801adf2:	b082      	sub	sp, #8
 801adf4:	af00      	add	r7, sp, #0
 801adf6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 801adf8:	f04f 31ff 	mov.w	r1, #4294967295
 801adfc:	6878      	ldr	r0, [r7, #4]
 801adfe:	f7ff ffe7 	bl	801add0 <_kill>
	while (1) {}		/* Make sure we hang here */
 801ae02:	e7fe      	b.n	801ae02 <_exit+0x12>

0801ae04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801ae04:	b580      	push	{r7, lr}
 801ae06:	b086      	sub	sp, #24
 801ae08:	af00      	add	r7, sp, #0
 801ae0a:	60f8      	str	r0, [r7, #12]
 801ae0c:	60b9      	str	r1, [r7, #8]
 801ae0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801ae10:	2300      	movs	r3, #0
 801ae12:	617b      	str	r3, [r7, #20]
 801ae14:	e00a      	b.n	801ae2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 801ae16:	f3af 8000 	nop.w
 801ae1a:	4601      	mov	r1, r0
 801ae1c:	68bb      	ldr	r3, [r7, #8]
 801ae1e:	1c5a      	adds	r2, r3, #1
 801ae20:	60ba      	str	r2, [r7, #8]
 801ae22:	b2ca      	uxtb	r2, r1
 801ae24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801ae26:	697b      	ldr	r3, [r7, #20]
 801ae28:	3301      	adds	r3, #1
 801ae2a:	617b      	str	r3, [r7, #20]
 801ae2c:	697a      	ldr	r2, [r7, #20]
 801ae2e:	687b      	ldr	r3, [r7, #4]
 801ae30:	429a      	cmp	r2, r3
 801ae32:	dbf0      	blt.n	801ae16 <_read+0x12>
	}

return len;
 801ae34:	687b      	ldr	r3, [r7, #4]
}
 801ae36:	4618      	mov	r0, r3
 801ae38:	3718      	adds	r7, #24
 801ae3a:	46bd      	mov	sp, r7
 801ae3c:	bd80      	pop	{r7, pc}

0801ae3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801ae3e:	b580      	push	{r7, lr}
 801ae40:	b086      	sub	sp, #24
 801ae42:	af00      	add	r7, sp, #0
 801ae44:	60f8      	str	r0, [r7, #12]
 801ae46:	60b9      	str	r1, [r7, #8]
 801ae48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801ae4a:	2300      	movs	r3, #0
 801ae4c:	617b      	str	r3, [r7, #20]
 801ae4e:	e009      	b.n	801ae64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 801ae50:	68bb      	ldr	r3, [r7, #8]
 801ae52:	1c5a      	adds	r2, r3, #1
 801ae54:	60ba      	str	r2, [r7, #8]
 801ae56:	781b      	ldrb	r3, [r3, #0]
 801ae58:	4618      	mov	r0, r3
 801ae5a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801ae5e:	697b      	ldr	r3, [r7, #20]
 801ae60:	3301      	adds	r3, #1
 801ae62:	617b      	str	r3, [r7, #20]
 801ae64:	697a      	ldr	r2, [r7, #20]
 801ae66:	687b      	ldr	r3, [r7, #4]
 801ae68:	429a      	cmp	r2, r3
 801ae6a:	dbf1      	blt.n	801ae50 <_write+0x12>
	}
	return len;
 801ae6c:	687b      	ldr	r3, [r7, #4]
}
 801ae6e:	4618      	mov	r0, r3
 801ae70:	3718      	adds	r7, #24
 801ae72:	46bd      	mov	sp, r7
 801ae74:	bd80      	pop	{r7, pc}

0801ae76 <_close>:

int _close(int file)
{
 801ae76:	b480      	push	{r7}
 801ae78:	b083      	sub	sp, #12
 801ae7a:	af00      	add	r7, sp, #0
 801ae7c:	6078      	str	r0, [r7, #4]
	return -1;
 801ae7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ae82:	4618      	mov	r0, r3
 801ae84:	370c      	adds	r7, #12
 801ae86:	46bd      	mov	sp, r7
 801ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae8c:	4770      	bx	lr

0801ae8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 801ae8e:	b480      	push	{r7}
 801ae90:	b083      	sub	sp, #12
 801ae92:	af00      	add	r7, sp, #0
 801ae94:	6078      	str	r0, [r7, #4]
 801ae96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 801ae98:	683b      	ldr	r3, [r7, #0]
 801ae9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801ae9e:	605a      	str	r2, [r3, #4]
	return 0;
 801aea0:	2300      	movs	r3, #0
}
 801aea2:	4618      	mov	r0, r3
 801aea4:	370c      	adds	r7, #12
 801aea6:	46bd      	mov	sp, r7
 801aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aeac:	4770      	bx	lr

0801aeae <_isatty>:

int _isatty(int file)
{
 801aeae:	b480      	push	{r7}
 801aeb0:	b083      	sub	sp, #12
 801aeb2:	af00      	add	r7, sp, #0
 801aeb4:	6078      	str	r0, [r7, #4]
	return 1;
 801aeb6:	2301      	movs	r3, #1
}
 801aeb8:	4618      	mov	r0, r3
 801aeba:	370c      	adds	r7, #12
 801aebc:	46bd      	mov	sp, r7
 801aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aec2:	4770      	bx	lr

0801aec4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801aec4:	b480      	push	{r7}
 801aec6:	b085      	sub	sp, #20
 801aec8:	af00      	add	r7, sp, #0
 801aeca:	60f8      	str	r0, [r7, #12]
 801aecc:	60b9      	str	r1, [r7, #8]
 801aece:	607a      	str	r2, [r7, #4]
	return 0;
 801aed0:	2300      	movs	r3, #0
}
 801aed2:	4618      	mov	r0, r3
 801aed4:	3714      	adds	r7, #20
 801aed6:	46bd      	mov	sp, r7
 801aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aedc:	4770      	bx	lr
	...

0801aee0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 801aee0:	b580      	push	{r7, lr}
 801aee2:	b086      	sub	sp, #24
 801aee4:	af00      	add	r7, sp, #0
 801aee6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 801aee8:	4a14      	ldr	r2, [pc, #80]	; (801af3c <_sbrk+0x5c>)
 801aeea:	4b15      	ldr	r3, [pc, #84]	; (801af40 <_sbrk+0x60>)
 801aeec:	1ad3      	subs	r3, r2, r3
 801aeee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 801aef0:	697b      	ldr	r3, [r7, #20]
 801aef2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801aef4:	4b13      	ldr	r3, [pc, #76]	; (801af44 <_sbrk+0x64>)
 801aef6:	681b      	ldr	r3, [r3, #0]
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	d102      	bne.n	801af02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 801aefc:	4b11      	ldr	r3, [pc, #68]	; (801af44 <_sbrk+0x64>)
 801aefe:	4a12      	ldr	r2, [pc, #72]	; (801af48 <_sbrk+0x68>)
 801af00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801af02:	4b10      	ldr	r3, [pc, #64]	; (801af44 <_sbrk+0x64>)
 801af04:	681a      	ldr	r2, [r3, #0]
 801af06:	687b      	ldr	r3, [r7, #4]
 801af08:	4413      	add	r3, r2
 801af0a:	693a      	ldr	r2, [r7, #16]
 801af0c:	429a      	cmp	r2, r3
 801af0e:	d207      	bcs.n	801af20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 801af10:	f004 f9d8 	bl	801f2c4 <__errno>
 801af14:	4603      	mov	r3, r0
 801af16:	220c      	movs	r2, #12
 801af18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801af1a:	f04f 33ff 	mov.w	r3, #4294967295
 801af1e:	e009      	b.n	801af34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 801af20:	4b08      	ldr	r3, [pc, #32]	; (801af44 <_sbrk+0x64>)
 801af22:	681b      	ldr	r3, [r3, #0]
 801af24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801af26:	4b07      	ldr	r3, [pc, #28]	; (801af44 <_sbrk+0x64>)
 801af28:	681a      	ldr	r2, [r3, #0]
 801af2a:	687b      	ldr	r3, [r7, #4]
 801af2c:	4413      	add	r3, r2
 801af2e:	4a05      	ldr	r2, [pc, #20]	; (801af44 <_sbrk+0x64>)
 801af30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801af32:	68fb      	ldr	r3, [r7, #12]
}
 801af34:	4618      	mov	r0, r3
 801af36:	3718      	adds	r7, #24
 801af38:	46bd      	mov	sp, r7
 801af3a:	bd80      	pop	{r7, pc}
 801af3c:	20018000 	.word	0x20018000
 801af40:	00000400 	.word	0x00000400
 801af44:	200002c4 	.word	0x200002c4
 801af48:	20000400 	.word	0x20000400

0801af4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 801af4c:	b480      	push	{r7}
 801af4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 801af50:	4b15      	ldr	r3, [pc, #84]	; (801afa8 <SystemInit+0x5c>)
 801af52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801af56:	4a14      	ldr	r2, [pc, #80]	; (801afa8 <SystemInit+0x5c>)
 801af58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801af5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 801af60:	4b12      	ldr	r3, [pc, #72]	; (801afac <SystemInit+0x60>)
 801af62:	681b      	ldr	r3, [r3, #0]
 801af64:	4a11      	ldr	r2, [pc, #68]	; (801afac <SystemInit+0x60>)
 801af66:	f043 0301 	orr.w	r3, r3, #1
 801af6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 801af6c:	4b0f      	ldr	r3, [pc, #60]	; (801afac <SystemInit+0x60>)
 801af6e:	2200      	movs	r2, #0
 801af70:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 801af72:	4b0e      	ldr	r3, [pc, #56]	; (801afac <SystemInit+0x60>)
 801af74:	681b      	ldr	r3, [r3, #0]
 801af76:	4a0d      	ldr	r2, [pc, #52]	; (801afac <SystemInit+0x60>)
 801af78:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 801af7c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 801af80:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 801af82:	4b0a      	ldr	r3, [pc, #40]	; (801afac <SystemInit+0x60>)
 801af84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801af88:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 801af8a:	4b08      	ldr	r3, [pc, #32]	; (801afac <SystemInit+0x60>)
 801af8c:	681b      	ldr	r3, [r3, #0]
 801af8e:	4a07      	ldr	r2, [pc, #28]	; (801afac <SystemInit+0x60>)
 801af90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801af94:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 801af96:	4b05      	ldr	r3, [pc, #20]	; (801afac <SystemInit+0x60>)
 801af98:	2200      	movs	r2, #0
 801af9a:	619a      	str	r2, [r3, #24]
}
 801af9c:	bf00      	nop
 801af9e:	46bd      	mov	sp, r7
 801afa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afa4:	4770      	bx	lr
 801afa6:	bf00      	nop
 801afa8:	e000ed00 	.word	0xe000ed00
 801afac:	40021000 	.word	0x40021000

0801afb0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 801afb0:	b580      	push	{r7, lr}
 801afb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 801afb4:	4b14      	ldr	r3, [pc, #80]	; (801b008 <MX_USART1_UART_Init+0x58>)
 801afb6:	4a15      	ldr	r2, [pc, #84]	; (801b00c <MX_USART1_UART_Init+0x5c>)
 801afb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 801afba:	4b13      	ldr	r3, [pc, #76]	; (801b008 <MX_USART1_UART_Init+0x58>)
 801afbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 801afc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801afc2:	4b11      	ldr	r3, [pc, #68]	; (801b008 <MX_USART1_UART_Init+0x58>)
 801afc4:	2200      	movs	r2, #0
 801afc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 801afc8:	4b0f      	ldr	r3, [pc, #60]	; (801b008 <MX_USART1_UART_Init+0x58>)
 801afca:	2200      	movs	r2, #0
 801afcc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801afce:	4b0e      	ldr	r3, [pc, #56]	; (801b008 <MX_USART1_UART_Init+0x58>)
 801afd0:	2200      	movs	r2, #0
 801afd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 801afd4:	4b0c      	ldr	r3, [pc, #48]	; (801b008 <MX_USART1_UART_Init+0x58>)
 801afd6:	220c      	movs	r2, #12
 801afd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801afda:	4b0b      	ldr	r3, [pc, #44]	; (801b008 <MX_USART1_UART_Init+0x58>)
 801afdc:	2200      	movs	r2, #0
 801afde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801afe0:	4b09      	ldr	r3, [pc, #36]	; (801b008 <MX_USART1_UART_Init+0x58>)
 801afe2:	2200      	movs	r2, #0
 801afe4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801afe6:	4b08      	ldr	r3, [pc, #32]	; (801b008 <MX_USART1_UART_Init+0x58>)
 801afe8:	2200      	movs	r2, #0
 801afea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801afec:	4b06      	ldr	r3, [pc, #24]	; (801b008 <MX_USART1_UART_Init+0x58>)
 801afee:	2200      	movs	r2, #0
 801aff0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801aff2:	4805      	ldr	r0, [pc, #20]	; (801b008 <MX_USART1_UART_Init+0x58>)
 801aff4:	f002 fab4 	bl	801d560 <HAL_UART_Init>
 801aff8:	4603      	mov	r3, r0
 801affa:	2b00      	cmp	r3, #0
 801affc:	d001      	beq.n	801b002 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 801affe:	f7ff fe37 	bl	801ac70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 801b002:	bf00      	nop
 801b004:	bd80      	pop	{r7, pc}
 801b006:	bf00      	nop
 801b008:	200002e4 	.word	0x200002e4
 801b00c:	40013800 	.word	0x40013800

0801b010 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 801b010:	b580      	push	{r7, lr}
 801b012:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 801b014:	4b14      	ldr	r3, [pc, #80]	; (801b068 <MX_USART2_UART_Init+0x58>)
 801b016:	4a15      	ldr	r2, [pc, #84]	; (801b06c <MX_USART2_UART_Init+0x5c>)
 801b018:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 801b01a:	4b13      	ldr	r3, [pc, #76]	; (801b068 <MX_USART2_UART_Init+0x58>)
 801b01c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 801b020:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 801b022:	4b11      	ldr	r3, [pc, #68]	; (801b068 <MX_USART2_UART_Init+0x58>)
 801b024:	2200      	movs	r2, #0
 801b026:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 801b028:	4b0f      	ldr	r3, [pc, #60]	; (801b068 <MX_USART2_UART_Init+0x58>)
 801b02a:	2200      	movs	r2, #0
 801b02c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 801b02e:	4b0e      	ldr	r3, [pc, #56]	; (801b068 <MX_USART2_UART_Init+0x58>)
 801b030:	2200      	movs	r2, #0
 801b032:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 801b034:	4b0c      	ldr	r3, [pc, #48]	; (801b068 <MX_USART2_UART_Init+0x58>)
 801b036:	220c      	movs	r2, #12
 801b038:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801b03a:	4b0b      	ldr	r3, [pc, #44]	; (801b068 <MX_USART2_UART_Init+0x58>)
 801b03c:	2200      	movs	r2, #0
 801b03e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 801b040:	4b09      	ldr	r3, [pc, #36]	; (801b068 <MX_USART2_UART_Init+0x58>)
 801b042:	2200      	movs	r2, #0
 801b044:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801b046:	4b08      	ldr	r3, [pc, #32]	; (801b068 <MX_USART2_UART_Init+0x58>)
 801b048:	2200      	movs	r2, #0
 801b04a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801b04c:	4b06      	ldr	r3, [pc, #24]	; (801b068 <MX_USART2_UART_Init+0x58>)
 801b04e:	2200      	movs	r2, #0
 801b050:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 801b052:	4805      	ldr	r0, [pc, #20]	; (801b068 <MX_USART2_UART_Init+0x58>)
 801b054:	f002 fa84 	bl	801d560 <HAL_UART_Init>
 801b058:	4603      	mov	r3, r0
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d001      	beq.n	801b062 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 801b05e:	f7ff fe07 	bl	801ac70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 801b062:	bf00      	nop
 801b064:	bd80      	pop	{r7, pc}
 801b066:	bf00      	nop
 801b068:	20000368 	.word	0x20000368
 801b06c:	40004400 	.word	0x40004400

0801b070 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 801b070:	b580      	push	{r7, lr}
 801b072:	b08c      	sub	sp, #48	; 0x30
 801b074:	af00      	add	r7, sp, #0
 801b076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801b078:	f107 031c 	add.w	r3, r7, #28
 801b07c:	2200      	movs	r2, #0
 801b07e:	601a      	str	r2, [r3, #0]
 801b080:	605a      	str	r2, [r3, #4]
 801b082:	609a      	str	r2, [r3, #8]
 801b084:	60da      	str	r2, [r3, #12]
 801b086:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 801b088:	687b      	ldr	r3, [r7, #4]
 801b08a:	681b      	ldr	r3, [r3, #0]
 801b08c:	4a36      	ldr	r2, [pc, #216]	; (801b168 <HAL_UART_MspInit+0xf8>)
 801b08e:	4293      	cmp	r3, r2
 801b090:	d130      	bne.n	801b0f4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 801b092:	4b36      	ldr	r3, [pc, #216]	; (801b16c <HAL_UART_MspInit+0xfc>)
 801b094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b096:	4a35      	ldr	r2, [pc, #212]	; (801b16c <HAL_UART_MspInit+0xfc>)
 801b098:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801b09c:	6613      	str	r3, [r2, #96]	; 0x60
 801b09e:	4b33      	ldr	r3, [pc, #204]	; (801b16c <HAL_UART_MspInit+0xfc>)
 801b0a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b0a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801b0a6:	61bb      	str	r3, [r7, #24]
 801b0a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801b0aa:	4b30      	ldr	r3, [pc, #192]	; (801b16c <HAL_UART_MspInit+0xfc>)
 801b0ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b0ae:	4a2f      	ldr	r2, [pc, #188]	; (801b16c <HAL_UART_MspInit+0xfc>)
 801b0b0:	f043 0302 	orr.w	r3, r3, #2
 801b0b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 801b0b6:	4b2d      	ldr	r3, [pc, #180]	; (801b16c <HAL_UART_MspInit+0xfc>)
 801b0b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b0ba:	f003 0302 	and.w	r3, r3, #2
 801b0be:	617b      	str	r3, [r7, #20]
 801b0c0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SIM7600_TX_Pin|SIM7600_RX_Pin;
 801b0c2:	23c0      	movs	r3, #192	; 0xc0
 801b0c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b0c6:	2302      	movs	r3, #2
 801b0c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b0ca:	2300      	movs	r3, #0
 801b0cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b0ce:	2303      	movs	r3, #3
 801b0d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801b0d2:	2307      	movs	r3, #7
 801b0d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801b0d6:	f107 031c 	add.w	r3, r7, #28
 801b0da:	4619      	mov	r1, r3
 801b0dc:	4824      	ldr	r0, [pc, #144]	; (801b170 <HAL_UART_MspInit+0x100>)
 801b0de:	f000 fd57 	bl	801bb90 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 801b0e2:	2200      	movs	r2, #0
 801b0e4:	2100      	movs	r1, #0
 801b0e6:	2025      	movs	r0, #37	; 0x25
 801b0e8:	f000 f9f9 	bl	801b4de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 801b0ec:	2025      	movs	r0, #37	; 0x25
 801b0ee:	f000 fa12 	bl	801b516 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 801b0f2:	e035      	b.n	801b160 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 801b0f4:	687b      	ldr	r3, [r7, #4]
 801b0f6:	681b      	ldr	r3, [r3, #0]
 801b0f8:	4a1e      	ldr	r2, [pc, #120]	; (801b174 <HAL_UART_MspInit+0x104>)
 801b0fa:	4293      	cmp	r3, r2
 801b0fc:	d130      	bne.n	801b160 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 801b0fe:	4b1b      	ldr	r3, [pc, #108]	; (801b16c <HAL_UART_MspInit+0xfc>)
 801b100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b102:	4a1a      	ldr	r2, [pc, #104]	; (801b16c <HAL_UART_MspInit+0xfc>)
 801b104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801b108:	6593      	str	r3, [r2, #88]	; 0x58
 801b10a:	4b18      	ldr	r3, [pc, #96]	; (801b16c <HAL_UART_MspInit+0xfc>)
 801b10c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b10e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b112:	613b      	str	r3, [r7, #16]
 801b114:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801b116:	4b15      	ldr	r3, [pc, #84]	; (801b16c <HAL_UART_MspInit+0xfc>)
 801b118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b11a:	4a14      	ldr	r2, [pc, #80]	; (801b16c <HAL_UART_MspInit+0xfc>)
 801b11c:	f043 0301 	orr.w	r3, r3, #1
 801b120:	64d3      	str	r3, [r2, #76]	; 0x4c
 801b122:	4b12      	ldr	r3, [pc, #72]	; (801b16c <HAL_UART_MspInit+0xfc>)
 801b124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b126:	f003 0301 	and.w	r3, r3, #1
 801b12a:	60fb      	str	r3, [r7, #12]
 801b12c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TERMINAL_TX_Pin|TERMINAL_RX_Pin;
 801b12e:	230c      	movs	r3, #12
 801b130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b132:	2302      	movs	r3, #2
 801b134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b136:	2300      	movs	r3, #0
 801b138:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b13a:	2303      	movs	r3, #3
 801b13c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 801b13e:	2307      	movs	r3, #7
 801b140:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801b142:	f107 031c 	add.w	r3, r7, #28
 801b146:	4619      	mov	r1, r3
 801b148:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801b14c:	f000 fd20 	bl	801bb90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 801b150:	2200      	movs	r2, #0
 801b152:	2100      	movs	r1, #0
 801b154:	2026      	movs	r0, #38	; 0x26
 801b156:	f000 f9c2 	bl	801b4de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 801b15a:	2026      	movs	r0, #38	; 0x26
 801b15c:	f000 f9db 	bl	801b516 <HAL_NVIC_EnableIRQ>
}
 801b160:	bf00      	nop
 801b162:	3730      	adds	r7, #48	; 0x30
 801b164:	46bd      	mov	sp, r7
 801b166:	bd80      	pop	{r7, pc}
 801b168:	40013800 	.word	0x40013800
 801b16c:	40021000 	.word	0x40021000
 801b170:	48000400 	.word	0x48000400
 801b174:	40004400 	.word	0x40004400

0801b178 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 801b178:	f8df d034 	ldr.w	sp, [pc, #52]	; 801b1b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 801b17c:	f7ff fee6 	bl	801af4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 801b180:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 801b182:	e003      	b.n	801b18c <LoopCopyDataInit>

0801b184 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 801b184:	4b0b      	ldr	r3, [pc, #44]	; (801b1b4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 801b186:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 801b188:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 801b18a:	3104      	adds	r1, #4

0801b18c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 801b18c:	480a      	ldr	r0, [pc, #40]	; (801b1b8 <LoopForever+0xa>)
	ldr	r3, =_edata
 801b18e:	4b0b      	ldr	r3, [pc, #44]	; (801b1bc <LoopForever+0xe>)
	adds	r2, r0, r1
 801b190:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 801b192:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 801b194:	d3f6      	bcc.n	801b184 <CopyDataInit>
	ldr	r2, =_sbss
 801b196:	4a0a      	ldr	r2, [pc, #40]	; (801b1c0 <LoopForever+0x12>)
	b	LoopFillZerobss
 801b198:	e002      	b.n	801b1a0 <LoopFillZerobss>

0801b19a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 801b19a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 801b19c:	f842 3b04 	str.w	r3, [r2], #4

0801b1a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 801b1a0:	4b08      	ldr	r3, [pc, #32]	; (801b1c4 <LoopForever+0x16>)
	cmp	r2, r3
 801b1a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 801b1a4:	d3f9      	bcc.n	801b19a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 801b1a6:	f004 f893 	bl	801f2d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 801b1aa:	f7fe ff87 	bl	801a0bc <main>

0801b1ae <LoopForever>:

LoopForever:
    b LoopForever
 801b1ae:	e7fe      	b.n	801b1ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 801b1b0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 801b1b4:	080243e4 	.word	0x080243e4
	ldr	r0, =_sdata
 801b1b8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 801b1bc:	20000204 	.word	0x20000204
	ldr	r2, =_sbss
 801b1c0:	20000204 	.word	0x20000204
	ldr	r3, = _ebss
 801b1c4:	20000400 	.word	0x20000400

0801b1c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 801b1c8:	e7fe      	b.n	801b1c8 <ADC1_2_IRQHandler>

0801b1ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801b1ca:	b580      	push	{r7, lr}
 801b1cc:	b082      	sub	sp, #8
 801b1ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 801b1d0:	2300      	movs	r3, #0
 801b1d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801b1d4:	2003      	movs	r0, #3
 801b1d6:	f000 f977 	bl	801b4c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801b1da:	2000      	movs	r0, #0
 801b1dc:	f000 f80e 	bl	801b1fc <HAL_InitTick>
 801b1e0:	4603      	mov	r3, r0
 801b1e2:	2b00      	cmp	r3, #0
 801b1e4:	d002      	beq.n	801b1ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 801b1e6:	2301      	movs	r3, #1
 801b1e8:	71fb      	strb	r3, [r7, #7]
 801b1ea:	e001      	b.n	801b1f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 801b1ec:	f7ff fd86 	bl	801acfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 801b1f0:	79fb      	ldrb	r3, [r7, #7]
}
 801b1f2:	4618      	mov	r0, r3
 801b1f4:	3708      	adds	r7, #8
 801b1f6:	46bd      	mov	sp, r7
 801b1f8:	bd80      	pop	{r7, pc}
	...

0801b1fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801b1fc:	b580      	push	{r7, lr}
 801b1fe:	b084      	sub	sp, #16
 801b200:	af00      	add	r7, sp, #0
 801b202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 801b204:	2300      	movs	r3, #0
 801b206:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 801b208:	4b17      	ldr	r3, [pc, #92]	; (801b268 <HAL_InitTick+0x6c>)
 801b20a:	781b      	ldrb	r3, [r3, #0]
 801b20c:	2b00      	cmp	r3, #0
 801b20e:	d023      	beq.n	801b258 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 801b210:	4b16      	ldr	r3, [pc, #88]	; (801b26c <HAL_InitTick+0x70>)
 801b212:	681a      	ldr	r2, [r3, #0]
 801b214:	4b14      	ldr	r3, [pc, #80]	; (801b268 <HAL_InitTick+0x6c>)
 801b216:	781b      	ldrb	r3, [r3, #0]
 801b218:	4619      	mov	r1, r3
 801b21a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801b21e:	fbb3 f3f1 	udiv	r3, r3, r1
 801b222:	fbb2 f3f3 	udiv	r3, r2, r3
 801b226:	4618      	mov	r0, r3
 801b228:	f000 f987 	bl	801b53a <HAL_SYSTICK_Config>
 801b22c:	4603      	mov	r3, r0
 801b22e:	2b00      	cmp	r3, #0
 801b230:	d10f      	bne.n	801b252 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801b232:	687b      	ldr	r3, [r7, #4]
 801b234:	2b0f      	cmp	r3, #15
 801b236:	d809      	bhi.n	801b24c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801b238:	2200      	movs	r2, #0
 801b23a:	6879      	ldr	r1, [r7, #4]
 801b23c:	f04f 30ff 	mov.w	r0, #4294967295
 801b240:	f000 f94d 	bl	801b4de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 801b244:	4a0a      	ldr	r2, [pc, #40]	; (801b270 <HAL_InitTick+0x74>)
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	6013      	str	r3, [r2, #0]
 801b24a:	e007      	b.n	801b25c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 801b24c:	2301      	movs	r3, #1
 801b24e:	73fb      	strb	r3, [r7, #15]
 801b250:	e004      	b.n	801b25c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 801b252:	2301      	movs	r3, #1
 801b254:	73fb      	strb	r3, [r7, #15]
 801b256:	e001      	b.n	801b25c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 801b258:	2301      	movs	r3, #1
 801b25a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 801b25c:	7bfb      	ldrb	r3, [r7, #15]
}
 801b25e:	4618      	mov	r0, r3
 801b260:	3710      	adds	r7, #16
 801b262:	46bd      	mov	sp, r7
 801b264:	bd80      	pop	{r7, pc}
 801b266:	bf00      	nop
 801b268:	2000000c 	.word	0x2000000c
 801b26c:	20000004 	.word	0x20000004
 801b270:	20000008 	.word	0x20000008

0801b274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801b274:	b480      	push	{r7}
 801b276:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801b278:	4b06      	ldr	r3, [pc, #24]	; (801b294 <HAL_IncTick+0x20>)
 801b27a:	781b      	ldrb	r3, [r3, #0]
 801b27c:	461a      	mov	r2, r3
 801b27e:	4b06      	ldr	r3, [pc, #24]	; (801b298 <HAL_IncTick+0x24>)
 801b280:	681b      	ldr	r3, [r3, #0]
 801b282:	4413      	add	r3, r2
 801b284:	4a04      	ldr	r2, [pc, #16]	; (801b298 <HAL_IncTick+0x24>)
 801b286:	6013      	str	r3, [r2, #0]
}
 801b288:	bf00      	nop
 801b28a:	46bd      	mov	sp, r7
 801b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b290:	4770      	bx	lr
 801b292:	bf00      	nop
 801b294:	2000000c 	.word	0x2000000c
 801b298:	200003ec 	.word	0x200003ec

0801b29c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801b29c:	b480      	push	{r7}
 801b29e:	af00      	add	r7, sp, #0
  return uwTick;
 801b2a0:	4b03      	ldr	r3, [pc, #12]	; (801b2b0 <HAL_GetTick+0x14>)
 801b2a2:	681b      	ldr	r3, [r3, #0]
}
 801b2a4:	4618      	mov	r0, r3
 801b2a6:	46bd      	mov	sp, r7
 801b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2ac:	4770      	bx	lr
 801b2ae:	bf00      	nop
 801b2b0:	200003ec 	.word	0x200003ec

0801b2b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801b2b4:	b580      	push	{r7, lr}
 801b2b6:	b084      	sub	sp, #16
 801b2b8:	af00      	add	r7, sp, #0
 801b2ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801b2bc:	f7ff ffee 	bl	801b29c <HAL_GetTick>
 801b2c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801b2c2:	687b      	ldr	r3, [r7, #4]
 801b2c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 801b2c6:	68fb      	ldr	r3, [r7, #12]
 801b2c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b2cc:	d005      	beq.n	801b2da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 801b2ce:	4b0a      	ldr	r3, [pc, #40]	; (801b2f8 <HAL_Delay+0x44>)
 801b2d0:	781b      	ldrb	r3, [r3, #0]
 801b2d2:	461a      	mov	r2, r3
 801b2d4:	68fb      	ldr	r3, [r7, #12]
 801b2d6:	4413      	add	r3, r2
 801b2d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801b2da:	bf00      	nop
 801b2dc:	f7ff ffde 	bl	801b29c <HAL_GetTick>
 801b2e0:	4602      	mov	r2, r0
 801b2e2:	68bb      	ldr	r3, [r7, #8]
 801b2e4:	1ad3      	subs	r3, r2, r3
 801b2e6:	68fa      	ldr	r2, [r7, #12]
 801b2e8:	429a      	cmp	r2, r3
 801b2ea:	d8f7      	bhi.n	801b2dc <HAL_Delay+0x28>
  {
  }
}
 801b2ec:	bf00      	nop
 801b2ee:	bf00      	nop
 801b2f0:	3710      	adds	r7, #16
 801b2f2:	46bd      	mov	sp, r7
 801b2f4:	bd80      	pop	{r7, pc}
 801b2f6:	bf00      	nop
 801b2f8:	2000000c 	.word	0x2000000c

0801b2fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801b2fc:	b480      	push	{r7}
 801b2fe:	b085      	sub	sp, #20
 801b300:	af00      	add	r7, sp, #0
 801b302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	f003 0307 	and.w	r3, r3, #7
 801b30a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801b30c:	4b0c      	ldr	r3, [pc, #48]	; (801b340 <__NVIC_SetPriorityGrouping+0x44>)
 801b30e:	68db      	ldr	r3, [r3, #12]
 801b310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801b312:	68ba      	ldr	r2, [r7, #8]
 801b314:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801b318:	4013      	ands	r3, r2
 801b31a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801b31c:	68fb      	ldr	r3, [r7, #12]
 801b31e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801b320:	68bb      	ldr	r3, [r7, #8]
 801b322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801b324:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801b328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801b32c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801b32e:	4a04      	ldr	r2, [pc, #16]	; (801b340 <__NVIC_SetPriorityGrouping+0x44>)
 801b330:	68bb      	ldr	r3, [r7, #8]
 801b332:	60d3      	str	r3, [r2, #12]
}
 801b334:	bf00      	nop
 801b336:	3714      	adds	r7, #20
 801b338:	46bd      	mov	sp, r7
 801b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b33e:	4770      	bx	lr
 801b340:	e000ed00 	.word	0xe000ed00

0801b344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801b344:	b480      	push	{r7}
 801b346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801b348:	4b04      	ldr	r3, [pc, #16]	; (801b35c <__NVIC_GetPriorityGrouping+0x18>)
 801b34a:	68db      	ldr	r3, [r3, #12]
 801b34c:	0a1b      	lsrs	r3, r3, #8
 801b34e:	f003 0307 	and.w	r3, r3, #7
}
 801b352:	4618      	mov	r0, r3
 801b354:	46bd      	mov	sp, r7
 801b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b35a:	4770      	bx	lr
 801b35c:	e000ed00 	.word	0xe000ed00

0801b360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801b360:	b480      	push	{r7}
 801b362:	b083      	sub	sp, #12
 801b364:	af00      	add	r7, sp, #0
 801b366:	4603      	mov	r3, r0
 801b368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801b36a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b36e:	2b00      	cmp	r3, #0
 801b370:	db0b      	blt.n	801b38a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801b372:	79fb      	ldrb	r3, [r7, #7]
 801b374:	f003 021f 	and.w	r2, r3, #31
 801b378:	4907      	ldr	r1, [pc, #28]	; (801b398 <__NVIC_EnableIRQ+0x38>)
 801b37a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b37e:	095b      	lsrs	r3, r3, #5
 801b380:	2001      	movs	r0, #1
 801b382:	fa00 f202 	lsl.w	r2, r0, r2
 801b386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 801b38a:	bf00      	nop
 801b38c:	370c      	adds	r7, #12
 801b38e:	46bd      	mov	sp, r7
 801b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b394:	4770      	bx	lr
 801b396:	bf00      	nop
 801b398:	e000e100 	.word	0xe000e100

0801b39c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801b39c:	b480      	push	{r7}
 801b39e:	b083      	sub	sp, #12
 801b3a0:	af00      	add	r7, sp, #0
 801b3a2:	4603      	mov	r3, r0
 801b3a4:	6039      	str	r1, [r7, #0]
 801b3a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801b3a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b3ac:	2b00      	cmp	r3, #0
 801b3ae:	db0a      	blt.n	801b3c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801b3b0:	683b      	ldr	r3, [r7, #0]
 801b3b2:	b2da      	uxtb	r2, r3
 801b3b4:	490c      	ldr	r1, [pc, #48]	; (801b3e8 <__NVIC_SetPriority+0x4c>)
 801b3b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b3ba:	0112      	lsls	r2, r2, #4
 801b3bc:	b2d2      	uxtb	r2, r2
 801b3be:	440b      	add	r3, r1
 801b3c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801b3c4:	e00a      	b.n	801b3dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801b3c6:	683b      	ldr	r3, [r7, #0]
 801b3c8:	b2da      	uxtb	r2, r3
 801b3ca:	4908      	ldr	r1, [pc, #32]	; (801b3ec <__NVIC_SetPriority+0x50>)
 801b3cc:	79fb      	ldrb	r3, [r7, #7]
 801b3ce:	f003 030f 	and.w	r3, r3, #15
 801b3d2:	3b04      	subs	r3, #4
 801b3d4:	0112      	lsls	r2, r2, #4
 801b3d6:	b2d2      	uxtb	r2, r2
 801b3d8:	440b      	add	r3, r1
 801b3da:	761a      	strb	r2, [r3, #24]
}
 801b3dc:	bf00      	nop
 801b3de:	370c      	adds	r7, #12
 801b3e0:	46bd      	mov	sp, r7
 801b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3e6:	4770      	bx	lr
 801b3e8:	e000e100 	.word	0xe000e100
 801b3ec:	e000ed00 	.word	0xe000ed00

0801b3f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801b3f0:	b480      	push	{r7}
 801b3f2:	b089      	sub	sp, #36	; 0x24
 801b3f4:	af00      	add	r7, sp, #0
 801b3f6:	60f8      	str	r0, [r7, #12]
 801b3f8:	60b9      	str	r1, [r7, #8]
 801b3fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801b3fc:	68fb      	ldr	r3, [r7, #12]
 801b3fe:	f003 0307 	and.w	r3, r3, #7
 801b402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801b404:	69fb      	ldr	r3, [r7, #28]
 801b406:	f1c3 0307 	rsb	r3, r3, #7
 801b40a:	2b04      	cmp	r3, #4
 801b40c:	bf28      	it	cs
 801b40e:	2304      	movcs	r3, #4
 801b410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801b412:	69fb      	ldr	r3, [r7, #28]
 801b414:	3304      	adds	r3, #4
 801b416:	2b06      	cmp	r3, #6
 801b418:	d902      	bls.n	801b420 <NVIC_EncodePriority+0x30>
 801b41a:	69fb      	ldr	r3, [r7, #28]
 801b41c:	3b03      	subs	r3, #3
 801b41e:	e000      	b.n	801b422 <NVIC_EncodePriority+0x32>
 801b420:	2300      	movs	r3, #0
 801b422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801b424:	f04f 32ff 	mov.w	r2, #4294967295
 801b428:	69bb      	ldr	r3, [r7, #24]
 801b42a:	fa02 f303 	lsl.w	r3, r2, r3
 801b42e:	43da      	mvns	r2, r3
 801b430:	68bb      	ldr	r3, [r7, #8]
 801b432:	401a      	ands	r2, r3
 801b434:	697b      	ldr	r3, [r7, #20]
 801b436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801b438:	f04f 31ff 	mov.w	r1, #4294967295
 801b43c:	697b      	ldr	r3, [r7, #20]
 801b43e:	fa01 f303 	lsl.w	r3, r1, r3
 801b442:	43d9      	mvns	r1, r3
 801b444:	687b      	ldr	r3, [r7, #4]
 801b446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801b448:	4313      	orrs	r3, r2
         );
}
 801b44a:	4618      	mov	r0, r3
 801b44c:	3724      	adds	r7, #36	; 0x24
 801b44e:	46bd      	mov	sp, r7
 801b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b454:	4770      	bx	lr
	...

0801b458 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 801b458:	b480      	push	{r7}
 801b45a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 801b45c:	f3bf 8f4f 	dsb	sy
}
 801b460:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801b462:	4b06      	ldr	r3, [pc, #24]	; (801b47c <__NVIC_SystemReset+0x24>)
 801b464:	68db      	ldr	r3, [r3, #12]
 801b466:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801b46a:	4904      	ldr	r1, [pc, #16]	; (801b47c <__NVIC_SystemReset+0x24>)
 801b46c:	4b04      	ldr	r3, [pc, #16]	; (801b480 <__NVIC_SystemReset+0x28>)
 801b46e:	4313      	orrs	r3, r2
 801b470:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801b472:	f3bf 8f4f 	dsb	sy
}
 801b476:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 801b478:	bf00      	nop
 801b47a:	e7fd      	b.n	801b478 <__NVIC_SystemReset+0x20>
 801b47c:	e000ed00 	.word	0xe000ed00
 801b480:	05fa0004 	.word	0x05fa0004

0801b484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801b484:	b580      	push	{r7, lr}
 801b486:	b082      	sub	sp, #8
 801b488:	af00      	add	r7, sp, #0
 801b48a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801b48c:	687b      	ldr	r3, [r7, #4]
 801b48e:	3b01      	subs	r3, #1
 801b490:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801b494:	d301      	bcc.n	801b49a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801b496:	2301      	movs	r3, #1
 801b498:	e00f      	b.n	801b4ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801b49a:	4a0a      	ldr	r2, [pc, #40]	; (801b4c4 <SysTick_Config+0x40>)
 801b49c:	687b      	ldr	r3, [r7, #4]
 801b49e:	3b01      	subs	r3, #1
 801b4a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801b4a2:	210f      	movs	r1, #15
 801b4a4:	f04f 30ff 	mov.w	r0, #4294967295
 801b4a8:	f7ff ff78 	bl	801b39c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801b4ac:	4b05      	ldr	r3, [pc, #20]	; (801b4c4 <SysTick_Config+0x40>)
 801b4ae:	2200      	movs	r2, #0
 801b4b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801b4b2:	4b04      	ldr	r3, [pc, #16]	; (801b4c4 <SysTick_Config+0x40>)
 801b4b4:	2207      	movs	r2, #7
 801b4b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801b4b8:	2300      	movs	r3, #0
}
 801b4ba:	4618      	mov	r0, r3
 801b4bc:	3708      	adds	r7, #8
 801b4be:	46bd      	mov	sp, r7
 801b4c0:	bd80      	pop	{r7, pc}
 801b4c2:	bf00      	nop
 801b4c4:	e000e010 	.word	0xe000e010

0801b4c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801b4c8:	b580      	push	{r7, lr}
 801b4ca:	b082      	sub	sp, #8
 801b4cc:	af00      	add	r7, sp, #0
 801b4ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801b4d0:	6878      	ldr	r0, [r7, #4]
 801b4d2:	f7ff ff13 	bl	801b2fc <__NVIC_SetPriorityGrouping>
}
 801b4d6:	bf00      	nop
 801b4d8:	3708      	adds	r7, #8
 801b4da:	46bd      	mov	sp, r7
 801b4dc:	bd80      	pop	{r7, pc}

0801b4de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801b4de:	b580      	push	{r7, lr}
 801b4e0:	b086      	sub	sp, #24
 801b4e2:	af00      	add	r7, sp, #0
 801b4e4:	4603      	mov	r3, r0
 801b4e6:	60b9      	str	r1, [r7, #8]
 801b4e8:	607a      	str	r2, [r7, #4]
 801b4ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 801b4ec:	2300      	movs	r3, #0
 801b4ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801b4f0:	f7ff ff28 	bl	801b344 <__NVIC_GetPriorityGrouping>
 801b4f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801b4f6:	687a      	ldr	r2, [r7, #4]
 801b4f8:	68b9      	ldr	r1, [r7, #8]
 801b4fa:	6978      	ldr	r0, [r7, #20]
 801b4fc:	f7ff ff78 	bl	801b3f0 <NVIC_EncodePriority>
 801b500:	4602      	mov	r2, r0
 801b502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b506:	4611      	mov	r1, r2
 801b508:	4618      	mov	r0, r3
 801b50a:	f7ff ff47 	bl	801b39c <__NVIC_SetPriority>
}
 801b50e:	bf00      	nop
 801b510:	3718      	adds	r7, #24
 801b512:	46bd      	mov	sp, r7
 801b514:	bd80      	pop	{r7, pc}

0801b516 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801b516:	b580      	push	{r7, lr}
 801b518:	b082      	sub	sp, #8
 801b51a:	af00      	add	r7, sp, #0
 801b51c:	4603      	mov	r3, r0
 801b51e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801b520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b524:	4618      	mov	r0, r3
 801b526:	f7ff ff1b 	bl	801b360 <__NVIC_EnableIRQ>
}
 801b52a:	bf00      	nop
 801b52c:	3708      	adds	r7, #8
 801b52e:	46bd      	mov	sp, r7
 801b530:	bd80      	pop	{r7, pc}

0801b532 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 801b532:	b580      	push	{r7, lr}
 801b534:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 801b536:	f7ff ff8f 	bl	801b458 <__NVIC_SystemReset>

0801b53a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801b53a:	b580      	push	{r7, lr}
 801b53c:	b082      	sub	sp, #8
 801b53e:	af00      	add	r7, sp, #0
 801b540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801b542:	6878      	ldr	r0, [r7, #4]
 801b544:	f7ff ff9e 	bl	801b484 <SysTick_Config>
 801b548:	4603      	mov	r3, r0
}
 801b54a:	4618      	mov	r0, r3
 801b54c:	3708      	adds	r7, #8
 801b54e:	46bd      	mov	sp, r7
 801b550:	bd80      	pop	{r7, pc}

0801b552 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801b552:	b480      	push	{r7}
 801b554:	b085      	sub	sp, #20
 801b556:	af00      	add	r7, sp, #0
 801b558:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b55a:	2300      	movs	r3, #0
 801b55c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801b55e:	687b      	ldr	r3, [r7, #4]
 801b560:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801b564:	b2db      	uxtb	r3, r3
 801b566:	2b02      	cmp	r3, #2
 801b568:	d008      	beq.n	801b57c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801b56a:	687b      	ldr	r3, [r7, #4]
 801b56c:	2204      	movs	r2, #4
 801b56e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	2200      	movs	r2, #0
 801b574:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801b578:	2301      	movs	r3, #1
 801b57a:	e022      	b.n	801b5c2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801b57c:	687b      	ldr	r3, [r7, #4]
 801b57e:	681b      	ldr	r3, [r3, #0]
 801b580:	681a      	ldr	r2, [r3, #0]
 801b582:	687b      	ldr	r3, [r7, #4]
 801b584:	681b      	ldr	r3, [r3, #0]
 801b586:	f022 020e 	bic.w	r2, r2, #14
 801b58a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 801b58c:	687b      	ldr	r3, [r7, #4]
 801b58e:	681b      	ldr	r3, [r3, #0]
 801b590:	681a      	ldr	r2, [r3, #0]
 801b592:	687b      	ldr	r3, [r7, #4]
 801b594:	681b      	ldr	r3, [r3, #0]
 801b596:	f022 0201 	bic.w	r2, r2, #1
 801b59a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 801b59c:	687b      	ldr	r3, [r7, #4]
 801b59e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b5a0:	f003 021c 	and.w	r2, r3, #28
 801b5a4:	687b      	ldr	r3, [r7, #4]
 801b5a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b5a8:	2101      	movs	r1, #1
 801b5aa:	fa01 f202 	lsl.w	r2, r1, r2
 801b5ae:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801b5b0:	687b      	ldr	r3, [r7, #4]
 801b5b2:	2201      	movs	r2, #1
 801b5b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b5b8:	687b      	ldr	r3, [r7, #4]
 801b5ba:	2200      	movs	r2, #0
 801b5bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 801b5c0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 801b5c2:	4618      	mov	r0, r3
 801b5c4:	3714      	adds	r7, #20
 801b5c6:	46bd      	mov	sp, r7
 801b5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5cc:	4770      	bx	lr

0801b5ce <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801b5ce:	b580      	push	{r7, lr}
 801b5d0:	b084      	sub	sp, #16
 801b5d2:	af00      	add	r7, sp, #0
 801b5d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b5d6:	2300      	movs	r3, #0
 801b5d8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 801b5da:	687b      	ldr	r3, [r7, #4]
 801b5dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801b5e0:	b2db      	uxtb	r3, r3
 801b5e2:	2b02      	cmp	r3, #2
 801b5e4:	d005      	beq.n	801b5f2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801b5e6:	687b      	ldr	r3, [r7, #4]
 801b5e8:	2204      	movs	r2, #4
 801b5ea:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 801b5ec:	2301      	movs	r3, #1
 801b5ee:	73fb      	strb	r3, [r7, #15]
 801b5f0:	e029      	b.n	801b646 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801b5f2:	687b      	ldr	r3, [r7, #4]
 801b5f4:	681b      	ldr	r3, [r3, #0]
 801b5f6:	681a      	ldr	r2, [r3, #0]
 801b5f8:	687b      	ldr	r3, [r7, #4]
 801b5fa:	681b      	ldr	r3, [r3, #0]
 801b5fc:	f022 020e 	bic.w	r2, r2, #14
 801b600:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 801b602:	687b      	ldr	r3, [r7, #4]
 801b604:	681b      	ldr	r3, [r3, #0]
 801b606:	681a      	ldr	r2, [r3, #0]
 801b608:	687b      	ldr	r3, [r7, #4]
 801b60a:	681b      	ldr	r3, [r3, #0]
 801b60c:	f022 0201 	bic.w	r2, r2, #1
 801b610:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 801b612:	687b      	ldr	r3, [r7, #4]
 801b614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b616:	f003 021c 	and.w	r2, r3, #28
 801b61a:	687b      	ldr	r3, [r7, #4]
 801b61c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b61e:	2101      	movs	r1, #1
 801b620:	fa01 f202 	lsl.w	r2, r1, r2
 801b624:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801b626:	687b      	ldr	r3, [r7, #4]
 801b628:	2201      	movs	r2, #1
 801b62a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b62e:	687b      	ldr	r3, [r7, #4]
 801b630:	2200      	movs	r2, #0
 801b632:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 801b636:	687b      	ldr	r3, [r7, #4]
 801b638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b63a:	2b00      	cmp	r3, #0
 801b63c:	d003      	beq.n	801b646 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 801b63e:	687b      	ldr	r3, [r7, #4]
 801b640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b642:	6878      	ldr	r0, [r7, #4]
 801b644:	4798      	blx	r3
    }
  }
  return status;
 801b646:	7bfb      	ldrb	r3, [r7, #15]
}
 801b648:	4618      	mov	r0, r3
 801b64a:	3710      	adds	r7, #16
 801b64c:	46bd      	mov	sp, r7
 801b64e:	bd80      	pop	{r7, pc}

0801b650 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 801b650:	b580      	push	{r7, lr}
 801b652:	b086      	sub	sp, #24
 801b654:	af00      	add	r7, sp, #0
 801b656:	60f8      	str	r0, [r7, #12]
 801b658:	60b9      	str	r1, [r7, #8]
 801b65a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 801b65e:	2300      	movs	r3, #0
 801b660:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801b662:	4b2f      	ldr	r3, [pc, #188]	; (801b720 <HAL_FLASH_Program+0xd0>)
 801b664:	781b      	ldrb	r3, [r3, #0]
 801b666:	2b01      	cmp	r3, #1
 801b668:	d101      	bne.n	801b66e <HAL_FLASH_Program+0x1e>
 801b66a:	2302      	movs	r3, #2
 801b66c:	e053      	b.n	801b716 <HAL_FLASH_Program+0xc6>
 801b66e:	4b2c      	ldr	r3, [pc, #176]	; (801b720 <HAL_FLASH_Program+0xd0>)
 801b670:	2201      	movs	r2, #1
 801b672:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b674:	f24c 3050 	movw	r0, #50000	; 0xc350
 801b678:	f000 f894 	bl	801b7a4 <FLASH_WaitForLastOperation>
 801b67c:	4603      	mov	r3, r0
 801b67e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 801b680:	7dfb      	ldrb	r3, [r7, #23]
 801b682:	2b00      	cmp	r3, #0
 801b684:	d143      	bne.n	801b70e <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801b686:	4b26      	ldr	r3, [pc, #152]	; (801b720 <HAL_FLASH_Program+0xd0>)
 801b688:	2200      	movs	r2, #0
 801b68a:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801b68c:	4b25      	ldr	r3, [pc, #148]	; (801b724 <HAL_FLASH_Program+0xd4>)
 801b68e:	681b      	ldr	r3, [r3, #0]
 801b690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b694:	2b00      	cmp	r3, #0
 801b696:	d009      	beq.n	801b6ac <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 801b698:	4b22      	ldr	r3, [pc, #136]	; (801b724 <HAL_FLASH_Program+0xd4>)
 801b69a:	681b      	ldr	r3, [r3, #0]
 801b69c:	4a21      	ldr	r2, [pc, #132]	; (801b724 <HAL_FLASH_Program+0xd4>)
 801b69e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b6a2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 801b6a4:	4b1e      	ldr	r3, [pc, #120]	; (801b720 <HAL_FLASH_Program+0xd0>)
 801b6a6:	2202      	movs	r2, #2
 801b6a8:	771a      	strb	r2, [r3, #28]
 801b6aa:	e002      	b.n	801b6b2 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801b6ac:	4b1c      	ldr	r3, [pc, #112]	; (801b720 <HAL_FLASH_Program+0xd0>)
 801b6ae:	2200      	movs	r2, #0
 801b6b0:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 801b6b2:	68fb      	ldr	r3, [r7, #12]
 801b6b4:	2b00      	cmp	r3, #0
 801b6b6:	d107      	bne.n	801b6c8 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 801b6b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b6bc:	68b8      	ldr	r0, [r7, #8]
 801b6be:	f000 f8c7 	bl	801b850 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 801b6c2:	2301      	movs	r3, #1
 801b6c4:	613b      	str	r3, [r7, #16]
 801b6c6:	e010      	b.n	801b6ea <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 801b6c8:	68fb      	ldr	r3, [r7, #12]
 801b6ca:	2b01      	cmp	r3, #1
 801b6cc:	d002      	beq.n	801b6d4 <HAL_FLASH_Program+0x84>
 801b6ce:	68fb      	ldr	r3, [r7, #12]
 801b6d0:	2b02      	cmp	r3, #2
 801b6d2:	d10a      	bne.n	801b6ea <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 801b6d4:	683b      	ldr	r3, [r7, #0]
 801b6d6:	4619      	mov	r1, r3
 801b6d8:	68b8      	ldr	r0, [r7, #8]
 801b6da:	f000 f8df 	bl	801b89c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 801b6de:	68fb      	ldr	r3, [r7, #12]
 801b6e0:	2b02      	cmp	r3, #2
 801b6e2:	d102      	bne.n	801b6ea <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 801b6e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801b6e8:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b6ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 801b6ee:	f000 f859 	bl	801b7a4 <FLASH_WaitForLastOperation>
 801b6f2:	4603      	mov	r3, r0
 801b6f4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 801b6f6:	693b      	ldr	r3, [r7, #16]
 801b6f8:	2b00      	cmp	r3, #0
 801b6fa:	d006      	beq.n	801b70a <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 801b6fc:	4b09      	ldr	r3, [pc, #36]	; (801b724 <HAL_FLASH_Program+0xd4>)
 801b6fe:	695a      	ldr	r2, [r3, #20]
 801b700:	693b      	ldr	r3, [r7, #16]
 801b702:	43db      	mvns	r3, r3
 801b704:	4907      	ldr	r1, [pc, #28]	; (801b724 <HAL_FLASH_Program+0xd4>)
 801b706:	4013      	ands	r3, r2
 801b708:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 801b70a:	f000 f9fd 	bl	801bb08 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801b70e:	4b04      	ldr	r3, [pc, #16]	; (801b720 <HAL_FLASH_Program+0xd0>)
 801b710:	2200      	movs	r2, #0
 801b712:	701a      	strb	r2, [r3, #0]

  return status;
 801b714:	7dfb      	ldrb	r3, [r7, #23]
}
 801b716:	4618      	mov	r0, r3
 801b718:	3718      	adds	r7, #24
 801b71a:	46bd      	mov	sp, r7
 801b71c:	bd80      	pop	{r7, pc}
 801b71e:	bf00      	nop
 801b720:	20000010 	.word	0x20000010
 801b724:	40022000 	.word	0x40022000

0801b728 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 801b728:	b480      	push	{r7}
 801b72a:	b083      	sub	sp, #12
 801b72c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801b72e:	2300      	movs	r3, #0
 801b730:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801b732:	4b0b      	ldr	r3, [pc, #44]	; (801b760 <HAL_FLASH_Unlock+0x38>)
 801b734:	695b      	ldr	r3, [r3, #20]
 801b736:	2b00      	cmp	r3, #0
 801b738:	da0b      	bge.n	801b752 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801b73a:	4b09      	ldr	r3, [pc, #36]	; (801b760 <HAL_FLASH_Unlock+0x38>)
 801b73c:	4a09      	ldr	r2, [pc, #36]	; (801b764 <HAL_FLASH_Unlock+0x3c>)
 801b73e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 801b740:	4b07      	ldr	r3, [pc, #28]	; (801b760 <HAL_FLASH_Unlock+0x38>)
 801b742:	4a09      	ldr	r2, [pc, #36]	; (801b768 <HAL_FLASH_Unlock+0x40>)
 801b744:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801b746:	4b06      	ldr	r3, [pc, #24]	; (801b760 <HAL_FLASH_Unlock+0x38>)
 801b748:	695b      	ldr	r3, [r3, #20]
 801b74a:	2b00      	cmp	r3, #0
 801b74c:	da01      	bge.n	801b752 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801b74e:	2301      	movs	r3, #1
 801b750:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 801b752:	79fb      	ldrb	r3, [r7, #7]
}
 801b754:	4618      	mov	r0, r3
 801b756:	370c      	adds	r7, #12
 801b758:	46bd      	mov	sp, r7
 801b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b75e:	4770      	bx	lr
 801b760:	40022000 	.word	0x40022000
 801b764:	45670123 	.word	0x45670123
 801b768:	cdef89ab 	.word	0xcdef89ab

0801b76c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801b76c:	b480      	push	{r7}
 801b76e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 801b770:	4b05      	ldr	r3, [pc, #20]	; (801b788 <HAL_FLASH_Lock+0x1c>)
 801b772:	695b      	ldr	r3, [r3, #20]
 801b774:	4a04      	ldr	r2, [pc, #16]	; (801b788 <HAL_FLASH_Lock+0x1c>)
 801b776:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801b77a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 801b77c:	2300      	movs	r3, #0
}
 801b77e:	4618      	mov	r0, r3
 801b780:	46bd      	mov	sp, r7
 801b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b786:	4770      	bx	lr
 801b788:	40022000 	.word	0x40022000

0801b78c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  *            @arg FLASH_FLAG_PEMPTY : FLASH Boot from not programmed flash (apply only for STM32L43x/STM32L44x devices)
  */
uint32_t HAL_FLASH_GetError(void)
{
 801b78c:	b480      	push	{r7}
 801b78e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 801b790:	4b03      	ldr	r3, [pc, #12]	; (801b7a0 <HAL_FLASH_GetError+0x14>)
 801b792:	685b      	ldr	r3, [r3, #4]
}
 801b794:	4618      	mov	r0, r3
 801b796:	46bd      	mov	sp, r7
 801b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b79c:	4770      	bx	lr
 801b79e:	bf00      	nop
 801b7a0:	20000010 	.word	0x20000010

0801b7a4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 801b7a4:	b580      	push	{r7, lr}
 801b7a6:	b084      	sub	sp, #16
 801b7a8:	af00      	add	r7, sp, #0
 801b7aa:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 801b7ac:	f7ff fd76 	bl	801b29c <HAL_GetTick>
 801b7b0:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801b7b2:	e00d      	b.n	801b7d0 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 801b7b4:	687b      	ldr	r3, [r7, #4]
 801b7b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b7ba:	d009      	beq.n	801b7d0 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 801b7bc:	f7ff fd6e 	bl	801b29c <HAL_GetTick>
 801b7c0:	4602      	mov	r2, r0
 801b7c2:	68fb      	ldr	r3, [r7, #12]
 801b7c4:	1ad3      	subs	r3, r2, r3
 801b7c6:	687a      	ldr	r2, [r7, #4]
 801b7c8:	429a      	cmp	r2, r3
 801b7ca:	d801      	bhi.n	801b7d0 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 801b7cc:	2303      	movs	r3, #3
 801b7ce:	e037      	b.n	801b840 <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801b7d0:	4b1d      	ldr	r3, [pc, #116]	; (801b848 <FLASH_WaitForLastOperation+0xa4>)
 801b7d2:	691b      	ldr	r3, [r3, #16]
 801b7d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b7d8:	2b00      	cmp	r3, #0
 801b7da:	d1eb      	bne.n	801b7b4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 801b7dc:	4b1a      	ldr	r3, [pc, #104]	; (801b848 <FLASH_WaitForLastOperation+0xa4>)
 801b7de:	691a      	ldr	r2, [r3, #16]
 801b7e0:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 801b7e4:	4013      	ands	r3, r2
 801b7e6:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 801b7e8:	68bb      	ldr	r3, [r7, #8]
 801b7ea:	2b00      	cmp	r3, #0
 801b7ec:	d01e      	beq.n	801b82c <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 801b7ee:	4b17      	ldr	r3, [pc, #92]	; (801b84c <FLASH_WaitForLastOperation+0xa8>)
 801b7f0:	685a      	ldr	r2, [r3, #4]
 801b7f2:	68bb      	ldr	r3, [r7, #8]
 801b7f4:	4313      	orrs	r3, r2
 801b7f6:	4a15      	ldr	r2, [pc, #84]	; (801b84c <FLASH_WaitForLastOperation+0xa8>)
 801b7f8:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 801b7fa:	68bb      	ldr	r3, [r7, #8]
 801b7fc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801b800:	2b00      	cmp	r3, #0
 801b802:	d007      	beq.n	801b814 <FLASH_WaitForLastOperation+0x70>
 801b804:	4b10      	ldr	r3, [pc, #64]	; (801b848 <FLASH_WaitForLastOperation+0xa4>)
 801b806:	699a      	ldr	r2, [r3, #24]
 801b808:	68bb      	ldr	r3, [r7, #8]
 801b80a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801b80e:	490e      	ldr	r1, [pc, #56]	; (801b848 <FLASH_WaitForLastOperation+0xa4>)
 801b810:	4313      	orrs	r3, r2
 801b812:	618b      	str	r3, [r1, #24]
 801b814:	68bb      	ldr	r3, [r7, #8]
 801b816:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801b81a:	2b00      	cmp	r3, #0
 801b81c:	d004      	beq.n	801b828 <FLASH_WaitForLastOperation+0x84>
 801b81e:	4a0a      	ldr	r2, [pc, #40]	; (801b848 <FLASH_WaitForLastOperation+0xa4>)
 801b820:	68bb      	ldr	r3, [r7, #8]
 801b822:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801b826:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 801b828:	2301      	movs	r3, #1
 801b82a:	e009      	b.n	801b840 <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 801b82c:	4b06      	ldr	r3, [pc, #24]	; (801b848 <FLASH_WaitForLastOperation+0xa4>)
 801b82e:	691b      	ldr	r3, [r3, #16]
 801b830:	f003 0301 	and.w	r3, r3, #1
 801b834:	2b00      	cmp	r3, #0
 801b836:	d002      	beq.n	801b83e <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801b838:	4b03      	ldr	r3, [pc, #12]	; (801b848 <FLASH_WaitForLastOperation+0xa4>)
 801b83a:	2201      	movs	r2, #1
 801b83c:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 801b83e:	2300      	movs	r3, #0
}
 801b840:	4618      	mov	r0, r3
 801b842:	3710      	adds	r7, #16
 801b844:	46bd      	mov	sp, r7
 801b846:	bd80      	pop	{r7, pc}
 801b848:	40022000 	.word	0x40022000
 801b84c:	20000010 	.word	0x20000010

0801b850 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 801b850:	b480      	push	{r7}
 801b852:	b085      	sub	sp, #20
 801b854:	af00      	add	r7, sp, #0
 801b856:	60f8      	str	r0, [r7, #12]
 801b858:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 801b85c:	4b0e      	ldr	r3, [pc, #56]	; (801b898 <FLASH_Program_DoubleWord+0x48>)
 801b85e:	695b      	ldr	r3, [r3, #20]
 801b860:	4a0d      	ldr	r2, [pc, #52]	; (801b898 <FLASH_Program_DoubleWord+0x48>)
 801b862:	f043 0301 	orr.w	r3, r3, #1
 801b866:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 801b868:	68fb      	ldr	r3, [r7, #12]
 801b86a:	683a      	ldr	r2, [r7, #0]
 801b86c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 801b86e:	f3bf 8f6f 	isb	sy
}
 801b872:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 801b874:	e9d7 0100 	ldrd	r0, r1, [r7]
 801b878:	f04f 0200 	mov.w	r2, #0
 801b87c:	f04f 0300 	mov.w	r3, #0
 801b880:	000a      	movs	r2, r1
 801b882:	2300      	movs	r3, #0
 801b884:	68f9      	ldr	r1, [r7, #12]
 801b886:	3104      	adds	r1, #4
 801b888:	4613      	mov	r3, r2
 801b88a:	600b      	str	r3, [r1, #0]
}
 801b88c:	bf00      	nop
 801b88e:	3714      	adds	r7, #20
 801b890:	46bd      	mov	sp, r7
 801b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b896:	4770      	bx	lr
 801b898:	40022000 	.word	0x40022000

0801b89c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 801b89c:	b480      	push	{r7}
 801b89e:	b089      	sub	sp, #36	; 0x24
 801b8a0:	af00      	add	r7, sp, #0
 801b8a2:	6078      	str	r0, [r7, #4]
 801b8a4:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 801b8a6:	2340      	movs	r3, #64	; 0x40
 801b8a8:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 801b8ae:	683b      	ldr	r3, [r7, #0]
 801b8b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 801b8b2:	4b14      	ldr	r3, [pc, #80]	; (801b904 <FLASH_Program_Fast+0x68>)
 801b8b4:	695b      	ldr	r3, [r3, #20]
 801b8b6:	4a13      	ldr	r2, [pc, #76]	; (801b904 <FLASH_Program_Fast+0x68>)
 801b8b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801b8bc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b8be:	f3ef 8310 	mrs	r3, PRIMASK
 801b8c2:	60fb      	str	r3, [r7, #12]
  return(result);
 801b8c4:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 801b8c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801b8c8:	b672      	cpsid	i
}
 801b8ca:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 801b8cc:	697b      	ldr	r3, [r7, #20]
 801b8ce:	681a      	ldr	r2, [r3, #0]
 801b8d0:	69bb      	ldr	r3, [r7, #24]
 801b8d2:	601a      	str	r2, [r3, #0]
    dest_addr++;
 801b8d4:	69bb      	ldr	r3, [r7, #24]
 801b8d6:	3304      	adds	r3, #4
 801b8d8:	61bb      	str	r3, [r7, #24]
    src_addr++;
 801b8da:	697b      	ldr	r3, [r7, #20]
 801b8dc:	3304      	adds	r3, #4
 801b8de:	617b      	str	r3, [r7, #20]
    row_index--;
 801b8e0:	7ffb      	ldrb	r3, [r7, #31]
 801b8e2:	3b01      	subs	r3, #1
 801b8e4:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 801b8e6:	7ffb      	ldrb	r3, [r7, #31]
 801b8e8:	2b00      	cmp	r3, #0
 801b8ea:	d1ef      	bne.n	801b8cc <FLASH_Program_Fast+0x30>
 801b8ec:	693b      	ldr	r3, [r7, #16]
 801b8ee:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b8f0:	68bb      	ldr	r3, [r7, #8]
 801b8f2:	f383 8810 	msr	PRIMASK, r3
}
 801b8f6:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 801b8f8:	bf00      	nop
 801b8fa:	3724      	adds	r7, #36	; 0x24
 801b8fc:	46bd      	mov	sp, r7
 801b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b902:	4770      	bx	lr
 801b904:	40022000 	.word	0x40022000

0801b908 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 801b908:	b580      	push	{r7, lr}
 801b90a:	b084      	sub	sp, #16
 801b90c:	af00      	add	r7, sp, #0
 801b90e:	6078      	str	r0, [r7, #4]
 801b910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801b912:	4b4c      	ldr	r3, [pc, #304]	; (801ba44 <HAL_FLASHEx_Erase+0x13c>)
 801b914:	781b      	ldrb	r3, [r3, #0]
 801b916:	2b01      	cmp	r3, #1
 801b918:	d101      	bne.n	801b91e <HAL_FLASHEx_Erase+0x16>
 801b91a:	2302      	movs	r3, #2
 801b91c:	e08d      	b.n	801ba3a <HAL_FLASHEx_Erase+0x132>
 801b91e:	4b49      	ldr	r3, [pc, #292]	; (801ba44 <HAL_FLASHEx_Erase+0x13c>)
 801b920:	2201      	movs	r2, #1
 801b922:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b924:	f24c 3050 	movw	r0, #50000	; 0xc350
 801b928:	f7ff ff3c 	bl	801b7a4 <FLASH_WaitForLastOperation>
 801b92c:	4603      	mov	r3, r0
 801b92e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 801b930:	7bfb      	ldrb	r3, [r7, #15]
 801b932:	2b00      	cmp	r3, #0
 801b934:	d17d      	bne.n	801ba32 <HAL_FLASHEx_Erase+0x12a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801b936:	4b43      	ldr	r3, [pc, #268]	; (801ba44 <HAL_FLASHEx_Erase+0x13c>)
 801b938:	2200      	movs	r2, #0
 801b93a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 801b93c:	4b42      	ldr	r3, [pc, #264]	; (801ba48 <HAL_FLASHEx_Erase+0x140>)
 801b93e:	681b      	ldr	r3, [r3, #0]
 801b940:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801b944:	2b00      	cmp	r3, #0
 801b946:	d019      	beq.n	801b97c <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 801b948:	4b3f      	ldr	r3, [pc, #252]	; (801ba48 <HAL_FLASHEx_Erase+0x140>)
 801b94a:	681b      	ldr	r3, [r3, #0]
 801b94c:	4a3e      	ldr	r2, [pc, #248]	; (801ba48 <HAL_FLASHEx_Erase+0x140>)
 801b94e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801b952:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801b954:	4b3c      	ldr	r3, [pc, #240]	; (801ba48 <HAL_FLASHEx_Erase+0x140>)
 801b956:	681b      	ldr	r3, [r3, #0]
 801b958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b95c:	2b00      	cmp	r3, #0
 801b95e:	d009      	beq.n	801b974 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 801b960:	4b39      	ldr	r3, [pc, #228]	; (801ba48 <HAL_FLASHEx_Erase+0x140>)
 801b962:	681b      	ldr	r3, [r3, #0]
 801b964:	4a38      	ldr	r2, [pc, #224]	; (801ba48 <HAL_FLASHEx_Erase+0x140>)
 801b966:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b96a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 801b96c:	4b35      	ldr	r3, [pc, #212]	; (801ba44 <HAL_FLASHEx_Erase+0x13c>)
 801b96e:	2203      	movs	r2, #3
 801b970:	771a      	strb	r2, [r3, #28]
 801b972:	e016      	b.n	801b9a2 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 801b974:	4b33      	ldr	r3, [pc, #204]	; (801ba44 <HAL_FLASHEx_Erase+0x13c>)
 801b976:	2201      	movs	r2, #1
 801b978:	771a      	strb	r2, [r3, #28]
 801b97a:	e012      	b.n	801b9a2 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801b97c:	4b32      	ldr	r3, [pc, #200]	; (801ba48 <HAL_FLASHEx_Erase+0x140>)
 801b97e:	681b      	ldr	r3, [r3, #0]
 801b980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b984:	2b00      	cmp	r3, #0
 801b986:	d009      	beq.n	801b99c <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 801b988:	4b2f      	ldr	r3, [pc, #188]	; (801ba48 <HAL_FLASHEx_Erase+0x140>)
 801b98a:	681b      	ldr	r3, [r3, #0]
 801b98c:	4a2e      	ldr	r2, [pc, #184]	; (801ba48 <HAL_FLASHEx_Erase+0x140>)
 801b98e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b992:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 801b994:	4b2b      	ldr	r3, [pc, #172]	; (801ba44 <HAL_FLASHEx_Erase+0x13c>)
 801b996:	2202      	movs	r2, #2
 801b998:	771a      	strb	r2, [r3, #28]
 801b99a:	e002      	b.n	801b9a2 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801b99c:	4b29      	ldr	r3, [pc, #164]	; (801ba44 <HAL_FLASHEx_Erase+0x13c>)
 801b99e:	2200      	movs	r2, #0
 801b9a0:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801b9a2:	687b      	ldr	r3, [r7, #4]
 801b9a4:	681b      	ldr	r3, [r3, #0]
 801b9a6:	2b01      	cmp	r3, #1
 801b9a8:	d113      	bne.n	801b9d2 <HAL_FLASHEx_Erase+0xca>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 801b9aa:	687b      	ldr	r3, [r7, #4]
 801b9ac:	685b      	ldr	r3, [r3, #4]
 801b9ae:	4618      	mov	r0, r3
 801b9b0:	f000 f84c 	bl	801ba4c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b9b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 801b9b8:	f7ff fef4 	bl	801b7a4 <FLASH_WaitForLastOperation>
 801b9bc:	4603      	mov	r3, r0
 801b9be:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 801b9c0:	4b21      	ldr	r3, [pc, #132]	; (801ba48 <HAL_FLASHEx_Erase+0x140>)
 801b9c2:	695b      	ldr	r3, [r3, #20]
 801b9c4:	4a20      	ldr	r2, [pc, #128]	; (801ba48 <HAL_FLASHEx_Erase+0x140>)
 801b9c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801b9ca:	f023 0304 	bic.w	r3, r3, #4
 801b9ce:	6153      	str	r3, [r2, #20]
 801b9d0:	e02d      	b.n	801ba2e <HAL_FLASHEx_Erase+0x126>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 801b9d2:	683b      	ldr	r3, [r7, #0]
 801b9d4:	f04f 32ff 	mov.w	r2, #4294967295
 801b9d8:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801b9da:	687b      	ldr	r3, [r7, #4]
 801b9dc:	689b      	ldr	r3, [r3, #8]
 801b9de:	60bb      	str	r3, [r7, #8]
 801b9e0:	e01d      	b.n	801ba1e <HAL_FLASHEx_Erase+0x116>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 801b9e2:	687b      	ldr	r3, [r7, #4]
 801b9e4:	685b      	ldr	r3, [r3, #4]
 801b9e6:	4619      	mov	r1, r3
 801b9e8:	68b8      	ldr	r0, [r7, #8]
 801b9ea:	f000 f857 	bl	801ba9c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b9ee:	f24c 3050 	movw	r0, #50000	; 0xc350
 801b9f2:	f7ff fed7 	bl	801b7a4 <FLASH_WaitForLastOperation>
 801b9f6:	4603      	mov	r3, r0
 801b9f8:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 801b9fa:	4b13      	ldr	r3, [pc, #76]	; (801ba48 <HAL_FLASHEx_Erase+0x140>)
 801b9fc:	695b      	ldr	r3, [r3, #20]
 801b9fe:	4a12      	ldr	r2, [pc, #72]	; (801ba48 <HAL_FLASHEx_Erase+0x140>)
 801ba00:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801ba04:	f023 0302 	bic.w	r3, r3, #2
 801ba08:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 801ba0a:	7bfb      	ldrb	r3, [r7, #15]
 801ba0c:	2b00      	cmp	r3, #0
 801ba0e:	d003      	beq.n	801ba18 <HAL_FLASHEx_Erase+0x110>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 801ba10:	683b      	ldr	r3, [r7, #0]
 801ba12:	68ba      	ldr	r2, [r7, #8]
 801ba14:	601a      	str	r2, [r3, #0]
          break;
 801ba16:	e00a      	b.n	801ba2e <HAL_FLASHEx_Erase+0x126>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801ba18:	68bb      	ldr	r3, [r7, #8]
 801ba1a:	3301      	adds	r3, #1
 801ba1c:	60bb      	str	r3, [r7, #8]
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	689a      	ldr	r2, [r3, #8]
 801ba22:	687b      	ldr	r3, [r7, #4]
 801ba24:	68db      	ldr	r3, [r3, #12]
 801ba26:	4413      	add	r3, r2
 801ba28:	68ba      	ldr	r2, [r7, #8]
 801ba2a:	429a      	cmp	r2, r3
 801ba2c:	d3d9      	bcc.n	801b9e2 <HAL_FLASHEx_Erase+0xda>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 801ba2e:	f000 f86b 	bl	801bb08 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801ba32:	4b04      	ldr	r3, [pc, #16]	; (801ba44 <HAL_FLASHEx_Erase+0x13c>)
 801ba34:	2200      	movs	r2, #0
 801ba36:	701a      	strb	r2, [r3, #0]

  return status;
 801ba38:	7bfb      	ldrb	r3, [r7, #15]
}
 801ba3a:	4618      	mov	r0, r3
 801ba3c:	3710      	adds	r7, #16
 801ba3e:	46bd      	mov	sp, r7
 801ba40:	bd80      	pop	{r7, pc}
 801ba42:	bf00      	nop
 801ba44:	20000010 	.word	0x20000010
 801ba48:	40022000 	.word	0x40022000

0801ba4c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 801ba4c:	b480      	push	{r7}
 801ba4e:	b083      	sub	sp, #12
 801ba50:	af00      	add	r7, sp, #0
 801ba52:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 801ba54:	687b      	ldr	r3, [r7, #4]
 801ba56:	f003 0301 	and.w	r3, r3, #1
 801ba5a:	2b00      	cmp	r3, #0
 801ba5c:	d005      	beq.n	801ba6a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 801ba5e:	4b0e      	ldr	r3, [pc, #56]	; (801ba98 <FLASH_MassErase+0x4c>)
 801ba60:	695b      	ldr	r3, [r3, #20]
 801ba62:	4a0d      	ldr	r2, [pc, #52]	; (801ba98 <FLASH_MassErase+0x4c>)
 801ba64:	f043 0304 	orr.w	r3, r3, #4
 801ba68:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 801ba6a:	687b      	ldr	r3, [r7, #4]
 801ba6c:	f003 0302 	and.w	r3, r3, #2
 801ba70:	2b00      	cmp	r3, #0
 801ba72:	d005      	beq.n	801ba80 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 801ba74:	4b08      	ldr	r3, [pc, #32]	; (801ba98 <FLASH_MassErase+0x4c>)
 801ba76:	695b      	ldr	r3, [r3, #20]
 801ba78:	4a07      	ldr	r2, [pc, #28]	; (801ba98 <FLASH_MassErase+0x4c>)
 801ba7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801ba7e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801ba80:	4b05      	ldr	r3, [pc, #20]	; (801ba98 <FLASH_MassErase+0x4c>)
 801ba82:	695b      	ldr	r3, [r3, #20]
 801ba84:	4a04      	ldr	r2, [pc, #16]	; (801ba98 <FLASH_MassErase+0x4c>)
 801ba86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801ba8a:	6153      	str	r3, [r2, #20]
}
 801ba8c:	bf00      	nop
 801ba8e:	370c      	adds	r7, #12
 801ba90:	46bd      	mov	sp, r7
 801ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba96:	4770      	bx	lr
 801ba98:	40022000 	.word	0x40022000

0801ba9c <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 801ba9c:	b480      	push	{r7}
 801ba9e:	b083      	sub	sp, #12
 801baa0:	af00      	add	r7, sp, #0
 801baa2:	6078      	str	r0, [r7, #4]
 801baa4:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 801baa6:	683b      	ldr	r3, [r7, #0]
 801baa8:	f003 0301 	and.w	r3, r3, #1
 801baac:	2b00      	cmp	r3, #0
 801baae:	d006      	beq.n	801babe <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 801bab0:	4b14      	ldr	r3, [pc, #80]	; (801bb04 <FLASH_PageErase+0x68>)
 801bab2:	695b      	ldr	r3, [r3, #20]
 801bab4:	4a13      	ldr	r2, [pc, #76]	; (801bb04 <FLASH_PageErase+0x68>)
 801bab6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801baba:	6153      	str	r3, [r2, #20]
 801babc:	e005      	b.n	801baca <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 801babe:	4b11      	ldr	r3, [pc, #68]	; (801bb04 <FLASH_PageErase+0x68>)
 801bac0:	695b      	ldr	r3, [r3, #20]
 801bac2:	4a10      	ldr	r2, [pc, #64]	; (801bb04 <FLASH_PageErase+0x68>)
 801bac4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801bac8:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 801baca:	4b0e      	ldr	r3, [pc, #56]	; (801bb04 <FLASH_PageErase+0x68>)
 801bacc:	695b      	ldr	r3, [r3, #20]
 801bace:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 801bad2:	687b      	ldr	r3, [r7, #4]
 801bad4:	00db      	lsls	r3, r3, #3
 801bad6:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 801bada:	490a      	ldr	r1, [pc, #40]	; (801bb04 <FLASH_PageErase+0x68>)
 801badc:	4313      	orrs	r3, r2
 801bade:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 801bae0:	4b08      	ldr	r3, [pc, #32]	; (801bb04 <FLASH_PageErase+0x68>)
 801bae2:	695b      	ldr	r3, [r3, #20]
 801bae4:	4a07      	ldr	r2, [pc, #28]	; (801bb04 <FLASH_PageErase+0x68>)
 801bae6:	f043 0302 	orr.w	r3, r3, #2
 801baea:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801baec:	4b05      	ldr	r3, [pc, #20]	; (801bb04 <FLASH_PageErase+0x68>)
 801baee:	695b      	ldr	r3, [r3, #20]
 801baf0:	4a04      	ldr	r2, [pc, #16]	; (801bb04 <FLASH_PageErase+0x68>)
 801baf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801baf6:	6153      	str	r3, [r2, #20]
}
 801baf8:	bf00      	nop
 801bafa:	370c      	adds	r7, #12
 801bafc:	46bd      	mov	sp, r7
 801bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb02:	4770      	bx	lr
 801bb04:	40022000 	.word	0x40022000

0801bb08 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 801bb08:	b480      	push	{r7}
 801bb0a:	b083      	sub	sp, #12
 801bb0c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 801bb0e:	4b1e      	ldr	r3, [pc, #120]	; (801bb88 <FLASH_FlushCaches+0x80>)
 801bb10:	7f1b      	ldrb	r3, [r3, #28]
 801bb12:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 801bb14:	79fb      	ldrb	r3, [r7, #7]
 801bb16:	2b01      	cmp	r3, #1
 801bb18:	d002      	beq.n	801bb20 <FLASH_FlushCaches+0x18>
 801bb1a:	79fb      	ldrb	r3, [r7, #7]
 801bb1c:	2b03      	cmp	r3, #3
 801bb1e:	d111      	bne.n	801bb44 <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 801bb20:	4b1a      	ldr	r3, [pc, #104]	; (801bb8c <FLASH_FlushCaches+0x84>)
 801bb22:	681b      	ldr	r3, [r3, #0]
 801bb24:	4a19      	ldr	r2, [pc, #100]	; (801bb8c <FLASH_FlushCaches+0x84>)
 801bb26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801bb2a:	6013      	str	r3, [r2, #0]
 801bb2c:	4b17      	ldr	r3, [pc, #92]	; (801bb8c <FLASH_FlushCaches+0x84>)
 801bb2e:	681b      	ldr	r3, [r3, #0]
 801bb30:	4a16      	ldr	r2, [pc, #88]	; (801bb8c <FLASH_FlushCaches+0x84>)
 801bb32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801bb36:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801bb38:	4b14      	ldr	r3, [pc, #80]	; (801bb8c <FLASH_FlushCaches+0x84>)
 801bb3a:	681b      	ldr	r3, [r3, #0]
 801bb3c:	4a13      	ldr	r2, [pc, #76]	; (801bb8c <FLASH_FlushCaches+0x84>)
 801bb3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801bb42:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 801bb44:	79fb      	ldrb	r3, [r7, #7]
 801bb46:	2b02      	cmp	r3, #2
 801bb48:	d002      	beq.n	801bb50 <FLASH_FlushCaches+0x48>
 801bb4a:	79fb      	ldrb	r3, [r7, #7]
 801bb4c:	2b03      	cmp	r3, #3
 801bb4e:	d111      	bne.n	801bb74 <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 801bb50:	4b0e      	ldr	r3, [pc, #56]	; (801bb8c <FLASH_FlushCaches+0x84>)
 801bb52:	681b      	ldr	r3, [r3, #0]
 801bb54:	4a0d      	ldr	r2, [pc, #52]	; (801bb8c <FLASH_FlushCaches+0x84>)
 801bb56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801bb5a:	6013      	str	r3, [r2, #0]
 801bb5c:	4b0b      	ldr	r3, [pc, #44]	; (801bb8c <FLASH_FlushCaches+0x84>)
 801bb5e:	681b      	ldr	r3, [r3, #0]
 801bb60:	4a0a      	ldr	r2, [pc, #40]	; (801bb8c <FLASH_FlushCaches+0x84>)
 801bb62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bb66:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 801bb68:	4b08      	ldr	r3, [pc, #32]	; (801bb8c <FLASH_FlushCaches+0x84>)
 801bb6a:	681b      	ldr	r3, [r3, #0]
 801bb6c:	4a07      	ldr	r2, [pc, #28]	; (801bb8c <FLASH_FlushCaches+0x84>)
 801bb6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801bb72:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801bb74:	4b04      	ldr	r3, [pc, #16]	; (801bb88 <FLASH_FlushCaches+0x80>)
 801bb76:	2200      	movs	r2, #0
 801bb78:	771a      	strb	r2, [r3, #28]
}
 801bb7a:	bf00      	nop
 801bb7c:	370c      	adds	r7, #12
 801bb7e:	46bd      	mov	sp, r7
 801bb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb84:	4770      	bx	lr
 801bb86:	bf00      	nop
 801bb88:	20000010 	.word	0x20000010
 801bb8c:	40022000 	.word	0x40022000

0801bb90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801bb90:	b480      	push	{r7}
 801bb92:	b087      	sub	sp, #28
 801bb94:	af00      	add	r7, sp, #0
 801bb96:	6078      	str	r0, [r7, #4]
 801bb98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 801bb9a:	2300      	movs	r3, #0
 801bb9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801bb9e:	e17f      	b.n	801bea0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 801bba0:	683b      	ldr	r3, [r7, #0]
 801bba2:	681a      	ldr	r2, [r3, #0]
 801bba4:	2101      	movs	r1, #1
 801bba6:	697b      	ldr	r3, [r7, #20]
 801bba8:	fa01 f303 	lsl.w	r3, r1, r3
 801bbac:	4013      	ands	r3, r2
 801bbae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 801bbb0:	68fb      	ldr	r3, [r7, #12]
 801bbb2:	2b00      	cmp	r3, #0
 801bbb4:	f000 8171 	beq.w	801be9a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801bbb8:	683b      	ldr	r3, [r7, #0]
 801bbba:	685b      	ldr	r3, [r3, #4]
 801bbbc:	2b01      	cmp	r3, #1
 801bbbe:	d00b      	beq.n	801bbd8 <HAL_GPIO_Init+0x48>
 801bbc0:	683b      	ldr	r3, [r7, #0]
 801bbc2:	685b      	ldr	r3, [r3, #4]
 801bbc4:	2b02      	cmp	r3, #2
 801bbc6:	d007      	beq.n	801bbd8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801bbc8:	683b      	ldr	r3, [r7, #0]
 801bbca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801bbcc:	2b11      	cmp	r3, #17
 801bbce:	d003      	beq.n	801bbd8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801bbd0:	683b      	ldr	r3, [r7, #0]
 801bbd2:	685b      	ldr	r3, [r3, #4]
 801bbd4:	2b12      	cmp	r3, #18
 801bbd6:	d130      	bne.n	801bc3a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801bbd8:	687b      	ldr	r3, [r7, #4]
 801bbda:	689b      	ldr	r3, [r3, #8]
 801bbdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801bbde:	697b      	ldr	r3, [r7, #20]
 801bbe0:	005b      	lsls	r3, r3, #1
 801bbe2:	2203      	movs	r2, #3
 801bbe4:	fa02 f303 	lsl.w	r3, r2, r3
 801bbe8:	43db      	mvns	r3, r3
 801bbea:	693a      	ldr	r2, [r7, #16]
 801bbec:	4013      	ands	r3, r2
 801bbee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 801bbf0:	683b      	ldr	r3, [r7, #0]
 801bbf2:	68da      	ldr	r2, [r3, #12]
 801bbf4:	697b      	ldr	r3, [r7, #20]
 801bbf6:	005b      	lsls	r3, r3, #1
 801bbf8:	fa02 f303 	lsl.w	r3, r2, r3
 801bbfc:	693a      	ldr	r2, [r7, #16]
 801bbfe:	4313      	orrs	r3, r2
 801bc00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801bc02:	687b      	ldr	r3, [r7, #4]
 801bc04:	693a      	ldr	r2, [r7, #16]
 801bc06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801bc08:	687b      	ldr	r3, [r7, #4]
 801bc0a:	685b      	ldr	r3, [r3, #4]
 801bc0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801bc0e:	2201      	movs	r2, #1
 801bc10:	697b      	ldr	r3, [r7, #20]
 801bc12:	fa02 f303 	lsl.w	r3, r2, r3
 801bc16:	43db      	mvns	r3, r3
 801bc18:	693a      	ldr	r2, [r7, #16]
 801bc1a:	4013      	ands	r3, r2
 801bc1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 801bc1e:	683b      	ldr	r3, [r7, #0]
 801bc20:	685b      	ldr	r3, [r3, #4]
 801bc22:	091b      	lsrs	r3, r3, #4
 801bc24:	f003 0201 	and.w	r2, r3, #1
 801bc28:	697b      	ldr	r3, [r7, #20]
 801bc2a:	fa02 f303 	lsl.w	r3, r2, r3
 801bc2e:	693a      	ldr	r2, [r7, #16]
 801bc30:	4313      	orrs	r3, r2
 801bc32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801bc34:	687b      	ldr	r3, [r7, #4]
 801bc36:	693a      	ldr	r2, [r7, #16]
 801bc38:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 801bc3a:	683b      	ldr	r3, [r7, #0]
 801bc3c:	685b      	ldr	r3, [r3, #4]
 801bc3e:	f003 0303 	and.w	r3, r3, #3
 801bc42:	2b03      	cmp	r3, #3
 801bc44:	d118      	bne.n	801bc78 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 801bc46:	687b      	ldr	r3, [r7, #4]
 801bc48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bc4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 801bc4c:	2201      	movs	r2, #1
 801bc4e:	697b      	ldr	r3, [r7, #20]
 801bc50:	fa02 f303 	lsl.w	r3, r2, r3
 801bc54:	43db      	mvns	r3, r3
 801bc56:	693a      	ldr	r2, [r7, #16]
 801bc58:	4013      	ands	r3, r2
 801bc5a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 801bc5c:	683b      	ldr	r3, [r7, #0]
 801bc5e:	685b      	ldr	r3, [r3, #4]
 801bc60:	08db      	lsrs	r3, r3, #3
 801bc62:	f003 0201 	and.w	r2, r3, #1
 801bc66:	697b      	ldr	r3, [r7, #20]
 801bc68:	fa02 f303 	lsl.w	r3, r2, r3
 801bc6c:	693a      	ldr	r2, [r7, #16]
 801bc6e:	4313      	orrs	r3, r2
 801bc70:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 801bc72:	687b      	ldr	r3, [r7, #4]
 801bc74:	693a      	ldr	r2, [r7, #16]
 801bc76:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801bc78:	687b      	ldr	r3, [r7, #4]
 801bc7a:	68db      	ldr	r3, [r3, #12]
 801bc7c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 801bc7e:	697b      	ldr	r3, [r7, #20]
 801bc80:	005b      	lsls	r3, r3, #1
 801bc82:	2203      	movs	r2, #3
 801bc84:	fa02 f303 	lsl.w	r3, r2, r3
 801bc88:	43db      	mvns	r3, r3
 801bc8a:	693a      	ldr	r2, [r7, #16]
 801bc8c:	4013      	ands	r3, r2
 801bc8e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 801bc90:	683b      	ldr	r3, [r7, #0]
 801bc92:	689a      	ldr	r2, [r3, #8]
 801bc94:	697b      	ldr	r3, [r7, #20]
 801bc96:	005b      	lsls	r3, r3, #1
 801bc98:	fa02 f303 	lsl.w	r3, r2, r3
 801bc9c:	693a      	ldr	r2, [r7, #16]
 801bc9e:	4313      	orrs	r3, r2
 801bca0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 801bca2:	687b      	ldr	r3, [r7, #4]
 801bca4:	693a      	ldr	r2, [r7, #16]
 801bca6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801bca8:	683b      	ldr	r3, [r7, #0]
 801bcaa:	685b      	ldr	r3, [r3, #4]
 801bcac:	2b02      	cmp	r3, #2
 801bcae:	d003      	beq.n	801bcb8 <HAL_GPIO_Init+0x128>
 801bcb0:	683b      	ldr	r3, [r7, #0]
 801bcb2:	685b      	ldr	r3, [r3, #4]
 801bcb4:	2b12      	cmp	r3, #18
 801bcb6:	d123      	bne.n	801bd00 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 801bcb8:	697b      	ldr	r3, [r7, #20]
 801bcba:	08da      	lsrs	r2, r3, #3
 801bcbc:	687b      	ldr	r3, [r7, #4]
 801bcbe:	3208      	adds	r2, #8
 801bcc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bcc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 801bcc6:	697b      	ldr	r3, [r7, #20]
 801bcc8:	f003 0307 	and.w	r3, r3, #7
 801bccc:	009b      	lsls	r3, r3, #2
 801bcce:	220f      	movs	r2, #15
 801bcd0:	fa02 f303 	lsl.w	r3, r2, r3
 801bcd4:	43db      	mvns	r3, r3
 801bcd6:	693a      	ldr	r2, [r7, #16]
 801bcd8:	4013      	ands	r3, r2
 801bcda:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 801bcdc:	683b      	ldr	r3, [r7, #0]
 801bcde:	691a      	ldr	r2, [r3, #16]
 801bce0:	697b      	ldr	r3, [r7, #20]
 801bce2:	f003 0307 	and.w	r3, r3, #7
 801bce6:	009b      	lsls	r3, r3, #2
 801bce8:	fa02 f303 	lsl.w	r3, r2, r3
 801bcec:	693a      	ldr	r2, [r7, #16]
 801bcee:	4313      	orrs	r3, r2
 801bcf0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 801bcf2:	697b      	ldr	r3, [r7, #20]
 801bcf4:	08da      	lsrs	r2, r3, #3
 801bcf6:	687b      	ldr	r3, [r7, #4]
 801bcf8:	3208      	adds	r2, #8
 801bcfa:	6939      	ldr	r1, [r7, #16]
 801bcfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801bd00:	687b      	ldr	r3, [r7, #4]
 801bd02:	681b      	ldr	r3, [r3, #0]
 801bd04:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 801bd06:	697b      	ldr	r3, [r7, #20]
 801bd08:	005b      	lsls	r3, r3, #1
 801bd0a:	2203      	movs	r2, #3
 801bd0c:	fa02 f303 	lsl.w	r3, r2, r3
 801bd10:	43db      	mvns	r3, r3
 801bd12:	693a      	ldr	r2, [r7, #16]
 801bd14:	4013      	ands	r3, r2
 801bd16:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 801bd18:	683b      	ldr	r3, [r7, #0]
 801bd1a:	685b      	ldr	r3, [r3, #4]
 801bd1c:	f003 0203 	and.w	r2, r3, #3
 801bd20:	697b      	ldr	r3, [r7, #20]
 801bd22:	005b      	lsls	r3, r3, #1
 801bd24:	fa02 f303 	lsl.w	r3, r2, r3
 801bd28:	693a      	ldr	r2, [r7, #16]
 801bd2a:	4313      	orrs	r3, r2
 801bd2c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 801bd2e:	687b      	ldr	r3, [r7, #4]
 801bd30:	693a      	ldr	r2, [r7, #16]
 801bd32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801bd34:	683b      	ldr	r3, [r7, #0]
 801bd36:	685b      	ldr	r3, [r3, #4]
 801bd38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801bd3c:	2b00      	cmp	r3, #0
 801bd3e:	f000 80ac 	beq.w	801be9a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801bd42:	4b5f      	ldr	r3, [pc, #380]	; (801bec0 <HAL_GPIO_Init+0x330>)
 801bd44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bd46:	4a5e      	ldr	r2, [pc, #376]	; (801bec0 <HAL_GPIO_Init+0x330>)
 801bd48:	f043 0301 	orr.w	r3, r3, #1
 801bd4c:	6613      	str	r3, [r2, #96]	; 0x60
 801bd4e:	4b5c      	ldr	r3, [pc, #368]	; (801bec0 <HAL_GPIO_Init+0x330>)
 801bd50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bd52:	f003 0301 	and.w	r3, r3, #1
 801bd56:	60bb      	str	r3, [r7, #8]
 801bd58:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 801bd5a:	4a5a      	ldr	r2, [pc, #360]	; (801bec4 <HAL_GPIO_Init+0x334>)
 801bd5c:	697b      	ldr	r3, [r7, #20]
 801bd5e:	089b      	lsrs	r3, r3, #2
 801bd60:	3302      	adds	r3, #2
 801bd62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bd66:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 801bd68:	697b      	ldr	r3, [r7, #20]
 801bd6a:	f003 0303 	and.w	r3, r3, #3
 801bd6e:	009b      	lsls	r3, r3, #2
 801bd70:	220f      	movs	r2, #15
 801bd72:	fa02 f303 	lsl.w	r3, r2, r3
 801bd76:	43db      	mvns	r3, r3
 801bd78:	693a      	ldr	r2, [r7, #16]
 801bd7a:	4013      	ands	r3, r2
 801bd7c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 801bd7e:	687b      	ldr	r3, [r7, #4]
 801bd80:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 801bd84:	d025      	beq.n	801bdd2 <HAL_GPIO_Init+0x242>
 801bd86:	687b      	ldr	r3, [r7, #4]
 801bd88:	4a4f      	ldr	r2, [pc, #316]	; (801bec8 <HAL_GPIO_Init+0x338>)
 801bd8a:	4293      	cmp	r3, r2
 801bd8c:	d01f      	beq.n	801bdce <HAL_GPIO_Init+0x23e>
 801bd8e:	687b      	ldr	r3, [r7, #4]
 801bd90:	4a4e      	ldr	r2, [pc, #312]	; (801becc <HAL_GPIO_Init+0x33c>)
 801bd92:	4293      	cmp	r3, r2
 801bd94:	d019      	beq.n	801bdca <HAL_GPIO_Init+0x23a>
 801bd96:	687b      	ldr	r3, [r7, #4]
 801bd98:	4a4d      	ldr	r2, [pc, #308]	; (801bed0 <HAL_GPIO_Init+0x340>)
 801bd9a:	4293      	cmp	r3, r2
 801bd9c:	d013      	beq.n	801bdc6 <HAL_GPIO_Init+0x236>
 801bd9e:	687b      	ldr	r3, [r7, #4]
 801bda0:	4a4c      	ldr	r2, [pc, #304]	; (801bed4 <HAL_GPIO_Init+0x344>)
 801bda2:	4293      	cmp	r3, r2
 801bda4:	d00d      	beq.n	801bdc2 <HAL_GPIO_Init+0x232>
 801bda6:	687b      	ldr	r3, [r7, #4]
 801bda8:	4a4b      	ldr	r2, [pc, #300]	; (801bed8 <HAL_GPIO_Init+0x348>)
 801bdaa:	4293      	cmp	r3, r2
 801bdac:	d007      	beq.n	801bdbe <HAL_GPIO_Init+0x22e>
 801bdae:	687b      	ldr	r3, [r7, #4]
 801bdb0:	4a4a      	ldr	r2, [pc, #296]	; (801bedc <HAL_GPIO_Init+0x34c>)
 801bdb2:	4293      	cmp	r3, r2
 801bdb4:	d101      	bne.n	801bdba <HAL_GPIO_Init+0x22a>
 801bdb6:	2306      	movs	r3, #6
 801bdb8:	e00c      	b.n	801bdd4 <HAL_GPIO_Init+0x244>
 801bdba:	2307      	movs	r3, #7
 801bdbc:	e00a      	b.n	801bdd4 <HAL_GPIO_Init+0x244>
 801bdbe:	2305      	movs	r3, #5
 801bdc0:	e008      	b.n	801bdd4 <HAL_GPIO_Init+0x244>
 801bdc2:	2304      	movs	r3, #4
 801bdc4:	e006      	b.n	801bdd4 <HAL_GPIO_Init+0x244>
 801bdc6:	2303      	movs	r3, #3
 801bdc8:	e004      	b.n	801bdd4 <HAL_GPIO_Init+0x244>
 801bdca:	2302      	movs	r3, #2
 801bdcc:	e002      	b.n	801bdd4 <HAL_GPIO_Init+0x244>
 801bdce:	2301      	movs	r3, #1
 801bdd0:	e000      	b.n	801bdd4 <HAL_GPIO_Init+0x244>
 801bdd2:	2300      	movs	r3, #0
 801bdd4:	697a      	ldr	r2, [r7, #20]
 801bdd6:	f002 0203 	and.w	r2, r2, #3
 801bdda:	0092      	lsls	r2, r2, #2
 801bddc:	4093      	lsls	r3, r2
 801bdde:	693a      	ldr	r2, [r7, #16]
 801bde0:	4313      	orrs	r3, r2
 801bde2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 801bde4:	4937      	ldr	r1, [pc, #220]	; (801bec4 <HAL_GPIO_Init+0x334>)
 801bde6:	697b      	ldr	r3, [r7, #20]
 801bde8:	089b      	lsrs	r3, r3, #2
 801bdea:	3302      	adds	r3, #2
 801bdec:	693a      	ldr	r2, [r7, #16]
 801bdee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 801bdf2:	4b3b      	ldr	r3, [pc, #236]	; (801bee0 <HAL_GPIO_Init+0x350>)
 801bdf4:	681b      	ldr	r3, [r3, #0]
 801bdf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801bdf8:	68fb      	ldr	r3, [r7, #12]
 801bdfa:	43db      	mvns	r3, r3
 801bdfc:	693a      	ldr	r2, [r7, #16]
 801bdfe:	4013      	ands	r3, r2
 801be00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801be02:	683b      	ldr	r3, [r7, #0]
 801be04:	685b      	ldr	r3, [r3, #4]
 801be06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801be0a:	2b00      	cmp	r3, #0
 801be0c:	d003      	beq.n	801be16 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 801be0e:	693a      	ldr	r2, [r7, #16]
 801be10:	68fb      	ldr	r3, [r7, #12]
 801be12:	4313      	orrs	r3, r2
 801be14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 801be16:	4a32      	ldr	r2, [pc, #200]	; (801bee0 <HAL_GPIO_Init+0x350>)
 801be18:	693b      	ldr	r3, [r7, #16]
 801be1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 801be1c:	4b30      	ldr	r3, [pc, #192]	; (801bee0 <HAL_GPIO_Init+0x350>)
 801be1e:	685b      	ldr	r3, [r3, #4]
 801be20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801be22:	68fb      	ldr	r3, [r7, #12]
 801be24:	43db      	mvns	r3, r3
 801be26:	693a      	ldr	r2, [r7, #16]
 801be28:	4013      	ands	r3, r2
 801be2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801be2c:	683b      	ldr	r3, [r7, #0]
 801be2e:	685b      	ldr	r3, [r3, #4]
 801be30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801be34:	2b00      	cmp	r3, #0
 801be36:	d003      	beq.n	801be40 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 801be38:	693a      	ldr	r2, [r7, #16]
 801be3a:	68fb      	ldr	r3, [r7, #12]
 801be3c:	4313      	orrs	r3, r2
 801be3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 801be40:	4a27      	ldr	r2, [pc, #156]	; (801bee0 <HAL_GPIO_Init+0x350>)
 801be42:	693b      	ldr	r3, [r7, #16]
 801be44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801be46:	4b26      	ldr	r3, [pc, #152]	; (801bee0 <HAL_GPIO_Init+0x350>)
 801be48:	689b      	ldr	r3, [r3, #8]
 801be4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801be4c:	68fb      	ldr	r3, [r7, #12]
 801be4e:	43db      	mvns	r3, r3
 801be50:	693a      	ldr	r2, [r7, #16]
 801be52:	4013      	ands	r3, r2
 801be54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801be56:	683b      	ldr	r3, [r7, #0]
 801be58:	685b      	ldr	r3, [r3, #4]
 801be5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801be5e:	2b00      	cmp	r3, #0
 801be60:	d003      	beq.n	801be6a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 801be62:	693a      	ldr	r2, [r7, #16]
 801be64:	68fb      	ldr	r3, [r7, #12]
 801be66:	4313      	orrs	r3, r2
 801be68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 801be6a:	4a1d      	ldr	r2, [pc, #116]	; (801bee0 <HAL_GPIO_Init+0x350>)
 801be6c:	693b      	ldr	r3, [r7, #16]
 801be6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 801be70:	4b1b      	ldr	r3, [pc, #108]	; (801bee0 <HAL_GPIO_Init+0x350>)
 801be72:	68db      	ldr	r3, [r3, #12]
 801be74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801be76:	68fb      	ldr	r3, [r7, #12]
 801be78:	43db      	mvns	r3, r3
 801be7a:	693a      	ldr	r2, [r7, #16]
 801be7c:	4013      	ands	r3, r2
 801be7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801be80:	683b      	ldr	r3, [r7, #0]
 801be82:	685b      	ldr	r3, [r3, #4]
 801be84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801be88:	2b00      	cmp	r3, #0
 801be8a:	d003      	beq.n	801be94 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 801be8c:	693a      	ldr	r2, [r7, #16]
 801be8e:	68fb      	ldr	r3, [r7, #12]
 801be90:	4313      	orrs	r3, r2
 801be92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801be94:	4a12      	ldr	r2, [pc, #72]	; (801bee0 <HAL_GPIO_Init+0x350>)
 801be96:	693b      	ldr	r3, [r7, #16]
 801be98:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 801be9a:	697b      	ldr	r3, [r7, #20]
 801be9c:	3301      	adds	r3, #1
 801be9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801bea0:	683b      	ldr	r3, [r7, #0]
 801bea2:	681a      	ldr	r2, [r3, #0]
 801bea4:	697b      	ldr	r3, [r7, #20]
 801bea6:	fa22 f303 	lsr.w	r3, r2, r3
 801beaa:	2b00      	cmp	r3, #0
 801beac:	f47f ae78 	bne.w	801bba0 <HAL_GPIO_Init+0x10>
  }
}
 801beb0:	bf00      	nop
 801beb2:	bf00      	nop
 801beb4:	371c      	adds	r7, #28
 801beb6:	46bd      	mov	sp, r7
 801beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bebc:	4770      	bx	lr
 801bebe:	bf00      	nop
 801bec0:	40021000 	.word	0x40021000
 801bec4:	40010000 	.word	0x40010000
 801bec8:	48000400 	.word	0x48000400
 801becc:	48000800 	.word	0x48000800
 801bed0:	48000c00 	.word	0x48000c00
 801bed4:	48001000 	.word	0x48001000
 801bed8:	48001400 	.word	0x48001400
 801bedc:	48001800 	.word	0x48001800
 801bee0:	40010400 	.word	0x40010400

0801bee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801bee4:	b480      	push	{r7}
 801bee6:	b083      	sub	sp, #12
 801bee8:	af00      	add	r7, sp, #0
 801beea:	6078      	str	r0, [r7, #4]
 801beec:	460b      	mov	r3, r1
 801beee:	807b      	strh	r3, [r7, #2]
 801bef0:	4613      	mov	r3, r2
 801bef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801bef4:	787b      	ldrb	r3, [r7, #1]
 801bef6:	2b00      	cmp	r3, #0
 801bef8:	d003      	beq.n	801bf02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801befa:	887a      	ldrh	r2, [r7, #2]
 801befc:	687b      	ldr	r3, [r7, #4]
 801befe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 801bf00:	e002      	b.n	801bf08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801bf02:	887a      	ldrh	r2, [r7, #2]
 801bf04:	687b      	ldr	r3, [r7, #4]
 801bf06:	629a      	str	r2, [r3, #40]	; 0x28
}
 801bf08:	bf00      	nop
 801bf0a:	370c      	adds	r7, #12
 801bf0c:	46bd      	mov	sp, r7
 801bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf12:	4770      	bx	lr

0801bf14 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801bf14:	b480      	push	{r7}
 801bf16:	b085      	sub	sp, #20
 801bf18:	af00      	add	r7, sp, #0
 801bf1a:	6078      	str	r0, [r7, #4]
 801bf1c:	460b      	mov	r3, r1
 801bf1e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 801bf20:	687b      	ldr	r3, [r7, #4]
 801bf22:	695b      	ldr	r3, [r3, #20]
 801bf24:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 801bf26:	887a      	ldrh	r2, [r7, #2]
 801bf28:	68fb      	ldr	r3, [r7, #12]
 801bf2a:	4013      	ands	r3, r2
 801bf2c:	041a      	lsls	r2, r3, #16
 801bf2e:	68fb      	ldr	r3, [r7, #12]
 801bf30:	43d9      	mvns	r1, r3
 801bf32:	887b      	ldrh	r3, [r7, #2]
 801bf34:	400b      	ands	r3, r1
 801bf36:	431a      	orrs	r2, r3
 801bf38:	687b      	ldr	r3, [r7, #4]
 801bf3a:	619a      	str	r2, [r3, #24]
}
 801bf3c:	bf00      	nop
 801bf3e:	3714      	adds	r7, #20
 801bf40:	46bd      	mov	sp, r7
 801bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf46:	4770      	bx	lr

0801bf48 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 801bf48:	b480      	push	{r7}
 801bf4a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 801bf4c:	4b04      	ldr	r3, [pc, #16]	; (801bf60 <HAL_PWREx_GetVoltageRange+0x18>)
 801bf4e:	681b      	ldr	r3, [r3, #0]
 801bf50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 801bf54:	4618      	mov	r0, r3
 801bf56:	46bd      	mov	sp, r7
 801bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf5c:	4770      	bx	lr
 801bf5e:	bf00      	nop
 801bf60:	40007000 	.word	0x40007000

0801bf64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 801bf64:	b480      	push	{r7}
 801bf66:	b085      	sub	sp, #20
 801bf68:	af00      	add	r7, sp, #0
 801bf6a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 801bf6c:	687b      	ldr	r3, [r7, #4]
 801bf6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bf72:	d130      	bne.n	801bfd6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 801bf74:	4b23      	ldr	r3, [pc, #140]	; (801c004 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801bf76:	681b      	ldr	r3, [r3, #0]
 801bf78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801bf7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bf80:	d038      	beq.n	801bff4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801bf82:	4b20      	ldr	r3, [pc, #128]	; (801c004 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801bf84:	681b      	ldr	r3, [r3, #0]
 801bf86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801bf8a:	4a1e      	ldr	r2, [pc, #120]	; (801c004 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801bf8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801bf90:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801bf92:	4b1d      	ldr	r3, [pc, #116]	; (801c008 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 801bf94:	681b      	ldr	r3, [r3, #0]
 801bf96:	2232      	movs	r2, #50	; 0x32
 801bf98:	fb02 f303 	mul.w	r3, r2, r3
 801bf9c:	4a1b      	ldr	r2, [pc, #108]	; (801c00c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 801bf9e:	fba2 2303 	umull	r2, r3, r2, r3
 801bfa2:	0c9b      	lsrs	r3, r3, #18
 801bfa4:	3301      	adds	r3, #1
 801bfa6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801bfa8:	e002      	b.n	801bfb0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 801bfaa:	68fb      	ldr	r3, [r7, #12]
 801bfac:	3b01      	subs	r3, #1
 801bfae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801bfb0:	4b14      	ldr	r3, [pc, #80]	; (801c004 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801bfb2:	695b      	ldr	r3, [r3, #20]
 801bfb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bfb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bfbc:	d102      	bne.n	801bfc4 <HAL_PWREx_ControlVoltageScaling+0x60>
 801bfbe:	68fb      	ldr	r3, [r7, #12]
 801bfc0:	2b00      	cmp	r3, #0
 801bfc2:	d1f2      	bne.n	801bfaa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801bfc4:	4b0f      	ldr	r3, [pc, #60]	; (801c004 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801bfc6:	695b      	ldr	r3, [r3, #20]
 801bfc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bfcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bfd0:	d110      	bne.n	801bff4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 801bfd2:	2303      	movs	r3, #3
 801bfd4:	e00f      	b.n	801bff6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 801bfd6:	4b0b      	ldr	r3, [pc, #44]	; (801c004 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801bfd8:	681b      	ldr	r3, [r3, #0]
 801bfda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801bfde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bfe2:	d007      	beq.n	801bff4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 801bfe4:	4b07      	ldr	r3, [pc, #28]	; (801c004 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801bfe6:	681b      	ldr	r3, [r3, #0]
 801bfe8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801bfec:	4a05      	ldr	r2, [pc, #20]	; (801c004 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801bfee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801bff2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 801bff4:	2300      	movs	r3, #0
}
 801bff6:	4618      	mov	r0, r3
 801bff8:	3714      	adds	r7, #20
 801bffa:	46bd      	mov	sp, r7
 801bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c000:	4770      	bx	lr
 801c002:	bf00      	nop
 801c004:	40007000 	.word	0x40007000
 801c008:	20000004 	.word	0x20000004
 801c00c:	431bde83 	.word	0x431bde83

0801c010 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801c010:	b580      	push	{r7, lr}
 801c012:	b088      	sub	sp, #32
 801c014:	af00      	add	r7, sp, #0
 801c016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801c018:	687b      	ldr	r3, [r7, #4]
 801c01a:	2b00      	cmp	r3, #0
 801c01c:	d101      	bne.n	801c022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801c01e:	2301      	movs	r3, #1
 801c020:	e3d4      	b.n	801c7cc <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c022:	4ba1      	ldr	r3, [pc, #644]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c024:	689b      	ldr	r3, [r3, #8]
 801c026:	f003 030c 	and.w	r3, r3, #12
 801c02a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801c02c:	4b9e      	ldr	r3, [pc, #632]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c02e:	68db      	ldr	r3, [r3, #12]
 801c030:	f003 0303 	and.w	r3, r3, #3
 801c034:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801c036:	687b      	ldr	r3, [r7, #4]
 801c038:	681b      	ldr	r3, [r3, #0]
 801c03a:	f003 0310 	and.w	r3, r3, #16
 801c03e:	2b00      	cmp	r3, #0
 801c040:	f000 80e4 	beq.w	801c20c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 801c044:	69bb      	ldr	r3, [r7, #24]
 801c046:	2b00      	cmp	r3, #0
 801c048:	d007      	beq.n	801c05a <HAL_RCC_OscConfig+0x4a>
 801c04a:	69bb      	ldr	r3, [r7, #24]
 801c04c:	2b0c      	cmp	r3, #12
 801c04e:	f040 808b 	bne.w	801c168 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 801c052:	697b      	ldr	r3, [r7, #20]
 801c054:	2b01      	cmp	r3, #1
 801c056:	f040 8087 	bne.w	801c168 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801c05a:	4b93      	ldr	r3, [pc, #588]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c05c:	681b      	ldr	r3, [r3, #0]
 801c05e:	f003 0302 	and.w	r3, r3, #2
 801c062:	2b00      	cmp	r3, #0
 801c064:	d005      	beq.n	801c072 <HAL_RCC_OscConfig+0x62>
 801c066:	687b      	ldr	r3, [r7, #4]
 801c068:	699b      	ldr	r3, [r3, #24]
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	d101      	bne.n	801c072 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 801c06e:	2301      	movs	r3, #1
 801c070:	e3ac      	b.n	801c7cc <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 801c072:	687b      	ldr	r3, [r7, #4]
 801c074:	6a1a      	ldr	r2, [r3, #32]
 801c076:	4b8c      	ldr	r3, [pc, #560]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c078:	681b      	ldr	r3, [r3, #0]
 801c07a:	f003 0308 	and.w	r3, r3, #8
 801c07e:	2b00      	cmp	r3, #0
 801c080:	d004      	beq.n	801c08c <HAL_RCC_OscConfig+0x7c>
 801c082:	4b89      	ldr	r3, [pc, #548]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c084:	681b      	ldr	r3, [r3, #0]
 801c086:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c08a:	e005      	b.n	801c098 <HAL_RCC_OscConfig+0x88>
 801c08c:	4b86      	ldr	r3, [pc, #536]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c08e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c092:	091b      	lsrs	r3, r3, #4
 801c094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c098:	4293      	cmp	r3, r2
 801c09a:	d223      	bcs.n	801c0e4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801c09c:	687b      	ldr	r3, [r7, #4]
 801c09e:	6a1b      	ldr	r3, [r3, #32]
 801c0a0:	4618      	mov	r0, r3
 801c0a2:	f000 fd41 	bl	801cb28 <RCC_SetFlashLatencyFromMSIRange>
 801c0a6:	4603      	mov	r3, r0
 801c0a8:	2b00      	cmp	r3, #0
 801c0aa:	d001      	beq.n	801c0b0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 801c0ac:	2301      	movs	r3, #1
 801c0ae:	e38d      	b.n	801c7cc <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801c0b0:	4b7d      	ldr	r3, [pc, #500]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c0b2:	681b      	ldr	r3, [r3, #0]
 801c0b4:	4a7c      	ldr	r2, [pc, #496]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c0b6:	f043 0308 	orr.w	r3, r3, #8
 801c0ba:	6013      	str	r3, [r2, #0]
 801c0bc:	4b7a      	ldr	r3, [pc, #488]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c0be:	681b      	ldr	r3, [r3, #0]
 801c0c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801c0c4:	687b      	ldr	r3, [r7, #4]
 801c0c6:	6a1b      	ldr	r3, [r3, #32]
 801c0c8:	4977      	ldr	r1, [pc, #476]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c0ca:	4313      	orrs	r3, r2
 801c0cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801c0ce:	4b76      	ldr	r3, [pc, #472]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c0d0:	685b      	ldr	r3, [r3, #4]
 801c0d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 801c0d6:	687b      	ldr	r3, [r7, #4]
 801c0d8:	69db      	ldr	r3, [r3, #28]
 801c0da:	021b      	lsls	r3, r3, #8
 801c0dc:	4972      	ldr	r1, [pc, #456]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c0de:	4313      	orrs	r3, r2
 801c0e0:	604b      	str	r3, [r1, #4]
 801c0e2:	e025      	b.n	801c130 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801c0e4:	4b70      	ldr	r3, [pc, #448]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c0e6:	681b      	ldr	r3, [r3, #0]
 801c0e8:	4a6f      	ldr	r2, [pc, #444]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c0ea:	f043 0308 	orr.w	r3, r3, #8
 801c0ee:	6013      	str	r3, [r2, #0]
 801c0f0:	4b6d      	ldr	r3, [pc, #436]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c0f2:	681b      	ldr	r3, [r3, #0]
 801c0f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801c0f8:	687b      	ldr	r3, [r7, #4]
 801c0fa:	6a1b      	ldr	r3, [r3, #32]
 801c0fc:	496a      	ldr	r1, [pc, #424]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c0fe:	4313      	orrs	r3, r2
 801c100:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801c102:	4b69      	ldr	r3, [pc, #420]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c104:	685b      	ldr	r3, [r3, #4]
 801c106:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 801c10a:	687b      	ldr	r3, [r7, #4]
 801c10c:	69db      	ldr	r3, [r3, #28]
 801c10e:	021b      	lsls	r3, r3, #8
 801c110:	4965      	ldr	r1, [pc, #404]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c112:	4313      	orrs	r3, r2
 801c114:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 801c116:	69bb      	ldr	r3, [r7, #24]
 801c118:	2b00      	cmp	r3, #0
 801c11a:	d109      	bne.n	801c130 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801c11c:	687b      	ldr	r3, [r7, #4]
 801c11e:	6a1b      	ldr	r3, [r3, #32]
 801c120:	4618      	mov	r0, r3
 801c122:	f000 fd01 	bl	801cb28 <RCC_SetFlashLatencyFromMSIRange>
 801c126:	4603      	mov	r3, r0
 801c128:	2b00      	cmp	r3, #0
 801c12a:	d001      	beq.n	801c130 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 801c12c:	2301      	movs	r3, #1
 801c12e:	e34d      	b.n	801c7cc <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801c130:	f000 fc36 	bl	801c9a0 <HAL_RCC_GetSysClockFreq>
 801c134:	4602      	mov	r2, r0
 801c136:	4b5c      	ldr	r3, [pc, #368]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c138:	689b      	ldr	r3, [r3, #8]
 801c13a:	091b      	lsrs	r3, r3, #4
 801c13c:	f003 030f 	and.w	r3, r3, #15
 801c140:	495a      	ldr	r1, [pc, #360]	; (801c2ac <HAL_RCC_OscConfig+0x29c>)
 801c142:	5ccb      	ldrb	r3, [r1, r3]
 801c144:	f003 031f 	and.w	r3, r3, #31
 801c148:	fa22 f303 	lsr.w	r3, r2, r3
 801c14c:	4a58      	ldr	r2, [pc, #352]	; (801c2b0 <HAL_RCC_OscConfig+0x2a0>)
 801c14e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 801c150:	4b58      	ldr	r3, [pc, #352]	; (801c2b4 <HAL_RCC_OscConfig+0x2a4>)
 801c152:	681b      	ldr	r3, [r3, #0]
 801c154:	4618      	mov	r0, r3
 801c156:	f7ff f851 	bl	801b1fc <HAL_InitTick>
 801c15a:	4603      	mov	r3, r0
 801c15c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 801c15e:	7bfb      	ldrb	r3, [r7, #15]
 801c160:	2b00      	cmp	r3, #0
 801c162:	d052      	beq.n	801c20a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 801c164:	7bfb      	ldrb	r3, [r7, #15]
 801c166:	e331      	b.n	801c7cc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801c168:	687b      	ldr	r3, [r7, #4]
 801c16a:	699b      	ldr	r3, [r3, #24]
 801c16c:	2b00      	cmp	r3, #0
 801c16e:	d032      	beq.n	801c1d6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801c170:	4b4d      	ldr	r3, [pc, #308]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c172:	681b      	ldr	r3, [r3, #0]
 801c174:	4a4c      	ldr	r2, [pc, #304]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c176:	f043 0301 	orr.w	r3, r3, #1
 801c17a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 801c17c:	f7ff f88e 	bl	801b29c <HAL_GetTick>
 801c180:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801c182:	e008      	b.n	801c196 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801c184:	f7ff f88a 	bl	801b29c <HAL_GetTick>
 801c188:	4602      	mov	r2, r0
 801c18a:	693b      	ldr	r3, [r7, #16]
 801c18c:	1ad3      	subs	r3, r2, r3
 801c18e:	2b02      	cmp	r3, #2
 801c190:	d901      	bls.n	801c196 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 801c192:	2303      	movs	r3, #3
 801c194:	e31a      	b.n	801c7cc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801c196:	4b44      	ldr	r3, [pc, #272]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c198:	681b      	ldr	r3, [r3, #0]
 801c19a:	f003 0302 	and.w	r3, r3, #2
 801c19e:	2b00      	cmp	r3, #0
 801c1a0:	d0f0      	beq.n	801c184 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801c1a2:	4b41      	ldr	r3, [pc, #260]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c1a4:	681b      	ldr	r3, [r3, #0]
 801c1a6:	4a40      	ldr	r2, [pc, #256]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c1a8:	f043 0308 	orr.w	r3, r3, #8
 801c1ac:	6013      	str	r3, [r2, #0]
 801c1ae:	4b3e      	ldr	r3, [pc, #248]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c1b0:	681b      	ldr	r3, [r3, #0]
 801c1b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801c1b6:	687b      	ldr	r3, [r7, #4]
 801c1b8:	6a1b      	ldr	r3, [r3, #32]
 801c1ba:	493b      	ldr	r1, [pc, #236]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c1bc:	4313      	orrs	r3, r2
 801c1be:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801c1c0:	4b39      	ldr	r3, [pc, #228]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c1c2:	685b      	ldr	r3, [r3, #4]
 801c1c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 801c1c8:	687b      	ldr	r3, [r7, #4]
 801c1ca:	69db      	ldr	r3, [r3, #28]
 801c1cc:	021b      	lsls	r3, r3, #8
 801c1ce:	4936      	ldr	r1, [pc, #216]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c1d0:	4313      	orrs	r3, r2
 801c1d2:	604b      	str	r3, [r1, #4]
 801c1d4:	e01a      	b.n	801c20c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801c1d6:	4b34      	ldr	r3, [pc, #208]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c1d8:	681b      	ldr	r3, [r3, #0]
 801c1da:	4a33      	ldr	r2, [pc, #204]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c1dc:	f023 0301 	bic.w	r3, r3, #1
 801c1e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 801c1e2:	f7ff f85b 	bl	801b29c <HAL_GetTick>
 801c1e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 801c1e8:	e008      	b.n	801c1fc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801c1ea:	f7ff f857 	bl	801b29c <HAL_GetTick>
 801c1ee:	4602      	mov	r2, r0
 801c1f0:	693b      	ldr	r3, [r7, #16]
 801c1f2:	1ad3      	subs	r3, r2, r3
 801c1f4:	2b02      	cmp	r3, #2
 801c1f6:	d901      	bls.n	801c1fc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 801c1f8:	2303      	movs	r3, #3
 801c1fa:	e2e7      	b.n	801c7cc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 801c1fc:	4b2a      	ldr	r3, [pc, #168]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c1fe:	681b      	ldr	r3, [r3, #0]
 801c200:	f003 0302 	and.w	r3, r3, #2
 801c204:	2b00      	cmp	r3, #0
 801c206:	d1f0      	bne.n	801c1ea <HAL_RCC_OscConfig+0x1da>
 801c208:	e000      	b.n	801c20c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801c20a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801c20c:	687b      	ldr	r3, [r7, #4]
 801c20e:	681b      	ldr	r3, [r3, #0]
 801c210:	f003 0301 	and.w	r3, r3, #1
 801c214:	2b00      	cmp	r3, #0
 801c216:	d074      	beq.n	801c302 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 801c218:	69bb      	ldr	r3, [r7, #24]
 801c21a:	2b08      	cmp	r3, #8
 801c21c:	d005      	beq.n	801c22a <HAL_RCC_OscConfig+0x21a>
 801c21e:	69bb      	ldr	r3, [r7, #24]
 801c220:	2b0c      	cmp	r3, #12
 801c222:	d10e      	bne.n	801c242 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 801c224:	697b      	ldr	r3, [r7, #20]
 801c226:	2b03      	cmp	r3, #3
 801c228:	d10b      	bne.n	801c242 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c22a:	4b1f      	ldr	r3, [pc, #124]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c22c:	681b      	ldr	r3, [r3, #0]
 801c22e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c232:	2b00      	cmp	r3, #0
 801c234:	d064      	beq.n	801c300 <HAL_RCC_OscConfig+0x2f0>
 801c236:	687b      	ldr	r3, [r7, #4]
 801c238:	685b      	ldr	r3, [r3, #4]
 801c23a:	2b00      	cmp	r3, #0
 801c23c:	d160      	bne.n	801c300 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 801c23e:	2301      	movs	r3, #1
 801c240:	e2c4      	b.n	801c7cc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801c242:	687b      	ldr	r3, [r7, #4]
 801c244:	685b      	ldr	r3, [r3, #4]
 801c246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c24a:	d106      	bne.n	801c25a <HAL_RCC_OscConfig+0x24a>
 801c24c:	4b16      	ldr	r3, [pc, #88]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c24e:	681b      	ldr	r3, [r3, #0]
 801c250:	4a15      	ldr	r2, [pc, #84]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c256:	6013      	str	r3, [r2, #0]
 801c258:	e01d      	b.n	801c296 <HAL_RCC_OscConfig+0x286>
 801c25a:	687b      	ldr	r3, [r7, #4]
 801c25c:	685b      	ldr	r3, [r3, #4]
 801c25e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801c262:	d10c      	bne.n	801c27e <HAL_RCC_OscConfig+0x26e>
 801c264:	4b10      	ldr	r3, [pc, #64]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c266:	681b      	ldr	r3, [r3, #0]
 801c268:	4a0f      	ldr	r2, [pc, #60]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c26a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801c26e:	6013      	str	r3, [r2, #0]
 801c270:	4b0d      	ldr	r3, [pc, #52]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c272:	681b      	ldr	r3, [r3, #0]
 801c274:	4a0c      	ldr	r2, [pc, #48]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c27a:	6013      	str	r3, [r2, #0]
 801c27c:	e00b      	b.n	801c296 <HAL_RCC_OscConfig+0x286>
 801c27e:	4b0a      	ldr	r3, [pc, #40]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c280:	681b      	ldr	r3, [r3, #0]
 801c282:	4a09      	ldr	r2, [pc, #36]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c284:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c288:	6013      	str	r3, [r2, #0]
 801c28a:	4b07      	ldr	r3, [pc, #28]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c28c:	681b      	ldr	r3, [r3, #0]
 801c28e:	4a06      	ldr	r2, [pc, #24]	; (801c2a8 <HAL_RCC_OscConfig+0x298>)
 801c290:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801c294:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801c296:	687b      	ldr	r3, [r7, #4]
 801c298:	685b      	ldr	r3, [r3, #4]
 801c29a:	2b00      	cmp	r3, #0
 801c29c:	d01c      	beq.n	801c2d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c29e:	f7fe fffd 	bl	801b29c <HAL_GetTick>
 801c2a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801c2a4:	e011      	b.n	801c2ca <HAL_RCC_OscConfig+0x2ba>
 801c2a6:	bf00      	nop
 801c2a8:	40021000 	.word	0x40021000
 801c2ac:	08023e94 	.word	0x08023e94
 801c2b0:	20000004 	.word	0x20000004
 801c2b4:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c2b8:	f7fe fff0 	bl	801b29c <HAL_GetTick>
 801c2bc:	4602      	mov	r2, r0
 801c2be:	693b      	ldr	r3, [r7, #16]
 801c2c0:	1ad3      	subs	r3, r2, r3
 801c2c2:	2b64      	cmp	r3, #100	; 0x64
 801c2c4:	d901      	bls.n	801c2ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 801c2c6:	2303      	movs	r3, #3
 801c2c8:	e280      	b.n	801c7cc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801c2ca:	4baf      	ldr	r3, [pc, #700]	; (801c588 <HAL_RCC_OscConfig+0x578>)
 801c2cc:	681b      	ldr	r3, [r3, #0]
 801c2ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c2d2:	2b00      	cmp	r3, #0
 801c2d4:	d0f0      	beq.n	801c2b8 <HAL_RCC_OscConfig+0x2a8>
 801c2d6:	e014      	b.n	801c302 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c2d8:	f7fe ffe0 	bl	801b29c <HAL_GetTick>
 801c2dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801c2de:	e008      	b.n	801c2f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c2e0:	f7fe ffdc 	bl	801b29c <HAL_GetTick>
 801c2e4:	4602      	mov	r2, r0
 801c2e6:	693b      	ldr	r3, [r7, #16]
 801c2e8:	1ad3      	subs	r3, r2, r3
 801c2ea:	2b64      	cmp	r3, #100	; 0x64
 801c2ec:	d901      	bls.n	801c2f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 801c2ee:	2303      	movs	r3, #3
 801c2f0:	e26c      	b.n	801c7cc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801c2f2:	4ba5      	ldr	r3, [pc, #660]	; (801c588 <HAL_RCC_OscConfig+0x578>)
 801c2f4:	681b      	ldr	r3, [r3, #0]
 801c2f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c2fa:	2b00      	cmp	r3, #0
 801c2fc:	d1f0      	bne.n	801c2e0 <HAL_RCC_OscConfig+0x2d0>
 801c2fe:	e000      	b.n	801c302 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c300:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801c302:	687b      	ldr	r3, [r7, #4]
 801c304:	681b      	ldr	r3, [r3, #0]
 801c306:	f003 0302 	and.w	r3, r3, #2
 801c30a:	2b00      	cmp	r3, #0
 801c30c:	d060      	beq.n	801c3d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 801c30e:	69bb      	ldr	r3, [r7, #24]
 801c310:	2b04      	cmp	r3, #4
 801c312:	d005      	beq.n	801c320 <HAL_RCC_OscConfig+0x310>
 801c314:	69bb      	ldr	r3, [r7, #24]
 801c316:	2b0c      	cmp	r3, #12
 801c318:	d119      	bne.n	801c34e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 801c31a:	697b      	ldr	r3, [r7, #20]
 801c31c:	2b02      	cmp	r3, #2
 801c31e:	d116      	bne.n	801c34e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c320:	4b99      	ldr	r3, [pc, #612]	; (801c588 <HAL_RCC_OscConfig+0x578>)
 801c322:	681b      	ldr	r3, [r3, #0]
 801c324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c328:	2b00      	cmp	r3, #0
 801c32a:	d005      	beq.n	801c338 <HAL_RCC_OscConfig+0x328>
 801c32c:	687b      	ldr	r3, [r7, #4]
 801c32e:	68db      	ldr	r3, [r3, #12]
 801c330:	2b00      	cmp	r3, #0
 801c332:	d101      	bne.n	801c338 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 801c334:	2301      	movs	r3, #1
 801c336:	e249      	b.n	801c7cc <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c338:	4b93      	ldr	r3, [pc, #588]	; (801c588 <HAL_RCC_OscConfig+0x578>)
 801c33a:	685b      	ldr	r3, [r3, #4]
 801c33c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 801c340:	687b      	ldr	r3, [r7, #4]
 801c342:	691b      	ldr	r3, [r3, #16]
 801c344:	061b      	lsls	r3, r3, #24
 801c346:	4990      	ldr	r1, [pc, #576]	; (801c588 <HAL_RCC_OscConfig+0x578>)
 801c348:	4313      	orrs	r3, r2
 801c34a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c34c:	e040      	b.n	801c3d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801c34e:	687b      	ldr	r3, [r7, #4]
 801c350:	68db      	ldr	r3, [r3, #12]
 801c352:	2b00      	cmp	r3, #0
 801c354:	d023      	beq.n	801c39e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801c356:	4b8c      	ldr	r3, [pc, #560]	; (801c588 <HAL_RCC_OscConfig+0x578>)
 801c358:	681b      	ldr	r3, [r3, #0]
 801c35a:	4a8b      	ldr	r2, [pc, #556]	; (801c588 <HAL_RCC_OscConfig+0x578>)
 801c35c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c360:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c362:	f7fe ff9b 	bl	801b29c <HAL_GetTick>
 801c366:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801c368:	e008      	b.n	801c37c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c36a:	f7fe ff97 	bl	801b29c <HAL_GetTick>
 801c36e:	4602      	mov	r2, r0
 801c370:	693b      	ldr	r3, [r7, #16]
 801c372:	1ad3      	subs	r3, r2, r3
 801c374:	2b02      	cmp	r3, #2
 801c376:	d901      	bls.n	801c37c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 801c378:	2303      	movs	r3, #3
 801c37a:	e227      	b.n	801c7cc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801c37c:	4b82      	ldr	r3, [pc, #520]	; (801c588 <HAL_RCC_OscConfig+0x578>)
 801c37e:	681b      	ldr	r3, [r3, #0]
 801c380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c384:	2b00      	cmp	r3, #0
 801c386:	d0f0      	beq.n	801c36a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c388:	4b7f      	ldr	r3, [pc, #508]	; (801c588 <HAL_RCC_OscConfig+0x578>)
 801c38a:	685b      	ldr	r3, [r3, #4]
 801c38c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 801c390:	687b      	ldr	r3, [r7, #4]
 801c392:	691b      	ldr	r3, [r3, #16]
 801c394:	061b      	lsls	r3, r3, #24
 801c396:	497c      	ldr	r1, [pc, #496]	; (801c588 <HAL_RCC_OscConfig+0x578>)
 801c398:	4313      	orrs	r3, r2
 801c39a:	604b      	str	r3, [r1, #4]
 801c39c:	e018      	b.n	801c3d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801c39e:	4b7a      	ldr	r3, [pc, #488]	; (801c588 <HAL_RCC_OscConfig+0x578>)
 801c3a0:	681b      	ldr	r3, [r3, #0]
 801c3a2:	4a79      	ldr	r2, [pc, #484]	; (801c588 <HAL_RCC_OscConfig+0x578>)
 801c3a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c3a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c3aa:	f7fe ff77 	bl	801b29c <HAL_GetTick>
 801c3ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801c3b0:	e008      	b.n	801c3c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c3b2:	f7fe ff73 	bl	801b29c <HAL_GetTick>
 801c3b6:	4602      	mov	r2, r0
 801c3b8:	693b      	ldr	r3, [r7, #16]
 801c3ba:	1ad3      	subs	r3, r2, r3
 801c3bc:	2b02      	cmp	r3, #2
 801c3be:	d901      	bls.n	801c3c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 801c3c0:	2303      	movs	r3, #3
 801c3c2:	e203      	b.n	801c7cc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801c3c4:	4b70      	ldr	r3, [pc, #448]	; (801c588 <HAL_RCC_OscConfig+0x578>)
 801c3c6:	681b      	ldr	r3, [r3, #0]
 801c3c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c3cc:	2b00      	cmp	r3, #0
 801c3ce:	d1f0      	bne.n	801c3b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801c3d0:	687b      	ldr	r3, [r7, #4]
 801c3d2:	681b      	ldr	r3, [r3, #0]
 801c3d4:	f003 0308 	and.w	r3, r3, #8
 801c3d8:	2b00      	cmp	r3, #0
 801c3da:	d03c      	beq.n	801c456 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801c3dc:	687b      	ldr	r3, [r7, #4]
 801c3de:	695b      	ldr	r3, [r3, #20]
 801c3e0:	2b00      	cmp	r3, #0
 801c3e2:	d01c      	beq.n	801c41e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801c3e4:	4b68      	ldr	r3, [pc, #416]	; (801c588 <HAL_RCC_OscConfig+0x578>)
 801c3e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c3ea:	4a67      	ldr	r2, [pc, #412]	; (801c588 <HAL_RCC_OscConfig+0x578>)
 801c3ec:	f043 0301 	orr.w	r3, r3, #1
 801c3f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c3f4:	f7fe ff52 	bl	801b29c <HAL_GetTick>
 801c3f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801c3fa:	e008      	b.n	801c40e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c3fc:	f7fe ff4e 	bl	801b29c <HAL_GetTick>
 801c400:	4602      	mov	r2, r0
 801c402:	693b      	ldr	r3, [r7, #16]
 801c404:	1ad3      	subs	r3, r2, r3
 801c406:	2b02      	cmp	r3, #2
 801c408:	d901      	bls.n	801c40e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 801c40a:	2303      	movs	r3, #3
 801c40c:	e1de      	b.n	801c7cc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801c40e:	4b5e      	ldr	r3, [pc, #376]	; (801c588 <HAL_RCC_OscConfig+0x578>)
 801c410:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c414:	f003 0302 	and.w	r3, r3, #2
 801c418:	2b00      	cmp	r3, #0
 801c41a:	d0ef      	beq.n	801c3fc <HAL_RCC_OscConfig+0x3ec>
 801c41c:	e01b      	b.n	801c456 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801c41e:	4b5a      	ldr	r3, [pc, #360]	; (801c588 <HAL_RCC_OscConfig+0x578>)
 801c420:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c424:	4a58      	ldr	r2, [pc, #352]	; (801c588 <HAL_RCC_OscConfig+0x578>)
 801c426:	f023 0301 	bic.w	r3, r3, #1
 801c42a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c42e:	f7fe ff35 	bl	801b29c <HAL_GetTick>
 801c432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801c434:	e008      	b.n	801c448 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c436:	f7fe ff31 	bl	801b29c <HAL_GetTick>
 801c43a:	4602      	mov	r2, r0
 801c43c:	693b      	ldr	r3, [r7, #16]
 801c43e:	1ad3      	subs	r3, r2, r3
 801c440:	2b02      	cmp	r3, #2
 801c442:	d901      	bls.n	801c448 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 801c444:	2303      	movs	r3, #3
 801c446:	e1c1      	b.n	801c7cc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801c448:	4b4f      	ldr	r3, [pc, #316]	; (801c588 <HAL_RCC_OscConfig+0x578>)
 801c44a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c44e:	f003 0302 	and.w	r3, r3, #2
 801c452:	2b00      	cmp	r3, #0
 801c454:	d1ef      	bne.n	801c436 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801c456:	687b      	ldr	r3, [r7, #4]
 801c458:	681b      	ldr	r3, [r3, #0]
 801c45a:	f003 0304 	and.w	r3, r3, #4
 801c45e:	2b00      	cmp	r3, #0
 801c460:	f000 80a6 	beq.w	801c5b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 801c464:	2300      	movs	r3, #0
 801c466:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 801c468:	4b47      	ldr	r3, [pc, #284]	; (801c588 <HAL_RCC_OscConfig+0x578>)
 801c46a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c46c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c470:	2b00      	cmp	r3, #0
 801c472:	d10d      	bne.n	801c490 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801c474:	4b44      	ldr	r3, [pc, #272]	; (801c588 <HAL_RCC_OscConfig+0x578>)
 801c476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c478:	4a43      	ldr	r2, [pc, #268]	; (801c588 <HAL_RCC_OscConfig+0x578>)
 801c47a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c47e:	6593      	str	r3, [r2, #88]	; 0x58
 801c480:	4b41      	ldr	r3, [pc, #260]	; (801c588 <HAL_RCC_OscConfig+0x578>)
 801c482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c488:	60bb      	str	r3, [r7, #8]
 801c48a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801c48c:	2301      	movs	r3, #1
 801c48e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c490:	4b3e      	ldr	r3, [pc, #248]	; (801c58c <HAL_RCC_OscConfig+0x57c>)
 801c492:	681b      	ldr	r3, [r3, #0]
 801c494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c498:	2b00      	cmp	r3, #0
 801c49a:	d118      	bne.n	801c4ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801c49c:	4b3b      	ldr	r3, [pc, #236]	; (801c58c <HAL_RCC_OscConfig+0x57c>)
 801c49e:	681b      	ldr	r3, [r3, #0]
 801c4a0:	4a3a      	ldr	r2, [pc, #232]	; (801c58c <HAL_RCC_OscConfig+0x57c>)
 801c4a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c4a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801c4a8:	f7fe fef8 	bl	801b29c <HAL_GetTick>
 801c4ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c4ae:	e008      	b.n	801c4c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c4b0:	f7fe fef4 	bl	801b29c <HAL_GetTick>
 801c4b4:	4602      	mov	r2, r0
 801c4b6:	693b      	ldr	r3, [r7, #16]
 801c4b8:	1ad3      	subs	r3, r2, r3
 801c4ba:	2b02      	cmp	r3, #2
 801c4bc:	d901      	bls.n	801c4c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 801c4be:	2303      	movs	r3, #3
 801c4c0:	e184      	b.n	801c7cc <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c4c2:	4b32      	ldr	r3, [pc, #200]	; (801c58c <HAL_RCC_OscConfig+0x57c>)
 801c4c4:	681b      	ldr	r3, [r3, #0]
 801c4c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c4ca:	2b00      	cmp	r3, #0
 801c4cc:	d0f0      	beq.n	801c4b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801c4ce:	687b      	ldr	r3, [r7, #4]
 801c4d0:	689b      	ldr	r3, [r3, #8]
 801c4d2:	2b01      	cmp	r3, #1
 801c4d4:	d108      	bne.n	801c4e8 <HAL_RCC_OscConfig+0x4d8>
 801c4d6:	4b2c      	ldr	r3, [pc, #176]	; (801c588 <HAL_RCC_OscConfig+0x578>)
 801c4d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c4dc:	4a2a      	ldr	r2, [pc, #168]	; (801c588 <HAL_RCC_OscConfig+0x578>)
 801c4de:	f043 0301 	orr.w	r3, r3, #1
 801c4e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c4e6:	e024      	b.n	801c532 <HAL_RCC_OscConfig+0x522>
 801c4e8:	687b      	ldr	r3, [r7, #4]
 801c4ea:	689b      	ldr	r3, [r3, #8]
 801c4ec:	2b05      	cmp	r3, #5
 801c4ee:	d110      	bne.n	801c512 <HAL_RCC_OscConfig+0x502>
 801c4f0:	4b25      	ldr	r3, [pc, #148]	; (801c588 <HAL_RCC_OscConfig+0x578>)
 801c4f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c4f6:	4a24      	ldr	r2, [pc, #144]	; (801c588 <HAL_RCC_OscConfig+0x578>)
 801c4f8:	f043 0304 	orr.w	r3, r3, #4
 801c4fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c500:	4b21      	ldr	r3, [pc, #132]	; (801c588 <HAL_RCC_OscConfig+0x578>)
 801c502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c506:	4a20      	ldr	r2, [pc, #128]	; (801c588 <HAL_RCC_OscConfig+0x578>)
 801c508:	f043 0301 	orr.w	r3, r3, #1
 801c50c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c510:	e00f      	b.n	801c532 <HAL_RCC_OscConfig+0x522>
 801c512:	4b1d      	ldr	r3, [pc, #116]	; (801c588 <HAL_RCC_OscConfig+0x578>)
 801c514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c518:	4a1b      	ldr	r2, [pc, #108]	; (801c588 <HAL_RCC_OscConfig+0x578>)
 801c51a:	f023 0301 	bic.w	r3, r3, #1
 801c51e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c522:	4b19      	ldr	r3, [pc, #100]	; (801c588 <HAL_RCC_OscConfig+0x578>)
 801c524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c528:	4a17      	ldr	r2, [pc, #92]	; (801c588 <HAL_RCC_OscConfig+0x578>)
 801c52a:	f023 0304 	bic.w	r3, r3, #4
 801c52e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801c532:	687b      	ldr	r3, [r7, #4]
 801c534:	689b      	ldr	r3, [r3, #8]
 801c536:	2b00      	cmp	r3, #0
 801c538:	d016      	beq.n	801c568 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c53a:	f7fe feaf 	bl	801b29c <HAL_GetTick>
 801c53e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801c540:	e00a      	b.n	801c558 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c542:	f7fe feab 	bl	801b29c <HAL_GetTick>
 801c546:	4602      	mov	r2, r0
 801c548:	693b      	ldr	r3, [r7, #16]
 801c54a:	1ad3      	subs	r3, r2, r3
 801c54c:	f241 3288 	movw	r2, #5000	; 0x1388
 801c550:	4293      	cmp	r3, r2
 801c552:	d901      	bls.n	801c558 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 801c554:	2303      	movs	r3, #3
 801c556:	e139      	b.n	801c7cc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801c558:	4b0b      	ldr	r3, [pc, #44]	; (801c588 <HAL_RCC_OscConfig+0x578>)
 801c55a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c55e:	f003 0302 	and.w	r3, r3, #2
 801c562:	2b00      	cmp	r3, #0
 801c564:	d0ed      	beq.n	801c542 <HAL_RCC_OscConfig+0x532>
 801c566:	e01a      	b.n	801c59e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c568:	f7fe fe98 	bl	801b29c <HAL_GetTick>
 801c56c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801c56e:	e00f      	b.n	801c590 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c570:	f7fe fe94 	bl	801b29c <HAL_GetTick>
 801c574:	4602      	mov	r2, r0
 801c576:	693b      	ldr	r3, [r7, #16]
 801c578:	1ad3      	subs	r3, r2, r3
 801c57a:	f241 3288 	movw	r2, #5000	; 0x1388
 801c57e:	4293      	cmp	r3, r2
 801c580:	d906      	bls.n	801c590 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 801c582:	2303      	movs	r3, #3
 801c584:	e122      	b.n	801c7cc <HAL_RCC_OscConfig+0x7bc>
 801c586:	bf00      	nop
 801c588:	40021000 	.word	0x40021000
 801c58c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801c590:	4b90      	ldr	r3, [pc, #576]	; (801c7d4 <HAL_RCC_OscConfig+0x7c4>)
 801c592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c596:	f003 0302 	and.w	r3, r3, #2
 801c59a:	2b00      	cmp	r3, #0
 801c59c:	d1e8      	bne.n	801c570 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801c59e:	7ffb      	ldrb	r3, [r7, #31]
 801c5a0:	2b01      	cmp	r3, #1
 801c5a2:	d105      	bne.n	801c5b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801c5a4:	4b8b      	ldr	r3, [pc, #556]	; (801c7d4 <HAL_RCC_OscConfig+0x7c4>)
 801c5a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c5a8:	4a8a      	ldr	r2, [pc, #552]	; (801c7d4 <HAL_RCC_OscConfig+0x7c4>)
 801c5aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801c5ae:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801c5b0:	687b      	ldr	r3, [r7, #4]
 801c5b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c5b4:	2b00      	cmp	r3, #0
 801c5b6:	f000 8108 	beq.w	801c7ca <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801c5ba:	687b      	ldr	r3, [r7, #4]
 801c5bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c5be:	2b02      	cmp	r3, #2
 801c5c0:	f040 80d0 	bne.w	801c764 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 801c5c4:	4b83      	ldr	r3, [pc, #524]	; (801c7d4 <HAL_RCC_OscConfig+0x7c4>)
 801c5c6:	68db      	ldr	r3, [r3, #12]
 801c5c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 801c5ca:	697b      	ldr	r3, [r7, #20]
 801c5cc:	f003 0203 	and.w	r2, r3, #3
 801c5d0:	687b      	ldr	r3, [r7, #4]
 801c5d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c5d4:	429a      	cmp	r2, r3
 801c5d6:	d130      	bne.n	801c63a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801c5d8:	697b      	ldr	r3, [r7, #20]
 801c5da:	f003 0270 	and.w	r2, r3, #112	; 0x70
 801c5de:	687b      	ldr	r3, [r7, #4]
 801c5e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c5e2:	3b01      	subs	r3, #1
 801c5e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 801c5e6:	429a      	cmp	r2, r3
 801c5e8:	d127      	bne.n	801c63a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801c5ea:	697b      	ldr	r3, [r7, #20]
 801c5ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 801c5f0:	687b      	ldr	r3, [r7, #4]
 801c5f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c5f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801c5f6:	429a      	cmp	r2, r3
 801c5f8:	d11f      	bne.n	801c63a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 801c5fa:	697b      	ldr	r3, [r7, #20]
 801c5fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c600:	687a      	ldr	r2, [r7, #4]
 801c602:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801c604:	2a07      	cmp	r2, #7
 801c606:	bf14      	ite	ne
 801c608:	2201      	movne	r2, #1
 801c60a:	2200      	moveq	r2, #0
 801c60c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801c60e:	4293      	cmp	r3, r2
 801c610:	d113      	bne.n	801c63a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c612:	697b      	ldr	r3, [r7, #20]
 801c614:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 801c618:	687b      	ldr	r3, [r7, #4]
 801c61a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c61c:	085b      	lsrs	r3, r3, #1
 801c61e:	3b01      	subs	r3, #1
 801c620:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 801c622:	429a      	cmp	r2, r3
 801c624:	d109      	bne.n	801c63a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 801c626:	697b      	ldr	r3, [r7, #20]
 801c628:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 801c62c:	687b      	ldr	r3, [r7, #4]
 801c62e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c630:	085b      	lsrs	r3, r3, #1
 801c632:	3b01      	subs	r3, #1
 801c634:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c636:	429a      	cmp	r2, r3
 801c638:	d06e      	beq.n	801c718 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 801c63a:	69bb      	ldr	r3, [r7, #24]
 801c63c:	2b0c      	cmp	r3, #12
 801c63e:	d069      	beq.n	801c714 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 801c640:	4b64      	ldr	r3, [pc, #400]	; (801c7d4 <HAL_RCC_OscConfig+0x7c4>)
 801c642:	681b      	ldr	r3, [r3, #0]
 801c644:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801c648:	2b00      	cmp	r3, #0
 801c64a:	d105      	bne.n	801c658 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 801c64c:	4b61      	ldr	r3, [pc, #388]	; (801c7d4 <HAL_RCC_OscConfig+0x7c4>)
 801c64e:	681b      	ldr	r3, [r3, #0]
 801c650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c654:	2b00      	cmp	r3, #0
 801c656:	d001      	beq.n	801c65c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 801c658:	2301      	movs	r3, #1
 801c65a:	e0b7      	b.n	801c7cc <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 801c65c:	4b5d      	ldr	r3, [pc, #372]	; (801c7d4 <HAL_RCC_OscConfig+0x7c4>)
 801c65e:	681b      	ldr	r3, [r3, #0]
 801c660:	4a5c      	ldr	r2, [pc, #368]	; (801c7d4 <HAL_RCC_OscConfig+0x7c4>)
 801c662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801c666:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801c668:	f7fe fe18 	bl	801b29c <HAL_GetTick>
 801c66c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c66e:	e008      	b.n	801c682 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c670:	f7fe fe14 	bl	801b29c <HAL_GetTick>
 801c674:	4602      	mov	r2, r0
 801c676:	693b      	ldr	r3, [r7, #16]
 801c678:	1ad3      	subs	r3, r2, r3
 801c67a:	2b02      	cmp	r3, #2
 801c67c:	d901      	bls.n	801c682 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 801c67e:	2303      	movs	r3, #3
 801c680:	e0a4      	b.n	801c7cc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c682:	4b54      	ldr	r3, [pc, #336]	; (801c7d4 <HAL_RCC_OscConfig+0x7c4>)
 801c684:	681b      	ldr	r3, [r3, #0]
 801c686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c68a:	2b00      	cmp	r3, #0
 801c68c:	d1f0      	bne.n	801c670 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801c68e:	4b51      	ldr	r3, [pc, #324]	; (801c7d4 <HAL_RCC_OscConfig+0x7c4>)
 801c690:	68da      	ldr	r2, [r3, #12]
 801c692:	4b51      	ldr	r3, [pc, #324]	; (801c7d8 <HAL_RCC_OscConfig+0x7c8>)
 801c694:	4013      	ands	r3, r2
 801c696:	687a      	ldr	r2, [r7, #4]
 801c698:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 801c69a:	687a      	ldr	r2, [r7, #4]
 801c69c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801c69e:	3a01      	subs	r2, #1
 801c6a0:	0112      	lsls	r2, r2, #4
 801c6a2:	4311      	orrs	r1, r2
 801c6a4:	687a      	ldr	r2, [r7, #4]
 801c6a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801c6a8:	0212      	lsls	r2, r2, #8
 801c6aa:	4311      	orrs	r1, r2
 801c6ac:	687a      	ldr	r2, [r7, #4]
 801c6ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801c6b0:	0852      	lsrs	r2, r2, #1
 801c6b2:	3a01      	subs	r2, #1
 801c6b4:	0552      	lsls	r2, r2, #21
 801c6b6:	4311      	orrs	r1, r2
 801c6b8:	687a      	ldr	r2, [r7, #4]
 801c6ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801c6bc:	0852      	lsrs	r2, r2, #1
 801c6be:	3a01      	subs	r2, #1
 801c6c0:	0652      	lsls	r2, r2, #25
 801c6c2:	4311      	orrs	r1, r2
 801c6c4:	687a      	ldr	r2, [r7, #4]
 801c6c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801c6c8:	0912      	lsrs	r2, r2, #4
 801c6ca:	0452      	lsls	r2, r2, #17
 801c6cc:	430a      	orrs	r2, r1
 801c6ce:	4941      	ldr	r1, [pc, #260]	; (801c7d4 <HAL_RCC_OscConfig+0x7c4>)
 801c6d0:	4313      	orrs	r3, r2
 801c6d2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 801c6d4:	4b3f      	ldr	r3, [pc, #252]	; (801c7d4 <HAL_RCC_OscConfig+0x7c4>)
 801c6d6:	681b      	ldr	r3, [r3, #0]
 801c6d8:	4a3e      	ldr	r2, [pc, #248]	; (801c7d4 <HAL_RCC_OscConfig+0x7c4>)
 801c6da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c6de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801c6e0:	4b3c      	ldr	r3, [pc, #240]	; (801c7d4 <HAL_RCC_OscConfig+0x7c4>)
 801c6e2:	68db      	ldr	r3, [r3, #12]
 801c6e4:	4a3b      	ldr	r2, [pc, #236]	; (801c7d4 <HAL_RCC_OscConfig+0x7c4>)
 801c6e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c6ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801c6ec:	f7fe fdd6 	bl	801b29c <HAL_GetTick>
 801c6f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c6f2:	e008      	b.n	801c706 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c6f4:	f7fe fdd2 	bl	801b29c <HAL_GetTick>
 801c6f8:	4602      	mov	r2, r0
 801c6fa:	693b      	ldr	r3, [r7, #16]
 801c6fc:	1ad3      	subs	r3, r2, r3
 801c6fe:	2b02      	cmp	r3, #2
 801c700:	d901      	bls.n	801c706 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 801c702:	2303      	movs	r3, #3
 801c704:	e062      	b.n	801c7cc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c706:	4b33      	ldr	r3, [pc, #204]	; (801c7d4 <HAL_RCC_OscConfig+0x7c4>)
 801c708:	681b      	ldr	r3, [r3, #0]
 801c70a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c70e:	2b00      	cmp	r3, #0
 801c710:	d0f0      	beq.n	801c6f4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 801c712:	e05a      	b.n	801c7ca <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 801c714:	2301      	movs	r3, #1
 801c716:	e059      	b.n	801c7cc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c718:	4b2e      	ldr	r3, [pc, #184]	; (801c7d4 <HAL_RCC_OscConfig+0x7c4>)
 801c71a:	681b      	ldr	r3, [r3, #0]
 801c71c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c720:	2b00      	cmp	r3, #0
 801c722:	d152      	bne.n	801c7ca <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 801c724:	4b2b      	ldr	r3, [pc, #172]	; (801c7d4 <HAL_RCC_OscConfig+0x7c4>)
 801c726:	681b      	ldr	r3, [r3, #0]
 801c728:	4a2a      	ldr	r2, [pc, #168]	; (801c7d4 <HAL_RCC_OscConfig+0x7c4>)
 801c72a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c72e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801c730:	4b28      	ldr	r3, [pc, #160]	; (801c7d4 <HAL_RCC_OscConfig+0x7c4>)
 801c732:	68db      	ldr	r3, [r3, #12]
 801c734:	4a27      	ldr	r2, [pc, #156]	; (801c7d4 <HAL_RCC_OscConfig+0x7c4>)
 801c736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c73a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801c73c:	f7fe fdae 	bl	801b29c <HAL_GetTick>
 801c740:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c742:	e008      	b.n	801c756 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c744:	f7fe fdaa 	bl	801b29c <HAL_GetTick>
 801c748:	4602      	mov	r2, r0
 801c74a:	693b      	ldr	r3, [r7, #16]
 801c74c:	1ad3      	subs	r3, r2, r3
 801c74e:	2b02      	cmp	r3, #2
 801c750:	d901      	bls.n	801c756 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 801c752:	2303      	movs	r3, #3
 801c754:	e03a      	b.n	801c7cc <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c756:	4b1f      	ldr	r3, [pc, #124]	; (801c7d4 <HAL_RCC_OscConfig+0x7c4>)
 801c758:	681b      	ldr	r3, [r3, #0]
 801c75a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c75e:	2b00      	cmp	r3, #0
 801c760:	d0f0      	beq.n	801c744 <HAL_RCC_OscConfig+0x734>
 801c762:	e032      	b.n	801c7ca <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 801c764:	69bb      	ldr	r3, [r7, #24]
 801c766:	2b0c      	cmp	r3, #12
 801c768:	d02d      	beq.n	801c7c6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c76a:	4b1a      	ldr	r3, [pc, #104]	; (801c7d4 <HAL_RCC_OscConfig+0x7c4>)
 801c76c:	681b      	ldr	r3, [r3, #0]
 801c76e:	4a19      	ldr	r2, [pc, #100]	; (801c7d4 <HAL_RCC_OscConfig+0x7c4>)
 801c770:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801c774:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 801c776:	4b17      	ldr	r3, [pc, #92]	; (801c7d4 <HAL_RCC_OscConfig+0x7c4>)
 801c778:	681b      	ldr	r3, [r3, #0]
 801c77a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 801c77e:	2b00      	cmp	r3, #0
 801c780:	d105      	bne.n	801c78e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 801c782:	4b14      	ldr	r3, [pc, #80]	; (801c7d4 <HAL_RCC_OscConfig+0x7c4>)
 801c784:	68db      	ldr	r3, [r3, #12]
 801c786:	4a13      	ldr	r2, [pc, #76]	; (801c7d4 <HAL_RCC_OscConfig+0x7c4>)
 801c788:	f023 0303 	bic.w	r3, r3, #3
 801c78c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 801c78e:	4b11      	ldr	r3, [pc, #68]	; (801c7d4 <HAL_RCC_OscConfig+0x7c4>)
 801c790:	68db      	ldr	r3, [r3, #12]
 801c792:	4a10      	ldr	r2, [pc, #64]	; (801c7d4 <HAL_RCC_OscConfig+0x7c4>)
 801c794:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 801c798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c79c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c79e:	f7fe fd7d 	bl	801b29c <HAL_GetTick>
 801c7a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c7a4:	e008      	b.n	801c7b8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c7a6:	f7fe fd79 	bl	801b29c <HAL_GetTick>
 801c7aa:	4602      	mov	r2, r0
 801c7ac:	693b      	ldr	r3, [r7, #16]
 801c7ae:	1ad3      	subs	r3, r2, r3
 801c7b0:	2b02      	cmp	r3, #2
 801c7b2:	d901      	bls.n	801c7b8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 801c7b4:	2303      	movs	r3, #3
 801c7b6:	e009      	b.n	801c7cc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c7b8:	4b06      	ldr	r3, [pc, #24]	; (801c7d4 <HAL_RCC_OscConfig+0x7c4>)
 801c7ba:	681b      	ldr	r3, [r3, #0]
 801c7bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c7c0:	2b00      	cmp	r3, #0
 801c7c2:	d1f0      	bne.n	801c7a6 <HAL_RCC_OscConfig+0x796>
 801c7c4:	e001      	b.n	801c7ca <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 801c7c6:	2301      	movs	r3, #1
 801c7c8:	e000      	b.n	801c7cc <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 801c7ca:	2300      	movs	r3, #0
}
 801c7cc:	4618      	mov	r0, r3
 801c7ce:	3720      	adds	r7, #32
 801c7d0:	46bd      	mov	sp, r7
 801c7d2:	bd80      	pop	{r7, pc}
 801c7d4:	40021000 	.word	0x40021000
 801c7d8:	f99d808c 	.word	0xf99d808c

0801c7dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801c7dc:	b580      	push	{r7, lr}
 801c7de:	b084      	sub	sp, #16
 801c7e0:	af00      	add	r7, sp, #0
 801c7e2:	6078      	str	r0, [r7, #4]
 801c7e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801c7e6:	687b      	ldr	r3, [r7, #4]
 801c7e8:	2b00      	cmp	r3, #0
 801c7ea:	d101      	bne.n	801c7f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801c7ec:	2301      	movs	r3, #1
 801c7ee:	e0c8      	b.n	801c982 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801c7f0:	4b66      	ldr	r3, [pc, #408]	; (801c98c <HAL_RCC_ClockConfig+0x1b0>)
 801c7f2:	681b      	ldr	r3, [r3, #0]
 801c7f4:	f003 0307 	and.w	r3, r3, #7
 801c7f8:	683a      	ldr	r2, [r7, #0]
 801c7fa:	429a      	cmp	r2, r3
 801c7fc:	d910      	bls.n	801c820 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c7fe:	4b63      	ldr	r3, [pc, #396]	; (801c98c <HAL_RCC_ClockConfig+0x1b0>)
 801c800:	681b      	ldr	r3, [r3, #0]
 801c802:	f023 0207 	bic.w	r2, r3, #7
 801c806:	4961      	ldr	r1, [pc, #388]	; (801c98c <HAL_RCC_ClockConfig+0x1b0>)
 801c808:	683b      	ldr	r3, [r7, #0]
 801c80a:	4313      	orrs	r3, r2
 801c80c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801c80e:	4b5f      	ldr	r3, [pc, #380]	; (801c98c <HAL_RCC_ClockConfig+0x1b0>)
 801c810:	681b      	ldr	r3, [r3, #0]
 801c812:	f003 0307 	and.w	r3, r3, #7
 801c816:	683a      	ldr	r2, [r7, #0]
 801c818:	429a      	cmp	r2, r3
 801c81a:	d001      	beq.n	801c820 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801c81c:	2301      	movs	r3, #1
 801c81e:	e0b0      	b.n	801c982 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801c820:	687b      	ldr	r3, [r7, #4]
 801c822:	681b      	ldr	r3, [r3, #0]
 801c824:	f003 0301 	and.w	r3, r3, #1
 801c828:	2b00      	cmp	r3, #0
 801c82a:	d04c      	beq.n	801c8c6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801c82c:	687b      	ldr	r3, [r7, #4]
 801c82e:	685b      	ldr	r3, [r3, #4]
 801c830:	2b03      	cmp	r3, #3
 801c832:	d107      	bne.n	801c844 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c834:	4b56      	ldr	r3, [pc, #344]	; (801c990 <HAL_RCC_ClockConfig+0x1b4>)
 801c836:	681b      	ldr	r3, [r3, #0]
 801c838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c83c:	2b00      	cmp	r3, #0
 801c83e:	d121      	bne.n	801c884 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 801c840:	2301      	movs	r3, #1
 801c842:	e09e      	b.n	801c982 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801c844:	687b      	ldr	r3, [r7, #4]
 801c846:	685b      	ldr	r3, [r3, #4]
 801c848:	2b02      	cmp	r3, #2
 801c84a:	d107      	bne.n	801c85c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801c84c:	4b50      	ldr	r3, [pc, #320]	; (801c990 <HAL_RCC_ClockConfig+0x1b4>)
 801c84e:	681b      	ldr	r3, [r3, #0]
 801c850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c854:	2b00      	cmp	r3, #0
 801c856:	d115      	bne.n	801c884 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 801c858:	2301      	movs	r3, #1
 801c85a:	e092      	b.n	801c982 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 801c85c:	687b      	ldr	r3, [r7, #4]
 801c85e:	685b      	ldr	r3, [r3, #4]
 801c860:	2b00      	cmp	r3, #0
 801c862:	d107      	bne.n	801c874 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801c864:	4b4a      	ldr	r3, [pc, #296]	; (801c990 <HAL_RCC_ClockConfig+0x1b4>)
 801c866:	681b      	ldr	r3, [r3, #0]
 801c868:	f003 0302 	and.w	r3, r3, #2
 801c86c:	2b00      	cmp	r3, #0
 801c86e:	d109      	bne.n	801c884 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 801c870:	2301      	movs	r3, #1
 801c872:	e086      	b.n	801c982 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801c874:	4b46      	ldr	r3, [pc, #280]	; (801c990 <HAL_RCC_ClockConfig+0x1b4>)
 801c876:	681b      	ldr	r3, [r3, #0]
 801c878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c87c:	2b00      	cmp	r3, #0
 801c87e:	d101      	bne.n	801c884 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 801c880:	2301      	movs	r3, #1
 801c882:	e07e      	b.n	801c982 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801c884:	4b42      	ldr	r3, [pc, #264]	; (801c990 <HAL_RCC_ClockConfig+0x1b4>)
 801c886:	689b      	ldr	r3, [r3, #8]
 801c888:	f023 0203 	bic.w	r2, r3, #3
 801c88c:	687b      	ldr	r3, [r7, #4]
 801c88e:	685b      	ldr	r3, [r3, #4]
 801c890:	493f      	ldr	r1, [pc, #252]	; (801c990 <HAL_RCC_ClockConfig+0x1b4>)
 801c892:	4313      	orrs	r3, r2
 801c894:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c896:	f7fe fd01 	bl	801b29c <HAL_GetTick>
 801c89a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c89c:	e00a      	b.n	801c8b4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801c89e:	f7fe fcfd 	bl	801b29c <HAL_GetTick>
 801c8a2:	4602      	mov	r2, r0
 801c8a4:	68fb      	ldr	r3, [r7, #12]
 801c8a6:	1ad3      	subs	r3, r2, r3
 801c8a8:	f241 3288 	movw	r2, #5000	; 0x1388
 801c8ac:	4293      	cmp	r3, r2
 801c8ae:	d901      	bls.n	801c8b4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 801c8b0:	2303      	movs	r3, #3
 801c8b2:	e066      	b.n	801c982 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c8b4:	4b36      	ldr	r3, [pc, #216]	; (801c990 <HAL_RCC_ClockConfig+0x1b4>)
 801c8b6:	689b      	ldr	r3, [r3, #8]
 801c8b8:	f003 020c 	and.w	r2, r3, #12
 801c8bc:	687b      	ldr	r3, [r7, #4]
 801c8be:	685b      	ldr	r3, [r3, #4]
 801c8c0:	009b      	lsls	r3, r3, #2
 801c8c2:	429a      	cmp	r2, r3
 801c8c4:	d1eb      	bne.n	801c89e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801c8c6:	687b      	ldr	r3, [r7, #4]
 801c8c8:	681b      	ldr	r3, [r3, #0]
 801c8ca:	f003 0302 	and.w	r3, r3, #2
 801c8ce:	2b00      	cmp	r3, #0
 801c8d0:	d008      	beq.n	801c8e4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801c8d2:	4b2f      	ldr	r3, [pc, #188]	; (801c990 <HAL_RCC_ClockConfig+0x1b4>)
 801c8d4:	689b      	ldr	r3, [r3, #8]
 801c8d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801c8da:	687b      	ldr	r3, [r7, #4]
 801c8dc:	689b      	ldr	r3, [r3, #8]
 801c8de:	492c      	ldr	r1, [pc, #176]	; (801c990 <HAL_RCC_ClockConfig+0x1b4>)
 801c8e0:	4313      	orrs	r3, r2
 801c8e2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801c8e4:	4b29      	ldr	r3, [pc, #164]	; (801c98c <HAL_RCC_ClockConfig+0x1b0>)
 801c8e6:	681b      	ldr	r3, [r3, #0]
 801c8e8:	f003 0307 	and.w	r3, r3, #7
 801c8ec:	683a      	ldr	r2, [r7, #0]
 801c8ee:	429a      	cmp	r2, r3
 801c8f0:	d210      	bcs.n	801c914 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c8f2:	4b26      	ldr	r3, [pc, #152]	; (801c98c <HAL_RCC_ClockConfig+0x1b0>)
 801c8f4:	681b      	ldr	r3, [r3, #0]
 801c8f6:	f023 0207 	bic.w	r2, r3, #7
 801c8fa:	4924      	ldr	r1, [pc, #144]	; (801c98c <HAL_RCC_ClockConfig+0x1b0>)
 801c8fc:	683b      	ldr	r3, [r7, #0]
 801c8fe:	4313      	orrs	r3, r2
 801c900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801c902:	4b22      	ldr	r3, [pc, #136]	; (801c98c <HAL_RCC_ClockConfig+0x1b0>)
 801c904:	681b      	ldr	r3, [r3, #0]
 801c906:	f003 0307 	and.w	r3, r3, #7
 801c90a:	683a      	ldr	r2, [r7, #0]
 801c90c:	429a      	cmp	r2, r3
 801c90e:	d001      	beq.n	801c914 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 801c910:	2301      	movs	r3, #1
 801c912:	e036      	b.n	801c982 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801c914:	687b      	ldr	r3, [r7, #4]
 801c916:	681b      	ldr	r3, [r3, #0]
 801c918:	f003 0304 	and.w	r3, r3, #4
 801c91c:	2b00      	cmp	r3, #0
 801c91e:	d008      	beq.n	801c932 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801c920:	4b1b      	ldr	r3, [pc, #108]	; (801c990 <HAL_RCC_ClockConfig+0x1b4>)
 801c922:	689b      	ldr	r3, [r3, #8]
 801c924:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801c928:	687b      	ldr	r3, [r7, #4]
 801c92a:	68db      	ldr	r3, [r3, #12]
 801c92c:	4918      	ldr	r1, [pc, #96]	; (801c990 <HAL_RCC_ClockConfig+0x1b4>)
 801c92e:	4313      	orrs	r3, r2
 801c930:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801c932:	687b      	ldr	r3, [r7, #4]
 801c934:	681b      	ldr	r3, [r3, #0]
 801c936:	f003 0308 	and.w	r3, r3, #8
 801c93a:	2b00      	cmp	r3, #0
 801c93c:	d009      	beq.n	801c952 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801c93e:	4b14      	ldr	r3, [pc, #80]	; (801c990 <HAL_RCC_ClockConfig+0x1b4>)
 801c940:	689b      	ldr	r3, [r3, #8]
 801c942:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 801c946:	687b      	ldr	r3, [r7, #4]
 801c948:	691b      	ldr	r3, [r3, #16]
 801c94a:	00db      	lsls	r3, r3, #3
 801c94c:	4910      	ldr	r1, [pc, #64]	; (801c990 <HAL_RCC_ClockConfig+0x1b4>)
 801c94e:	4313      	orrs	r3, r2
 801c950:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801c952:	f000 f825 	bl	801c9a0 <HAL_RCC_GetSysClockFreq>
 801c956:	4602      	mov	r2, r0
 801c958:	4b0d      	ldr	r3, [pc, #52]	; (801c990 <HAL_RCC_ClockConfig+0x1b4>)
 801c95a:	689b      	ldr	r3, [r3, #8]
 801c95c:	091b      	lsrs	r3, r3, #4
 801c95e:	f003 030f 	and.w	r3, r3, #15
 801c962:	490c      	ldr	r1, [pc, #48]	; (801c994 <HAL_RCC_ClockConfig+0x1b8>)
 801c964:	5ccb      	ldrb	r3, [r1, r3]
 801c966:	f003 031f 	and.w	r3, r3, #31
 801c96a:	fa22 f303 	lsr.w	r3, r2, r3
 801c96e:	4a0a      	ldr	r2, [pc, #40]	; (801c998 <HAL_RCC_ClockConfig+0x1bc>)
 801c970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801c972:	4b0a      	ldr	r3, [pc, #40]	; (801c99c <HAL_RCC_ClockConfig+0x1c0>)
 801c974:	681b      	ldr	r3, [r3, #0]
 801c976:	4618      	mov	r0, r3
 801c978:	f7fe fc40 	bl	801b1fc <HAL_InitTick>
 801c97c:	4603      	mov	r3, r0
 801c97e:	72fb      	strb	r3, [r7, #11]

  return status;
 801c980:	7afb      	ldrb	r3, [r7, #11]
}
 801c982:	4618      	mov	r0, r3
 801c984:	3710      	adds	r7, #16
 801c986:	46bd      	mov	sp, r7
 801c988:	bd80      	pop	{r7, pc}
 801c98a:	bf00      	nop
 801c98c:	40022000 	.word	0x40022000
 801c990:	40021000 	.word	0x40021000
 801c994:	08023e94 	.word	0x08023e94
 801c998:	20000004 	.word	0x20000004
 801c99c:	20000008 	.word	0x20000008

0801c9a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801c9a0:	b480      	push	{r7}
 801c9a2:	b089      	sub	sp, #36	; 0x24
 801c9a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 801c9a6:	2300      	movs	r3, #0
 801c9a8:	61fb      	str	r3, [r7, #28]
 801c9aa:	2300      	movs	r3, #0
 801c9ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c9ae:	4b3e      	ldr	r3, [pc, #248]	; (801caa8 <HAL_RCC_GetSysClockFreq+0x108>)
 801c9b0:	689b      	ldr	r3, [r3, #8]
 801c9b2:	f003 030c 	and.w	r3, r3, #12
 801c9b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 801c9b8:	4b3b      	ldr	r3, [pc, #236]	; (801caa8 <HAL_RCC_GetSysClockFreq+0x108>)
 801c9ba:	68db      	ldr	r3, [r3, #12]
 801c9bc:	f003 0303 	and.w	r3, r3, #3
 801c9c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 801c9c2:	693b      	ldr	r3, [r7, #16]
 801c9c4:	2b00      	cmp	r3, #0
 801c9c6:	d005      	beq.n	801c9d4 <HAL_RCC_GetSysClockFreq+0x34>
 801c9c8:	693b      	ldr	r3, [r7, #16]
 801c9ca:	2b0c      	cmp	r3, #12
 801c9cc:	d121      	bne.n	801ca12 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 801c9ce:	68fb      	ldr	r3, [r7, #12]
 801c9d0:	2b01      	cmp	r3, #1
 801c9d2:	d11e      	bne.n	801ca12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 801c9d4:	4b34      	ldr	r3, [pc, #208]	; (801caa8 <HAL_RCC_GetSysClockFreq+0x108>)
 801c9d6:	681b      	ldr	r3, [r3, #0]
 801c9d8:	f003 0308 	and.w	r3, r3, #8
 801c9dc:	2b00      	cmp	r3, #0
 801c9de:	d107      	bne.n	801c9f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 801c9e0:	4b31      	ldr	r3, [pc, #196]	; (801caa8 <HAL_RCC_GetSysClockFreq+0x108>)
 801c9e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c9e6:	0a1b      	lsrs	r3, r3, #8
 801c9e8:	f003 030f 	and.w	r3, r3, #15
 801c9ec:	61fb      	str	r3, [r7, #28]
 801c9ee:	e005      	b.n	801c9fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 801c9f0:	4b2d      	ldr	r3, [pc, #180]	; (801caa8 <HAL_RCC_GetSysClockFreq+0x108>)
 801c9f2:	681b      	ldr	r3, [r3, #0]
 801c9f4:	091b      	lsrs	r3, r3, #4
 801c9f6:	f003 030f 	and.w	r3, r3, #15
 801c9fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 801c9fc:	4a2b      	ldr	r2, [pc, #172]	; (801caac <HAL_RCC_GetSysClockFreq+0x10c>)
 801c9fe:	69fb      	ldr	r3, [r7, #28]
 801ca00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ca04:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801ca06:	693b      	ldr	r3, [r7, #16]
 801ca08:	2b00      	cmp	r3, #0
 801ca0a:	d10d      	bne.n	801ca28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 801ca0c:	69fb      	ldr	r3, [r7, #28]
 801ca0e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801ca10:	e00a      	b.n	801ca28 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 801ca12:	693b      	ldr	r3, [r7, #16]
 801ca14:	2b04      	cmp	r3, #4
 801ca16:	d102      	bne.n	801ca1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801ca18:	4b25      	ldr	r3, [pc, #148]	; (801cab0 <HAL_RCC_GetSysClockFreq+0x110>)
 801ca1a:	61bb      	str	r3, [r7, #24]
 801ca1c:	e004      	b.n	801ca28 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 801ca1e:	693b      	ldr	r3, [r7, #16]
 801ca20:	2b08      	cmp	r3, #8
 801ca22:	d101      	bne.n	801ca28 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 801ca24:	4b23      	ldr	r3, [pc, #140]	; (801cab4 <HAL_RCC_GetSysClockFreq+0x114>)
 801ca26:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 801ca28:	693b      	ldr	r3, [r7, #16]
 801ca2a:	2b0c      	cmp	r3, #12
 801ca2c:	d134      	bne.n	801ca98 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801ca2e:	4b1e      	ldr	r3, [pc, #120]	; (801caa8 <HAL_RCC_GetSysClockFreq+0x108>)
 801ca30:	68db      	ldr	r3, [r3, #12]
 801ca32:	f003 0303 	and.w	r3, r3, #3
 801ca36:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 801ca38:	68bb      	ldr	r3, [r7, #8]
 801ca3a:	2b02      	cmp	r3, #2
 801ca3c:	d003      	beq.n	801ca46 <HAL_RCC_GetSysClockFreq+0xa6>
 801ca3e:	68bb      	ldr	r3, [r7, #8]
 801ca40:	2b03      	cmp	r3, #3
 801ca42:	d003      	beq.n	801ca4c <HAL_RCC_GetSysClockFreq+0xac>
 801ca44:	e005      	b.n	801ca52 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 801ca46:	4b1a      	ldr	r3, [pc, #104]	; (801cab0 <HAL_RCC_GetSysClockFreq+0x110>)
 801ca48:	617b      	str	r3, [r7, #20]
      break;
 801ca4a:	e005      	b.n	801ca58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 801ca4c:	4b19      	ldr	r3, [pc, #100]	; (801cab4 <HAL_RCC_GetSysClockFreq+0x114>)
 801ca4e:	617b      	str	r3, [r7, #20]
      break;
 801ca50:	e002      	b.n	801ca58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 801ca52:	69fb      	ldr	r3, [r7, #28]
 801ca54:	617b      	str	r3, [r7, #20]
      break;
 801ca56:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801ca58:	4b13      	ldr	r3, [pc, #76]	; (801caa8 <HAL_RCC_GetSysClockFreq+0x108>)
 801ca5a:	68db      	ldr	r3, [r3, #12]
 801ca5c:	091b      	lsrs	r3, r3, #4
 801ca5e:	f003 0307 	and.w	r3, r3, #7
 801ca62:	3301      	adds	r3, #1
 801ca64:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 801ca66:	4b10      	ldr	r3, [pc, #64]	; (801caa8 <HAL_RCC_GetSysClockFreq+0x108>)
 801ca68:	68db      	ldr	r3, [r3, #12]
 801ca6a:	0a1b      	lsrs	r3, r3, #8
 801ca6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ca70:	697a      	ldr	r2, [r7, #20]
 801ca72:	fb02 f203 	mul.w	r2, r2, r3
 801ca76:	687b      	ldr	r3, [r7, #4]
 801ca78:	fbb2 f3f3 	udiv	r3, r2, r3
 801ca7c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801ca7e:	4b0a      	ldr	r3, [pc, #40]	; (801caa8 <HAL_RCC_GetSysClockFreq+0x108>)
 801ca80:	68db      	ldr	r3, [r3, #12]
 801ca82:	0e5b      	lsrs	r3, r3, #25
 801ca84:	f003 0303 	and.w	r3, r3, #3
 801ca88:	3301      	adds	r3, #1
 801ca8a:	005b      	lsls	r3, r3, #1
 801ca8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 801ca8e:	697a      	ldr	r2, [r7, #20]
 801ca90:	683b      	ldr	r3, [r7, #0]
 801ca92:	fbb2 f3f3 	udiv	r3, r2, r3
 801ca96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 801ca98:	69bb      	ldr	r3, [r7, #24]
}
 801ca9a:	4618      	mov	r0, r3
 801ca9c:	3724      	adds	r7, #36	; 0x24
 801ca9e:	46bd      	mov	sp, r7
 801caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801caa4:	4770      	bx	lr
 801caa6:	bf00      	nop
 801caa8:	40021000 	.word	0x40021000
 801caac:	08023eac 	.word	0x08023eac
 801cab0:	00f42400 	.word	0x00f42400
 801cab4:	007a1200 	.word	0x007a1200

0801cab8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801cab8:	b480      	push	{r7}
 801caba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801cabc:	4b03      	ldr	r3, [pc, #12]	; (801cacc <HAL_RCC_GetHCLKFreq+0x14>)
 801cabe:	681b      	ldr	r3, [r3, #0]
}
 801cac0:	4618      	mov	r0, r3
 801cac2:	46bd      	mov	sp, r7
 801cac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cac8:	4770      	bx	lr
 801caca:	bf00      	nop
 801cacc:	20000004 	.word	0x20000004

0801cad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801cad0:	b580      	push	{r7, lr}
 801cad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 801cad4:	f7ff fff0 	bl	801cab8 <HAL_RCC_GetHCLKFreq>
 801cad8:	4602      	mov	r2, r0
 801cada:	4b06      	ldr	r3, [pc, #24]	; (801caf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 801cadc:	689b      	ldr	r3, [r3, #8]
 801cade:	0a1b      	lsrs	r3, r3, #8
 801cae0:	f003 0307 	and.w	r3, r3, #7
 801cae4:	4904      	ldr	r1, [pc, #16]	; (801caf8 <HAL_RCC_GetPCLK1Freq+0x28>)
 801cae6:	5ccb      	ldrb	r3, [r1, r3]
 801cae8:	f003 031f 	and.w	r3, r3, #31
 801caec:	fa22 f303 	lsr.w	r3, r2, r3
}
 801caf0:	4618      	mov	r0, r3
 801caf2:	bd80      	pop	{r7, pc}
 801caf4:	40021000 	.word	0x40021000
 801caf8:	08023ea4 	.word	0x08023ea4

0801cafc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801cafc:	b580      	push	{r7, lr}
 801cafe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 801cb00:	f7ff ffda 	bl	801cab8 <HAL_RCC_GetHCLKFreq>
 801cb04:	4602      	mov	r2, r0
 801cb06:	4b06      	ldr	r3, [pc, #24]	; (801cb20 <HAL_RCC_GetPCLK2Freq+0x24>)
 801cb08:	689b      	ldr	r3, [r3, #8]
 801cb0a:	0adb      	lsrs	r3, r3, #11
 801cb0c:	f003 0307 	and.w	r3, r3, #7
 801cb10:	4904      	ldr	r1, [pc, #16]	; (801cb24 <HAL_RCC_GetPCLK2Freq+0x28>)
 801cb12:	5ccb      	ldrb	r3, [r1, r3]
 801cb14:	f003 031f 	and.w	r3, r3, #31
 801cb18:	fa22 f303 	lsr.w	r3, r2, r3
}
 801cb1c:	4618      	mov	r0, r3
 801cb1e:	bd80      	pop	{r7, pc}
 801cb20:	40021000 	.word	0x40021000
 801cb24:	08023ea4 	.word	0x08023ea4

0801cb28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 801cb28:	b580      	push	{r7, lr}
 801cb2a:	b086      	sub	sp, #24
 801cb2c:	af00      	add	r7, sp, #0
 801cb2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 801cb30:	2300      	movs	r3, #0
 801cb32:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 801cb34:	4b2a      	ldr	r3, [pc, #168]	; (801cbe0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801cb36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cb38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801cb3c:	2b00      	cmp	r3, #0
 801cb3e:	d003      	beq.n	801cb48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 801cb40:	f7ff fa02 	bl	801bf48 <HAL_PWREx_GetVoltageRange>
 801cb44:	6178      	str	r0, [r7, #20]
 801cb46:	e014      	b.n	801cb72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 801cb48:	4b25      	ldr	r3, [pc, #148]	; (801cbe0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801cb4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cb4c:	4a24      	ldr	r2, [pc, #144]	; (801cbe0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801cb4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801cb52:	6593      	str	r3, [r2, #88]	; 0x58
 801cb54:	4b22      	ldr	r3, [pc, #136]	; (801cbe0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801cb56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cb58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801cb5c:	60fb      	str	r3, [r7, #12]
 801cb5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 801cb60:	f7ff f9f2 	bl	801bf48 <HAL_PWREx_GetVoltageRange>
 801cb64:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 801cb66:	4b1e      	ldr	r3, [pc, #120]	; (801cbe0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801cb68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cb6a:	4a1d      	ldr	r2, [pc, #116]	; (801cbe0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801cb6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801cb70:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 801cb72:	697b      	ldr	r3, [r7, #20]
 801cb74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cb78:	d10b      	bne.n	801cb92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 801cb7a:	687b      	ldr	r3, [r7, #4]
 801cb7c:	2b80      	cmp	r3, #128	; 0x80
 801cb7e:	d919      	bls.n	801cbb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 801cb80:	687b      	ldr	r3, [r7, #4]
 801cb82:	2ba0      	cmp	r3, #160	; 0xa0
 801cb84:	d902      	bls.n	801cb8c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801cb86:	2302      	movs	r3, #2
 801cb88:	613b      	str	r3, [r7, #16]
 801cb8a:	e013      	b.n	801cbb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 801cb8c:	2301      	movs	r3, #1
 801cb8e:	613b      	str	r3, [r7, #16]
 801cb90:	e010      	b.n	801cbb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 801cb92:	687b      	ldr	r3, [r7, #4]
 801cb94:	2b80      	cmp	r3, #128	; 0x80
 801cb96:	d902      	bls.n	801cb9e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 801cb98:	2303      	movs	r3, #3
 801cb9a:	613b      	str	r3, [r7, #16]
 801cb9c:	e00a      	b.n	801cbb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 801cb9e:	687b      	ldr	r3, [r7, #4]
 801cba0:	2b80      	cmp	r3, #128	; 0x80
 801cba2:	d102      	bne.n	801cbaa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801cba4:	2302      	movs	r3, #2
 801cba6:	613b      	str	r3, [r7, #16]
 801cba8:	e004      	b.n	801cbb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 801cbaa:	687b      	ldr	r3, [r7, #4]
 801cbac:	2b70      	cmp	r3, #112	; 0x70
 801cbae:	d101      	bne.n	801cbb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 801cbb0:	2301      	movs	r3, #1
 801cbb2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 801cbb4:	4b0b      	ldr	r3, [pc, #44]	; (801cbe4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801cbb6:	681b      	ldr	r3, [r3, #0]
 801cbb8:	f023 0207 	bic.w	r2, r3, #7
 801cbbc:	4909      	ldr	r1, [pc, #36]	; (801cbe4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801cbbe:	693b      	ldr	r3, [r7, #16]
 801cbc0:	4313      	orrs	r3, r2
 801cbc2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 801cbc4:	4b07      	ldr	r3, [pc, #28]	; (801cbe4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801cbc6:	681b      	ldr	r3, [r3, #0]
 801cbc8:	f003 0307 	and.w	r3, r3, #7
 801cbcc:	693a      	ldr	r2, [r7, #16]
 801cbce:	429a      	cmp	r2, r3
 801cbd0:	d001      	beq.n	801cbd6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 801cbd2:	2301      	movs	r3, #1
 801cbd4:	e000      	b.n	801cbd8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 801cbd6:	2300      	movs	r3, #0
}
 801cbd8:	4618      	mov	r0, r3
 801cbda:	3718      	adds	r7, #24
 801cbdc:	46bd      	mov	sp, r7
 801cbde:	bd80      	pop	{r7, pc}
 801cbe0:	40021000 	.word	0x40021000
 801cbe4:	40022000 	.word	0x40022000

0801cbe8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801cbe8:	b580      	push	{r7, lr}
 801cbea:	b086      	sub	sp, #24
 801cbec:	af00      	add	r7, sp, #0
 801cbee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801cbf0:	2300      	movs	r3, #0
 801cbf2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801cbf4:	2300      	movs	r3, #0
 801cbf6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 801cbf8:	687b      	ldr	r3, [r7, #4]
 801cbfa:	681b      	ldr	r3, [r3, #0]
 801cbfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801cc00:	2b00      	cmp	r3, #0
 801cc02:	d041      	beq.n	801cc88 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 801cc04:	687b      	ldr	r3, [r7, #4]
 801cc06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801cc08:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 801cc0c:	d02a      	beq.n	801cc64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 801cc0e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 801cc12:	d824      	bhi.n	801cc5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 801cc14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801cc18:	d008      	beq.n	801cc2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 801cc1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801cc1e:	d81e      	bhi.n	801cc5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 801cc20:	2b00      	cmp	r3, #0
 801cc22:	d00a      	beq.n	801cc3a <HAL_RCCEx_PeriphCLKConfig+0x52>
 801cc24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801cc28:	d010      	beq.n	801cc4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 801cc2a:	e018      	b.n	801cc5e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 801cc2c:	4b86      	ldr	r3, [pc, #536]	; (801ce48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801cc2e:	68db      	ldr	r3, [r3, #12]
 801cc30:	4a85      	ldr	r2, [pc, #532]	; (801ce48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801cc32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801cc36:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 801cc38:	e015      	b.n	801cc66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 801cc3a:	687b      	ldr	r3, [r7, #4]
 801cc3c:	3304      	adds	r3, #4
 801cc3e:	2100      	movs	r1, #0
 801cc40:	4618      	mov	r0, r3
 801cc42:	f000 fabb 	bl	801d1bc <RCCEx_PLLSAI1_Config>
 801cc46:	4603      	mov	r3, r0
 801cc48:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 801cc4a:	e00c      	b.n	801cc66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 801cc4c:	687b      	ldr	r3, [r7, #4]
 801cc4e:	3320      	adds	r3, #32
 801cc50:	2100      	movs	r1, #0
 801cc52:	4618      	mov	r0, r3
 801cc54:	f000 fba6 	bl	801d3a4 <RCCEx_PLLSAI2_Config>
 801cc58:	4603      	mov	r3, r0
 801cc5a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 801cc5c:	e003      	b.n	801cc66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801cc5e:	2301      	movs	r3, #1
 801cc60:	74fb      	strb	r3, [r7, #19]
      break;
 801cc62:	e000      	b.n	801cc66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 801cc64:	bf00      	nop
    }

    if(ret == HAL_OK)
 801cc66:	7cfb      	ldrb	r3, [r7, #19]
 801cc68:	2b00      	cmp	r3, #0
 801cc6a:	d10b      	bne.n	801cc84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801cc6c:	4b76      	ldr	r3, [pc, #472]	; (801ce48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801cc6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cc72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801cc76:	687b      	ldr	r3, [r7, #4]
 801cc78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801cc7a:	4973      	ldr	r1, [pc, #460]	; (801ce48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801cc7c:	4313      	orrs	r3, r2
 801cc7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 801cc82:	e001      	b.n	801cc88 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cc84:	7cfb      	ldrb	r3, [r7, #19]
 801cc86:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 801cc88:	687b      	ldr	r3, [r7, #4]
 801cc8a:	681b      	ldr	r3, [r3, #0]
 801cc8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801cc90:	2b00      	cmp	r3, #0
 801cc92:	d041      	beq.n	801cd18 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 801cc94:	687b      	ldr	r3, [r7, #4]
 801cc96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801cc98:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801cc9c:	d02a      	beq.n	801ccf4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 801cc9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801cca2:	d824      	bhi.n	801ccee <HAL_RCCEx_PeriphCLKConfig+0x106>
 801cca4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801cca8:	d008      	beq.n	801ccbc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 801ccaa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801ccae:	d81e      	bhi.n	801ccee <HAL_RCCEx_PeriphCLKConfig+0x106>
 801ccb0:	2b00      	cmp	r3, #0
 801ccb2:	d00a      	beq.n	801ccca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 801ccb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801ccb8:	d010      	beq.n	801ccdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 801ccba:	e018      	b.n	801ccee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 801ccbc:	4b62      	ldr	r3, [pc, #392]	; (801ce48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801ccbe:	68db      	ldr	r3, [r3, #12]
 801ccc0:	4a61      	ldr	r2, [pc, #388]	; (801ce48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801ccc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801ccc6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 801ccc8:	e015      	b.n	801ccf6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 801ccca:	687b      	ldr	r3, [r7, #4]
 801cccc:	3304      	adds	r3, #4
 801ccce:	2100      	movs	r1, #0
 801ccd0:	4618      	mov	r0, r3
 801ccd2:	f000 fa73 	bl	801d1bc <RCCEx_PLLSAI1_Config>
 801ccd6:	4603      	mov	r3, r0
 801ccd8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 801ccda:	e00c      	b.n	801ccf6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 801ccdc:	687b      	ldr	r3, [r7, #4]
 801ccde:	3320      	adds	r3, #32
 801cce0:	2100      	movs	r1, #0
 801cce2:	4618      	mov	r0, r3
 801cce4:	f000 fb5e 	bl	801d3a4 <RCCEx_PLLSAI2_Config>
 801cce8:	4603      	mov	r3, r0
 801ccea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 801ccec:	e003      	b.n	801ccf6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801ccee:	2301      	movs	r3, #1
 801ccf0:	74fb      	strb	r3, [r7, #19]
      break;
 801ccf2:	e000      	b.n	801ccf6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 801ccf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 801ccf6:	7cfb      	ldrb	r3, [r7, #19]
 801ccf8:	2b00      	cmp	r3, #0
 801ccfa:	d10b      	bne.n	801cd14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801ccfc:	4b52      	ldr	r3, [pc, #328]	; (801ce48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801ccfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cd02:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 801cd06:	687b      	ldr	r3, [r7, #4]
 801cd08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801cd0a:	494f      	ldr	r1, [pc, #316]	; (801ce48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801cd0c:	4313      	orrs	r3, r2
 801cd0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 801cd12:	e001      	b.n	801cd18 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cd14:	7cfb      	ldrb	r3, [r7, #19]
 801cd16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801cd18:	687b      	ldr	r3, [r7, #4]
 801cd1a:	681b      	ldr	r3, [r3, #0]
 801cd1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801cd20:	2b00      	cmp	r3, #0
 801cd22:	f000 80a0 	beq.w	801ce66 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 801cd26:	2300      	movs	r3, #0
 801cd28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801cd2a:	4b47      	ldr	r3, [pc, #284]	; (801ce48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801cd2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cd2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801cd32:	2b00      	cmp	r3, #0
 801cd34:	d101      	bne.n	801cd3a <HAL_RCCEx_PeriphCLKConfig+0x152>
 801cd36:	2301      	movs	r3, #1
 801cd38:	e000      	b.n	801cd3c <HAL_RCCEx_PeriphCLKConfig+0x154>
 801cd3a:	2300      	movs	r3, #0
 801cd3c:	2b00      	cmp	r3, #0
 801cd3e:	d00d      	beq.n	801cd5c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801cd40:	4b41      	ldr	r3, [pc, #260]	; (801ce48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801cd42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cd44:	4a40      	ldr	r2, [pc, #256]	; (801ce48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801cd46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801cd4a:	6593      	str	r3, [r2, #88]	; 0x58
 801cd4c:	4b3e      	ldr	r3, [pc, #248]	; (801ce48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801cd4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cd50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801cd54:	60bb      	str	r3, [r7, #8]
 801cd56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801cd58:	2301      	movs	r3, #1
 801cd5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801cd5c:	4b3b      	ldr	r3, [pc, #236]	; (801ce4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 801cd5e:	681b      	ldr	r3, [r3, #0]
 801cd60:	4a3a      	ldr	r2, [pc, #232]	; (801ce4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 801cd62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801cd66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801cd68:	f7fe fa98 	bl	801b29c <HAL_GetTick>
 801cd6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 801cd6e:	e009      	b.n	801cd84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801cd70:	f7fe fa94 	bl	801b29c <HAL_GetTick>
 801cd74:	4602      	mov	r2, r0
 801cd76:	68fb      	ldr	r3, [r7, #12]
 801cd78:	1ad3      	subs	r3, r2, r3
 801cd7a:	2b02      	cmp	r3, #2
 801cd7c:	d902      	bls.n	801cd84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 801cd7e:	2303      	movs	r3, #3
 801cd80:	74fb      	strb	r3, [r7, #19]
        break;
 801cd82:	e005      	b.n	801cd90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 801cd84:	4b31      	ldr	r3, [pc, #196]	; (801ce4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 801cd86:	681b      	ldr	r3, [r3, #0]
 801cd88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cd8c:	2b00      	cmp	r3, #0
 801cd8e:	d0ef      	beq.n	801cd70 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 801cd90:	7cfb      	ldrb	r3, [r7, #19]
 801cd92:	2b00      	cmp	r3, #0
 801cd94:	d15c      	bne.n	801ce50 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801cd96:	4b2c      	ldr	r3, [pc, #176]	; (801ce48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801cd98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cd9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801cda0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801cda2:	697b      	ldr	r3, [r7, #20]
 801cda4:	2b00      	cmp	r3, #0
 801cda6:	d01f      	beq.n	801cde8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 801cda8:	687b      	ldr	r3, [r7, #4]
 801cdaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801cdae:	697a      	ldr	r2, [r7, #20]
 801cdb0:	429a      	cmp	r2, r3
 801cdb2:	d019      	beq.n	801cde8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801cdb4:	4b24      	ldr	r3, [pc, #144]	; (801ce48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801cdb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cdba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801cdbe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801cdc0:	4b21      	ldr	r3, [pc, #132]	; (801ce48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801cdc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cdc6:	4a20      	ldr	r2, [pc, #128]	; (801ce48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801cdc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801cdcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 801cdd0:	4b1d      	ldr	r3, [pc, #116]	; (801ce48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801cdd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cdd6:	4a1c      	ldr	r2, [pc, #112]	; (801ce48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801cdd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801cddc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 801cde0:	4a19      	ldr	r2, [pc, #100]	; (801ce48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801cde2:	697b      	ldr	r3, [r7, #20]
 801cde4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801cde8:	697b      	ldr	r3, [r7, #20]
 801cdea:	f003 0301 	and.w	r3, r3, #1
 801cdee:	2b00      	cmp	r3, #0
 801cdf0:	d016      	beq.n	801ce20 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cdf2:	f7fe fa53 	bl	801b29c <HAL_GetTick>
 801cdf6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801cdf8:	e00b      	b.n	801ce12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801cdfa:	f7fe fa4f 	bl	801b29c <HAL_GetTick>
 801cdfe:	4602      	mov	r2, r0
 801ce00:	68fb      	ldr	r3, [r7, #12]
 801ce02:	1ad3      	subs	r3, r2, r3
 801ce04:	f241 3288 	movw	r2, #5000	; 0x1388
 801ce08:	4293      	cmp	r3, r2
 801ce0a:	d902      	bls.n	801ce12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 801ce0c:	2303      	movs	r3, #3
 801ce0e:	74fb      	strb	r3, [r7, #19]
            break;
 801ce10:	e006      	b.n	801ce20 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801ce12:	4b0d      	ldr	r3, [pc, #52]	; (801ce48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801ce14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ce18:	f003 0302 	and.w	r3, r3, #2
 801ce1c:	2b00      	cmp	r3, #0
 801ce1e:	d0ec      	beq.n	801cdfa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 801ce20:	7cfb      	ldrb	r3, [r7, #19]
 801ce22:	2b00      	cmp	r3, #0
 801ce24:	d10c      	bne.n	801ce40 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801ce26:	4b08      	ldr	r3, [pc, #32]	; (801ce48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801ce28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ce2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801ce30:	687b      	ldr	r3, [r7, #4]
 801ce32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ce36:	4904      	ldr	r1, [pc, #16]	; (801ce48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801ce38:	4313      	orrs	r3, r2
 801ce3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801ce3e:	e009      	b.n	801ce54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801ce40:	7cfb      	ldrb	r3, [r7, #19]
 801ce42:	74bb      	strb	r3, [r7, #18]
 801ce44:	e006      	b.n	801ce54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 801ce46:	bf00      	nop
 801ce48:	40021000 	.word	0x40021000
 801ce4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ce50:	7cfb      	ldrb	r3, [r7, #19]
 801ce52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801ce54:	7c7b      	ldrb	r3, [r7, #17]
 801ce56:	2b01      	cmp	r3, #1
 801ce58:	d105      	bne.n	801ce66 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801ce5a:	4b9e      	ldr	r3, [pc, #632]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801ce5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ce5e:	4a9d      	ldr	r2, [pc, #628]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801ce60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801ce64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801ce66:	687b      	ldr	r3, [r7, #4]
 801ce68:	681b      	ldr	r3, [r3, #0]
 801ce6a:	f003 0301 	and.w	r3, r3, #1
 801ce6e:	2b00      	cmp	r3, #0
 801ce70:	d00a      	beq.n	801ce88 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801ce72:	4b98      	ldr	r3, [pc, #608]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801ce74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ce78:	f023 0203 	bic.w	r2, r3, #3
 801ce7c:	687b      	ldr	r3, [r7, #4]
 801ce7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ce80:	4994      	ldr	r1, [pc, #592]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801ce82:	4313      	orrs	r3, r2
 801ce84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801ce88:	687b      	ldr	r3, [r7, #4]
 801ce8a:	681b      	ldr	r3, [r3, #0]
 801ce8c:	f003 0302 	and.w	r3, r3, #2
 801ce90:	2b00      	cmp	r3, #0
 801ce92:	d00a      	beq.n	801ceaa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801ce94:	4b8f      	ldr	r3, [pc, #572]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801ce96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ce9a:	f023 020c 	bic.w	r2, r3, #12
 801ce9e:	687b      	ldr	r3, [r7, #4]
 801cea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cea2:	498c      	ldr	r1, [pc, #560]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cea4:	4313      	orrs	r3, r2
 801cea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801ceaa:	687b      	ldr	r3, [r7, #4]
 801ceac:	681b      	ldr	r3, [r3, #0]
 801ceae:	f003 0304 	and.w	r3, r3, #4
 801ceb2:	2b00      	cmp	r3, #0
 801ceb4:	d00a      	beq.n	801cecc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801ceb6:	4b87      	ldr	r3, [pc, #540]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801ceb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cebc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801cec0:	687b      	ldr	r3, [r7, #4]
 801cec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cec4:	4983      	ldr	r1, [pc, #524]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cec6:	4313      	orrs	r3, r2
 801cec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801cecc:	687b      	ldr	r3, [r7, #4]
 801cece:	681b      	ldr	r3, [r3, #0]
 801ced0:	f003 0308 	and.w	r3, r3, #8
 801ced4:	2b00      	cmp	r3, #0
 801ced6:	d00a      	beq.n	801ceee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801ced8:	4b7e      	ldr	r3, [pc, #504]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801ceda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cede:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801cee2:	687b      	ldr	r3, [r7, #4]
 801cee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cee6:	497b      	ldr	r1, [pc, #492]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cee8:	4313      	orrs	r3, r2
 801ceea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801ceee:	687b      	ldr	r3, [r7, #4]
 801cef0:	681b      	ldr	r3, [r3, #0]
 801cef2:	f003 0310 	and.w	r3, r3, #16
 801cef6:	2b00      	cmp	r3, #0
 801cef8:	d00a      	beq.n	801cf10 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801cefa:	4b76      	ldr	r3, [pc, #472]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cefc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cf00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801cf04:	687b      	ldr	r3, [r7, #4]
 801cf06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cf08:	4972      	ldr	r1, [pc, #456]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cf0a:	4313      	orrs	r3, r2
 801cf0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801cf10:	687b      	ldr	r3, [r7, #4]
 801cf12:	681b      	ldr	r3, [r3, #0]
 801cf14:	f003 0320 	and.w	r3, r3, #32
 801cf18:	2b00      	cmp	r3, #0
 801cf1a:	d00a      	beq.n	801cf32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801cf1c:	4b6d      	ldr	r3, [pc, #436]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cf1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cf22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801cf26:	687b      	ldr	r3, [r7, #4]
 801cf28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cf2a:	496a      	ldr	r1, [pc, #424]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cf2c:	4313      	orrs	r3, r2
 801cf2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801cf32:	687b      	ldr	r3, [r7, #4]
 801cf34:	681b      	ldr	r3, [r3, #0]
 801cf36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801cf3a:	2b00      	cmp	r3, #0
 801cf3c:	d00a      	beq.n	801cf54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801cf3e:	4b65      	ldr	r3, [pc, #404]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cf40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cf44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 801cf48:	687b      	ldr	r3, [r7, #4]
 801cf4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cf4c:	4961      	ldr	r1, [pc, #388]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cf4e:	4313      	orrs	r3, r2
 801cf50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 801cf54:	687b      	ldr	r3, [r7, #4]
 801cf56:	681b      	ldr	r3, [r3, #0]
 801cf58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801cf5c:	2b00      	cmp	r3, #0
 801cf5e:	d00a      	beq.n	801cf76 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801cf60:	4b5c      	ldr	r3, [pc, #368]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cf62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cf66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801cf6a:	687b      	ldr	r3, [r7, #4]
 801cf6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801cf6e:	4959      	ldr	r1, [pc, #356]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cf70:	4313      	orrs	r3, r2
 801cf72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801cf76:	687b      	ldr	r3, [r7, #4]
 801cf78:	681b      	ldr	r3, [r3, #0]
 801cf7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801cf7e:	2b00      	cmp	r3, #0
 801cf80:	d00a      	beq.n	801cf98 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801cf82:	4b54      	ldr	r3, [pc, #336]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cf84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cf88:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801cf8c:	687b      	ldr	r3, [r7, #4]
 801cf8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cf90:	4950      	ldr	r1, [pc, #320]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cf92:	4313      	orrs	r3, r2
 801cf94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801cf98:	687b      	ldr	r3, [r7, #4]
 801cf9a:	681b      	ldr	r3, [r3, #0]
 801cf9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801cfa0:	2b00      	cmp	r3, #0
 801cfa2:	d00a      	beq.n	801cfba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801cfa4:	4b4b      	ldr	r3, [pc, #300]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cfa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cfaa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801cfae:	687b      	ldr	r3, [r7, #4]
 801cfb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cfb2:	4948      	ldr	r1, [pc, #288]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cfb4:	4313      	orrs	r3, r2
 801cfb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801cfba:	687b      	ldr	r3, [r7, #4]
 801cfbc:	681b      	ldr	r3, [r3, #0]
 801cfbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cfc2:	2b00      	cmp	r3, #0
 801cfc4:	d00a      	beq.n	801cfdc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801cfc6:	4b43      	ldr	r3, [pc, #268]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cfc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cfcc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801cfd0:	687b      	ldr	r3, [r7, #4]
 801cfd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cfd4:	493f      	ldr	r1, [pc, #252]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cfd6:	4313      	orrs	r3, r2
 801cfd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801cfdc:	687b      	ldr	r3, [r7, #4]
 801cfde:	681b      	ldr	r3, [r3, #0]
 801cfe0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801cfe4:	2b00      	cmp	r3, #0
 801cfe6:	d028      	beq.n	801d03a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801cfe8:	4b3a      	ldr	r3, [pc, #232]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cfea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cfee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801cff2:	687b      	ldr	r3, [r7, #4]
 801cff4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cff6:	4937      	ldr	r1, [pc, #220]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cff8:	4313      	orrs	r3, r2
 801cffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801cffe:	687b      	ldr	r3, [r7, #4]
 801d000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d002:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d006:	d106      	bne.n	801d016 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d008:	4b32      	ldr	r3, [pc, #200]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801d00a:	68db      	ldr	r3, [r3, #12]
 801d00c:	4a31      	ldr	r2, [pc, #196]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801d00e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d012:	60d3      	str	r3, [r2, #12]
 801d014:	e011      	b.n	801d03a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 801d016:	687b      	ldr	r3, [r7, #4]
 801d018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d01a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801d01e:	d10c      	bne.n	801d03a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801d020:	687b      	ldr	r3, [r7, #4]
 801d022:	3304      	adds	r3, #4
 801d024:	2101      	movs	r1, #1
 801d026:	4618      	mov	r0, r3
 801d028:	f000 f8c8 	bl	801d1bc <RCCEx_PLLSAI1_Config>
 801d02c:	4603      	mov	r3, r0
 801d02e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 801d030:	7cfb      	ldrb	r3, [r7, #19]
 801d032:	2b00      	cmp	r3, #0
 801d034:	d001      	beq.n	801d03a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 801d036:	7cfb      	ldrb	r3, [r7, #19]
 801d038:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 801d03a:	687b      	ldr	r3, [r7, #4]
 801d03c:	681b      	ldr	r3, [r3, #0]
 801d03e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801d042:	2b00      	cmp	r3, #0
 801d044:	d028      	beq.n	801d098 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 801d046:	4b23      	ldr	r3, [pc, #140]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801d048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d04c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801d050:	687b      	ldr	r3, [r7, #4]
 801d052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d054:	491f      	ldr	r1, [pc, #124]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801d056:	4313      	orrs	r3, r2
 801d058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 801d05c:	687b      	ldr	r3, [r7, #4]
 801d05e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d060:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d064:	d106      	bne.n	801d074 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d066:	4b1b      	ldr	r3, [pc, #108]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801d068:	68db      	ldr	r3, [r3, #12]
 801d06a:	4a1a      	ldr	r2, [pc, #104]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801d06c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d070:	60d3      	str	r3, [r2, #12]
 801d072:	e011      	b.n	801d098 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 801d074:	687b      	ldr	r3, [r7, #4]
 801d076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d078:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801d07c:	d10c      	bne.n	801d098 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801d07e:	687b      	ldr	r3, [r7, #4]
 801d080:	3304      	adds	r3, #4
 801d082:	2101      	movs	r1, #1
 801d084:	4618      	mov	r0, r3
 801d086:	f000 f899 	bl	801d1bc <RCCEx_PLLSAI1_Config>
 801d08a:	4603      	mov	r3, r0
 801d08c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801d08e:	7cfb      	ldrb	r3, [r7, #19]
 801d090:	2b00      	cmp	r3, #0
 801d092:	d001      	beq.n	801d098 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 801d094:	7cfb      	ldrb	r3, [r7, #19]
 801d096:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801d098:	687b      	ldr	r3, [r7, #4]
 801d09a:	681b      	ldr	r3, [r3, #0]
 801d09c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801d0a0:	2b00      	cmp	r3, #0
 801d0a2:	d02b      	beq.n	801d0fc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801d0a4:	4b0b      	ldr	r3, [pc, #44]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801d0a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d0aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801d0ae:	687b      	ldr	r3, [r7, #4]
 801d0b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d0b2:	4908      	ldr	r1, [pc, #32]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801d0b4:	4313      	orrs	r3, r2
 801d0b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801d0ba:	687b      	ldr	r3, [r7, #4]
 801d0bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d0be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d0c2:	d109      	bne.n	801d0d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d0c4:	4b03      	ldr	r3, [pc, #12]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801d0c6:	68db      	ldr	r3, [r3, #12]
 801d0c8:	4a02      	ldr	r2, [pc, #8]	; (801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801d0ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d0ce:	60d3      	str	r3, [r2, #12]
 801d0d0:	e014      	b.n	801d0fc <HAL_RCCEx_PeriphCLKConfig+0x514>
 801d0d2:	bf00      	nop
 801d0d4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 801d0d8:	687b      	ldr	r3, [r7, #4]
 801d0da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d0dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801d0e0:	d10c      	bne.n	801d0fc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801d0e2:	687b      	ldr	r3, [r7, #4]
 801d0e4:	3304      	adds	r3, #4
 801d0e6:	2101      	movs	r1, #1
 801d0e8:	4618      	mov	r0, r3
 801d0ea:	f000 f867 	bl	801d1bc <RCCEx_PLLSAI1_Config>
 801d0ee:	4603      	mov	r3, r0
 801d0f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801d0f2:	7cfb      	ldrb	r3, [r7, #19]
 801d0f4:	2b00      	cmp	r3, #0
 801d0f6:	d001      	beq.n	801d0fc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 801d0f8:	7cfb      	ldrb	r3, [r7, #19]
 801d0fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801d0fc:	687b      	ldr	r3, [r7, #4]
 801d0fe:	681b      	ldr	r3, [r3, #0]
 801d100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801d104:	2b00      	cmp	r3, #0
 801d106:	d02f      	beq.n	801d168 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801d108:	4b2b      	ldr	r3, [pc, #172]	; (801d1b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 801d10a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d10e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801d112:	687b      	ldr	r3, [r7, #4]
 801d114:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d116:	4928      	ldr	r1, [pc, #160]	; (801d1b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 801d118:	4313      	orrs	r3, r2
 801d11a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 801d11e:	687b      	ldr	r3, [r7, #4]
 801d120:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d122:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d126:	d10d      	bne.n	801d144 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 801d128:	687b      	ldr	r3, [r7, #4]
 801d12a:	3304      	adds	r3, #4
 801d12c:	2102      	movs	r1, #2
 801d12e:	4618      	mov	r0, r3
 801d130:	f000 f844 	bl	801d1bc <RCCEx_PLLSAI1_Config>
 801d134:	4603      	mov	r3, r0
 801d136:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801d138:	7cfb      	ldrb	r3, [r7, #19]
 801d13a:	2b00      	cmp	r3, #0
 801d13c:	d014      	beq.n	801d168 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 801d13e:	7cfb      	ldrb	r3, [r7, #19]
 801d140:	74bb      	strb	r3, [r7, #18]
 801d142:	e011      	b.n	801d168 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 801d144:	687b      	ldr	r3, [r7, #4]
 801d146:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d148:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d14c:	d10c      	bne.n	801d168 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 801d14e:	687b      	ldr	r3, [r7, #4]
 801d150:	3320      	adds	r3, #32
 801d152:	2102      	movs	r1, #2
 801d154:	4618      	mov	r0, r3
 801d156:	f000 f925 	bl	801d3a4 <RCCEx_PLLSAI2_Config>
 801d15a:	4603      	mov	r3, r0
 801d15c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801d15e:	7cfb      	ldrb	r3, [r7, #19]
 801d160:	2b00      	cmp	r3, #0
 801d162:	d001      	beq.n	801d168 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 801d164:	7cfb      	ldrb	r3, [r7, #19]
 801d166:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801d168:	687b      	ldr	r3, [r7, #4]
 801d16a:	681b      	ldr	r3, [r3, #0]
 801d16c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801d170:	2b00      	cmp	r3, #0
 801d172:	d00a      	beq.n	801d18a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801d174:	4b10      	ldr	r3, [pc, #64]	; (801d1b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 801d176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d17a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 801d17e:	687b      	ldr	r3, [r7, #4]
 801d180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801d182:	490d      	ldr	r1, [pc, #52]	; (801d1b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 801d184:	4313      	orrs	r3, r2
 801d186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801d18a:	687b      	ldr	r3, [r7, #4]
 801d18c:	681b      	ldr	r3, [r3, #0]
 801d18e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801d192:	2b00      	cmp	r3, #0
 801d194:	d00b      	beq.n	801d1ae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801d196:	4b08      	ldr	r3, [pc, #32]	; (801d1b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 801d198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d19c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801d1a0:	687b      	ldr	r3, [r7, #4]
 801d1a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801d1a6:	4904      	ldr	r1, [pc, #16]	; (801d1b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 801d1a8:	4313      	orrs	r3, r2
 801d1aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 801d1ae:	7cbb      	ldrb	r3, [r7, #18]
}
 801d1b0:	4618      	mov	r0, r3
 801d1b2:	3718      	adds	r7, #24
 801d1b4:	46bd      	mov	sp, r7
 801d1b6:	bd80      	pop	{r7, pc}
 801d1b8:	40021000 	.word	0x40021000

0801d1bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 801d1bc:	b580      	push	{r7, lr}
 801d1be:	b084      	sub	sp, #16
 801d1c0:	af00      	add	r7, sp, #0
 801d1c2:	6078      	str	r0, [r7, #4]
 801d1c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801d1c6:	2300      	movs	r3, #0
 801d1c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 801d1ca:	4b75      	ldr	r3, [pc, #468]	; (801d3a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d1cc:	68db      	ldr	r3, [r3, #12]
 801d1ce:	f003 0303 	and.w	r3, r3, #3
 801d1d2:	2b00      	cmp	r3, #0
 801d1d4:	d018      	beq.n	801d208 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 801d1d6:	4b72      	ldr	r3, [pc, #456]	; (801d3a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d1d8:	68db      	ldr	r3, [r3, #12]
 801d1da:	f003 0203 	and.w	r2, r3, #3
 801d1de:	687b      	ldr	r3, [r7, #4]
 801d1e0:	681b      	ldr	r3, [r3, #0]
 801d1e2:	429a      	cmp	r2, r3
 801d1e4:	d10d      	bne.n	801d202 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 801d1e6:	687b      	ldr	r3, [r7, #4]
 801d1e8:	681b      	ldr	r3, [r3, #0]
       ||
 801d1ea:	2b00      	cmp	r3, #0
 801d1ec:	d009      	beq.n	801d202 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 801d1ee:	4b6c      	ldr	r3, [pc, #432]	; (801d3a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d1f0:	68db      	ldr	r3, [r3, #12]
 801d1f2:	091b      	lsrs	r3, r3, #4
 801d1f4:	f003 0307 	and.w	r3, r3, #7
 801d1f8:	1c5a      	adds	r2, r3, #1
 801d1fa:	687b      	ldr	r3, [r7, #4]
 801d1fc:	685b      	ldr	r3, [r3, #4]
       ||
 801d1fe:	429a      	cmp	r2, r3
 801d200:	d047      	beq.n	801d292 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 801d202:	2301      	movs	r3, #1
 801d204:	73fb      	strb	r3, [r7, #15]
 801d206:	e044      	b.n	801d292 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 801d208:	687b      	ldr	r3, [r7, #4]
 801d20a:	681b      	ldr	r3, [r3, #0]
 801d20c:	2b03      	cmp	r3, #3
 801d20e:	d018      	beq.n	801d242 <RCCEx_PLLSAI1_Config+0x86>
 801d210:	2b03      	cmp	r3, #3
 801d212:	d825      	bhi.n	801d260 <RCCEx_PLLSAI1_Config+0xa4>
 801d214:	2b01      	cmp	r3, #1
 801d216:	d002      	beq.n	801d21e <RCCEx_PLLSAI1_Config+0x62>
 801d218:	2b02      	cmp	r3, #2
 801d21a:	d009      	beq.n	801d230 <RCCEx_PLLSAI1_Config+0x74>
 801d21c:	e020      	b.n	801d260 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 801d21e:	4b60      	ldr	r3, [pc, #384]	; (801d3a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d220:	681b      	ldr	r3, [r3, #0]
 801d222:	f003 0302 	and.w	r3, r3, #2
 801d226:	2b00      	cmp	r3, #0
 801d228:	d11d      	bne.n	801d266 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 801d22a:	2301      	movs	r3, #1
 801d22c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801d22e:	e01a      	b.n	801d266 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 801d230:	4b5b      	ldr	r3, [pc, #364]	; (801d3a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d232:	681b      	ldr	r3, [r3, #0]
 801d234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801d238:	2b00      	cmp	r3, #0
 801d23a:	d116      	bne.n	801d26a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 801d23c:	2301      	movs	r3, #1
 801d23e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801d240:	e013      	b.n	801d26a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 801d242:	4b57      	ldr	r3, [pc, #348]	; (801d3a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d244:	681b      	ldr	r3, [r3, #0]
 801d246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d24a:	2b00      	cmp	r3, #0
 801d24c:	d10f      	bne.n	801d26e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 801d24e:	4b54      	ldr	r3, [pc, #336]	; (801d3a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d250:	681b      	ldr	r3, [r3, #0]
 801d252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801d256:	2b00      	cmp	r3, #0
 801d258:	d109      	bne.n	801d26e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 801d25a:	2301      	movs	r3, #1
 801d25c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801d25e:	e006      	b.n	801d26e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 801d260:	2301      	movs	r3, #1
 801d262:	73fb      	strb	r3, [r7, #15]
      break;
 801d264:	e004      	b.n	801d270 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801d266:	bf00      	nop
 801d268:	e002      	b.n	801d270 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801d26a:	bf00      	nop
 801d26c:	e000      	b.n	801d270 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801d26e:	bf00      	nop
    }

    if(status == HAL_OK)
 801d270:	7bfb      	ldrb	r3, [r7, #15]
 801d272:	2b00      	cmp	r3, #0
 801d274:	d10d      	bne.n	801d292 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 801d276:	4b4a      	ldr	r3, [pc, #296]	; (801d3a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d278:	68db      	ldr	r3, [r3, #12]
 801d27a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 801d27e:	687b      	ldr	r3, [r7, #4]
 801d280:	6819      	ldr	r1, [r3, #0]
 801d282:	687b      	ldr	r3, [r7, #4]
 801d284:	685b      	ldr	r3, [r3, #4]
 801d286:	3b01      	subs	r3, #1
 801d288:	011b      	lsls	r3, r3, #4
 801d28a:	430b      	orrs	r3, r1
 801d28c:	4944      	ldr	r1, [pc, #272]	; (801d3a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d28e:	4313      	orrs	r3, r2
 801d290:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 801d292:	7bfb      	ldrb	r3, [r7, #15]
 801d294:	2b00      	cmp	r3, #0
 801d296:	d17d      	bne.n	801d394 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 801d298:	4b41      	ldr	r3, [pc, #260]	; (801d3a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d29a:	681b      	ldr	r3, [r3, #0]
 801d29c:	4a40      	ldr	r2, [pc, #256]	; (801d3a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d29e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801d2a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d2a4:	f7fd fffa 	bl	801b29c <HAL_GetTick>
 801d2a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 801d2aa:	e009      	b.n	801d2c0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801d2ac:	f7fd fff6 	bl	801b29c <HAL_GetTick>
 801d2b0:	4602      	mov	r2, r0
 801d2b2:	68bb      	ldr	r3, [r7, #8]
 801d2b4:	1ad3      	subs	r3, r2, r3
 801d2b6:	2b02      	cmp	r3, #2
 801d2b8:	d902      	bls.n	801d2c0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 801d2ba:	2303      	movs	r3, #3
 801d2bc:	73fb      	strb	r3, [r7, #15]
        break;
 801d2be:	e005      	b.n	801d2cc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 801d2c0:	4b37      	ldr	r3, [pc, #220]	; (801d3a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d2c2:	681b      	ldr	r3, [r3, #0]
 801d2c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d2c8:	2b00      	cmp	r3, #0
 801d2ca:	d1ef      	bne.n	801d2ac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 801d2cc:	7bfb      	ldrb	r3, [r7, #15]
 801d2ce:	2b00      	cmp	r3, #0
 801d2d0:	d160      	bne.n	801d394 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 801d2d2:	683b      	ldr	r3, [r7, #0]
 801d2d4:	2b00      	cmp	r3, #0
 801d2d6:	d111      	bne.n	801d2fc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801d2d8:	4b31      	ldr	r3, [pc, #196]	; (801d3a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d2da:	691b      	ldr	r3, [r3, #16]
 801d2dc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 801d2e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d2e4:	687a      	ldr	r2, [r7, #4]
 801d2e6:	6892      	ldr	r2, [r2, #8]
 801d2e8:	0211      	lsls	r1, r2, #8
 801d2ea:	687a      	ldr	r2, [r7, #4]
 801d2ec:	68d2      	ldr	r2, [r2, #12]
 801d2ee:	0912      	lsrs	r2, r2, #4
 801d2f0:	0452      	lsls	r2, r2, #17
 801d2f2:	430a      	orrs	r2, r1
 801d2f4:	492a      	ldr	r1, [pc, #168]	; (801d3a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d2f6:	4313      	orrs	r3, r2
 801d2f8:	610b      	str	r3, [r1, #16]
 801d2fa:	e027      	b.n	801d34c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 801d2fc:	683b      	ldr	r3, [r7, #0]
 801d2fe:	2b01      	cmp	r3, #1
 801d300:	d112      	bne.n	801d328 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801d302:	4b27      	ldr	r3, [pc, #156]	; (801d3a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d304:	691b      	ldr	r3, [r3, #16]
 801d306:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 801d30a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 801d30e:	687a      	ldr	r2, [r7, #4]
 801d310:	6892      	ldr	r2, [r2, #8]
 801d312:	0211      	lsls	r1, r2, #8
 801d314:	687a      	ldr	r2, [r7, #4]
 801d316:	6912      	ldr	r2, [r2, #16]
 801d318:	0852      	lsrs	r2, r2, #1
 801d31a:	3a01      	subs	r2, #1
 801d31c:	0552      	lsls	r2, r2, #21
 801d31e:	430a      	orrs	r2, r1
 801d320:	491f      	ldr	r1, [pc, #124]	; (801d3a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d322:	4313      	orrs	r3, r2
 801d324:	610b      	str	r3, [r1, #16]
 801d326:	e011      	b.n	801d34c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801d328:	4b1d      	ldr	r3, [pc, #116]	; (801d3a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d32a:	691b      	ldr	r3, [r3, #16]
 801d32c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 801d330:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 801d334:	687a      	ldr	r2, [r7, #4]
 801d336:	6892      	ldr	r2, [r2, #8]
 801d338:	0211      	lsls	r1, r2, #8
 801d33a:	687a      	ldr	r2, [r7, #4]
 801d33c:	6952      	ldr	r2, [r2, #20]
 801d33e:	0852      	lsrs	r2, r2, #1
 801d340:	3a01      	subs	r2, #1
 801d342:	0652      	lsls	r2, r2, #25
 801d344:	430a      	orrs	r2, r1
 801d346:	4916      	ldr	r1, [pc, #88]	; (801d3a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d348:	4313      	orrs	r3, r2
 801d34a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 801d34c:	4b14      	ldr	r3, [pc, #80]	; (801d3a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d34e:	681b      	ldr	r3, [r3, #0]
 801d350:	4a13      	ldr	r2, [pc, #76]	; (801d3a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d352:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801d356:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d358:	f7fd ffa0 	bl	801b29c <HAL_GetTick>
 801d35c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 801d35e:	e009      	b.n	801d374 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801d360:	f7fd ff9c 	bl	801b29c <HAL_GetTick>
 801d364:	4602      	mov	r2, r0
 801d366:	68bb      	ldr	r3, [r7, #8]
 801d368:	1ad3      	subs	r3, r2, r3
 801d36a:	2b02      	cmp	r3, #2
 801d36c:	d902      	bls.n	801d374 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 801d36e:	2303      	movs	r3, #3
 801d370:	73fb      	strb	r3, [r7, #15]
          break;
 801d372:	e005      	b.n	801d380 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 801d374:	4b0a      	ldr	r3, [pc, #40]	; (801d3a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d376:	681b      	ldr	r3, [r3, #0]
 801d378:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d37c:	2b00      	cmp	r3, #0
 801d37e:	d0ef      	beq.n	801d360 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 801d380:	7bfb      	ldrb	r3, [r7, #15]
 801d382:	2b00      	cmp	r3, #0
 801d384:	d106      	bne.n	801d394 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 801d386:	4b06      	ldr	r3, [pc, #24]	; (801d3a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d388:	691a      	ldr	r2, [r3, #16]
 801d38a:	687b      	ldr	r3, [r7, #4]
 801d38c:	699b      	ldr	r3, [r3, #24]
 801d38e:	4904      	ldr	r1, [pc, #16]	; (801d3a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d390:	4313      	orrs	r3, r2
 801d392:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 801d394:	7bfb      	ldrb	r3, [r7, #15]
}
 801d396:	4618      	mov	r0, r3
 801d398:	3710      	adds	r7, #16
 801d39a:	46bd      	mov	sp, r7
 801d39c:	bd80      	pop	{r7, pc}
 801d39e:	bf00      	nop
 801d3a0:	40021000 	.word	0x40021000

0801d3a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 801d3a4:	b580      	push	{r7, lr}
 801d3a6:	b084      	sub	sp, #16
 801d3a8:	af00      	add	r7, sp, #0
 801d3aa:	6078      	str	r0, [r7, #4]
 801d3ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801d3ae:	2300      	movs	r3, #0
 801d3b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 801d3b2:	4b6a      	ldr	r3, [pc, #424]	; (801d55c <RCCEx_PLLSAI2_Config+0x1b8>)
 801d3b4:	68db      	ldr	r3, [r3, #12]
 801d3b6:	f003 0303 	and.w	r3, r3, #3
 801d3ba:	2b00      	cmp	r3, #0
 801d3bc:	d018      	beq.n	801d3f0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 801d3be:	4b67      	ldr	r3, [pc, #412]	; (801d55c <RCCEx_PLLSAI2_Config+0x1b8>)
 801d3c0:	68db      	ldr	r3, [r3, #12]
 801d3c2:	f003 0203 	and.w	r2, r3, #3
 801d3c6:	687b      	ldr	r3, [r7, #4]
 801d3c8:	681b      	ldr	r3, [r3, #0]
 801d3ca:	429a      	cmp	r2, r3
 801d3cc:	d10d      	bne.n	801d3ea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 801d3ce:	687b      	ldr	r3, [r7, #4]
 801d3d0:	681b      	ldr	r3, [r3, #0]
       ||
 801d3d2:	2b00      	cmp	r3, #0
 801d3d4:	d009      	beq.n	801d3ea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 801d3d6:	4b61      	ldr	r3, [pc, #388]	; (801d55c <RCCEx_PLLSAI2_Config+0x1b8>)
 801d3d8:	68db      	ldr	r3, [r3, #12]
 801d3da:	091b      	lsrs	r3, r3, #4
 801d3dc:	f003 0307 	and.w	r3, r3, #7
 801d3e0:	1c5a      	adds	r2, r3, #1
 801d3e2:	687b      	ldr	r3, [r7, #4]
 801d3e4:	685b      	ldr	r3, [r3, #4]
       ||
 801d3e6:	429a      	cmp	r2, r3
 801d3e8:	d047      	beq.n	801d47a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 801d3ea:	2301      	movs	r3, #1
 801d3ec:	73fb      	strb	r3, [r7, #15]
 801d3ee:	e044      	b.n	801d47a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 801d3f0:	687b      	ldr	r3, [r7, #4]
 801d3f2:	681b      	ldr	r3, [r3, #0]
 801d3f4:	2b03      	cmp	r3, #3
 801d3f6:	d018      	beq.n	801d42a <RCCEx_PLLSAI2_Config+0x86>
 801d3f8:	2b03      	cmp	r3, #3
 801d3fa:	d825      	bhi.n	801d448 <RCCEx_PLLSAI2_Config+0xa4>
 801d3fc:	2b01      	cmp	r3, #1
 801d3fe:	d002      	beq.n	801d406 <RCCEx_PLLSAI2_Config+0x62>
 801d400:	2b02      	cmp	r3, #2
 801d402:	d009      	beq.n	801d418 <RCCEx_PLLSAI2_Config+0x74>
 801d404:	e020      	b.n	801d448 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 801d406:	4b55      	ldr	r3, [pc, #340]	; (801d55c <RCCEx_PLLSAI2_Config+0x1b8>)
 801d408:	681b      	ldr	r3, [r3, #0]
 801d40a:	f003 0302 	and.w	r3, r3, #2
 801d40e:	2b00      	cmp	r3, #0
 801d410:	d11d      	bne.n	801d44e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 801d412:	2301      	movs	r3, #1
 801d414:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801d416:	e01a      	b.n	801d44e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 801d418:	4b50      	ldr	r3, [pc, #320]	; (801d55c <RCCEx_PLLSAI2_Config+0x1b8>)
 801d41a:	681b      	ldr	r3, [r3, #0]
 801d41c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801d420:	2b00      	cmp	r3, #0
 801d422:	d116      	bne.n	801d452 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 801d424:	2301      	movs	r3, #1
 801d426:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801d428:	e013      	b.n	801d452 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 801d42a:	4b4c      	ldr	r3, [pc, #304]	; (801d55c <RCCEx_PLLSAI2_Config+0x1b8>)
 801d42c:	681b      	ldr	r3, [r3, #0]
 801d42e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d432:	2b00      	cmp	r3, #0
 801d434:	d10f      	bne.n	801d456 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 801d436:	4b49      	ldr	r3, [pc, #292]	; (801d55c <RCCEx_PLLSAI2_Config+0x1b8>)
 801d438:	681b      	ldr	r3, [r3, #0]
 801d43a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801d43e:	2b00      	cmp	r3, #0
 801d440:	d109      	bne.n	801d456 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 801d442:	2301      	movs	r3, #1
 801d444:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801d446:	e006      	b.n	801d456 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 801d448:	2301      	movs	r3, #1
 801d44a:	73fb      	strb	r3, [r7, #15]
      break;
 801d44c:	e004      	b.n	801d458 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 801d44e:	bf00      	nop
 801d450:	e002      	b.n	801d458 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 801d452:	bf00      	nop
 801d454:	e000      	b.n	801d458 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 801d456:	bf00      	nop
    }

    if(status == HAL_OK)
 801d458:	7bfb      	ldrb	r3, [r7, #15]
 801d45a:	2b00      	cmp	r3, #0
 801d45c:	d10d      	bne.n	801d47a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 801d45e:	4b3f      	ldr	r3, [pc, #252]	; (801d55c <RCCEx_PLLSAI2_Config+0x1b8>)
 801d460:	68db      	ldr	r3, [r3, #12]
 801d462:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 801d466:	687b      	ldr	r3, [r7, #4]
 801d468:	6819      	ldr	r1, [r3, #0]
 801d46a:	687b      	ldr	r3, [r7, #4]
 801d46c:	685b      	ldr	r3, [r3, #4]
 801d46e:	3b01      	subs	r3, #1
 801d470:	011b      	lsls	r3, r3, #4
 801d472:	430b      	orrs	r3, r1
 801d474:	4939      	ldr	r1, [pc, #228]	; (801d55c <RCCEx_PLLSAI2_Config+0x1b8>)
 801d476:	4313      	orrs	r3, r2
 801d478:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 801d47a:	7bfb      	ldrb	r3, [r7, #15]
 801d47c:	2b00      	cmp	r3, #0
 801d47e:	d167      	bne.n	801d550 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 801d480:	4b36      	ldr	r3, [pc, #216]	; (801d55c <RCCEx_PLLSAI2_Config+0x1b8>)
 801d482:	681b      	ldr	r3, [r3, #0]
 801d484:	4a35      	ldr	r2, [pc, #212]	; (801d55c <RCCEx_PLLSAI2_Config+0x1b8>)
 801d486:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801d48a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d48c:	f7fd ff06 	bl	801b29c <HAL_GetTick>
 801d490:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 801d492:	e009      	b.n	801d4a8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 801d494:	f7fd ff02 	bl	801b29c <HAL_GetTick>
 801d498:	4602      	mov	r2, r0
 801d49a:	68bb      	ldr	r3, [r7, #8]
 801d49c:	1ad3      	subs	r3, r2, r3
 801d49e:	2b02      	cmp	r3, #2
 801d4a0:	d902      	bls.n	801d4a8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 801d4a2:	2303      	movs	r3, #3
 801d4a4:	73fb      	strb	r3, [r7, #15]
        break;
 801d4a6:	e005      	b.n	801d4b4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 801d4a8:	4b2c      	ldr	r3, [pc, #176]	; (801d55c <RCCEx_PLLSAI2_Config+0x1b8>)
 801d4aa:	681b      	ldr	r3, [r3, #0]
 801d4ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d4b0:	2b00      	cmp	r3, #0
 801d4b2:	d1ef      	bne.n	801d494 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 801d4b4:	7bfb      	ldrb	r3, [r7, #15]
 801d4b6:	2b00      	cmp	r3, #0
 801d4b8:	d14a      	bne.n	801d550 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 801d4ba:	683b      	ldr	r3, [r7, #0]
 801d4bc:	2b00      	cmp	r3, #0
 801d4be:	d111      	bne.n	801d4e4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 801d4c0:	4b26      	ldr	r3, [pc, #152]	; (801d55c <RCCEx_PLLSAI2_Config+0x1b8>)
 801d4c2:	695b      	ldr	r3, [r3, #20]
 801d4c4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 801d4c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d4cc:	687a      	ldr	r2, [r7, #4]
 801d4ce:	6892      	ldr	r2, [r2, #8]
 801d4d0:	0211      	lsls	r1, r2, #8
 801d4d2:	687a      	ldr	r2, [r7, #4]
 801d4d4:	68d2      	ldr	r2, [r2, #12]
 801d4d6:	0912      	lsrs	r2, r2, #4
 801d4d8:	0452      	lsls	r2, r2, #17
 801d4da:	430a      	orrs	r2, r1
 801d4dc:	491f      	ldr	r1, [pc, #124]	; (801d55c <RCCEx_PLLSAI2_Config+0x1b8>)
 801d4de:	4313      	orrs	r3, r2
 801d4e0:	614b      	str	r3, [r1, #20]
 801d4e2:	e011      	b.n	801d508 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 801d4e4:	4b1d      	ldr	r3, [pc, #116]	; (801d55c <RCCEx_PLLSAI2_Config+0x1b8>)
 801d4e6:	695b      	ldr	r3, [r3, #20]
 801d4e8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 801d4ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 801d4f0:	687a      	ldr	r2, [r7, #4]
 801d4f2:	6892      	ldr	r2, [r2, #8]
 801d4f4:	0211      	lsls	r1, r2, #8
 801d4f6:	687a      	ldr	r2, [r7, #4]
 801d4f8:	6912      	ldr	r2, [r2, #16]
 801d4fa:	0852      	lsrs	r2, r2, #1
 801d4fc:	3a01      	subs	r2, #1
 801d4fe:	0652      	lsls	r2, r2, #25
 801d500:	430a      	orrs	r2, r1
 801d502:	4916      	ldr	r1, [pc, #88]	; (801d55c <RCCEx_PLLSAI2_Config+0x1b8>)
 801d504:	4313      	orrs	r3, r2
 801d506:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 801d508:	4b14      	ldr	r3, [pc, #80]	; (801d55c <RCCEx_PLLSAI2_Config+0x1b8>)
 801d50a:	681b      	ldr	r3, [r3, #0]
 801d50c:	4a13      	ldr	r2, [pc, #76]	; (801d55c <RCCEx_PLLSAI2_Config+0x1b8>)
 801d50e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801d512:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d514:	f7fd fec2 	bl	801b29c <HAL_GetTick>
 801d518:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 801d51a:	e009      	b.n	801d530 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 801d51c:	f7fd febe 	bl	801b29c <HAL_GetTick>
 801d520:	4602      	mov	r2, r0
 801d522:	68bb      	ldr	r3, [r7, #8]
 801d524:	1ad3      	subs	r3, r2, r3
 801d526:	2b02      	cmp	r3, #2
 801d528:	d902      	bls.n	801d530 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 801d52a:	2303      	movs	r3, #3
 801d52c:	73fb      	strb	r3, [r7, #15]
          break;
 801d52e:	e005      	b.n	801d53c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 801d530:	4b0a      	ldr	r3, [pc, #40]	; (801d55c <RCCEx_PLLSAI2_Config+0x1b8>)
 801d532:	681b      	ldr	r3, [r3, #0]
 801d534:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d538:	2b00      	cmp	r3, #0
 801d53a:	d0ef      	beq.n	801d51c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 801d53c:	7bfb      	ldrb	r3, [r7, #15]
 801d53e:	2b00      	cmp	r3, #0
 801d540:	d106      	bne.n	801d550 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 801d542:	4b06      	ldr	r3, [pc, #24]	; (801d55c <RCCEx_PLLSAI2_Config+0x1b8>)
 801d544:	695a      	ldr	r2, [r3, #20]
 801d546:	687b      	ldr	r3, [r7, #4]
 801d548:	695b      	ldr	r3, [r3, #20]
 801d54a:	4904      	ldr	r1, [pc, #16]	; (801d55c <RCCEx_PLLSAI2_Config+0x1b8>)
 801d54c:	4313      	orrs	r3, r2
 801d54e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 801d550:	7bfb      	ldrb	r3, [r7, #15]
}
 801d552:	4618      	mov	r0, r3
 801d554:	3710      	adds	r7, #16
 801d556:	46bd      	mov	sp, r7
 801d558:	bd80      	pop	{r7, pc}
 801d55a:	bf00      	nop
 801d55c:	40021000 	.word	0x40021000

0801d560 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801d560:	b580      	push	{r7, lr}
 801d562:	b082      	sub	sp, #8
 801d564:	af00      	add	r7, sp, #0
 801d566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801d568:	687b      	ldr	r3, [r7, #4]
 801d56a:	2b00      	cmp	r3, #0
 801d56c:	d101      	bne.n	801d572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801d56e:	2301      	movs	r3, #1
 801d570:	e040      	b.n	801d5f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801d572:	687b      	ldr	r3, [r7, #4]
 801d574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d576:	2b00      	cmp	r3, #0
 801d578:	d106      	bne.n	801d588 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801d57a:	687b      	ldr	r3, [r7, #4]
 801d57c:	2200      	movs	r2, #0
 801d57e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801d582:	6878      	ldr	r0, [r7, #4]
 801d584:	f7fd fd74 	bl	801b070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801d588:	687b      	ldr	r3, [r7, #4]
 801d58a:	2224      	movs	r2, #36	; 0x24
 801d58c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 801d58e:	687b      	ldr	r3, [r7, #4]
 801d590:	681b      	ldr	r3, [r3, #0]
 801d592:	681a      	ldr	r2, [r3, #0]
 801d594:	687b      	ldr	r3, [r7, #4]
 801d596:	681b      	ldr	r3, [r3, #0]
 801d598:	f022 0201 	bic.w	r2, r2, #1
 801d59c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801d59e:	6878      	ldr	r0, [r7, #4]
 801d5a0:	f000 fb26 	bl	801dbf0 <UART_SetConfig>
 801d5a4:	4603      	mov	r3, r0
 801d5a6:	2b01      	cmp	r3, #1
 801d5a8:	d101      	bne.n	801d5ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 801d5aa:	2301      	movs	r3, #1
 801d5ac:	e022      	b.n	801d5f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801d5ae:	687b      	ldr	r3, [r7, #4]
 801d5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d5b2:	2b00      	cmp	r3, #0
 801d5b4:	d002      	beq.n	801d5bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 801d5b6:	6878      	ldr	r0, [r7, #4]
 801d5b8:	f000 fda4 	bl	801e104 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801d5bc:	687b      	ldr	r3, [r7, #4]
 801d5be:	681b      	ldr	r3, [r3, #0]
 801d5c0:	685a      	ldr	r2, [r3, #4]
 801d5c2:	687b      	ldr	r3, [r7, #4]
 801d5c4:	681b      	ldr	r3, [r3, #0]
 801d5c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801d5ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801d5cc:	687b      	ldr	r3, [r7, #4]
 801d5ce:	681b      	ldr	r3, [r3, #0]
 801d5d0:	689a      	ldr	r2, [r3, #8]
 801d5d2:	687b      	ldr	r3, [r7, #4]
 801d5d4:	681b      	ldr	r3, [r3, #0]
 801d5d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801d5da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801d5dc:	687b      	ldr	r3, [r7, #4]
 801d5de:	681b      	ldr	r3, [r3, #0]
 801d5e0:	681a      	ldr	r2, [r3, #0]
 801d5e2:	687b      	ldr	r3, [r7, #4]
 801d5e4:	681b      	ldr	r3, [r3, #0]
 801d5e6:	f042 0201 	orr.w	r2, r2, #1
 801d5ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801d5ec:	6878      	ldr	r0, [r7, #4]
 801d5ee:	f000 fe2b 	bl	801e248 <UART_CheckIdleState>
 801d5f2:	4603      	mov	r3, r0
}
 801d5f4:	4618      	mov	r0, r3
 801d5f6:	3708      	adds	r7, #8
 801d5f8:	46bd      	mov	sp, r7
 801d5fa:	bd80      	pop	{r7, pc}

0801d5fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801d5fc:	b580      	push	{r7, lr}
 801d5fe:	b08a      	sub	sp, #40	; 0x28
 801d600:	af02      	add	r7, sp, #8
 801d602:	60f8      	str	r0, [r7, #12]
 801d604:	60b9      	str	r1, [r7, #8]
 801d606:	603b      	str	r3, [r7, #0]
 801d608:	4613      	mov	r3, r2
 801d60a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801d60c:	68fb      	ldr	r3, [r7, #12]
 801d60e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d610:	2b20      	cmp	r3, #32
 801d612:	f040 8082 	bne.w	801d71a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 801d616:	68bb      	ldr	r3, [r7, #8]
 801d618:	2b00      	cmp	r3, #0
 801d61a:	d002      	beq.n	801d622 <HAL_UART_Transmit+0x26>
 801d61c:	88fb      	ldrh	r3, [r7, #6]
 801d61e:	2b00      	cmp	r3, #0
 801d620:	d101      	bne.n	801d626 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801d622:	2301      	movs	r3, #1
 801d624:	e07a      	b.n	801d71c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 801d626:	68fb      	ldr	r3, [r7, #12]
 801d628:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801d62c:	2b01      	cmp	r3, #1
 801d62e:	d101      	bne.n	801d634 <HAL_UART_Transmit+0x38>
 801d630:	2302      	movs	r3, #2
 801d632:	e073      	b.n	801d71c <HAL_UART_Transmit+0x120>
 801d634:	68fb      	ldr	r3, [r7, #12]
 801d636:	2201      	movs	r2, #1
 801d638:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d63c:	68fb      	ldr	r3, [r7, #12]
 801d63e:	2200      	movs	r2, #0
 801d640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801d644:	68fb      	ldr	r3, [r7, #12]
 801d646:	2221      	movs	r2, #33	; 0x21
 801d648:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801d64a:	f7fd fe27 	bl	801b29c <HAL_GetTick>
 801d64e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801d650:	68fb      	ldr	r3, [r7, #12]
 801d652:	88fa      	ldrh	r2, [r7, #6]
 801d654:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 801d658:	68fb      	ldr	r3, [r7, #12]
 801d65a:	88fa      	ldrh	r2, [r7, #6]
 801d65c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d660:	68fb      	ldr	r3, [r7, #12]
 801d662:	689b      	ldr	r3, [r3, #8]
 801d664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d668:	d108      	bne.n	801d67c <HAL_UART_Transmit+0x80>
 801d66a:	68fb      	ldr	r3, [r7, #12]
 801d66c:	691b      	ldr	r3, [r3, #16]
 801d66e:	2b00      	cmp	r3, #0
 801d670:	d104      	bne.n	801d67c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 801d672:	2300      	movs	r3, #0
 801d674:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801d676:	68bb      	ldr	r3, [r7, #8]
 801d678:	61bb      	str	r3, [r7, #24]
 801d67a:	e003      	b.n	801d684 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 801d67c:	68bb      	ldr	r3, [r7, #8]
 801d67e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801d680:	2300      	movs	r3, #0
 801d682:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 801d684:	68fb      	ldr	r3, [r7, #12]
 801d686:	2200      	movs	r2, #0
 801d688:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 801d68c:	e02d      	b.n	801d6ea <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801d68e:	683b      	ldr	r3, [r7, #0]
 801d690:	9300      	str	r3, [sp, #0]
 801d692:	697b      	ldr	r3, [r7, #20]
 801d694:	2200      	movs	r2, #0
 801d696:	2180      	movs	r1, #128	; 0x80
 801d698:	68f8      	ldr	r0, [r7, #12]
 801d69a:	f000 fe1e 	bl	801e2da <UART_WaitOnFlagUntilTimeout>
 801d69e:	4603      	mov	r3, r0
 801d6a0:	2b00      	cmp	r3, #0
 801d6a2:	d001      	beq.n	801d6a8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 801d6a4:	2303      	movs	r3, #3
 801d6a6:	e039      	b.n	801d71c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 801d6a8:	69fb      	ldr	r3, [r7, #28]
 801d6aa:	2b00      	cmp	r3, #0
 801d6ac:	d10b      	bne.n	801d6c6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801d6ae:	69bb      	ldr	r3, [r7, #24]
 801d6b0:	881a      	ldrh	r2, [r3, #0]
 801d6b2:	68fb      	ldr	r3, [r7, #12]
 801d6b4:	681b      	ldr	r3, [r3, #0]
 801d6b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801d6ba:	b292      	uxth	r2, r2
 801d6bc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801d6be:	69bb      	ldr	r3, [r7, #24]
 801d6c0:	3302      	adds	r3, #2
 801d6c2:	61bb      	str	r3, [r7, #24]
 801d6c4:	e008      	b.n	801d6d8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801d6c6:	69fb      	ldr	r3, [r7, #28]
 801d6c8:	781a      	ldrb	r2, [r3, #0]
 801d6ca:	68fb      	ldr	r3, [r7, #12]
 801d6cc:	681b      	ldr	r3, [r3, #0]
 801d6ce:	b292      	uxth	r2, r2
 801d6d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801d6d2:	69fb      	ldr	r3, [r7, #28]
 801d6d4:	3301      	adds	r3, #1
 801d6d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801d6d8:	68fb      	ldr	r3, [r7, #12]
 801d6da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801d6de:	b29b      	uxth	r3, r3
 801d6e0:	3b01      	subs	r3, #1
 801d6e2:	b29a      	uxth	r2, r3
 801d6e4:	68fb      	ldr	r3, [r7, #12]
 801d6e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 801d6ea:	68fb      	ldr	r3, [r7, #12]
 801d6ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801d6f0:	b29b      	uxth	r3, r3
 801d6f2:	2b00      	cmp	r3, #0
 801d6f4:	d1cb      	bne.n	801d68e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801d6f6:	683b      	ldr	r3, [r7, #0]
 801d6f8:	9300      	str	r3, [sp, #0]
 801d6fa:	697b      	ldr	r3, [r7, #20]
 801d6fc:	2200      	movs	r2, #0
 801d6fe:	2140      	movs	r1, #64	; 0x40
 801d700:	68f8      	ldr	r0, [r7, #12]
 801d702:	f000 fdea 	bl	801e2da <UART_WaitOnFlagUntilTimeout>
 801d706:	4603      	mov	r3, r0
 801d708:	2b00      	cmp	r3, #0
 801d70a:	d001      	beq.n	801d710 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 801d70c:	2303      	movs	r3, #3
 801d70e:	e005      	b.n	801d71c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801d710:	68fb      	ldr	r3, [r7, #12]
 801d712:	2220      	movs	r2, #32
 801d714:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 801d716:	2300      	movs	r3, #0
 801d718:	e000      	b.n	801d71c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 801d71a:	2302      	movs	r3, #2
  }
}
 801d71c:	4618      	mov	r0, r3
 801d71e:	3720      	adds	r7, #32
 801d720:	46bd      	mov	sp, r7
 801d722:	bd80      	pop	{r7, pc}

0801d724 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801d724:	b580      	push	{r7, lr}
 801d726:	b084      	sub	sp, #16
 801d728:	af00      	add	r7, sp, #0
 801d72a:	60f8      	str	r0, [r7, #12]
 801d72c:	60b9      	str	r1, [r7, #8]
 801d72e:	4613      	mov	r3, r2
 801d730:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801d732:	68fb      	ldr	r3, [r7, #12]
 801d734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801d736:	2b20      	cmp	r3, #32
 801d738:	d131      	bne.n	801d79e <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 801d73a:	68bb      	ldr	r3, [r7, #8]
 801d73c:	2b00      	cmp	r3, #0
 801d73e:	d002      	beq.n	801d746 <HAL_UART_Receive_IT+0x22>
 801d740:	88fb      	ldrh	r3, [r7, #6]
 801d742:	2b00      	cmp	r3, #0
 801d744:	d101      	bne.n	801d74a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 801d746:	2301      	movs	r3, #1
 801d748:	e02a      	b.n	801d7a0 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 801d74a:	68fb      	ldr	r3, [r7, #12]
 801d74c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801d750:	2b01      	cmp	r3, #1
 801d752:	d101      	bne.n	801d758 <HAL_UART_Receive_IT+0x34>
 801d754:	2302      	movs	r3, #2
 801d756:	e023      	b.n	801d7a0 <HAL_UART_Receive_IT+0x7c>
 801d758:	68fb      	ldr	r3, [r7, #12]
 801d75a:	2201      	movs	r2, #1
 801d75c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d760:	68fb      	ldr	r3, [r7, #12]
 801d762:	2200      	movs	r2, #0
 801d764:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801d766:	68fb      	ldr	r3, [r7, #12]
 801d768:	681b      	ldr	r3, [r3, #0]
 801d76a:	4a0f      	ldr	r2, [pc, #60]	; (801d7a8 <HAL_UART_Receive_IT+0x84>)
 801d76c:	4293      	cmp	r3, r2
 801d76e:	d00e      	beq.n	801d78e <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801d770:	68fb      	ldr	r3, [r7, #12]
 801d772:	681b      	ldr	r3, [r3, #0]
 801d774:	685b      	ldr	r3, [r3, #4]
 801d776:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801d77a:	2b00      	cmp	r3, #0
 801d77c:	d007      	beq.n	801d78e <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801d77e:	68fb      	ldr	r3, [r7, #12]
 801d780:	681b      	ldr	r3, [r3, #0]
 801d782:	681a      	ldr	r2, [r3, #0]
 801d784:	68fb      	ldr	r3, [r7, #12]
 801d786:	681b      	ldr	r3, [r3, #0]
 801d788:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801d78c:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 801d78e:	88fb      	ldrh	r3, [r7, #6]
 801d790:	461a      	mov	r2, r3
 801d792:	68b9      	ldr	r1, [r7, #8]
 801d794:	68f8      	ldr	r0, [r7, #12]
 801d796:	f000 fe1d 	bl	801e3d4 <UART_Start_Receive_IT>
 801d79a:	4603      	mov	r3, r0
 801d79c:	e000      	b.n	801d7a0 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 801d79e:	2302      	movs	r3, #2
  }
}
 801d7a0:	4618      	mov	r0, r3
 801d7a2:	3710      	adds	r7, #16
 801d7a4:	46bd      	mov	sp, r7
 801d7a6:	bd80      	pop	{r7, pc}
 801d7a8:	40008000 	.word	0x40008000

0801d7ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801d7ac:	b580      	push	{r7, lr}
 801d7ae:	b088      	sub	sp, #32
 801d7b0:	af00      	add	r7, sp, #0
 801d7b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801d7b4:	687b      	ldr	r3, [r7, #4]
 801d7b6:	681b      	ldr	r3, [r3, #0]
 801d7b8:	69db      	ldr	r3, [r3, #28]
 801d7ba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801d7bc:	687b      	ldr	r3, [r7, #4]
 801d7be:	681b      	ldr	r3, [r3, #0]
 801d7c0:	681b      	ldr	r3, [r3, #0]
 801d7c2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801d7c4:	687b      	ldr	r3, [r7, #4]
 801d7c6:	681b      	ldr	r3, [r3, #0]
 801d7c8:	689b      	ldr	r3, [r3, #8]
 801d7ca:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801d7cc:	69fa      	ldr	r2, [r7, #28]
 801d7ce:	f640 030f 	movw	r3, #2063	; 0x80f
 801d7d2:	4013      	ands	r3, r2
 801d7d4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 801d7d6:	693b      	ldr	r3, [r7, #16]
 801d7d8:	2b00      	cmp	r3, #0
 801d7da:	d113      	bne.n	801d804 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801d7dc:	69fb      	ldr	r3, [r7, #28]
 801d7de:	f003 0320 	and.w	r3, r3, #32
 801d7e2:	2b00      	cmp	r3, #0
 801d7e4:	d00e      	beq.n	801d804 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801d7e6:	69bb      	ldr	r3, [r7, #24]
 801d7e8:	f003 0320 	and.w	r3, r3, #32
 801d7ec:	2b00      	cmp	r3, #0
 801d7ee:	d009      	beq.n	801d804 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 801d7f0:	687b      	ldr	r3, [r7, #4]
 801d7f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d7f4:	2b00      	cmp	r3, #0
 801d7f6:	f000 81ce 	beq.w	801db96 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 801d7fa:	687b      	ldr	r3, [r7, #4]
 801d7fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d7fe:	6878      	ldr	r0, [r7, #4]
 801d800:	4798      	blx	r3
      }
      return;
 801d802:	e1c8      	b.n	801db96 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 801d804:	693b      	ldr	r3, [r7, #16]
 801d806:	2b00      	cmp	r3, #0
 801d808:	f000 80e3 	beq.w	801d9d2 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801d80c:	697b      	ldr	r3, [r7, #20]
 801d80e:	f003 0301 	and.w	r3, r3, #1
 801d812:	2b00      	cmp	r3, #0
 801d814:	d105      	bne.n	801d822 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801d816:	69ba      	ldr	r2, [r7, #24]
 801d818:	4ba6      	ldr	r3, [pc, #664]	; (801dab4 <HAL_UART_IRQHandler+0x308>)
 801d81a:	4013      	ands	r3, r2
 801d81c:	2b00      	cmp	r3, #0
 801d81e:	f000 80d8 	beq.w	801d9d2 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801d822:	69fb      	ldr	r3, [r7, #28]
 801d824:	f003 0301 	and.w	r3, r3, #1
 801d828:	2b00      	cmp	r3, #0
 801d82a:	d010      	beq.n	801d84e <HAL_UART_IRQHandler+0xa2>
 801d82c:	69bb      	ldr	r3, [r7, #24]
 801d82e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d832:	2b00      	cmp	r3, #0
 801d834:	d00b      	beq.n	801d84e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801d836:	687b      	ldr	r3, [r7, #4]
 801d838:	681b      	ldr	r3, [r3, #0]
 801d83a:	2201      	movs	r2, #1
 801d83c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801d83e:	687b      	ldr	r3, [r7, #4]
 801d840:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801d844:	f043 0201 	orr.w	r2, r3, #1
 801d848:	687b      	ldr	r3, [r7, #4]
 801d84a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801d84e:	69fb      	ldr	r3, [r7, #28]
 801d850:	f003 0302 	and.w	r3, r3, #2
 801d854:	2b00      	cmp	r3, #0
 801d856:	d010      	beq.n	801d87a <HAL_UART_IRQHandler+0xce>
 801d858:	697b      	ldr	r3, [r7, #20]
 801d85a:	f003 0301 	and.w	r3, r3, #1
 801d85e:	2b00      	cmp	r3, #0
 801d860:	d00b      	beq.n	801d87a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801d862:	687b      	ldr	r3, [r7, #4]
 801d864:	681b      	ldr	r3, [r3, #0]
 801d866:	2202      	movs	r2, #2
 801d868:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801d86a:	687b      	ldr	r3, [r7, #4]
 801d86c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801d870:	f043 0204 	orr.w	r2, r3, #4
 801d874:	687b      	ldr	r3, [r7, #4]
 801d876:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801d87a:	69fb      	ldr	r3, [r7, #28]
 801d87c:	f003 0304 	and.w	r3, r3, #4
 801d880:	2b00      	cmp	r3, #0
 801d882:	d010      	beq.n	801d8a6 <HAL_UART_IRQHandler+0xfa>
 801d884:	697b      	ldr	r3, [r7, #20]
 801d886:	f003 0301 	and.w	r3, r3, #1
 801d88a:	2b00      	cmp	r3, #0
 801d88c:	d00b      	beq.n	801d8a6 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801d88e:	687b      	ldr	r3, [r7, #4]
 801d890:	681b      	ldr	r3, [r3, #0]
 801d892:	2204      	movs	r2, #4
 801d894:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801d896:	687b      	ldr	r3, [r7, #4]
 801d898:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801d89c:	f043 0202 	orr.w	r2, r3, #2
 801d8a0:	687b      	ldr	r3, [r7, #4]
 801d8a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 801d8a6:	69fb      	ldr	r3, [r7, #28]
 801d8a8:	f003 0308 	and.w	r3, r3, #8
 801d8ac:	2b00      	cmp	r3, #0
 801d8ae:	d015      	beq.n	801d8dc <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801d8b0:	69bb      	ldr	r3, [r7, #24]
 801d8b2:	f003 0320 	and.w	r3, r3, #32
 801d8b6:	2b00      	cmp	r3, #0
 801d8b8:	d104      	bne.n	801d8c4 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801d8ba:	697b      	ldr	r3, [r7, #20]
 801d8bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801d8c0:	2b00      	cmp	r3, #0
 801d8c2:	d00b      	beq.n	801d8dc <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801d8c4:	687b      	ldr	r3, [r7, #4]
 801d8c6:	681b      	ldr	r3, [r3, #0]
 801d8c8:	2208      	movs	r2, #8
 801d8ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801d8cc:	687b      	ldr	r3, [r7, #4]
 801d8ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801d8d2:	f043 0208 	orr.w	r2, r3, #8
 801d8d6:	687b      	ldr	r3, [r7, #4]
 801d8d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801d8dc:	69fb      	ldr	r3, [r7, #28]
 801d8de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801d8e2:	2b00      	cmp	r3, #0
 801d8e4:	d011      	beq.n	801d90a <HAL_UART_IRQHandler+0x15e>
 801d8e6:	69bb      	ldr	r3, [r7, #24]
 801d8e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801d8ec:	2b00      	cmp	r3, #0
 801d8ee:	d00c      	beq.n	801d90a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801d8f0:	687b      	ldr	r3, [r7, #4]
 801d8f2:	681b      	ldr	r3, [r3, #0]
 801d8f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801d8f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801d8fa:	687b      	ldr	r3, [r7, #4]
 801d8fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801d900:	f043 0220 	orr.w	r2, r3, #32
 801d904:	687b      	ldr	r3, [r7, #4]
 801d906:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801d90a:	687b      	ldr	r3, [r7, #4]
 801d90c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801d910:	2b00      	cmp	r3, #0
 801d912:	f000 8142 	beq.w	801db9a <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801d916:	69fb      	ldr	r3, [r7, #28]
 801d918:	f003 0320 	and.w	r3, r3, #32
 801d91c:	2b00      	cmp	r3, #0
 801d91e:	d00c      	beq.n	801d93a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801d920:	69bb      	ldr	r3, [r7, #24]
 801d922:	f003 0320 	and.w	r3, r3, #32
 801d926:	2b00      	cmp	r3, #0
 801d928:	d007      	beq.n	801d93a <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 801d92a:	687b      	ldr	r3, [r7, #4]
 801d92c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d92e:	2b00      	cmp	r3, #0
 801d930:	d003      	beq.n	801d93a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 801d932:	687b      	ldr	r3, [r7, #4]
 801d934:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d936:	6878      	ldr	r0, [r7, #4]
 801d938:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801d93a:	687b      	ldr	r3, [r7, #4]
 801d93c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801d940:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801d942:	687b      	ldr	r3, [r7, #4]
 801d944:	681b      	ldr	r3, [r3, #0]
 801d946:	689b      	ldr	r3, [r3, #8]
 801d948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d94c:	2b40      	cmp	r3, #64	; 0x40
 801d94e:	d004      	beq.n	801d95a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801d950:	68fb      	ldr	r3, [r7, #12]
 801d952:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801d956:	2b00      	cmp	r3, #0
 801d958:	d031      	beq.n	801d9be <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801d95a:	6878      	ldr	r0, [r7, #4]
 801d95c:	f000 fdc2 	bl	801e4e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d960:	687b      	ldr	r3, [r7, #4]
 801d962:	681b      	ldr	r3, [r3, #0]
 801d964:	689b      	ldr	r3, [r3, #8]
 801d966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d96a:	2b40      	cmp	r3, #64	; 0x40
 801d96c:	d123      	bne.n	801d9b6 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801d96e:	687b      	ldr	r3, [r7, #4]
 801d970:	681b      	ldr	r3, [r3, #0]
 801d972:	689a      	ldr	r2, [r3, #8]
 801d974:	687b      	ldr	r3, [r7, #4]
 801d976:	681b      	ldr	r3, [r3, #0]
 801d978:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d97c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801d97e:	687b      	ldr	r3, [r7, #4]
 801d980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d982:	2b00      	cmp	r3, #0
 801d984:	d013      	beq.n	801d9ae <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801d986:	687b      	ldr	r3, [r7, #4]
 801d988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d98a:	4a4b      	ldr	r2, [pc, #300]	; (801dab8 <HAL_UART_IRQHandler+0x30c>)
 801d98c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801d98e:	687b      	ldr	r3, [r7, #4]
 801d990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d992:	4618      	mov	r0, r3
 801d994:	f7fd fe1b 	bl	801b5ce <HAL_DMA_Abort_IT>
 801d998:	4603      	mov	r3, r0
 801d99a:	2b00      	cmp	r3, #0
 801d99c:	d017      	beq.n	801d9ce <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801d99e:	687b      	ldr	r3, [r7, #4]
 801d9a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d9a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d9a4:	687a      	ldr	r2, [r7, #4]
 801d9a6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 801d9a8:	4610      	mov	r0, r2
 801d9aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d9ac:	e00f      	b.n	801d9ce <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801d9ae:	6878      	ldr	r0, [r7, #4]
 801d9b0:	f000 f908 	bl	801dbc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d9b4:	e00b      	b.n	801d9ce <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801d9b6:	6878      	ldr	r0, [r7, #4]
 801d9b8:	f000 f904 	bl	801dbc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d9bc:	e007      	b.n	801d9ce <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801d9be:	6878      	ldr	r0, [r7, #4]
 801d9c0:	f000 f900 	bl	801dbc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d9c4:	687b      	ldr	r3, [r7, #4]
 801d9c6:	2200      	movs	r2, #0
 801d9c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 801d9cc:	e0e5      	b.n	801db9a <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d9ce:	bf00      	nop
    return;
 801d9d0:	e0e3      	b.n	801db9a <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d9d2:	687b      	ldr	r3, [r7, #4]
 801d9d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d9d6:	2b01      	cmp	r3, #1
 801d9d8:	f040 80a9 	bne.w	801db2e <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 801d9dc:	69fb      	ldr	r3, [r7, #28]
 801d9de:	f003 0310 	and.w	r3, r3, #16
 801d9e2:	2b00      	cmp	r3, #0
 801d9e4:	f000 80a3 	beq.w	801db2e <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 801d9e8:	69bb      	ldr	r3, [r7, #24]
 801d9ea:	f003 0310 	and.w	r3, r3, #16
 801d9ee:	2b00      	cmp	r3, #0
 801d9f0:	f000 809d 	beq.w	801db2e <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801d9f4:	687b      	ldr	r3, [r7, #4]
 801d9f6:	681b      	ldr	r3, [r3, #0]
 801d9f8:	2210      	movs	r2, #16
 801d9fa:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d9fc:	687b      	ldr	r3, [r7, #4]
 801d9fe:	681b      	ldr	r3, [r3, #0]
 801da00:	689b      	ldr	r3, [r3, #8]
 801da02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801da06:	2b40      	cmp	r3, #64	; 0x40
 801da08:	d158      	bne.n	801dabc <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801da0a:	687b      	ldr	r3, [r7, #4]
 801da0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801da0e:	681b      	ldr	r3, [r3, #0]
 801da10:	685b      	ldr	r3, [r3, #4]
 801da12:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 801da14:	893b      	ldrh	r3, [r7, #8]
 801da16:	2b00      	cmp	r3, #0
 801da18:	f000 80c1 	beq.w	801db9e <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 801da1c:	687b      	ldr	r3, [r7, #4]
 801da1e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801da22:	893a      	ldrh	r2, [r7, #8]
 801da24:	429a      	cmp	r2, r3
 801da26:	f080 80ba 	bcs.w	801db9e <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801da2a:	687b      	ldr	r3, [r7, #4]
 801da2c:	893a      	ldrh	r2, [r7, #8]
 801da2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801da32:	687b      	ldr	r3, [r7, #4]
 801da34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801da36:	681b      	ldr	r3, [r3, #0]
 801da38:	681b      	ldr	r3, [r3, #0]
 801da3a:	f003 0320 	and.w	r3, r3, #32
 801da3e:	2b00      	cmp	r3, #0
 801da40:	d12a      	bne.n	801da98 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801da42:	687b      	ldr	r3, [r7, #4]
 801da44:	681b      	ldr	r3, [r3, #0]
 801da46:	681a      	ldr	r2, [r3, #0]
 801da48:	687b      	ldr	r3, [r7, #4]
 801da4a:	681b      	ldr	r3, [r3, #0]
 801da4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801da50:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801da52:	687b      	ldr	r3, [r7, #4]
 801da54:	681b      	ldr	r3, [r3, #0]
 801da56:	689a      	ldr	r2, [r3, #8]
 801da58:	687b      	ldr	r3, [r7, #4]
 801da5a:	681b      	ldr	r3, [r3, #0]
 801da5c:	f022 0201 	bic.w	r2, r2, #1
 801da60:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801da62:	687b      	ldr	r3, [r7, #4]
 801da64:	681b      	ldr	r3, [r3, #0]
 801da66:	689a      	ldr	r2, [r3, #8]
 801da68:	687b      	ldr	r3, [r7, #4]
 801da6a:	681b      	ldr	r3, [r3, #0]
 801da6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801da70:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801da72:	687b      	ldr	r3, [r7, #4]
 801da74:	2220      	movs	r2, #32
 801da76:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801da78:	687b      	ldr	r3, [r7, #4]
 801da7a:	2200      	movs	r2, #0
 801da7c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801da7e:	687b      	ldr	r3, [r7, #4]
 801da80:	681b      	ldr	r3, [r3, #0]
 801da82:	681a      	ldr	r2, [r3, #0]
 801da84:	687b      	ldr	r3, [r7, #4]
 801da86:	681b      	ldr	r3, [r3, #0]
 801da88:	f022 0210 	bic.w	r2, r2, #16
 801da8c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801da8e:	687b      	ldr	r3, [r7, #4]
 801da90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801da92:	4618      	mov	r0, r3
 801da94:	f7fd fd5d 	bl	801b552 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801da98:	687b      	ldr	r3, [r7, #4]
 801da9a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801da9e:	687b      	ldr	r3, [r7, #4]
 801daa0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801daa4:	b29b      	uxth	r3, r3
 801daa6:	1ad3      	subs	r3, r2, r3
 801daa8:	b29b      	uxth	r3, r3
 801daaa:	4619      	mov	r1, r3
 801daac:	6878      	ldr	r0, [r7, #4]
 801daae:	f000 f893 	bl	801dbd8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 801dab2:	e074      	b.n	801db9e <HAL_UART_IRQHandler+0x3f2>
 801dab4:	04000120 	.word	0x04000120
 801dab8:	0801e543 	.word	0x0801e543
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801dabc:	687b      	ldr	r3, [r7, #4]
 801dabe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801dac2:	687b      	ldr	r3, [r7, #4]
 801dac4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801dac8:	b29b      	uxth	r3, r3
 801daca:	1ad3      	subs	r3, r2, r3
 801dacc:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 801dace:	687b      	ldr	r3, [r7, #4]
 801dad0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801dad4:	b29b      	uxth	r3, r3
 801dad6:	2b00      	cmp	r3, #0
 801dad8:	d063      	beq.n	801dba2 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 801dada:	897b      	ldrh	r3, [r7, #10]
 801dadc:	2b00      	cmp	r3, #0
 801dade:	d060      	beq.n	801dba2 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801dae0:	687b      	ldr	r3, [r7, #4]
 801dae2:	681b      	ldr	r3, [r3, #0]
 801dae4:	681a      	ldr	r2, [r3, #0]
 801dae6:	687b      	ldr	r3, [r7, #4]
 801dae8:	681b      	ldr	r3, [r3, #0]
 801daea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801daee:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801daf0:	687b      	ldr	r3, [r7, #4]
 801daf2:	681b      	ldr	r3, [r3, #0]
 801daf4:	689a      	ldr	r2, [r3, #8]
 801daf6:	687b      	ldr	r3, [r7, #4]
 801daf8:	681b      	ldr	r3, [r3, #0]
 801dafa:	f022 0201 	bic.w	r2, r2, #1
 801dafe:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801db00:	687b      	ldr	r3, [r7, #4]
 801db02:	2220      	movs	r2, #32
 801db04:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801db06:	687b      	ldr	r3, [r7, #4]
 801db08:	2200      	movs	r2, #0
 801db0a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801db0c:	687b      	ldr	r3, [r7, #4]
 801db0e:	2200      	movs	r2, #0
 801db10:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801db12:	687b      	ldr	r3, [r7, #4]
 801db14:	681b      	ldr	r3, [r3, #0]
 801db16:	681a      	ldr	r2, [r3, #0]
 801db18:	687b      	ldr	r3, [r7, #4]
 801db1a:	681b      	ldr	r3, [r3, #0]
 801db1c:	f022 0210 	bic.w	r2, r2, #16
 801db20:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801db22:	897b      	ldrh	r3, [r7, #10]
 801db24:	4619      	mov	r1, r3
 801db26:	6878      	ldr	r0, [r7, #4]
 801db28:	f000 f856 	bl	801dbd8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 801db2c:	e039      	b.n	801dba2 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801db2e:	69fb      	ldr	r3, [r7, #28]
 801db30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801db34:	2b00      	cmp	r3, #0
 801db36:	d00d      	beq.n	801db54 <HAL_UART_IRQHandler+0x3a8>
 801db38:	697b      	ldr	r3, [r7, #20]
 801db3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801db3e:	2b00      	cmp	r3, #0
 801db40:	d008      	beq.n	801db54 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801db42:	687b      	ldr	r3, [r7, #4]
 801db44:	681b      	ldr	r3, [r3, #0]
 801db46:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801db4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801db4c:	6878      	ldr	r0, [r7, #4]
 801db4e:	f000 fdff 	bl	801e750 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801db52:	e029      	b.n	801dba8 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 801db54:	69fb      	ldr	r3, [r7, #28]
 801db56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801db5a:	2b00      	cmp	r3, #0
 801db5c:	d00d      	beq.n	801db7a <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801db5e:	69bb      	ldr	r3, [r7, #24]
 801db60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801db64:	2b00      	cmp	r3, #0
 801db66:	d008      	beq.n	801db7a <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 801db68:	687b      	ldr	r3, [r7, #4]
 801db6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801db6c:	2b00      	cmp	r3, #0
 801db6e:	d01a      	beq.n	801dba6 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 801db70:	687b      	ldr	r3, [r7, #4]
 801db72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801db74:	6878      	ldr	r0, [r7, #4]
 801db76:	4798      	blx	r3
    }
    return;
 801db78:	e015      	b.n	801dba6 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801db7a:	69fb      	ldr	r3, [r7, #28]
 801db7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801db80:	2b00      	cmp	r3, #0
 801db82:	d011      	beq.n	801dba8 <HAL_UART_IRQHandler+0x3fc>
 801db84:	69bb      	ldr	r3, [r7, #24]
 801db86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801db8a:	2b00      	cmp	r3, #0
 801db8c:	d00c      	beq.n	801dba8 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 801db8e:	6878      	ldr	r0, [r7, #4]
 801db90:	f000 fced 	bl	801e56e <UART_EndTransmit_IT>
    return;
 801db94:	e008      	b.n	801dba8 <HAL_UART_IRQHandler+0x3fc>
      return;
 801db96:	bf00      	nop
 801db98:	e006      	b.n	801dba8 <HAL_UART_IRQHandler+0x3fc>
    return;
 801db9a:	bf00      	nop
 801db9c:	e004      	b.n	801dba8 <HAL_UART_IRQHandler+0x3fc>
      return;
 801db9e:	bf00      	nop
 801dba0:	e002      	b.n	801dba8 <HAL_UART_IRQHandler+0x3fc>
      return;
 801dba2:	bf00      	nop
 801dba4:	e000      	b.n	801dba8 <HAL_UART_IRQHandler+0x3fc>
    return;
 801dba6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 801dba8:	3720      	adds	r7, #32
 801dbaa:	46bd      	mov	sp, r7
 801dbac:	bd80      	pop	{r7, pc}
 801dbae:	bf00      	nop

0801dbb0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801dbb0:	b480      	push	{r7}
 801dbb2:	b083      	sub	sp, #12
 801dbb4:	af00      	add	r7, sp, #0
 801dbb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801dbb8:	bf00      	nop
 801dbba:	370c      	adds	r7, #12
 801dbbc:	46bd      	mov	sp, r7
 801dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbc2:	4770      	bx	lr

0801dbc4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801dbc4:	b480      	push	{r7}
 801dbc6:	b083      	sub	sp, #12
 801dbc8:	af00      	add	r7, sp, #0
 801dbca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801dbcc:	bf00      	nop
 801dbce:	370c      	adds	r7, #12
 801dbd0:	46bd      	mov	sp, r7
 801dbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbd6:	4770      	bx	lr

0801dbd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801dbd8:	b480      	push	{r7}
 801dbda:	b083      	sub	sp, #12
 801dbdc:	af00      	add	r7, sp, #0
 801dbde:	6078      	str	r0, [r7, #4]
 801dbe0:	460b      	mov	r3, r1
 801dbe2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801dbe4:	bf00      	nop
 801dbe6:	370c      	adds	r7, #12
 801dbe8:	46bd      	mov	sp, r7
 801dbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbee:	4770      	bx	lr

0801dbf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801dbf0:	b5b0      	push	{r4, r5, r7, lr}
 801dbf2:	b088      	sub	sp, #32
 801dbf4:	af00      	add	r7, sp, #0
 801dbf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801dbf8:	2300      	movs	r3, #0
 801dbfa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801dbfc:	687b      	ldr	r3, [r7, #4]
 801dbfe:	689a      	ldr	r2, [r3, #8]
 801dc00:	687b      	ldr	r3, [r7, #4]
 801dc02:	691b      	ldr	r3, [r3, #16]
 801dc04:	431a      	orrs	r2, r3
 801dc06:	687b      	ldr	r3, [r7, #4]
 801dc08:	695b      	ldr	r3, [r3, #20]
 801dc0a:	431a      	orrs	r2, r3
 801dc0c:	687b      	ldr	r3, [r7, #4]
 801dc0e:	69db      	ldr	r3, [r3, #28]
 801dc10:	4313      	orrs	r3, r2
 801dc12:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801dc14:	687b      	ldr	r3, [r7, #4]
 801dc16:	681b      	ldr	r3, [r3, #0]
 801dc18:	681a      	ldr	r2, [r3, #0]
 801dc1a:	4bad      	ldr	r3, [pc, #692]	; (801ded0 <UART_SetConfig+0x2e0>)
 801dc1c:	4013      	ands	r3, r2
 801dc1e:	687a      	ldr	r2, [r7, #4]
 801dc20:	6812      	ldr	r2, [r2, #0]
 801dc22:	69f9      	ldr	r1, [r7, #28]
 801dc24:	430b      	orrs	r3, r1
 801dc26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801dc28:	687b      	ldr	r3, [r7, #4]
 801dc2a:	681b      	ldr	r3, [r3, #0]
 801dc2c:	685b      	ldr	r3, [r3, #4]
 801dc2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801dc32:	687b      	ldr	r3, [r7, #4]
 801dc34:	68da      	ldr	r2, [r3, #12]
 801dc36:	687b      	ldr	r3, [r7, #4]
 801dc38:	681b      	ldr	r3, [r3, #0]
 801dc3a:	430a      	orrs	r2, r1
 801dc3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801dc3e:	687b      	ldr	r3, [r7, #4]
 801dc40:	699b      	ldr	r3, [r3, #24]
 801dc42:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801dc44:	687b      	ldr	r3, [r7, #4]
 801dc46:	681b      	ldr	r3, [r3, #0]
 801dc48:	4aa2      	ldr	r2, [pc, #648]	; (801ded4 <UART_SetConfig+0x2e4>)
 801dc4a:	4293      	cmp	r3, r2
 801dc4c:	d004      	beq.n	801dc58 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801dc4e:	687b      	ldr	r3, [r7, #4]
 801dc50:	6a1b      	ldr	r3, [r3, #32]
 801dc52:	69fa      	ldr	r2, [r7, #28]
 801dc54:	4313      	orrs	r3, r2
 801dc56:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801dc58:	687b      	ldr	r3, [r7, #4]
 801dc5a:	681b      	ldr	r3, [r3, #0]
 801dc5c:	689b      	ldr	r3, [r3, #8]
 801dc5e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 801dc62:	687b      	ldr	r3, [r7, #4]
 801dc64:	681b      	ldr	r3, [r3, #0]
 801dc66:	69fa      	ldr	r2, [r7, #28]
 801dc68:	430a      	orrs	r2, r1
 801dc6a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801dc6c:	687b      	ldr	r3, [r7, #4]
 801dc6e:	681b      	ldr	r3, [r3, #0]
 801dc70:	4a99      	ldr	r2, [pc, #612]	; (801ded8 <UART_SetConfig+0x2e8>)
 801dc72:	4293      	cmp	r3, r2
 801dc74:	d121      	bne.n	801dcba <UART_SetConfig+0xca>
 801dc76:	4b99      	ldr	r3, [pc, #612]	; (801dedc <UART_SetConfig+0x2ec>)
 801dc78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801dc7c:	f003 0303 	and.w	r3, r3, #3
 801dc80:	2b03      	cmp	r3, #3
 801dc82:	d817      	bhi.n	801dcb4 <UART_SetConfig+0xc4>
 801dc84:	a201      	add	r2, pc, #4	; (adr r2, 801dc8c <UART_SetConfig+0x9c>)
 801dc86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dc8a:	bf00      	nop
 801dc8c:	0801dc9d 	.word	0x0801dc9d
 801dc90:	0801dca9 	.word	0x0801dca9
 801dc94:	0801dca3 	.word	0x0801dca3
 801dc98:	0801dcaf 	.word	0x0801dcaf
 801dc9c:	2301      	movs	r3, #1
 801dc9e:	76fb      	strb	r3, [r7, #27]
 801dca0:	e0e7      	b.n	801de72 <UART_SetConfig+0x282>
 801dca2:	2302      	movs	r3, #2
 801dca4:	76fb      	strb	r3, [r7, #27]
 801dca6:	e0e4      	b.n	801de72 <UART_SetConfig+0x282>
 801dca8:	2304      	movs	r3, #4
 801dcaa:	76fb      	strb	r3, [r7, #27]
 801dcac:	e0e1      	b.n	801de72 <UART_SetConfig+0x282>
 801dcae:	2308      	movs	r3, #8
 801dcb0:	76fb      	strb	r3, [r7, #27]
 801dcb2:	e0de      	b.n	801de72 <UART_SetConfig+0x282>
 801dcb4:	2310      	movs	r3, #16
 801dcb6:	76fb      	strb	r3, [r7, #27]
 801dcb8:	e0db      	b.n	801de72 <UART_SetConfig+0x282>
 801dcba:	687b      	ldr	r3, [r7, #4]
 801dcbc:	681b      	ldr	r3, [r3, #0]
 801dcbe:	4a88      	ldr	r2, [pc, #544]	; (801dee0 <UART_SetConfig+0x2f0>)
 801dcc0:	4293      	cmp	r3, r2
 801dcc2:	d132      	bne.n	801dd2a <UART_SetConfig+0x13a>
 801dcc4:	4b85      	ldr	r3, [pc, #532]	; (801dedc <UART_SetConfig+0x2ec>)
 801dcc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801dcca:	f003 030c 	and.w	r3, r3, #12
 801dcce:	2b0c      	cmp	r3, #12
 801dcd0:	d828      	bhi.n	801dd24 <UART_SetConfig+0x134>
 801dcd2:	a201      	add	r2, pc, #4	; (adr r2, 801dcd8 <UART_SetConfig+0xe8>)
 801dcd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dcd8:	0801dd0d 	.word	0x0801dd0d
 801dcdc:	0801dd25 	.word	0x0801dd25
 801dce0:	0801dd25 	.word	0x0801dd25
 801dce4:	0801dd25 	.word	0x0801dd25
 801dce8:	0801dd19 	.word	0x0801dd19
 801dcec:	0801dd25 	.word	0x0801dd25
 801dcf0:	0801dd25 	.word	0x0801dd25
 801dcf4:	0801dd25 	.word	0x0801dd25
 801dcf8:	0801dd13 	.word	0x0801dd13
 801dcfc:	0801dd25 	.word	0x0801dd25
 801dd00:	0801dd25 	.word	0x0801dd25
 801dd04:	0801dd25 	.word	0x0801dd25
 801dd08:	0801dd1f 	.word	0x0801dd1f
 801dd0c:	2300      	movs	r3, #0
 801dd0e:	76fb      	strb	r3, [r7, #27]
 801dd10:	e0af      	b.n	801de72 <UART_SetConfig+0x282>
 801dd12:	2302      	movs	r3, #2
 801dd14:	76fb      	strb	r3, [r7, #27]
 801dd16:	e0ac      	b.n	801de72 <UART_SetConfig+0x282>
 801dd18:	2304      	movs	r3, #4
 801dd1a:	76fb      	strb	r3, [r7, #27]
 801dd1c:	e0a9      	b.n	801de72 <UART_SetConfig+0x282>
 801dd1e:	2308      	movs	r3, #8
 801dd20:	76fb      	strb	r3, [r7, #27]
 801dd22:	e0a6      	b.n	801de72 <UART_SetConfig+0x282>
 801dd24:	2310      	movs	r3, #16
 801dd26:	76fb      	strb	r3, [r7, #27]
 801dd28:	e0a3      	b.n	801de72 <UART_SetConfig+0x282>
 801dd2a:	687b      	ldr	r3, [r7, #4]
 801dd2c:	681b      	ldr	r3, [r3, #0]
 801dd2e:	4a6d      	ldr	r2, [pc, #436]	; (801dee4 <UART_SetConfig+0x2f4>)
 801dd30:	4293      	cmp	r3, r2
 801dd32:	d120      	bne.n	801dd76 <UART_SetConfig+0x186>
 801dd34:	4b69      	ldr	r3, [pc, #420]	; (801dedc <UART_SetConfig+0x2ec>)
 801dd36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801dd3a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801dd3e:	2b30      	cmp	r3, #48	; 0x30
 801dd40:	d013      	beq.n	801dd6a <UART_SetConfig+0x17a>
 801dd42:	2b30      	cmp	r3, #48	; 0x30
 801dd44:	d814      	bhi.n	801dd70 <UART_SetConfig+0x180>
 801dd46:	2b20      	cmp	r3, #32
 801dd48:	d009      	beq.n	801dd5e <UART_SetConfig+0x16e>
 801dd4a:	2b20      	cmp	r3, #32
 801dd4c:	d810      	bhi.n	801dd70 <UART_SetConfig+0x180>
 801dd4e:	2b00      	cmp	r3, #0
 801dd50:	d002      	beq.n	801dd58 <UART_SetConfig+0x168>
 801dd52:	2b10      	cmp	r3, #16
 801dd54:	d006      	beq.n	801dd64 <UART_SetConfig+0x174>
 801dd56:	e00b      	b.n	801dd70 <UART_SetConfig+0x180>
 801dd58:	2300      	movs	r3, #0
 801dd5a:	76fb      	strb	r3, [r7, #27]
 801dd5c:	e089      	b.n	801de72 <UART_SetConfig+0x282>
 801dd5e:	2302      	movs	r3, #2
 801dd60:	76fb      	strb	r3, [r7, #27]
 801dd62:	e086      	b.n	801de72 <UART_SetConfig+0x282>
 801dd64:	2304      	movs	r3, #4
 801dd66:	76fb      	strb	r3, [r7, #27]
 801dd68:	e083      	b.n	801de72 <UART_SetConfig+0x282>
 801dd6a:	2308      	movs	r3, #8
 801dd6c:	76fb      	strb	r3, [r7, #27]
 801dd6e:	e080      	b.n	801de72 <UART_SetConfig+0x282>
 801dd70:	2310      	movs	r3, #16
 801dd72:	76fb      	strb	r3, [r7, #27]
 801dd74:	e07d      	b.n	801de72 <UART_SetConfig+0x282>
 801dd76:	687b      	ldr	r3, [r7, #4]
 801dd78:	681b      	ldr	r3, [r3, #0]
 801dd7a:	4a5b      	ldr	r2, [pc, #364]	; (801dee8 <UART_SetConfig+0x2f8>)
 801dd7c:	4293      	cmp	r3, r2
 801dd7e:	d120      	bne.n	801ddc2 <UART_SetConfig+0x1d2>
 801dd80:	4b56      	ldr	r3, [pc, #344]	; (801dedc <UART_SetConfig+0x2ec>)
 801dd82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801dd86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801dd8a:	2bc0      	cmp	r3, #192	; 0xc0
 801dd8c:	d013      	beq.n	801ddb6 <UART_SetConfig+0x1c6>
 801dd8e:	2bc0      	cmp	r3, #192	; 0xc0
 801dd90:	d814      	bhi.n	801ddbc <UART_SetConfig+0x1cc>
 801dd92:	2b80      	cmp	r3, #128	; 0x80
 801dd94:	d009      	beq.n	801ddaa <UART_SetConfig+0x1ba>
 801dd96:	2b80      	cmp	r3, #128	; 0x80
 801dd98:	d810      	bhi.n	801ddbc <UART_SetConfig+0x1cc>
 801dd9a:	2b00      	cmp	r3, #0
 801dd9c:	d002      	beq.n	801dda4 <UART_SetConfig+0x1b4>
 801dd9e:	2b40      	cmp	r3, #64	; 0x40
 801dda0:	d006      	beq.n	801ddb0 <UART_SetConfig+0x1c0>
 801dda2:	e00b      	b.n	801ddbc <UART_SetConfig+0x1cc>
 801dda4:	2300      	movs	r3, #0
 801dda6:	76fb      	strb	r3, [r7, #27]
 801dda8:	e063      	b.n	801de72 <UART_SetConfig+0x282>
 801ddaa:	2302      	movs	r3, #2
 801ddac:	76fb      	strb	r3, [r7, #27]
 801ddae:	e060      	b.n	801de72 <UART_SetConfig+0x282>
 801ddb0:	2304      	movs	r3, #4
 801ddb2:	76fb      	strb	r3, [r7, #27]
 801ddb4:	e05d      	b.n	801de72 <UART_SetConfig+0x282>
 801ddb6:	2308      	movs	r3, #8
 801ddb8:	76fb      	strb	r3, [r7, #27]
 801ddba:	e05a      	b.n	801de72 <UART_SetConfig+0x282>
 801ddbc:	2310      	movs	r3, #16
 801ddbe:	76fb      	strb	r3, [r7, #27]
 801ddc0:	e057      	b.n	801de72 <UART_SetConfig+0x282>
 801ddc2:	687b      	ldr	r3, [r7, #4]
 801ddc4:	681b      	ldr	r3, [r3, #0]
 801ddc6:	4a49      	ldr	r2, [pc, #292]	; (801deec <UART_SetConfig+0x2fc>)
 801ddc8:	4293      	cmp	r3, r2
 801ddca:	d125      	bne.n	801de18 <UART_SetConfig+0x228>
 801ddcc:	4b43      	ldr	r3, [pc, #268]	; (801dedc <UART_SetConfig+0x2ec>)
 801ddce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ddd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801ddd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ddda:	d017      	beq.n	801de0c <UART_SetConfig+0x21c>
 801dddc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801dde0:	d817      	bhi.n	801de12 <UART_SetConfig+0x222>
 801dde2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801dde6:	d00b      	beq.n	801de00 <UART_SetConfig+0x210>
 801dde8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ddec:	d811      	bhi.n	801de12 <UART_SetConfig+0x222>
 801ddee:	2b00      	cmp	r3, #0
 801ddf0:	d003      	beq.n	801ddfa <UART_SetConfig+0x20a>
 801ddf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ddf6:	d006      	beq.n	801de06 <UART_SetConfig+0x216>
 801ddf8:	e00b      	b.n	801de12 <UART_SetConfig+0x222>
 801ddfa:	2300      	movs	r3, #0
 801ddfc:	76fb      	strb	r3, [r7, #27]
 801ddfe:	e038      	b.n	801de72 <UART_SetConfig+0x282>
 801de00:	2302      	movs	r3, #2
 801de02:	76fb      	strb	r3, [r7, #27]
 801de04:	e035      	b.n	801de72 <UART_SetConfig+0x282>
 801de06:	2304      	movs	r3, #4
 801de08:	76fb      	strb	r3, [r7, #27]
 801de0a:	e032      	b.n	801de72 <UART_SetConfig+0x282>
 801de0c:	2308      	movs	r3, #8
 801de0e:	76fb      	strb	r3, [r7, #27]
 801de10:	e02f      	b.n	801de72 <UART_SetConfig+0x282>
 801de12:	2310      	movs	r3, #16
 801de14:	76fb      	strb	r3, [r7, #27]
 801de16:	e02c      	b.n	801de72 <UART_SetConfig+0x282>
 801de18:	687b      	ldr	r3, [r7, #4]
 801de1a:	681b      	ldr	r3, [r3, #0]
 801de1c:	4a2d      	ldr	r2, [pc, #180]	; (801ded4 <UART_SetConfig+0x2e4>)
 801de1e:	4293      	cmp	r3, r2
 801de20:	d125      	bne.n	801de6e <UART_SetConfig+0x27e>
 801de22:	4b2e      	ldr	r3, [pc, #184]	; (801dedc <UART_SetConfig+0x2ec>)
 801de24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801de28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801de2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801de30:	d017      	beq.n	801de62 <UART_SetConfig+0x272>
 801de32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801de36:	d817      	bhi.n	801de68 <UART_SetConfig+0x278>
 801de38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801de3c:	d00b      	beq.n	801de56 <UART_SetConfig+0x266>
 801de3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801de42:	d811      	bhi.n	801de68 <UART_SetConfig+0x278>
 801de44:	2b00      	cmp	r3, #0
 801de46:	d003      	beq.n	801de50 <UART_SetConfig+0x260>
 801de48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801de4c:	d006      	beq.n	801de5c <UART_SetConfig+0x26c>
 801de4e:	e00b      	b.n	801de68 <UART_SetConfig+0x278>
 801de50:	2300      	movs	r3, #0
 801de52:	76fb      	strb	r3, [r7, #27]
 801de54:	e00d      	b.n	801de72 <UART_SetConfig+0x282>
 801de56:	2302      	movs	r3, #2
 801de58:	76fb      	strb	r3, [r7, #27]
 801de5a:	e00a      	b.n	801de72 <UART_SetConfig+0x282>
 801de5c:	2304      	movs	r3, #4
 801de5e:	76fb      	strb	r3, [r7, #27]
 801de60:	e007      	b.n	801de72 <UART_SetConfig+0x282>
 801de62:	2308      	movs	r3, #8
 801de64:	76fb      	strb	r3, [r7, #27]
 801de66:	e004      	b.n	801de72 <UART_SetConfig+0x282>
 801de68:	2310      	movs	r3, #16
 801de6a:	76fb      	strb	r3, [r7, #27]
 801de6c:	e001      	b.n	801de72 <UART_SetConfig+0x282>
 801de6e:	2310      	movs	r3, #16
 801de70:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801de72:	687b      	ldr	r3, [r7, #4]
 801de74:	681b      	ldr	r3, [r3, #0]
 801de76:	4a17      	ldr	r2, [pc, #92]	; (801ded4 <UART_SetConfig+0x2e4>)
 801de78:	4293      	cmp	r3, r2
 801de7a:	f040 8087 	bne.w	801df8c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801de7e:	7efb      	ldrb	r3, [r7, #27]
 801de80:	2b08      	cmp	r3, #8
 801de82:	d837      	bhi.n	801def4 <UART_SetConfig+0x304>
 801de84:	a201      	add	r2, pc, #4	; (adr r2, 801de8c <UART_SetConfig+0x29c>)
 801de86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801de8a:	bf00      	nop
 801de8c:	0801deb1 	.word	0x0801deb1
 801de90:	0801def5 	.word	0x0801def5
 801de94:	0801deb9 	.word	0x0801deb9
 801de98:	0801def5 	.word	0x0801def5
 801de9c:	0801debf 	.word	0x0801debf
 801dea0:	0801def5 	.word	0x0801def5
 801dea4:	0801def5 	.word	0x0801def5
 801dea8:	0801def5 	.word	0x0801def5
 801deac:	0801dec7 	.word	0x0801dec7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801deb0:	f7fe fe0e 	bl	801cad0 <HAL_RCC_GetPCLK1Freq>
 801deb4:	6178      	str	r0, [r7, #20]
        break;
 801deb6:	e022      	b.n	801defe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801deb8:	4b0d      	ldr	r3, [pc, #52]	; (801def0 <UART_SetConfig+0x300>)
 801deba:	617b      	str	r3, [r7, #20]
        break;
 801debc:	e01f      	b.n	801defe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801debe:	f7fe fd6f 	bl	801c9a0 <HAL_RCC_GetSysClockFreq>
 801dec2:	6178      	str	r0, [r7, #20]
        break;
 801dec4:	e01b      	b.n	801defe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801dec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801deca:	617b      	str	r3, [r7, #20]
        break;
 801decc:	e017      	b.n	801defe <UART_SetConfig+0x30e>
 801dece:	bf00      	nop
 801ded0:	efff69f3 	.word	0xefff69f3
 801ded4:	40008000 	.word	0x40008000
 801ded8:	40013800 	.word	0x40013800
 801dedc:	40021000 	.word	0x40021000
 801dee0:	40004400 	.word	0x40004400
 801dee4:	40004800 	.word	0x40004800
 801dee8:	40004c00 	.word	0x40004c00
 801deec:	40005000 	.word	0x40005000
 801def0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 801def4:	2300      	movs	r3, #0
 801def6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 801def8:	2301      	movs	r3, #1
 801defa:	76bb      	strb	r3, [r7, #26]
        break;
 801defc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801defe:	697b      	ldr	r3, [r7, #20]
 801df00:	2b00      	cmp	r3, #0
 801df02:	f000 80f1 	beq.w	801e0e8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801df06:	687b      	ldr	r3, [r7, #4]
 801df08:	685a      	ldr	r2, [r3, #4]
 801df0a:	4613      	mov	r3, r2
 801df0c:	005b      	lsls	r3, r3, #1
 801df0e:	4413      	add	r3, r2
 801df10:	697a      	ldr	r2, [r7, #20]
 801df12:	429a      	cmp	r2, r3
 801df14:	d305      	bcc.n	801df22 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 801df16:	687b      	ldr	r3, [r7, #4]
 801df18:	685b      	ldr	r3, [r3, #4]
 801df1a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801df1c:	697a      	ldr	r2, [r7, #20]
 801df1e:	429a      	cmp	r2, r3
 801df20:	d902      	bls.n	801df28 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 801df22:	2301      	movs	r3, #1
 801df24:	76bb      	strb	r3, [r7, #26]
 801df26:	e0df      	b.n	801e0e8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801df28:	697b      	ldr	r3, [r7, #20]
 801df2a:	4618      	mov	r0, r3
 801df2c:	f04f 0100 	mov.w	r1, #0
 801df30:	f04f 0200 	mov.w	r2, #0
 801df34:	f04f 0300 	mov.w	r3, #0
 801df38:	020b      	lsls	r3, r1, #8
 801df3a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801df3e:	0202      	lsls	r2, r0, #8
 801df40:	6879      	ldr	r1, [r7, #4]
 801df42:	6849      	ldr	r1, [r1, #4]
 801df44:	0849      	lsrs	r1, r1, #1
 801df46:	4608      	mov	r0, r1
 801df48:	f04f 0100 	mov.w	r1, #0
 801df4c:	1814      	adds	r4, r2, r0
 801df4e:	eb43 0501 	adc.w	r5, r3, r1
 801df52:	687b      	ldr	r3, [r7, #4]
 801df54:	685b      	ldr	r3, [r3, #4]
 801df56:	461a      	mov	r2, r3
 801df58:	f04f 0300 	mov.w	r3, #0
 801df5c:	4620      	mov	r0, r4
 801df5e:	4629      	mov	r1, r5
 801df60:	f7fb fe92 	bl	8019c88 <__aeabi_uldivmod>
 801df64:	4602      	mov	r2, r0
 801df66:	460b      	mov	r3, r1
 801df68:	4613      	mov	r3, r2
 801df6a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801df6c:	693b      	ldr	r3, [r7, #16]
 801df6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801df72:	d308      	bcc.n	801df86 <UART_SetConfig+0x396>
 801df74:	693b      	ldr	r3, [r7, #16]
 801df76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801df7a:	d204      	bcs.n	801df86 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 801df7c:	687b      	ldr	r3, [r7, #4]
 801df7e:	681b      	ldr	r3, [r3, #0]
 801df80:	693a      	ldr	r2, [r7, #16]
 801df82:	60da      	str	r2, [r3, #12]
 801df84:	e0b0      	b.n	801e0e8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 801df86:	2301      	movs	r3, #1
 801df88:	76bb      	strb	r3, [r7, #26]
 801df8a:	e0ad      	b.n	801e0e8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801df8c:	687b      	ldr	r3, [r7, #4]
 801df8e:	69db      	ldr	r3, [r3, #28]
 801df90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801df94:	d15c      	bne.n	801e050 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 801df96:	7efb      	ldrb	r3, [r7, #27]
 801df98:	2b08      	cmp	r3, #8
 801df9a:	d828      	bhi.n	801dfee <UART_SetConfig+0x3fe>
 801df9c:	a201      	add	r2, pc, #4	; (adr r2, 801dfa4 <UART_SetConfig+0x3b4>)
 801df9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dfa2:	bf00      	nop
 801dfa4:	0801dfc9 	.word	0x0801dfc9
 801dfa8:	0801dfd1 	.word	0x0801dfd1
 801dfac:	0801dfd9 	.word	0x0801dfd9
 801dfb0:	0801dfef 	.word	0x0801dfef
 801dfb4:	0801dfdf 	.word	0x0801dfdf
 801dfb8:	0801dfef 	.word	0x0801dfef
 801dfbc:	0801dfef 	.word	0x0801dfef
 801dfc0:	0801dfef 	.word	0x0801dfef
 801dfc4:	0801dfe7 	.word	0x0801dfe7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801dfc8:	f7fe fd82 	bl	801cad0 <HAL_RCC_GetPCLK1Freq>
 801dfcc:	6178      	str	r0, [r7, #20]
        break;
 801dfce:	e013      	b.n	801dff8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801dfd0:	f7fe fd94 	bl	801cafc <HAL_RCC_GetPCLK2Freq>
 801dfd4:	6178      	str	r0, [r7, #20]
        break;
 801dfd6:	e00f      	b.n	801dff8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801dfd8:	4b49      	ldr	r3, [pc, #292]	; (801e100 <UART_SetConfig+0x510>)
 801dfda:	617b      	str	r3, [r7, #20]
        break;
 801dfdc:	e00c      	b.n	801dff8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801dfde:	f7fe fcdf 	bl	801c9a0 <HAL_RCC_GetSysClockFreq>
 801dfe2:	6178      	str	r0, [r7, #20]
        break;
 801dfe4:	e008      	b.n	801dff8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801dfe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801dfea:	617b      	str	r3, [r7, #20]
        break;
 801dfec:	e004      	b.n	801dff8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 801dfee:	2300      	movs	r3, #0
 801dff0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 801dff2:	2301      	movs	r3, #1
 801dff4:	76bb      	strb	r3, [r7, #26]
        break;
 801dff6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801dff8:	697b      	ldr	r3, [r7, #20]
 801dffa:	2b00      	cmp	r3, #0
 801dffc:	d074      	beq.n	801e0e8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801dffe:	697b      	ldr	r3, [r7, #20]
 801e000:	005a      	lsls	r2, r3, #1
 801e002:	687b      	ldr	r3, [r7, #4]
 801e004:	685b      	ldr	r3, [r3, #4]
 801e006:	085b      	lsrs	r3, r3, #1
 801e008:	441a      	add	r2, r3
 801e00a:	687b      	ldr	r3, [r7, #4]
 801e00c:	685b      	ldr	r3, [r3, #4]
 801e00e:	fbb2 f3f3 	udiv	r3, r2, r3
 801e012:	b29b      	uxth	r3, r3
 801e014:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e016:	693b      	ldr	r3, [r7, #16]
 801e018:	2b0f      	cmp	r3, #15
 801e01a:	d916      	bls.n	801e04a <UART_SetConfig+0x45a>
 801e01c:	693b      	ldr	r3, [r7, #16]
 801e01e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e022:	d212      	bcs.n	801e04a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801e024:	693b      	ldr	r3, [r7, #16]
 801e026:	b29b      	uxth	r3, r3
 801e028:	f023 030f 	bic.w	r3, r3, #15
 801e02c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801e02e:	693b      	ldr	r3, [r7, #16]
 801e030:	085b      	lsrs	r3, r3, #1
 801e032:	b29b      	uxth	r3, r3
 801e034:	f003 0307 	and.w	r3, r3, #7
 801e038:	b29a      	uxth	r2, r3
 801e03a:	89fb      	ldrh	r3, [r7, #14]
 801e03c:	4313      	orrs	r3, r2
 801e03e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 801e040:	687b      	ldr	r3, [r7, #4]
 801e042:	681b      	ldr	r3, [r3, #0]
 801e044:	89fa      	ldrh	r2, [r7, #14]
 801e046:	60da      	str	r2, [r3, #12]
 801e048:	e04e      	b.n	801e0e8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 801e04a:	2301      	movs	r3, #1
 801e04c:	76bb      	strb	r3, [r7, #26]
 801e04e:	e04b      	b.n	801e0e8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 801e050:	7efb      	ldrb	r3, [r7, #27]
 801e052:	2b08      	cmp	r3, #8
 801e054:	d827      	bhi.n	801e0a6 <UART_SetConfig+0x4b6>
 801e056:	a201      	add	r2, pc, #4	; (adr r2, 801e05c <UART_SetConfig+0x46c>)
 801e058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e05c:	0801e081 	.word	0x0801e081
 801e060:	0801e089 	.word	0x0801e089
 801e064:	0801e091 	.word	0x0801e091
 801e068:	0801e0a7 	.word	0x0801e0a7
 801e06c:	0801e097 	.word	0x0801e097
 801e070:	0801e0a7 	.word	0x0801e0a7
 801e074:	0801e0a7 	.word	0x0801e0a7
 801e078:	0801e0a7 	.word	0x0801e0a7
 801e07c:	0801e09f 	.word	0x0801e09f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e080:	f7fe fd26 	bl	801cad0 <HAL_RCC_GetPCLK1Freq>
 801e084:	6178      	str	r0, [r7, #20]
        break;
 801e086:	e013      	b.n	801e0b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e088:	f7fe fd38 	bl	801cafc <HAL_RCC_GetPCLK2Freq>
 801e08c:	6178      	str	r0, [r7, #20]
        break;
 801e08e:	e00f      	b.n	801e0b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801e090:	4b1b      	ldr	r3, [pc, #108]	; (801e100 <UART_SetConfig+0x510>)
 801e092:	617b      	str	r3, [r7, #20]
        break;
 801e094:	e00c      	b.n	801e0b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e096:	f7fe fc83 	bl	801c9a0 <HAL_RCC_GetSysClockFreq>
 801e09a:	6178      	str	r0, [r7, #20]
        break;
 801e09c:	e008      	b.n	801e0b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e09e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e0a2:	617b      	str	r3, [r7, #20]
        break;
 801e0a4:	e004      	b.n	801e0b0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 801e0a6:	2300      	movs	r3, #0
 801e0a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 801e0aa:	2301      	movs	r3, #1
 801e0ac:	76bb      	strb	r3, [r7, #26]
        break;
 801e0ae:	bf00      	nop
    }

    if (pclk != 0U)
 801e0b0:	697b      	ldr	r3, [r7, #20]
 801e0b2:	2b00      	cmp	r3, #0
 801e0b4:	d018      	beq.n	801e0e8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801e0b6:	687b      	ldr	r3, [r7, #4]
 801e0b8:	685b      	ldr	r3, [r3, #4]
 801e0ba:	085a      	lsrs	r2, r3, #1
 801e0bc:	697b      	ldr	r3, [r7, #20]
 801e0be:	441a      	add	r2, r3
 801e0c0:	687b      	ldr	r3, [r7, #4]
 801e0c2:	685b      	ldr	r3, [r3, #4]
 801e0c4:	fbb2 f3f3 	udiv	r3, r2, r3
 801e0c8:	b29b      	uxth	r3, r3
 801e0ca:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e0cc:	693b      	ldr	r3, [r7, #16]
 801e0ce:	2b0f      	cmp	r3, #15
 801e0d0:	d908      	bls.n	801e0e4 <UART_SetConfig+0x4f4>
 801e0d2:	693b      	ldr	r3, [r7, #16]
 801e0d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e0d8:	d204      	bcs.n	801e0e4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 801e0da:	687b      	ldr	r3, [r7, #4]
 801e0dc:	681b      	ldr	r3, [r3, #0]
 801e0de:	693a      	ldr	r2, [r7, #16]
 801e0e0:	60da      	str	r2, [r3, #12]
 801e0e2:	e001      	b.n	801e0e8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 801e0e4:	2301      	movs	r3, #1
 801e0e6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801e0e8:	687b      	ldr	r3, [r7, #4]
 801e0ea:	2200      	movs	r2, #0
 801e0ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 801e0ee:	687b      	ldr	r3, [r7, #4]
 801e0f0:	2200      	movs	r2, #0
 801e0f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 801e0f4:	7ebb      	ldrb	r3, [r7, #26]
}
 801e0f6:	4618      	mov	r0, r3
 801e0f8:	3720      	adds	r7, #32
 801e0fa:	46bd      	mov	sp, r7
 801e0fc:	bdb0      	pop	{r4, r5, r7, pc}
 801e0fe:	bf00      	nop
 801e100:	00f42400 	.word	0x00f42400

0801e104 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801e104:	b480      	push	{r7}
 801e106:	b083      	sub	sp, #12
 801e108:	af00      	add	r7, sp, #0
 801e10a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801e10c:	687b      	ldr	r3, [r7, #4]
 801e10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e110:	f003 0301 	and.w	r3, r3, #1
 801e114:	2b00      	cmp	r3, #0
 801e116:	d00a      	beq.n	801e12e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801e118:	687b      	ldr	r3, [r7, #4]
 801e11a:	681b      	ldr	r3, [r3, #0]
 801e11c:	685b      	ldr	r3, [r3, #4]
 801e11e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801e122:	687b      	ldr	r3, [r7, #4]
 801e124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801e126:	687b      	ldr	r3, [r7, #4]
 801e128:	681b      	ldr	r3, [r3, #0]
 801e12a:	430a      	orrs	r2, r1
 801e12c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801e12e:	687b      	ldr	r3, [r7, #4]
 801e130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e132:	f003 0302 	and.w	r3, r3, #2
 801e136:	2b00      	cmp	r3, #0
 801e138:	d00a      	beq.n	801e150 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801e13a:	687b      	ldr	r3, [r7, #4]
 801e13c:	681b      	ldr	r3, [r3, #0]
 801e13e:	685b      	ldr	r3, [r3, #4]
 801e140:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801e144:	687b      	ldr	r3, [r7, #4]
 801e146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e148:	687b      	ldr	r3, [r7, #4]
 801e14a:	681b      	ldr	r3, [r3, #0]
 801e14c:	430a      	orrs	r2, r1
 801e14e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801e150:	687b      	ldr	r3, [r7, #4]
 801e152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e154:	f003 0304 	and.w	r3, r3, #4
 801e158:	2b00      	cmp	r3, #0
 801e15a:	d00a      	beq.n	801e172 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801e15c:	687b      	ldr	r3, [r7, #4]
 801e15e:	681b      	ldr	r3, [r3, #0]
 801e160:	685b      	ldr	r3, [r3, #4]
 801e162:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801e166:	687b      	ldr	r3, [r7, #4]
 801e168:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801e16a:	687b      	ldr	r3, [r7, #4]
 801e16c:	681b      	ldr	r3, [r3, #0]
 801e16e:	430a      	orrs	r2, r1
 801e170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801e172:	687b      	ldr	r3, [r7, #4]
 801e174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e176:	f003 0308 	and.w	r3, r3, #8
 801e17a:	2b00      	cmp	r3, #0
 801e17c:	d00a      	beq.n	801e194 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801e17e:	687b      	ldr	r3, [r7, #4]
 801e180:	681b      	ldr	r3, [r3, #0]
 801e182:	685b      	ldr	r3, [r3, #4]
 801e184:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801e188:	687b      	ldr	r3, [r7, #4]
 801e18a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801e18c:	687b      	ldr	r3, [r7, #4]
 801e18e:	681b      	ldr	r3, [r3, #0]
 801e190:	430a      	orrs	r2, r1
 801e192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801e194:	687b      	ldr	r3, [r7, #4]
 801e196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e198:	f003 0310 	and.w	r3, r3, #16
 801e19c:	2b00      	cmp	r3, #0
 801e19e:	d00a      	beq.n	801e1b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801e1a0:	687b      	ldr	r3, [r7, #4]
 801e1a2:	681b      	ldr	r3, [r3, #0]
 801e1a4:	689b      	ldr	r3, [r3, #8]
 801e1a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801e1aa:	687b      	ldr	r3, [r7, #4]
 801e1ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e1ae:	687b      	ldr	r3, [r7, #4]
 801e1b0:	681b      	ldr	r3, [r3, #0]
 801e1b2:	430a      	orrs	r2, r1
 801e1b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801e1b6:	687b      	ldr	r3, [r7, #4]
 801e1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e1ba:	f003 0320 	and.w	r3, r3, #32
 801e1be:	2b00      	cmp	r3, #0
 801e1c0:	d00a      	beq.n	801e1d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801e1c2:	687b      	ldr	r3, [r7, #4]
 801e1c4:	681b      	ldr	r3, [r3, #0]
 801e1c6:	689b      	ldr	r3, [r3, #8]
 801e1c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801e1cc:	687b      	ldr	r3, [r7, #4]
 801e1ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e1d0:	687b      	ldr	r3, [r7, #4]
 801e1d2:	681b      	ldr	r3, [r3, #0]
 801e1d4:	430a      	orrs	r2, r1
 801e1d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801e1d8:	687b      	ldr	r3, [r7, #4]
 801e1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e1dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e1e0:	2b00      	cmp	r3, #0
 801e1e2:	d01a      	beq.n	801e21a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801e1e4:	687b      	ldr	r3, [r7, #4]
 801e1e6:	681b      	ldr	r3, [r3, #0]
 801e1e8:	685b      	ldr	r3, [r3, #4]
 801e1ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801e1ee:	687b      	ldr	r3, [r7, #4]
 801e1f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801e1f2:	687b      	ldr	r3, [r7, #4]
 801e1f4:	681b      	ldr	r3, [r3, #0]
 801e1f6:	430a      	orrs	r2, r1
 801e1f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801e1fa:	687b      	ldr	r3, [r7, #4]
 801e1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e1fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801e202:	d10a      	bne.n	801e21a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801e204:	687b      	ldr	r3, [r7, #4]
 801e206:	681b      	ldr	r3, [r3, #0]
 801e208:	685b      	ldr	r3, [r3, #4]
 801e20a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801e20e:	687b      	ldr	r3, [r7, #4]
 801e210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801e212:	687b      	ldr	r3, [r7, #4]
 801e214:	681b      	ldr	r3, [r3, #0]
 801e216:	430a      	orrs	r2, r1
 801e218:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801e21a:	687b      	ldr	r3, [r7, #4]
 801e21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e21e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e222:	2b00      	cmp	r3, #0
 801e224:	d00a      	beq.n	801e23c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801e226:	687b      	ldr	r3, [r7, #4]
 801e228:	681b      	ldr	r3, [r3, #0]
 801e22a:	685b      	ldr	r3, [r3, #4]
 801e22c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801e230:	687b      	ldr	r3, [r7, #4]
 801e232:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801e234:	687b      	ldr	r3, [r7, #4]
 801e236:	681b      	ldr	r3, [r3, #0]
 801e238:	430a      	orrs	r2, r1
 801e23a:	605a      	str	r2, [r3, #4]
  }
}
 801e23c:	bf00      	nop
 801e23e:	370c      	adds	r7, #12
 801e240:	46bd      	mov	sp, r7
 801e242:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e246:	4770      	bx	lr

0801e248 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801e248:	b580      	push	{r7, lr}
 801e24a:	b086      	sub	sp, #24
 801e24c:	af02      	add	r7, sp, #8
 801e24e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e250:	687b      	ldr	r3, [r7, #4]
 801e252:	2200      	movs	r2, #0
 801e254:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801e258:	f7fd f820 	bl	801b29c <HAL_GetTick>
 801e25c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801e25e:	687b      	ldr	r3, [r7, #4]
 801e260:	681b      	ldr	r3, [r3, #0]
 801e262:	681b      	ldr	r3, [r3, #0]
 801e264:	f003 0308 	and.w	r3, r3, #8
 801e268:	2b08      	cmp	r3, #8
 801e26a:	d10e      	bne.n	801e28a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801e26c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801e270:	9300      	str	r3, [sp, #0]
 801e272:	68fb      	ldr	r3, [r7, #12]
 801e274:	2200      	movs	r2, #0
 801e276:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801e27a:	6878      	ldr	r0, [r7, #4]
 801e27c:	f000 f82d 	bl	801e2da <UART_WaitOnFlagUntilTimeout>
 801e280:	4603      	mov	r3, r0
 801e282:	2b00      	cmp	r3, #0
 801e284:	d001      	beq.n	801e28a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801e286:	2303      	movs	r3, #3
 801e288:	e023      	b.n	801e2d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801e28a:	687b      	ldr	r3, [r7, #4]
 801e28c:	681b      	ldr	r3, [r3, #0]
 801e28e:	681b      	ldr	r3, [r3, #0]
 801e290:	f003 0304 	and.w	r3, r3, #4
 801e294:	2b04      	cmp	r3, #4
 801e296:	d10e      	bne.n	801e2b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801e298:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801e29c:	9300      	str	r3, [sp, #0]
 801e29e:	68fb      	ldr	r3, [r7, #12]
 801e2a0:	2200      	movs	r2, #0
 801e2a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801e2a6:	6878      	ldr	r0, [r7, #4]
 801e2a8:	f000 f817 	bl	801e2da <UART_WaitOnFlagUntilTimeout>
 801e2ac:	4603      	mov	r3, r0
 801e2ae:	2b00      	cmp	r3, #0
 801e2b0:	d001      	beq.n	801e2b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801e2b2:	2303      	movs	r3, #3
 801e2b4:	e00d      	b.n	801e2d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801e2b6:	687b      	ldr	r3, [r7, #4]
 801e2b8:	2220      	movs	r2, #32
 801e2ba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 801e2bc:	687b      	ldr	r3, [r7, #4]
 801e2be:	2220      	movs	r2, #32
 801e2c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e2c2:	687b      	ldr	r3, [r7, #4]
 801e2c4:	2200      	movs	r2, #0
 801e2c6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 801e2c8:	687b      	ldr	r3, [r7, #4]
 801e2ca:	2200      	movs	r2, #0
 801e2cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 801e2d0:	2300      	movs	r3, #0
}
 801e2d2:	4618      	mov	r0, r3
 801e2d4:	3710      	adds	r7, #16
 801e2d6:	46bd      	mov	sp, r7
 801e2d8:	bd80      	pop	{r7, pc}

0801e2da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801e2da:	b580      	push	{r7, lr}
 801e2dc:	b084      	sub	sp, #16
 801e2de:	af00      	add	r7, sp, #0
 801e2e0:	60f8      	str	r0, [r7, #12]
 801e2e2:	60b9      	str	r1, [r7, #8]
 801e2e4:	603b      	str	r3, [r7, #0]
 801e2e6:	4613      	mov	r3, r2
 801e2e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801e2ea:	e05e      	b.n	801e3aa <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801e2ec:	69bb      	ldr	r3, [r7, #24]
 801e2ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e2f2:	d05a      	beq.n	801e3aa <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801e2f4:	f7fc ffd2 	bl	801b29c <HAL_GetTick>
 801e2f8:	4602      	mov	r2, r0
 801e2fa:	683b      	ldr	r3, [r7, #0]
 801e2fc:	1ad3      	subs	r3, r2, r3
 801e2fe:	69ba      	ldr	r2, [r7, #24]
 801e300:	429a      	cmp	r2, r3
 801e302:	d302      	bcc.n	801e30a <UART_WaitOnFlagUntilTimeout+0x30>
 801e304:	69bb      	ldr	r3, [r7, #24]
 801e306:	2b00      	cmp	r3, #0
 801e308:	d11b      	bne.n	801e342 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801e30a:	68fb      	ldr	r3, [r7, #12]
 801e30c:	681b      	ldr	r3, [r3, #0]
 801e30e:	681a      	ldr	r2, [r3, #0]
 801e310:	68fb      	ldr	r3, [r7, #12]
 801e312:	681b      	ldr	r3, [r3, #0]
 801e314:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801e318:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e31a:	68fb      	ldr	r3, [r7, #12]
 801e31c:	681b      	ldr	r3, [r3, #0]
 801e31e:	689a      	ldr	r2, [r3, #8]
 801e320:	68fb      	ldr	r3, [r7, #12]
 801e322:	681b      	ldr	r3, [r3, #0]
 801e324:	f022 0201 	bic.w	r2, r2, #1
 801e328:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 801e32a:	68fb      	ldr	r3, [r7, #12]
 801e32c:	2220      	movs	r2, #32
 801e32e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 801e330:	68fb      	ldr	r3, [r7, #12]
 801e332:	2220      	movs	r2, #32
 801e334:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 801e336:	68fb      	ldr	r3, [r7, #12]
 801e338:	2200      	movs	r2, #0
 801e33a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 801e33e:	2303      	movs	r3, #3
 801e340:	e043      	b.n	801e3ca <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801e342:	68fb      	ldr	r3, [r7, #12]
 801e344:	681b      	ldr	r3, [r3, #0]
 801e346:	681b      	ldr	r3, [r3, #0]
 801e348:	f003 0304 	and.w	r3, r3, #4
 801e34c:	2b00      	cmp	r3, #0
 801e34e:	d02c      	beq.n	801e3aa <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801e350:	68fb      	ldr	r3, [r7, #12]
 801e352:	681b      	ldr	r3, [r3, #0]
 801e354:	69db      	ldr	r3, [r3, #28]
 801e356:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801e35a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e35e:	d124      	bne.n	801e3aa <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801e360:	68fb      	ldr	r3, [r7, #12]
 801e362:	681b      	ldr	r3, [r3, #0]
 801e364:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801e368:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801e36a:	68fb      	ldr	r3, [r7, #12]
 801e36c:	681b      	ldr	r3, [r3, #0]
 801e36e:	681a      	ldr	r2, [r3, #0]
 801e370:	68fb      	ldr	r3, [r7, #12]
 801e372:	681b      	ldr	r3, [r3, #0]
 801e374:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801e378:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e37a:	68fb      	ldr	r3, [r7, #12]
 801e37c:	681b      	ldr	r3, [r3, #0]
 801e37e:	689a      	ldr	r2, [r3, #8]
 801e380:	68fb      	ldr	r3, [r7, #12]
 801e382:	681b      	ldr	r3, [r3, #0]
 801e384:	f022 0201 	bic.w	r2, r2, #1
 801e388:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 801e38a:	68fb      	ldr	r3, [r7, #12]
 801e38c:	2220      	movs	r2, #32
 801e38e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 801e390:	68fb      	ldr	r3, [r7, #12]
 801e392:	2220      	movs	r2, #32
 801e394:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801e396:	68fb      	ldr	r3, [r7, #12]
 801e398:	2220      	movs	r2, #32
 801e39a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801e39e:	68fb      	ldr	r3, [r7, #12]
 801e3a0:	2200      	movs	r2, #0
 801e3a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 801e3a6:	2303      	movs	r3, #3
 801e3a8:	e00f      	b.n	801e3ca <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801e3aa:	68fb      	ldr	r3, [r7, #12]
 801e3ac:	681b      	ldr	r3, [r3, #0]
 801e3ae:	69da      	ldr	r2, [r3, #28]
 801e3b0:	68bb      	ldr	r3, [r7, #8]
 801e3b2:	4013      	ands	r3, r2
 801e3b4:	68ba      	ldr	r2, [r7, #8]
 801e3b6:	429a      	cmp	r2, r3
 801e3b8:	bf0c      	ite	eq
 801e3ba:	2301      	moveq	r3, #1
 801e3bc:	2300      	movne	r3, #0
 801e3be:	b2db      	uxtb	r3, r3
 801e3c0:	461a      	mov	r2, r3
 801e3c2:	79fb      	ldrb	r3, [r7, #7]
 801e3c4:	429a      	cmp	r2, r3
 801e3c6:	d091      	beq.n	801e2ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801e3c8:	2300      	movs	r3, #0
}
 801e3ca:	4618      	mov	r0, r3
 801e3cc:	3710      	adds	r7, #16
 801e3ce:	46bd      	mov	sp, r7
 801e3d0:	bd80      	pop	{r7, pc}
	...

0801e3d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801e3d4:	b480      	push	{r7}
 801e3d6:	b085      	sub	sp, #20
 801e3d8:	af00      	add	r7, sp, #0
 801e3da:	60f8      	str	r0, [r7, #12]
 801e3dc:	60b9      	str	r1, [r7, #8]
 801e3de:	4613      	mov	r3, r2
 801e3e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801e3e2:	68fb      	ldr	r3, [r7, #12]
 801e3e4:	68ba      	ldr	r2, [r7, #8]
 801e3e6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 801e3e8:	68fb      	ldr	r3, [r7, #12]
 801e3ea:	88fa      	ldrh	r2, [r7, #6]
 801e3ec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 801e3f0:	68fb      	ldr	r3, [r7, #12]
 801e3f2:	88fa      	ldrh	r2, [r7, #6]
 801e3f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 801e3f8:	68fb      	ldr	r3, [r7, #12]
 801e3fa:	2200      	movs	r2, #0
 801e3fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801e3fe:	68fb      	ldr	r3, [r7, #12]
 801e400:	689b      	ldr	r3, [r3, #8]
 801e402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801e406:	d10e      	bne.n	801e426 <UART_Start_Receive_IT+0x52>
 801e408:	68fb      	ldr	r3, [r7, #12]
 801e40a:	691b      	ldr	r3, [r3, #16]
 801e40c:	2b00      	cmp	r3, #0
 801e40e:	d105      	bne.n	801e41c <UART_Start_Receive_IT+0x48>
 801e410:	68fb      	ldr	r3, [r7, #12]
 801e412:	f240 12ff 	movw	r2, #511	; 0x1ff
 801e416:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801e41a:	e02d      	b.n	801e478 <UART_Start_Receive_IT+0xa4>
 801e41c:	68fb      	ldr	r3, [r7, #12]
 801e41e:	22ff      	movs	r2, #255	; 0xff
 801e420:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801e424:	e028      	b.n	801e478 <UART_Start_Receive_IT+0xa4>
 801e426:	68fb      	ldr	r3, [r7, #12]
 801e428:	689b      	ldr	r3, [r3, #8]
 801e42a:	2b00      	cmp	r3, #0
 801e42c:	d10d      	bne.n	801e44a <UART_Start_Receive_IT+0x76>
 801e42e:	68fb      	ldr	r3, [r7, #12]
 801e430:	691b      	ldr	r3, [r3, #16]
 801e432:	2b00      	cmp	r3, #0
 801e434:	d104      	bne.n	801e440 <UART_Start_Receive_IT+0x6c>
 801e436:	68fb      	ldr	r3, [r7, #12]
 801e438:	22ff      	movs	r2, #255	; 0xff
 801e43a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801e43e:	e01b      	b.n	801e478 <UART_Start_Receive_IT+0xa4>
 801e440:	68fb      	ldr	r3, [r7, #12]
 801e442:	227f      	movs	r2, #127	; 0x7f
 801e444:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801e448:	e016      	b.n	801e478 <UART_Start_Receive_IT+0xa4>
 801e44a:	68fb      	ldr	r3, [r7, #12]
 801e44c:	689b      	ldr	r3, [r3, #8]
 801e44e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801e452:	d10d      	bne.n	801e470 <UART_Start_Receive_IT+0x9c>
 801e454:	68fb      	ldr	r3, [r7, #12]
 801e456:	691b      	ldr	r3, [r3, #16]
 801e458:	2b00      	cmp	r3, #0
 801e45a:	d104      	bne.n	801e466 <UART_Start_Receive_IT+0x92>
 801e45c:	68fb      	ldr	r3, [r7, #12]
 801e45e:	227f      	movs	r2, #127	; 0x7f
 801e460:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801e464:	e008      	b.n	801e478 <UART_Start_Receive_IT+0xa4>
 801e466:	68fb      	ldr	r3, [r7, #12]
 801e468:	223f      	movs	r2, #63	; 0x3f
 801e46a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801e46e:	e003      	b.n	801e478 <UART_Start_Receive_IT+0xa4>
 801e470:	68fb      	ldr	r3, [r7, #12]
 801e472:	2200      	movs	r2, #0
 801e474:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e478:	68fb      	ldr	r3, [r7, #12]
 801e47a:	2200      	movs	r2, #0
 801e47c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801e480:	68fb      	ldr	r3, [r7, #12]
 801e482:	2222      	movs	r2, #34	; 0x22
 801e484:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e486:	68fb      	ldr	r3, [r7, #12]
 801e488:	681b      	ldr	r3, [r3, #0]
 801e48a:	689a      	ldr	r2, [r3, #8]
 801e48c:	68fb      	ldr	r3, [r7, #12]
 801e48e:	681b      	ldr	r3, [r3, #0]
 801e490:	f042 0201 	orr.w	r2, r2, #1
 801e494:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801e496:	68fb      	ldr	r3, [r7, #12]
 801e498:	689b      	ldr	r3, [r3, #8]
 801e49a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801e49e:	d107      	bne.n	801e4b0 <UART_Start_Receive_IT+0xdc>
 801e4a0:	68fb      	ldr	r3, [r7, #12]
 801e4a2:	691b      	ldr	r3, [r3, #16]
 801e4a4:	2b00      	cmp	r3, #0
 801e4a6:	d103      	bne.n	801e4b0 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801e4a8:	68fb      	ldr	r3, [r7, #12]
 801e4aa:	4a0c      	ldr	r2, [pc, #48]	; (801e4dc <UART_Start_Receive_IT+0x108>)
 801e4ac:	665a      	str	r2, [r3, #100]	; 0x64
 801e4ae:	e002      	b.n	801e4b6 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801e4b0:	68fb      	ldr	r3, [r7, #12]
 801e4b2:	4a0b      	ldr	r2, [pc, #44]	; (801e4e0 <UART_Start_Receive_IT+0x10c>)
 801e4b4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 801e4b6:	68fb      	ldr	r3, [r7, #12]
 801e4b8:	2200      	movs	r2, #0
 801e4ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801e4be:	68fb      	ldr	r3, [r7, #12]
 801e4c0:	681b      	ldr	r3, [r3, #0]
 801e4c2:	681a      	ldr	r2, [r3, #0]
 801e4c4:	68fb      	ldr	r3, [r7, #12]
 801e4c6:	681b      	ldr	r3, [r3, #0]
 801e4c8:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 801e4cc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 801e4ce:	2300      	movs	r3, #0
}
 801e4d0:	4618      	mov	r0, r3
 801e4d2:	3714      	adds	r7, #20
 801e4d4:	46bd      	mov	sp, r7
 801e4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4da:	4770      	bx	lr
 801e4dc:	0801e679 	.word	0x0801e679
 801e4e0:	0801e5a1 	.word	0x0801e5a1

0801e4e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801e4e4:	b480      	push	{r7}
 801e4e6:	b083      	sub	sp, #12
 801e4e8:	af00      	add	r7, sp, #0
 801e4ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801e4ec:	687b      	ldr	r3, [r7, #4]
 801e4ee:	681b      	ldr	r3, [r3, #0]
 801e4f0:	681a      	ldr	r2, [r3, #0]
 801e4f2:	687b      	ldr	r3, [r7, #4]
 801e4f4:	681b      	ldr	r3, [r3, #0]
 801e4f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801e4fa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e4fc:	687b      	ldr	r3, [r7, #4]
 801e4fe:	681b      	ldr	r3, [r3, #0]
 801e500:	689a      	ldr	r2, [r3, #8]
 801e502:	687b      	ldr	r3, [r7, #4]
 801e504:	681b      	ldr	r3, [r3, #0]
 801e506:	f022 0201 	bic.w	r2, r2, #1
 801e50a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e50c:	687b      	ldr	r3, [r7, #4]
 801e50e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e510:	2b01      	cmp	r3, #1
 801e512:	d107      	bne.n	801e524 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801e514:	687b      	ldr	r3, [r7, #4]
 801e516:	681b      	ldr	r3, [r3, #0]
 801e518:	681a      	ldr	r2, [r3, #0]
 801e51a:	687b      	ldr	r3, [r7, #4]
 801e51c:	681b      	ldr	r3, [r3, #0]
 801e51e:	f022 0210 	bic.w	r2, r2, #16
 801e522:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801e524:	687b      	ldr	r3, [r7, #4]
 801e526:	2220      	movs	r2, #32
 801e528:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e52a:	687b      	ldr	r3, [r7, #4]
 801e52c:	2200      	movs	r2, #0
 801e52e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801e530:	687b      	ldr	r3, [r7, #4]
 801e532:	2200      	movs	r2, #0
 801e534:	665a      	str	r2, [r3, #100]	; 0x64
}
 801e536:	bf00      	nop
 801e538:	370c      	adds	r7, #12
 801e53a:	46bd      	mov	sp, r7
 801e53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e540:	4770      	bx	lr

0801e542 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801e542:	b580      	push	{r7, lr}
 801e544:	b084      	sub	sp, #16
 801e546:	af00      	add	r7, sp, #0
 801e548:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801e54a:	687b      	ldr	r3, [r7, #4]
 801e54c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e54e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801e550:	68fb      	ldr	r3, [r7, #12]
 801e552:	2200      	movs	r2, #0
 801e554:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 801e558:	68fb      	ldr	r3, [r7, #12]
 801e55a:	2200      	movs	r2, #0
 801e55c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801e560:	68f8      	ldr	r0, [r7, #12]
 801e562:	f7ff fb2f 	bl	801dbc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801e566:	bf00      	nop
 801e568:	3710      	adds	r7, #16
 801e56a:	46bd      	mov	sp, r7
 801e56c:	bd80      	pop	{r7, pc}

0801e56e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801e56e:	b580      	push	{r7, lr}
 801e570:	b082      	sub	sp, #8
 801e572:	af00      	add	r7, sp, #0
 801e574:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801e576:	687b      	ldr	r3, [r7, #4]
 801e578:	681b      	ldr	r3, [r3, #0]
 801e57a:	681a      	ldr	r2, [r3, #0]
 801e57c:	687b      	ldr	r3, [r7, #4]
 801e57e:	681b      	ldr	r3, [r3, #0]
 801e580:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e584:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801e586:	687b      	ldr	r3, [r7, #4]
 801e588:	2220      	movs	r2, #32
 801e58a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801e58c:	687b      	ldr	r3, [r7, #4]
 801e58e:	2200      	movs	r2, #0
 801e590:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801e592:	6878      	ldr	r0, [r7, #4]
 801e594:	f7ff fb0c 	bl	801dbb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801e598:	bf00      	nop
 801e59a:	3708      	adds	r7, #8
 801e59c:	46bd      	mov	sp, r7
 801e59e:	bd80      	pop	{r7, pc}

0801e5a0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801e5a0:	b580      	push	{r7, lr}
 801e5a2:	b084      	sub	sp, #16
 801e5a4:	af00      	add	r7, sp, #0
 801e5a6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801e5a8:	687b      	ldr	r3, [r7, #4]
 801e5aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801e5ae:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801e5b0:	687b      	ldr	r3, [r7, #4]
 801e5b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801e5b4:	2b22      	cmp	r3, #34	; 0x22
 801e5b6:	d151      	bne.n	801e65c <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801e5b8:	687b      	ldr	r3, [r7, #4]
 801e5ba:	681b      	ldr	r3, [r3, #0]
 801e5bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801e5be:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801e5c0:	89bb      	ldrh	r3, [r7, #12]
 801e5c2:	b2d9      	uxtb	r1, r3
 801e5c4:	89fb      	ldrh	r3, [r7, #14]
 801e5c6:	b2da      	uxtb	r2, r3
 801e5c8:	687b      	ldr	r3, [r7, #4]
 801e5ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e5cc:	400a      	ands	r2, r1
 801e5ce:	b2d2      	uxtb	r2, r2
 801e5d0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801e5d2:	687b      	ldr	r3, [r7, #4]
 801e5d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e5d6:	1c5a      	adds	r2, r3, #1
 801e5d8:	687b      	ldr	r3, [r7, #4]
 801e5da:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801e5dc:	687b      	ldr	r3, [r7, #4]
 801e5de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801e5e2:	b29b      	uxth	r3, r3
 801e5e4:	3b01      	subs	r3, #1
 801e5e6:	b29a      	uxth	r2, r3
 801e5e8:	687b      	ldr	r3, [r7, #4]
 801e5ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801e5ee:	687b      	ldr	r3, [r7, #4]
 801e5f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801e5f4:	b29b      	uxth	r3, r3
 801e5f6:	2b00      	cmp	r3, #0
 801e5f8:	d13a      	bne.n	801e670 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801e5fa:	687b      	ldr	r3, [r7, #4]
 801e5fc:	681b      	ldr	r3, [r3, #0]
 801e5fe:	681a      	ldr	r2, [r3, #0]
 801e600:	687b      	ldr	r3, [r7, #4]
 801e602:	681b      	ldr	r3, [r3, #0]
 801e604:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801e608:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e60a:	687b      	ldr	r3, [r7, #4]
 801e60c:	681b      	ldr	r3, [r3, #0]
 801e60e:	689a      	ldr	r2, [r3, #8]
 801e610:	687b      	ldr	r3, [r7, #4]
 801e612:	681b      	ldr	r3, [r3, #0]
 801e614:	f022 0201 	bic.w	r2, r2, #1
 801e618:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801e61a:	687b      	ldr	r3, [r7, #4]
 801e61c:	2220      	movs	r2, #32
 801e61e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801e620:	687b      	ldr	r3, [r7, #4]
 801e622:	2200      	movs	r2, #0
 801e624:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e626:	687b      	ldr	r3, [r7, #4]
 801e628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e62a:	2b01      	cmp	r3, #1
 801e62c:	d10f      	bne.n	801e64e <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801e62e:	687b      	ldr	r3, [r7, #4]
 801e630:	681b      	ldr	r3, [r3, #0]
 801e632:	681a      	ldr	r2, [r3, #0]
 801e634:	687b      	ldr	r3, [r7, #4]
 801e636:	681b      	ldr	r3, [r3, #0]
 801e638:	f022 0210 	bic.w	r2, r2, #16
 801e63c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801e63e:	687b      	ldr	r3, [r7, #4]
 801e640:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801e644:	4619      	mov	r1, r3
 801e646:	6878      	ldr	r0, [r7, #4]
 801e648:	f7ff fac6 	bl	801dbd8 <HAL_UARTEx_RxEventCallback>
 801e64c:	e002      	b.n	801e654 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801e64e:	6878      	ldr	r0, [r7, #4]
 801e650:	f7fb fef8 	bl	801a444 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e654:	687b      	ldr	r3, [r7, #4]
 801e656:	2200      	movs	r2, #0
 801e658:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801e65a:	e009      	b.n	801e670 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801e65c:	687b      	ldr	r3, [r7, #4]
 801e65e:	681b      	ldr	r3, [r3, #0]
 801e660:	8b1b      	ldrh	r3, [r3, #24]
 801e662:	b29a      	uxth	r2, r3
 801e664:	687b      	ldr	r3, [r7, #4]
 801e666:	681b      	ldr	r3, [r3, #0]
 801e668:	f042 0208 	orr.w	r2, r2, #8
 801e66c:	b292      	uxth	r2, r2
 801e66e:	831a      	strh	r2, [r3, #24]
}
 801e670:	bf00      	nop
 801e672:	3710      	adds	r7, #16
 801e674:	46bd      	mov	sp, r7
 801e676:	bd80      	pop	{r7, pc}

0801e678 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801e678:	b580      	push	{r7, lr}
 801e67a:	b084      	sub	sp, #16
 801e67c:	af00      	add	r7, sp, #0
 801e67e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801e680:	687b      	ldr	r3, [r7, #4]
 801e682:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801e686:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801e688:	687b      	ldr	r3, [r7, #4]
 801e68a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801e68c:	2b22      	cmp	r3, #34	; 0x22
 801e68e:	d151      	bne.n	801e734 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801e690:	687b      	ldr	r3, [r7, #4]
 801e692:	681b      	ldr	r3, [r3, #0]
 801e694:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801e696:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801e698:	687b      	ldr	r3, [r7, #4]
 801e69a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e69c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 801e69e:	89ba      	ldrh	r2, [r7, #12]
 801e6a0:	89fb      	ldrh	r3, [r7, #14]
 801e6a2:	4013      	ands	r3, r2
 801e6a4:	b29a      	uxth	r2, r3
 801e6a6:	68bb      	ldr	r3, [r7, #8]
 801e6a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801e6aa:	687b      	ldr	r3, [r7, #4]
 801e6ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e6ae:	1c9a      	adds	r2, r3, #2
 801e6b0:	687b      	ldr	r3, [r7, #4]
 801e6b2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801e6b4:	687b      	ldr	r3, [r7, #4]
 801e6b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801e6ba:	b29b      	uxth	r3, r3
 801e6bc:	3b01      	subs	r3, #1
 801e6be:	b29a      	uxth	r2, r3
 801e6c0:	687b      	ldr	r3, [r7, #4]
 801e6c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801e6c6:	687b      	ldr	r3, [r7, #4]
 801e6c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801e6cc:	b29b      	uxth	r3, r3
 801e6ce:	2b00      	cmp	r3, #0
 801e6d0:	d13a      	bne.n	801e748 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801e6d2:	687b      	ldr	r3, [r7, #4]
 801e6d4:	681b      	ldr	r3, [r3, #0]
 801e6d6:	681a      	ldr	r2, [r3, #0]
 801e6d8:	687b      	ldr	r3, [r7, #4]
 801e6da:	681b      	ldr	r3, [r3, #0]
 801e6dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801e6e0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e6e2:	687b      	ldr	r3, [r7, #4]
 801e6e4:	681b      	ldr	r3, [r3, #0]
 801e6e6:	689a      	ldr	r2, [r3, #8]
 801e6e8:	687b      	ldr	r3, [r7, #4]
 801e6ea:	681b      	ldr	r3, [r3, #0]
 801e6ec:	f022 0201 	bic.w	r2, r2, #1
 801e6f0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801e6f2:	687b      	ldr	r3, [r7, #4]
 801e6f4:	2220      	movs	r2, #32
 801e6f6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801e6f8:	687b      	ldr	r3, [r7, #4]
 801e6fa:	2200      	movs	r2, #0
 801e6fc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e6fe:	687b      	ldr	r3, [r7, #4]
 801e700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e702:	2b01      	cmp	r3, #1
 801e704:	d10f      	bne.n	801e726 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801e706:	687b      	ldr	r3, [r7, #4]
 801e708:	681b      	ldr	r3, [r3, #0]
 801e70a:	681a      	ldr	r2, [r3, #0]
 801e70c:	687b      	ldr	r3, [r7, #4]
 801e70e:	681b      	ldr	r3, [r3, #0]
 801e710:	f022 0210 	bic.w	r2, r2, #16
 801e714:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801e716:	687b      	ldr	r3, [r7, #4]
 801e718:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801e71c:	4619      	mov	r1, r3
 801e71e:	6878      	ldr	r0, [r7, #4]
 801e720:	f7ff fa5a 	bl	801dbd8 <HAL_UARTEx_RxEventCallback>
 801e724:	e002      	b.n	801e72c <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801e726:	6878      	ldr	r0, [r7, #4]
 801e728:	f7fb fe8c 	bl	801a444 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e72c:	687b      	ldr	r3, [r7, #4]
 801e72e:	2200      	movs	r2, #0
 801e730:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801e732:	e009      	b.n	801e748 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801e734:	687b      	ldr	r3, [r7, #4]
 801e736:	681b      	ldr	r3, [r3, #0]
 801e738:	8b1b      	ldrh	r3, [r3, #24]
 801e73a:	b29a      	uxth	r2, r3
 801e73c:	687b      	ldr	r3, [r7, #4]
 801e73e:	681b      	ldr	r3, [r3, #0]
 801e740:	f042 0208 	orr.w	r2, r2, #8
 801e744:	b292      	uxth	r2, r2
 801e746:	831a      	strh	r2, [r3, #24]
}
 801e748:	bf00      	nop
 801e74a:	3710      	adds	r7, #16
 801e74c:	46bd      	mov	sp, r7
 801e74e:	bd80      	pop	{r7, pc}

0801e750 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801e750:	b480      	push	{r7}
 801e752:	b083      	sub	sp, #12
 801e754:	af00      	add	r7, sp, #0
 801e756:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801e758:	bf00      	nop
 801e75a:	370c      	adds	r7, #12
 801e75c:	46bd      	mov	sp, r7
 801e75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e762:	4770      	bx	lr

0801e764 <_Z11Flash_erasem>:

#include <hw.h>


/*_________________________________________________________________________________________________________________________________*/
void Flash_erase( uint32_t _page ) {
 801e764:	b580      	push	{r7, lr}
 801e766:	b086      	sub	sp, #24
 801e768:	af00      	add	r7, sp, #0
 801e76a:	6078      	str	r0, [r7, #4]
	FLASH_EraseInitTypeDef EraseStruct ;
	static uint32_t PageEraseERROR_Addr  ;
	HAL_FLASH_Unlock() ;
 801e76c:	f7fc ffdc 	bl	801b728 <HAL_FLASH_Unlock>

	if( (int)_page <= 255 )
 801e770:	687b      	ldr	r3, [r7, #4]
 801e772:	2bff      	cmp	r3, #255	; 0xff
 801e774:	dc02      	bgt.n	801e77c <_Z11Flash_erasem+0x18>
		EraseStruct.Banks = FLASH_BANK_1 ;
 801e776:	2301      	movs	r3, #1
 801e778:	60fb      	str	r3, [r7, #12]
 801e77a:	e001      	b.n	801e780 <_Z11Flash_erasem+0x1c>
	else
		EraseStruct.Banks = FLASH_BANK_2 ;
 801e77c:	2302      	movs	r3, #2
 801e77e:	60fb      	str	r3, [r7, #12]
	EraseStruct.NbPages = 1 ;
 801e780:	2301      	movs	r3, #1
 801e782:	617b      	str	r3, [r7, #20]
	EraseStruct.TypeErase = FLASH_TYPEERASE_PAGES ;
 801e784:	2300      	movs	r3, #0
 801e786:	60bb      	str	r3, [r7, #8]
	EraseStruct.Page = _page ;
 801e788:	687b      	ldr	r3, [r7, #4]
 801e78a:	613b      	str	r3, [r7, #16]

	if( HAL_FLASHEx_Erase( &EraseStruct, &PageEraseERROR_Addr ) != HAL_OK )
 801e78c:	f107 0308 	add.w	r3, r7, #8
 801e790:	4909      	ldr	r1, [pc, #36]	; (801e7b8 <_Z11Flash_erasem+0x54>)
 801e792:	4618      	mov	r0, r3
 801e794:	f7fd f8b8 	bl	801b908 <HAL_FLASHEx_Erase>
 801e798:	4603      	mov	r3, r0
 801e79a:	2b00      	cmp	r3, #0
 801e79c:	bf14      	ite	ne
 801e79e:	2301      	movne	r3, #1
 801e7a0:	2300      	moveq	r3, #0
 801e7a2:	b2db      	uxtb	r3, r3
 801e7a4:	2b00      	cmp	r3, #0
 801e7a6:	d002      	beq.n	801e7ae <_Z11Flash_erasem+0x4a>
		return (void)HAL_FLASH_GetError() ;
 801e7a8:	f7fc fff0 	bl	801b78c <HAL_FLASH_GetError>
 801e7ac:	e001      	b.n	801e7b2 <_Z11Flash_erasem+0x4e>

	HAL_FLASH_Lock() ;
 801e7ae:	f7fc ffdd 	bl	801b76c <HAL_FLASH_Lock>
}
 801e7b2:	3718      	adds	r7, #24
 801e7b4:	46bd      	mov	sp, r7
 801e7b6:	bd80      	pop	{r7, pc}
 801e7b8:	200002c8 	.word	0x200002c8

0801e7bc <_Z11Flash_writemPKhi>:



/*_________________________________________________________________________________________________________________________________*/
void  Flash_write( uint32_t _address, const uint8_t* _data, int _dataLength ) {
 801e7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7c0:	b097      	sub	sp, #92	; 0x5c
 801e7c2:	af00      	add	r7, sp, #0
 801e7c4:	6378      	str	r0, [r7, #52]	; 0x34
 801e7c6:	6339      	str	r1, [r7, #48]	; 0x30
 801e7c8:	62fa      	str	r2, [r7, #44]	; 0x2c
		HAL_FLASH_Program( FLASH_TYPEPROGRAM_DOUBLEWORD, _address + i, data ) ;
		data = 0x0000000000000000 ;
	}


	HAL_FLASH_Lock() ;
 801e7ca:	466b      	mov	r3, sp
 801e7cc:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_FLASH_Unlock() ;
 801e7ce:	f7fc ffab 	bl	801b728 <HAL_FLASH_Unlock>
	unsigned int dwLen = 0 ;
 801e7d2:	2300      	movs	r3, #0
 801e7d4:	647b      	str	r3, [r7, #68]	; 0x44
	if( ( _dataLength % 8 == 0 ) && ( _dataLength >= 8 ) ) dwLen = _dataLength ;
 801e7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e7d8:	f003 0307 	and.w	r3, r3, #7
 801e7dc:	2b00      	cmp	r3, #0
 801e7de:	d105      	bne.n	801e7ec <_Z11Flash_writemPKhi+0x30>
 801e7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e7e2:	2b07      	cmp	r3, #7
 801e7e4:	dd02      	ble.n	801e7ec <_Z11Flash_writemPKhi+0x30>
 801e7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e7e8:	647b      	str	r3, [r7, #68]	; 0x44
 801e7ea:	e02a      	b.n	801e842 <_Z11Flash_writemPKhi+0x86>
	else if( ( _dataLength % 8 > 0 ) && ( _dataLength > 8 ) ) dwLen = _dataLength + ( 8 - ( _dataLength % 8 ) ) ;
 801e7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e7ee:	4259      	negs	r1, r3
 801e7f0:	f003 0207 	and.w	r2, r3, #7
 801e7f4:	f001 0307 	and.w	r3, r1, #7
 801e7f8:	bf58      	it	pl
 801e7fa:	425a      	negpl	r2, r3
 801e7fc:	2a00      	cmp	r2, #0
 801e7fe:	dd10      	ble.n	801e822 <_Z11Flash_writemPKhi+0x66>
 801e800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e802:	2b08      	cmp	r3, #8
 801e804:	dd0d      	ble.n	801e822 <_Z11Flash_writemPKhi+0x66>
 801e806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e808:	4259      	negs	r1, r3
 801e80a:	f003 0207 	and.w	r2, r3, #7
 801e80e:	f001 0307 	and.w	r3, r1, #7
 801e812:	bf58      	it	pl
 801e814:	425a      	negpl	r2, r3
 801e816:	f1c2 0208 	rsb	r2, r2, #8
 801e81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e81c:	4413      	add	r3, r2
 801e81e:	647b      	str	r3, [r7, #68]	; 0x44
 801e820:	e00f      	b.n	801e842 <_Z11Flash_writemPKhi+0x86>
	else if( _dataLength < 8 ) dwLen = _dataLength + ( 8 - ( _dataLength % 8 ) ) ;
 801e822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e824:	2b07      	cmp	r3, #7
 801e826:	dc0c      	bgt.n	801e842 <_Z11Flash_writemPKhi+0x86>
 801e828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e82a:	4259      	negs	r1, r3
 801e82c:	f003 0207 	and.w	r2, r3, #7
 801e830:	f001 0307 	and.w	r3, r1, #7
 801e834:	bf58      	it	pl
 801e836:	425a      	negpl	r2, r3
 801e838:	f1c2 0208 	rsb	r2, r2, #8
 801e83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e83e:	4413      	add	r3, r2
 801e840:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t dataArr[ dwLen + 1 ] ;
 801e842:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801e844:	643c      	str	r4, [r7, #64]	; 0x40
 801e846:	4623      	mov	r3, r4
 801e848:	3301      	adds	r3, #1
 801e84a:	461a      	mov	r2, r3
 801e84c:	f04f 0300 	mov.w	r3, #0
 801e850:	f04f 0000 	mov.w	r0, #0
 801e854:	f04f 0100 	mov.w	r1, #0
 801e858:	00d9      	lsls	r1, r3, #3
 801e85a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801e85e:	00d0      	lsls	r0, r2, #3
 801e860:	4623      	mov	r3, r4
 801e862:	3301      	adds	r3, #1
 801e864:	461a      	mov	r2, r3
 801e866:	f04f 0300 	mov.w	r3, #0
 801e86a:	f04f 0000 	mov.w	r0, #0
 801e86e:	f04f 0100 	mov.w	r1, #0
 801e872:	00d9      	lsls	r1, r3, #3
 801e874:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801e878:	00d0      	lsls	r0, r2, #3
 801e87a:	4623      	mov	r3, r4
 801e87c:	3301      	adds	r3, #1
 801e87e:	3307      	adds	r3, #7
 801e880:	08db      	lsrs	r3, r3, #3
 801e882:	00db      	lsls	r3, r3, #3
 801e884:	ebad 0d03 	sub.w	sp, sp, r3
 801e888:	466b      	mov	r3, sp
 801e88a:	3300      	adds	r3, #0
 801e88c:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset( (char*)dataArr, 0xFF, _dataLength + 1 ) ;
 801e88e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801e890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e892:	3301      	adds	r3, #1
 801e894:	461a      	mov	r2, r3
 801e896:	21ff      	movs	r1, #255	; 0xff
 801e898:	f000 fd76 	bl	801f388 <memset>
	memcpy( (char*)dataArr, (char*)_data, _dataLength ) ;
 801e89c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801e89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e8a0:	461a      	mov	r2, r3
 801e8a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801e8a4:	f000 fd48 	bl	801f338 <memcpy>
	uint64_t data = 0x0000000000000000 ;
 801e8a8:	f04f 0200 	mov.w	r2, #0
 801e8ac:	f04f 0300 	mov.w	r3, #0
 801e8b0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	for( unsigned int i = 0; i < dwLen; i += 8 ) {
 801e8b4:	2300      	movs	r3, #0
 801e8b6:	657b      	str	r3, [r7, #84]	; 0x54
 801e8b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801e8ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e8bc:	429a      	cmp	r2, r3
 801e8be:	f080 80ed 	bcs.w	801ea9c <_Z11Flash_writemPKhi+0x2e0>
		data |= dataArr[ i + 7 ] ; data <<= 8 ;
 801e8c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e8c4:	1dda      	adds	r2, r3, #7
 801e8c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e8c8:	5c9b      	ldrb	r3, [r3, r2]
 801e8ca:	b2d8      	uxtb	r0, r3
 801e8cc:	f04f 0100 	mov.w	r1, #0
 801e8d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801e8d4:	ea42 0400 	orr.w	r4, r2, r0
 801e8d8:	623c      	str	r4, [r7, #32]
 801e8da:	430b      	orrs	r3, r1
 801e8dc:	627b      	str	r3, [r7, #36]	; 0x24
 801e8de:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801e8e2:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 801e8e6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801e8ea:	f04f 0000 	mov.w	r0, #0
 801e8ee:	f04f 0100 	mov.w	r1, #0
 801e8f2:	0219      	lsls	r1, r3, #8
 801e8f4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 801e8f8:	0210      	lsls	r0, r2, #8
 801e8fa:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
		data |= dataArr[ i + 6 ] ; data <<= 8 ;
 801e8fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e900:	1d9a      	adds	r2, r3, #6
 801e902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e904:	5c9b      	ldrb	r3, [r3, r2]
 801e906:	b2d8      	uxtb	r0, r3
 801e908:	f04f 0100 	mov.w	r1, #0
 801e90c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801e910:	ea42 0400 	orr.w	r4, r2, r0
 801e914:	61bc      	str	r4, [r7, #24]
 801e916:	430b      	orrs	r3, r1
 801e918:	61fb      	str	r3, [r7, #28]
 801e91a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801e91e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 801e922:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801e926:	f04f 0000 	mov.w	r0, #0
 801e92a:	f04f 0100 	mov.w	r1, #0
 801e92e:	0219      	lsls	r1, r3, #8
 801e930:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 801e934:	0210      	lsls	r0, r2, #8
 801e936:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
		data |= dataArr[ i + 5 ] ; data <<= 8 ;
 801e93a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e93c:	1d5a      	adds	r2, r3, #5
 801e93e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e940:	5c9b      	ldrb	r3, [r3, r2]
 801e942:	b2d8      	uxtb	r0, r3
 801e944:	f04f 0100 	mov.w	r1, #0
 801e948:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801e94c:	ea42 0400 	orr.w	r4, r2, r0
 801e950:	613c      	str	r4, [r7, #16]
 801e952:	430b      	orrs	r3, r1
 801e954:	617b      	str	r3, [r7, #20]
 801e956:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801e95a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 801e95e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801e962:	f04f 0000 	mov.w	r0, #0
 801e966:	f04f 0100 	mov.w	r1, #0
 801e96a:	0219      	lsls	r1, r3, #8
 801e96c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 801e970:	0210      	lsls	r0, r2, #8
 801e972:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
		data |= dataArr[ i + 4 ] ; data <<= 8 ;
 801e976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e978:	1d1a      	adds	r2, r3, #4
 801e97a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e97c:	5c9b      	ldrb	r3, [r3, r2]
 801e97e:	b2d8      	uxtb	r0, r3
 801e980:	f04f 0100 	mov.w	r1, #0
 801e984:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801e988:	ea42 0400 	orr.w	r4, r2, r0
 801e98c:	60bc      	str	r4, [r7, #8]
 801e98e:	430b      	orrs	r3, r1
 801e990:	60fb      	str	r3, [r7, #12]
 801e992:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801e996:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 801e99a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801e99e:	f04f 0000 	mov.w	r0, #0
 801e9a2:	f04f 0100 	mov.w	r1, #0
 801e9a6:	0219      	lsls	r1, r3, #8
 801e9a8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 801e9ac:	0210      	lsls	r0, r2, #8
 801e9ae:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
		data |= dataArr[ i + 3 ] ; data <<= 8 ;
 801e9b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e9b4:	1cda      	adds	r2, r3, #3
 801e9b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e9b8:	5c9b      	ldrb	r3, [r3, r2]
 801e9ba:	b2d8      	uxtb	r0, r3
 801e9bc:	f04f 0100 	mov.w	r1, #0
 801e9c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801e9c4:	ea42 0400 	orr.w	r4, r2, r0
 801e9c8:	603c      	str	r4, [r7, #0]
 801e9ca:	430b      	orrs	r3, r1
 801e9cc:	607b      	str	r3, [r7, #4]
 801e9ce:	e9d7 3400 	ldrd	r3, r4, [r7]
 801e9d2:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 801e9d6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801e9da:	f04f 0000 	mov.w	r0, #0
 801e9de:	f04f 0100 	mov.w	r1, #0
 801e9e2:	0219      	lsls	r1, r3, #8
 801e9e4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 801e9e8:	0210      	lsls	r0, r2, #8
 801e9ea:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
		data |= dataArr[ i + 2 ] ; data <<= 8 ;
 801e9ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e9f0:	1c9a      	adds	r2, r3, #2
 801e9f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e9f4:	5c9b      	ldrb	r3, [r3, r2]
 801e9f6:	b2d8      	uxtb	r0, r3
 801e9f8:	f04f 0100 	mov.w	r1, #0
 801e9fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801ea00:	ea42 0500 	orr.w	r5, r2, r0
 801ea04:	ea43 0601 	orr.w	r6, r3, r1
 801ea08:	e9c7 5612 	strd	r5, r6, [r7, #72]	; 0x48
 801ea0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801ea10:	f04f 0000 	mov.w	r0, #0
 801ea14:	f04f 0100 	mov.w	r1, #0
 801ea18:	0219      	lsls	r1, r3, #8
 801ea1a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 801ea1e:	0210      	lsls	r0, r2, #8
 801ea20:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
		data |= dataArr[ i + 1 ] ; data <<= 8 ;
 801ea24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ea26:	1c5a      	adds	r2, r3, #1
 801ea28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ea2a:	5c9b      	ldrb	r3, [r3, r2]
 801ea2c:	b2d8      	uxtb	r0, r3
 801ea2e:	f04f 0100 	mov.w	r1, #0
 801ea32:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801ea36:	ea42 0a00 	orr.w	sl, r2, r0
 801ea3a:	ea43 0b01 	orr.w	fp, r3, r1
 801ea3e:	e9c7 ab12 	strd	sl, fp, [r7, #72]	; 0x48
 801ea42:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801ea46:	f04f 0000 	mov.w	r0, #0
 801ea4a:	f04f 0100 	mov.w	r1, #0
 801ea4e:	0219      	lsls	r1, r3, #8
 801ea50:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 801ea54:	0210      	lsls	r0, r2, #8
 801ea56:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
		data |= dataArr[ i + 0 ] ;
 801ea5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ea5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ea5e:	4413      	add	r3, r2
 801ea60:	781b      	ldrb	r3, [r3, #0]
 801ea62:	b2d8      	uxtb	r0, r3
 801ea64:	f04f 0100 	mov.w	r1, #0
 801ea68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801ea6c:	ea42 0800 	orr.w	r8, r2, r0
 801ea70:	ea43 0901 	orr.w	r9, r3, r1
 801ea74:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
		HAL_FLASH_Program( FLASH_TYPEPROGRAM_DOUBLEWORD, _address + i, data ) ;
 801ea78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ea7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ea7c:	18d1      	adds	r1, r2, r3
 801ea7e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801ea82:	2000      	movs	r0, #0
 801ea84:	f7fc fde4 	bl	801b650 <HAL_FLASH_Program>
		data = 0x0000000000000000 ;
 801ea88:	f04f 0200 	mov.w	r2, #0
 801ea8c:	f04f 0300 	mov.w	r3, #0
 801ea90:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	for( unsigned int i = 0; i < dwLen; i += 8 ) {
 801ea94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ea96:	3308      	adds	r3, #8
 801ea98:	657b      	str	r3, [r7, #84]	; 0x54
 801ea9a:	e70d      	b.n	801e8b8 <_Z11Flash_writemPKhi+0xfc>
	HAL_FLASH_Lock() ;
 801ea9c:	f7fc fe66 	bl	801b76c <HAL_FLASH_Lock>
 801eaa0:	f8d7 d028 	ldr.w	sp, [r7, #40]	; 0x28
}
 801eaa4:	bf00      	nop
 801eaa6:	375c      	adds	r7, #92	; 0x5c
 801eaa8:	46bd      	mov	sp, r7
 801eaaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eaae <_Z22Flash_write_doubleWordmPKh>:



/*_________________________________________________________________________________________________________________________________*/
void  Flash_write_doubleWord( uint32_t _address, const uint8_t* _data ) {
 801eaae:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801eab2:	b092      	sub	sp, #72	; 0x48
 801eab4:	af00      	add	r7, sp, #0
 801eab6:	62f8      	str	r0, [r7, #44]	; 0x2c
 801eab8:	62b9      	str	r1, [r7, #40]	; 0x28
	HAL_FLASH_Unlock() ;
 801eaba:	f7fc fe35 	bl	801b728 <HAL_FLASH_Unlock>

	uint8_t dataArr[9] ;
	memset( (char*)dataArr, 0x00, 9 ) ;
 801eabe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801eac2:	2209      	movs	r2, #9
 801eac4:	2100      	movs	r1, #0
 801eac6:	4618      	mov	r0, r3
 801eac8:	f000 fc5e 	bl	801f388 <memset>
	memcpy( (char*)dataArr, (char*)_data, 8 ) ;
 801eacc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801ead0:	2208      	movs	r2, #8
 801ead2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801ead4:	4618      	mov	r0, r3
 801ead6:	f000 fc2f 	bl	801f338 <memcpy>

	uint64_t data = 0x00 ;
 801eada:	f04f 0200 	mov.w	r2, #0
 801eade:	f04f 0300 	mov.w	r3, #0
 801eae2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

	data |= dataArr[7] ; data <<= 8 ;
 801eae6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801eaea:	b2d8      	uxtb	r0, r3
 801eaec:	f04f 0100 	mov.w	r1, #0
 801eaf0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801eaf4:	ea42 0400 	orr.w	r4, r2, r0
 801eaf8:	ea43 0501 	orr.w	r5, r3, r1
 801eafc:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40
 801eb00:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801eb04:	f04f 0000 	mov.w	r0, #0
 801eb08:	f04f 0100 	mov.w	r1, #0
 801eb0c:	0219      	lsls	r1, r3, #8
 801eb0e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 801eb12:	0210      	lsls	r0, r2, #8
 801eb14:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
	data |= dataArr[6] ; data <<= 8 ;
 801eb18:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 801eb1c:	b2d8      	uxtb	r0, r3
 801eb1e:	f04f 0100 	mov.w	r1, #0
 801eb22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801eb26:	ea42 0800 	orr.w	r8, r2, r0
 801eb2a:	ea43 0901 	orr.w	r9, r3, r1
 801eb2e:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
 801eb32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801eb36:	f04f 0000 	mov.w	r0, #0
 801eb3a:	f04f 0100 	mov.w	r1, #0
 801eb3e:	0219      	lsls	r1, r3, #8
 801eb40:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 801eb44:	0210      	lsls	r0, r2, #8
 801eb46:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
	data |= dataArr[5] ; data <<= 8 ;
 801eb4a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 801eb4e:	b2d8      	uxtb	r0, r3
 801eb50:	f04f 0100 	mov.w	r1, #0
 801eb54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801eb58:	ea42 0a00 	orr.w	sl, r2, r0
 801eb5c:	ea43 0b01 	orr.w	fp, r3, r1
 801eb60:	e9c7 ab10 	strd	sl, fp, [r7, #64]	; 0x40
 801eb64:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801eb68:	f04f 0200 	mov.w	r2, #0
 801eb6c:	f04f 0300 	mov.w	r3, #0
 801eb70:	020b      	lsls	r3, r1, #8
 801eb72:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801eb76:	0202      	lsls	r2, r0, #8
 801eb78:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	data |= dataArr[4] ; data <<= 8 ;
 801eb7c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801eb80:	b2da      	uxtb	r2, r3
 801eb82:	f04f 0300 	mov.w	r3, #0
 801eb86:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801eb8a:	ea40 0402 	orr.w	r4, r0, r2
 801eb8e:	623c      	str	r4, [r7, #32]
 801eb90:	430b      	orrs	r3, r1
 801eb92:	627b      	str	r3, [r7, #36]	; 0x24
 801eb94:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801eb98:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 801eb9c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801eba0:	f04f 0200 	mov.w	r2, #0
 801eba4:	f04f 0300 	mov.w	r3, #0
 801eba8:	020b      	lsls	r3, r1, #8
 801ebaa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801ebae:	0202      	lsls	r2, r0, #8
 801ebb0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	data |= dataArr[3] ; data <<= 8 ;
 801ebb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801ebb8:	b2da      	uxtb	r2, r3
 801ebba:	f04f 0300 	mov.w	r3, #0
 801ebbe:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801ebc2:	ea40 0402 	orr.w	r4, r0, r2
 801ebc6:	61bc      	str	r4, [r7, #24]
 801ebc8:	430b      	orrs	r3, r1
 801ebca:	61fb      	str	r3, [r7, #28]
 801ebcc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801ebd0:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 801ebd4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801ebd8:	f04f 0200 	mov.w	r2, #0
 801ebdc:	f04f 0300 	mov.w	r3, #0
 801ebe0:	020b      	lsls	r3, r1, #8
 801ebe2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801ebe6:	0202      	lsls	r2, r0, #8
 801ebe8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	data |= dataArr[2] ; data <<= 8 ;
 801ebec:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801ebf0:	b2da      	uxtb	r2, r3
 801ebf2:	f04f 0300 	mov.w	r3, #0
 801ebf6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801ebfa:	ea40 0402 	orr.w	r4, r0, r2
 801ebfe:	613c      	str	r4, [r7, #16]
 801ec00:	430b      	orrs	r3, r1
 801ec02:	617b      	str	r3, [r7, #20]
 801ec04:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801ec08:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 801ec0c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801ec10:	f04f 0200 	mov.w	r2, #0
 801ec14:	f04f 0300 	mov.w	r3, #0
 801ec18:	020b      	lsls	r3, r1, #8
 801ec1a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801ec1e:	0202      	lsls	r2, r0, #8
 801ec20:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	data |= dataArr[1] ; data <<= 8 ;
 801ec24:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801ec28:	b2da      	uxtb	r2, r3
 801ec2a:	f04f 0300 	mov.w	r3, #0
 801ec2e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801ec32:	ea40 0402 	orr.w	r4, r0, r2
 801ec36:	60bc      	str	r4, [r7, #8]
 801ec38:	430b      	orrs	r3, r1
 801ec3a:	60fb      	str	r3, [r7, #12]
 801ec3c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801ec40:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 801ec44:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801ec48:	f04f 0200 	mov.w	r2, #0
 801ec4c:	f04f 0300 	mov.w	r3, #0
 801ec50:	020b      	lsls	r3, r1, #8
 801ec52:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801ec56:	0202      	lsls	r2, r0, #8
 801ec58:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	data |= dataArr[0] ;
 801ec5c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801ec60:	b2da      	uxtb	r2, r3
 801ec62:	f04f 0300 	mov.w	r3, #0
 801ec66:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801ec6a:	ea40 0402 	orr.w	r4, r0, r2
 801ec6e:	603c      	str	r4, [r7, #0]
 801ec70:	430b      	orrs	r3, r1
 801ec72:	607b      	str	r3, [r7, #4]
 801ec74:	e9d7 3400 	ldrd	r3, r4, [r7]
 801ec78:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

	HAL_FLASH_Program( FLASH_TYPEPROGRAM_DOUBLEWORD, _address, data ) ;
 801ec7c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801ec80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ec82:	2000      	movs	r0, #0
 801ec84:	f7fc fce4 	bl	801b650 <HAL_FLASH_Program>

	HAL_FLASH_Lock() ;
 801ec88:	f7fc fd70 	bl	801b76c <HAL_FLASH_Lock>
}
 801ec8c:	bf00      	nop
 801ec8e:	3748      	adds	r7, #72	; 0x48
 801ec90:	46bd      	mov	sp, r7
 801ec92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0801ec98 <_Z21Flash_read_doubleWordy>:



/*_________________________________________________________________________________________________________________________________*/
char* Flash_read_doubleWord( uint64_t _Address ) {
 801ec98:	b580      	push	{r7, lr}
 801ec9a:	b088      	sub	sp, #32
 801ec9c:	af00      	add	r7, sp, #0
 801ec9e:	e9c7 0100 	strd	r0, r1, [r7]
	static char result[ 8 + 1 ] ;
	char temp[8] = {0} ;
 801eca2:	2300      	movs	r3, #0
 801eca4:	617b      	str	r3, [r7, #20]
 801eca6:	2300      	movs	r3, #0
 801eca8:	61bb      	str	r3, [r7, #24]
	memset( result, 0x00 , 8 + 1 ) ;
 801ecaa:	2209      	movs	r2, #9
 801ecac:	2100      	movs	r1, #0
 801ecae:	481d      	ldr	r0, [pc, #116]	; (801ed24 <_Z21Flash_read_doubleWordy+0x8c>)
 801ecb0:	f000 fb6a 	bl	801f388 <memset>
	memset( temp, 0xFF , 8 ) ;
 801ecb4:	f107 0314 	add.w	r3, r7, #20
 801ecb8:	2208      	movs	r2, #8
 801ecba:	21ff      	movs	r1, #255	; 0xff
 801ecbc:	4618      	mov	r0, r3
 801ecbe:	f000 fb63 	bl	801f388 <memset>
	uint64_t data[1] ;
	*data = *(__IO uint64_t *)_Address ;
 801ecc2:	683b      	ldr	r3, [r7, #0]
 801ecc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecc8:	e9c7 2302 	strd	r2, r3, [r7, #8]

	for( int i = 0; i < 8; i++ ){
 801eccc:	2300      	movs	r3, #0
 801ecce:	61fb      	str	r3, [r7, #28]
 801ecd0:	69fb      	ldr	r3, [r7, #28]
 801ecd2:	2b07      	cmp	r3, #7
 801ecd4:	dc18      	bgt.n	801ed08 <_Z21Flash_read_doubleWordy+0x70>
		temp[i] = data[0] ;
 801ecd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801ecda:	b2d1      	uxtb	r1, r2
 801ecdc:	f107 0214 	add.w	r2, r7, #20
 801ece0:	69fb      	ldr	r3, [r7, #28]
 801ece2:	4413      	add	r3, r2
 801ece4:	460a      	mov	r2, r1
 801ece6:	701a      	strb	r2, [r3, #0]
		data[0] >>= 8 ;
 801ece8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801ecec:	f04f 0200 	mov.w	r2, #0
 801ecf0:	f04f 0300 	mov.w	r3, #0
 801ecf4:	0a02      	lsrs	r2, r0, #8
 801ecf6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801ecfa:	0a0b      	lsrs	r3, r1, #8
 801ecfc:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for( int i = 0; i < 8; i++ ){
 801ed00:	69fb      	ldr	r3, [r7, #28]
 801ed02:	3301      	adds	r3, #1
 801ed04:	61fb      	str	r3, [r7, #28]
 801ed06:	e7e3      	b.n	801ecd0 <_Z21Flash_read_doubleWordy+0x38>
	}

	memcpy( result, temp, 8 ) ;
 801ed08:	4b06      	ldr	r3, [pc, #24]	; (801ed24 <_Z21Flash_read_doubleWordy+0x8c>)
 801ed0a:	461a      	mov	r2, r3
 801ed0c:	f107 0314 	add.w	r3, r7, #20
 801ed10:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ed14:	e882 0003 	stmia.w	r2, {r0, r1}
	return result ;
 801ed18:	4b02      	ldr	r3, [pc, #8]	; (801ed24 <_Z21Flash_read_doubleWordy+0x8c>)
}
 801ed1a:	4618      	mov	r0, r3
 801ed1c:	3720      	adds	r7, #32
 801ed1e:	46bd      	mov	sp, r7
 801ed20:	bd80      	pop	{r7, pc}
 801ed22:	bf00      	nop
 801ed24:	200002cc 	.word	0x200002cc

0801ed28 <_ZN7Sim7600C1EP20__UART_HandleTypeDef>:

#include "hw.h"
#include "define.h"

/*____________________________________________________________________________________________________________________________________________*/
Sim7600::Sim7600( UART_HandleTypeDef * _huartx ) {
 801ed28:	b580      	push	{r7, lr}
 801ed2a:	b082      	sub	sp, #8
 801ed2c:	af00      	add	r7, sp, #0
 801ed2e:	6078      	str	r0, [r7, #4]
 801ed30:	6039      	str	r1, [r7, #0]
 801ed32:	4a0b      	ldr	r2, [pc, #44]	; (801ed60 <_ZN7Sim7600C1EP20__UART_HandleTypeDef+0x38>)
 801ed34:	687b      	ldr	r3, [r7, #4]
 801ed36:	601a      	str	r2, [r3, #0]
 801ed38:	687b      	ldr	r3, [r7, #4]
 801ed3a:	3304      	adds	r3, #4
 801ed3c:	4618      	mov	r0, r3
 801ed3e:	f000 fa5e 	bl	801f1fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 801ed42:	687b      	ldr	r3, [r7, #4]
 801ed44:	2200      	movs	r2, #0
 801ed46:	771a      	strb	r2, [r3, #28]
 801ed48:	687b      	ldr	r3, [r7, #4]
 801ed4a:	2200      	movs	r2, #0
 801ed4c:	775a      	strb	r2, [r3, #29]
	huartx = &*_huartx ;
 801ed4e:	687b      	ldr	r3, [r7, #4]
 801ed50:	683a      	ldr	r2, [r7, #0]
 801ed52:	621a      	str	r2, [r3, #32]
}
 801ed54:	687b      	ldr	r3, [r7, #4]
 801ed56:	4618      	mov	r0, r3
 801ed58:	3708      	adds	r7, #8
 801ed5a:	46bd      	mov	sp, r7
 801ed5c:	bd80      	pop	{r7, pc}
 801ed5e:	bf00      	nop
 801ed60:	08023ee4 	.word	0x08023ee4

0801ed64 <_ZN7Sim7600D1Ev>:



/*____________________________________________________________________________________________________________________________________________*/
Sim7600::~Sim7600() {
 801ed64:	b580      	push	{r7, lr}
 801ed66:	b082      	sub	sp, #8
 801ed68:	af00      	add	r7, sp, #0
 801ed6a:	6078      	str	r0, [r7, #4]
 801ed6c:	4a06      	ldr	r2, [pc, #24]	; (801ed88 <_ZN7Sim7600D1Ev+0x24>)
 801ed6e:	687b      	ldr	r3, [r7, #4]
 801ed70:	601a      	str	r2, [r3, #0]
 801ed72:	687b      	ldr	r3, [r7, #4]
 801ed74:	3304      	adds	r3, #4
 801ed76:	4618      	mov	r0, r3
 801ed78:	f000 fa48 	bl	801f20c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

}
 801ed7c:	687b      	ldr	r3, [r7, #4]
 801ed7e:	4618      	mov	r0, r3
 801ed80:	3708      	adds	r7, #8
 801ed82:	46bd      	mov	sp, r7
 801ed84:	bd80      	pop	{r7, pc}
 801ed86:	bf00      	nop
 801ed88:	08023ee4 	.word	0x08023ee4

0801ed8c <_ZN7Sim7600D0Ev>:
Sim7600::~Sim7600() {
 801ed8c:	b580      	push	{r7, lr}
 801ed8e:	b082      	sub	sp, #8
 801ed90:	af00      	add	r7, sp, #0
 801ed92:	6078      	str	r0, [r7, #4]
}
 801ed94:	6878      	ldr	r0, [r7, #4]
 801ed96:	f7ff ffe5 	bl	801ed64 <_ZN7Sim7600D1Ev>
 801ed9a:	2124      	movs	r1, #36	; 0x24
 801ed9c:	6878      	ldr	r0, [r7, #4]
 801ed9e:	f000 f9b9 	bl	801f114 <_ZdlPvj>
 801eda2:	687b      	ldr	r3, [r7, #4]
 801eda4:	4618      	mov	r0, r3
 801eda6:	3708      	adds	r7, #8
 801eda8:	46bd      	mov	sp, r7
 801edaa:	bd80      	pop	{r7, pc}

0801edac <_ZN7Sim76004initEv>:



/*____________________________________________________________________________________________________________________________________________*/
void Sim7600::init() {
 801edac:	b580      	push	{r7, lr}
 801edae:	b082      	sub	sp, #8
 801edb0:	af00      	add	r7, sp, #0
 801edb2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT( huartx, (uint8_t*)rxByte, 1 ) ;
 801edb4:	687b      	ldr	r3, [r7, #4]
 801edb6:	6a18      	ldr	r0, [r3, #32]
 801edb8:	687b      	ldr	r3, [r7, #4]
 801edba:	331c      	adds	r3, #28
 801edbc:	2201      	movs	r2, #1
 801edbe:	4619      	mov	r1, r3
 801edc0:	f7fe fcb0 	bl	801d724 <HAL_UART_Receive_IT>
}
 801edc4:	bf00      	nop
 801edc6:	3708      	adds	r7, #8
 801edc8:	46bd      	mov	sp, r7
 801edca:	bd80      	pop	{r7, pc}

0801edcc <_ZN7Sim760010irqProcessEv>:



/*____________________________________________________________________________________________________________________________________________*/
void Sim7600::irqProcess() {
 801edcc:	b580      	push	{r7, lr}
 801edce:	b082      	sub	sp, #8
 801edd0:	af00      	add	r7, sp, #0
 801edd2:	6078      	str	r0, [r7, #4]
	if ( rxByte[0] == '\r' )
 801edd4:	687b      	ldr	r3, [r7, #4]
 801edd6:	7f1b      	ldrb	r3, [r3, #28]
 801edd8:	2b0d      	cmp	r3, #13
 801edda:	d103      	bne.n	801ede4 <_ZN7Sim760010irqProcessEv+0x18>
		rxDone_Flag = true ;
 801eddc:	687b      	ldr	r3, [r7, #4]
 801edde:	2201      	movs	r2, #1
 801ede0:	775a      	strb	r2, [r3, #29]
 801ede2:	e007      	b.n	801edf4 <_ZN7Sim760010irqProcessEv+0x28>
	else
		rxData += rxByte[0] ;
 801ede4:	687b      	ldr	r3, [r7, #4]
 801ede6:	1d1a      	adds	r2, r3, #4
 801ede8:	687b      	ldr	r3, [r7, #4]
 801edea:	7f1b      	ldrb	r3, [r3, #28]
 801edec:	4619      	mov	r1, r3
 801edee:	4610      	mov	r0, r2
 801edf0:	f000 fa36 	bl	801f260 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>

	HAL_UART_Receive_IT( huartx, (uint8_t*)rxByte, 1 ) ;
 801edf4:	687b      	ldr	r3, [r7, #4]
 801edf6:	6a18      	ldr	r0, [r3, #32]
 801edf8:	687b      	ldr	r3, [r7, #4]
 801edfa:	331c      	adds	r3, #28
 801edfc:	2201      	movs	r2, #1
 801edfe:	4619      	mov	r1, r3
 801ee00:	f7fe fc90 	bl	801d724 <HAL_UART_Receive_IT>
}
 801ee04:	bf00      	nop
 801ee06:	3708      	adds	r7, #8
 801ee08:	46bd      	mov	sp, r7
 801ee0a:	bd80      	pop	{r7, pc}

0801ee0c <_ZN7Sim76008memresetEv>:



/*____________________________________________________________________________________________________________________________________________*/
void Sim7600::memreset() {
 801ee0c:	b580      	push	{r7, lr}
 801ee0e:	b082      	sub	sp, #8
 801ee10:	af00      	add	r7, sp, #0
 801ee12:	6078      	str	r0, [r7, #4]
	rxDone_Flag = false ;
 801ee14:	687b      	ldr	r3, [r7, #4]
 801ee16:	2200      	movs	r2, #0
 801ee18:	775a      	strb	r2, [r3, #29]
	rxByte[0] = 0 ;
 801ee1a:	687b      	ldr	r3, [r7, #4]
 801ee1c:	2200      	movs	r2, #0
 801ee1e:	771a      	strb	r2, [r3, #28]
	rxData.clear() ;
 801ee20:	687b      	ldr	r3, [r7, #4]
 801ee22:	3304      	adds	r3, #4
 801ee24:	4618      	mov	r0, r3
 801ee26:	f000 f9f7 	bl	801f218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
}
 801ee2a:	bf00      	nop
 801ee2c:	3708      	adds	r7, #8
 801ee2e:	46bd      	mov	sp, r7
 801ee30:	bd80      	pop	{r7, pc}
	...

0801ee34 <_ZN7Sim76007sendCmdEPKcS1_j>:



/*____________________________________________________________________________________________________________________________________________*/
bool Sim7600::sendCmd( const char* _cmd, const char* _expectedAnswer, unsigned int _timeout ) {
 801ee34:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ee36:	b089      	sub	sp, #36	; 0x24
 801ee38:	af00      	add	r7, sp, #0
 801ee3a:	60f8      	str	r0, [r7, #12]
 801ee3c:	60b9      	str	r1, [r7, #8]
 801ee3e:	607a      	str	r2, [r7, #4]
 801ee40:	603b      	str	r3, [r7, #0]
		if ( strstr( rxData.c_str(), _expectedAnswer) != NULL )
			answer = 1;
	}

    HAL_Delay(1) ;
    return answer;
 801ee42:	466b      	mov	r3, sp
 801ee44:	461e      	mov	r6, r3
    bool answer=0;
 801ee46:	2300      	movs	r3, #0
 801ee48:	77fb      	strb	r3, [r7, #31]
    memreset() ;
 801ee4a:	68f8      	ldr	r0, [r7, #12]
 801ee4c:	f7ff ffde 	bl	801ee0c <_ZN7Sim76008memresetEv>
    char cmd[ strlen( _cmd ) + 2 ] = {0} ;
 801ee50:	68b8      	ldr	r0, [r7, #8]
 801ee52:	f7fa fa0d 	bl	8019270 <strlen>
 801ee56:	4603      	mov	r3, r0
 801ee58:	3301      	adds	r3, #1
 801ee5a:	461c      	mov	r4, r3
 801ee5c:	61bc      	str	r4, [r7, #24]
 801ee5e:	4623      	mov	r3, r4
 801ee60:	3301      	adds	r3, #1
 801ee62:	4618      	mov	r0, r3
 801ee64:	f04f 0100 	mov.w	r1, #0
 801ee68:	f04f 0200 	mov.w	r2, #0
 801ee6c:	f04f 0300 	mov.w	r3, #0
 801ee70:	00cb      	lsls	r3, r1, #3
 801ee72:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 801ee76:	00c2      	lsls	r2, r0, #3
 801ee78:	4623      	mov	r3, r4
 801ee7a:	3301      	adds	r3, #1
 801ee7c:	4618      	mov	r0, r3
 801ee7e:	f04f 0100 	mov.w	r1, #0
 801ee82:	f04f 0200 	mov.w	r2, #0
 801ee86:	f04f 0300 	mov.w	r3, #0
 801ee8a:	00cb      	lsls	r3, r1, #3
 801ee8c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 801ee90:	00c2      	lsls	r2, r0, #3
 801ee92:	4623      	mov	r3, r4
 801ee94:	3301      	adds	r3, #1
 801ee96:	3307      	adds	r3, #7
 801ee98:	08db      	lsrs	r3, r3, #3
 801ee9a:	00db      	lsls	r3, r3, #3
 801ee9c:	ebad 0d03 	sub.w	sp, sp, r3
 801eea0:	466b      	mov	r3, sp
 801eea2:	3300      	adds	r3, #0
 801eea4:	617b      	str	r3, [r7, #20]
 801eea6:	697b      	ldr	r3, [r7, #20]
 801eea8:	2200      	movs	r2, #0
 801eeaa:	701a      	strb	r2, [r3, #0]
 801eeac:	1c5a      	adds	r2, r3, #1
 801eeae:	1e63      	subs	r3, r4, #1
 801eeb0:	2b00      	cmp	r3, #0
 801eeb2:	db04      	blt.n	801eebe <_ZN7Sim76007sendCmdEPKcS1_j+0x8a>
 801eeb4:	2100      	movs	r1, #0
 801eeb6:	7011      	strb	r1, [r2, #0]
 801eeb8:	3201      	adds	r2, #1
 801eeba:	3b01      	subs	r3, #1
 801eebc:	e7f8      	b.n	801eeb0 <_ZN7Sim76007sendCmdEPKcS1_j+0x7c>
    sprintf( cmd, "%s\r\r", _cmd ) ;
 801eebe:	697b      	ldr	r3, [r7, #20]
 801eec0:	68ba      	ldr	r2, [r7, #8]
 801eec2:	4922      	ldr	r1, [pc, #136]	; (801ef4c <_ZN7Sim76007sendCmdEPKcS1_j+0x118>)
 801eec4:	4618      	mov	r0, r3
 801eec6:	f001 f9e5 	bl	8020294 <siprintf>
    HAL_UART_Transmit( huartx, (uint8_t*)cmd, strlen (cmd), _timeout) ;
 801eeca:	68fb      	ldr	r3, [r7, #12]
 801eecc:	6a1c      	ldr	r4, [r3, #32]
 801eece:	697d      	ldr	r5, [r7, #20]
 801eed0:	697b      	ldr	r3, [r7, #20]
 801eed2:	4618      	mov	r0, r3
 801eed4:	f7fa f9cc 	bl	8019270 <strlen>
 801eed8:	4603      	mov	r3, r0
 801eeda:	b29a      	uxth	r2, r3
 801eedc:	683b      	ldr	r3, [r7, #0]
 801eede:	4629      	mov	r1, r5
 801eee0:	4620      	mov	r0, r4
 801eee2:	f7fe fb8b 	bl	801d5fc <HAL_UART_Transmit>
    uint32_t tickStart = HAL_GetTick() ;
 801eee6:	f7fc f9d9 	bl	801b29c <HAL_GetTick>
 801eeea:	6138      	str	r0, [r7, #16]
    while( answer == 0 ) {
 801eeec:	7ffb      	ldrb	r3, [r7, #31]
 801eeee:	2b00      	cmp	r3, #0
 801eef0:	d122      	bne.n	801ef38 <_ZN7Sim76007sendCmdEPKcS1_j+0x104>
		if ( (unsigned long)( HAL_GetTick() - tickStart )  >=  _timeout )
 801eef2:	f7fc f9d3 	bl	801b29c <HAL_GetTick>
 801eef6:	4602      	mov	r2, r0
 801eef8:	693b      	ldr	r3, [r7, #16]
 801eefa:	1ad3      	subs	r3, r2, r3
 801eefc:	683a      	ldr	r2, [r7, #0]
 801eefe:	429a      	cmp	r2, r3
 801ef00:	bf94      	ite	ls
 801ef02:	2301      	movls	r3, #1
 801ef04:	2300      	movhi	r3, #0
 801ef06:	b2db      	uxtb	r3, r3
 801ef08:	2b00      	cmp	r3, #0
 801ef0a:	d114      	bne.n	801ef36 <_ZN7Sim76007sendCmdEPKcS1_j+0x102>
		if ( strstr( rxData.c_str(), _expectedAnswer) != NULL )
 801ef0c:	68fb      	ldr	r3, [r7, #12]
 801ef0e:	3304      	adds	r3, #4
 801ef10:	4618      	mov	r0, r3
 801ef12:	f000 f9ab 	bl	801f26c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 801ef16:	4603      	mov	r3, r0
 801ef18:	6879      	ldr	r1, [r7, #4]
 801ef1a:	4618      	mov	r0, r3
 801ef1c:	f001 f9da 	bl	80202d4 <strstr>
 801ef20:	4603      	mov	r3, r0
 801ef22:	2b00      	cmp	r3, #0
 801ef24:	bf14      	ite	ne
 801ef26:	2301      	movne	r3, #1
 801ef28:	2300      	moveq	r3, #0
 801ef2a:	b2db      	uxtb	r3, r3
 801ef2c:	2b00      	cmp	r3, #0
 801ef2e:	d0dd      	beq.n	801eeec <_ZN7Sim76007sendCmdEPKcS1_j+0xb8>
			answer = 1;
 801ef30:	2301      	movs	r3, #1
 801ef32:	77fb      	strb	r3, [r7, #31]
    while( answer == 0 ) {
 801ef34:	e7da      	b.n	801eeec <_ZN7Sim76007sendCmdEPKcS1_j+0xb8>
			break ;
 801ef36:	bf00      	nop
    HAL_Delay(1) ;
 801ef38:	2001      	movs	r0, #1
 801ef3a:	f7fc f9bb 	bl	801b2b4 <HAL_Delay>
    return answer;
 801ef3e:	7ffb      	ldrb	r3, [r7, #31]
 801ef40:	46b5      	mov	sp, r6
}
 801ef42:	4618      	mov	r0, r3
 801ef44:	3724      	adds	r7, #36	; 0x24
 801ef46:	46bd      	mov	sp, r7
 801ef48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ef4a:	bf00      	nop
 801ef4c:	08023e88 	.word	0x08023e88

0801ef50 <_ZN8TerminalC1EP20__UART_HandleTypeDef>:

#include "hw.h"


/*____________________________________________________________________________________________________________________________________________*/
Terminal::Terminal( UART_HandleTypeDef * _huartx ) {
 801ef50:	b580      	push	{r7, lr}
 801ef52:	b082      	sub	sp, #8
 801ef54:	af00      	add	r7, sp, #0
 801ef56:	6078      	str	r0, [r7, #4]
 801ef58:	6039      	str	r1, [r7, #0]
 801ef5a:	4a0b      	ldr	r2, [pc, #44]	; (801ef88 <_ZN8TerminalC1EP20__UART_HandleTypeDef+0x38>)
 801ef5c:	687b      	ldr	r3, [r7, #4]
 801ef5e:	601a      	str	r2, [r3, #0]
 801ef60:	687b      	ldr	r3, [r7, #4]
 801ef62:	3304      	adds	r3, #4
 801ef64:	4618      	mov	r0, r3
 801ef66:	f000 f94a 	bl	801f1fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 801ef6a:	687b      	ldr	r3, [r7, #4]
 801ef6c:	2200      	movs	r2, #0
 801ef6e:	771a      	strb	r2, [r3, #28]
 801ef70:	687b      	ldr	r3, [r7, #4]
 801ef72:	2200      	movs	r2, #0
 801ef74:	775a      	strb	r2, [r3, #29]
	huartx = &*_huartx ;
 801ef76:	687b      	ldr	r3, [r7, #4]
 801ef78:	683a      	ldr	r2, [r7, #0]
 801ef7a:	621a      	str	r2, [r3, #32]

}
 801ef7c:	687b      	ldr	r3, [r7, #4]
 801ef7e:	4618      	mov	r0, r3
 801ef80:	3708      	adds	r7, #8
 801ef82:	46bd      	mov	sp, r7
 801ef84:	bd80      	pop	{r7, pc}
 801ef86:	bf00      	nop
 801ef88:	08023ef4 	.word	0x08023ef4

0801ef8c <_ZN8TerminalD1Ev>:



/*____________________________________________________________________________________________________________________________________________*/
Terminal::~Terminal() {
 801ef8c:	b580      	push	{r7, lr}
 801ef8e:	b082      	sub	sp, #8
 801ef90:	af00      	add	r7, sp, #0
 801ef92:	6078      	str	r0, [r7, #4]
 801ef94:	4a06      	ldr	r2, [pc, #24]	; (801efb0 <_ZN8TerminalD1Ev+0x24>)
 801ef96:	687b      	ldr	r3, [r7, #4]
 801ef98:	601a      	str	r2, [r3, #0]
 801ef9a:	687b      	ldr	r3, [r7, #4]
 801ef9c:	3304      	adds	r3, #4
 801ef9e:	4618      	mov	r0, r3
 801efa0:	f000 f934 	bl	801f20c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

}
 801efa4:	687b      	ldr	r3, [r7, #4]
 801efa6:	4618      	mov	r0, r3
 801efa8:	3708      	adds	r7, #8
 801efaa:	46bd      	mov	sp, r7
 801efac:	bd80      	pop	{r7, pc}
 801efae:	bf00      	nop
 801efb0:	08023ef4 	.word	0x08023ef4

0801efb4 <_ZN8TerminalD0Ev>:
Terminal::~Terminal() {
 801efb4:	b580      	push	{r7, lr}
 801efb6:	b082      	sub	sp, #8
 801efb8:	af00      	add	r7, sp, #0
 801efba:	6078      	str	r0, [r7, #4]
}
 801efbc:	6878      	ldr	r0, [r7, #4]
 801efbe:	f7ff ffe5 	bl	801ef8c <_ZN8TerminalD1Ev>
 801efc2:	2124      	movs	r1, #36	; 0x24
 801efc4:	6878      	ldr	r0, [r7, #4]
 801efc6:	f000 f8a5 	bl	801f114 <_ZdlPvj>
 801efca:	687b      	ldr	r3, [r7, #4]
 801efcc:	4618      	mov	r0, r3
 801efce:	3708      	adds	r7, #8
 801efd0:	46bd      	mov	sp, r7
 801efd2:	bd80      	pop	{r7, pc}

0801efd4 <_ZN8Terminal4initEv>:



/*____________________________________________________________________________________________________________________________________________*/
void Terminal::init() {
 801efd4:	b580      	push	{r7, lr}
 801efd6:	b082      	sub	sp, #8
 801efd8:	af00      	add	r7, sp, #0
 801efda:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT( huartx, (uint8_t*)rxByte, 1 ) ;
 801efdc:	687b      	ldr	r3, [r7, #4]
 801efde:	6a18      	ldr	r0, [r3, #32]
 801efe0:	687b      	ldr	r3, [r7, #4]
 801efe2:	331c      	adds	r3, #28
 801efe4:	2201      	movs	r2, #1
 801efe6:	4619      	mov	r1, r3
 801efe8:	f7fe fb9c 	bl	801d724 <HAL_UART_Receive_IT>
}
 801efec:	bf00      	nop
 801efee:	3708      	adds	r7, #8
 801eff0:	46bd      	mov	sp, r7
 801eff2:	bd80      	pop	{r7, pc}

0801eff4 <_ZN8Terminal10irqProcessEv>:



/*____________________________________________________________________________________________________________________________________________*/
void Terminal::irqProcess() {
 801eff4:	b580      	push	{r7, lr}
 801eff6:	b082      	sub	sp, #8
 801eff8:	af00      	add	r7, sp, #0
 801effa:	6078      	str	r0, [r7, #4]
	if ( rxByte[0] == '\r' )
 801effc:	687b      	ldr	r3, [r7, #4]
 801effe:	7f1b      	ldrb	r3, [r3, #28]
 801f000:	2b0d      	cmp	r3, #13
 801f002:	d103      	bne.n	801f00c <_ZN8Terminal10irqProcessEv+0x18>
		rxDone_Flag = true ;
 801f004:	687b      	ldr	r3, [r7, #4]
 801f006:	2201      	movs	r2, #1
 801f008:	775a      	strb	r2, [r3, #29]
 801f00a:	e007      	b.n	801f01c <_ZN8Terminal10irqProcessEv+0x28>
	else
		rxData += rxByte[0] ;
 801f00c:	687b      	ldr	r3, [r7, #4]
 801f00e:	1d1a      	adds	r2, r3, #4
 801f010:	687b      	ldr	r3, [r7, #4]
 801f012:	7f1b      	ldrb	r3, [r3, #28]
 801f014:	4619      	mov	r1, r3
 801f016:	4610      	mov	r0, r2
 801f018:	f000 f922 	bl	801f260 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>

	HAL_UART_Receive_IT( huartx, (uint8_t*)rxByte, 1 ) ;
 801f01c:	687b      	ldr	r3, [r7, #4]
 801f01e:	6a18      	ldr	r0, [r3, #32]
 801f020:	687b      	ldr	r3, [r7, #4]
 801f022:	331c      	adds	r3, #28
 801f024:	2201      	movs	r2, #1
 801f026:	4619      	mov	r1, r3
 801f028:	f7fe fb7c 	bl	801d724 <HAL_UART_Receive_IT>
}
 801f02c:	bf00      	nop
 801f02e:	3708      	adds	r7, #8
 801f030:	46bd      	mov	sp, r7
 801f032:	bd80      	pop	{r7, pc}

0801f034 <_ZN8Terminal5printEPKc>:



/*____________________________________________________________________________________________________________________________________________*/
void Terminal::print( const char* _info ) {
 801f034:	b590      	push	{r4, r7, lr}
 801f036:	b083      	sub	sp, #12
 801f038:	af00      	add	r7, sp, #0
 801f03a:	6078      	str	r0, [r7, #4]
 801f03c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit( huartx, (uint8_t*)_info, strlen( _info ), 2000 ) ;
 801f03e:	687b      	ldr	r3, [r7, #4]
 801f040:	6a1c      	ldr	r4, [r3, #32]
 801f042:	6838      	ldr	r0, [r7, #0]
 801f044:	f7fa f914 	bl	8019270 <strlen>
 801f048:	4603      	mov	r3, r0
 801f04a:	b29a      	uxth	r2, r3
 801f04c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801f050:	6839      	ldr	r1, [r7, #0]
 801f052:	4620      	mov	r0, r4
 801f054:	f7fe fad2 	bl	801d5fc <HAL_UART_Transmit>
}
 801f058:	bf00      	nop
 801f05a:	370c      	adds	r7, #12
 801f05c:	46bd      	mov	sp, r7
 801f05e:	bd90      	pop	{r4, r7, pc}

0801f060 <_ZN8Terminal7printlnEPKc>:



/*____________________________________________________________________________________________________________________________________________*/
void Terminal::println( const char* _info ) {
 801f060:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f062:	b085      	sub	sp, #20
 801f064:	af00      	add	r7, sp, #0
 801f066:	6078      	str	r0, [r7, #4]
 801f068:	6039      	str	r1, [r7, #0]
	char info [ strlen( _info ) + 2 ] = {0} ;
	sprintf( info, "\n%s", _info ) ;

	HAL_UART_Transmit( huartx, (uint8_t*)info, strlen( info ), 2000 ) ;
 801f06a:	466b      	mov	r3, sp
 801f06c:	461e      	mov	r6, r3
	char info [ strlen( _info ) + 2 ] = {0} ;
 801f06e:	6838      	ldr	r0, [r7, #0]
 801f070:	f7fa f8fe 	bl	8019270 <strlen>
 801f074:	4603      	mov	r3, r0
 801f076:	3301      	adds	r3, #1
 801f078:	461c      	mov	r4, r3
 801f07a:	60fc      	str	r4, [r7, #12]
 801f07c:	4623      	mov	r3, r4
 801f07e:	3301      	adds	r3, #1
 801f080:	4618      	mov	r0, r3
 801f082:	f04f 0100 	mov.w	r1, #0
 801f086:	f04f 0200 	mov.w	r2, #0
 801f08a:	f04f 0300 	mov.w	r3, #0
 801f08e:	00cb      	lsls	r3, r1, #3
 801f090:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 801f094:	00c2      	lsls	r2, r0, #3
 801f096:	4623      	mov	r3, r4
 801f098:	3301      	adds	r3, #1
 801f09a:	4618      	mov	r0, r3
 801f09c:	f04f 0100 	mov.w	r1, #0
 801f0a0:	f04f 0200 	mov.w	r2, #0
 801f0a4:	f04f 0300 	mov.w	r3, #0
 801f0a8:	00cb      	lsls	r3, r1, #3
 801f0aa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 801f0ae:	00c2      	lsls	r2, r0, #3
 801f0b0:	4623      	mov	r3, r4
 801f0b2:	3301      	adds	r3, #1
 801f0b4:	3307      	adds	r3, #7
 801f0b6:	08db      	lsrs	r3, r3, #3
 801f0b8:	00db      	lsls	r3, r3, #3
 801f0ba:	ebad 0d03 	sub.w	sp, sp, r3
 801f0be:	466b      	mov	r3, sp
 801f0c0:	3300      	adds	r3, #0
 801f0c2:	60bb      	str	r3, [r7, #8]
 801f0c4:	68bb      	ldr	r3, [r7, #8]
 801f0c6:	2200      	movs	r2, #0
 801f0c8:	701a      	strb	r2, [r3, #0]
 801f0ca:	1c5a      	adds	r2, r3, #1
 801f0cc:	1e63      	subs	r3, r4, #1
 801f0ce:	2b00      	cmp	r3, #0
 801f0d0:	db04      	blt.n	801f0dc <_ZN8Terminal7printlnEPKc+0x7c>
 801f0d2:	2100      	movs	r1, #0
 801f0d4:	7011      	strb	r1, [r2, #0]
 801f0d6:	3201      	adds	r2, #1
 801f0d8:	3b01      	subs	r3, #1
 801f0da:	e7f8      	b.n	801f0ce <_ZN8Terminal7printlnEPKc+0x6e>
	sprintf( info, "\n%s", _info ) ;
 801f0dc:	68bb      	ldr	r3, [r7, #8]
 801f0de:	683a      	ldr	r2, [r7, #0]
 801f0e0:	490b      	ldr	r1, [pc, #44]	; (801f110 <_ZN8Terminal7printlnEPKc+0xb0>)
 801f0e2:	4618      	mov	r0, r3
 801f0e4:	f001 f8d6 	bl	8020294 <siprintf>
	HAL_UART_Transmit( huartx, (uint8_t*)info, strlen( info ), 2000 ) ;
 801f0e8:	687b      	ldr	r3, [r7, #4]
 801f0ea:	6a1c      	ldr	r4, [r3, #32]
 801f0ec:	68bd      	ldr	r5, [r7, #8]
 801f0ee:	68bb      	ldr	r3, [r7, #8]
 801f0f0:	4618      	mov	r0, r3
 801f0f2:	f7fa f8bd 	bl	8019270 <strlen>
 801f0f6:	4603      	mov	r3, r0
 801f0f8:	b29a      	uxth	r2, r3
 801f0fa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801f0fe:	4629      	mov	r1, r5
 801f100:	4620      	mov	r0, r4
 801f102:	f7fe fa7b 	bl	801d5fc <HAL_UART_Transmit>
 801f106:	46b5      	mov	sp, r6
}
 801f108:	bf00      	nop
 801f10a:	3714      	adds	r7, #20
 801f10c:	46bd      	mov	sp, r7
 801f10e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f110:	08023e90 	.word	0x08023e90

0801f114 <_ZdlPvj>:
 801f114:	f000 b8ac 	b.w	801f270 <_ZdlPv>

0801f118 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 801f118:	b10a      	cbz	r2, 801f11e <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 801f11a:	f000 b90d 	b.w	801f338 <memcpy>
 801f11e:	4770      	bx	lr

0801f120 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 801f120:	b508      	push	{r3, lr}
 801f122:	680b      	ldr	r3, [r1, #0]
 801f124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f128:	d302      	bcc.n	801f130 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 801f12a:	480d      	ldr	r0, [pc, #52]	; (801f160 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 801f12c:	f000 f8b6 	bl	801f29c <_ZSt20__throw_length_errorPKc>
 801f130:	4293      	cmp	r3, r2
 801f132:	d90b      	bls.n	801f14c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801f134:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 801f138:	ea4f 0042 	mov.w	r0, r2, lsl #1
 801f13c:	d206      	bcs.n	801f14c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801f13e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801f142:	bf2a      	itet	cs
 801f144:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 801f148:	6008      	strcc	r0, [r1, #0]
 801f14a:	600b      	strcs	r3, [r1, #0]
 801f14c:	6808      	ldr	r0, [r1, #0]
 801f14e:	3001      	adds	r0, #1
 801f150:	d501      	bpl.n	801f156 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 801f152:	f000 f8a0 	bl	801f296 <_ZSt17__throw_bad_allocv>
 801f156:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801f15a:	f000 b88b 	b.w	801f274 <_Znwj>
 801f15e:	bf00      	nop
 801f160:	08023efc 	.word	0x08023efc

0801f164 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 801f164:	f850 3b08 	ldr.w	r3, [r0], #8
 801f168:	4283      	cmp	r3, r0
 801f16a:	d002      	beq.n	801f172 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 801f16c:	4618      	mov	r0, r3
 801f16e:	f000 b87f 	b.w	801f270 <_ZdlPv>
 801f172:	4770      	bx	lr

0801f174 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 801f174:	2a01      	cmp	r2, #1
 801f176:	b510      	push	{r4, lr}
 801f178:	d102      	bne.n	801f180 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 801f17a:	780a      	ldrb	r2, [r1, #0]
 801f17c:	7002      	strb	r2, [r0, #0]
 801f17e:	bd10      	pop	{r4, pc}
 801f180:	f7ff ffca 	bl	801f118 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 801f184:	e7fb      	b.n	801f17e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0801f186 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 801f186:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801f18a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801f18c:	461f      	mov	r7, r3
 801f18e:	6843      	ldr	r3, [r0, #4]
 801f190:	eb01 0802 	add.w	r8, r1, r2
 801f194:	1ab2      	subs	r2, r6, r2
 801f196:	441a      	add	r2, r3
 801f198:	eba3 0908 	sub.w	r9, r3, r8
 801f19c:	4603      	mov	r3, r0
 801f19e:	9201      	str	r2, [sp, #4]
 801f1a0:	f853 2b08 	ldr.w	r2, [r3], #8
 801f1a4:	429a      	cmp	r2, r3
 801f1a6:	bf18      	it	ne
 801f1a8:	6882      	ldrne	r2, [r0, #8]
 801f1aa:	460d      	mov	r5, r1
 801f1ac:	bf08      	it	eq
 801f1ae:	220f      	moveq	r2, #15
 801f1b0:	a901      	add	r1, sp, #4
 801f1b2:	4604      	mov	r4, r0
 801f1b4:	f7ff ffb4 	bl	801f120 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801f1b8:	4682      	mov	sl, r0
 801f1ba:	b11d      	cbz	r5, 801f1c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 801f1bc:	6821      	ldr	r1, [r4, #0]
 801f1be:	462a      	mov	r2, r5
 801f1c0:	f7ff ffd8 	bl	801f174 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801f1c4:	b137      	cbz	r7, 801f1d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 801f1c6:	b12e      	cbz	r6, 801f1d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 801f1c8:	4632      	mov	r2, r6
 801f1ca:	4639      	mov	r1, r7
 801f1cc:	eb0a 0005 	add.w	r0, sl, r5
 801f1d0:	f7ff ffd0 	bl	801f174 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801f1d4:	f1b9 0f00 	cmp.w	r9, #0
 801f1d8:	d007      	beq.n	801f1ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 801f1da:	6821      	ldr	r1, [r4, #0]
 801f1dc:	4435      	add	r5, r6
 801f1de:	464a      	mov	r2, r9
 801f1e0:	4441      	add	r1, r8
 801f1e2:	eb0a 0005 	add.w	r0, sl, r5
 801f1e6:	f7ff ffc5 	bl	801f174 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801f1ea:	4620      	mov	r0, r4
 801f1ec:	f7ff ffba 	bl	801f164 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801f1f0:	9b01      	ldr	r3, [sp, #4]
 801f1f2:	f8c4 a000 	str.w	sl, [r4]
 801f1f6:	60a3      	str	r3, [r4, #8]
 801f1f8:	b002      	add	sp, #8
 801f1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801f1fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 801f1fe:	f100 0208 	add.w	r2, r0, #8
 801f202:	6002      	str	r2, [r0, #0]
 801f204:	2200      	movs	r2, #0
 801f206:	6042      	str	r2, [r0, #4]
 801f208:	7202      	strb	r2, [r0, #8]
 801f20a:	4770      	bx	lr

0801f20c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 801f20c:	b510      	push	{r4, lr}
 801f20e:	4604      	mov	r4, r0
 801f210:	f7ff ffa8 	bl	801f164 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801f214:	4620      	mov	r0, r4
 801f216:	bd10      	pop	{r4, pc}

0801f218 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 801f218:	6802      	ldr	r2, [r0, #0]
 801f21a:	2300      	movs	r3, #0
 801f21c:	6043      	str	r3, [r0, #4]
 801f21e:	7013      	strb	r3, [r2, #0]
 801f220:	4770      	bx	lr

0801f222 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 801f222:	4603      	mov	r3, r0
 801f224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f226:	f853 2b08 	ldr.w	r2, [r3], #8
 801f22a:	6846      	ldr	r6, [r0, #4]
 801f22c:	429a      	cmp	r2, r3
 801f22e:	bf18      	it	ne
 801f230:	6883      	ldrne	r3, [r0, #8]
 801f232:	f106 0501 	add.w	r5, r6, #1
 801f236:	bf08      	it	eq
 801f238:	230f      	moveq	r3, #15
 801f23a:	429d      	cmp	r5, r3
 801f23c:	4604      	mov	r4, r0
 801f23e:	460f      	mov	r7, r1
 801f240:	d906      	bls.n	801f250 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2e>
 801f242:	2301      	movs	r3, #1
 801f244:	9300      	str	r3, [sp, #0]
 801f246:	2300      	movs	r3, #0
 801f248:	461a      	mov	r2, r3
 801f24a:	4631      	mov	r1, r6
 801f24c:	f7ff ff9b 	bl	801f186 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 801f250:	6823      	ldr	r3, [r4, #0]
 801f252:	559f      	strb	r7, [r3, r6]
 801f254:	6823      	ldr	r3, [r4, #0]
 801f256:	6065      	str	r5, [r4, #4]
 801f258:	2200      	movs	r2, #0
 801f25a:	555a      	strb	r2, [r3, r5]
 801f25c:	b003      	add	sp, #12
 801f25e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801f260 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>:
 801f260:	b510      	push	{r4, lr}
 801f262:	4604      	mov	r4, r0
 801f264:	f7ff ffdd 	bl	801f222 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
 801f268:	4620      	mov	r0, r4
 801f26a:	bd10      	pop	{r4, pc}

0801f26c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 801f26c:	6800      	ldr	r0, [r0, #0]
 801f26e:	4770      	bx	lr

0801f270 <_ZdlPv>:
 801f270:	f000 b85a 	b.w	801f328 <free>

0801f274 <_Znwj>:
 801f274:	2801      	cmp	r0, #1
 801f276:	bf38      	it	cc
 801f278:	2001      	movcc	r0, #1
 801f27a:	b510      	push	{r4, lr}
 801f27c:	4604      	mov	r4, r0
 801f27e:	4620      	mov	r0, r4
 801f280:	f000 f84a 	bl	801f318 <malloc>
 801f284:	b930      	cbnz	r0, 801f294 <_Znwj+0x20>
 801f286:	f000 f80d 	bl	801f2a4 <_ZSt15get_new_handlerv>
 801f28a:	b908      	cbnz	r0, 801f290 <_Znwj+0x1c>
 801f28c:	f000 f812 	bl	801f2b4 <abort>
 801f290:	4780      	blx	r0
 801f292:	e7f4      	b.n	801f27e <_Znwj+0xa>
 801f294:	bd10      	pop	{r4, pc}

0801f296 <_ZSt17__throw_bad_allocv>:
 801f296:	b508      	push	{r3, lr}
 801f298:	f000 f80c 	bl	801f2b4 <abort>

0801f29c <_ZSt20__throw_length_errorPKc>:
 801f29c:	b508      	push	{r3, lr}
 801f29e:	f000 f809 	bl	801f2b4 <abort>
	...

0801f2a4 <_ZSt15get_new_handlerv>:
 801f2a4:	4b02      	ldr	r3, [pc, #8]	; (801f2b0 <_ZSt15get_new_handlerv+0xc>)
 801f2a6:	6818      	ldr	r0, [r3, #0]
 801f2a8:	f3bf 8f5b 	dmb	ish
 801f2ac:	4770      	bx	lr
 801f2ae:	bf00      	nop
 801f2b0:	200002d8 	.word	0x200002d8

0801f2b4 <abort>:
 801f2b4:	b508      	push	{r3, lr}
 801f2b6:	2006      	movs	r0, #6
 801f2b8:	f000 ffd0 	bl	802025c <raise>
 801f2bc:	2001      	movs	r0, #1
 801f2be:	f7fb fd97 	bl	801adf0 <_exit>
	...

0801f2c4 <__errno>:
 801f2c4:	4b01      	ldr	r3, [pc, #4]	; (801f2cc <__errno+0x8>)
 801f2c6:	6818      	ldr	r0, [r3, #0]
 801f2c8:	4770      	bx	lr
 801f2ca:	bf00      	nop
 801f2cc:	20000030 	.word	0x20000030

0801f2d0 <__libc_init_array>:
 801f2d0:	b570      	push	{r4, r5, r6, lr}
 801f2d2:	4d0d      	ldr	r5, [pc, #52]	; (801f308 <__libc_init_array+0x38>)
 801f2d4:	4c0d      	ldr	r4, [pc, #52]	; (801f30c <__libc_init_array+0x3c>)
 801f2d6:	1b64      	subs	r4, r4, r5
 801f2d8:	10a4      	asrs	r4, r4, #2
 801f2da:	2600      	movs	r6, #0
 801f2dc:	42a6      	cmp	r6, r4
 801f2de:	d109      	bne.n	801f2f4 <__libc_init_array+0x24>
 801f2e0:	4d0b      	ldr	r5, [pc, #44]	; (801f310 <__libc_init_array+0x40>)
 801f2e2:	4c0c      	ldr	r4, [pc, #48]	; (801f314 <__libc_init_array+0x44>)
 801f2e4:	f004 fc5e 	bl	8023ba4 <_init>
 801f2e8:	1b64      	subs	r4, r4, r5
 801f2ea:	10a4      	asrs	r4, r4, #2
 801f2ec:	2600      	movs	r6, #0
 801f2ee:	42a6      	cmp	r6, r4
 801f2f0:	d105      	bne.n	801f2fe <__libc_init_array+0x2e>
 801f2f2:	bd70      	pop	{r4, r5, r6, pc}
 801f2f4:	f855 3b04 	ldr.w	r3, [r5], #4
 801f2f8:	4798      	blx	r3
 801f2fa:	3601      	adds	r6, #1
 801f2fc:	e7ee      	b.n	801f2dc <__libc_init_array+0xc>
 801f2fe:	f855 3b04 	ldr.w	r3, [r5], #4
 801f302:	4798      	blx	r3
 801f304:	3601      	adds	r6, #1
 801f306:	e7f2      	b.n	801f2ee <__libc_init_array+0x1e>
 801f308:	080243d4 	.word	0x080243d4
 801f30c:	080243d4 	.word	0x080243d4
 801f310:	080243d4 	.word	0x080243d4
 801f314:	080243dc 	.word	0x080243dc

0801f318 <malloc>:
 801f318:	4b02      	ldr	r3, [pc, #8]	; (801f324 <malloc+0xc>)
 801f31a:	4601      	mov	r1, r0
 801f31c:	6818      	ldr	r0, [r3, #0]
 801f31e:	f000 b88b 	b.w	801f438 <_malloc_r>
 801f322:	bf00      	nop
 801f324:	20000030 	.word	0x20000030

0801f328 <free>:
 801f328:	4b02      	ldr	r3, [pc, #8]	; (801f334 <free+0xc>)
 801f32a:	4601      	mov	r1, r0
 801f32c:	6818      	ldr	r0, [r3, #0]
 801f32e:	f000 b833 	b.w	801f398 <_free_r>
 801f332:	bf00      	nop
 801f334:	20000030 	.word	0x20000030

0801f338 <memcpy>:
 801f338:	440a      	add	r2, r1
 801f33a:	4291      	cmp	r1, r2
 801f33c:	f100 33ff 	add.w	r3, r0, #4294967295
 801f340:	d100      	bne.n	801f344 <memcpy+0xc>
 801f342:	4770      	bx	lr
 801f344:	b510      	push	{r4, lr}
 801f346:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f34a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f34e:	4291      	cmp	r1, r2
 801f350:	d1f9      	bne.n	801f346 <memcpy+0xe>
 801f352:	bd10      	pop	{r4, pc}

0801f354 <memmove>:
 801f354:	4288      	cmp	r0, r1
 801f356:	b510      	push	{r4, lr}
 801f358:	eb01 0402 	add.w	r4, r1, r2
 801f35c:	d902      	bls.n	801f364 <memmove+0x10>
 801f35e:	4284      	cmp	r4, r0
 801f360:	4623      	mov	r3, r4
 801f362:	d807      	bhi.n	801f374 <memmove+0x20>
 801f364:	1e43      	subs	r3, r0, #1
 801f366:	42a1      	cmp	r1, r4
 801f368:	d008      	beq.n	801f37c <memmove+0x28>
 801f36a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f36e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f372:	e7f8      	b.n	801f366 <memmove+0x12>
 801f374:	4402      	add	r2, r0
 801f376:	4601      	mov	r1, r0
 801f378:	428a      	cmp	r2, r1
 801f37a:	d100      	bne.n	801f37e <memmove+0x2a>
 801f37c:	bd10      	pop	{r4, pc}
 801f37e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f382:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801f386:	e7f7      	b.n	801f378 <memmove+0x24>

0801f388 <memset>:
 801f388:	4402      	add	r2, r0
 801f38a:	4603      	mov	r3, r0
 801f38c:	4293      	cmp	r3, r2
 801f38e:	d100      	bne.n	801f392 <memset+0xa>
 801f390:	4770      	bx	lr
 801f392:	f803 1b01 	strb.w	r1, [r3], #1
 801f396:	e7f9      	b.n	801f38c <memset+0x4>

0801f398 <_free_r>:
 801f398:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f39a:	2900      	cmp	r1, #0
 801f39c:	d048      	beq.n	801f430 <_free_r+0x98>
 801f39e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f3a2:	9001      	str	r0, [sp, #4]
 801f3a4:	2b00      	cmp	r3, #0
 801f3a6:	f1a1 0404 	sub.w	r4, r1, #4
 801f3aa:	bfb8      	it	lt
 801f3ac:	18e4      	addlt	r4, r4, r3
 801f3ae:	f003 f85d 	bl	802246c <__malloc_lock>
 801f3b2:	4a20      	ldr	r2, [pc, #128]	; (801f434 <_free_r+0x9c>)
 801f3b4:	9801      	ldr	r0, [sp, #4]
 801f3b6:	6813      	ldr	r3, [r2, #0]
 801f3b8:	4615      	mov	r5, r2
 801f3ba:	b933      	cbnz	r3, 801f3ca <_free_r+0x32>
 801f3bc:	6063      	str	r3, [r4, #4]
 801f3be:	6014      	str	r4, [r2, #0]
 801f3c0:	b003      	add	sp, #12
 801f3c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f3c6:	f003 b857 	b.w	8022478 <__malloc_unlock>
 801f3ca:	42a3      	cmp	r3, r4
 801f3cc:	d90b      	bls.n	801f3e6 <_free_r+0x4e>
 801f3ce:	6821      	ldr	r1, [r4, #0]
 801f3d0:	1862      	adds	r2, r4, r1
 801f3d2:	4293      	cmp	r3, r2
 801f3d4:	bf04      	itt	eq
 801f3d6:	681a      	ldreq	r2, [r3, #0]
 801f3d8:	685b      	ldreq	r3, [r3, #4]
 801f3da:	6063      	str	r3, [r4, #4]
 801f3dc:	bf04      	itt	eq
 801f3de:	1852      	addeq	r2, r2, r1
 801f3e0:	6022      	streq	r2, [r4, #0]
 801f3e2:	602c      	str	r4, [r5, #0]
 801f3e4:	e7ec      	b.n	801f3c0 <_free_r+0x28>
 801f3e6:	461a      	mov	r2, r3
 801f3e8:	685b      	ldr	r3, [r3, #4]
 801f3ea:	b10b      	cbz	r3, 801f3f0 <_free_r+0x58>
 801f3ec:	42a3      	cmp	r3, r4
 801f3ee:	d9fa      	bls.n	801f3e6 <_free_r+0x4e>
 801f3f0:	6811      	ldr	r1, [r2, #0]
 801f3f2:	1855      	adds	r5, r2, r1
 801f3f4:	42a5      	cmp	r5, r4
 801f3f6:	d10b      	bne.n	801f410 <_free_r+0x78>
 801f3f8:	6824      	ldr	r4, [r4, #0]
 801f3fa:	4421      	add	r1, r4
 801f3fc:	1854      	adds	r4, r2, r1
 801f3fe:	42a3      	cmp	r3, r4
 801f400:	6011      	str	r1, [r2, #0]
 801f402:	d1dd      	bne.n	801f3c0 <_free_r+0x28>
 801f404:	681c      	ldr	r4, [r3, #0]
 801f406:	685b      	ldr	r3, [r3, #4]
 801f408:	6053      	str	r3, [r2, #4]
 801f40a:	4421      	add	r1, r4
 801f40c:	6011      	str	r1, [r2, #0]
 801f40e:	e7d7      	b.n	801f3c0 <_free_r+0x28>
 801f410:	d902      	bls.n	801f418 <_free_r+0x80>
 801f412:	230c      	movs	r3, #12
 801f414:	6003      	str	r3, [r0, #0]
 801f416:	e7d3      	b.n	801f3c0 <_free_r+0x28>
 801f418:	6825      	ldr	r5, [r4, #0]
 801f41a:	1961      	adds	r1, r4, r5
 801f41c:	428b      	cmp	r3, r1
 801f41e:	bf04      	itt	eq
 801f420:	6819      	ldreq	r1, [r3, #0]
 801f422:	685b      	ldreq	r3, [r3, #4]
 801f424:	6063      	str	r3, [r4, #4]
 801f426:	bf04      	itt	eq
 801f428:	1949      	addeq	r1, r1, r5
 801f42a:	6021      	streq	r1, [r4, #0]
 801f42c:	6054      	str	r4, [r2, #4]
 801f42e:	e7c7      	b.n	801f3c0 <_free_r+0x28>
 801f430:	b003      	add	sp, #12
 801f432:	bd30      	pop	{r4, r5, pc}
 801f434:	200002dc 	.word	0x200002dc

0801f438 <_malloc_r>:
 801f438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f43a:	1ccd      	adds	r5, r1, #3
 801f43c:	f025 0503 	bic.w	r5, r5, #3
 801f440:	3508      	adds	r5, #8
 801f442:	2d0c      	cmp	r5, #12
 801f444:	bf38      	it	cc
 801f446:	250c      	movcc	r5, #12
 801f448:	2d00      	cmp	r5, #0
 801f44a:	4606      	mov	r6, r0
 801f44c:	db01      	blt.n	801f452 <_malloc_r+0x1a>
 801f44e:	42a9      	cmp	r1, r5
 801f450:	d903      	bls.n	801f45a <_malloc_r+0x22>
 801f452:	230c      	movs	r3, #12
 801f454:	6033      	str	r3, [r6, #0]
 801f456:	2000      	movs	r0, #0
 801f458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f45a:	f003 f807 	bl	802246c <__malloc_lock>
 801f45e:	4921      	ldr	r1, [pc, #132]	; (801f4e4 <_malloc_r+0xac>)
 801f460:	680a      	ldr	r2, [r1, #0]
 801f462:	4614      	mov	r4, r2
 801f464:	b99c      	cbnz	r4, 801f48e <_malloc_r+0x56>
 801f466:	4f20      	ldr	r7, [pc, #128]	; (801f4e8 <_malloc_r+0xb0>)
 801f468:	683b      	ldr	r3, [r7, #0]
 801f46a:	b923      	cbnz	r3, 801f476 <_malloc_r+0x3e>
 801f46c:	4621      	mov	r1, r4
 801f46e:	4630      	mov	r0, r6
 801f470:	f000 feb6 	bl	80201e0 <_sbrk_r>
 801f474:	6038      	str	r0, [r7, #0]
 801f476:	4629      	mov	r1, r5
 801f478:	4630      	mov	r0, r6
 801f47a:	f000 feb1 	bl	80201e0 <_sbrk_r>
 801f47e:	1c43      	adds	r3, r0, #1
 801f480:	d123      	bne.n	801f4ca <_malloc_r+0x92>
 801f482:	230c      	movs	r3, #12
 801f484:	6033      	str	r3, [r6, #0]
 801f486:	4630      	mov	r0, r6
 801f488:	f002 fff6 	bl	8022478 <__malloc_unlock>
 801f48c:	e7e3      	b.n	801f456 <_malloc_r+0x1e>
 801f48e:	6823      	ldr	r3, [r4, #0]
 801f490:	1b5b      	subs	r3, r3, r5
 801f492:	d417      	bmi.n	801f4c4 <_malloc_r+0x8c>
 801f494:	2b0b      	cmp	r3, #11
 801f496:	d903      	bls.n	801f4a0 <_malloc_r+0x68>
 801f498:	6023      	str	r3, [r4, #0]
 801f49a:	441c      	add	r4, r3
 801f49c:	6025      	str	r5, [r4, #0]
 801f49e:	e004      	b.n	801f4aa <_malloc_r+0x72>
 801f4a0:	6863      	ldr	r3, [r4, #4]
 801f4a2:	42a2      	cmp	r2, r4
 801f4a4:	bf0c      	ite	eq
 801f4a6:	600b      	streq	r3, [r1, #0]
 801f4a8:	6053      	strne	r3, [r2, #4]
 801f4aa:	4630      	mov	r0, r6
 801f4ac:	f002 ffe4 	bl	8022478 <__malloc_unlock>
 801f4b0:	f104 000b 	add.w	r0, r4, #11
 801f4b4:	1d23      	adds	r3, r4, #4
 801f4b6:	f020 0007 	bic.w	r0, r0, #7
 801f4ba:	1ac2      	subs	r2, r0, r3
 801f4bc:	d0cc      	beq.n	801f458 <_malloc_r+0x20>
 801f4be:	1a1b      	subs	r3, r3, r0
 801f4c0:	50a3      	str	r3, [r4, r2]
 801f4c2:	e7c9      	b.n	801f458 <_malloc_r+0x20>
 801f4c4:	4622      	mov	r2, r4
 801f4c6:	6864      	ldr	r4, [r4, #4]
 801f4c8:	e7cc      	b.n	801f464 <_malloc_r+0x2c>
 801f4ca:	1cc4      	adds	r4, r0, #3
 801f4cc:	f024 0403 	bic.w	r4, r4, #3
 801f4d0:	42a0      	cmp	r0, r4
 801f4d2:	d0e3      	beq.n	801f49c <_malloc_r+0x64>
 801f4d4:	1a21      	subs	r1, r4, r0
 801f4d6:	4630      	mov	r0, r6
 801f4d8:	f000 fe82 	bl	80201e0 <_sbrk_r>
 801f4dc:	3001      	adds	r0, #1
 801f4de:	d1dd      	bne.n	801f49c <_malloc_r+0x64>
 801f4e0:	e7cf      	b.n	801f482 <_malloc_r+0x4a>
 801f4e2:	bf00      	nop
 801f4e4:	200002dc 	.word	0x200002dc
 801f4e8:	200002e0 	.word	0x200002e0

0801f4ec <__cvt>:
 801f4ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f4f0:	ec55 4b10 	vmov	r4, r5, d0
 801f4f4:	2d00      	cmp	r5, #0
 801f4f6:	460e      	mov	r6, r1
 801f4f8:	4619      	mov	r1, r3
 801f4fa:	462b      	mov	r3, r5
 801f4fc:	bfbb      	ittet	lt
 801f4fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801f502:	461d      	movlt	r5, r3
 801f504:	2300      	movge	r3, #0
 801f506:	232d      	movlt	r3, #45	; 0x2d
 801f508:	700b      	strb	r3, [r1, #0]
 801f50a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f50c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801f510:	4691      	mov	r9, r2
 801f512:	f023 0820 	bic.w	r8, r3, #32
 801f516:	bfbc      	itt	lt
 801f518:	4622      	movlt	r2, r4
 801f51a:	4614      	movlt	r4, r2
 801f51c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801f520:	d005      	beq.n	801f52e <__cvt+0x42>
 801f522:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801f526:	d100      	bne.n	801f52a <__cvt+0x3e>
 801f528:	3601      	adds	r6, #1
 801f52a:	2102      	movs	r1, #2
 801f52c:	e000      	b.n	801f530 <__cvt+0x44>
 801f52e:	2103      	movs	r1, #3
 801f530:	ab03      	add	r3, sp, #12
 801f532:	9301      	str	r3, [sp, #4]
 801f534:	ab02      	add	r3, sp, #8
 801f536:	9300      	str	r3, [sp, #0]
 801f538:	ec45 4b10 	vmov	d0, r4, r5
 801f53c:	4653      	mov	r3, sl
 801f53e:	4632      	mov	r2, r6
 801f540:	f001 fe22 	bl	8021188 <_dtoa_r>
 801f544:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801f548:	4607      	mov	r7, r0
 801f54a:	d102      	bne.n	801f552 <__cvt+0x66>
 801f54c:	f019 0f01 	tst.w	r9, #1
 801f550:	d022      	beq.n	801f598 <__cvt+0xac>
 801f552:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801f556:	eb07 0906 	add.w	r9, r7, r6
 801f55a:	d110      	bne.n	801f57e <__cvt+0x92>
 801f55c:	783b      	ldrb	r3, [r7, #0]
 801f55e:	2b30      	cmp	r3, #48	; 0x30
 801f560:	d10a      	bne.n	801f578 <__cvt+0x8c>
 801f562:	2200      	movs	r2, #0
 801f564:	2300      	movs	r3, #0
 801f566:	4620      	mov	r0, r4
 801f568:	4629      	mov	r1, r5
 801f56a:	f7fa faad 	bl	8019ac8 <__aeabi_dcmpeq>
 801f56e:	b918      	cbnz	r0, 801f578 <__cvt+0x8c>
 801f570:	f1c6 0601 	rsb	r6, r6, #1
 801f574:	f8ca 6000 	str.w	r6, [sl]
 801f578:	f8da 3000 	ldr.w	r3, [sl]
 801f57c:	4499      	add	r9, r3
 801f57e:	2200      	movs	r2, #0
 801f580:	2300      	movs	r3, #0
 801f582:	4620      	mov	r0, r4
 801f584:	4629      	mov	r1, r5
 801f586:	f7fa fa9f 	bl	8019ac8 <__aeabi_dcmpeq>
 801f58a:	b108      	cbz	r0, 801f590 <__cvt+0xa4>
 801f58c:	f8cd 900c 	str.w	r9, [sp, #12]
 801f590:	2230      	movs	r2, #48	; 0x30
 801f592:	9b03      	ldr	r3, [sp, #12]
 801f594:	454b      	cmp	r3, r9
 801f596:	d307      	bcc.n	801f5a8 <__cvt+0xbc>
 801f598:	9b03      	ldr	r3, [sp, #12]
 801f59a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f59c:	1bdb      	subs	r3, r3, r7
 801f59e:	4638      	mov	r0, r7
 801f5a0:	6013      	str	r3, [r2, #0]
 801f5a2:	b004      	add	sp, #16
 801f5a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f5a8:	1c59      	adds	r1, r3, #1
 801f5aa:	9103      	str	r1, [sp, #12]
 801f5ac:	701a      	strb	r2, [r3, #0]
 801f5ae:	e7f0      	b.n	801f592 <__cvt+0xa6>

0801f5b0 <__exponent>:
 801f5b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f5b2:	4603      	mov	r3, r0
 801f5b4:	2900      	cmp	r1, #0
 801f5b6:	bfb8      	it	lt
 801f5b8:	4249      	neglt	r1, r1
 801f5ba:	f803 2b02 	strb.w	r2, [r3], #2
 801f5be:	bfb4      	ite	lt
 801f5c0:	222d      	movlt	r2, #45	; 0x2d
 801f5c2:	222b      	movge	r2, #43	; 0x2b
 801f5c4:	2909      	cmp	r1, #9
 801f5c6:	7042      	strb	r2, [r0, #1]
 801f5c8:	dd2a      	ble.n	801f620 <__exponent+0x70>
 801f5ca:	f10d 0407 	add.w	r4, sp, #7
 801f5ce:	46a4      	mov	ip, r4
 801f5d0:	270a      	movs	r7, #10
 801f5d2:	46a6      	mov	lr, r4
 801f5d4:	460a      	mov	r2, r1
 801f5d6:	fb91 f6f7 	sdiv	r6, r1, r7
 801f5da:	fb07 1516 	mls	r5, r7, r6, r1
 801f5de:	3530      	adds	r5, #48	; 0x30
 801f5e0:	2a63      	cmp	r2, #99	; 0x63
 801f5e2:	f104 34ff 	add.w	r4, r4, #4294967295
 801f5e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801f5ea:	4631      	mov	r1, r6
 801f5ec:	dcf1      	bgt.n	801f5d2 <__exponent+0x22>
 801f5ee:	3130      	adds	r1, #48	; 0x30
 801f5f0:	f1ae 0502 	sub.w	r5, lr, #2
 801f5f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 801f5f8:	1c44      	adds	r4, r0, #1
 801f5fa:	4629      	mov	r1, r5
 801f5fc:	4561      	cmp	r1, ip
 801f5fe:	d30a      	bcc.n	801f616 <__exponent+0x66>
 801f600:	f10d 0209 	add.w	r2, sp, #9
 801f604:	eba2 020e 	sub.w	r2, r2, lr
 801f608:	4565      	cmp	r5, ip
 801f60a:	bf88      	it	hi
 801f60c:	2200      	movhi	r2, #0
 801f60e:	4413      	add	r3, r2
 801f610:	1a18      	subs	r0, r3, r0
 801f612:	b003      	add	sp, #12
 801f614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f616:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f61a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801f61e:	e7ed      	b.n	801f5fc <__exponent+0x4c>
 801f620:	2330      	movs	r3, #48	; 0x30
 801f622:	3130      	adds	r1, #48	; 0x30
 801f624:	7083      	strb	r3, [r0, #2]
 801f626:	70c1      	strb	r1, [r0, #3]
 801f628:	1d03      	adds	r3, r0, #4
 801f62a:	e7f1      	b.n	801f610 <__exponent+0x60>

0801f62c <_printf_float>:
 801f62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f630:	ed2d 8b02 	vpush	{d8}
 801f634:	b08d      	sub	sp, #52	; 0x34
 801f636:	460c      	mov	r4, r1
 801f638:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801f63c:	4616      	mov	r6, r2
 801f63e:	461f      	mov	r7, r3
 801f640:	4605      	mov	r5, r0
 801f642:	f002 fefd 	bl	8022440 <_localeconv_r>
 801f646:	f8d0 a000 	ldr.w	sl, [r0]
 801f64a:	4650      	mov	r0, sl
 801f64c:	f7f9 fe10 	bl	8019270 <strlen>
 801f650:	2300      	movs	r3, #0
 801f652:	930a      	str	r3, [sp, #40]	; 0x28
 801f654:	6823      	ldr	r3, [r4, #0]
 801f656:	9305      	str	r3, [sp, #20]
 801f658:	f8d8 3000 	ldr.w	r3, [r8]
 801f65c:	f894 b018 	ldrb.w	fp, [r4, #24]
 801f660:	3307      	adds	r3, #7
 801f662:	f023 0307 	bic.w	r3, r3, #7
 801f666:	f103 0208 	add.w	r2, r3, #8
 801f66a:	f8c8 2000 	str.w	r2, [r8]
 801f66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f672:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801f676:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801f67a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801f67e:	9307      	str	r3, [sp, #28]
 801f680:	f8cd 8018 	str.w	r8, [sp, #24]
 801f684:	ee08 0a10 	vmov	s16, r0
 801f688:	4b9f      	ldr	r3, [pc, #636]	; (801f908 <_printf_float+0x2dc>)
 801f68a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f68e:	f04f 32ff 	mov.w	r2, #4294967295
 801f692:	f7fa fa4b 	bl	8019b2c <__aeabi_dcmpun>
 801f696:	bb88      	cbnz	r0, 801f6fc <_printf_float+0xd0>
 801f698:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f69c:	4b9a      	ldr	r3, [pc, #616]	; (801f908 <_printf_float+0x2dc>)
 801f69e:	f04f 32ff 	mov.w	r2, #4294967295
 801f6a2:	f7fa fa25 	bl	8019af0 <__aeabi_dcmple>
 801f6a6:	bb48      	cbnz	r0, 801f6fc <_printf_float+0xd0>
 801f6a8:	2200      	movs	r2, #0
 801f6aa:	2300      	movs	r3, #0
 801f6ac:	4640      	mov	r0, r8
 801f6ae:	4649      	mov	r1, r9
 801f6b0:	f7fa fa14 	bl	8019adc <__aeabi_dcmplt>
 801f6b4:	b110      	cbz	r0, 801f6bc <_printf_float+0x90>
 801f6b6:	232d      	movs	r3, #45	; 0x2d
 801f6b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f6bc:	4b93      	ldr	r3, [pc, #588]	; (801f90c <_printf_float+0x2e0>)
 801f6be:	4894      	ldr	r0, [pc, #592]	; (801f910 <_printf_float+0x2e4>)
 801f6c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801f6c4:	bf94      	ite	ls
 801f6c6:	4698      	movls	r8, r3
 801f6c8:	4680      	movhi	r8, r0
 801f6ca:	2303      	movs	r3, #3
 801f6cc:	6123      	str	r3, [r4, #16]
 801f6ce:	9b05      	ldr	r3, [sp, #20]
 801f6d0:	f023 0204 	bic.w	r2, r3, #4
 801f6d4:	6022      	str	r2, [r4, #0]
 801f6d6:	f04f 0900 	mov.w	r9, #0
 801f6da:	9700      	str	r7, [sp, #0]
 801f6dc:	4633      	mov	r3, r6
 801f6de:	aa0b      	add	r2, sp, #44	; 0x2c
 801f6e0:	4621      	mov	r1, r4
 801f6e2:	4628      	mov	r0, r5
 801f6e4:	f000 f9d8 	bl	801fa98 <_printf_common>
 801f6e8:	3001      	adds	r0, #1
 801f6ea:	f040 8090 	bne.w	801f80e <_printf_float+0x1e2>
 801f6ee:	f04f 30ff 	mov.w	r0, #4294967295
 801f6f2:	b00d      	add	sp, #52	; 0x34
 801f6f4:	ecbd 8b02 	vpop	{d8}
 801f6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6fc:	4642      	mov	r2, r8
 801f6fe:	464b      	mov	r3, r9
 801f700:	4640      	mov	r0, r8
 801f702:	4649      	mov	r1, r9
 801f704:	f7fa fa12 	bl	8019b2c <__aeabi_dcmpun>
 801f708:	b140      	cbz	r0, 801f71c <_printf_float+0xf0>
 801f70a:	464b      	mov	r3, r9
 801f70c:	2b00      	cmp	r3, #0
 801f70e:	bfbc      	itt	lt
 801f710:	232d      	movlt	r3, #45	; 0x2d
 801f712:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801f716:	487f      	ldr	r0, [pc, #508]	; (801f914 <_printf_float+0x2e8>)
 801f718:	4b7f      	ldr	r3, [pc, #508]	; (801f918 <_printf_float+0x2ec>)
 801f71a:	e7d1      	b.n	801f6c0 <_printf_float+0x94>
 801f71c:	6863      	ldr	r3, [r4, #4]
 801f71e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801f722:	9206      	str	r2, [sp, #24]
 801f724:	1c5a      	adds	r2, r3, #1
 801f726:	d13f      	bne.n	801f7a8 <_printf_float+0x17c>
 801f728:	2306      	movs	r3, #6
 801f72a:	6063      	str	r3, [r4, #4]
 801f72c:	9b05      	ldr	r3, [sp, #20]
 801f72e:	6861      	ldr	r1, [r4, #4]
 801f730:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801f734:	2300      	movs	r3, #0
 801f736:	9303      	str	r3, [sp, #12]
 801f738:	ab0a      	add	r3, sp, #40	; 0x28
 801f73a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801f73e:	ab09      	add	r3, sp, #36	; 0x24
 801f740:	ec49 8b10 	vmov	d0, r8, r9
 801f744:	9300      	str	r3, [sp, #0]
 801f746:	6022      	str	r2, [r4, #0]
 801f748:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801f74c:	4628      	mov	r0, r5
 801f74e:	f7ff fecd 	bl	801f4ec <__cvt>
 801f752:	9b06      	ldr	r3, [sp, #24]
 801f754:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f756:	2b47      	cmp	r3, #71	; 0x47
 801f758:	4680      	mov	r8, r0
 801f75a:	d108      	bne.n	801f76e <_printf_float+0x142>
 801f75c:	1cc8      	adds	r0, r1, #3
 801f75e:	db02      	blt.n	801f766 <_printf_float+0x13a>
 801f760:	6863      	ldr	r3, [r4, #4]
 801f762:	4299      	cmp	r1, r3
 801f764:	dd41      	ble.n	801f7ea <_printf_float+0x1be>
 801f766:	f1ab 0b02 	sub.w	fp, fp, #2
 801f76a:	fa5f fb8b 	uxtb.w	fp, fp
 801f76e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801f772:	d820      	bhi.n	801f7b6 <_printf_float+0x18a>
 801f774:	3901      	subs	r1, #1
 801f776:	465a      	mov	r2, fp
 801f778:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801f77c:	9109      	str	r1, [sp, #36]	; 0x24
 801f77e:	f7ff ff17 	bl	801f5b0 <__exponent>
 801f782:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f784:	1813      	adds	r3, r2, r0
 801f786:	2a01      	cmp	r2, #1
 801f788:	4681      	mov	r9, r0
 801f78a:	6123      	str	r3, [r4, #16]
 801f78c:	dc02      	bgt.n	801f794 <_printf_float+0x168>
 801f78e:	6822      	ldr	r2, [r4, #0]
 801f790:	07d2      	lsls	r2, r2, #31
 801f792:	d501      	bpl.n	801f798 <_printf_float+0x16c>
 801f794:	3301      	adds	r3, #1
 801f796:	6123      	str	r3, [r4, #16]
 801f798:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801f79c:	2b00      	cmp	r3, #0
 801f79e:	d09c      	beq.n	801f6da <_printf_float+0xae>
 801f7a0:	232d      	movs	r3, #45	; 0x2d
 801f7a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f7a6:	e798      	b.n	801f6da <_printf_float+0xae>
 801f7a8:	9a06      	ldr	r2, [sp, #24]
 801f7aa:	2a47      	cmp	r2, #71	; 0x47
 801f7ac:	d1be      	bne.n	801f72c <_printf_float+0x100>
 801f7ae:	2b00      	cmp	r3, #0
 801f7b0:	d1bc      	bne.n	801f72c <_printf_float+0x100>
 801f7b2:	2301      	movs	r3, #1
 801f7b4:	e7b9      	b.n	801f72a <_printf_float+0xfe>
 801f7b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801f7ba:	d118      	bne.n	801f7ee <_printf_float+0x1c2>
 801f7bc:	2900      	cmp	r1, #0
 801f7be:	6863      	ldr	r3, [r4, #4]
 801f7c0:	dd0b      	ble.n	801f7da <_printf_float+0x1ae>
 801f7c2:	6121      	str	r1, [r4, #16]
 801f7c4:	b913      	cbnz	r3, 801f7cc <_printf_float+0x1a0>
 801f7c6:	6822      	ldr	r2, [r4, #0]
 801f7c8:	07d0      	lsls	r0, r2, #31
 801f7ca:	d502      	bpl.n	801f7d2 <_printf_float+0x1a6>
 801f7cc:	3301      	adds	r3, #1
 801f7ce:	440b      	add	r3, r1
 801f7d0:	6123      	str	r3, [r4, #16]
 801f7d2:	65a1      	str	r1, [r4, #88]	; 0x58
 801f7d4:	f04f 0900 	mov.w	r9, #0
 801f7d8:	e7de      	b.n	801f798 <_printf_float+0x16c>
 801f7da:	b913      	cbnz	r3, 801f7e2 <_printf_float+0x1b6>
 801f7dc:	6822      	ldr	r2, [r4, #0]
 801f7de:	07d2      	lsls	r2, r2, #31
 801f7e0:	d501      	bpl.n	801f7e6 <_printf_float+0x1ba>
 801f7e2:	3302      	adds	r3, #2
 801f7e4:	e7f4      	b.n	801f7d0 <_printf_float+0x1a4>
 801f7e6:	2301      	movs	r3, #1
 801f7e8:	e7f2      	b.n	801f7d0 <_printf_float+0x1a4>
 801f7ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801f7ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f7f0:	4299      	cmp	r1, r3
 801f7f2:	db05      	blt.n	801f800 <_printf_float+0x1d4>
 801f7f4:	6823      	ldr	r3, [r4, #0]
 801f7f6:	6121      	str	r1, [r4, #16]
 801f7f8:	07d8      	lsls	r0, r3, #31
 801f7fa:	d5ea      	bpl.n	801f7d2 <_printf_float+0x1a6>
 801f7fc:	1c4b      	adds	r3, r1, #1
 801f7fe:	e7e7      	b.n	801f7d0 <_printf_float+0x1a4>
 801f800:	2900      	cmp	r1, #0
 801f802:	bfd4      	ite	le
 801f804:	f1c1 0202 	rsble	r2, r1, #2
 801f808:	2201      	movgt	r2, #1
 801f80a:	4413      	add	r3, r2
 801f80c:	e7e0      	b.n	801f7d0 <_printf_float+0x1a4>
 801f80e:	6823      	ldr	r3, [r4, #0]
 801f810:	055a      	lsls	r2, r3, #21
 801f812:	d407      	bmi.n	801f824 <_printf_float+0x1f8>
 801f814:	6923      	ldr	r3, [r4, #16]
 801f816:	4642      	mov	r2, r8
 801f818:	4631      	mov	r1, r6
 801f81a:	4628      	mov	r0, r5
 801f81c:	47b8      	blx	r7
 801f81e:	3001      	adds	r0, #1
 801f820:	d12c      	bne.n	801f87c <_printf_float+0x250>
 801f822:	e764      	b.n	801f6ee <_printf_float+0xc2>
 801f824:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801f828:	f240 80e0 	bls.w	801f9ec <_printf_float+0x3c0>
 801f82c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801f830:	2200      	movs	r2, #0
 801f832:	2300      	movs	r3, #0
 801f834:	f7fa f948 	bl	8019ac8 <__aeabi_dcmpeq>
 801f838:	2800      	cmp	r0, #0
 801f83a:	d034      	beq.n	801f8a6 <_printf_float+0x27a>
 801f83c:	4a37      	ldr	r2, [pc, #220]	; (801f91c <_printf_float+0x2f0>)
 801f83e:	2301      	movs	r3, #1
 801f840:	4631      	mov	r1, r6
 801f842:	4628      	mov	r0, r5
 801f844:	47b8      	blx	r7
 801f846:	3001      	adds	r0, #1
 801f848:	f43f af51 	beq.w	801f6ee <_printf_float+0xc2>
 801f84c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f850:	429a      	cmp	r2, r3
 801f852:	db02      	blt.n	801f85a <_printf_float+0x22e>
 801f854:	6823      	ldr	r3, [r4, #0]
 801f856:	07d8      	lsls	r0, r3, #31
 801f858:	d510      	bpl.n	801f87c <_printf_float+0x250>
 801f85a:	ee18 3a10 	vmov	r3, s16
 801f85e:	4652      	mov	r2, sl
 801f860:	4631      	mov	r1, r6
 801f862:	4628      	mov	r0, r5
 801f864:	47b8      	blx	r7
 801f866:	3001      	adds	r0, #1
 801f868:	f43f af41 	beq.w	801f6ee <_printf_float+0xc2>
 801f86c:	f04f 0800 	mov.w	r8, #0
 801f870:	f104 091a 	add.w	r9, r4, #26
 801f874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f876:	3b01      	subs	r3, #1
 801f878:	4543      	cmp	r3, r8
 801f87a:	dc09      	bgt.n	801f890 <_printf_float+0x264>
 801f87c:	6823      	ldr	r3, [r4, #0]
 801f87e:	079b      	lsls	r3, r3, #30
 801f880:	f100 8105 	bmi.w	801fa8e <_printf_float+0x462>
 801f884:	68e0      	ldr	r0, [r4, #12]
 801f886:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f888:	4298      	cmp	r0, r3
 801f88a:	bfb8      	it	lt
 801f88c:	4618      	movlt	r0, r3
 801f88e:	e730      	b.n	801f6f2 <_printf_float+0xc6>
 801f890:	2301      	movs	r3, #1
 801f892:	464a      	mov	r2, r9
 801f894:	4631      	mov	r1, r6
 801f896:	4628      	mov	r0, r5
 801f898:	47b8      	blx	r7
 801f89a:	3001      	adds	r0, #1
 801f89c:	f43f af27 	beq.w	801f6ee <_printf_float+0xc2>
 801f8a0:	f108 0801 	add.w	r8, r8, #1
 801f8a4:	e7e6      	b.n	801f874 <_printf_float+0x248>
 801f8a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f8a8:	2b00      	cmp	r3, #0
 801f8aa:	dc39      	bgt.n	801f920 <_printf_float+0x2f4>
 801f8ac:	4a1b      	ldr	r2, [pc, #108]	; (801f91c <_printf_float+0x2f0>)
 801f8ae:	2301      	movs	r3, #1
 801f8b0:	4631      	mov	r1, r6
 801f8b2:	4628      	mov	r0, r5
 801f8b4:	47b8      	blx	r7
 801f8b6:	3001      	adds	r0, #1
 801f8b8:	f43f af19 	beq.w	801f6ee <_printf_float+0xc2>
 801f8bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f8c0:	4313      	orrs	r3, r2
 801f8c2:	d102      	bne.n	801f8ca <_printf_float+0x29e>
 801f8c4:	6823      	ldr	r3, [r4, #0]
 801f8c6:	07d9      	lsls	r1, r3, #31
 801f8c8:	d5d8      	bpl.n	801f87c <_printf_float+0x250>
 801f8ca:	ee18 3a10 	vmov	r3, s16
 801f8ce:	4652      	mov	r2, sl
 801f8d0:	4631      	mov	r1, r6
 801f8d2:	4628      	mov	r0, r5
 801f8d4:	47b8      	blx	r7
 801f8d6:	3001      	adds	r0, #1
 801f8d8:	f43f af09 	beq.w	801f6ee <_printf_float+0xc2>
 801f8dc:	f04f 0900 	mov.w	r9, #0
 801f8e0:	f104 0a1a 	add.w	sl, r4, #26
 801f8e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f8e6:	425b      	negs	r3, r3
 801f8e8:	454b      	cmp	r3, r9
 801f8ea:	dc01      	bgt.n	801f8f0 <_printf_float+0x2c4>
 801f8ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f8ee:	e792      	b.n	801f816 <_printf_float+0x1ea>
 801f8f0:	2301      	movs	r3, #1
 801f8f2:	4652      	mov	r2, sl
 801f8f4:	4631      	mov	r1, r6
 801f8f6:	4628      	mov	r0, r5
 801f8f8:	47b8      	blx	r7
 801f8fa:	3001      	adds	r0, #1
 801f8fc:	f43f aef7 	beq.w	801f6ee <_printf_float+0xc2>
 801f900:	f109 0901 	add.w	r9, r9, #1
 801f904:	e7ee      	b.n	801f8e4 <_printf_float+0x2b8>
 801f906:	bf00      	nop
 801f908:	7fefffff 	.word	0x7fefffff
 801f90c:	08023f18 	.word	0x08023f18
 801f910:	08023f1c 	.word	0x08023f1c
 801f914:	08023f24 	.word	0x08023f24
 801f918:	08023f20 	.word	0x08023f20
 801f91c:	08023f28 	.word	0x08023f28
 801f920:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f922:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f924:	429a      	cmp	r2, r3
 801f926:	bfa8      	it	ge
 801f928:	461a      	movge	r2, r3
 801f92a:	2a00      	cmp	r2, #0
 801f92c:	4691      	mov	r9, r2
 801f92e:	dc37      	bgt.n	801f9a0 <_printf_float+0x374>
 801f930:	f04f 0b00 	mov.w	fp, #0
 801f934:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f938:	f104 021a 	add.w	r2, r4, #26
 801f93c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f93e:	9305      	str	r3, [sp, #20]
 801f940:	eba3 0309 	sub.w	r3, r3, r9
 801f944:	455b      	cmp	r3, fp
 801f946:	dc33      	bgt.n	801f9b0 <_printf_float+0x384>
 801f948:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f94c:	429a      	cmp	r2, r3
 801f94e:	db3b      	blt.n	801f9c8 <_printf_float+0x39c>
 801f950:	6823      	ldr	r3, [r4, #0]
 801f952:	07da      	lsls	r2, r3, #31
 801f954:	d438      	bmi.n	801f9c8 <_printf_float+0x39c>
 801f956:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f958:	9b05      	ldr	r3, [sp, #20]
 801f95a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f95c:	1ad3      	subs	r3, r2, r3
 801f95e:	eba2 0901 	sub.w	r9, r2, r1
 801f962:	4599      	cmp	r9, r3
 801f964:	bfa8      	it	ge
 801f966:	4699      	movge	r9, r3
 801f968:	f1b9 0f00 	cmp.w	r9, #0
 801f96c:	dc35      	bgt.n	801f9da <_printf_float+0x3ae>
 801f96e:	f04f 0800 	mov.w	r8, #0
 801f972:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f976:	f104 0a1a 	add.w	sl, r4, #26
 801f97a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f97e:	1a9b      	subs	r3, r3, r2
 801f980:	eba3 0309 	sub.w	r3, r3, r9
 801f984:	4543      	cmp	r3, r8
 801f986:	f77f af79 	ble.w	801f87c <_printf_float+0x250>
 801f98a:	2301      	movs	r3, #1
 801f98c:	4652      	mov	r2, sl
 801f98e:	4631      	mov	r1, r6
 801f990:	4628      	mov	r0, r5
 801f992:	47b8      	blx	r7
 801f994:	3001      	adds	r0, #1
 801f996:	f43f aeaa 	beq.w	801f6ee <_printf_float+0xc2>
 801f99a:	f108 0801 	add.w	r8, r8, #1
 801f99e:	e7ec      	b.n	801f97a <_printf_float+0x34e>
 801f9a0:	4613      	mov	r3, r2
 801f9a2:	4631      	mov	r1, r6
 801f9a4:	4642      	mov	r2, r8
 801f9a6:	4628      	mov	r0, r5
 801f9a8:	47b8      	blx	r7
 801f9aa:	3001      	adds	r0, #1
 801f9ac:	d1c0      	bne.n	801f930 <_printf_float+0x304>
 801f9ae:	e69e      	b.n	801f6ee <_printf_float+0xc2>
 801f9b0:	2301      	movs	r3, #1
 801f9b2:	4631      	mov	r1, r6
 801f9b4:	4628      	mov	r0, r5
 801f9b6:	9205      	str	r2, [sp, #20]
 801f9b8:	47b8      	blx	r7
 801f9ba:	3001      	adds	r0, #1
 801f9bc:	f43f ae97 	beq.w	801f6ee <_printf_float+0xc2>
 801f9c0:	9a05      	ldr	r2, [sp, #20]
 801f9c2:	f10b 0b01 	add.w	fp, fp, #1
 801f9c6:	e7b9      	b.n	801f93c <_printf_float+0x310>
 801f9c8:	ee18 3a10 	vmov	r3, s16
 801f9cc:	4652      	mov	r2, sl
 801f9ce:	4631      	mov	r1, r6
 801f9d0:	4628      	mov	r0, r5
 801f9d2:	47b8      	blx	r7
 801f9d4:	3001      	adds	r0, #1
 801f9d6:	d1be      	bne.n	801f956 <_printf_float+0x32a>
 801f9d8:	e689      	b.n	801f6ee <_printf_float+0xc2>
 801f9da:	9a05      	ldr	r2, [sp, #20]
 801f9dc:	464b      	mov	r3, r9
 801f9de:	4442      	add	r2, r8
 801f9e0:	4631      	mov	r1, r6
 801f9e2:	4628      	mov	r0, r5
 801f9e4:	47b8      	blx	r7
 801f9e6:	3001      	adds	r0, #1
 801f9e8:	d1c1      	bne.n	801f96e <_printf_float+0x342>
 801f9ea:	e680      	b.n	801f6ee <_printf_float+0xc2>
 801f9ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f9ee:	2a01      	cmp	r2, #1
 801f9f0:	dc01      	bgt.n	801f9f6 <_printf_float+0x3ca>
 801f9f2:	07db      	lsls	r3, r3, #31
 801f9f4:	d538      	bpl.n	801fa68 <_printf_float+0x43c>
 801f9f6:	2301      	movs	r3, #1
 801f9f8:	4642      	mov	r2, r8
 801f9fa:	4631      	mov	r1, r6
 801f9fc:	4628      	mov	r0, r5
 801f9fe:	47b8      	blx	r7
 801fa00:	3001      	adds	r0, #1
 801fa02:	f43f ae74 	beq.w	801f6ee <_printf_float+0xc2>
 801fa06:	ee18 3a10 	vmov	r3, s16
 801fa0a:	4652      	mov	r2, sl
 801fa0c:	4631      	mov	r1, r6
 801fa0e:	4628      	mov	r0, r5
 801fa10:	47b8      	blx	r7
 801fa12:	3001      	adds	r0, #1
 801fa14:	f43f ae6b 	beq.w	801f6ee <_printf_float+0xc2>
 801fa18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801fa1c:	2200      	movs	r2, #0
 801fa1e:	2300      	movs	r3, #0
 801fa20:	f7fa f852 	bl	8019ac8 <__aeabi_dcmpeq>
 801fa24:	b9d8      	cbnz	r0, 801fa5e <_printf_float+0x432>
 801fa26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fa28:	f108 0201 	add.w	r2, r8, #1
 801fa2c:	3b01      	subs	r3, #1
 801fa2e:	4631      	mov	r1, r6
 801fa30:	4628      	mov	r0, r5
 801fa32:	47b8      	blx	r7
 801fa34:	3001      	adds	r0, #1
 801fa36:	d10e      	bne.n	801fa56 <_printf_float+0x42a>
 801fa38:	e659      	b.n	801f6ee <_printf_float+0xc2>
 801fa3a:	2301      	movs	r3, #1
 801fa3c:	4652      	mov	r2, sl
 801fa3e:	4631      	mov	r1, r6
 801fa40:	4628      	mov	r0, r5
 801fa42:	47b8      	blx	r7
 801fa44:	3001      	adds	r0, #1
 801fa46:	f43f ae52 	beq.w	801f6ee <_printf_float+0xc2>
 801fa4a:	f108 0801 	add.w	r8, r8, #1
 801fa4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fa50:	3b01      	subs	r3, #1
 801fa52:	4543      	cmp	r3, r8
 801fa54:	dcf1      	bgt.n	801fa3a <_printf_float+0x40e>
 801fa56:	464b      	mov	r3, r9
 801fa58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801fa5c:	e6dc      	b.n	801f818 <_printf_float+0x1ec>
 801fa5e:	f04f 0800 	mov.w	r8, #0
 801fa62:	f104 0a1a 	add.w	sl, r4, #26
 801fa66:	e7f2      	b.n	801fa4e <_printf_float+0x422>
 801fa68:	2301      	movs	r3, #1
 801fa6a:	4642      	mov	r2, r8
 801fa6c:	e7df      	b.n	801fa2e <_printf_float+0x402>
 801fa6e:	2301      	movs	r3, #1
 801fa70:	464a      	mov	r2, r9
 801fa72:	4631      	mov	r1, r6
 801fa74:	4628      	mov	r0, r5
 801fa76:	47b8      	blx	r7
 801fa78:	3001      	adds	r0, #1
 801fa7a:	f43f ae38 	beq.w	801f6ee <_printf_float+0xc2>
 801fa7e:	f108 0801 	add.w	r8, r8, #1
 801fa82:	68e3      	ldr	r3, [r4, #12]
 801fa84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801fa86:	1a5b      	subs	r3, r3, r1
 801fa88:	4543      	cmp	r3, r8
 801fa8a:	dcf0      	bgt.n	801fa6e <_printf_float+0x442>
 801fa8c:	e6fa      	b.n	801f884 <_printf_float+0x258>
 801fa8e:	f04f 0800 	mov.w	r8, #0
 801fa92:	f104 0919 	add.w	r9, r4, #25
 801fa96:	e7f4      	b.n	801fa82 <_printf_float+0x456>

0801fa98 <_printf_common>:
 801fa98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fa9c:	4616      	mov	r6, r2
 801fa9e:	4699      	mov	r9, r3
 801faa0:	688a      	ldr	r2, [r1, #8]
 801faa2:	690b      	ldr	r3, [r1, #16]
 801faa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801faa8:	4293      	cmp	r3, r2
 801faaa:	bfb8      	it	lt
 801faac:	4613      	movlt	r3, r2
 801faae:	6033      	str	r3, [r6, #0]
 801fab0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801fab4:	4607      	mov	r7, r0
 801fab6:	460c      	mov	r4, r1
 801fab8:	b10a      	cbz	r2, 801fabe <_printf_common+0x26>
 801faba:	3301      	adds	r3, #1
 801fabc:	6033      	str	r3, [r6, #0]
 801fabe:	6823      	ldr	r3, [r4, #0]
 801fac0:	0699      	lsls	r1, r3, #26
 801fac2:	bf42      	ittt	mi
 801fac4:	6833      	ldrmi	r3, [r6, #0]
 801fac6:	3302      	addmi	r3, #2
 801fac8:	6033      	strmi	r3, [r6, #0]
 801faca:	6825      	ldr	r5, [r4, #0]
 801facc:	f015 0506 	ands.w	r5, r5, #6
 801fad0:	d106      	bne.n	801fae0 <_printf_common+0x48>
 801fad2:	f104 0a19 	add.w	sl, r4, #25
 801fad6:	68e3      	ldr	r3, [r4, #12]
 801fad8:	6832      	ldr	r2, [r6, #0]
 801fada:	1a9b      	subs	r3, r3, r2
 801fadc:	42ab      	cmp	r3, r5
 801fade:	dc26      	bgt.n	801fb2e <_printf_common+0x96>
 801fae0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801fae4:	1e13      	subs	r3, r2, #0
 801fae6:	6822      	ldr	r2, [r4, #0]
 801fae8:	bf18      	it	ne
 801faea:	2301      	movne	r3, #1
 801faec:	0692      	lsls	r2, r2, #26
 801faee:	d42b      	bmi.n	801fb48 <_printf_common+0xb0>
 801faf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801faf4:	4649      	mov	r1, r9
 801faf6:	4638      	mov	r0, r7
 801faf8:	47c0      	blx	r8
 801fafa:	3001      	adds	r0, #1
 801fafc:	d01e      	beq.n	801fb3c <_printf_common+0xa4>
 801fafe:	6823      	ldr	r3, [r4, #0]
 801fb00:	68e5      	ldr	r5, [r4, #12]
 801fb02:	6832      	ldr	r2, [r6, #0]
 801fb04:	f003 0306 	and.w	r3, r3, #6
 801fb08:	2b04      	cmp	r3, #4
 801fb0a:	bf08      	it	eq
 801fb0c:	1aad      	subeq	r5, r5, r2
 801fb0e:	68a3      	ldr	r3, [r4, #8]
 801fb10:	6922      	ldr	r2, [r4, #16]
 801fb12:	bf0c      	ite	eq
 801fb14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801fb18:	2500      	movne	r5, #0
 801fb1a:	4293      	cmp	r3, r2
 801fb1c:	bfc4      	itt	gt
 801fb1e:	1a9b      	subgt	r3, r3, r2
 801fb20:	18ed      	addgt	r5, r5, r3
 801fb22:	2600      	movs	r6, #0
 801fb24:	341a      	adds	r4, #26
 801fb26:	42b5      	cmp	r5, r6
 801fb28:	d11a      	bne.n	801fb60 <_printf_common+0xc8>
 801fb2a:	2000      	movs	r0, #0
 801fb2c:	e008      	b.n	801fb40 <_printf_common+0xa8>
 801fb2e:	2301      	movs	r3, #1
 801fb30:	4652      	mov	r2, sl
 801fb32:	4649      	mov	r1, r9
 801fb34:	4638      	mov	r0, r7
 801fb36:	47c0      	blx	r8
 801fb38:	3001      	adds	r0, #1
 801fb3a:	d103      	bne.n	801fb44 <_printf_common+0xac>
 801fb3c:	f04f 30ff 	mov.w	r0, #4294967295
 801fb40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fb44:	3501      	adds	r5, #1
 801fb46:	e7c6      	b.n	801fad6 <_printf_common+0x3e>
 801fb48:	18e1      	adds	r1, r4, r3
 801fb4a:	1c5a      	adds	r2, r3, #1
 801fb4c:	2030      	movs	r0, #48	; 0x30
 801fb4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801fb52:	4422      	add	r2, r4
 801fb54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801fb58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801fb5c:	3302      	adds	r3, #2
 801fb5e:	e7c7      	b.n	801faf0 <_printf_common+0x58>
 801fb60:	2301      	movs	r3, #1
 801fb62:	4622      	mov	r2, r4
 801fb64:	4649      	mov	r1, r9
 801fb66:	4638      	mov	r0, r7
 801fb68:	47c0      	blx	r8
 801fb6a:	3001      	adds	r0, #1
 801fb6c:	d0e6      	beq.n	801fb3c <_printf_common+0xa4>
 801fb6e:	3601      	adds	r6, #1
 801fb70:	e7d9      	b.n	801fb26 <_printf_common+0x8e>
	...

0801fb74 <_printf_i>:
 801fb74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801fb78:	460c      	mov	r4, r1
 801fb7a:	4691      	mov	r9, r2
 801fb7c:	7e27      	ldrb	r7, [r4, #24]
 801fb7e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801fb80:	2f78      	cmp	r7, #120	; 0x78
 801fb82:	4680      	mov	r8, r0
 801fb84:	469a      	mov	sl, r3
 801fb86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801fb8a:	d807      	bhi.n	801fb9c <_printf_i+0x28>
 801fb8c:	2f62      	cmp	r7, #98	; 0x62
 801fb8e:	d80a      	bhi.n	801fba6 <_printf_i+0x32>
 801fb90:	2f00      	cmp	r7, #0
 801fb92:	f000 80d8 	beq.w	801fd46 <_printf_i+0x1d2>
 801fb96:	2f58      	cmp	r7, #88	; 0x58
 801fb98:	f000 80a3 	beq.w	801fce2 <_printf_i+0x16e>
 801fb9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801fba0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801fba4:	e03a      	b.n	801fc1c <_printf_i+0xa8>
 801fba6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801fbaa:	2b15      	cmp	r3, #21
 801fbac:	d8f6      	bhi.n	801fb9c <_printf_i+0x28>
 801fbae:	a001      	add	r0, pc, #4	; (adr r0, 801fbb4 <_printf_i+0x40>)
 801fbb0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801fbb4:	0801fc0d 	.word	0x0801fc0d
 801fbb8:	0801fc21 	.word	0x0801fc21
 801fbbc:	0801fb9d 	.word	0x0801fb9d
 801fbc0:	0801fb9d 	.word	0x0801fb9d
 801fbc4:	0801fb9d 	.word	0x0801fb9d
 801fbc8:	0801fb9d 	.word	0x0801fb9d
 801fbcc:	0801fc21 	.word	0x0801fc21
 801fbd0:	0801fb9d 	.word	0x0801fb9d
 801fbd4:	0801fb9d 	.word	0x0801fb9d
 801fbd8:	0801fb9d 	.word	0x0801fb9d
 801fbdc:	0801fb9d 	.word	0x0801fb9d
 801fbe0:	0801fd2d 	.word	0x0801fd2d
 801fbe4:	0801fc51 	.word	0x0801fc51
 801fbe8:	0801fd0f 	.word	0x0801fd0f
 801fbec:	0801fb9d 	.word	0x0801fb9d
 801fbf0:	0801fb9d 	.word	0x0801fb9d
 801fbf4:	0801fd4f 	.word	0x0801fd4f
 801fbf8:	0801fb9d 	.word	0x0801fb9d
 801fbfc:	0801fc51 	.word	0x0801fc51
 801fc00:	0801fb9d 	.word	0x0801fb9d
 801fc04:	0801fb9d 	.word	0x0801fb9d
 801fc08:	0801fd17 	.word	0x0801fd17
 801fc0c:	680b      	ldr	r3, [r1, #0]
 801fc0e:	1d1a      	adds	r2, r3, #4
 801fc10:	681b      	ldr	r3, [r3, #0]
 801fc12:	600a      	str	r2, [r1, #0]
 801fc14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801fc18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801fc1c:	2301      	movs	r3, #1
 801fc1e:	e0a3      	b.n	801fd68 <_printf_i+0x1f4>
 801fc20:	6825      	ldr	r5, [r4, #0]
 801fc22:	6808      	ldr	r0, [r1, #0]
 801fc24:	062e      	lsls	r6, r5, #24
 801fc26:	f100 0304 	add.w	r3, r0, #4
 801fc2a:	d50a      	bpl.n	801fc42 <_printf_i+0xce>
 801fc2c:	6805      	ldr	r5, [r0, #0]
 801fc2e:	600b      	str	r3, [r1, #0]
 801fc30:	2d00      	cmp	r5, #0
 801fc32:	da03      	bge.n	801fc3c <_printf_i+0xc8>
 801fc34:	232d      	movs	r3, #45	; 0x2d
 801fc36:	426d      	negs	r5, r5
 801fc38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fc3c:	485e      	ldr	r0, [pc, #376]	; (801fdb8 <_printf_i+0x244>)
 801fc3e:	230a      	movs	r3, #10
 801fc40:	e019      	b.n	801fc76 <_printf_i+0x102>
 801fc42:	f015 0f40 	tst.w	r5, #64	; 0x40
 801fc46:	6805      	ldr	r5, [r0, #0]
 801fc48:	600b      	str	r3, [r1, #0]
 801fc4a:	bf18      	it	ne
 801fc4c:	b22d      	sxthne	r5, r5
 801fc4e:	e7ef      	b.n	801fc30 <_printf_i+0xbc>
 801fc50:	680b      	ldr	r3, [r1, #0]
 801fc52:	6825      	ldr	r5, [r4, #0]
 801fc54:	1d18      	adds	r0, r3, #4
 801fc56:	6008      	str	r0, [r1, #0]
 801fc58:	0628      	lsls	r0, r5, #24
 801fc5a:	d501      	bpl.n	801fc60 <_printf_i+0xec>
 801fc5c:	681d      	ldr	r5, [r3, #0]
 801fc5e:	e002      	b.n	801fc66 <_printf_i+0xf2>
 801fc60:	0669      	lsls	r1, r5, #25
 801fc62:	d5fb      	bpl.n	801fc5c <_printf_i+0xe8>
 801fc64:	881d      	ldrh	r5, [r3, #0]
 801fc66:	4854      	ldr	r0, [pc, #336]	; (801fdb8 <_printf_i+0x244>)
 801fc68:	2f6f      	cmp	r7, #111	; 0x6f
 801fc6a:	bf0c      	ite	eq
 801fc6c:	2308      	moveq	r3, #8
 801fc6e:	230a      	movne	r3, #10
 801fc70:	2100      	movs	r1, #0
 801fc72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801fc76:	6866      	ldr	r6, [r4, #4]
 801fc78:	60a6      	str	r6, [r4, #8]
 801fc7a:	2e00      	cmp	r6, #0
 801fc7c:	bfa2      	ittt	ge
 801fc7e:	6821      	ldrge	r1, [r4, #0]
 801fc80:	f021 0104 	bicge.w	r1, r1, #4
 801fc84:	6021      	strge	r1, [r4, #0]
 801fc86:	b90d      	cbnz	r5, 801fc8c <_printf_i+0x118>
 801fc88:	2e00      	cmp	r6, #0
 801fc8a:	d04d      	beq.n	801fd28 <_printf_i+0x1b4>
 801fc8c:	4616      	mov	r6, r2
 801fc8e:	fbb5 f1f3 	udiv	r1, r5, r3
 801fc92:	fb03 5711 	mls	r7, r3, r1, r5
 801fc96:	5dc7      	ldrb	r7, [r0, r7]
 801fc98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801fc9c:	462f      	mov	r7, r5
 801fc9e:	42bb      	cmp	r3, r7
 801fca0:	460d      	mov	r5, r1
 801fca2:	d9f4      	bls.n	801fc8e <_printf_i+0x11a>
 801fca4:	2b08      	cmp	r3, #8
 801fca6:	d10b      	bne.n	801fcc0 <_printf_i+0x14c>
 801fca8:	6823      	ldr	r3, [r4, #0]
 801fcaa:	07df      	lsls	r7, r3, #31
 801fcac:	d508      	bpl.n	801fcc0 <_printf_i+0x14c>
 801fcae:	6923      	ldr	r3, [r4, #16]
 801fcb0:	6861      	ldr	r1, [r4, #4]
 801fcb2:	4299      	cmp	r1, r3
 801fcb4:	bfde      	ittt	le
 801fcb6:	2330      	movle	r3, #48	; 0x30
 801fcb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 801fcbc:	f106 36ff 	addle.w	r6, r6, #4294967295
 801fcc0:	1b92      	subs	r2, r2, r6
 801fcc2:	6122      	str	r2, [r4, #16]
 801fcc4:	f8cd a000 	str.w	sl, [sp]
 801fcc8:	464b      	mov	r3, r9
 801fcca:	aa03      	add	r2, sp, #12
 801fccc:	4621      	mov	r1, r4
 801fcce:	4640      	mov	r0, r8
 801fcd0:	f7ff fee2 	bl	801fa98 <_printf_common>
 801fcd4:	3001      	adds	r0, #1
 801fcd6:	d14c      	bne.n	801fd72 <_printf_i+0x1fe>
 801fcd8:	f04f 30ff 	mov.w	r0, #4294967295
 801fcdc:	b004      	add	sp, #16
 801fcde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fce2:	4835      	ldr	r0, [pc, #212]	; (801fdb8 <_printf_i+0x244>)
 801fce4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801fce8:	6823      	ldr	r3, [r4, #0]
 801fcea:	680e      	ldr	r6, [r1, #0]
 801fcec:	061f      	lsls	r7, r3, #24
 801fcee:	f856 5b04 	ldr.w	r5, [r6], #4
 801fcf2:	600e      	str	r6, [r1, #0]
 801fcf4:	d514      	bpl.n	801fd20 <_printf_i+0x1ac>
 801fcf6:	07d9      	lsls	r1, r3, #31
 801fcf8:	bf44      	itt	mi
 801fcfa:	f043 0320 	orrmi.w	r3, r3, #32
 801fcfe:	6023      	strmi	r3, [r4, #0]
 801fd00:	b91d      	cbnz	r5, 801fd0a <_printf_i+0x196>
 801fd02:	6823      	ldr	r3, [r4, #0]
 801fd04:	f023 0320 	bic.w	r3, r3, #32
 801fd08:	6023      	str	r3, [r4, #0]
 801fd0a:	2310      	movs	r3, #16
 801fd0c:	e7b0      	b.n	801fc70 <_printf_i+0xfc>
 801fd0e:	6823      	ldr	r3, [r4, #0]
 801fd10:	f043 0320 	orr.w	r3, r3, #32
 801fd14:	6023      	str	r3, [r4, #0]
 801fd16:	2378      	movs	r3, #120	; 0x78
 801fd18:	4828      	ldr	r0, [pc, #160]	; (801fdbc <_printf_i+0x248>)
 801fd1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801fd1e:	e7e3      	b.n	801fce8 <_printf_i+0x174>
 801fd20:	065e      	lsls	r6, r3, #25
 801fd22:	bf48      	it	mi
 801fd24:	b2ad      	uxthmi	r5, r5
 801fd26:	e7e6      	b.n	801fcf6 <_printf_i+0x182>
 801fd28:	4616      	mov	r6, r2
 801fd2a:	e7bb      	b.n	801fca4 <_printf_i+0x130>
 801fd2c:	680b      	ldr	r3, [r1, #0]
 801fd2e:	6826      	ldr	r6, [r4, #0]
 801fd30:	6960      	ldr	r0, [r4, #20]
 801fd32:	1d1d      	adds	r5, r3, #4
 801fd34:	600d      	str	r5, [r1, #0]
 801fd36:	0635      	lsls	r5, r6, #24
 801fd38:	681b      	ldr	r3, [r3, #0]
 801fd3a:	d501      	bpl.n	801fd40 <_printf_i+0x1cc>
 801fd3c:	6018      	str	r0, [r3, #0]
 801fd3e:	e002      	b.n	801fd46 <_printf_i+0x1d2>
 801fd40:	0671      	lsls	r1, r6, #25
 801fd42:	d5fb      	bpl.n	801fd3c <_printf_i+0x1c8>
 801fd44:	8018      	strh	r0, [r3, #0]
 801fd46:	2300      	movs	r3, #0
 801fd48:	6123      	str	r3, [r4, #16]
 801fd4a:	4616      	mov	r6, r2
 801fd4c:	e7ba      	b.n	801fcc4 <_printf_i+0x150>
 801fd4e:	680b      	ldr	r3, [r1, #0]
 801fd50:	1d1a      	adds	r2, r3, #4
 801fd52:	600a      	str	r2, [r1, #0]
 801fd54:	681e      	ldr	r6, [r3, #0]
 801fd56:	6862      	ldr	r2, [r4, #4]
 801fd58:	2100      	movs	r1, #0
 801fd5a:	4630      	mov	r0, r6
 801fd5c:	f7f9 fa38 	bl	80191d0 <memchr>
 801fd60:	b108      	cbz	r0, 801fd66 <_printf_i+0x1f2>
 801fd62:	1b80      	subs	r0, r0, r6
 801fd64:	6060      	str	r0, [r4, #4]
 801fd66:	6863      	ldr	r3, [r4, #4]
 801fd68:	6123      	str	r3, [r4, #16]
 801fd6a:	2300      	movs	r3, #0
 801fd6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fd70:	e7a8      	b.n	801fcc4 <_printf_i+0x150>
 801fd72:	6923      	ldr	r3, [r4, #16]
 801fd74:	4632      	mov	r2, r6
 801fd76:	4649      	mov	r1, r9
 801fd78:	4640      	mov	r0, r8
 801fd7a:	47d0      	blx	sl
 801fd7c:	3001      	adds	r0, #1
 801fd7e:	d0ab      	beq.n	801fcd8 <_printf_i+0x164>
 801fd80:	6823      	ldr	r3, [r4, #0]
 801fd82:	079b      	lsls	r3, r3, #30
 801fd84:	d413      	bmi.n	801fdae <_printf_i+0x23a>
 801fd86:	68e0      	ldr	r0, [r4, #12]
 801fd88:	9b03      	ldr	r3, [sp, #12]
 801fd8a:	4298      	cmp	r0, r3
 801fd8c:	bfb8      	it	lt
 801fd8e:	4618      	movlt	r0, r3
 801fd90:	e7a4      	b.n	801fcdc <_printf_i+0x168>
 801fd92:	2301      	movs	r3, #1
 801fd94:	4632      	mov	r2, r6
 801fd96:	4649      	mov	r1, r9
 801fd98:	4640      	mov	r0, r8
 801fd9a:	47d0      	blx	sl
 801fd9c:	3001      	adds	r0, #1
 801fd9e:	d09b      	beq.n	801fcd8 <_printf_i+0x164>
 801fda0:	3501      	adds	r5, #1
 801fda2:	68e3      	ldr	r3, [r4, #12]
 801fda4:	9903      	ldr	r1, [sp, #12]
 801fda6:	1a5b      	subs	r3, r3, r1
 801fda8:	42ab      	cmp	r3, r5
 801fdaa:	dcf2      	bgt.n	801fd92 <_printf_i+0x21e>
 801fdac:	e7eb      	b.n	801fd86 <_printf_i+0x212>
 801fdae:	2500      	movs	r5, #0
 801fdb0:	f104 0619 	add.w	r6, r4, #25
 801fdb4:	e7f5      	b.n	801fda2 <_printf_i+0x22e>
 801fdb6:	bf00      	nop
 801fdb8:	08023f2a 	.word	0x08023f2a
 801fdbc:	08023f3b 	.word	0x08023f3b

0801fdc0 <_scanf_float>:
 801fdc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fdc4:	b087      	sub	sp, #28
 801fdc6:	4617      	mov	r7, r2
 801fdc8:	9303      	str	r3, [sp, #12]
 801fdca:	688b      	ldr	r3, [r1, #8]
 801fdcc:	1e5a      	subs	r2, r3, #1
 801fdce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801fdd2:	bf83      	ittte	hi
 801fdd4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801fdd8:	195b      	addhi	r3, r3, r5
 801fdda:	9302      	strhi	r3, [sp, #8]
 801fddc:	2300      	movls	r3, #0
 801fdde:	bf86      	itte	hi
 801fde0:	f240 135d 	movwhi	r3, #349	; 0x15d
 801fde4:	608b      	strhi	r3, [r1, #8]
 801fde6:	9302      	strls	r3, [sp, #8]
 801fde8:	680b      	ldr	r3, [r1, #0]
 801fdea:	468b      	mov	fp, r1
 801fdec:	2500      	movs	r5, #0
 801fdee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801fdf2:	f84b 3b1c 	str.w	r3, [fp], #28
 801fdf6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801fdfa:	4680      	mov	r8, r0
 801fdfc:	460c      	mov	r4, r1
 801fdfe:	465e      	mov	r6, fp
 801fe00:	46aa      	mov	sl, r5
 801fe02:	46a9      	mov	r9, r5
 801fe04:	9501      	str	r5, [sp, #4]
 801fe06:	68a2      	ldr	r2, [r4, #8]
 801fe08:	b152      	cbz	r2, 801fe20 <_scanf_float+0x60>
 801fe0a:	683b      	ldr	r3, [r7, #0]
 801fe0c:	781b      	ldrb	r3, [r3, #0]
 801fe0e:	2b4e      	cmp	r3, #78	; 0x4e
 801fe10:	d864      	bhi.n	801fedc <_scanf_float+0x11c>
 801fe12:	2b40      	cmp	r3, #64	; 0x40
 801fe14:	d83c      	bhi.n	801fe90 <_scanf_float+0xd0>
 801fe16:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801fe1a:	b2c8      	uxtb	r0, r1
 801fe1c:	280e      	cmp	r0, #14
 801fe1e:	d93a      	bls.n	801fe96 <_scanf_float+0xd6>
 801fe20:	f1b9 0f00 	cmp.w	r9, #0
 801fe24:	d003      	beq.n	801fe2e <_scanf_float+0x6e>
 801fe26:	6823      	ldr	r3, [r4, #0]
 801fe28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801fe2c:	6023      	str	r3, [r4, #0]
 801fe2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fe32:	f1ba 0f01 	cmp.w	sl, #1
 801fe36:	f200 8113 	bhi.w	8020060 <_scanf_float+0x2a0>
 801fe3a:	455e      	cmp	r6, fp
 801fe3c:	f200 8105 	bhi.w	802004a <_scanf_float+0x28a>
 801fe40:	2501      	movs	r5, #1
 801fe42:	4628      	mov	r0, r5
 801fe44:	b007      	add	sp, #28
 801fe46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe4a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801fe4e:	2a0d      	cmp	r2, #13
 801fe50:	d8e6      	bhi.n	801fe20 <_scanf_float+0x60>
 801fe52:	a101      	add	r1, pc, #4	; (adr r1, 801fe58 <_scanf_float+0x98>)
 801fe54:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801fe58:	0801ff97 	.word	0x0801ff97
 801fe5c:	0801fe21 	.word	0x0801fe21
 801fe60:	0801fe21 	.word	0x0801fe21
 801fe64:	0801fe21 	.word	0x0801fe21
 801fe68:	0801fff7 	.word	0x0801fff7
 801fe6c:	0801ffcf 	.word	0x0801ffcf
 801fe70:	0801fe21 	.word	0x0801fe21
 801fe74:	0801fe21 	.word	0x0801fe21
 801fe78:	0801ffa5 	.word	0x0801ffa5
 801fe7c:	0801fe21 	.word	0x0801fe21
 801fe80:	0801fe21 	.word	0x0801fe21
 801fe84:	0801fe21 	.word	0x0801fe21
 801fe88:	0801fe21 	.word	0x0801fe21
 801fe8c:	0801ff5d 	.word	0x0801ff5d
 801fe90:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801fe94:	e7db      	b.n	801fe4e <_scanf_float+0x8e>
 801fe96:	290e      	cmp	r1, #14
 801fe98:	d8c2      	bhi.n	801fe20 <_scanf_float+0x60>
 801fe9a:	a001      	add	r0, pc, #4	; (adr r0, 801fea0 <_scanf_float+0xe0>)
 801fe9c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801fea0:	0801ff4f 	.word	0x0801ff4f
 801fea4:	0801fe21 	.word	0x0801fe21
 801fea8:	0801ff4f 	.word	0x0801ff4f
 801feac:	0801ffe3 	.word	0x0801ffe3
 801feb0:	0801fe21 	.word	0x0801fe21
 801feb4:	0801fefd 	.word	0x0801fefd
 801feb8:	0801ff39 	.word	0x0801ff39
 801febc:	0801ff39 	.word	0x0801ff39
 801fec0:	0801ff39 	.word	0x0801ff39
 801fec4:	0801ff39 	.word	0x0801ff39
 801fec8:	0801ff39 	.word	0x0801ff39
 801fecc:	0801ff39 	.word	0x0801ff39
 801fed0:	0801ff39 	.word	0x0801ff39
 801fed4:	0801ff39 	.word	0x0801ff39
 801fed8:	0801ff39 	.word	0x0801ff39
 801fedc:	2b6e      	cmp	r3, #110	; 0x6e
 801fede:	d809      	bhi.n	801fef4 <_scanf_float+0x134>
 801fee0:	2b60      	cmp	r3, #96	; 0x60
 801fee2:	d8b2      	bhi.n	801fe4a <_scanf_float+0x8a>
 801fee4:	2b54      	cmp	r3, #84	; 0x54
 801fee6:	d077      	beq.n	801ffd8 <_scanf_float+0x218>
 801fee8:	2b59      	cmp	r3, #89	; 0x59
 801feea:	d199      	bne.n	801fe20 <_scanf_float+0x60>
 801feec:	2d07      	cmp	r5, #7
 801feee:	d197      	bne.n	801fe20 <_scanf_float+0x60>
 801fef0:	2508      	movs	r5, #8
 801fef2:	e029      	b.n	801ff48 <_scanf_float+0x188>
 801fef4:	2b74      	cmp	r3, #116	; 0x74
 801fef6:	d06f      	beq.n	801ffd8 <_scanf_float+0x218>
 801fef8:	2b79      	cmp	r3, #121	; 0x79
 801fefa:	e7f6      	b.n	801feea <_scanf_float+0x12a>
 801fefc:	6821      	ldr	r1, [r4, #0]
 801fefe:	05c8      	lsls	r0, r1, #23
 801ff00:	d51a      	bpl.n	801ff38 <_scanf_float+0x178>
 801ff02:	9b02      	ldr	r3, [sp, #8]
 801ff04:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801ff08:	6021      	str	r1, [r4, #0]
 801ff0a:	f109 0901 	add.w	r9, r9, #1
 801ff0e:	b11b      	cbz	r3, 801ff18 <_scanf_float+0x158>
 801ff10:	3b01      	subs	r3, #1
 801ff12:	3201      	adds	r2, #1
 801ff14:	9302      	str	r3, [sp, #8]
 801ff16:	60a2      	str	r2, [r4, #8]
 801ff18:	68a3      	ldr	r3, [r4, #8]
 801ff1a:	3b01      	subs	r3, #1
 801ff1c:	60a3      	str	r3, [r4, #8]
 801ff1e:	6923      	ldr	r3, [r4, #16]
 801ff20:	3301      	adds	r3, #1
 801ff22:	6123      	str	r3, [r4, #16]
 801ff24:	687b      	ldr	r3, [r7, #4]
 801ff26:	3b01      	subs	r3, #1
 801ff28:	2b00      	cmp	r3, #0
 801ff2a:	607b      	str	r3, [r7, #4]
 801ff2c:	f340 8084 	ble.w	8020038 <_scanf_float+0x278>
 801ff30:	683b      	ldr	r3, [r7, #0]
 801ff32:	3301      	adds	r3, #1
 801ff34:	603b      	str	r3, [r7, #0]
 801ff36:	e766      	b.n	801fe06 <_scanf_float+0x46>
 801ff38:	eb1a 0f05 	cmn.w	sl, r5
 801ff3c:	f47f af70 	bne.w	801fe20 <_scanf_float+0x60>
 801ff40:	6822      	ldr	r2, [r4, #0]
 801ff42:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801ff46:	6022      	str	r2, [r4, #0]
 801ff48:	f806 3b01 	strb.w	r3, [r6], #1
 801ff4c:	e7e4      	b.n	801ff18 <_scanf_float+0x158>
 801ff4e:	6822      	ldr	r2, [r4, #0]
 801ff50:	0610      	lsls	r0, r2, #24
 801ff52:	f57f af65 	bpl.w	801fe20 <_scanf_float+0x60>
 801ff56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801ff5a:	e7f4      	b.n	801ff46 <_scanf_float+0x186>
 801ff5c:	f1ba 0f00 	cmp.w	sl, #0
 801ff60:	d10e      	bne.n	801ff80 <_scanf_float+0x1c0>
 801ff62:	f1b9 0f00 	cmp.w	r9, #0
 801ff66:	d10e      	bne.n	801ff86 <_scanf_float+0x1c6>
 801ff68:	6822      	ldr	r2, [r4, #0]
 801ff6a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801ff6e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801ff72:	d108      	bne.n	801ff86 <_scanf_float+0x1c6>
 801ff74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801ff78:	6022      	str	r2, [r4, #0]
 801ff7a:	f04f 0a01 	mov.w	sl, #1
 801ff7e:	e7e3      	b.n	801ff48 <_scanf_float+0x188>
 801ff80:	f1ba 0f02 	cmp.w	sl, #2
 801ff84:	d055      	beq.n	8020032 <_scanf_float+0x272>
 801ff86:	2d01      	cmp	r5, #1
 801ff88:	d002      	beq.n	801ff90 <_scanf_float+0x1d0>
 801ff8a:	2d04      	cmp	r5, #4
 801ff8c:	f47f af48 	bne.w	801fe20 <_scanf_float+0x60>
 801ff90:	3501      	adds	r5, #1
 801ff92:	b2ed      	uxtb	r5, r5
 801ff94:	e7d8      	b.n	801ff48 <_scanf_float+0x188>
 801ff96:	f1ba 0f01 	cmp.w	sl, #1
 801ff9a:	f47f af41 	bne.w	801fe20 <_scanf_float+0x60>
 801ff9e:	f04f 0a02 	mov.w	sl, #2
 801ffa2:	e7d1      	b.n	801ff48 <_scanf_float+0x188>
 801ffa4:	b97d      	cbnz	r5, 801ffc6 <_scanf_float+0x206>
 801ffa6:	f1b9 0f00 	cmp.w	r9, #0
 801ffaa:	f47f af3c 	bne.w	801fe26 <_scanf_float+0x66>
 801ffae:	6822      	ldr	r2, [r4, #0]
 801ffb0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801ffb4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801ffb8:	f47f af39 	bne.w	801fe2e <_scanf_float+0x6e>
 801ffbc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801ffc0:	6022      	str	r2, [r4, #0]
 801ffc2:	2501      	movs	r5, #1
 801ffc4:	e7c0      	b.n	801ff48 <_scanf_float+0x188>
 801ffc6:	2d03      	cmp	r5, #3
 801ffc8:	d0e2      	beq.n	801ff90 <_scanf_float+0x1d0>
 801ffca:	2d05      	cmp	r5, #5
 801ffcc:	e7de      	b.n	801ff8c <_scanf_float+0x1cc>
 801ffce:	2d02      	cmp	r5, #2
 801ffd0:	f47f af26 	bne.w	801fe20 <_scanf_float+0x60>
 801ffd4:	2503      	movs	r5, #3
 801ffd6:	e7b7      	b.n	801ff48 <_scanf_float+0x188>
 801ffd8:	2d06      	cmp	r5, #6
 801ffda:	f47f af21 	bne.w	801fe20 <_scanf_float+0x60>
 801ffde:	2507      	movs	r5, #7
 801ffe0:	e7b2      	b.n	801ff48 <_scanf_float+0x188>
 801ffe2:	6822      	ldr	r2, [r4, #0]
 801ffe4:	0591      	lsls	r1, r2, #22
 801ffe6:	f57f af1b 	bpl.w	801fe20 <_scanf_float+0x60>
 801ffea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801ffee:	6022      	str	r2, [r4, #0]
 801fff0:	f8cd 9004 	str.w	r9, [sp, #4]
 801fff4:	e7a8      	b.n	801ff48 <_scanf_float+0x188>
 801fff6:	6822      	ldr	r2, [r4, #0]
 801fff8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801fffc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8020000:	d006      	beq.n	8020010 <_scanf_float+0x250>
 8020002:	0550      	lsls	r0, r2, #21
 8020004:	f57f af0c 	bpl.w	801fe20 <_scanf_float+0x60>
 8020008:	f1b9 0f00 	cmp.w	r9, #0
 802000c:	f43f af0f 	beq.w	801fe2e <_scanf_float+0x6e>
 8020010:	0591      	lsls	r1, r2, #22
 8020012:	bf58      	it	pl
 8020014:	9901      	ldrpl	r1, [sp, #4]
 8020016:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802001a:	bf58      	it	pl
 802001c:	eba9 0101 	subpl.w	r1, r9, r1
 8020020:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8020024:	bf58      	it	pl
 8020026:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 802002a:	6022      	str	r2, [r4, #0]
 802002c:	f04f 0900 	mov.w	r9, #0
 8020030:	e78a      	b.n	801ff48 <_scanf_float+0x188>
 8020032:	f04f 0a03 	mov.w	sl, #3
 8020036:	e787      	b.n	801ff48 <_scanf_float+0x188>
 8020038:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802003c:	4639      	mov	r1, r7
 802003e:	4640      	mov	r0, r8
 8020040:	4798      	blx	r3
 8020042:	2800      	cmp	r0, #0
 8020044:	f43f aedf 	beq.w	801fe06 <_scanf_float+0x46>
 8020048:	e6ea      	b.n	801fe20 <_scanf_float+0x60>
 802004a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802004e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8020052:	463a      	mov	r2, r7
 8020054:	4640      	mov	r0, r8
 8020056:	4798      	blx	r3
 8020058:	6923      	ldr	r3, [r4, #16]
 802005a:	3b01      	subs	r3, #1
 802005c:	6123      	str	r3, [r4, #16]
 802005e:	e6ec      	b.n	801fe3a <_scanf_float+0x7a>
 8020060:	1e6b      	subs	r3, r5, #1
 8020062:	2b06      	cmp	r3, #6
 8020064:	d825      	bhi.n	80200b2 <_scanf_float+0x2f2>
 8020066:	2d02      	cmp	r5, #2
 8020068:	d836      	bhi.n	80200d8 <_scanf_float+0x318>
 802006a:	455e      	cmp	r6, fp
 802006c:	f67f aee8 	bls.w	801fe40 <_scanf_float+0x80>
 8020070:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020074:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8020078:	463a      	mov	r2, r7
 802007a:	4640      	mov	r0, r8
 802007c:	4798      	blx	r3
 802007e:	6923      	ldr	r3, [r4, #16]
 8020080:	3b01      	subs	r3, #1
 8020082:	6123      	str	r3, [r4, #16]
 8020084:	e7f1      	b.n	802006a <_scanf_float+0x2aa>
 8020086:	9802      	ldr	r0, [sp, #8]
 8020088:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802008c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8020090:	9002      	str	r0, [sp, #8]
 8020092:	463a      	mov	r2, r7
 8020094:	4640      	mov	r0, r8
 8020096:	4798      	blx	r3
 8020098:	6923      	ldr	r3, [r4, #16]
 802009a:	3b01      	subs	r3, #1
 802009c:	6123      	str	r3, [r4, #16]
 802009e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80200a2:	fa5f fa8a 	uxtb.w	sl, sl
 80200a6:	f1ba 0f02 	cmp.w	sl, #2
 80200aa:	d1ec      	bne.n	8020086 <_scanf_float+0x2c6>
 80200ac:	3d03      	subs	r5, #3
 80200ae:	b2ed      	uxtb	r5, r5
 80200b0:	1b76      	subs	r6, r6, r5
 80200b2:	6823      	ldr	r3, [r4, #0]
 80200b4:	05da      	lsls	r2, r3, #23
 80200b6:	d52f      	bpl.n	8020118 <_scanf_float+0x358>
 80200b8:	055b      	lsls	r3, r3, #21
 80200ba:	d510      	bpl.n	80200de <_scanf_float+0x31e>
 80200bc:	455e      	cmp	r6, fp
 80200be:	f67f aebf 	bls.w	801fe40 <_scanf_float+0x80>
 80200c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80200c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80200ca:	463a      	mov	r2, r7
 80200cc:	4640      	mov	r0, r8
 80200ce:	4798      	blx	r3
 80200d0:	6923      	ldr	r3, [r4, #16]
 80200d2:	3b01      	subs	r3, #1
 80200d4:	6123      	str	r3, [r4, #16]
 80200d6:	e7f1      	b.n	80200bc <_scanf_float+0x2fc>
 80200d8:	46aa      	mov	sl, r5
 80200da:	9602      	str	r6, [sp, #8]
 80200dc:	e7df      	b.n	802009e <_scanf_float+0x2de>
 80200de:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80200e2:	6923      	ldr	r3, [r4, #16]
 80200e4:	2965      	cmp	r1, #101	; 0x65
 80200e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80200ea:	f106 35ff 	add.w	r5, r6, #4294967295
 80200ee:	6123      	str	r3, [r4, #16]
 80200f0:	d00c      	beq.n	802010c <_scanf_float+0x34c>
 80200f2:	2945      	cmp	r1, #69	; 0x45
 80200f4:	d00a      	beq.n	802010c <_scanf_float+0x34c>
 80200f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80200fa:	463a      	mov	r2, r7
 80200fc:	4640      	mov	r0, r8
 80200fe:	4798      	blx	r3
 8020100:	6923      	ldr	r3, [r4, #16]
 8020102:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8020106:	3b01      	subs	r3, #1
 8020108:	1eb5      	subs	r5, r6, #2
 802010a:	6123      	str	r3, [r4, #16]
 802010c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020110:	463a      	mov	r2, r7
 8020112:	4640      	mov	r0, r8
 8020114:	4798      	blx	r3
 8020116:	462e      	mov	r6, r5
 8020118:	6825      	ldr	r5, [r4, #0]
 802011a:	f015 0510 	ands.w	r5, r5, #16
 802011e:	d158      	bne.n	80201d2 <_scanf_float+0x412>
 8020120:	7035      	strb	r5, [r6, #0]
 8020122:	6823      	ldr	r3, [r4, #0]
 8020124:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8020128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802012c:	d11c      	bne.n	8020168 <_scanf_float+0x3a8>
 802012e:	9b01      	ldr	r3, [sp, #4]
 8020130:	454b      	cmp	r3, r9
 8020132:	eba3 0209 	sub.w	r2, r3, r9
 8020136:	d124      	bne.n	8020182 <_scanf_float+0x3c2>
 8020138:	2200      	movs	r2, #0
 802013a:	4659      	mov	r1, fp
 802013c:	4640      	mov	r0, r8
 802013e:	f000 ff09 	bl	8020f54 <_strtod_r>
 8020142:	9b03      	ldr	r3, [sp, #12]
 8020144:	6821      	ldr	r1, [r4, #0]
 8020146:	681b      	ldr	r3, [r3, #0]
 8020148:	f011 0f02 	tst.w	r1, #2
 802014c:	ec57 6b10 	vmov	r6, r7, d0
 8020150:	f103 0204 	add.w	r2, r3, #4
 8020154:	d020      	beq.n	8020198 <_scanf_float+0x3d8>
 8020156:	9903      	ldr	r1, [sp, #12]
 8020158:	600a      	str	r2, [r1, #0]
 802015a:	681b      	ldr	r3, [r3, #0]
 802015c:	e9c3 6700 	strd	r6, r7, [r3]
 8020160:	68e3      	ldr	r3, [r4, #12]
 8020162:	3301      	adds	r3, #1
 8020164:	60e3      	str	r3, [r4, #12]
 8020166:	e66c      	b.n	801fe42 <_scanf_float+0x82>
 8020168:	9b04      	ldr	r3, [sp, #16]
 802016a:	2b00      	cmp	r3, #0
 802016c:	d0e4      	beq.n	8020138 <_scanf_float+0x378>
 802016e:	9905      	ldr	r1, [sp, #20]
 8020170:	230a      	movs	r3, #10
 8020172:	462a      	mov	r2, r5
 8020174:	3101      	adds	r1, #1
 8020176:	4640      	mov	r0, r8
 8020178:	f000 ff76 	bl	8021068 <_strtol_r>
 802017c:	9b04      	ldr	r3, [sp, #16]
 802017e:	9e05      	ldr	r6, [sp, #20]
 8020180:	1ac2      	subs	r2, r0, r3
 8020182:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8020186:	429e      	cmp	r6, r3
 8020188:	bf28      	it	cs
 802018a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 802018e:	4912      	ldr	r1, [pc, #72]	; (80201d8 <_scanf_float+0x418>)
 8020190:	4630      	mov	r0, r6
 8020192:	f000 f87f 	bl	8020294 <siprintf>
 8020196:	e7cf      	b.n	8020138 <_scanf_float+0x378>
 8020198:	f011 0f04 	tst.w	r1, #4
 802019c:	9903      	ldr	r1, [sp, #12]
 802019e:	600a      	str	r2, [r1, #0]
 80201a0:	d1db      	bne.n	802015a <_scanf_float+0x39a>
 80201a2:	f8d3 8000 	ldr.w	r8, [r3]
 80201a6:	ee10 2a10 	vmov	r2, s0
 80201aa:	ee10 0a10 	vmov	r0, s0
 80201ae:	463b      	mov	r3, r7
 80201b0:	4639      	mov	r1, r7
 80201b2:	f7f9 fcbb 	bl	8019b2c <__aeabi_dcmpun>
 80201b6:	b128      	cbz	r0, 80201c4 <_scanf_float+0x404>
 80201b8:	4808      	ldr	r0, [pc, #32]	; (80201dc <_scanf_float+0x41c>)
 80201ba:	f000 f821 	bl	8020200 <nanf>
 80201be:	ed88 0a00 	vstr	s0, [r8]
 80201c2:	e7cd      	b.n	8020160 <_scanf_float+0x3a0>
 80201c4:	4630      	mov	r0, r6
 80201c6:	4639      	mov	r1, r7
 80201c8:	f7f9 fd0e 	bl	8019be8 <__aeabi_d2f>
 80201cc:	f8c8 0000 	str.w	r0, [r8]
 80201d0:	e7c6      	b.n	8020160 <_scanf_float+0x3a0>
 80201d2:	2500      	movs	r5, #0
 80201d4:	e635      	b.n	801fe42 <_scanf_float+0x82>
 80201d6:	bf00      	nop
 80201d8:	08023f4c 	.word	0x08023f4c
 80201dc:	08024368 	.word	0x08024368

080201e0 <_sbrk_r>:
 80201e0:	b538      	push	{r3, r4, r5, lr}
 80201e2:	4d06      	ldr	r5, [pc, #24]	; (80201fc <_sbrk_r+0x1c>)
 80201e4:	2300      	movs	r3, #0
 80201e6:	4604      	mov	r4, r0
 80201e8:	4608      	mov	r0, r1
 80201ea:	602b      	str	r3, [r5, #0]
 80201ec:	f7fa fe78 	bl	801aee0 <_sbrk>
 80201f0:	1c43      	adds	r3, r0, #1
 80201f2:	d102      	bne.n	80201fa <_sbrk_r+0x1a>
 80201f4:	682b      	ldr	r3, [r5, #0]
 80201f6:	b103      	cbz	r3, 80201fa <_sbrk_r+0x1a>
 80201f8:	6023      	str	r3, [r4, #0]
 80201fa:	bd38      	pop	{r3, r4, r5, pc}
 80201fc:	200003f0 	.word	0x200003f0

08020200 <nanf>:
 8020200:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8020208 <nanf+0x8>
 8020204:	4770      	bx	lr
 8020206:	bf00      	nop
 8020208:	7fc00000 	.word	0x7fc00000

0802020c <_raise_r>:
 802020c:	291f      	cmp	r1, #31
 802020e:	b538      	push	{r3, r4, r5, lr}
 8020210:	4604      	mov	r4, r0
 8020212:	460d      	mov	r5, r1
 8020214:	d904      	bls.n	8020220 <_raise_r+0x14>
 8020216:	2316      	movs	r3, #22
 8020218:	6003      	str	r3, [r0, #0]
 802021a:	f04f 30ff 	mov.w	r0, #4294967295
 802021e:	bd38      	pop	{r3, r4, r5, pc}
 8020220:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8020222:	b112      	cbz	r2, 802022a <_raise_r+0x1e>
 8020224:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020228:	b94b      	cbnz	r3, 802023e <_raise_r+0x32>
 802022a:	4620      	mov	r0, r4
 802022c:	f000 f830 	bl	8020290 <_getpid_r>
 8020230:	462a      	mov	r2, r5
 8020232:	4601      	mov	r1, r0
 8020234:	4620      	mov	r0, r4
 8020236:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802023a:	f000 b817 	b.w	802026c <_kill_r>
 802023e:	2b01      	cmp	r3, #1
 8020240:	d00a      	beq.n	8020258 <_raise_r+0x4c>
 8020242:	1c59      	adds	r1, r3, #1
 8020244:	d103      	bne.n	802024e <_raise_r+0x42>
 8020246:	2316      	movs	r3, #22
 8020248:	6003      	str	r3, [r0, #0]
 802024a:	2001      	movs	r0, #1
 802024c:	e7e7      	b.n	802021e <_raise_r+0x12>
 802024e:	2400      	movs	r4, #0
 8020250:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020254:	4628      	mov	r0, r5
 8020256:	4798      	blx	r3
 8020258:	2000      	movs	r0, #0
 802025a:	e7e0      	b.n	802021e <_raise_r+0x12>

0802025c <raise>:
 802025c:	4b02      	ldr	r3, [pc, #8]	; (8020268 <raise+0xc>)
 802025e:	4601      	mov	r1, r0
 8020260:	6818      	ldr	r0, [r3, #0]
 8020262:	f7ff bfd3 	b.w	802020c <_raise_r>
 8020266:	bf00      	nop
 8020268:	20000030 	.word	0x20000030

0802026c <_kill_r>:
 802026c:	b538      	push	{r3, r4, r5, lr}
 802026e:	4d07      	ldr	r5, [pc, #28]	; (802028c <_kill_r+0x20>)
 8020270:	2300      	movs	r3, #0
 8020272:	4604      	mov	r4, r0
 8020274:	4608      	mov	r0, r1
 8020276:	4611      	mov	r1, r2
 8020278:	602b      	str	r3, [r5, #0]
 802027a:	f7fa fda9 	bl	801add0 <_kill>
 802027e:	1c43      	adds	r3, r0, #1
 8020280:	d102      	bne.n	8020288 <_kill_r+0x1c>
 8020282:	682b      	ldr	r3, [r5, #0]
 8020284:	b103      	cbz	r3, 8020288 <_kill_r+0x1c>
 8020286:	6023      	str	r3, [r4, #0]
 8020288:	bd38      	pop	{r3, r4, r5, pc}
 802028a:	bf00      	nop
 802028c:	200003f0 	.word	0x200003f0

08020290 <_getpid_r>:
 8020290:	f7fa bd96 	b.w	801adc0 <_getpid>

08020294 <siprintf>:
 8020294:	b40e      	push	{r1, r2, r3}
 8020296:	b500      	push	{lr}
 8020298:	b09c      	sub	sp, #112	; 0x70
 802029a:	ab1d      	add	r3, sp, #116	; 0x74
 802029c:	9002      	str	r0, [sp, #8]
 802029e:	9006      	str	r0, [sp, #24]
 80202a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80202a4:	4809      	ldr	r0, [pc, #36]	; (80202cc <siprintf+0x38>)
 80202a6:	9107      	str	r1, [sp, #28]
 80202a8:	9104      	str	r1, [sp, #16]
 80202aa:	4909      	ldr	r1, [pc, #36]	; (80202d0 <siprintf+0x3c>)
 80202ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80202b0:	9105      	str	r1, [sp, #20]
 80202b2:	6800      	ldr	r0, [r0, #0]
 80202b4:	9301      	str	r3, [sp, #4]
 80202b6:	a902      	add	r1, sp, #8
 80202b8:	f002 fe0a 	bl	8022ed0 <_svfiprintf_r>
 80202bc:	9b02      	ldr	r3, [sp, #8]
 80202be:	2200      	movs	r2, #0
 80202c0:	701a      	strb	r2, [r3, #0]
 80202c2:	b01c      	add	sp, #112	; 0x70
 80202c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80202c8:	b003      	add	sp, #12
 80202ca:	4770      	bx	lr
 80202cc:	20000030 	.word	0x20000030
 80202d0:	ffff0208 	.word	0xffff0208

080202d4 <strstr>:
 80202d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80202d6:	780c      	ldrb	r4, [r1, #0]
 80202d8:	b164      	cbz	r4, 80202f4 <strstr+0x20>
 80202da:	4603      	mov	r3, r0
 80202dc:	781a      	ldrb	r2, [r3, #0]
 80202de:	4618      	mov	r0, r3
 80202e0:	1c5e      	adds	r6, r3, #1
 80202e2:	b90a      	cbnz	r2, 80202e8 <strstr+0x14>
 80202e4:	4610      	mov	r0, r2
 80202e6:	e005      	b.n	80202f4 <strstr+0x20>
 80202e8:	4294      	cmp	r4, r2
 80202ea:	d108      	bne.n	80202fe <strstr+0x2a>
 80202ec:	460d      	mov	r5, r1
 80202ee:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80202f2:	b902      	cbnz	r2, 80202f6 <strstr+0x22>
 80202f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80202f6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80202fa:	4297      	cmp	r7, r2
 80202fc:	d0f7      	beq.n	80202ee <strstr+0x1a>
 80202fe:	4633      	mov	r3, r6
 8020300:	e7ec      	b.n	80202dc <strstr+0x8>

08020302 <sulp>:
 8020302:	b570      	push	{r4, r5, r6, lr}
 8020304:	4604      	mov	r4, r0
 8020306:	460d      	mov	r5, r1
 8020308:	ec45 4b10 	vmov	d0, r4, r5
 802030c:	4616      	mov	r6, r2
 802030e:	f002 fc25 	bl	8022b5c <__ulp>
 8020312:	ec51 0b10 	vmov	r0, r1, d0
 8020316:	b17e      	cbz	r6, 8020338 <sulp+0x36>
 8020318:	f3c5 530a 	ubfx	r3, r5, #20, #11
 802031c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8020320:	2b00      	cmp	r3, #0
 8020322:	dd09      	ble.n	8020338 <sulp+0x36>
 8020324:	051b      	lsls	r3, r3, #20
 8020326:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 802032a:	2400      	movs	r4, #0
 802032c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8020330:	4622      	mov	r2, r4
 8020332:	462b      	mov	r3, r5
 8020334:	f7f9 f960 	bl	80195f8 <__aeabi_dmul>
 8020338:	bd70      	pop	{r4, r5, r6, pc}
 802033a:	0000      	movs	r0, r0
 802033c:	0000      	movs	r0, r0
	...

08020340 <_strtod_l>:
 8020340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020344:	b0a3      	sub	sp, #140	; 0x8c
 8020346:	461f      	mov	r7, r3
 8020348:	2300      	movs	r3, #0
 802034a:	931e      	str	r3, [sp, #120]	; 0x78
 802034c:	4ba4      	ldr	r3, [pc, #656]	; (80205e0 <_strtod_l+0x2a0>)
 802034e:	9219      	str	r2, [sp, #100]	; 0x64
 8020350:	681b      	ldr	r3, [r3, #0]
 8020352:	9307      	str	r3, [sp, #28]
 8020354:	4604      	mov	r4, r0
 8020356:	4618      	mov	r0, r3
 8020358:	4688      	mov	r8, r1
 802035a:	f7f8 ff89 	bl	8019270 <strlen>
 802035e:	f04f 0a00 	mov.w	sl, #0
 8020362:	4605      	mov	r5, r0
 8020364:	f04f 0b00 	mov.w	fp, #0
 8020368:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 802036c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802036e:	781a      	ldrb	r2, [r3, #0]
 8020370:	2a2b      	cmp	r2, #43	; 0x2b
 8020372:	d04c      	beq.n	802040e <_strtod_l+0xce>
 8020374:	d839      	bhi.n	80203ea <_strtod_l+0xaa>
 8020376:	2a0d      	cmp	r2, #13
 8020378:	d832      	bhi.n	80203e0 <_strtod_l+0xa0>
 802037a:	2a08      	cmp	r2, #8
 802037c:	d832      	bhi.n	80203e4 <_strtod_l+0xa4>
 802037e:	2a00      	cmp	r2, #0
 8020380:	d03c      	beq.n	80203fc <_strtod_l+0xbc>
 8020382:	2300      	movs	r3, #0
 8020384:	930e      	str	r3, [sp, #56]	; 0x38
 8020386:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8020388:	7833      	ldrb	r3, [r6, #0]
 802038a:	2b30      	cmp	r3, #48	; 0x30
 802038c:	f040 80b4 	bne.w	80204f8 <_strtod_l+0x1b8>
 8020390:	7873      	ldrb	r3, [r6, #1]
 8020392:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8020396:	2b58      	cmp	r3, #88	; 0x58
 8020398:	d16c      	bne.n	8020474 <_strtod_l+0x134>
 802039a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802039c:	9301      	str	r3, [sp, #4]
 802039e:	ab1e      	add	r3, sp, #120	; 0x78
 80203a0:	9702      	str	r7, [sp, #8]
 80203a2:	9300      	str	r3, [sp, #0]
 80203a4:	4a8f      	ldr	r2, [pc, #572]	; (80205e4 <_strtod_l+0x2a4>)
 80203a6:	ab1f      	add	r3, sp, #124	; 0x7c
 80203a8:	a91d      	add	r1, sp, #116	; 0x74
 80203aa:	4620      	mov	r0, r4
 80203ac:	f001 fd40 	bl	8021e30 <__gethex>
 80203b0:	f010 0707 	ands.w	r7, r0, #7
 80203b4:	4605      	mov	r5, r0
 80203b6:	d005      	beq.n	80203c4 <_strtod_l+0x84>
 80203b8:	2f06      	cmp	r7, #6
 80203ba:	d12a      	bne.n	8020412 <_strtod_l+0xd2>
 80203bc:	3601      	adds	r6, #1
 80203be:	2300      	movs	r3, #0
 80203c0:	961d      	str	r6, [sp, #116]	; 0x74
 80203c2:	930e      	str	r3, [sp, #56]	; 0x38
 80203c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80203c6:	2b00      	cmp	r3, #0
 80203c8:	f040 8596 	bne.w	8020ef8 <_strtod_l+0xbb8>
 80203cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80203ce:	b1db      	cbz	r3, 8020408 <_strtod_l+0xc8>
 80203d0:	4652      	mov	r2, sl
 80203d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80203d6:	ec43 2b10 	vmov	d0, r2, r3
 80203da:	b023      	add	sp, #140	; 0x8c
 80203dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80203e0:	2a20      	cmp	r2, #32
 80203e2:	d1ce      	bne.n	8020382 <_strtod_l+0x42>
 80203e4:	3301      	adds	r3, #1
 80203e6:	931d      	str	r3, [sp, #116]	; 0x74
 80203e8:	e7c0      	b.n	802036c <_strtod_l+0x2c>
 80203ea:	2a2d      	cmp	r2, #45	; 0x2d
 80203ec:	d1c9      	bne.n	8020382 <_strtod_l+0x42>
 80203ee:	2201      	movs	r2, #1
 80203f0:	920e      	str	r2, [sp, #56]	; 0x38
 80203f2:	1c5a      	adds	r2, r3, #1
 80203f4:	921d      	str	r2, [sp, #116]	; 0x74
 80203f6:	785b      	ldrb	r3, [r3, #1]
 80203f8:	2b00      	cmp	r3, #0
 80203fa:	d1c4      	bne.n	8020386 <_strtod_l+0x46>
 80203fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80203fe:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8020402:	2b00      	cmp	r3, #0
 8020404:	f040 8576 	bne.w	8020ef4 <_strtod_l+0xbb4>
 8020408:	4652      	mov	r2, sl
 802040a:	465b      	mov	r3, fp
 802040c:	e7e3      	b.n	80203d6 <_strtod_l+0x96>
 802040e:	2200      	movs	r2, #0
 8020410:	e7ee      	b.n	80203f0 <_strtod_l+0xb0>
 8020412:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8020414:	b13a      	cbz	r2, 8020426 <_strtod_l+0xe6>
 8020416:	2135      	movs	r1, #53	; 0x35
 8020418:	a820      	add	r0, sp, #128	; 0x80
 802041a:	f002 fcaa 	bl	8022d72 <__copybits>
 802041e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8020420:	4620      	mov	r0, r4
 8020422:	f002 f86f 	bl	8022504 <_Bfree>
 8020426:	3f01      	subs	r7, #1
 8020428:	2f05      	cmp	r7, #5
 802042a:	d807      	bhi.n	802043c <_strtod_l+0xfc>
 802042c:	e8df f007 	tbb	[pc, r7]
 8020430:	1d180b0e 	.word	0x1d180b0e
 8020434:	030e      	.short	0x030e
 8020436:	f04f 0b00 	mov.w	fp, #0
 802043a:	46da      	mov	sl, fp
 802043c:	0728      	lsls	r0, r5, #28
 802043e:	d5c1      	bpl.n	80203c4 <_strtod_l+0x84>
 8020440:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8020444:	e7be      	b.n	80203c4 <_strtod_l+0x84>
 8020446:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 802044a:	e7f7      	b.n	802043c <_strtod_l+0xfc>
 802044c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8020450:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8020452:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8020456:	f202 4233 	addw	r2, r2, #1075	; 0x433
 802045a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 802045e:	e7ed      	b.n	802043c <_strtod_l+0xfc>
 8020460:	f8df b184 	ldr.w	fp, [pc, #388]	; 80205e8 <_strtod_l+0x2a8>
 8020464:	f04f 0a00 	mov.w	sl, #0
 8020468:	e7e8      	b.n	802043c <_strtod_l+0xfc>
 802046a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 802046e:	f04f 3aff 	mov.w	sl, #4294967295
 8020472:	e7e3      	b.n	802043c <_strtod_l+0xfc>
 8020474:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020476:	1c5a      	adds	r2, r3, #1
 8020478:	921d      	str	r2, [sp, #116]	; 0x74
 802047a:	785b      	ldrb	r3, [r3, #1]
 802047c:	2b30      	cmp	r3, #48	; 0x30
 802047e:	d0f9      	beq.n	8020474 <_strtod_l+0x134>
 8020480:	2b00      	cmp	r3, #0
 8020482:	d09f      	beq.n	80203c4 <_strtod_l+0x84>
 8020484:	2301      	movs	r3, #1
 8020486:	f04f 0900 	mov.w	r9, #0
 802048a:	9304      	str	r3, [sp, #16]
 802048c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802048e:	930a      	str	r3, [sp, #40]	; 0x28
 8020490:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8020494:	464f      	mov	r7, r9
 8020496:	220a      	movs	r2, #10
 8020498:	981d      	ldr	r0, [sp, #116]	; 0x74
 802049a:	7806      	ldrb	r6, [r0, #0]
 802049c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80204a0:	b2d9      	uxtb	r1, r3
 80204a2:	2909      	cmp	r1, #9
 80204a4:	d92a      	bls.n	80204fc <_strtod_l+0x1bc>
 80204a6:	9907      	ldr	r1, [sp, #28]
 80204a8:	462a      	mov	r2, r5
 80204aa:	f002 fe19 	bl	80230e0 <strncmp>
 80204ae:	b398      	cbz	r0, 8020518 <_strtod_l+0x1d8>
 80204b0:	2000      	movs	r0, #0
 80204b2:	4633      	mov	r3, r6
 80204b4:	463d      	mov	r5, r7
 80204b6:	9007      	str	r0, [sp, #28]
 80204b8:	4602      	mov	r2, r0
 80204ba:	2b65      	cmp	r3, #101	; 0x65
 80204bc:	d001      	beq.n	80204c2 <_strtod_l+0x182>
 80204be:	2b45      	cmp	r3, #69	; 0x45
 80204c0:	d118      	bne.n	80204f4 <_strtod_l+0x1b4>
 80204c2:	b91d      	cbnz	r5, 80204cc <_strtod_l+0x18c>
 80204c4:	9b04      	ldr	r3, [sp, #16]
 80204c6:	4303      	orrs	r3, r0
 80204c8:	d098      	beq.n	80203fc <_strtod_l+0xbc>
 80204ca:	2500      	movs	r5, #0
 80204cc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80204d0:	f108 0301 	add.w	r3, r8, #1
 80204d4:	931d      	str	r3, [sp, #116]	; 0x74
 80204d6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80204da:	2b2b      	cmp	r3, #43	; 0x2b
 80204dc:	d075      	beq.n	80205ca <_strtod_l+0x28a>
 80204de:	2b2d      	cmp	r3, #45	; 0x2d
 80204e0:	d07b      	beq.n	80205da <_strtod_l+0x29a>
 80204e2:	f04f 0c00 	mov.w	ip, #0
 80204e6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80204ea:	2909      	cmp	r1, #9
 80204ec:	f240 8082 	bls.w	80205f4 <_strtod_l+0x2b4>
 80204f0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80204f4:	2600      	movs	r6, #0
 80204f6:	e09d      	b.n	8020634 <_strtod_l+0x2f4>
 80204f8:	2300      	movs	r3, #0
 80204fa:	e7c4      	b.n	8020486 <_strtod_l+0x146>
 80204fc:	2f08      	cmp	r7, #8
 80204fe:	bfd8      	it	le
 8020500:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8020502:	f100 0001 	add.w	r0, r0, #1
 8020506:	bfda      	itte	le
 8020508:	fb02 3301 	mlale	r3, r2, r1, r3
 802050c:	9309      	strle	r3, [sp, #36]	; 0x24
 802050e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8020512:	3701      	adds	r7, #1
 8020514:	901d      	str	r0, [sp, #116]	; 0x74
 8020516:	e7bf      	b.n	8020498 <_strtod_l+0x158>
 8020518:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802051a:	195a      	adds	r2, r3, r5
 802051c:	921d      	str	r2, [sp, #116]	; 0x74
 802051e:	5d5b      	ldrb	r3, [r3, r5]
 8020520:	2f00      	cmp	r7, #0
 8020522:	d037      	beq.n	8020594 <_strtod_l+0x254>
 8020524:	9007      	str	r0, [sp, #28]
 8020526:	463d      	mov	r5, r7
 8020528:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 802052c:	2a09      	cmp	r2, #9
 802052e:	d912      	bls.n	8020556 <_strtod_l+0x216>
 8020530:	2201      	movs	r2, #1
 8020532:	e7c2      	b.n	80204ba <_strtod_l+0x17a>
 8020534:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020536:	1c5a      	adds	r2, r3, #1
 8020538:	921d      	str	r2, [sp, #116]	; 0x74
 802053a:	785b      	ldrb	r3, [r3, #1]
 802053c:	3001      	adds	r0, #1
 802053e:	2b30      	cmp	r3, #48	; 0x30
 8020540:	d0f8      	beq.n	8020534 <_strtod_l+0x1f4>
 8020542:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8020546:	2a08      	cmp	r2, #8
 8020548:	f200 84db 	bhi.w	8020f02 <_strtod_l+0xbc2>
 802054c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802054e:	9007      	str	r0, [sp, #28]
 8020550:	2000      	movs	r0, #0
 8020552:	920a      	str	r2, [sp, #40]	; 0x28
 8020554:	4605      	mov	r5, r0
 8020556:	3b30      	subs	r3, #48	; 0x30
 8020558:	f100 0201 	add.w	r2, r0, #1
 802055c:	d014      	beq.n	8020588 <_strtod_l+0x248>
 802055e:	9907      	ldr	r1, [sp, #28]
 8020560:	4411      	add	r1, r2
 8020562:	9107      	str	r1, [sp, #28]
 8020564:	462a      	mov	r2, r5
 8020566:	eb00 0e05 	add.w	lr, r0, r5
 802056a:	210a      	movs	r1, #10
 802056c:	4572      	cmp	r2, lr
 802056e:	d113      	bne.n	8020598 <_strtod_l+0x258>
 8020570:	182a      	adds	r2, r5, r0
 8020572:	2a08      	cmp	r2, #8
 8020574:	f105 0501 	add.w	r5, r5, #1
 8020578:	4405      	add	r5, r0
 802057a:	dc1c      	bgt.n	80205b6 <_strtod_l+0x276>
 802057c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802057e:	220a      	movs	r2, #10
 8020580:	fb02 3301 	mla	r3, r2, r1, r3
 8020584:	9309      	str	r3, [sp, #36]	; 0x24
 8020586:	2200      	movs	r2, #0
 8020588:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802058a:	1c59      	adds	r1, r3, #1
 802058c:	911d      	str	r1, [sp, #116]	; 0x74
 802058e:	785b      	ldrb	r3, [r3, #1]
 8020590:	4610      	mov	r0, r2
 8020592:	e7c9      	b.n	8020528 <_strtod_l+0x1e8>
 8020594:	4638      	mov	r0, r7
 8020596:	e7d2      	b.n	802053e <_strtod_l+0x1fe>
 8020598:	2a08      	cmp	r2, #8
 802059a:	dc04      	bgt.n	80205a6 <_strtod_l+0x266>
 802059c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802059e:	434e      	muls	r6, r1
 80205a0:	9609      	str	r6, [sp, #36]	; 0x24
 80205a2:	3201      	adds	r2, #1
 80205a4:	e7e2      	b.n	802056c <_strtod_l+0x22c>
 80205a6:	f102 0c01 	add.w	ip, r2, #1
 80205aa:	f1bc 0f10 	cmp.w	ip, #16
 80205ae:	bfd8      	it	le
 80205b0:	fb01 f909 	mulle.w	r9, r1, r9
 80205b4:	e7f5      	b.n	80205a2 <_strtod_l+0x262>
 80205b6:	2d10      	cmp	r5, #16
 80205b8:	bfdc      	itt	le
 80205ba:	220a      	movle	r2, #10
 80205bc:	fb02 3909 	mlale	r9, r2, r9, r3
 80205c0:	e7e1      	b.n	8020586 <_strtod_l+0x246>
 80205c2:	2300      	movs	r3, #0
 80205c4:	9307      	str	r3, [sp, #28]
 80205c6:	2201      	movs	r2, #1
 80205c8:	e77c      	b.n	80204c4 <_strtod_l+0x184>
 80205ca:	f04f 0c00 	mov.w	ip, #0
 80205ce:	f108 0302 	add.w	r3, r8, #2
 80205d2:	931d      	str	r3, [sp, #116]	; 0x74
 80205d4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80205d8:	e785      	b.n	80204e6 <_strtod_l+0x1a6>
 80205da:	f04f 0c01 	mov.w	ip, #1
 80205de:	e7f6      	b.n	80205ce <_strtod_l+0x28e>
 80205e0:	080241a8 	.word	0x080241a8
 80205e4:	08023f54 	.word	0x08023f54
 80205e8:	7ff00000 	.word	0x7ff00000
 80205ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80205ee:	1c59      	adds	r1, r3, #1
 80205f0:	911d      	str	r1, [sp, #116]	; 0x74
 80205f2:	785b      	ldrb	r3, [r3, #1]
 80205f4:	2b30      	cmp	r3, #48	; 0x30
 80205f6:	d0f9      	beq.n	80205ec <_strtod_l+0x2ac>
 80205f8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80205fc:	2908      	cmp	r1, #8
 80205fe:	f63f af79 	bhi.w	80204f4 <_strtod_l+0x1b4>
 8020602:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8020606:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020608:	9308      	str	r3, [sp, #32]
 802060a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802060c:	1c59      	adds	r1, r3, #1
 802060e:	911d      	str	r1, [sp, #116]	; 0x74
 8020610:	785b      	ldrb	r3, [r3, #1]
 8020612:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8020616:	2e09      	cmp	r6, #9
 8020618:	d937      	bls.n	802068a <_strtod_l+0x34a>
 802061a:	9e08      	ldr	r6, [sp, #32]
 802061c:	1b89      	subs	r1, r1, r6
 802061e:	2908      	cmp	r1, #8
 8020620:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8020624:	dc02      	bgt.n	802062c <_strtod_l+0x2ec>
 8020626:	4576      	cmp	r6, lr
 8020628:	bfa8      	it	ge
 802062a:	4676      	movge	r6, lr
 802062c:	f1bc 0f00 	cmp.w	ip, #0
 8020630:	d000      	beq.n	8020634 <_strtod_l+0x2f4>
 8020632:	4276      	negs	r6, r6
 8020634:	2d00      	cmp	r5, #0
 8020636:	d14f      	bne.n	80206d8 <_strtod_l+0x398>
 8020638:	9904      	ldr	r1, [sp, #16]
 802063a:	4301      	orrs	r1, r0
 802063c:	f47f aec2 	bne.w	80203c4 <_strtod_l+0x84>
 8020640:	2a00      	cmp	r2, #0
 8020642:	f47f aedb 	bne.w	80203fc <_strtod_l+0xbc>
 8020646:	2b69      	cmp	r3, #105	; 0x69
 8020648:	d027      	beq.n	802069a <_strtod_l+0x35a>
 802064a:	dc24      	bgt.n	8020696 <_strtod_l+0x356>
 802064c:	2b49      	cmp	r3, #73	; 0x49
 802064e:	d024      	beq.n	802069a <_strtod_l+0x35a>
 8020650:	2b4e      	cmp	r3, #78	; 0x4e
 8020652:	f47f aed3 	bne.w	80203fc <_strtod_l+0xbc>
 8020656:	499e      	ldr	r1, [pc, #632]	; (80208d0 <_strtod_l+0x590>)
 8020658:	a81d      	add	r0, sp, #116	; 0x74
 802065a:	f001 fe41 	bl	80222e0 <__match>
 802065e:	2800      	cmp	r0, #0
 8020660:	f43f aecc 	beq.w	80203fc <_strtod_l+0xbc>
 8020664:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020666:	781b      	ldrb	r3, [r3, #0]
 8020668:	2b28      	cmp	r3, #40	; 0x28
 802066a:	d12d      	bne.n	80206c8 <_strtod_l+0x388>
 802066c:	4999      	ldr	r1, [pc, #612]	; (80208d4 <_strtod_l+0x594>)
 802066e:	aa20      	add	r2, sp, #128	; 0x80
 8020670:	a81d      	add	r0, sp, #116	; 0x74
 8020672:	f001 fe49 	bl	8022308 <__hexnan>
 8020676:	2805      	cmp	r0, #5
 8020678:	d126      	bne.n	80206c8 <_strtod_l+0x388>
 802067a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802067c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8020680:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8020684:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8020688:	e69c      	b.n	80203c4 <_strtod_l+0x84>
 802068a:	210a      	movs	r1, #10
 802068c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8020690:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8020694:	e7b9      	b.n	802060a <_strtod_l+0x2ca>
 8020696:	2b6e      	cmp	r3, #110	; 0x6e
 8020698:	e7db      	b.n	8020652 <_strtod_l+0x312>
 802069a:	498f      	ldr	r1, [pc, #572]	; (80208d8 <_strtod_l+0x598>)
 802069c:	a81d      	add	r0, sp, #116	; 0x74
 802069e:	f001 fe1f 	bl	80222e0 <__match>
 80206a2:	2800      	cmp	r0, #0
 80206a4:	f43f aeaa 	beq.w	80203fc <_strtod_l+0xbc>
 80206a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80206aa:	498c      	ldr	r1, [pc, #560]	; (80208dc <_strtod_l+0x59c>)
 80206ac:	3b01      	subs	r3, #1
 80206ae:	a81d      	add	r0, sp, #116	; 0x74
 80206b0:	931d      	str	r3, [sp, #116]	; 0x74
 80206b2:	f001 fe15 	bl	80222e0 <__match>
 80206b6:	b910      	cbnz	r0, 80206be <_strtod_l+0x37e>
 80206b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80206ba:	3301      	adds	r3, #1
 80206bc:	931d      	str	r3, [sp, #116]	; 0x74
 80206be:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80208ec <_strtod_l+0x5ac>
 80206c2:	f04f 0a00 	mov.w	sl, #0
 80206c6:	e67d      	b.n	80203c4 <_strtod_l+0x84>
 80206c8:	4885      	ldr	r0, [pc, #532]	; (80208e0 <_strtod_l+0x5a0>)
 80206ca:	f002 fd01 	bl	80230d0 <nan>
 80206ce:	ed8d 0b04 	vstr	d0, [sp, #16]
 80206d2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80206d6:	e675      	b.n	80203c4 <_strtod_l+0x84>
 80206d8:	9b07      	ldr	r3, [sp, #28]
 80206da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80206dc:	1af3      	subs	r3, r6, r3
 80206de:	2f00      	cmp	r7, #0
 80206e0:	bf08      	it	eq
 80206e2:	462f      	moveq	r7, r5
 80206e4:	2d10      	cmp	r5, #16
 80206e6:	9308      	str	r3, [sp, #32]
 80206e8:	46a8      	mov	r8, r5
 80206ea:	bfa8      	it	ge
 80206ec:	f04f 0810 	movge.w	r8, #16
 80206f0:	f7f8 ff08 	bl	8019504 <__aeabi_ui2d>
 80206f4:	2d09      	cmp	r5, #9
 80206f6:	4682      	mov	sl, r0
 80206f8:	468b      	mov	fp, r1
 80206fa:	dd13      	ble.n	8020724 <_strtod_l+0x3e4>
 80206fc:	4b79      	ldr	r3, [pc, #484]	; (80208e4 <_strtod_l+0x5a4>)
 80206fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8020702:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8020706:	f7f8 ff77 	bl	80195f8 <__aeabi_dmul>
 802070a:	4682      	mov	sl, r0
 802070c:	4648      	mov	r0, r9
 802070e:	468b      	mov	fp, r1
 8020710:	f7f8 fef8 	bl	8019504 <__aeabi_ui2d>
 8020714:	4602      	mov	r2, r0
 8020716:	460b      	mov	r3, r1
 8020718:	4650      	mov	r0, sl
 802071a:	4659      	mov	r1, fp
 802071c:	f7f8 fdb6 	bl	801928c <__adddf3>
 8020720:	4682      	mov	sl, r0
 8020722:	468b      	mov	fp, r1
 8020724:	2d0f      	cmp	r5, #15
 8020726:	dc38      	bgt.n	802079a <_strtod_l+0x45a>
 8020728:	9b08      	ldr	r3, [sp, #32]
 802072a:	2b00      	cmp	r3, #0
 802072c:	f43f ae4a 	beq.w	80203c4 <_strtod_l+0x84>
 8020730:	dd24      	ble.n	802077c <_strtod_l+0x43c>
 8020732:	2b16      	cmp	r3, #22
 8020734:	dc0b      	bgt.n	802074e <_strtod_l+0x40e>
 8020736:	4d6b      	ldr	r5, [pc, #428]	; (80208e4 <_strtod_l+0x5a4>)
 8020738:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 802073c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8020740:	4652      	mov	r2, sl
 8020742:	465b      	mov	r3, fp
 8020744:	f7f8 ff58 	bl	80195f8 <__aeabi_dmul>
 8020748:	4682      	mov	sl, r0
 802074a:	468b      	mov	fp, r1
 802074c:	e63a      	b.n	80203c4 <_strtod_l+0x84>
 802074e:	9a08      	ldr	r2, [sp, #32]
 8020750:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8020754:	4293      	cmp	r3, r2
 8020756:	db20      	blt.n	802079a <_strtod_l+0x45a>
 8020758:	4c62      	ldr	r4, [pc, #392]	; (80208e4 <_strtod_l+0x5a4>)
 802075a:	f1c5 050f 	rsb	r5, r5, #15
 802075e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8020762:	4652      	mov	r2, sl
 8020764:	465b      	mov	r3, fp
 8020766:	e9d1 0100 	ldrd	r0, r1, [r1]
 802076a:	f7f8 ff45 	bl	80195f8 <__aeabi_dmul>
 802076e:	9b08      	ldr	r3, [sp, #32]
 8020770:	1b5d      	subs	r5, r3, r5
 8020772:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8020776:	e9d4 2300 	ldrd	r2, r3, [r4]
 802077a:	e7e3      	b.n	8020744 <_strtod_l+0x404>
 802077c:	9b08      	ldr	r3, [sp, #32]
 802077e:	3316      	adds	r3, #22
 8020780:	db0b      	blt.n	802079a <_strtod_l+0x45a>
 8020782:	9b07      	ldr	r3, [sp, #28]
 8020784:	4a57      	ldr	r2, [pc, #348]	; (80208e4 <_strtod_l+0x5a4>)
 8020786:	1b9e      	subs	r6, r3, r6
 8020788:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 802078c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8020790:	4650      	mov	r0, sl
 8020792:	4659      	mov	r1, fp
 8020794:	f7f9 f85a 	bl	801984c <__aeabi_ddiv>
 8020798:	e7d6      	b.n	8020748 <_strtod_l+0x408>
 802079a:	9b08      	ldr	r3, [sp, #32]
 802079c:	eba5 0808 	sub.w	r8, r5, r8
 80207a0:	4498      	add	r8, r3
 80207a2:	f1b8 0f00 	cmp.w	r8, #0
 80207a6:	dd71      	ble.n	802088c <_strtod_l+0x54c>
 80207a8:	f018 030f 	ands.w	r3, r8, #15
 80207ac:	d00a      	beq.n	80207c4 <_strtod_l+0x484>
 80207ae:	494d      	ldr	r1, [pc, #308]	; (80208e4 <_strtod_l+0x5a4>)
 80207b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80207b4:	4652      	mov	r2, sl
 80207b6:	465b      	mov	r3, fp
 80207b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80207bc:	f7f8 ff1c 	bl	80195f8 <__aeabi_dmul>
 80207c0:	4682      	mov	sl, r0
 80207c2:	468b      	mov	fp, r1
 80207c4:	f038 080f 	bics.w	r8, r8, #15
 80207c8:	d04d      	beq.n	8020866 <_strtod_l+0x526>
 80207ca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80207ce:	dd22      	ble.n	8020816 <_strtod_l+0x4d6>
 80207d0:	2500      	movs	r5, #0
 80207d2:	462e      	mov	r6, r5
 80207d4:	9509      	str	r5, [sp, #36]	; 0x24
 80207d6:	9507      	str	r5, [sp, #28]
 80207d8:	2322      	movs	r3, #34	; 0x22
 80207da:	f8df b110 	ldr.w	fp, [pc, #272]	; 80208ec <_strtod_l+0x5ac>
 80207de:	6023      	str	r3, [r4, #0]
 80207e0:	f04f 0a00 	mov.w	sl, #0
 80207e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80207e6:	2b00      	cmp	r3, #0
 80207e8:	f43f adec 	beq.w	80203c4 <_strtod_l+0x84>
 80207ec:	991e      	ldr	r1, [sp, #120]	; 0x78
 80207ee:	4620      	mov	r0, r4
 80207f0:	f001 fe88 	bl	8022504 <_Bfree>
 80207f4:	9907      	ldr	r1, [sp, #28]
 80207f6:	4620      	mov	r0, r4
 80207f8:	f001 fe84 	bl	8022504 <_Bfree>
 80207fc:	4631      	mov	r1, r6
 80207fe:	4620      	mov	r0, r4
 8020800:	f001 fe80 	bl	8022504 <_Bfree>
 8020804:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020806:	4620      	mov	r0, r4
 8020808:	f001 fe7c 	bl	8022504 <_Bfree>
 802080c:	4629      	mov	r1, r5
 802080e:	4620      	mov	r0, r4
 8020810:	f001 fe78 	bl	8022504 <_Bfree>
 8020814:	e5d6      	b.n	80203c4 <_strtod_l+0x84>
 8020816:	2300      	movs	r3, #0
 8020818:	ea4f 1828 	mov.w	r8, r8, asr #4
 802081c:	4650      	mov	r0, sl
 802081e:	4659      	mov	r1, fp
 8020820:	4699      	mov	r9, r3
 8020822:	f1b8 0f01 	cmp.w	r8, #1
 8020826:	dc21      	bgt.n	802086c <_strtod_l+0x52c>
 8020828:	b10b      	cbz	r3, 802082e <_strtod_l+0x4ee>
 802082a:	4682      	mov	sl, r0
 802082c:	468b      	mov	fp, r1
 802082e:	4b2e      	ldr	r3, [pc, #184]	; (80208e8 <_strtod_l+0x5a8>)
 8020830:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8020834:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8020838:	4652      	mov	r2, sl
 802083a:	465b      	mov	r3, fp
 802083c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8020840:	f7f8 feda 	bl	80195f8 <__aeabi_dmul>
 8020844:	4b29      	ldr	r3, [pc, #164]	; (80208ec <_strtod_l+0x5ac>)
 8020846:	460a      	mov	r2, r1
 8020848:	400b      	ands	r3, r1
 802084a:	4929      	ldr	r1, [pc, #164]	; (80208f0 <_strtod_l+0x5b0>)
 802084c:	428b      	cmp	r3, r1
 802084e:	4682      	mov	sl, r0
 8020850:	d8be      	bhi.n	80207d0 <_strtod_l+0x490>
 8020852:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8020856:	428b      	cmp	r3, r1
 8020858:	bf86      	itte	hi
 802085a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80208f4 <_strtod_l+0x5b4>
 802085e:	f04f 3aff 	movhi.w	sl, #4294967295
 8020862:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8020866:	2300      	movs	r3, #0
 8020868:	9304      	str	r3, [sp, #16]
 802086a:	e081      	b.n	8020970 <_strtod_l+0x630>
 802086c:	f018 0f01 	tst.w	r8, #1
 8020870:	d007      	beq.n	8020882 <_strtod_l+0x542>
 8020872:	4b1d      	ldr	r3, [pc, #116]	; (80208e8 <_strtod_l+0x5a8>)
 8020874:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8020878:	e9d3 2300 	ldrd	r2, r3, [r3]
 802087c:	f7f8 febc 	bl	80195f8 <__aeabi_dmul>
 8020880:	2301      	movs	r3, #1
 8020882:	f109 0901 	add.w	r9, r9, #1
 8020886:	ea4f 0868 	mov.w	r8, r8, asr #1
 802088a:	e7ca      	b.n	8020822 <_strtod_l+0x4e2>
 802088c:	d0eb      	beq.n	8020866 <_strtod_l+0x526>
 802088e:	f1c8 0800 	rsb	r8, r8, #0
 8020892:	f018 020f 	ands.w	r2, r8, #15
 8020896:	d00a      	beq.n	80208ae <_strtod_l+0x56e>
 8020898:	4b12      	ldr	r3, [pc, #72]	; (80208e4 <_strtod_l+0x5a4>)
 802089a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802089e:	4650      	mov	r0, sl
 80208a0:	4659      	mov	r1, fp
 80208a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80208a6:	f7f8 ffd1 	bl	801984c <__aeabi_ddiv>
 80208aa:	4682      	mov	sl, r0
 80208ac:	468b      	mov	fp, r1
 80208ae:	ea5f 1828 	movs.w	r8, r8, asr #4
 80208b2:	d0d8      	beq.n	8020866 <_strtod_l+0x526>
 80208b4:	f1b8 0f1f 	cmp.w	r8, #31
 80208b8:	dd1e      	ble.n	80208f8 <_strtod_l+0x5b8>
 80208ba:	2500      	movs	r5, #0
 80208bc:	462e      	mov	r6, r5
 80208be:	9509      	str	r5, [sp, #36]	; 0x24
 80208c0:	9507      	str	r5, [sp, #28]
 80208c2:	2322      	movs	r3, #34	; 0x22
 80208c4:	f04f 0a00 	mov.w	sl, #0
 80208c8:	f04f 0b00 	mov.w	fp, #0
 80208cc:	6023      	str	r3, [r4, #0]
 80208ce:	e789      	b.n	80207e4 <_strtod_l+0x4a4>
 80208d0:	08023f25 	.word	0x08023f25
 80208d4:	08023f68 	.word	0x08023f68
 80208d8:	08023f1d 	.word	0x08023f1d
 80208dc:	080240ac 	.word	0x080240ac
 80208e0:	08024368 	.word	0x08024368
 80208e4:	08024248 	.word	0x08024248
 80208e8:	08024220 	.word	0x08024220
 80208ec:	7ff00000 	.word	0x7ff00000
 80208f0:	7ca00000 	.word	0x7ca00000
 80208f4:	7fefffff 	.word	0x7fefffff
 80208f8:	f018 0310 	ands.w	r3, r8, #16
 80208fc:	bf18      	it	ne
 80208fe:	236a      	movne	r3, #106	; 0x6a
 8020900:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8020cb8 <_strtod_l+0x978>
 8020904:	9304      	str	r3, [sp, #16]
 8020906:	4650      	mov	r0, sl
 8020908:	4659      	mov	r1, fp
 802090a:	2300      	movs	r3, #0
 802090c:	f018 0f01 	tst.w	r8, #1
 8020910:	d004      	beq.n	802091c <_strtod_l+0x5dc>
 8020912:	e9d9 2300 	ldrd	r2, r3, [r9]
 8020916:	f7f8 fe6f 	bl	80195f8 <__aeabi_dmul>
 802091a:	2301      	movs	r3, #1
 802091c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8020920:	f109 0908 	add.w	r9, r9, #8
 8020924:	d1f2      	bne.n	802090c <_strtod_l+0x5cc>
 8020926:	b10b      	cbz	r3, 802092c <_strtod_l+0x5ec>
 8020928:	4682      	mov	sl, r0
 802092a:	468b      	mov	fp, r1
 802092c:	9b04      	ldr	r3, [sp, #16]
 802092e:	b1bb      	cbz	r3, 8020960 <_strtod_l+0x620>
 8020930:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8020934:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8020938:	2b00      	cmp	r3, #0
 802093a:	4659      	mov	r1, fp
 802093c:	dd10      	ble.n	8020960 <_strtod_l+0x620>
 802093e:	2b1f      	cmp	r3, #31
 8020940:	f340 8128 	ble.w	8020b94 <_strtod_l+0x854>
 8020944:	2b34      	cmp	r3, #52	; 0x34
 8020946:	bfde      	ittt	le
 8020948:	3b20      	suble	r3, #32
 802094a:	f04f 32ff 	movle.w	r2, #4294967295
 802094e:	fa02 f303 	lslle.w	r3, r2, r3
 8020952:	f04f 0a00 	mov.w	sl, #0
 8020956:	bfcc      	ite	gt
 8020958:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 802095c:	ea03 0b01 	andle.w	fp, r3, r1
 8020960:	2200      	movs	r2, #0
 8020962:	2300      	movs	r3, #0
 8020964:	4650      	mov	r0, sl
 8020966:	4659      	mov	r1, fp
 8020968:	f7f9 f8ae 	bl	8019ac8 <__aeabi_dcmpeq>
 802096c:	2800      	cmp	r0, #0
 802096e:	d1a4      	bne.n	80208ba <_strtod_l+0x57a>
 8020970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020972:	9300      	str	r3, [sp, #0]
 8020974:	990a      	ldr	r1, [sp, #40]	; 0x28
 8020976:	462b      	mov	r3, r5
 8020978:	463a      	mov	r2, r7
 802097a:	4620      	mov	r0, r4
 802097c:	f001 fe2e 	bl	80225dc <__s2b>
 8020980:	9009      	str	r0, [sp, #36]	; 0x24
 8020982:	2800      	cmp	r0, #0
 8020984:	f43f af24 	beq.w	80207d0 <_strtod_l+0x490>
 8020988:	9b07      	ldr	r3, [sp, #28]
 802098a:	1b9e      	subs	r6, r3, r6
 802098c:	9b08      	ldr	r3, [sp, #32]
 802098e:	2b00      	cmp	r3, #0
 8020990:	bfb4      	ite	lt
 8020992:	4633      	movlt	r3, r6
 8020994:	2300      	movge	r3, #0
 8020996:	9310      	str	r3, [sp, #64]	; 0x40
 8020998:	9b08      	ldr	r3, [sp, #32]
 802099a:	2500      	movs	r5, #0
 802099c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80209a0:	9318      	str	r3, [sp, #96]	; 0x60
 80209a2:	462e      	mov	r6, r5
 80209a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80209a6:	4620      	mov	r0, r4
 80209a8:	6859      	ldr	r1, [r3, #4]
 80209aa:	f001 fd6b 	bl	8022484 <_Balloc>
 80209ae:	9007      	str	r0, [sp, #28]
 80209b0:	2800      	cmp	r0, #0
 80209b2:	f43f af11 	beq.w	80207d8 <_strtod_l+0x498>
 80209b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80209b8:	691a      	ldr	r2, [r3, #16]
 80209ba:	3202      	adds	r2, #2
 80209bc:	f103 010c 	add.w	r1, r3, #12
 80209c0:	0092      	lsls	r2, r2, #2
 80209c2:	300c      	adds	r0, #12
 80209c4:	f7fe fcb8 	bl	801f338 <memcpy>
 80209c8:	ec4b ab10 	vmov	d0, sl, fp
 80209cc:	aa20      	add	r2, sp, #128	; 0x80
 80209ce:	a91f      	add	r1, sp, #124	; 0x7c
 80209d0:	4620      	mov	r0, r4
 80209d2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80209d6:	f002 f93d 	bl	8022c54 <__d2b>
 80209da:	901e      	str	r0, [sp, #120]	; 0x78
 80209dc:	2800      	cmp	r0, #0
 80209de:	f43f aefb 	beq.w	80207d8 <_strtod_l+0x498>
 80209e2:	2101      	movs	r1, #1
 80209e4:	4620      	mov	r0, r4
 80209e6:	f001 fe93 	bl	8022710 <__i2b>
 80209ea:	4606      	mov	r6, r0
 80209ec:	2800      	cmp	r0, #0
 80209ee:	f43f aef3 	beq.w	80207d8 <_strtod_l+0x498>
 80209f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80209f4:	9904      	ldr	r1, [sp, #16]
 80209f6:	2b00      	cmp	r3, #0
 80209f8:	bfab      	itete	ge
 80209fa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80209fc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80209fe:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8020a00:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8020a04:	bfac      	ite	ge
 8020a06:	eb03 0902 	addge.w	r9, r3, r2
 8020a0a:	1ad7      	sublt	r7, r2, r3
 8020a0c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020a0e:	eba3 0801 	sub.w	r8, r3, r1
 8020a12:	4490      	add	r8, r2
 8020a14:	4ba3      	ldr	r3, [pc, #652]	; (8020ca4 <_strtod_l+0x964>)
 8020a16:	f108 38ff 	add.w	r8, r8, #4294967295
 8020a1a:	4598      	cmp	r8, r3
 8020a1c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8020a20:	f280 80cc 	bge.w	8020bbc <_strtod_l+0x87c>
 8020a24:	eba3 0308 	sub.w	r3, r3, r8
 8020a28:	2b1f      	cmp	r3, #31
 8020a2a:	eba2 0203 	sub.w	r2, r2, r3
 8020a2e:	f04f 0101 	mov.w	r1, #1
 8020a32:	f300 80b6 	bgt.w	8020ba2 <_strtod_l+0x862>
 8020a36:	fa01 f303 	lsl.w	r3, r1, r3
 8020a3a:	9311      	str	r3, [sp, #68]	; 0x44
 8020a3c:	2300      	movs	r3, #0
 8020a3e:	930c      	str	r3, [sp, #48]	; 0x30
 8020a40:	eb09 0802 	add.w	r8, r9, r2
 8020a44:	9b04      	ldr	r3, [sp, #16]
 8020a46:	45c1      	cmp	r9, r8
 8020a48:	4417      	add	r7, r2
 8020a4a:	441f      	add	r7, r3
 8020a4c:	464b      	mov	r3, r9
 8020a4e:	bfa8      	it	ge
 8020a50:	4643      	movge	r3, r8
 8020a52:	42bb      	cmp	r3, r7
 8020a54:	bfa8      	it	ge
 8020a56:	463b      	movge	r3, r7
 8020a58:	2b00      	cmp	r3, #0
 8020a5a:	bfc2      	ittt	gt
 8020a5c:	eba8 0803 	subgt.w	r8, r8, r3
 8020a60:	1aff      	subgt	r7, r7, r3
 8020a62:	eba9 0903 	subgt.w	r9, r9, r3
 8020a66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020a68:	2b00      	cmp	r3, #0
 8020a6a:	dd17      	ble.n	8020a9c <_strtod_l+0x75c>
 8020a6c:	4631      	mov	r1, r6
 8020a6e:	461a      	mov	r2, r3
 8020a70:	4620      	mov	r0, r4
 8020a72:	f001 ff09 	bl	8022888 <__pow5mult>
 8020a76:	4606      	mov	r6, r0
 8020a78:	2800      	cmp	r0, #0
 8020a7a:	f43f aead 	beq.w	80207d8 <_strtod_l+0x498>
 8020a7e:	4601      	mov	r1, r0
 8020a80:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8020a82:	4620      	mov	r0, r4
 8020a84:	f001 fe5a 	bl	802273c <__multiply>
 8020a88:	900f      	str	r0, [sp, #60]	; 0x3c
 8020a8a:	2800      	cmp	r0, #0
 8020a8c:	f43f aea4 	beq.w	80207d8 <_strtod_l+0x498>
 8020a90:	991e      	ldr	r1, [sp, #120]	; 0x78
 8020a92:	4620      	mov	r0, r4
 8020a94:	f001 fd36 	bl	8022504 <_Bfree>
 8020a98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020a9a:	931e      	str	r3, [sp, #120]	; 0x78
 8020a9c:	f1b8 0f00 	cmp.w	r8, #0
 8020aa0:	f300 8091 	bgt.w	8020bc6 <_strtod_l+0x886>
 8020aa4:	9b08      	ldr	r3, [sp, #32]
 8020aa6:	2b00      	cmp	r3, #0
 8020aa8:	dd08      	ble.n	8020abc <_strtod_l+0x77c>
 8020aaa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8020aac:	9907      	ldr	r1, [sp, #28]
 8020aae:	4620      	mov	r0, r4
 8020ab0:	f001 feea 	bl	8022888 <__pow5mult>
 8020ab4:	9007      	str	r0, [sp, #28]
 8020ab6:	2800      	cmp	r0, #0
 8020ab8:	f43f ae8e 	beq.w	80207d8 <_strtod_l+0x498>
 8020abc:	2f00      	cmp	r7, #0
 8020abe:	dd08      	ble.n	8020ad2 <_strtod_l+0x792>
 8020ac0:	9907      	ldr	r1, [sp, #28]
 8020ac2:	463a      	mov	r2, r7
 8020ac4:	4620      	mov	r0, r4
 8020ac6:	f001 ff39 	bl	802293c <__lshift>
 8020aca:	9007      	str	r0, [sp, #28]
 8020acc:	2800      	cmp	r0, #0
 8020ace:	f43f ae83 	beq.w	80207d8 <_strtod_l+0x498>
 8020ad2:	f1b9 0f00 	cmp.w	r9, #0
 8020ad6:	dd08      	ble.n	8020aea <_strtod_l+0x7aa>
 8020ad8:	4631      	mov	r1, r6
 8020ada:	464a      	mov	r2, r9
 8020adc:	4620      	mov	r0, r4
 8020ade:	f001 ff2d 	bl	802293c <__lshift>
 8020ae2:	4606      	mov	r6, r0
 8020ae4:	2800      	cmp	r0, #0
 8020ae6:	f43f ae77 	beq.w	80207d8 <_strtod_l+0x498>
 8020aea:	9a07      	ldr	r2, [sp, #28]
 8020aec:	991e      	ldr	r1, [sp, #120]	; 0x78
 8020aee:	4620      	mov	r0, r4
 8020af0:	f001 ffac 	bl	8022a4c <__mdiff>
 8020af4:	4605      	mov	r5, r0
 8020af6:	2800      	cmp	r0, #0
 8020af8:	f43f ae6e 	beq.w	80207d8 <_strtod_l+0x498>
 8020afc:	68c3      	ldr	r3, [r0, #12]
 8020afe:	930f      	str	r3, [sp, #60]	; 0x3c
 8020b00:	2300      	movs	r3, #0
 8020b02:	60c3      	str	r3, [r0, #12]
 8020b04:	4631      	mov	r1, r6
 8020b06:	f001 ff85 	bl	8022a14 <__mcmp>
 8020b0a:	2800      	cmp	r0, #0
 8020b0c:	da65      	bge.n	8020bda <_strtod_l+0x89a>
 8020b0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020b10:	ea53 030a 	orrs.w	r3, r3, sl
 8020b14:	f040 8087 	bne.w	8020c26 <_strtod_l+0x8e6>
 8020b18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020b1c:	2b00      	cmp	r3, #0
 8020b1e:	f040 8082 	bne.w	8020c26 <_strtod_l+0x8e6>
 8020b22:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8020b26:	0d1b      	lsrs	r3, r3, #20
 8020b28:	051b      	lsls	r3, r3, #20
 8020b2a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8020b2e:	d97a      	bls.n	8020c26 <_strtod_l+0x8e6>
 8020b30:	696b      	ldr	r3, [r5, #20]
 8020b32:	b913      	cbnz	r3, 8020b3a <_strtod_l+0x7fa>
 8020b34:	692b      	ldr	r3, [r5, #16]
 8020b36:	2b01      	cmp	r3, #1
 8020b38:	dd75      	ble.n	8020c26 <_strtod_l+0x8e6>
 8020b3a:	4629      	mov	r1, r5
 8020b3c:	2201      	movs	r2, #1
 8020b3e:	4620      	mov	r0, r4
 8020b40:	f001 fefc 	bl	802293c <__lshift>
 8020b44:	4631      	mov	r1, r6
 8020b46:	4605      	mov	r5, r0
 8020b48:	f001 ff64 	bl	8022a14 <__mcmp>
 8020b4c:	2800      	cmp	r0, #0
 8020b4e:	dd6a      	ble.n	8020c26 <_strtod_l+0x8e6>
 8020b50:	9904      	ldr	r1, [sp, #16]
 8020b52:	4a55      	ldr	r2, [pc, #340]	; (8020ca8 <_strtod_l+0x968>)
 8020b54:	465b      	mov	r3, fp
 8020b56:	2900      	cmp	r1, #0
 8020b58:	f000 8085 	beq.w	8020c66 <_strtod_l+0x926>
 8020b5c:	ea02 010b 	and.w	r1, r2, fp
 8020b60:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8020b64:	dc7f      	bgt.n	8020c66 <_strtod_l+0x926>
 8020b66:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8020b6a:	f77f aeaa 	ble.w	80208c2 <_strtod_l+0x582>
 8020b6e:	4a4f      	ldr	r2, [pc, #316]	; (8020cac <_strtod_l+0x96c>)
 8020b70:	2300      	movs	r3, #0
 8020b72:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8020b76:	4650      	mov	r0, sl
 8020b78:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8020b7c:	4659      	mov	r1, fp
 8020b7e:	f7f8 fd3b 	bl	80195f8 <__aeabi_dmul>
 8020b82:	460b      	mov	r3, r1
 8020b84:	4303      	orrs	r3, r0
 8020b86:	bf08      	it	eq
 8020b88:	2322      	moveq	r3, #34	; 0x22
 8020b8a:	4682      	mov	sl, r0
 8020b8c:	468b      	mov	fp, r1
 8020b8e:	bf08      	it	eq
 8020b90:	6023      	streq	r3, [r4, #0]
 8020b92:	e62b      	b.n	80207ec <_strtod_l+0x4ac>
 8020b94:	f04f 32ff 	mov.w	r2, #4294967295
 8020b98:	fa02 f303 	lsl.w	r3, r2, r3
 8020b9c:	ea03 0a0a 	and.w	sl, r3, sl
 8020ba0:	e6de      	b.n	8020960 <_strtod_l+0x620>
 8020ba2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8020ba6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8020baa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8020bae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8020bb2:	fa01 f308 	lsl.w	r3, r1, r8
 8020bb6:	930c      	str	r3, [sp, #48]	; 0x30
 8020bb8:	9111      	str	r1, [sp, #68]	; 0x44
 8020bba:	e741      	b.n	8020a40 <_strtod_l+0x700>
 8020bbc:	2300      	movs	r3, #0
 8020bbe:	930c      	str	r3, [sp, #48]	; 0x30
 8020bc0:	2301      	movs	r3, #1
 8020bc2:	9311      	str	r3, [sp, #68]	; 0x44
 8020bc4:	e73c      	b.n	8020a40 <_strtod_l+0x700>
 8020bc6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8020bc8:	4642      	mov	r2, r8
 8020bca:	4620      	mov	r0, r4
 8020bcc:	f001 feb6 	bl	802293c <__lshift>
 8020bd0:	901e      	str	r0, [sp, #120]	; 0x78
 8020bd2:	2800      	cmp	r0, #0
 8020bd4:	f47f af66 	bne.w	8020aa4 <_strtod_l+0x764>
 8020bd8:	e5fe      	b.n	80207d8 <_strtod_l+0x498>
 8020bda:	465f      	mov	r7, fp
 8020bdc:	d16e      	bne.n	8020cbc <_strtod_l+0x97c>
 8020bde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020be0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020be4:	b342      	cbz	r2, 8020c38 <_strtod_l+0x8f8>
 8020be6:	4a32      	ldr	r2, [pc, #200]	; (8020cb0 <_strtod_l+0x970>)
 8020be8:	4293      	cmp	r3, r2
 8020bea:	d128      	bne.n	8020c3e <_strtod_l+0x8fe>
 8020bec:	9b04      	ldr	r3, [sp, #16]
 8020bee:	4650      	mov	r0, sl
 8020bf0:	b1eb      	cbz	r3, 8020c2e <_strtod_l+0x8ee>
 8020bf2:	4a2d      	ldr	r2, [pc, #180]	; (8020ca8 <_strtod_l+0x968>)
 8020bf4:	403a      	ands	r2, r7
 8020bf6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8020bfa:	f04f 31ff 	mov.w	r1, #4294967295
 8020bfe:	d819      	bhi.n	8020c34 <_strtod_l+0x8f4>
 8020c00:	0d12      	lsrs	r2, r2, #20
 8020c02:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8020c06:	fa01 f303 	lsl.w	r3, r1, r3
 8020c0a:	4298      	cmp	r0, r3
 8020c0c:	d117      	bne.n	8020c3e <_strtod_l+0x8fe>
 8020c0e:	4b29      	ldr	r3, [pc, #164]	; (8020cb4 <_strtod_l+0x974>)
 8020c10:	429f      	cmp	r7, r3
 8020c12:	d102      	bne.n	8020c1a <_strtod_l+0x8da>
 8020c14:	3001      	adds	r0, #1
 8020c16:	f43f addf 	beq.w	80207d8 <_strtod_l+0x498>
 8020c1a:	4b23      	ldr	r3, [pc, #140]	; (8020ca8 <_strtod_l+0x968>)
 8020c1c:	403b      	ands	r3, r7
 8020c1e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8020c22:	f04f 0a00 	mov.w	sl, #0
 8020c26:	9b04      	ldr	r3, [sp, #16]
 8020c28:	2b00      	cmp	r3, #0
 8020c2a:	d1a0      	bne.n	8020b6e <_strtod_l+0x82e>
 8020c2c:	e5de      	b.n	80207ec <_strtod_l+0x4ac>
 8020c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8020c32:	e7ea      	b.n	8020c0a <_strtod_l+0x8ca>
 8020c34:	460b      	mov	r3, r1
 8020c36:	e7e8      	b.n	8020c0a <_strtod_l+0x8ca>
 8020c38:	ea53 030a 	orrs.w	r3, r3, sl
 8020c3c:	d088      	beq.n	8020b50 <_strtod_l+0x810>
 8020c3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020c40:	b1db      	cbz	r3, 8020c7a <_strtod_l+0x93a>
 8020c42:	423b      	tst	r3, r7
 8020c44:	d0ef      	beq.n	8020c26 <_strtod_l+0x8e6>
 8020c46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020c48:	9a04      	ldr	r2, [sp, #16]
 8020c4a:	4650      	mov	r0, sl
 8020c4c:	4659      	mov	r1, fp
 8020c4e:	b1c3      	cbz	r3, 8020c82 <_strtod_l+0x942>
 8020c50:	f7ff fb57 	bl	8020302 <sulp>
 8020c54:	4602      	mov	r2, r0
 8020c56:	460b      	mov	r3, r1
 8020c58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8020c5c:	f7f8 fb16 	bl	801928c <__adddf3>
 8020c60:	4682      	mov	sl, r0
 8020c62:	468b      	mov	fp, r1
 8020c64:	e7df      	b.n	8020c26 <_strtod_l+0x8e6>
 8020c66:	4013      	ands	r3, r2
 8020c68:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8020c6c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8020c70:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8020c74:	f04f 3aff 	mov.w	sl, #4294967295
 8020c78:	e7d5      	b.n	8020c26 <_strtod_l+0x8e6>
 8020c7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020c7c:	ea13 0f0a 	tst.w	r3, sl
 8020c80:	e7e0      	b.n	8020c44 <_strtod_l+0x904>
 8020c82:	f7ff fb3e 	bl	8020302 <sulp>
 8020c86:	4602      	mov	r2, r0
 8020c88:	460b      	mov	r3, r1
 8020c8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8020c8e:	f7f8 fafb 	bl	8019288 <__aeabi_dsub>
 8020c92:	2200      	movs	r2, #0
 8020c94:	2300      	movs	r3, #0
 8020c96:	4682      	mov	sl, r0
 8020c98:	468b      	mov	fp, r1
 8020c9a:	f7f8 ff15 	bl	8019ac8 <__aeabi_dcmpeq>
 8020c9e:	2800      	cmp	r0, #0
 8020ca0:	d0c1      	beq.n	8020c26 <_strtod_l+0x8e6>
 8020ca2:	e60e      	b.n	80208c2 <_strtod_l+0x582>
 8020ca4:	fffffc02 	.word	0xfffffc02
 8020ca8:	7ff00000 	.word	0x7ff00000
 8020cac:	39500000 	.word	0x39500000
 8020cb0:	000fffff 	.word	0x000fffff
 8020cb4:	7fefffff 	.word	0x7fefffff
 8020cb8:	08023f80 	.word	0x08023f80
 8020cbc:	4631      	mov	r1, r6
 8020cbe:	4628      	mov	r0, r5
 8020cc0:	f002 f824 	bl	8022d0c <__ratio>
 8020cc4:	ec59 8b10 	vmov	r8, r9, d0
 8020cc8:	ee10 0a10 	vmov	r0, s0
 8020ccc:	2200      	movs	r2, #0
 8020cce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8020cd2:	4649      	mov	r1, r9
 8020cd4:	f7f8 ff0c 	bl	8019af0 <__aeabi_dcmple>
 8020cd8:	2800      	cmp	r0, #0
 8020cda:	d07c      	beq.n	8020dd6 <_strtod_l+0xa96>
 8020cdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020cde:	2b00      	cmp	r3, #0
 8020ce0:	d04c      	beq.n	8020d7c <_strtod_l+0xa3c>
 8020ce2:	4b95      	ldr	r3, [pc, #596]	; (8020f38 <_strtod_l+0xbf8>)
 8020ce4:	2200      	movs	r2, #0
 8020ce6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8020cea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8020f38 <_strtod_l+0xbf8>
 8020cee:	f04f 0800 	mov.w	r8, #0
 8020cf2:	4b92      	ldr	r3, [pc, #584]	; (8020f3c <_strtod_l+0xbfc>)
 8020cf4:	403b      	ands	r3, r7
 8020cf6:	9311      	str	r3, [sp, #68]	; 0x44
 8020cf8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020cfa:	4b91      	ldr	r3, [pc, #580]	; (8020f40 <_strtod_l+0xc00>)
 8020cfc:	429a      	cmp	r2, r3
 8020cfe:	f040 80b2 	bne.w	8020e66 <_strtod_l+0xb26>
 8020d02:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8020d06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8020d0a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8020d0e:	ec4b ab10 	vmov	d0, sl, fp
 8020d12:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8020d16:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8020d1a:	f001 ff1f 	bl	8022b5c <__ulp>
 8020d1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8020d22:	ec53 2b10 	vmov	r2, r3, d0
 8020d26:	f7f8 fc67 	bl	80195f8 <__aeabi_dmul>
 8020d2a:	4652      	mov	r2, sl
 8020d2c:	465b      	mov	r3, fp
 8020d2e:	f7f8 faad 	bl	801928c <__adddf3>
 8020d32:	460b      	mov	r3, r1
 8020d34:	4981      	ldr	r1, [pc, #516]	; (8020f3c <_strtod_l+0xbfc>)
 8020d36:	4a83      	ldr	r2, [pc, #524]	; (8020f44 <_strtod_l+0xc04>)
 8020d38:	4019      	ands	r1, r3
 8020d3a:	4291      	cmp	r1, r2
 8020d3c:	4682      	mov	sl, r0
 8020d3e:	d95e      	bls.n	8020dfe <_strtod_l+0xabe>
 8020d40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020d42:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8020d46:	4293      	cmp	r3, r2
 8020d48:	d103      	bne.n	8020d52 <_strtod_l+0xa12>
 8020d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020d4c:	3301      	adds	r3, #1
 8020d4e:	f43f ad43 	beq.w	80207d8 <_strtod_l+0x498>
 8020d52:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8020f50 <_strtod_l+0xc10>
 8020d56:	f04f 3aff 	mov.w	sl, #4294967295
 8020d5a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8020d5c:	4620      	mov	r0, r4
 8020d5e:	f001 fbd1 	bl	8022504 <_Bfree>
 8020d62:	9907      	ldr	r1, [sp, #28]
 8020d64:	4620      	mov	r0, r4
 8020d66:	f001 fbcd 	bl	8022504 <_Bfree>
 8020d6a:	4631      	mov	r1, r6
 8020d6c:	4620      	mov	r0, r4
 8020d6e:	f001 fbc9 	bl	8022504 <_Bfree>
 8020d72:	4629      	mov	r1, r5
 8020d74:	4620      	mov	r0, r4
 8020d76:	f001 fbc5 	bl	8022504 <_Bfree>
 8020d7a:	e613      	b.n	80209a4 <_strtod_l+0x664>
 8020d7c:	f1ba 0f00 	cmp.w	sl, #0
 8020d80:	d11b      	bne.n	8020dba <_strtod_l+0xa7a>
 8020d82:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020d86:	b9f3      	cbnz	r3, 8020dc6 <_strtod_l+0xa86>
 8020d88:	4b6b      	ldr	r3, [pc, #428]	; (8020f38 <_strtod_l+0xbf8>)
 8020d8a:	2200      	movs	r2, #0
 8020d8c:	4640      	mov	r0, r8
 8020d8e:	4649      	mov	r1, r9
 8020d90:	f7f8 fea4 	bl	8019adc <__aeabi_dcmplt>
 8020d94:	b9d0      	cbnz	r0, 8020dcc <_strtod_l+0xa8c>
 8020d96:	4640      	mov	r0, r8
 8020d98:	4649      	mov	r1, r9
 8020d9a:	4b6b      	ldr	r3, [pc, #428]	; (8020f48 <_strtod_l+0xc08>)
 8020d9c:	2200      	movs	r2, #0
 8020d9e:	f7f8 fc2b 	bl	80195f8 <__aeabi_dmul>
 8020da2:	4680      	mov	r8, r0
 8020da4:	4689      	mov	r9, r1
 8020da6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8020daa:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8020dae:	931b      	str	r3, [sp, #108]	; 0x6c
 8020db0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8020db4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8020db8:	e79b      	b.n	8020cf2 <_strtod_l+0x9b2>
 8020dba:	f1ba 0f01 	cmp.w	sl, #1
 8020dbe:	d102      	bne.n	8020dc6 <_strtod_l+0xa86>
 8020dc0:	2f00      	cmp	r7, #0
 8020dc2:	f43f ad7e 	beq.w	80208c2 <_strtod_l+0x582>
 8020dc6:	4b61      	ldr	r3, [pc, #388]	; (8020f4c <_strtod_l+0xc0c>)
 8020dc8:	2200      	movs	r2, #0
 8020dca:	e78c      	b.n	8020ce6 <_strtod_l+0x9a6>
 8020dcc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8020f48 <_strtod_l+0xc08>
 8020dd0:	f04f 0800 	mov.w	r8, #0
 8020dd4:	e7e7      	b.n	8020da6 <_strtod_l+0xa66>
 8020dd6:	4b5c      	ldr	r3, [pc, #368]	; (8020f48 <_strtod_l+0xc08>)
 8020dd8:	4640      	mov	r0, r8
 8020dda:	4649      	mov	r1, r9
 8020ddc:	2200      	movs	r2, #0
 8020dde:	f7f8 fc0b 	bl	80195f8 <__aeabi_dmul>
 8020de2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020de4:	4680      	mov	r8, r0
 8020de6:	4689      	mov	r9, r1
 8020de8:	b933      	cbnz	r3, 8020df8 <_strtod_l+0xab8>
 8020dea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020dee:	9012      	str	r0, [sp, #72]	; 0x48
 8020df0:	9313      	str	r3, [sp, #76]	; 0x4c
 8020df2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8020df6:	e7dd      	b.n	8020db4 <_strtod_l+0xa74>
 8020df8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8020dfc:	e7f9      	b.n	8020df2 <_strtod_l+0xab2>
 8020dfe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8020e02:	9b04      	ldr	r3, [sp, #16]
 8020e04:	2b00      	cmp	r3, #0
 8020e06:	d1a8      	bne.n	8020d5a <_strtod_l+0xa1a>
 8020e08:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8020e0c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020e0e:	0d1b      	lsrs	r3, r3, #20
 8020e10:	051b      	lsls	r3, r3, #20
 8020e12:	429a      	cmp	r2, r3
 8020e14:	d1a1      	bne.n	8020d5a <_strtod_l+0xa1a>
 8020e16:	4640      	mov	r0, r8
 8020e18:	4649      	mov	r1, r9
 8020e1a:	f7f8 ff4d 	bl	8019cb8 <__aeabi_d2lz>
 8020e1e:	f7f8 fbbd 	bl	801959c <__aeabi_l2d>
 8020e22:	4602      	mov	r2, r0
 8020e24:	460b      	mov	r3, r1
 8020e26:	4640      	mov	r0, r8
 8020e28:	4649      	mov	r1, r9
 8020e2a:	f7f8 fa2d 	bl	8019288 <__aeabi_dsub>
 8020e2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020e30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020e34:	ea43 030a 	orr.w	r3, r3, sl
 8020e38:	4313      	orrs	r3, r2
 8020e3a:	4680      	mov	r8, r0
 8020e3c:	4689      	mov	r9, r1
 8020e3e:	d053      	beq.n	8020ee8 <_strtod_l+0xba8>
 8020e40:	a335      	add	r3, pc, #212	; (adr r3, 8020f18 <_strtod_l+0xbd8>)
 8020e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e46:	f7f8 fe49 	bl	8019adc <__aeabi_dcmplt>
 8020e4a:	2800      	cmp	r0, #0
 8020e4c:	f47f acce 	bne.w	80207ec <_strtod_l+0x4ac>
 8020e50:	a333      	add	r3, pc, #204	; (adr r3, 8020f20 <_strtod_l+0xbe0>)
 8020e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e56:	4640      	mov	r0, r8
 8020e58:	4649      	mov	r1, r9
 8020e5a:	f7f8 fe5d 	bl	8019b18 <__aeabi_dcmpgt>
 8020e5e:	2800      	cmp	r0, #0
 8020e60:	f43f af7b 	beq.w	8020d5a <_strtod_l+0xa1a>
 8020e64:	e4c2      	b.n	80207ec <_strtod_l+0x4ac>
 8020e66:	9b04      	ldr	r3, [sp, #16]
 8020e68:	b333      	cbz	r3, 8020eb8 <_strtod_l+0xb78>
 8020e6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020e6c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8020e70:	d822      	bhi.n	8020eb8 <_strtod_l+0xb78>
 8020e72:	a32d      	add	r3, pc, #180	; (adr r3, 8020f28 <_strtod_l+0xbe8>)
 8020e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e78:	4640      	mov	r0, r8
 8020e7a:	4649      	mov	r1, r9
 8020e7c:	f7f8 fe38 	bl	8019af0 <__aeabi_dcmple>
 8020e80:	b1a0      	cbz	r0, 8020eac <_strtod_l+0xb6c>
 8020e82:	4649      	mov	r1, r9
 8020e84:	4640      	mov	r0, r8
 8020e86:	f7f8 fe8f 	bl	8019ba8 <__aeabi_d2uiz>
 8020e8a:	2801      	cmp	r0, #1
 8020e8c:	bf38      	it	cc
 8020e8e:	2001      	movcc	r0, #1
 8020e90:	f7f8 fb38 	bl	8019504 <__aeabi_ui2d>
 8020e94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020e96:	4680      	mov	r8, r0
 8020e98:	4689      	mov	r9, r1
 8020e9a:	bb13      	cbnz	r3, 8020ee2 <_strtod_l+0xba2>
 8020e9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020ea0:	9014      	str	r0, [sp, #80]	; 0x50
 8020ea2:	9315      	str	r3, [sp, #84]	; 0x54
 8020ea4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8020ea8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8020eac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020eae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020eb0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8020eb4:	1a9b      	subs	r3, r3, r2
 8020eb6:	930d      	str	r3, [sp, #52]	; 0x34
 8020eb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8020ebc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8020ec0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8020ec4:	f001 fe4a 	bl	8022b5c <__ulp>
 8020ec8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8020ecc:	ec53 2b10 	vmov	r2, r3, d0
 8020ed0:	f7f8 fb92 	bl	80195f8 <__aeabi_dmul>
 8020ed4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8020ed8:	f7f8 f9d8 	bl	801928c <__adddf3>
 8020edc:	4682      	mov	sl, r0
 8020ede:	468b      	mov	fp, r1
 8020ee0:	e78f      	b.n	8020e02 <_strtod_l+0xac2>
 8020ee2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8020ee6:	e7dd      	b.n	8020ea4 <_strtod_l+0xb64>
 8020ee8:	a311      	add	r3, pc, #68	; (adr r3, 8020f30 <_strtod_l+0xbf0>)
 8020eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020eee:	f7f8 fdf5 	bl	8019adc <__aeabi_dcmplt>
 8020ef2:	e7b4      	b.n	8020e5e <_strtod_l+0xb1e>
 8020ef4:	2300      	movs	r3, #0
 8020ef6:	930e      	str	r3, [sp, #56]	; 0x38
 8020ef8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8020efa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020efc:	6013      	str	r3, [r2, #0]
 8020efe:	f7ff ba65 	b.w	80203cc <_strtod_l+0x8c>
 8020f02:	2b65      	cmp	r3, #101	; 0x65
 8020f04:	f43f ab5d 	beq.w	80205c2 <_strtod_l+0x282>
 8020f08:	2b45      	cmp	r3, #69	; 0x45
 8020f0a:	f43f ab5a 	beq.w	80205c2 <_strtod_l+0x282>
 8020f0e:	2201      	movs	r2, #1
 8020f10:	f7ff bb92 	b.w	8020638 <_strtod_l+0x2f8>
 8020f14:	f3af 8000 	nop.w
 8020f18:	94a03595 	.word	0x94a03595
 8020f1c:	3fdfffff 	.word	0x3fdfffff
 8020f20:	35afe535 	.word	0x35afe535
 8020f24:	3fe00000 	.word	0x3fe00000
 8020f28:	ffc00000 	.word	0xffc00000
 8020f2c:	41dfffff 	.word	0x41dfffff
 8020f30:	94a03595 	.word	0x94a03595
 8020f34:	3fcfffff 	.word	0x3fcfffff
 8020f38:	3ff00000 	.word	0x3ff00000
 8020f3c:	7ff00000 	.word	0x7ff00000
 8020f40:	7fe00000 	.word	0x7fe00000
 8020f44:	7c9fffff 	.word	0x7c9fffff
 8020f48:	3fe00000 	.word	0x3fe00000
 8020f4c:	bff00000 	.word	0xbff00000
 8020f50:	7fefffff 	.word	0x7fefffff

08020f54 <_strtod_r>:
 8020f54:	4b01      	ldr	r3, [pc, #4]	; (8020f5c <_strtod_r+0x8>)
 8020f56:	f7ff b9f3 	b.w	8020340 <_strtod_l>
 8020f5a:	bf00      	nop
 8020f5c:	20000098 	.word	0x20000098

08020f60 <_strtol_l.isra.0>:
 8020f60:	2b01      	cmp	r3, #1
 8020f62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020f66:	d001      	beq.n	8020f6c <_strtol_l.isra.0+0xc>
 8020f68:	2b24      	cmp	r3, #36	; 0x24
 8020f6a:	d906      	bls.n	8020f7a <_strtol_l.isra.0+0x1a>
 8020f6c:	f7fe f9aa 	bl	801f2c4 <__errno>
 8020f70:	2316      	movs	r3, #22
 8020f72:	6003      	str	r3, [r0, #0]
 8020f74:	2000      	movs	r0, #0
 8020f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020f7a:	4f3a      	ldr	r7, [pc, #232]	; (8021064 <_strtol_l.isra.0+0x104>)
 8020f7c:	468e      	mov	lr, r1
 8020f7e:	4676      	mov	r6, lr
 8020f80:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8020f84:	5de5      	ldrb	r5, [r4, r7]
 8020f86:	f015 0508 	ands.w	r5, r5, #8
 8020f8a:	d1f8      	bne.n	8020f7e <_strtol_l.isra.0+0x1e>
 8020f8c:	2c2d      	cmp	r4, #45	; 0x2d
 8020f8e:	d134      	bne.n	8020ffa <_strtol_l.isra.0+0x9a>
 8020f90:	f89e 4000 	ldrb.w	r4, [lr]
 8020f94:	f04f 0801 	mov.w	r8, #1
 8020f98:	f106 0e02 	add.w	lr, r6, #2
 8020f9c:	2b00      	cmp	r3, #0
 8020f9e:	d05c      	beq.n	802105a <_strtol_l.isra.0+0xfa>
 8020fa0:	2b10      	cmp	r3, #16
 8020fa2:	d10c      	bne.n	8020fbe <_strtol_l.isra.0+0x5e>
 8020fa4:	2c30      	cmp	r4, #48	; 0x30
 8020fa6:	d10a      	bne.n	8020fbe <_strtol_l.isra.0+0x5e>
 8020fa8:	f89e 4000 	ldrb.w	r4, [lr]
 8020fac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8020fb0:	2c58      	cmp	r4, #88	; 0x58
 8020fb2:	d14d      	bne.n	8021050 <_strtol_l.isra.0+0xf0>
 8020fb4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8020fb8:	2310      	movs	r3, #16
 8020fba:	f10e 0e02 	add.w	lr, lr, #2
 8020fbe:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8020fc2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020fc6:	2600      	movs	r6, #0
 8020fc8:	fbbc f9f3 	udiv	r9, ip, r3
 8020fcc:	4635      	mov	r5, r6
 8020fce:	fb03 ca19 	mls	sl, r3, r9, ip
 8020fd2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8020fd6:	2f09      	cmp	r7, #9
 8020fd8:	d818      	bhi.n	802100c <_strtol_l.isra.0+0xac>
 8020fda:	463c      	mov	r4, r7
 8020fdc:	42a3      	cmp	r3, r4
 8020fde:	dd24      	ble.n	802102a <_strtol_l.isra.0+0xca>
 8020fe0:	2e00      	cmp	r6, #0
 8020fe2:	db1f      	blt.n	8021024 <_strtol_l.isra.0+0xc4>
 8020fe4:	45a9      	cmp	r9, r5
 8020fe6:	d31d      	bcc.n	8021024 <_strtol_l.isra.0+0xc4>
 8020fe8:	d101      	bne.n	8020fee <_strtol_l.isra.0+0x8e>
 8020fea:	45a2      	cmp	sl, r4
 8020fec:	db1a      	blt.n	8021024 <_strtol_l.isra.0+0xc4>
 8020fee:	fb05 4503 	mla	r5, r5, r3, r4
 8020ff2:	2601      	movs	r6, #1
 8020ff4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8020ff8:	e7eb      	b.n	8020fd2 <_strtol_l.isra.0+0x72>
 8020ffa:	2c2b      	cmp	r4, #43	; 0x2b
 8020ffc:	bf08      	it	eq
 8020ffe:	f89e 4000 	ldrbeq.w	r4, [lr]
 8021002:	46a8      	mov	r8, r5
 8021004:	bf08      	it	eq
 8021006:	f106 0e02 	addeq.w	lr, r6, #2
 802100a:	e7c7      	b.n	8020f9c <_strtol_l.isra.0+0x3c>
 802100c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8021010:	2f19      	cmp	r7, #25
 8021012:	d801      	bhi.n	8021018 <_strtol_l.isra.0+0xb8>
 8021014:	3c37      	subs	r4, #55	; 0x37
 8021016:	e7e1      	b.n	8020fdc <_strtol_l.isra.0+0x7c>
 8021018:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 802101c:	2f19      	cmp	r7, #25
 802101e:	d804      	bhi.n	802102a <_strtol_l.isra.0+0xca>
 8021020:	3c57      	subs	r4, #87	; 0x57
 8021022:	e7db      	b.n	8020fdc <_strtol_l.isra.0+0x7c>
 8021024:	f04f 36ff 	mov.w	r6, #4294967295
 8021028:	e7e4      	b.n	8020ff4 <_strtol_l.isra.0+0x94>
 802102a:	2e00      	cmp	r6, #0
 802102c:	da05      	bge.n	802103a <_strtol_l.isra.0+0xda>
 802102e:	2322      	movs	r3, #34	; 0x22
 8021030:	6003      	str	r3, [r0, #0]
 8021032:	4665      	mov	r5, ip
 8021034:	b942      	cbnz	r2, 8021048 <_strtol_l.isra.0+0xe8>
 8021036:	4628      	mov	r0, r5
 8021038:	e79d      	b.n	8020f76 <_strtol_l.isra.0+0x16>
 802103a:	f1b8 0f00 	cmp.w	r8, #0
 802103e:	d000      	beq.n	8021042 <_strtol_l.isra.0+0xe2>
 8021040:	426d      	negs	r5, r5
 8021042:	2a00      	cmp	r2, #0
 8021044:	d0f7      	beq.n	8021036 <_strtol_l.isra.0+0xd6>
 8021046:	b10e      	cbz	r6, 802104c <_strtol_l.isra.0+0xec>
 8021048:	f10e 31ff 	add.w	r1, lr, #4294967295
 802104c:	6011      	str	r1, [r2, #0]
 802104e:	e7f2      	b.n	8021036 <_strtol_l.isra.0+0xd6>
 8021050:	2430      	movs	r4, #48	; 0x30
 8021052:	2b00      	cmp	r3, #0
 8021054:	d1b3      	bne.n	8020fbe <_strtol_l.isra.0+0x5e>
 8021056:	2308      	movs	r3, #8
 8021058:	e7b1      	b.n	8020fbe <_strtol_l.isra.0+0x5e>
 802105a:	2c30      	cmp	r4, #48	; 0x30
 802105c:	d0a4      	beq.n	8020fa8 <_strtol_l.isra.0+0x48>
 802105e:	230a      	movs	r3, #10
 8021060:	e7ad      	b.n	8020fbe <_strtol_l.isra.0+0x5e>
 8021062:	bf00      	nop
 8021064:	08023fa9 	.word	0x08023fa9

08021068 <_strtol_r>:
 8021068:	f7ff bf7a 	b.w	8020f60 <_strtol_l.isra.0>

0802106c <quorem>:
 802106c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021070:	6903      	ldr	r3, [r0, #16]
 8021072:	690c      	ldr	r4, [r1, #16]
 8021074:	42a3      	cmp	r3, r4
 8021076:	4607      	mov	r7, r0
 8021078:	f2c0 8081 	blt.w	802117e <quorem+0x112>
 802107c:	3c01      	subs	r4, #1
 802107e:	f101 0814 	add.w	r8, r1, #20
 8021082:	f100 0514 	add.w	r5, r0, #20
 8021086:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802108a:	9301      	str	r3, [sp, #4]
 802108c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8021090:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8021094:	3301      	adds	r3, #1
 8021096:	429a      	cmp	r2, r3
 8021098:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 802109c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80210a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80210a4:	d331      	bcc.n	802110a <quorem+0x9e>
 80210a6:	f04f 0e00 	mov.w	lr, #0
 80210aa:	4640      	mov	r0, r8
 80210ac:	46ac      	mov	ip, r5
 80210ae:	46f2      	mov	sl, lr
 80210b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80210b4:	b293      	uxth	r3, r2
 80210b6:	fb06 e303 	mla	r3, r6, r3, lr
 80210ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80210be:	b29b      	uxth	r3, r3
 80210c0:	ebaa 0303 	sub.w	r3, sl, r3
 80210c4:	0c12      	lsrs	r2, r2, #16
 80210c6:	f8dc a000 	ldr.w	sl, [ip]
 80210ca:	fb06 e202 	mla	r2, r6, r2, lr
 80210ce:	fa13 f38a 	uxtah	r3, r3, sl
 80210d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80210d6:	fa1f fa82 	uxth.w	sl, r2
 80210da:	f8dc 2000 	ldr.w	r2, [ip]
 80210de:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80210e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80210e6:	b29b      	uxth	r3, r3
 80210e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80210ec:	4581      	cmp	r9, r0
 80210ee:	f84c 3b04 	str.w	r3, [ip], #4
 80210f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80210f6:	d2db      	bcs.n	80210b0 <quorem+0x44>
 80210f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80210fc:	b92b      	cbnz	r3, 802110a <quorem+0x9e>
 80210fe:	9b01      	ldr	r3, [sp, #4]
 8021100:	3b04      	subs	r3, #4
 8021102:	429d      	cmp	r5, r3
 8021104:	461a      	mov	r2, r3
 8021106:	d32e      	bcc.n	8021166 <quorem+0xfa>
 8021108:	613c      	str	r4, [r7, #16]
 802110a:	4638      	mov	r0, r7
 802110c:	f001 fc82 	bl	8022a14 <__mcmp>
 8021110:	2800      	cmp	r0, #0
 8021112:	db24      	blt.n	802115e <quorem+0xf2>
 8021114:	3601      	adds	r6, #1
 8021116:	4628      	mov	r0, r5
 8021118:	f04f 0c00 	mov.w	ip, #0
 802111c:	f858 2b04 	ldr.w	r2, [r8], #4
 8021120:	f8d0 e000 	ldr.w	lr, [r0]
 8021124:	b293      	uxth	r3, r2
 8021126:	ebac 0303 	sub.w	r3, ip, r3
 802112a:	0c12      	lsrs	r2, r2, #16
 802112c:	fa13 f38e 	uxtah	r3, r3, lr
 8021130:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8021134:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8021138:	b29b      	uxth	r3, r3
 802113a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802113e:	45c1      	cmp	r9, r8
 8021140:	f840 3b04 	str.w	r3, [r0], #4
 8021144:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8021148:	d2e8      	bcs.n	802111c <quorem+0xb0>
 802114a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802114e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8021152:	b922      	cbnz	r2, 802115e <quorem+0xf2>
 8021154:	3b04      	subs	r3, #4
 8021156:	429d      	cmp	r5, r3
 8021158:	461a      	mov	r2, r3
 802115a:	d30a      	bcc.n	8021172 <quorem+0x106>
 802115c:	613c      	str	r4, [r7, #16]
 802115e:	4630      	mov	r0, r6
 8021160:	b003      	add	sp, #12
 8021162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021166:	6812      	ldr	r2, [r2, #0]
 8021168:	3b04      	subs	r3, #4
 802116a:	2a00      	cmp	r2, #0
 802116c:	d1cc      	bne.n	8021108 <quorem+0x9c>
 802116e:	3c01      	subs	r4, #1
 8021170:	e7c7      	b.n	8021102 <quorem+0x96>
 8021172:	6812      	ldr	r2, [r2, #0]
 8021174:	3b04      	subs	r3, #4
 8021176:	2a00      	cmp	r2, #0
 8021178:	d1f0      	bne.n	802115c <quorem+0xf0>
 802117a:	3c01      	subs	r4, #1
 802117c:	e7eb      	b.n	8021156 <quorem+0xea>
 802117e:	2000      	movs	r0, #0
 8021180:	e7ee      	b.n	8021160 <quorem+0xf4>
 8021182:	0000      	movs	r0, r0
 8021184:	0000      	movs	r0, r0
	...

08021188 <_dtoa_r>:
 8021188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802118c:	ed2d 8b02 	vpush	{d8}
 8021190:	ec57 6b10 	vmov	r6, r7, d0
 8021194:	b095      	sub	sp, #84	; 0x54
 8021196:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8021198:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 802119c:	9105      	str	r1, [sp, #20]
 802119e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80211a2:	4604      	mov	r4, r0
 80211a4:	9209      	str	r2, [sp, #36]	; 0x24
 80211a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80211a8:	b975      	cbnz	r5, 80211c8 <_dtoa_r+0x40>
 80211aa:	2010      	movs	r0, #16
 80211ac:	f7fe f8b4 	bl	801f318 <malloc>
 80211b0:	4602      	mov	r2, r0
 80211b2:	6260      	str	r0, [r4, #36]	; 0x24
 80211b4:	b920      	cbnz	r0, 80211c0 <_dtoa_r+0x38>
 80211b6:	4bb2      	ldr	r3, [pc, #712]	; (8021480 <_dtoa_r+0x2f8>)
 80211b8:	21ea      	movs	r1, #234	; 0xea
 80211ba:	48b2      	ldr	r0, [pc, #712]	; (8021484 <_dtoa_r+0x2fc>)
 80211bc:	f001 ffb0 	bl	8023120 <__assert_func>
 80211c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80211c4:	6005      	str	r5, [r0, #0]
 80211c6:	60c5      	str	r5, [r0, #12]
 80211c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80211ca:	6819      	ldr	r1, [r3, #0]
 80211cc:	b151      	cbz	r1, 80211e4 <_dtoa_r+0x5c>
 80211ce:	685a      	ldr	r2, [r3, #4]
 80211d0:	604a      	str	r2, [r1, #4]
 80211d2:	2301      	movs	r3, #1
 80211d4:	4093      	lsls	r3, r2
 80211d6:	608b      	str	r3, [r1, #8]
 80211d8:	4620      	mov	r0, r4
 80211da:	f001 f993 	bl	8022504 <_Bfree>
 80211de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80211e0:	2200      	movs	r2, #0
 80211e2:	601a      	str	r2, [r3, #0]
 80211e4:	1e3b      	subs	r3, r7, #0
 80211e6:	bfb9      	ittee	lt
 80211e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80211ec:	9303      	strlt	r3, [sp, #12]
 80211ee:	2300      	movge	r3, #0
 80211f0:	f8c8 3000 	strge.w	r3, [r8]
 80211f4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80211f8:	4ba3      	ldr	r3, [pc, #652]	; (8021488 <_dtoa_r+0x300>)
 80211fa:	bfbc      	itt	lt
 80211fc:	2201      	movlt	r2, #1
 80211fe:	f8c8 2000 	strlt.w	r2, [r8]
 8021202:	ea33 0309 	bics.w	r3, r3, r9
 8021206:	d11b      	bne.n	8021240 <_dtoa_r+0xb8>
 8021208:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802120a:	f242 730f 	movw	r3, #9999	; 0x270f
 802120e:	6013      	str	r3, [r2, #0]
 8021210:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8021214:	4333      	orrs	r3, r6
 8021216:	f000 857a 	beq.w	8021d0e <_dtoa_r+0xb86>
 802121a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802121c:	b963      	cbnz	r3, 8021238 <_dtoa_r+0xb0>
 802121e:	4b9b      	ldr	r3, [pc, #620]	; (802148c <_dtoa_r+0x304>)
 8021220:	e024      	b.n	802126c <_dtoa_r+0xe4>
 8021222:	4b9b      	ldr	r3, [pc, #620]	; (8021490 <_dtoa_r+0x308>)
 8021224:	9300      	str	r3, [sp, #0]
 8021226:	3308      	adds	r3, #8
 8021228:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802122a:	6013      	str	r3, [r2, #0]
 802122c:	9800      	ldr	r0, [sp, #0]
 802122e:	b015      	add	sp, #84	; 0x54
 8021230:	ecbd 8b02 	vpop	{d8}
 8021234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021238:	4b94      	ldr	r3, [pc, #592]	; (802148c <_dtoa_r+0x304>)
 802123a:	9300      	str	r3, [sp, #0]
 802123c:	3303      	adds	r3, #3
 802123e:	e7f3      	b.n	8021228 <_dtoa_r+0xa0>
 8021240:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021244:	2200      	movs	r2, #0
 8021246:	ec51 0b17 	vmov	r0, r1, d7
 802124a:	2300      	movs	r3, #0
 802124c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8021250:	f7f8 fc3a 	bl	8019ac8 <__aeabi_dcmpeq>
 8021254:	4680      	mov	r8, r0
 8021256:	b158      	cbz	r0, 8021270 <_dtoa_r+0xe8>
 8021258:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802125a:	2301      	movs	r3, #1
 802125c:	6013      	str	r3, [r2, #0]
 802125e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021260:	2b00      	cmp	r3, #0
 8021262:	f000 8551 	beq.w	8021d08 <_dtoa_r+0xb80>
 8021266:	488b      	ldr	r0, [pc, #556]	; (8021494 <_dtoa_r+0x30c>)
 8021268:	6018      	str	r0, [r3, #0]
 802126a:	1e43      	subs	r3, r0, #1
 802126c:	9300      	str	r3, [sp, #0]
 802126e:	e7dd      	b.n	802122c <_dtoa_r+0xa4>
 8021270:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8021274:	aa12      	add	r2, sp, #72	; 0x48
 8021276:	a913      	add	r1, sp, #76	; 0x4c
 8021278:	4620      	mov	r0, r4
 802127a:	f001 fceb 	bl	8022c54 <__d2b>
 802127e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8021282:	4683      	mov	fp, r0
 8021284:	2d00      	cmp	r5, #0
 8021286:	d07c      	beq.n	8021382 <_dtoa_r+0x1fa>
 8021288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802128a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 802128e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8021292:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8021296:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 802129a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 802129e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80212a2:	4b7d      	ldr	r3, [pc, #500]	; (8021498 <_dtoa_r+0x310>)
 80212a4:	2200      	movs	r2, #0
 80212a6:	4630      	mov	r0, r6
 80212a8:	4639      	mov	r1, r7
 80212aa:	f7f7 ffed 	bl	8019288 <__aeabi_dsub>
 80212ae:	a36e      	add	r3, pc, #440	; (adr r3, 8021468 <_dtoa_r+0x2e0>)
 80212b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80212b4:	f7f8 f9a0 	bl	80195f8 <__aeabi_dmul>
 80212b8:	a36d      	add	r3, pc, #436	; (adr r3, 8021470 <_dtoa_r+0x2e8>)
 80212ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80212be:	f7f7 ffe5 	bl	801928c <__adddf3>
 80212c2:	4606      	mov	r6, r0
 80212c4:	4628      	mov	r0, r5
 80212c6:	460f      	mov	r7, r1
 80212c8:	f7f8 f92c 	bl	8019524 <__aeabi_i2d>
 80212cc:	a36a      	add	r3, pc, #424	; (adr r3, 8021478 <_dtoa_r+0x2f0>)
 80212ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80212d2:	f7f8 f991 	bl	80195f8 <__aeabi_dmul>
 80212d6:	4602      	mov	r2, r0
 80212d8:	460b      	mov	r3, r1
 80212da:	4630      	mov	r0, r6
 80212dc:	4639      	mov	r1, r7
 80212de:	f7f7 ffd5 	bl	801928c <__adddf3>
 80212e2:	4606      	mov	r6, r0
 80212e4:	460f      	mov	r7, r1
 80212e6:	f7f8 fc37 	bl	8019b58 <__aeabi_d2iz>
 80212ea:	2200      	movs	r2, #0
 80212ec:	4682      	mov	sl, r0
 80212ee:	2300      	movs	r3, #0
 80212f0:	4630      	mov	r0, r6
 80212f2:	4639      	mov	r1, r7
 80212f4:	f7f8 fbf2 	bl	8019adc <__aeabi_dcmplt>
 80212f8:	b148      	cbz	r0, 802130e <_dtoa_r+0x186>
 80212fa:	4650      	mov	r0, sl
 80212fc:	f7f8 f912 	bl	8019524 <__aeabi_i2d>
 8021300:	4632      	mov	r2, r6
 8021302:	463b      	mov	r3, r7
 8021304:	f7f8 fbe0 	bl	8019ac8 <__aeabi_dcmpeq>
 8021308:	b908      	cbnz	r0, 802130e <_dtoa_r+0x186>
 802130a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802130e:	f1ba 0f16 	cmp.w	sl, #22
 8021312:	d854      	bhi.n	80213be <_dtoa_r+0x236>
 8021314:	4b61      	ldr	r3, [pc, #388]	; (802149c <_dtoa_r+0x314>)
 8021316:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 802131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802131e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8021322:	f7f8 fbdb 	bl	8019adc <__aeabi_dcmplt>
 8021326:	2800      	cmp	r0, #0
 8021328:	d04b      	beq.n	80213c2 <_dtoa_r+0x23a>
 802132a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802132e:	2300      	movs	r3, #0
 8021330:	930e      	str	r3, [sp, #56]	; 0x38
 8021332:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021334:	1b5d      	subs	r5, r3, r5
 8021336:	1e6b      	subs	r3, r5, #1
 8021338:	9304      	str	r3, [sp, #16]
 802133a:	bf43      	ittte	mi
 802133c:	2300      	movmi	r3, #0
 802133e:	f1c5 0801 	rsbmi	r8, r5, #1
 8021342:	9304      	strmi	r3, [sp, #16]
 8021344:	f04f 0800 	movpl.w	r8, #0
 8021348:	f1ba 0f00 	cmp.w	sl, #0
 802134c:	db3b      	blt.n	80213c6 <_dtoa_r+0x23e>
 802134e:	9b04      	ldr	r3, [sp, #16]
 8021350:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8021354:	4453      	add	r3, sl
 8021356:	9304      	str	r3, [sp, #16]
 8021358:	2300      	movs	r3, #0
 802135a:	9306      	str	r3, [sp, #24]
 802135c:	9b05      	ldr	r3, [sp, #20]
 802135e:	2b09      	cmp	r3, #9
 8021360:	d869      	bhi.n	8021436 <_dtoa_r+0x2ae>
 8021362:	2b05      	cmp	r3, #5
 8021364:	bfc4      	itt	gt
 8021366:	3b04      	subgt	r3, #4
 8021368:	9305      	strgt	r3, [sp, #20]
 802136a:	9b05      	ldr	r3, [sp, #20]
 802136c:	f1a3 0302 	sub.w	r3, r3, #2
 8021370:	bfcc      	ite	gt
 8021372:	2500      	movgt	r5, #0
 8021374:	2501      	movle	r5, #1
 8021376:	2b03      	cmp	r3, #3
 8021378:	d869      	bhi.n	802144e <_dtoa_r+0x2c6>
 802137a:	e8df f003 	tbb	[pc, r3]
 802137e:	4e2c      	.short	0x4e2c
 8021380:	5a4c      	.short	0x5a4c
 8021382:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8021386:	441d      	add	r5, r3
 8021388:	f205 4332 	addw	r3, r5, #1074	; 0x432
 802138c:	2b20      	cmp	r3, #32
 802138e:	bfc1      	itttt	gt
 8021390:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8021394:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8021398:	fa09 f303 	lslgt.w	r3, r9, r3
 802139c:	fa26 f000 	lsrgt.w	r0, r6, r0
 80213a0:	bfda      	itte	le
 80213a2:	f1c3 0320 	rsble	r3, r3, #32
 80213a6:	fa06 f003 	lslle.w	r0, r6, r3
 80213aa:	4318      	orrgt	r0, r3
 80213ac:	f7f8 f8aa 	bl	8019504 <__aeabi_ui2d>
 80213b0:	2301      	movs	r3, #1
 80213b2:	4606      	mov	r6, r0
 80213b4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80213b8:	3d01      	subs	r5, #1
 80213ba:	9310      	str	r3, [sp, #64]	; 0x40
 80213bc:	e771      	b.n	80212a2 <_dtoa_r+0x11a>
 80213be:	2301      	movs	r3, #1
 80213c0:	e7b6      	b.n	8021330 <_dtoa_r+0x1a8>
 80213c2:	900e      	str	r0, [sp, #56]	; 0x38
 80213c4:	e7b5      	b.n	8021332 <_dtoa_r+0x1aa>
 80213c6:	f1ca 0300 	rsb	r3, sl, #0
 80213ca:	9306      	str	r3, [sp, #24]
 80213cc:	2300      	movs	r3, #0
 80213ce:	eba8 080a 	sub.w	r8, r8, sl
 80213d2:	930d      	str	r3, [sp, #52]	; 0x34
 80213d4:	e7c2      	b.n	802135c <_dtoa_r+0x1d4>
 80213d6:	2300      	movs	r3, #0
 80213d8:	9308      	str	r3, [sp, #32]
 80213da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80213dc:	2b00      	cmp	r3, #0
 80213de:	dc39      	bgt.n	8021454 <_dtoa_r+0x2cc>
 80213e0:	f04f 0901 	mov.w	r9, #1
 80213e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80213e8:	464b      	mov	r3, r9
 80213ea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80213ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80213f0:	2200      	movs	r2, #0
 80213f2:	6042      	str	r2, [r0, #4]
 80213f4:	2204      	movs	r2, #4
 80213f6:	f102 0614 	add.w	r6, r2, #20
 80213fa:	429e      	cmp	r6, r3
 80213fc:	6841      	ldr	r1, [r0, #4]
 80213fe:	d92f      	bls.n	8021460 <_dtoa_r+0x2d8>
 8021400:	4620      	mov	r0, r4
 8021402:	f001 f83f 	bl	8022484 <_Balloc>
 8021406:	9000      	str	r0, [sp, #0]
 8021408:	2800      	cmp	r0, #0
 802140a:	d14b      	bne.n	80214a4 <_dtoa_r+0x31c>
 802140c:	4b24      	ldr	r3, [pc, #144]	; (80214a0 <_dtoa_r+0x318>)
 802140e:	4602      	mov	r2, r0
 8021410:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8021414:	e6d1      	b.n	80211ba <_dtoa_r+0x32>
 8021416:	2301      	movs	r3, #1
 8021418:	e7de      	b.n	80213d8 <_dtoa_r+0x250>
 802141a:	2300      	movs	r3, #0
 802141c:	9308      	str	r3, [sp, #32]
 802141e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021420:	eb0a 0903 	add.w	r9, sl, r3
 8021424:	f109 0301 	add.w	r3, r9, #1
 8021428:	2b01      	cmp	r3, #1
 802142a:	9301      	str	r3, [sp, #4]
 802142c:	bfb8      	it	lt
 802142e:	2301      	movlt	r3, #1
 8021430:	e7dd      	b.n	80213ee <_dtoa_r+0x266>
 8021432:	2301      	movs	r3, #1
 8021434:	e7f2      	b.n	802141c <_dtoa_r+0x294>
 8021436:	2501      	movs	r5, #1
 8021438:	2300      	movs	r3, #0
 802143a:	9305      	str	r3, [sp, #20]
 802143c:	9508      	str	r5, [sp, #32]
 802143e:	f04f 39ff 	mov.w	r9, #4294967295
 8021442:	2200      	movs	r2, #0
 8021444:	f8cd 9004 	str.w	r9, [sp, #4]
 8021448:	2312      	movs	r3, #18
 802144a:	9209      	str	r2, [sp, #36]	; 0x24
 802144c:	e7cf      	b.n	80213ee <_dtoa_r+0x266>
 802144e:	2301      	movs	r3, #1
 8021450:	9308      	str	r3, [sp, #32]
 8021452:	e7f4      	b.n	802143e <_dtoa_r+0x2b6>
 8021454:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8021458:	f8cd 9004 	str.w	r9, [sp, #4]
 802145c:	464b      	mov	r3, r9
 802145e:	e7c6      	b.n	80213ee <_dtoa_r+0x266>
 8021460:	3101      	adds	r1, #1
 8021462:	6041      	str	r1, [r0, #4]
 8021464:	0052      	lsls	r2, r2, #1
 8021466:	e7c6      	b.n	80213f6 <_dtoa_r+0x26e>
 8021468:	636f4361 	.word	0x636f4361
 802146c:	3fd287a7 	.word	0x3fd287a7
 8021470:	8b60c8b3 	.word	0x8b60c8b3
 8021474:	3fc68a28 	.word	0x3fc68a28
 8021478:	509f79fb 	.word	0x509f79fb
 802147c:	3fd34413 	.word	0x3fd34413
 8021480:	080240b6 	.word	0x080240b6
 8021484:	080240cd 	.word	0x080240cd
 8021488:	7ff00000 	.word	0x7ff00000
 802148c:	080240b2 	.word	0x080240b2
 8021490:	080240a9 	.word	0x080240a9
 8021494:	08023f29 	.word	0x08023f29
 8021498:	3ff80000 	.word	0x3ff80000
 802149c:	08024248 	.word	0x08024248
 80214a0:	0802412c 	.word	0x0802412c
 80214a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80214a6:	9a00      	ldr	r2, [sp, #0]
 80214a8:	601a      	str	r2, [r3, #0]
 80214aa:	9b01      	ldr	r3, [sp, #4]
 80214ac:	2b0e      	cmp	r3, #14
 80214ae:	f200 80ad 	bhi.w	802160c <_dtoa_r+0x484>
 80214b2:	2d00      	cmp	r5, #0
 80214b4:	f000 80aa 	beq.w	802160c <_dtoa_r+0x484>
 80214b8:	f1ba 0f00 	cmp.w	sl, #0
 80214bc:	dd36      	ble.n	802152c <_dtoa_r+0x3a4>
 80214be:	4ac3      	ldr	r2, [pc, #780]	; (80217cc <_dtoa_r+0x644>)
 80214c0:	f00a 030f 	and.w	r3, sl, #15
 80214c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80214c8:	ed93 7b00 	vldr	d7, [r3]
 80214cc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80214d0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80214d4:	eeb0 8a47 	vmov.f32	s16, s14
 80214d8:	eef0 8a67 	vmov.f32	s17, s15
 80214dc:	d016      	beq.n	802150c <_dtoa_r+0x384>
 80214de:	4bbc      	ldr	r3, [pc, #752]	; (80217d0 <_dtoa_r+0x648>)
 80214e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80214e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80214e8:	f7f8 f9b0 	bl	801984c <__aeabi_ddiv>
 80214ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80214f0:	f007 070f 	and.w	r7, r7, #15
 80214f4:	2503      	movs	r5, #3
 80214f6:	4eb6      	ldr	r6, [pc, #728]	; (80217d0 <_dtoa_r+0x648>)
 80214f8:	b957      	cbnz	r7, 8021510 <_dtoa_r+0x388>
 80214fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80214fe:	ec53 2b18 	vmov	r2, r3, d8
 8021502:	f7f8 f9a3 	bl	801984c <__aeabi_ddiv>
 8021506:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802150a:	e029      	b.n	8021560 <_dtoa_r+0x3d8>
 802150c:	2502      	movs	r5, #2
 802150e:	e7f2      	b.n	80214f6 <_dtoa_r+0x36e>
 8021510:	07f9      	lsls	r1, r7, #31
 8021512:	d508      	bpl.n	8021526 <_dtoa_r+0x39e>
 8021514:	ec51 0b18 	vmov	r0, r1, d8
 8021518:	e9d6 2300 	ldrd	r2, r3, [r6]
 802151c:	f7f8 f86c 	bl	80195f8 <__aeabi_dmul>
 8021520:	ec41 0b18 	vmov	d8, r0, r1
 8021524:	3501      	adds	r5, #1
 8021526:	107f      	asrs	r7, r7, #1
 8021528:	3608      	adds	r6, #8
 802152a:	e7e5      	b.n	80214f8 <_dtoa_r+0x370>
 802152c:	f000 80a6 	beq.w	802167c <_dtoa_r+0x4f4>
 8021530:	f1ca 0600 	rsb	r6, sl, #0
 8021534:	4ba5      	ldr	r3, [pc, #660]	; (80217cc <_dtoa_r+0x644>)
 8021536:	4fa6      	ldr	r7, [pc, #664]	; (80217d0 <_dtoa_r+0x648>)
 8021538:	f006 020f 	and.w	r2, r6, #15
 802153c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8021540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021544:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8021548:	f7f8 f856 	bl	80195f8 <__aeabi_dmul>
 802154c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021550:	1136      	asrs	r6, r6, #4
 8021552:	2300      	movs	r3, #0
 8021554:	2502      	movs	r5, #2
 8021556:	2e00      	cmp	r6, #0
 8021558:	f040 8085 	bne.w	8021666 <_dtoa_r+0x4de>
 802155c:	2b00      	cmp	r3, #0
 802155e:	d1d2      	bne.n	8021506 <_dtoa_r+0x37e>
 8021560:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021562:	2b00      	cmp	r3, #0
 8021564:	f000 808c 	beq.w	8021680 <_dtoa_r+0x4f8>
 8021568:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802156c:	4b99      	ldr	r3, [pc, #612]	; (80217d4 <_dtoa_r+0x64c>)
 802156e:	2200      	movs	r2, #0
 8021570:	4630      	mov	r0, r6
 8021572:	4639      	mov	r1, r7
 8021574:	f7f8 fab2 	bl	8019adc <__aeabi_dcmplt>
 8021578:	2800      	cmp	r0, #0
 802157a:	f000 8081 	beq.w	8021680 <_dtoa_r+0x4f8>
 802157e:	9b01      	ldr	r3, [sp, #4]
 8021580:	2b00      	cmp	r3, #0
 8021582:	d07d      	beq.n	8021680 <_dtoa_r+0x4f8>
 8021584:	f1b9 0f00 	cmp.w	r9, #0
 8021588:	dd3c      	ble.n	8021604 <_dtoa_r+0x47c>
 802158a:	f10a 33ff 	add.w	r3, sl, #4294967295
 802158e:	9307      	str	r3, [sp, #28]
 8021590:	2200      	movs	r2, #0
 8021592:	4b91      	ldr	r3, [pc, #580]	; (80217d8 <_dtoa_r+0x650>)
 8021594:	4630      	mov	r0, r6
 8021596:	4639      	mov	r1, r7
 8021598:	f7f8 f82e 	bl	80195f8 <__aeabi_dmul>
 802159c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80215a0:	3501      	adds	r5, #1
 80215a2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80215a6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80215aa:	4628      	mov	r0, r5
 80215ac:	f7f7 ffba 	bl	8019524 <__aeabi_i2d>
 80215b0:	4632      	mov	r2, r6
 80215b2:	463b      	mov	r3, r7
 80215b4:	f7f8 f820 	bl	80195f8 <__aeabi_dmul>
 80215b8:	4b88      	ldr	r3, [pc, #544]	; (80217dc <_dtoa_r+0x654>)
 80215ba:	2200      	movs	r2, #0
 80215bc:	f7f7 fe66 	bl	801928c <__adddf3>
 80215c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80215c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80215c8:	9303      	str	r3, [sp, #12]
 80215ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80215cc:	2b00      	cmp	r3, #0
 80215ce:	d15c      	bne.n	802168a <_dtoa_r+0x502>
 80215d0:	4b83      	ldr	r3, [pc, #524]	; (80217e0 <_dtoa_r+0x658>)
 80215d2:	2200      	movs	r2, #0
 80215d4:	4630      	mov	r0, r6
 80215d6:	4639      	mov	r1, r7
 80215d8:	f7f7 fe56 	bl	8019288 <__aeabi_dsub>
 80215dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80215e0:	4606      	mov	r6, r0
 80215e2:	460f      	mov	r7, r1
 80215e4:	f7f8 fa98 	bl	8019b18 <__aeabi_dcmpgt>
 80215e8:	2800      	cmp	r0, #0
 80215ea:	f040 8296 	bne.w	8021b1a <_dtoa_r+0x992>
 80215ee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80215f2:	4630      	mov	r0, r6
 80215f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80215f8:	4639      	mov	r1, r7
 80215fa:	f7f8 fa6f 	bl	8019adc <__aeabi_dcmplt>
 80215fe:	2800      	cmp	r0, #0
 8021600:	f040 8288 	bne.w	8021b14 <_dtoa_r+0x98c>
 8021604:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8021608:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802160c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802160e:	2b00      	cmp	r3, #0
 8021610:	f2c0 8158 	blt.w	80218c4 <_dtoa_r+0x73c>
 8021614:	f1ba 0f0e 	cmp.w	sl, #14
 8021618:	f300 8154 	bgt.w	80218c4 <_dtoa_r+0x73c>
 802161c:	4b6b      	ldr	r3, [pc, #428]	; (80217cc <_dtoa_r+0x644>)
 802161e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8021622:	e9d3 8900 	ldrd	r8, r9, [r3]
 8021626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021628:	2b00      	cmp	r3, #0
 802162a:	f280 80e3 	bge.w	80217f4 <_dtoa_r+0x66c>
 802162e:	9b01      	ldr	r3, [sp, #4]
 8021630:	2b00      	cmp	r3, #0
 8021632:	f300 80df 	bgt.w	80217f4 <_dtoa_r+0x66c>
 8021636:	f040 826d 	bne.w	8021b14 <_dtoa_r+0x98c>
 802163a:	4b69      	ldr	r3, [pc, #420]	; (80217e0 <_dtoa_r+0x658>)
 802163c:	2200      	movs	r2, #0
 802163e:	4640      	mov	r0, r8
 8021640:	4649      	mov	r1, r9
 8021642:	f7f7 ffd9 	bl	80195f8 <__aeabi_dmul>
 8021646:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802164a:	f7f8 fa5b 	bl	8019b04 <__aeabi_dcmpge>
 802164e:	9e01      	ldr	r6, [sp, #4]
 8021650:	4637      	mov	r7, r6
 8021652:	2800      	cmp	r0, #0
 8021654:	f040 8243 	bne.w	8021ade <_dtoa_r+0x956>
 8021658:	9d00      	ldr	r5, [sp, #0]
 802165a:	2331      	movs	r3, #49	; 0x31
 802165c:	f805 3b01 	strb.w	r3, [r5], #1
 8021660:	f10a 0a01 	add.w	sl, sl, #1
 8021664:	e23f      	b.n	8021ae6 <_dtoa_r+0x95e>
 8021666:	07f2      	lsls	r2, r6, #31
 8021668:	d505      	bpl.n	8021676 <_dtoa_r+0x4ee>
 802166a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802166e:	f7f7 ffc3 	bl	80195f8 <__aeabi_dmul>
 8021672:	3501      	adds	r5, #1
 8021674:	2301      	movs	r3, #1
 8021676:	1076      	asrs	r6, r6, #1
 8021678:	3708      	adds	r7, #8
 802167a:	e76c      	b.n	8021556 <_dtoa_r+0x3ce>
 802167c:	2502      	movs	r5, #2
 802167e:	e76f      	b.n	8021560 <_dtoa_r+0x3d8>
 8021680:	9b01      	ldr	r3, [sp, #4]
 8021682:	f8cd a01c 	str.w	sl, [sp, #28]
 8021686:	930c      	str	r3, [sp, #48]	; 0x30
 8021688:	e78d      	b.n	80215a6 <_dtoa_r+0x41e>
 802168a:	9900      	ldr	r1, [sp, #0]
 802168c:	980c      	ldr	r0, [sp, #48]	; 0x30
 802168e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021690:	4b4e      	ldr	r3, [pc, #312]	; (80217cc <_dtoa_r+0x644>)
 8021692:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021696:	4401      	add	r1, r0
 8021698:	9102      	str	r1, [sp, #8]
 802169a:	9908      	ldr	r1, [sp, #32]
 802169c:	eeb0 8a47 	vmov.f32	s16, s14
 80216a0:	eef0 8a67 	vmov.f32	s17, s15
 80216a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80216a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80216ac:	2900      	cmp	r1, #0
 80216ae:	d045      	beq.n	802173c <_dtoa_r+0x5b4>
 80216b0:	494c      	ldr	r1, [pc, #304]	; (80217e4 <_dtoa_r+0x65c>)
 80216b2:	2000      	movs	r0, #0
 80216b4:	f7f8 f8ca 	bl	801984c <__aeabi_ddiv>
 80216b8:	ec53 2b18 	vmov	r2, r3, d8
 80216bc:	f7f7 fde4 	bl	8019288 <__aeabi_dsub>
 80216c0:	9d00      	ldr	r5, [sp, #0]
 80216c2:	ec41 0b18 	vmov	d8, r0, r1
 80216c6:	4639      	mov	r1, r7
 80216c8:	4630      	mov	r0, r6
 80216ca:	f7f8 fa45 	bl	8019b58 <__aeabi_d2iz>
 80216ce:	900c      	str	r0, [sp, #48]	; 0x30
 80216d0:	f7f7 ff28 	bl	8019524 <__aeabi_i2d>
 80216d4:	4602      	mov	r2, r0
 80216d6:	460b      	mov	r3, r1
 80216d8:	4630      	mov	r0, r6
 80216da:	4639      	mov	r1, r7
 80216dc:	f7f7 fdd4 	bl	8019288 <__aeabi_dsub>
 80216e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80216e2:	3330      	adds	r3, #48	; 0x30
 80216e4:	f805 3b01 	strb.w	r3, [r5], #1
 80216e8:	ec53 2b18 	vmov	r2, r3, d8
 80216ec:	4606      	mov	r6, r0
 80216ee:	460f      	mov	r7, r1
 80216f0:	f7f8 f9f4 	bl	8019adc <__aeabi_dcmplt>
 80216f4:	2800      	cmp	r0, #0
 80216f6:	d165      	bne.n	80217c4 <_dtoa_r+0x63c>
 80216f8:	4632      	mov	r2, r6
 80216fa:	463b      	mov	r3, r7
 80216fc:	4935      	ldr	r1, [pc, #212]	; (80217d4 <_dtoa_r+0x64c>)
 80216fe:	2000      	movs	r0, #0
 8021700:	f7f7 fdc2 	bl	8019288 <__aeabi_dsub>
 8021704:	ec53 2b18 	vmov	r2, r3, d8
 8021708:	f7f8 f9e8 	bl	8019adc <__aeabi_dcmplt>
 802170c:	2800      	cmp	r0, #0
 802170e:	f040 80b9 	bne.w	8021884 <_dtoa_r+0x6fc>
 8021712:	9b02      	ldr	r3, [sp, #8]
 8021714:	429d      	cmp	r5, r3
 8021716:	f43f af75 	beq.w	8021604 <_dtoa_r+0x47c>
 802171a:	4b2f      	ldr	r3, [pc, #188]	; (80217d8 <_dtoa_r+0x650>)
 802171c:	ec51 0b18 	vmov	r0, r1, d8
 8021720:	2200      	movs	r2, #0
 8021722:	f7f7 ff69 	bl	80195f8 <__aeabi_dmul>
 8021726:	4b2c      	ldr	r3, [pc, #176]	; (80217d8 <_dtoa_r+0x650>)
 8021728:	ec41 0b18 	vmov	d8, r0, r1
 802172c:	2200      	movs	r2, #0
 802172e:	4630      	mov	r0, r6
 8021730:	4639      	mov	r1, r7
 8021732:	f7f7 ff61 	bl	80195f8 <__aeabi_dmul>
 8021736:	4606      	mov	r6, r0
 8021738:	460f      	mov	r7, r1
 802173a:	e7c4      	b.n	80216c6 <_dtoa_r+0x53e>
 802173c:	ec51 0b17 	vmov	r0, r1, d7
 8021740:	f7f7 ff5a 	bl	80195f8 <__aeabi_dmul>
 8021744:	9b02      	ldr	r3, [sp, #8]
 8021746:	9d00      	ldr	r5, [sp, #0]
 8021748:	930c      	str	r3, [sp, #48]	; 0x30
 802174a:	ec41 0b18 	vmov	d8, r0, r1
 802174e:	4639      	mov	r1, r7
 8021750:	4630      	mov	r0, r6
 8021752:	f7f8 fa01 	bl	8019b58 <__aeabi_d2iz>
 8021756:	9011      	str	r0, [sp, #68]	; 0x44
 8021758:	f7f7 fee4 	bl	8019524 <__aeabi_i2d>
 802175c:	4602      	mov	r2, r0
 802175e:	460b      	mov	r3, r1
 8021760:	4630      	mov	r0, r6
 8021762:	4639      	mov	r1, r7
 8021764:	f7f7 fd90 	bl	8019288 <__aeabi_dsub>
 8021768:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802176a:	3330      	adds	r3, #48	; 0x30
 802176c:	f805 3b01 	strb.w	r3, [r5], #1
 8021770:	9b02      	ldr	r3, [sp, #8]
 8021772:	429d      	cmp	r5, r3
 8021774:	4606      	mov	r6, r0
 8021776:	460f      	mov	r7, r1
 8021778:	f04f 0200 	mov.w	r2, #0
 802177c:	d134      	bne.n	80217e8 <_dtoa_r+0x660>
 802177e:	4b19      	ldr	r3, [pc, #100]	; (80217e4 <_dtoa_r+0x65c>)
 8021780:	ec51 0b18 	vmov	r0, r1, d8
 8021784:	f7f7 fd82 	bl	801928c <__adddf3>
 8021788:	4602      	mov	r2, r0
 802178a:	460b      	mov	r3, r1
 802178c:	4630      	mov	r0, r6
 802178e:	4639      	mov	r1, r7
 8021790:	f7f8 f9c2 	bl	8019b18 <__aeabi_dcmpgt>
 8021794:	2800      	cmp	r0, #0
 8021796:	d175      	bne.n	8021884 <_dtoa_r+0x6fc>
 8021798:	ec53 2b18 	vmov	r2, r3, d8
 802179c:	4911      	ldr	r1, [pc, #68]	; (80217e4 <_dtoa_r+0x65c>)
 802179e:	2000      	movs	r0, #0
 80217a0:	f7f7 fd72 	bl	8019288 <__aeabi_dsub>
 80217a4:	4602      	mov	r2, r0
 80217a6:	460b      	mov	r3, r1
 80217a8:	4630      	mov	r0, r6
 80217aa:	4639      	mov	r1, r7
 80217ac:	f7f8 f996 	bl	8019adc <__aeabi_dcmplt>
 80217b0:	2800      	cmp	r0, #0
 80217b2:	f43f af27 	beq.w	8021604 <_dtoa_r+0x47c>
 80217b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80217b8:	1e6b      	subs	r3, r5, #1
 80217ba:	930c      	str	r3, [sp, #48]	; 0x30
 80217bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80217c0:	2b30      	cmp	r3, #48	; 0x30
 80217c2:	d0f8      	beq.n	80217b6 <_dtoa_r+0x62e>
 80217c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80217c8:	e04a      	b.n	8021860 <_dtoa_r+0x6d8>
 80217ca:	bf00      	nop
 80217cc:	08024248 	.word	0x08024248
 80217d0:	08024220 	.word	0x08024220
 80217d4:	3ff00000 	.word	0x3ff00000
 80217d8:	40240000 	.word	0x40240000
 80217dc:	401c0000 	.word	0x401c0000
 80217e0:	40140000 	.word	0x40140000
 80217e4:	3fe00000 	.word	0x3fe00000
 80217e8:	4baf      	ldr	r3, [pc, #700]	; (8021aa8 <_dtoa_r+0x920>)
 80217ea:	f7f7 ff05 	bl	80195f8 <__aeabi_dmul>
 80217ee:	4606      	mov	r6, r0
 80217f0:	460f      	mov	r7, r1
 80217f2:	e7ac      	b.n	802174e <_dtoa_r+0x5c6>
 80217f4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80217f8:	9d00      	ldr	r5, [sp, #0]
 80217fa:	4642      	mov	r2, r8
 80217fc:	464b      	mov	r3, r9
 80217fe:	4630      	mov	r0, r6
 8021800:	4639      	mov	r1, r7
 8021802:	f7f8 f823 	bl	801984c <__aeabi_ddiv>
 8021806:	f7f8 f9a7 	bl	8019b58 <__aeabi_d2iz>
 802180a:	9002      	str	r0, [sp, #8]
 802180c:	f7f7 fe8a 	bl	8019524 <__aeabi_i2d>
 8021810:	4642      	mov	r2, r8
 8021812:	464b      	mov	r3, r9
 8021814:	f7f7 fef0 	bl	80195f8 <__aeabi_dmul>
 8021818:	4602      	mov	r2, r0
 802181a:	460b      	mov	r3, r1
 802181c:	4630      	mov	r0, r6
 802181e:	4639      	mov	r1, r7
 8021820:	f7f7 fd32 	bl	8019288 <__aeabi_dsub>
 8021824:	9e02      	ldr	r6, [sp, #8]
 8021826:	9f01      	ldr	r7, [sp, #4]
 8021828:	3630      	adds	r6, #48	; 0x30
 802182a:	f805 6b01 	strb.w	r6, [r5], #1
 802182e:	9e00      	ldr	r6, [sp, #0]
 8021830:	1bae      	subs	r6, r5, r6
 8021832:	42b7      	cmp	r7, r6
 8021834:	4602      	mov	r2, r0
 8021836:	460b      	mov	r3, r1
 8021838:	d137      	bne.n	80218aa <_dtoa_r+0x722>
 802183a:	f7f7 fd27 	bl	801928c <__adddf3>
 802183e:	4642      	mov	r2, r8
 8021840:	464b      	mov	r3, r9
 8021842:	4606      	mov	r6, r0
 8021844:	460f      	mov	r7, r1
 8021846:	f7f8 f967 	bl	8019b18 <__aeabi_dcmpgt>
 802184a:	b9c8      	cbnz	r0, 8021880 <_dtoa_r+0x6f8>
 802184c:	4642      	mov	r2, r8
 802184e:	464b      	mov	r3, r9
 8021850:	4630      	mov	r0, r6
 8021852:	4639      	mov	r1, r7
 8021854:	f7f8 f938 	bl	8019ac8 <__aeabi_dcmpeq>
 8021858:	b110      	cbz	r0, 8021860 <_dtoa_r+0x6d8>
 802185a:	9b02      	ldr	r3, [sp, #8]
 802185c:	07d9      	lsls	r1, r3, #31
 802185e:	d40f      	bmi.n	8021880 <_dtoa_r+0x6f8>
 8021860:	4620      	mov	r0, r4
 8021862:	4659      	mov	r1, fp
 8021864:	f000 fe4e 	bl	8022504 <_Bfree>
 8021868:	2300      	movs	r3, #0
 802186a:	702b      	strb	r3, [r5, #0]
 802186c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802186e:	f10a 0001 	add.w	r0, sl, #1
 8021872:	6018      	str	r0, [r3, #0]
 8021874:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021876:	2b00      	cmp	r3, #0
 8021878:	f43f acd8 	beq.w	802122c <_dtoa_r+0xa4>
 802187c:	601d      	str	r5, [r3, #0]
 802187e:	e4d5      	b.n	802122c <_dtoa_r+0xa4>
 8021880:	f8cd a01c 	str.w	sl, [sp, #28]
 8021884:	462b      	mov	r3, r5
 8021886:	461d      	mov	r5, r3
 8021888:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802188c:	2a39      	cmp	r2, #57	; 0x39
 802188e:	d108      	bne.n	80218a2 <_dtoa_r+0x71a>
 8021890:	9a00      	ldr	r2, [sp, #0]
 8021892:	429a      	cmp	r2, r3
 8021894:	d1f7      	bne.n	8021886 <_dtoa_r+0x6fe>
 8021896:	9a07      	ldr	r2, [sp, #28]
 8021898:	9900      	ldr	r1, [sp, #0]
 802189a:	3201      	adds	r2, #1
 802189c:	9207      	str	r2, [sp, #28]
 802189e:	2230      	movs	r2, #48	; 0x30
 80218a0:	700a      	strb	r2, [r1, #0]
 80218a2:	781a      	ldrb	r2, [r3, #0]
 80218a4:	3201      	adds	r2, #1
 80218a6:	701a      	strb	r2, [r3, #0]
 80218a8:	e78c      	b.n	80217c4 <_dtoa_r+0x63c>
 80218aa:	4b7f      	ldr	r3, [pc, #508]	; (8021aa8 <_dtoa_r+0x920>)
 80218ac:	2200      	movs	r2, #0
 80218ae:	f7f7 fea3 	bl	80195f8 <__aeabi_dmul>
 80218b2:	2200      	movs	r2, #0
 80218b4:	2300      	movs	r3, #0
 80218b6:	4606      	mov	r6, r0
 80218b8:	460f      	mov	r7, r1
 80218ba:	f7f8 f905 	bl	8019ac8 <__aeabi_dcmpeq>
 80218be:	2800      	cmp	r0, #0
 80218c0:	d09b      	beq.n	80217fa <_dtoa_r+0x672>
 80218c2:	e7cd      	b.n	8021860 <_dtoa_r+0x6d8>
 80218c4:	9a08      	ldr	r2, [sp, #32]
 80218c6:	2a00      	cmp	r2, #0
 80218c8:	f000 80c4 	beq.w	8021a54 <_dtoa_r+0x8cc>
 80218cc:	9a05      	ldr	r2, [sp, #20]
 80218ce:	2a01      	cmp	r2, #1
 80218d0:	f300 80a8 	bgt.w	8021a24 <_dtoa_r+0x89c>
 80218d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80218d6:	2a00      	cmp	r2, #0
 80218d8:	f000 80a0 	beq.w	8021a1c <_dtoa_r+0x894>
 80218dc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80218e0:	9e06      	ldr	r6, [sp, #24]
 80218e2:	4645      	mov	r5, r8
 80218e4:	9a04      	ldr	r2, [sp, #16]
 80218e6:	2101      	movs	r1, #1
 80218e8:	441a      	add	r2, r3
 80218ea:	4620      	mov	r0, r4
 80218ec:	4498      	add	r8, r3
 80218ee:	9204      	str	r2, [sp, #16]
 80218f0:	f000 ff0e 	bl	8022710 <__i2b>
 80218f4:	4607      	mov	r7, r0
 80218f6:	2d00      	cmp	r5, #0
 80218f8:	dd0b      	ble.n	8021912 <_dtoa_r+0x78a>
 80218fa:	9b04      	ldr	r3, [sp, #16]
 80218fc:	2b00      	cmp	r3, #0
 80218fe:	dd08      	ble.n	8021912 <_dtoa_r+0x78a>
 8021900:	42ab      	cmp	r3, r5
 8021902:	9a04      	ldr	r2, [sp, #16]
 8021904:	bfa8      	it	ge
 8021906:	462b      	movge	r3, r5
 8021908:	eba8 0803 	sub.w	r8, r8, r3
 802190c:	1aed      	subs	r5, r5, r3
 802190e:	1ad3      	subs	r3, r2, r3
 8021910:	9304      	str	r3, [sp, #16]
 8021912:	9b06      	ldr	r3, [sp, #24]
 8021914:	b1fb      	cbz	r3, 8021956 <_dtoa_r+0x7ce>
 8021916:	9b08      	ldr	r3, [sp, #32]
 8021918:	2b00      	cmp	r3, #0
 802191a:	f000 809f 	beq.w	8021a5c <_dtoa_r+0x8d4>
 802191e:	2e00      	cmp	r6, #0
 8021920:	dd11      	ble.n	8021946 <_dtoa_r+0x7be>
 8021922:	4639      	mov	r1, r7
 8021924:	4632      	mov	r2, r6
 8021926:	4620      	mov	r0, r4
 8021928:	f000 ffae 	bl	8022888 <__pow5mult>
 802192c:	465a      	mov	r2, fp
 802192e:	4601      	mov	r1, r0
 8021930:	4607      	mov	r7, r0
 8021932:	4620      	mov	r0, r4
 8021934:	f000 ff02 	bl	802273c <__multiply>
 8021938:	4659      	mov	r1, fp
 802193a:	9007      	str	r0, [sp, #28]
 802193c:	4620      	mov	r0, r4
 802193e:	f000 fde1 	bl	8022504 <_Bfree>
 8021942:	9b07      	ldr	r3, [sp, #28]
 8021944:	469b      	mov	fp, r3
 8021946:	9b06      	ldr	r3, [sp, #24]
 8021948:	1b9a      	subs	r2, r3, r6
 802194a:	d004      	beq.n	8021956 <_dtoa_r+0x7ce>
 802194c:	4659      	mov	r1, fp
 802194e:	4620      	mov	r0, r4
 8021950:	f000 ff9a 	bl	8022888 <__pow5mult>
 8021954:	4683      	mov	fp, r0
 8021956:	2101      	movs	r1, #1
 8021958:	4620      	mov	r0, r4
 802195a:	f000 fed9 	bl	8022710 <__i2b>
 802195e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021960:	2b00      	cmp	r3, #0
 8021962:	4606      	mov	r6, r0
 8021964:	dd7c      	ble.n	8021a60 <_dtoa_r+0x8d8>
 8021966:	461a      	mov	r2, r3
 8021968:	4601      	mov	r1, r0
 802196a:	4620      	mov	r0, r4
 802196c:	f000 ff8c 	bl	8022888 <__pow5mult>
 8021970:	9b05      	ldr	r3, [sp, #20]
 8021972:	2b01      	cmp	r3, #1
 8021974:	4606      	mov	r6, r0
 8021976:	dd76      	ble.n	8021a66 <_dtoa_r+0x8de>
 8021978:	2300      	movs	r3, #0
 802197a:	9306      	str	r3, [sp, #24]
 802197c:	6933      	ldr	r3, [r6, #16]
 802197e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8021982:	6918      	ldr	r0, [r3, #16]
 8021984:	f000 fe74 	bl	8022670 <__hi0bits>
 8021988:	f1c0 0020 	rsb	r0, r0, #32
 802198c:	9b04      	ldr	r3, [sp, #16]
 802198e:	4418      	add	r0, r3
 8021990:	f010 001f 	ands.w	r0, r0, #31
 8021994:	f000 8086 	beq.w	8021aa4 <_dtoa_r+0x91c>
 8021998:	f1c0 0320 	rsb	r3, r0, #32
 802199c:	2b04      	cmp	r3, #4
 802199e:	dd7f      	ble.n	8021aa0 <_dtoa_r+0x918>
 80219a0:	f1c0 001c 	rsb	r0, r0, #28
 80219a4:	9b04      	ldr	r3, [sp, #16]
 80219a6:	4403      	add	r3, r0
 80219a8:	4480      	add	r8, r0
 80219aa:	4405      	add	r5, r0
 80219ac:	9304      	str	r3, [sp, #16]
 80219ae:	f1b8 0f00 	cmp.w	r8, #0
 80219b2:	dd05      	ble.n	80219c0 <_dtoa_r+0x838>
 80219b4:	4659      	mov	r1, fp
 80219b6:	4642      	mov	r2, r8
 80219b8:	4620      	mov	r0, r4
 80219ba:	f000 ffbf 	bl	802293c <__lshift>
 80219be:	4683      	mov	fp, r0
 80219c0:	9b04      	ldr	r3, [sp, #16]
 80219c2:	2b00      	cmp	r3, #0
 80219c4:	dd05      	ble.n	80219d2 <_dtoa_r+0x84a>
 80219c6:	4631      	mov	r1, r6
 80219c8:	461a      	mov	r2, r3
 80219ca:	4620      	mov	r0, r4
 80219cc:	f000 ffb6 	bl	802293c <__lshift>
 80219d0:	4606      	mov	r6, r0
 80219d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80219d4:	2b00      	cmp	r3, #0
 80219d6:	d069      	beq.n	8021aac <_dtoa_r+0x924>
 80219d8:	4631      	mov	r1, r6
 80219da:	4658      	mov	r0, fp
 80219dc:	f001 f81a 	bl	8022a14 <__mcmp>
 80219e0:	2800      	cmp	r0, #0
 80219e2:	da63      	bge.n	8021aac <_dtoa_r+0x924>
 80219e4:	2300      	movs	r3, #0
 80219e6:	4659      	mov	r1, fp
 80219e8:	220a      	movs	r2, #10
 80219ea:	4620      	mov	r0, r4
 80219ec:	f000 fdac 	bl	8022548 <__multadd>
 80219f0:	9b08      	ldr	r3, [sp, #32]
 80219f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80219f6:	4683      	mov	fp, r0
 80219f8:	2b00      	cmp	r3, #0
 80219fa:	f000 818f 	beq.w	8021d1c <_dtoa_r+0xb94>
 80219fe:	4639      	mov	r1, r7
 8021a00:	2300      	movs	r3, #0
 8021a02:	220a      	movs	r2, #10
 8021a04:	4620      	mov	r0, r4
 8021a06:	f000 fd9f 	bl	8022548 <__multadd>
 8021a0a:	f1b9 0f00 	cmp.w	r9, #0
 8021a0e:	4607      	mov	r7, r0
 8021a10:	f300 808e 	bgt.w	8021b30 <_dtoa_r+0x9a8>
 8021a14:	9b05      	ldr	r3, [sp, #20]
 8021a16:	2b02      	cmp	r3, #2
 8021a18:	dc50      	bgt.n	8021abc <_dtoa_r+0x934>
 8021a1a:	e089      	b.n	8021b30 <_dtoa_r+0x9a8>
 8021a1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021a1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8021a22:	e75d      	b.n	80218e0 <_dtoa_r+0x758>
 8021a24:	9b01      	ldr	r3, [sp, #4]
 8021a26:	1e5e      	subs	r6, r3, #1
 8021a28:	9b06      	ldr	r3, [sp, #24]
 8021a2a:	42b3      	cmp	r3, r6
 8021a2c:	bfbf      	itttt	lt
 8021a2e:	9b06      	ldrlt	r3, [sp, #24]
 8021a30:	9606      	strlt	r6, [sp, #24]
 8021a32:	1af2      	sublt	r2, r6, r3
 8021a34:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8021a36:	bfb6      	itet	lt
 8021a38:	189b      	addlt	r3, r3, r2
 8021a3a:	1b9e      	subge	r6, r3, r6
 8021a3c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8021a3e:	9b01      	ldr	r3, [sp, #4]
 8021a40:	bfb8      	it	lt
 8021a42:	2600      	movlt	r6, #0
 8021a44:	2b00      	cmp	r3, #0
 8021a46:	bfb5      	itete	lt
 8021a48:	eba8 0503 	sublt.w	r5, r8, r3
 8021a4c:	9b01      	ldrge	r3, [sp, #4]
 8021a4e:	2300      	movlt	r3, #0
 8021a50:	4645      	movge	r5, r8
 8021a52:	e747      	b.n	80218e4 <_dtoa_r+0x75c>
 8021a54:	9e06      	ldr	r6, [sp, #24]
 8021a56:	9f08      	ldr	r7, [sp, #32]
 8021a58:	4645      	mov	r5, r8
 8021a5a:	e74c      	b.n	80218f6 <_dtoa_r+0x76e>
 8021a5c:	9a06      	ldr	r2, [sp, #24]
 8021a5e:	e775      	b.n	802194c <_dtoa_r+0x7c4>
 8021a60:	9b05      	ldr	r3, [sp, #20]
 8021a62:	2b01      	cmp	r3, #1
 8021a64:	dc18      	bgt.n	8021a98 <_dtoa_r+0x910>
 8021a66:	9b02      	ldr	r3, [sp, #8]
 8021a68:	b9b3      	cbnz	r3, 8021a98 <_dtoa_r+0x910>
 8021a6a:	9b03      	ldr	r3, [sp, #12]
 8021a6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8021a70:	b9a3      	cbnz	r3, 8021a9c <_dtoa_r+0x914>
 8021a72:	9b03      	ldr	r3, [sp, #12]
 8021a74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8021a78:	0d1b      	lsrs	r3, r3, #20
 8021a7a:	051b      	lsls	r3, r3, #20
 8021a7c:	b12b      	cbz	r3, 8021a8a <_dtoa_r+0x902>
 8021a7e:	9b04      	ldr	r3, [sp, #16]
 8021a80:	3301      	adds	r3, #1
 8021a82:	9304      	str	r3, [sp, #16]
 8021a84:	f108 0801 	add.w	r8, r8, #1
 8021a88:	2301      	movs	r3, #1
 8021a8a:	9306      	str	r3, [sp, #24]
 8021a8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021a8e:	2b00      	cmp	r3, #0
 8021a90:	f47f af74 	bne.w	802197c <_dtoa_r+0x7f4>
 8021a94:	2001      	movs	r0, #1
 8021a96:	e779      	b.n	802198c <_dtoa_r+0x804>
 8021a98:	2300      	movs	r3, #0
 8021a9a:	e7f6      	b.n	8021a8a <_dtoa_r+0x902>
 8021a9c:	9b02      	ldr	r3, [sp, #8]
 8021a9e:	e7f4      	b.n	8021a8a <_dtoa_r+0x902>
 8021aa0:	d085      	beq.n	80219ae <_dtoa_r+0x826>
 8021aa2:	4618      	mov	r0, r3
 8021aa4:	301c      	adds	r0, #28
 8021aa6:	e77d      	b.n	80219a4 <_dtoa_r+0x81c>
 8021aa8:	40240000 	.word	0x40240000
 8021aac:	9b01      	ldr	r3, [sp, #4]
 8021aae:	2b00      	cmp	r3, #0
 8021ab0:	dc38      	bgt.n	8021b24 <_dtoa_r+0x99c>
 8021ab2:	9b05      	ldr	r3, [sp, #20]
 8021ab4:	2b02      	cmp	r3, #2
 8021ab6:	dd35      	ble.n	8021b24 <_dtoa_r+0x99c>
 8021ab8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8021abc:	f1b9 0f00 	cmp.w	r9, #0
 8021ac0:	d10d      	bne.n	8021ade <_dtoa_r+0x956>
 8021ac2:	4631      	mov	r1, r6
 8021ac4:	464b      	mov	r3, r9
 8021ac6:	2205      	movs	r2, #5
 8021ac8:	4620      	mov	r0, r4
 8021aca:	f000 fd3d 	bl	8022548 <__multadd>
 8021ace:	4601      	mov	r1, r0
 8021ad0:	4606      	mov	r6, r0
 8021ad2:	4658      	mov	r0, fp
 8021ad4:	f000 ff9e 	bl	8022a14 <__mcmp>
 8021ad8:	2800      	cmp	r0, #0
 8021ada:	f73f adbd 	bgt.w	8021658 <_dtoa_r+0x4d0>
 8021ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021ae0:	9d00      	ldr	r5, [sp, #0]
 8021ae2:	ea6f 0a03 	mvn.w	sl, r3
 8021ae6:	f04f 0800 	mov.w	r8, #0
 8021aea:	4631      	mov	r1, r6
 8021aec:	4620      	mov	r0, r4
 8021aee:	f000 fd09 	bl	8022504 <_Bfree>
 8021af2:	2f00      	cmp	r7, #0
 8021af4:	f43f aeb4 	beq.w	8021860 <_dtoa_r+0x6d8>
 8021af8:	f1b8 0f00 	cmp.w	r8, #0
 8021afc:	d005      	beq.n	8021b0a <_dtoa_r+0x982>
 8021afe:	45b8      	cmp	r8, r7
 8021b00:	d003      	beq.n	8021b0a <_dtoa_r+0x982>
 8021b02:	4641      	mov	r1, r8
 8021b04:	4620      	mov	r0, r4
 8021b06:	f000 fcfd 	bl	8022504 <_Bfree>
 8021b0a:	4639      	mov	r1, r7
 8021b0c:	4620      	mov	r0, r4
 8021b0e:	f000 fcf9 	bl	8022504 <_Bfree>
 8021b12:	e6a5      	b.n	8021860 <_dtoa_r+0x6d8>
 8021b14:	2600      	movs	r6, #0
 8021b16:	4637      	mov	r7, r6
 8021b18:	e7e1      	b.n	8021ade <_dtoa_r+0x956>
 8021b1a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8021b1c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8021b20:	4637      	mov	r7, r6
 8021b22:	e599      	b.n	8021658 <_dtoa_r+0x4d0>
 8021b24:	9b08      	ldr	r3, [sp, #32]
 8021b26:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8021b2a:	2b00      	cmp	r3, #0
 8021b2c:	f000 80fd 	beq.w	8021d2a <_dtoa_r+0xba2>
 8021b30:	2d00      	cmp	r5, #0
 8021b32:	dd05      	ble.n	8021b40 <_dtoa_r+0x9b8>
 8021b34:	4639      	mov	r1, r7
 8021b36:	462a      	mov	r2, r5
 8021b38:	4620      	mov	r0, r4
 8021b3a:	f000 feff 	bl	802293c <__lshift>
 8021b3e:	4607      	mov	r7, r0
 8021b40:	9b06      	ldr	r3, [sp, #24]
 8021b42:	2b00      	cmp	r3, #0
 8021b44:	d05c      	beq.n	8021c00 <_dtoa_r+0xa78>
 8021b46:	6879      	ldr	r1, [r7, #4]
 8021b48:	4620      	mov	r0, r4
 8021b4a:	f000 fc9b 	bl	8022484 <_Balloc>
 8021b4e:	4605      	mov	r5, r0
 8021b50:	b928      	cbnz	r0, 8021b5e <_dtoa_r+0x9d6>
 8021b52:	4b80      	ldr	r3, [pc, #512]	; (8021d54 <_dtoa_r+0xbcc>)
 8021b54:	4602      	mov	r2, r0
 8021b56:	f240 21ea 	movw	r1, #746	; 0x2ea
 8021b5a:	f7ff bb2e 	b.w	80211ba <_dtoa_r+0x32>
 8021b5e:	693a      	ldr	r2, [r7, #16]
 8021b60:	3202      	adds	r2, #2
 8021b62:	0092      	lsls	r2, r2, #2
 8021b64:	f107 010c 	add.w	r1, r7, #12
 8021b68:	300c      	adds	r0, #12
 8021b6a:	f7fd fbe5 	bl	801f338 <memcpy>
 8021b6e:	2201      	movs	r2, #1
 8021b70:	4629      	mov	r1, r5
 8021b72:	4620      	mov	r0, r4
 8021b74:	f000 fee2 	bl	802293c <__lshift>
 8021b78:	9b00      	ldr	r3, [sp, #0]
 8021b7a:	3301      	adds	r3, #1
 8021b7c:	9301      	str	r3, [sp, #4]
 8021b7e:	9b00      	ldr	r3, [sp, #0]
 8021b80:	444b      	add	r3, r9
 8021b82:	9307      	str	r3, [sp, #28]
 8021b84:	9b02      	ldr	r3, [sp, #8]
 8021b86:	f003 0301 	and.w	r3, r3, #1
 8021b8a:	46b8      	mov	r8, r7
 8021b8c:	9306      	str	r3, [sp, #24]
 8021b8e:	4607      	mov	r7, r0
 8021b90:	9b01      	ldr	r3, [sp, #4]
 8021b92:	4631      	mov	r1, r6
 8021b94:	3b01      	subs	r3, #1
 8021b96:	4658      	mov	r0, fp
 8021b98:	9302      	str	r3, [sp, #8]
 8021b9a:	f7ff fa67 	bl	802106c <quorem>
 8021b9e:	4603      	mov	r3, r0
 8021ba0:	3330      	adds	r3, #48	; 0x30
 8021ba2:	9004      	str	r0, [sp, #16]
 8021ba4:	4641      	mov	r1, r8
 8021ba6:	4658      	mov	r0, fp
 8021ba8:	9308      	str	r3, [sp, #32]
 8021baa:	f000 ff33 	bl	8022a14 <__mcmp>
 8021bae:	463a      	mov	r2, r7
 8021bb0:	4681      	mov	r9, r0
 8021bb2:	4631      	mov	r1, r6
 8021bb4:	4620      	mov	r0, r4
 8021bb6:	f000 ff49 	bl	8022a4c <__mdiff>
 8021bba:	68c2      	ldr	r2, [r0, #12]
 8021bbc:	9b08      	ldr	r3, [sp, #32]
 8021bbe:	4605      	mov	r5, r0
 8021bc0:	bb02      	cbnz	r2, 8021c04 <_dtoa_r+0xa7c>
 8021bc2:	4601      	mov	r1, r0
 8021bc4:	4658      	mov	r0, fp
 8021bc6:	f000 ff25 	bl	8022a14 <__mcmp>
 8021bca:	9b08      	ldr	r3, [sp, #32]
 8021bcc:	4602      	mov	r2, r0
 8021bce:	4629      	mov	r1, r5
 8021bd0:	4620      	mov	r0, r4
 8021bd2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8021bd6:	f000 fc95 	bl	8022504 <_Bfree>
 8021bda:	9b05      	ldr	r3, [sp, #20]
 8021bdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021bde:	9d01      	ldr	r5, [sp, #4]
 8021be0:	ea43 0102 	orr.w	r1, r3, r2
 8021be4:	9b06      	ldr	r3, [sp, #24]
 8021be6:	430b      	orrs	r3, r1
 8021be8:	9b08      	ldr	r3, [sp, #32]
 8021bea:	d10d      	bne.n	8021c08 <_dtoa_r+0xa80>
 8021bec:	2b39      	cmp	r3, #57	; 0x39
 8021bee:	d029      	beq.n	8021c44 <_dtoa_r+0xabc>
 8021bf0:	f1b9 0f00 	cmp.w	r9, #0
 8021bf4:	dd01      	ble.n	8021bfa <_dtoa_r+0xa72>
 8021bf6:	9b04      	ldr	r3, [sp, #16]
 8021bf8:	3331      	adds	r3, #49	; 0x31
 8021bfa:	9a02      	ldr	r2, [sp, #8]
 8021bfc:	7013      	strb	r3, [r2, #0]
 8021bfe:	e774      	b.n	8021aea <_dtoa_r+0x962>
 8021c00:	4638      	mov	r0, r7
 8021c02:	e7b9      	b.n	8021b78 <_dtoa_r+0x9f0>
 8021c04:	2201      	movs	r2, #1
 8021c06:	e7e2      	b.n	8021bce <_dtoa_r+0xa46>
 8021c08:	f1b9 0f00 	cmp.w	r9, #0
 8021c0c:	db06      	blt.n	8021c1c <_dtoa_r+0xa94>
 8021c0e:	9905      	ldr	r1, [sp, #20]
 8021c10:	ea41 0909 	orr.w	r9, r1, r9
 8021c14:	9906      	ldr	r1, [sp, #24]
 8021c16:	ea59 0101 	orrs.w	r1, r9, r1
 8021c1a:	d120      	bne.n	8021c5e <_dtoa_r+0xad6>
 8021c1c:	2a00      	cmp	r2, #0
 8021c1e:	ddec      	ble.n	8021bfa <_dtoa_r+0xa72>
 8021c20:	4659      	mov	r1, fp
 8021c22:	2201      	movs	r2, #1
 8021c24:	4620      	mov	r0, r4
 8021c26:	9301      	str	r3, [sp, #4]
 8021c28:	f000 fe88 	bl	802293c <__lshift>
 8021c2c:	4631      	mov	r1, r6
 8021c2e:	4683      	mov	fp, r0
 8021c30:	f000 fef0 	bl	8022a14 <__mcmp>
 8021c34:	2800      	cmp	r0, #0
 8021c36:	9b01      	ldr	r3, [sp, #4]
 8021c38:	dc02      	bgt.n	8021c40 <_dtoa_r+0xab8>
 8021c3a:	d1de      	bne.n	8021bfa <_dtoa_r+0xa72>
 8021c3c:	07da      	lsls	r2, r3, #31
 8021c3e:	d5dc      	bpl.n	8021bfa <_dtoa_r+0xa72>
 8021c40:	2b39      	cmp	r3, #57	; 0x39
 8021c42:	d1d8      	bne.n	8021bf6 <_dtoa_r+0xa6e>
 8021c44:	9a02      	ldr	r2, [sp, #8]
 8021c46:	2339      	movs	r3, #57	; 0x39
 8021c48:	7013      	strb	r3, [r2, #0]
 8021c4a:	462b      	mov	r3, r5
 8021c4c:	461d      	mov	r5, r3
 8021c4e:	3b01      	subs	r3, #1
 8021c50:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8021c54:	2a39      	cmp	r2, #57	; 0x39
 8021c56:	d050      	beq.n	8021cfa <_dtoa_r+0xb72>
 8021c58:	3201      	adds	r2, #1
 8021c5a:	701a      	strb	r2, [r3, #0]
 8021c5c:	e745      	b.n	8021aea <_dtoa_r+0x962>
 8021c5e:	2a00      	cmp	r2, #0
 8021c60:	dd03      	ble.n	8021c6a <_dtoa_r+0xae2>
 8021c62:	2b39      	cmp	r3, #57	; 0x39
 8021c64:	d0ee      	beq.n	8021c44 <_dtoa_r+0xabc>
 8021c66:	3301      	adds	r3, #1
 8021c68:	e7c7      	b.n	8021bfa <_dtoa_r+0xa72>
 8021c6a:	9a01      	ldr	r2, [sp, #4]
 8021c6c:	9907      	ldr	r1, [sp, #28]
 8021c6e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8021c72:	428a      	cmp	r2, r1
 8021c74:	d02a      	beq.n	8021ccc <_dtoa_r+0xb44>
 8021c76:	4659      	mov	r1, fp
 8021c78:	2300      	movs	r3, #0
 8021c7a:	220a      	movs	r2, #10
 8021c7c:	4620      	mov	r0, r4
 8021c7e:	f000 fc63 	bl	8022548 <__multadd>
 8021c82:	45b8      	cmp	r8, r7
 8021c84:	4683      	mov	fp, r0
 8021c86:	f04f 0300 	mov.w	r3, #0
 8021c8a:	f04f 020a 	mov.w	r2, #10
 8021c8e:	4641      	mov	r1, r8
 8021c90:	4620      	mov	r0, r4
 8021c92:	d107      	bne.n	8021ca4 <_dtoa_r+0xb1c>
 8021c94:	f000 fc58 	bl	8022548 <__multadd>
 8021c98:	4680      	mov	r8, r0
 8021c9a:	4607      	mov	r7, r0
 8021c9c:	9b01      	ldr	r3, [sp, #4]
 8021c9e:	3301      	adds	r3, #1
 8021ca0:	9301      	str	r3, [sp, #4]
 8021ca2:	e775      	b.n	8021b90 <_dtoa_r+0xa08>
 8021ca4:	f000 fc50 	bl	8022548 <__multadd>
 8021ca8:	4639      	mov	r1, r7
 8021caa:	4680      	mov	r8, r0
 8021cac:	2300      	movs	r3, #0
 8021cae:	220a      	movs	r2, #10
 8021cb0:	4620      	mov	r0, r4
 8021cb2:	f000 fc49 	bl	8022548 <__multadd>
 8021cb6:	4607      	mov	r7, r0
 8021cb8:	e7f0      	b.n	8021c9c <_dtoa_r+0xb14>
 8021cba:	f1b9 0f00 	cmp.w	r9, #0
 8021cbe:	9a00      	ldr	r2, [sp, #0]
 8021cc0:	bfcc      	ite	gt
 8021cc2:	464d      	movgt	r5, r9
 8021cc4:	2501      	movle	r5, #1
 8021cc6:	4415      	add	r5, r2
 8021cc8:	f04f 0800 	mov.w	r8, #0
 8021ccc:	4659      	mov	r1, fp
 8021cce:	2201      	movs	r2, #1
 8021cd0:	4620      	mov	r0, r4
 8021cd2:	9301      	str	r3, [sp, #4]
 8021cd4:	f000 fe32 	bl	802293c <__lshift>
 8021cd8:	4631      	mov	r1, r6
 8021cda:	4683      	mov	fp, r0
 8021cdc:	f000 fe9a 	bl	8022a14 <__mcmp>
 8021ce0:	2800      	cmp	r0, #0
 8021ce2:	dcb2      	bgt.n	8021c4a <_dtoa_r+0xac2>
 8021ce4:	d102      	bne.n	8021cec <_dtoa_r+0xb64>
 8021ce6:	9b01      	ldr	r3, [sp, #4]
 8021ce8:	07db      	lsls	r3, r3, #31
 8021cea:	d4ae      	bmi.n	8021c4a <_dtoa_r+0xac2>
 8021cec:	462b      	mov	r3, r5
 8021cee:	461d      	mov	r5, r3
 8021cf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021cf4:	2a30      	cmp	r2, #48	; 0x30
 8021cf6:	d0fa      	beq.n	8021cee <_dtoa_r+0xb66>
 8021cf8:	e6f7      	b.n	8021aea <_dtoa_r+0x962>
 8021cfa:	9a00      	ldr	r2, [sp, #0]
 8021cfc:	429a      	cmp	r2, r3
 8021cfe:	d1a5      	bne.n	8021c4c <_dtoa_r+0xac4>
 8021d00:	f10a 0a01 	add.w	sl, sl, #1
 8021d04:	2331      	movs	r3, #49	; 0x31
 8021d06:	e779      	b.n	8021bfc <_dtoa_r+0xa74>
 8021d08:	4b13      	ldr	r3, [pc, #76]	; (8021d58 <_dtoa_r+0xbd0>)
 8021d0a:	f7ff baaf 	b.w	802126c <_dtoa_r+0xe4>
 8021d0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021d10:	2b00      	cmp	r3, #0
 8021d12:	f47f aa86 	bne.w	8021222 <_dtoa_r+0x9a>
 8021d16:	4b11      	ldr	r3, [pc, #68]	; (8021d5c <_dtoa_r+0xbd4>)
 8021d18:	f7ff baa8 	b.w	802126c <_dtoa_r+0xe4>
 8021d1c:	f1b9 0f00 	cmp.w	r9, #0
 8021d20:	dc03      	bgt.n	8021d2a <_dtoa_r+0xba2>
 8021d22:	9b05      	ldr	r3, [sp, #20]
 8021d24:	2b02      	cmp	r3, #2
 8021d26:	f73f aec9 	bgt.w	8021abc <_dtoa_r+0x934>
 8021d2a:	9d00      	ldr	r5, [sp, #0]
 8021d2c:	4631      	mov	r1, r6
 8021d2e:	4658      	mov	r0, fp
 8021d30:	f7ff f99c 	bl	802106c <quorem>
 8021d34:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8021d38:	f805 3b01 	strb.w	r3, [r5], #1
 8021d3c:	9a00      	ldr	r2, [sp, #0]
 8021d3e:	1aaa      	subs	r2, r5, r2
 8021d40:	4591      	cmp	r9, r2
 8021d42:	ddba      	ble.n	8021cba <_dtoa_r+0xb32>
 8021d44:	4659      	mov	r1, fp
 8021d46:	2300      	movs	r3, #0
 8021d48:	220a      	movs	r2, #10
 8021d4a:	4620      	mov	r0, r4
 8021d4c:	f000 fbfc 	bl	8022548 <__multadd>
 8021d50:	4683      	mov	fp, r0
 8021d52:	e7eb      	b.n	8021d2c <_dtoa_r+0xba4>
 8021d54:	0802412c 	.word	0x0802412c
 8021d58:	08023f28 	.word	0x08023f28
 8021d5c:	080240a9 	.word	0x080240a9

08021d60 <rshift>:
 8021d60:	6903      	ldr	r3, [r0, #16]
 8021d62:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8021d66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021d6a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8021d6e:	f100 0414 	add.w	r4, r0, #20
 8021d72:	dd45      	ble.n	8021e00 <rshift+0xa0>
 8021d74:	f011 011f 	ands.w	r1, r1, #31
 8021d78:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8021d7c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8021d80:	d10c      	bne.n	8021d9c <rshift+0x3c>
 8021d82:	f100 0710 	add.w	r7, r0, #16
 8021d86:	4629      	mov	r1, r5
 8021d88:	42b1      	cmp	r1, r6
 8021d8a:	d334      	bcc.n	8021df6 <rshift+0x96>
 8021d8c:	1a9b      	subs	r3, r3, r2
 8021d8e:	009b      	lsls	r3, r3, #2
 8021d90:	1eea      	subs	r2, r5, #3
 8021d92:	4296      	cmp	r6, r2
 8021d94:	bf38      	it	cc
 8021d96:	2300      	movcc	r3, #0
 8021d98:	4423      	add	r3, r4
 8021d9a:	e015      	b.n	8021dc8 <rshift+0x68>
 8021d9c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8021da0:	f1c1 0820 	rsb	r8, r1, #32
 8021da4:	40cf      	lsrs	r7, r1
 8021da6:	f105 0e04 	add.w	lr, r5, #4
 8021daa:	46a1      	mov	r9, r4
 8021dac:	4576      	cmp	r6, lr
 8021dae:	46f4      	mov	ip, lr
 8021db0:	d815      	bhi.n	8021dde <rshift+0x7e>
 8021db2:	1a9b      	subs	r3, r3, r2
 8021db4:	009a      	lsls	r2, r3, #2
 8021db6:	3a04      	subs	r2, #4
 8021db8:	3501      	adds	r5, #1
 8021dba:	42ae      	cmp	r6, r5
 8021dbc:	bf38      	it	cc
 8021dbe:	2200      	movcc	r2, #0
 8021dc0:	18a3      	adds	r3, r4, r2
 8021dc2:	50a7      	str	r7, [r4, r2]
 8021dc4:	b107      	cbz	r7, 8021dc8 <rshift+0x68>
 8021dc6:	3304      	adds	r3, #4
 8021dc8:	1b1a      	subs	r2, r3, r4
 8021dca:	42a3      	cmp	r3, r4
 8021dcc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8021dd0:	bf08      	it	eq
 8021dd2:	2300      	moveq	r3, #0
 8021dd4:	6102      	str	r2, [r0, #16]
 8021dd6:	bf08      	it	eq
 8021dd8:	6143      	streq	r3, [r0, #20]
 8021dda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021dde:	f8dc c000 	ldr.w	ip, [ip]
 8021de2:	fa0c fc08 	lsl.w	ip, ip, r8
 8021de6:	ea4c 0707 	orr.w	r7, ip, r7
 8021dea:	f849 7b04 	str.w	r7, [r9], #4
 8021dee:	f85e 7b04 	ldr.w	r7, [lr], #4
 8021df2:	40cf      	lsrs	r7, r1
 8021df4:	e7da      	b.n	8021dac <rshift+0x4c>
 8021df6:	f851 cb04 	ldr.w	ip, [r1], #4
 8021dfa:	f847 cf04 	str.w	ip, [r7, #4]!
 8021dfe:	e7c3      	b.n	8021d88 <rshift+0x28>
 8021e00:	4623      	mov	r3, r4
 8021e02:	e7e1      	b.n	8021dc8 <rshift+0x68>

08021e04 <__hexdig_fun>:
 8021e04:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8021e08:	2b09      	cmp	r3, #9
 8021e0a:	d802      	bhi.n	8021e12 <__hexdig_fun+0xe>
 8021e0c:	3820      	subs	r0, #32
 8021e0e:	b2c0      	uxtb	r0, r0
 8021e10:	4770      	bx	lr
 8021e12:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8021e16:	2b05      	cmp	r3, #5
 8021e18:	d801      	bhi.n	8021e1e <__hexdig_fun+0x1a>
 8021e1a:	3847      	subs	r0, #71	; 0x47
 8021e1c:	e7f7      	b.n	8021e0e <__hexdig_fun+0xa>
 8021e1e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8021e22:	2b05      	cmp	r3, #5
 8021e24:	d801      	bhi.n	8021e2a <__hexdig_fun+0x26>
 8021e26:	3827      	subs	r0, #39	; 0x27
 8021e28:	e7f1      	b.n	8021e0e <__hexdig_fun+0xa>
 8021e2a:	2000      	movs	r0, #0
 8021e2c:	4770      	bx	lr
	...

08021e30 <__gethex>:
 8021e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e34:	ed2d 8b02 	vpush	{d8}
 8021e38:	b089      	sub	sp, #36	; 0x24
 8021e3a:	ee08 0a10 	vmov	s16, r0
 8021e3e:	9304      	str	r3, [sp, #16]
 8021e40:	4bbc      	ldr	r3, [pc, #752]	; (8022134 <__gethex+0x304>)
 8021e42:	681b      	ldr	r3, [r3, #0]
 8021e44:	9301      	str	r3, [sp, #4]
 8021e46:	4618      	mov	r0, r3
 8021e48:	468b      	mov	fp, r1
 8021e4a:	4690      	mov	r8, r2
 8021e4c:	f7f7 fa10 	bl	8019270 <strlen>
 8021e50:	9b01      	ldr	r3, [sp, #4]
 8021e52:	f8db 2000 	ldr.w	r2, [fp]
 8021e56:	4403      	add	r3, r0
 8021e58:	4682      	mov	sl, r0
 8021e5a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8021e5e:	9305      	str	r3, [sp, #20]
 8021e60:	1c93      	adds	r3, r2, #2
 8021e62:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8021e66:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8021e6a:	32fe      	adds	r2, #254	; 0xfe
 8021e6c:	18d1      	adds	r1, r2, r3
 8021e6e:	461f      	mov	r7, r3
 8021e70:	f813 0b01 	ldrb.w	r0, [r3], #1
 8021e74:	9100      	str	r1, [sp, #0]
 8021e76:	2830      	cmp	r0, #48	; 0x30
 8021e78:	d0f8      	beq.n	8021e6c <__gethex+0x3c>
 8021e7a:	f7ff ffc3 	bl	8021e04 <__hexdig_fun>
 8021e7e:	4604      	mov	r4, r0
 8021e80:	2800      	cmp	r0, #0
 8021e82:	d13a      	bne.n	8021efa <__gethex+0xca>
 8021e84:	9901      	ldr	r1, [sp, #4]
 8021e86:	4652      	mov	r2, sl
 8021e88:	4638      	mov	r0, r7
 8021e8a:	f001 f929 	bl	80230e0 <strncmp>
 8021e8e:	4605      	mov	r5, r0
 8021e90:	2800      	cmp	r0, #0
 8021e92:	d168      	bne.n	8021f66 <__gethex+0x136>
 8021e94:	f817 000a 	ldrb.w	r0, [r7, sl]
 8021e98:	eb07 060a 	add.w	r6, r7, sl
 8021e9c:	f7ff ffb2 	bl	8021e04 <__hexdig_fun>
 8021ea0:	2800      	cmp	r0, #0
 8021ea2:	d062      	beq.n	8021f6a <__gethex+0x13a>
 8021ea4:	4633      	mov	r3, r6
 8021ea6:	7818      	ldrb	r0, [r3, #0]
 8021ea8:	2830      	cmp	r0, #48	; 0x30
 8021eaa:	461f      	mov	r7, r3
 8021eac:	f103 0301 	add.w	r3, r3, #1
 8021eb0:	d0f9      	beq.n	8021ea6 <__gethex+0x76>
 8021eb2:	f7ff ffa7 	bl	8021e04 <__hexdig_fun>
 8021eb6:	2301      	movs	r3, #1
 8021eb8:	fab0 f480 	clz	r4, r0
 8021ebc:	0964      	lsrs	r4, r4, #5
 8021ebe:	4635      	mov	r5, r6
 8021ec0:	9300      	str	r3, [sp, #0]
 8021ec2:	463a      	mov	r2, r7
 8021ec4:	4616      	mov	r6, r2
 8021ec6:	3201      	adds	r2, #1
 8021ec8:	7830      	ldrb	r0, [r6, #0]
 8021eca:	f7ff ff9b 	bl	8021e04 <__hexdig_fun>
 8021ece:	2800      	cmp	r0, #0
 8021ed0:	d1f8      	bne.n	8021ec4 <__gethex+0x94>
 8021ed2:	9901      	ldr	r1, [sp, #4]
 8021ed4:	4652      	mov	r2, sl
 8021ed6:	4630      	mov	r0, r6
 8021ed8:	f001 f902 	bl	80230e0 <strncmp>
 8021edc:	b980      	cbnz	r0, 8021f00 <__gethex+0xd0>
 8021ede:	b94d      	cbnz	r5, 8021ef4 <__gethex+0xc4>
 8021ee0:	eb06 050a 	add.w	r5, r6, sl
 8021ee4:	462a      	mov	r2, r5
 8021ee6:	4616      	mov	r6, r2
 8021ee8:	3201      	adds	r2, #1
 8021eea:	7830      	ldrb	r0, [r6, #0]
 8021eec:	f7ff ff8a 	bl	8021e04 <__hexdig_fun>
 8021ef0:	2800      	cmp	r0, #0
 8021ef2:	d1f8      	bne.n	8021ee6 <__gethex+0xb6>
 8021ef4:	1bad      	subs	r5, r5, r6
 8021ef6:	00ad      	lsls	r5, r5, #2
 8021ef8:	e004      	b.n	8021f04 <__gethex+0xd4>
 8021efa:	2400      	movs	r4, #0
 8021efc:	4625      	mov	r5, r4
 8021efe:	e7e0      	b.n	8021ec2 <__gethex+0x92>
 8021f00:	2d00      	cmp	r5, #0
 8021f02:	d1f7      	bne.n	8021ef4 <__gethex+0xc4>
 8021f04:	7833      	ldrb	r3, [r6, #0]
 8021f06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8021f0a:	2b50      	cmp	r3, #80	; 0x50
 8021f0c:	d13b      	bne.n	8021f86 <__gethex+0x156>
 8021f0e:	7873      	ldrb	r3, [r6, #1]
 8021f10:	2b2b      	cmp	r3, #43	; 0x2b
 8021f12:	d02c      	beq.n	8021f6e <__gethex+0x13e>
 8021f14:	2b2d      	cmp	r3, #45	; 0x2d
 8021f16:	d02e      	beq.n	8021f76 <__gethex+0x146>
 8021f18:	1c71      	adds	r1, r6, #1
 8021f1a:	f04f 0900 	mov.w	r9, #0
 8021f1e:	7808      	ldrb	r0, [r1, #0]
 8021f20:	f7ff ff70 	bl	8021e04 <__hexdig_fun>
 8021f24:	1e43      	subs	r3, r0, #1
 8021f26:	b2db      	uxtb	r3, r3
 8021f28:	2b18      	cmp	r3, #24
 8021f2a:	d82c      	bhi.n	8021f86 <__gethex+0x156>
 8021f2c:	f1a0 0210 	sub.w	r2, r0, #16
 8021f30:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8021f34:	f7ff ff66 	bl	8021e04 <__hexdig_fun>
 8021f38:	1e43      	subs	r3, r0, #1
 8021f3a:	b2db      	uxtb	r3, r3
 8021f3c:	2b18      	cmp	r3, #24
 8021f3e:	d91d      	bls.n	8021f7c <__gethex+0x14c>
 8021f40:	f1b9 0f00 	cmp.w	r9, #0
 8021f44:	d000      	beq.n	8021f48 <__gethex+0x118>
 8021f46:	4252      	negs	r2, r2
 8021f48:	4415      	add	r5, r2
 8021f4a:	f8cb 1000 	str.w	r1, [fp]
 8021f4e:	b1e4      	cbz	r4, 8021f8a <__gethex+0x15a>
 8021f50:	9b00      	ldr	r3, [sp, #0]
 8021f52:	2b00      	cmp	r3, #0
 8021f54:	bf14      	ite	ne
 8021f56:	2700      	movne	r7, #0
 8021f58:	2706      	moveq	r7, #6
 8021f5a:	4638      	mov	r0, r7
 8021f5c:	b009      	add	sp, #36	; 0x24
 8021f5e:	ecbd 8b02 	vpop	{d8}
 8021f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021f66:	463e      	mov	r6, r7
 8021f68:	4625      	mov	r5, r4
 8021f6a:	2401      	movs	r4, #1
 8021f6c:	e7ca      	b.n	8021f04 <__gethex+0xd4>
 8021f6e:	f04f 0900 	mov.w	r9, #0
 8021f72:	1cb1      	adds	r1, r6, #2
 8021f74:	e7d3      	b.n	8021f1e <__gethex+0xee>
 8021f76:	f04f 0901 	mov.w	r9, #1
 8021f7a:	e7fa      	b.n	8021f72 <__gethex+0x142>
 8021f7c:	230a      	movs	r3, #10
 8021f7e:	fb03 0202 	mla	r2, r3, r2, r0
 8021f82:	3a10      	subs	r2, #16
 8021f84:	e7d4      	b.n	8021f30 <__gethex+0x100>
 8021f86:	4631      	mov	r1, r6
 8021f88:	e7df      	b.n	8021f4a <__gethex+0x11a>
 8021f8a:	1bf3      	subs	r3, r6, r7
 8021f8c:	3b01      	subs	r3, #1
 8021f8e:	4621      	mov	r1, r4
 8021f90:	2b07      	cmp	r3, #7
 8021f92:	dc0b      	bgt.n	8021fac <__gethex+0x17c>
 8021f94:	ee18 0a10 	vmov	r0, s16
 8021f98:	f000 fa74 	bl	8022484 <_Balloc>
 8021f9c:	4604      	mov	r4, r0
 8021f9e:	b940      	cbnz	r0, 8021fb2 <__gethex+0x182>
 8021fa0:	4b65      	ldr	r3, [pc, #404]	; (8022138 <__gethex+0x308>)
 8021fa2:	4602      	mov	r2, r0
 8021fa4:	21de      	movs	r1, #222	; 0xde
 8021fa6:	4865      	ldr	r0, [pc, #404]	; (802213c <__gethex+0x30c>)
 8021fa8:	f001 f8ba 	bl	8023120 <__assert_func>
 8021fac:	3101      	adds	r1, #1
 8021fae:	105b      	asrs	r3, r3, #1
 8021fb0:	e7ee      	b.n	8021f90 <__gethex+0x160>
 8021fb2:	f100 0914 	add.w	r9, r0, #20
 8021fb6:	f04f 0b00 	mov.w	fp, #0
 8021fba:	f1ca 0301 	rsb	r3, sl, #1
 8021fbe:	f8cd 9008 	str.w	r9, [sp, #8]
 8021fc2:	f8cd b000 	str.w	fp, [sp]
 8021fc6:	9306      	str	r3, [sp, #24]
 8021fc8:	42b7      	cmp	r7, r6
 8021fca:	d340      	bcc.n	802204e <__gethex+0x21e>
 8021fcc:	9802      	ldr	r0, [sp, #8]
 8021fce:	9b00      	ldr	r3, [sp, #0]
 8021fd0:	f840 3b04 	str.w	r3, [r0], #4
 8021fd4:	eba0 0009 	sub.w	r0, r0, r9
 8021fd8:	1080      	asrs	r0, r0, #2
 8021fda:	0146      	lsls	r6, r0, #5
 8021fdc:	6120      	str	r0, [r4, #16]
 8021fde:	4618      	mov	r0, r3
 8021fe0:	f000 fb46 	bl	8022670 <__hi0bits>
 8021fe4:	1a30      	subs	r0, r6, r0
 8021fe6:	f8d8 6000 	ldr.w	r6, [r8]
 8021fea:	42b0      	cmp	r0, r6
 8021fec:	dd63      	ble.n	80220b6 <__gethex+0x286>
 8021fee:	1b87      	subs	r7, r0, r6
 8021ff0:	4639      	mov	r1, r7
 8021ff2:	4620      	mov	r0, r4
 8021ff4:	f000 fee0 	bl	8022db8 <__any_on>
 8021ff8:	4682      	mov	sl, r0
 8021ffa:	b1a8      	cbz	r0, 8022028 <__gethex+0x1f8>
 8021ffc:	1e7b      	subs	r3, r7, #1
 8021ffe:	1159      	asrs	r1, r3, #5
 8022000:	f003 021f 	and.w	r2, r3, #31
 8022004:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8022008:	f04f 0a01 	mov.w	sl, #1
 802200c:	fa0a f202 	lsl.w	r2, sl, r2
 8022010:	420a      	tst	r2, r1
 8022012:	d009      	beq.n	8022028 <__gethex+0x1f8>
 8022014:	4553      	cmp	r3, sl
 8022016:	dd05      	ble.n	8022024 <__gethex+0x1f4>
 8022018:	1eb9      	subs	r1, r7, #2
 802201a:	4620      	mov	r0, r4
 802201c:	f000 fecc 	bl	8022db8 <__any_on>
 8022020:	2800      	cmp	r0, #0
 8022022:	d145      	bne.n	80220b0 <__gethex+0x280>
 8022024:	f04f 0a02 	mov.w	sl, #2
 8022028:	4639      	mov	r1, r7
 802202a:	4620      	mov	r0, r4
 802202c:	f7ff fe98 	bl	8021d60 <rshift>
 8022030:	443d      	add	r5, r7
 8022032:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8022036:	42ab      	cmp	r3, r5
 8022038:	da4c      	bge.n	80220d4 <__gethex+0x2a4>
 802203a:	ee18 0a10 	vmov	r0, s16
 802203e:	4621      	mov	r1, r4
 8022040:	f000 fa60 	bl	8022504 <_Bfree>
 8022044:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022046:	2300      	movs	r3, #0
 8022048:	6013      	str	r3, [r2, #0]
 802204a:	27a3      	movs	r7, #163	; 0xa3
 802204c:	e785      	b.n	8021f5a <__gethex+0x12a>
 802204e:	1e73      	subs	r3, r6, #1
 8022050:	9a05      	ldr	r2, [sp, #20]
 8022052:	9303      	str	r3, [sp, #12]
 8022054:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8022058:	4293      	cmp	r3, r2
 802205a:	d019      	beq.n	8022090 <__gethex+0x260>
 802205c:	f1bb 0f20 	cmp.w	fp, #32
 8022060:	d107      	bne.n	8022072 <__gethex+0x242>
 8022062:	9b02      	ldr	r3, [sp, #8]
 8022064:	9a00      	ldr	r2, [sp, #0]
 8022066:	f843 2b04 	str.w	r2, [r3], #4
 802206a:	9302      	str	r3, [sp, #8]
 802206c:	2300      	movs	r3, #0
 802206e:	9300      	str	r3, [sp, #0]
 8022070:	469b      	mov	fp, r3
 8022072:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8022076:	f7ff fec5 	bl	8021e04 <__hexdig_fun>
 802207a:	9b00      	ldr	r3, [sp, #0]
 802207c:	f000 000f 	and.w	r0, r0, #15
 8022080:	fa00 f00b 	lsl.w	r0, r0, fp
 8022084:	4303      	orrs	r3, r0
 8022086:	9300      	str	r3, [sp, #0]
 8022088:	f10b 0b04 	add.w	fp, fp, #4
 802208c:	9b03      	ldr	r3, [sp, #12]
 802208e:	e00d      	b.n	80220ac <__gethex+0x27c>
 8022090:	9b03      	ldr	r3, [sp, #12]
 8022092:	9a06      	ldr	r2, [sp, #24]
 8022094:	4413      	add	r3, r2
 8022096:	42bb      	cmp	r3, r7
 8022098:	d3e0      	bcc.n	802205c <__gethex+0x22c>
 802209a:	4618      	mov	r0, r3
 802209c:	9901      	ldr	r1, [sp, #4]
 802209e:	9307      	str	r3, [sp, #28]
 80220a0:	4652      	mov	r2, sl
 80220a2:	f001 f81d 	bl	80230e0 <strncmp>
 80220a6:	9b07      	ldr	r3, [sp, #28]
 80220a8:	2800      	cmp	r0, #0
 80220aa:	d1d7      	bne.n	802205c <__gethex+0x22c>
 80220ac:	461e      	mov	r6, r3
 80220ae:	e78b      	b.n	8021fc8 <__gethex+0x198>
 80220b0:	f04f 0a03 	mov.w	sl, #3
 80220b4:	e7b8      	b.n	8022028 <__gethex+0x1f8>
 80220b6:	da0a      	bge.n	80220ce <__gethex+0x29e>
 80220b8:	1a37      	subs	r7, r6, r0
 80220ba:	4621      	mov	r1, r4
 80220bc:	ee18 0a10 	vmov	r0, s16
 80220c0:	463a      	mov	r2, r7
 80220c2:	f000 fc3b 	bl	802293c <__lshift>
 80220c6:	1bed      	subs	r5, r5, r7
 80220c8:	4604      	mov	r4, r0
 80220ca:	f100 0914 	add.w	r9, r0, #20
 80220ce:	f04f 0a00 	mov.w	sl, #0
 80220d2:	e7ae      	b.n	8022032 <__gethex+0x202>
 80220d4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80220d8:	42a8      	cmp	r0, r5
 80220da:	dd72      	ble.n	80221c2 <__gethex+0x392>
 80220dc:	1b45      	subs	r5, r0, r5
 80220de:	42ae      	cmp	r6, r5
 80220e0:	dc36      	bgt.n	8022150 <__gethex+0x320>
 80220e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80220e6:	2b02      	cmp	r3, #2
 80220e8:	d02a      	beq.n	8022140 <__gethex+0x310>
 80220ea:	2b03      	cmp	r3, #3
 80220ec:	d02c      	beq.n	8022148 <__gethex+0x318>
 80220ee:	2b01      	cmp	r3, #1
 80220f0:	d115      	bne.n	802211e <__gethex+0x2ee>
 80220f2:	42ae      	cmp	r6, r5
 80220f4:	d113      	bne.n	802211e <__gethex+0x2ee>
 80220f6:	2e01      	cmp	r6, #1
 80220f8:	d10b      	bne.n	8022112 <__gethex+0x2e2>
 80220fa:	9a04      	ldr	r2, [sp, #16]
 80220fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8022100:	6013      	str	r3, [r2, #0]
 8022102:	2301      	movs	r3, #1
 8022104:	6123      	str	r3, [r4, #16]
 8022106:	f8c9 3000 	str.w	r3, [r9]
 802210a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802210c:	2762      	movs	r7, #98	; 0x62
 802210e:	601c      	str	r4, [r3, #0]
 8022110:	e723      	b.n	8021f5a <__gethex+0x12a>
 8022112:	1e71      	subs	r1, r6, #1
 8022114:	4620      	mov	r0, r4
 8022116:	f000 fe4f 	bl	8022db8 <__any_on>
 802211a:	2800      	cmp	r0, #0
 802211c:	d1ed      	bne.n	80220fa <__gethex+0x2ca>
 802211e:	ee18 0a10 	vmov	r0, s16
 8022122:	4621      	mov	r1, r4
 8022124:	f000 f9ee 	bl	8022504 <_Bfree>
 8022128:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802212a:	2300      	movs	r3, #0
 802212c:	6013      	str	r3, [r2, #0]
 802212e:	2750      	movs	r7, #80	; 0x50
 8022130:	e713      	b.n	8021f5a <__gethex+0x12a>
 8022132:	bf00      	nop
 8022134:	080241a8 	.word	0x080241a8
 8022138:	0802412c 	.word	0x0802412c
 802213c:	0802413d 	.word	0x0802413d
 8022140:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022142:	2b00      	cmp	r3, #0
 8022144:	d1eb      	bne.n	802211e <__gethex+0x2ee>
 8022146:	e7d8      	b.n	80220fa <__gethex+0x2ca>
 8022148:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802214a:	2b00      	cmp	r3, #0
 802214c:	d1d5      	bne.n	80220fa <__gethex+0x2ca>
 802214e:	e7e6      	b.n	802211e <__gethex+0x2ee>
 8022150:	1e6f      	subs	r7, r5, #1
 8022152:	f1ba 0f00 	cmp.w	sl, #0
 8022156:	d131      	bne.n	80221bc <__gethex+0x38c>
 8022158:	b127      	cbz	r7, 8022164 <__gethex+0x334>
 802215a:	4639      	mov	r1, r7
 802215c:	4620      	mov	r0, r4
 802215e:	f000 fe2b 	bl	8022db8 <__any_on>
 8022162:	4682      	mov	sl, r0
 8022164:	117b      	asrs	r3, r7, #5
 8022166:	2101      	movs	r1, #1
 8022168:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 802216c:	f007 071f 	and.w	r7, r7, #31
 8022170:	fa01 f707 	lsl.w	r7, r1, r7
 8022174:	421f      	tst	r7, r3
 8022176:	4629      	mov	r1, r5
 8022178:	4620      	mov	r0, r4
 802217a:	bf18      	it	ne
 802217c:	f04a 0a02 	orrne.w	sl, sl, #2
 8022180:	1b76      	subs	r6, r6, r5
 8022182:	f7ff fded 	bl	8021d60 <rshift>
 8022186:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802218a:	2702      	movs	r7, #2
 802218c:	f1ba 0f00 	cmp.w	sl, #0
 8022190:	d048      	beq.n	8022224 <__gethex+0x3f4>
 8022192:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8022196:	2b02      	cmp	r3, #2
 8022198:	d015      	beq.n	80221c6 <__gethex+0x396>
 802219a:	2b03      	cmp	r3, #3
 802219c:	d017      	beq.n	80221ce <__gethex+0x39e>
 802219e:	2b01      	cmp	r3, #1
 80221a0:	d109      	bne.n	80221b6 <__gethex+0x386>
 80221a2:	f01a 0f02 	tst.w	sl, #2
 80221a6:	d006      	beq.n	80221b6 <__gethex+0x386>
 80221a8:	f8d9 0000 	ldr.w	r0, [r9]
 80221ac:	ea4a 0a00 	orr.w	sl, sl, r0
 80221b0:	f01a 0f01 	tst.w	sl, #1
 80221b4:	d10e      	bne.n	80221d4 <__gethex+0x3a4>
 80221b6:	f047 0710 	orr.w	r7, r7, #16
 80221ba:	e033      	b.n	8022224 <__gethex+0x3f4>
 80221bc:	f04f 0a01 	mov.w	sl, #1
 80221c0:	e7d0      	b.n	8022164 <__gethex+0x334>
 80221c2:	2701      	movs	r7, #1
 80221c4:	e7e2      	b.n	802218c <__gethex+0x35c>
 80221c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80221c8:	f1c3 0301 	rsb	r3, r3, #1
 80221cc:	9315      	str	r3, [sp, #84]	; 0x54
 80221ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80221d0:	2b00      	cmp	r3, #0
 80221d2:	d0f0      	beq.n	80221b6 <__gethex+0x386>
 80221d4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80221d8:	f104 0314 	add.w	r3, r4, #20
 80221dc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80221e0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80221e4:	f04f 0c00 	mov.w	ip, #0
 80221e8:	4618      	mov	r0, r3
 80221ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80221ee:	f1b2 3fff 	cmp.w	r2, #4294967295
 80221f2:	d01c      	beq.n	802222e <__gethex+0x3fe>
 80221f4:	3201      	adds	r2, #1
 80221f6:	6002      	str	r2, [r0, #0]
 80221f8:	2f02      	cmp	r7, #2
 80221fa:	f104 0314 	add.w	r3, r4, #20
 80221fe:	d13f      	bne.n	8022280 <__gethex+0x450>
 8022200:	f8d8 2000 	ldr.w	r2, [r8]
 8022204:	3a01      	subs	r2, #1
 8022206:	42b2      	cmp	r2, r6
 8022208:	d10a      	bne.n	8022220 <__gethex+0x3f0>
 802220a:	1171      	asrs	r1, r6, #5
 802220c:	2201      	movs	r2, #1
 802220e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8022212:	f006 061f 	and.w	r6, r6, #31
 8022216:	fa02 f606 	lsl.w	r6, r2, r6
 802221a:	421e      	tst	r6, r3
 802221c:	bf18      	it	ne
 802221e:	4617      	movne	r7, r2
 8022220:	f047 0720 	orr.w	r7, r7, #32
 8022224:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022226:	601c      	str	r4, [r3, #0]
 8022228:	9b04      	ldr	r3, [sp, #16]
 802222a:	601d      	str	r5, [r3, #0]
 802222c:	e695      	b.n	8021f5a <__gethex+0x12a>
 802222e:	4299      	cmp	r1, r3
 8022230:	f843 cc04 	str.w	ip, [r3, #-4]
 8022234:	d8d8      	bhi.n	80221e8 <__gethex+0x3b8>
 8022236:	68a3      	ldr	r3, [r4, #8]
 8022238:	459b      	cmp	fp, r3
 802223a:	db19      	blt.n	8022270 <__gethex+0x440>
 802223c:	6861      	ldr	r1, [r4, #4]
 802223e:	ee18 0a10 	vmov	r0, s16
 8022242:	3101      	adds	r1, #1
 8022244:	f000 f91e 	bl	8022484 <_Balloc>
 8022248:	4681      	mov	r9, r0
 802224a:	b918      	cbnz	r0, 8022254 <__gethex+0x424>
 802224c:	4b1a      	ldr	r3, [pc, #104]	; (80222b8 <__gethex+0x488>)
 802224e:	4602      	mov	r2, r0
 8022250:	2184      	movs	r1, #132	; 0x84
 8022252:	e6a8      	b.n	8021fa6 <__gethex+0x176>
 8022254:	6922      	ldr	r2, [r4, #16]
 8022256:	3202      	adds	r2, #2
 8022258:	f104 010c 	add.w	r1, r4, #12
 802225c:	0092      	lsls	r2, r2, #2
 802225e:	300c      	adds	r0, #12
 8022260:	f7fd f86a 	bl	801f338 <memcpy>
 8022264:	4621      	mov	r1, r4
 8022266:	ee18 0a10 	vmov	r0, s16
 802226a:	f000 f94b 	bl	8022504 <_Bfree>
 802226e:	464c      	mov	r4, r9
 8022270:	6923      	ldr	r3, [r4, #16]
 8022272:	1c5a      	adds	r2, r3, #1
 8022274:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8022278:	6122      	str	r2, [r4, #16]
 802227a:	2201      	movs	r2, #1
 802227c:	615a      	str	r2, [r3, #20]
 802227e:	e7bb      	b.n	80221f8 <__gethex+0x3c8>
 8022280:	6922      	ldr	r2, [r4, #16]
 8022282:	455a      	cmp	r2, fp
 8022284:	dd0b      	ble.n	802229e <__gethex+0x46e>
 8022286:	2101      	movs	r1, #1
 8022288:	4620      	mov	r0, r4
 802228a:	f7ff fd69 	bl	8021d60 <rshift>
 802228e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8022292:	3501      	adds	r5, #1
 8022294:	42ab      	cmp	r3, r5
 8022296:	f6ff aed0 	blt.w	802203a <__gethex+0x20a>
 802229a:	2701      	movs	r7, #1
 802229c:	e7c0      	b.n	8022220 <__gethex+0x3f0>
 802229e:	f016 061f 	ands.w	r6, r6, #31
 80222a2:	d0fa      	beq.n	802229a <__gethex+0x46a>
 80222a4:	449a      	add	sl, r3
 80222a6:	f1c6 0620 	rsb	r6, r6, #32
 80222aa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80222ae:	f000 f9df 	bl	8022670 <__hi0bits>
 80222b2:	42b0      	cmp	r0, r6
 80222b4:	dbe7      	blt.n	8022286 <__gethex+0x456>
 80222b6:	e7f0      	b.n	802229a <__gethex+0x46a>
 80222b8:	0802412c 	.word	0x0802412c

080222bc <L_shift>:
 80222bc:	f1c2 0208 	rsb	r2, r2, #8
 80222c0:	0092      	lsls	r2, r2, #2
 80222c2:	b570      	push	{r4, r5, r6, lr}
 80222c4:	f1c2 0620 	rsb	r6, r2, #32
 80222c8:	6843      	ldr	r3, [r0, #4]
 80222ca:	6804      	ldr	r4, [r0, #0]
 80222cc:	fa03 f506 	lsl.w	r5, r3, r6
 80222d0:	432c      	orrs	r4, r5
 80222d2:	40d3      	lsrs	r3, r2
 80222d4:	6004      	str	r4, [r0, #0]
 80222d6:	f840 3f04 	str.w	r3, [r0, #4]!
 80222da:	4288      	cmp	r0, r1
 80222dc:	d3f4      	bcc.n	80222c8 <L_shift+0xc>
 80222de:	bd70      	pop	{r4, r5, r6, pc}

080222e0 <__match>:
 80222e0:	b530      	push	{r4, r5, lr}
 80222e2:	6803      	ldr	r3, [r0, #0]
 80222e4:	3301      	adds	r3, #1
 80222e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80222ea:	b914      	cbnz	r4, 80222f2 <__match+0x12>
 80222ec:	6003      	str	r3, [r0, #0]
 80222ee:	2001      	movs	r0, #1
 80222f0:	bd30      	pop	{r4, r5, pc}
 80222f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80222f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80222fa:	2d19      	cmp	r5, #25
 80222fc:	bf98      	it	ls
 80222fe:	3220      	addls	r2, #32
 8022300:	42a2      	cmp	r2, r4
 8022302:	d0f0      	beq.n	80222e6 <__match+0x6>
 8022304:	2000      	movs	r0, #0
 8022306:	e7f3      	b.n	80222f0 <__match+0x10>

08022308 <__hexnan>:
 8022308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802230c:	680b      	ldr	r3, [r1, #0]
 802230e:	6801      	ldr	r1, [r0, #0]
 8022310:	115e      	asrs	r6, r3, #5
 8022312:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8022316:	f013 031f 	ands.w	r3, r3, #31
 802231a:	b087      	sub	sp, #28
 802231c:	bf18      	it	ne
 802231e:	3604      	addne	r6, #4
 8022320:	2500      	movs	r5, #0
 8022322:	1f37      	subs	r7, r6, #4
 8022324:	4682      	mov	sl, r0
 8022326:	4690      	mov	r8, r2
 8022328:	9301      	str	r3, [sp, #4]
 802232a:	f846 5c04 	str.w	r5, [r6, #-4]
 802232e:	46b9      	mov	r9, r7
 8022330:	463c      	mov	r4, r7
 8022332:	9502      	str	r5, [sp, #8]
 8022334:	46ab      	mov	fp, r5
 8022336:	784a      	ldrb	r2, [r1, #1]
 8022338:	1c4b      	adds	r3, r1, #1
 802233a:	9303      	str	r3, [sp, #12]
 802233c:	b342      	cbz	r2, 8022390 <__hexnan+0x88>
 802233e:	4610      	mov	r0, r2
 8022340:	9105      	str	r1, [sp, #20]
 8022342:	9204      	str	r2, [sp, #16]
 8022344:	f7ff fd5e 	bl	8021e04 <__hexdig_fun>
 8022348:	2800      	cmp	r0, #0
 802234a:	d14f      	bne.n	80223ec <__hexnan+0xe4>
 802234c:	9a04      	ldr	r2, [sp, #16]
 802234e:	9905      	ldr	r1, [sp, #20]
 8022350:	2a20      	cmp	r2, #32
 8022352:	d818      	bhi.n	8022386 <__hexnan+0x7e>
 8022354:	9b02      	ldr	r3, [sp, #8]
 8022356:	459b      	cmp	fp, r3
 8022358:	dd13      	ble.n	8022382 <__hexnan+0x7a>
 802235a:	454c      	cmp	r4, r9
 802235c:	d206      	bcs.n	802236c <__hexnan+0x64>
 802235e:	2d07      	cmp	r5, #7
 8022360:	dc04      	bgt.n	802236c <__hexnan+0x64>
 8022362:	462a      	mov	r2, r5
 8022364:	4649      	mov	r1, r9
 8022366:	4620      	mov	r0, r4
 8022368:	f7ff ffa8 	bl	80222bc <L_shift>
 802236c:	4544      	cmp	r4, r8
 802236e:	d950      	bls.n	8022412 <__hexnan+0x10a>
 8022370:	2300      	movs	r3, #0
 8022372:	f1a4 0904 	sub.w	r9, r4, #4
 8022376:	f844 3c04 	str.w	r3, [r4, #-4]
 802237a:	f8cd b008 	str.w	fp, [sp, #8]
 802237e:	464c      	mov	r4, r9
 8022380:	461d      	mov	r5, r3
 8022382:	9903      	ldr	r1, [sp, #12]
 8022384:	e7d7      	b.n	8022336 <__hexnan+0x2e>
 8022386:	2a29      	cmp	r2, #41	; 0x29
 8022388:	d156      	bne.n	8022438 <__hexnan+0x130>
 802238a:	3102      	adds	r1, #2
 802238c:	f8ca 1000 	str.w	r1, [sl]
 8022390:	f1bb 0f00 	cmp.w	fp, #0
 8022394:	d050      	beq.n	8022438 <__hexnan+0x130>
 8022396:	454c      	cmp	r4, r9
 8022398:	d206      	bcs.n	80223a8 <__hexnan+0xa0>
 802239a:	2d07      	cmp	r5, #7
 802239c:	dc04      	bgt.n	80223a8 <__hexnan+0xa0>
 802239e:	462a      	mov	r2, r5
 80223a0:	4649      	mov	r1, r9
 80223a2:	4620      	mov	r0, r4
 80223a4:	f7ff ff8a 	bl	80222bc <L_shift>
 80223a8:	4544      	cmp	r4, r8
 80223aa:	d934      	bls.n	8022416 <__hexnan+0x10e>
 80223ac:	f1a8 0204 	sub.w	r2, r8, #4
 80223b0:	4623      	mov	r3, r4
 80223b2:	f853 1b04 	ldr.w	r1, [r3], #4
 80223b6:	f842 1f04 	str.w	r1, [r2, #4]!
 80223ba:	429f      	cmp	r7, r3
 80223bc:	d2f9      	bcs.n	80223b2 <__hexnan+0xaa>
 80223be:	1b3b      	subs	r3, r7, r4
 80223c0:	f023 0303 	bic.w	r3, r3, #3
 80223c4:	3304      	adds	r3, #4
 80223c6:	3401      	adds	r4, #1
 80223c8:	3e03      	subs	r6, #3
 80223ca:	42b4      	cmp	r4, r6
 80223cc:	bf88      	it	hi
 80223ce:	2304      	movhi	r3, #4
 80223d0:	4443      	add	r3, r8
 80223d2:	2200      	movs	r2, #0
 80223d4:	f843 2b04 	str.w	r2, [r3], #4
 80223d8:	429f      	cmp	r7, r3
 80223da:	d2fb      	bcs.n	80223d4 <__hexnan+0xcc>
 80223dc:	683b      	ldr	r3, [r7, #0]
 80223de:	b91b      	cbnz	r3, 80223e8 <__hexnan+0xe0>
 80223e0:	4547      	cmp	r7, r8
 80223e2:	d127      	bne.n	8022434 <__hexnan+0x12c>
 80223e4:	2301      	movs	r3, #1
 80223e6:	603b      	str	r3, [r7, #0]
 80223e8:	2005      	movs	r0, #5
 80223ea:	e026      	b.n	802243a <__hexnan+0x132>
 80223ec:	3501      	adds	r5, #1
 80223ee:	2d08      	cmp	r5, #8
 80223f0:	f10b 0b01 	add.w	fp, fp, #1
 80223f4:	dd06      	ble.n	8022404 <__hexnan+0xfc>
 80223f6:	4544      	cmp	r4, r8
 80223f8:	d9c3      	bls.n	8022382 <__hexnan+0x7a>
 80223fa:	2300      	movs	r3, #0
 80223fc:	f844 3c04 	str.w	r3, [r4, #-4]
 8022400:	2501      	movs	r5, #1
 8022402:	3c04      	subs	r4, #4
 8022404:	6822      	ldr	r2, [r4, #0]
 8022406:	f000 000f 	and.w	r0, r0, #15
 802240a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 802240e:	6022      	str	r2, [r4, #0]
 8022410:	e7b7      	b.n	8022382 <__hexnan+0x7a>
 8022412:	2508      	movs	r5, #8
 8022414:	e7b5      	b.n	8022382 <__hexnan+0x7a>
 8022416:	9b01      	ldr	r3, [sp, #4]
 8022418:	2b00      	cmp	r3, #0
 802241a:	d0df      	beq.n	80223dc <__hexnan+0xd4>
 802241c:	f04f 32ff 	mov.w	r2, #4294967295
 8022420:	f1c3 0320 	rsb	r3, r3, #32
 8022424:	fa22 f303 	lsr.w	r3, r2, r3
 8022428:	f856 2c04 	ldr.w	r2, [r6, #-4]
 802242c:	401a      	ands	r2, r3
 802242e:	f846 2c04 	str.w	r2, [r6, #-4]
 8022432:	e7d3      	b.n	80223dc <__hexnan+0xd4>
 8022434:	3f04      	subs	r7, #4
 8022436:	e7d1      	b.n	80223dc <__hexnan+0xd4>
 8022438:	2004      	movs	r0, #4
 802243a:	b007      	add	sp, #28
 802243c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022440 <_localeconv_r>:
 8022440:	4800      	ldr	r0, [pc, #0]	; (8022444 <_localeconv_r+0x4>)
 8022442:	4770      	bx	lr
 8022444:	20000188 	.word	0x20000188

08022448 <__ascii_mbtowc>:
 8022448:	b082      	sub	sp, #8
 802244a:	b901      	cbnz	r1, 802244e <__ascii_mbtowc+0x6>
 802244c:	a901      	add	r1, sp, #4
 802244e:	b142      	cbz	r2, 8022462 <__ascii_mbtowc+0x1a>
 8022450:	b14b      	cbz	r3, 8022466 <__ascii_mbtowc+0x1e>
 8022452:	7813      	ldrb	r3, [r2, #0]
 8022454:	600b      	str	r3, [r1, #0]
 8022456:	7812      	ldrb	r2, [r2, #0]
 8022458:	1e10      	subs	r0, r2, #0
 802245a:	bf18      	it	ne
 802245c:	2001      	movne	r0, #1
 802245e:	b002      	add	sp, #8
 8022460:	4770      	bx	lr
 8022462:	4610      	mov	r0, r2
 8022464:	e7fb      	b.n	802245e <__ascii_mbtowc+0x16>
 8022466:	f06f 0001 	mvn.w	r0, #1
 802246a:	e7f8      	b.n	802245e <__ascii_mbtowc+0x16>

0802246c <__malloc_lock>:
 802246c:	4801      	ldr	r0, [pc, #4]	; (8022474 <__malloc_lock+0x8>)
 802246e:	f000 be88 	b.w	8023182 <__retarget_lock_acquire_recursive>
 8022472:	bf00      	nop
 8022474:	200003f8 	.word	0x200003f8

08022478 <__malloc_unlock>:
 8022478:	4801      	ldr	r0, [pc, #4]	; (8022480 <__malloc_unlock+0x8>)
 802247a:	f000 be83 	b.w	8023184 <__retarget_lock_release_recursive>
 802247e:	bf00      	nop
 8022480:	200003f8 	.word	0x200003f8

08022484 <_Balloc>:
 8022484:	b570      	push	{r4, r5, r6, lr}
 8022486:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8022488:	4604      	mov	r4, r0
 802248a:	460d      	mov	r5, r1
 802248c:	b976      	cbnz	r6, 80224ac <_Balloc+0x28>
 802248e:	2010      	movs	r0, #16
 8022490:	f7fc ff42 	bl	801f318 <malloc>
 8022494:	4602      	mov	r2, r0
 8022496:	6260      	str	r0, [r4, #36]	; 0x24
 8022498:	b920      	cbnz	r0, 80224a4 <_Balloc+0x20>
 802249a:	4b18      	ldr	r3, [pc, #96]	; (80224fc <_Balloc+0x78>)
 802249c:	4818      	ldr	r0, [pc, #96]	; (8022500 <_Balloc+0x7c>)
 802249e:	2166      	movs	r1, #102	; 0x66
 80224a0:	f000 fe3e 	bl	8023120 <__assert_func>
 80224a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80224a8:	6006      	str	r6, [r0, #0]
 80224aa:	60c6      	str	r6, [r0, #12]
 80224ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80224ae:	68f3      	ldr	r3, [r6, #12]
 80224b0:	b183      	cbz	r3, 80224d4 <_Balloc+0x50>
 80224b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80224b4:	68db      	ldr	r3, [r3, #12]
 80224b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80224ba:	b9b8      	cbnz	r0, 80224ec <_Balloc+0x68>
 80224bc:	2101      	movs	r1, #1
 80224be:	fa01 f605 	lsl.w	r6, r1, r5
 80224c2:	1d72      	adds	r2, r6, #5
 80224c4:	0092      	lsls	r2, r2, #2
 80224c6:	4620      	mov	r0, r4
 80224c8:	f000 fc97 	bl	8022dfa <_calloc_r>
 80224cc:	b160      	cbz	r0, 80224e8 <_Balloc+0x64>
 80224ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80224d2:	e00e      	b.n	80224f2 <_Balloc+0x6e>
 80224d4:	2221      	movs	r2, #33	; 0x21
 80224d6:	2104      	movs	r1, #4
 80224d8:	4620      	mov	r0, r4
 80224da:	f000 fc8e 	bl	8022dfa <_calloc_r>
 80224de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80224e0:	60f0      	str	r0, [r6, #12]
 80224e2:	68db      	ldr	r3, [r3, #12]
 80224e4:	2b00      	cmp	r3, #0
 80224e6:	d1e4      	bne.n	80224b2 <_Balloc+0x2e>
 80224e8:	2000      	movs	r0, #0
 80224ea:	bd70      	pop	{r4, r5, r6, pc}
 80224ec:	6802      	ldr	r2, [r0, #0]
 80224ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80224f2:	2300      	movs	r3, #0
 80224f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80224f8:	e7f7      	b.n	80224ea <_Balloc+0x66>
 80224fa:	bf00      	nop
 80224fc:	080240b6 	.word	0x080240b6
 8022500:	080241bc 	.word	0x080241bc

08022504 <_Bfree>:
 8022504:	b570      	push	{r4, r5, r6, lr}
 8022506:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8022508:	4605      	mov	r5, r0
 802250a:	460c      	mov	r4, r1
 802250c:	b976      	cbnz	r6, 802252c <_Bfree+0x28>
 802250e:	2010      	movs	r0, #16
 8022510:	f7fc ff02 	bl	801f318 <malloc>
 8022514:	4602      	mov	r2, r0
 8022516:	6268      	str	r0, [r5, #36]	; 0x24
 8022518:	b920      	cbnz	r0, 8022524 <_Bfree+0x20>
 802251a:	4b09      	ldr	r3, [pc, #36]	; (8022540 <_Bfree+0x3c>)
 802251c:	4809      	ldr	r0, [pc, #36]	; (8022544 <_Bfree+0x40>)
 802251e:	218a      	movs	r1, #138	; 0x8a
 8022520:	f000 fdfe 	bl	8023120 <__assert_func>
 8022524:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8022528:	6006      	str	r6, [r0, #0]
 802252a:	60c6      	str	r6, [r0, #12]
 802252c:	b13c      	cbz	r4, 802253e <_Bfree+0x3a>
 802252e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8022530:	6862      	ldr	r2, [r4, #4]
 8022532:	68db      	ldr	r3, [r3, #12]
 8022534:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8022538:	6021      	str	r1, [r4, #0]
 802253a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802253e:	bd70      	pop	{r4, r5, r6, pc}
 8022540:	080240b6 	.word	0x080240b6
 8022544:	080241bc 	.word	0x080241bc

08022548 <__multadd>:
 8022548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802254c:	690e      	ldr	r6, [r1, #16]
 802254e:	4607      	mov	r7, r0
 8022550:	4698      	mov	r8, r3
 8022552:	460c      	mov	r4, r1
 8022554:	f101 0014 	add.w	r0, r1, #20
 8022558:	2300      	movs	r3, #0
 802255a:	6805      	ldr	r5, [r0, #0]
 802255c:	b2a9      	uxth	r1, r5
 802255e:	fb02 8101 	mla	r1, r2, r1, r8
 8022562:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8022566:	0c2d      	lsrs	r5, r5, #16
 8022568:	fb02 c505 	mla	r5, r2, r5, ip
 802256c:	b289      	uxth	r1, r1
 802256e:	3301      	adds	r3, #1
 8022570:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8022574:	429e      	cmp	r6, r3
 8022576:	f840 1b04 	str.w	r1, [r0], #4
 802257a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 802257e:	dcec      	bgt.n	802255a <__multadd+0x12>
 8022580:	f1b8 0f00 	cmp.w	r8, #0
 8022584:	d022      	beq.n	80225cc <__multadd+0x84>
 8022586:	68a3      	ldr	r3, [r4, #8]
 8022588:	42b3      	cmp	r3, r6
 802258a:	dc19      	bgt.n	80225c0 <__multadd+0x78>
 802258c:	6861      	ldr	r1, [r4, #4]
 802258e:	4638      	mov	r0, r7
 8022590:	3101      	adds	r1, #1
 8022592:	f7ff ff77 	bl	8022484 <_Balloc>
 8022596:	4605      	mov	r5, r0
 8022598:	b928      	cbnz	r0, 80225a6 <__multadd+0x5e>
 802259a:	4602      	mov	r2, r0
 802259c:	4b0d      	ldr	r3, [pc, #52]	; (80225d4 <__multadd+0x8c>)
 802259e:	480e      	ldr	r0, [pc, #56]	; (80225d8 <__multadd+0x90>)
 80225a0:	21b5      	movs	r1, #181	; 0xb5
 80225a2:	f000 fdbd 	bl	8023120 <__assert_func>
 80225a6:	6922      	ldr	r2, [r4, #16]
 80225a8:	3202      	adds	r2, #2
 80225aa:	f104 010c 	add.w	r1, r4, #12
 80225ae:	0092      	lsls	r2, r2, #2
 80225b0:	300c      	adds	r0, #12
 80225b2:	f7fc fec1 	bl	801f338 <memcpy>
 80225b6:	4621      	mov	r1, r4
 80225b8:	4638      	mov	r0, r7
 80225ba:	f7ff ffa3 	bl	8022504 <_Bfree>
 80225be:	462c      	mov	r4, r5
 80225c0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80225c4:	3601      	adds	r6, #1
 80225c6:	f8c3 8014 	str.w	r8, [r3, #20]
 80225ca:	6126      	str	r6, [r4, #16]
 80225cc:	4620      	mov	r0, r4
 80225ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80225d2:	bf00      	nop
 80225d4:	0802412c 	.word	0x0802412c
 80225d8:	080241bc 	.word	0x080241bc

080225dc <__s2b>:
 80225dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80225e0:	460c      	mov	r4, r1
 80225e2:	4615      	mov	r5, r2
 80225e4:	461f      	mov	r7, r3
 80225e6:	2209      	movs	r2, #9
 80225e8:	3308      	adds	r3, #8
 80225ea:	4606      	mov	r6, r0
 80225ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80225f0:	2100      	movs	r1, #0
 80225f2:	2201      	movs	r2, #1
 80225f4:	429a      	cmp	r2, r3
 80225f6:	db09      	blt.n	802260c <__s2b+0x30>
 80225f8:	4630      	mov	r0, r6
 80225fa:	f7ff ff43 	bl	8022484 <_Balloc>
 80225fe:	b940      	cbnz	r0, 8022612 <__s2b+0x36>
 8022600:	4602      	mov	r2, r0
 8022602:	4b19      	ldr	r3, [pc, #100]	; (8022668 <__s2b+0x8c>)
 8022604:	4819      	ldr	r0, [pc, #100]	; (802266c <__s2b+0x90>)
 8022606:	21ce      	movs	r1, #206	; 0xce
 8022608:	f000 fd8a 	bl	8023120 <__assert_func>
 802260c:	0052      	lsls	r2, r2, #1
 802260e:	3101      	adds	r1, #1
 8022610:	e7f0      	b.n	80225f4 <__s2b+0x18>
 8022612:	9b08      	ldr	r3, [sp, #32]
 8022614:	6143      	str	r3, [r0, #20]
 8022616:	2d09      	cmp	r5, #9
 8022618:	f04f 0301 	mov.w	r3, #1
 802261c:	6103      	str	r3, [r0, #16]
 802261e:	dd16      	ble.n	802264e <__s2b+0x72>
 8022620:	f104 0909 	add.w	r9, r4, #9
 8022624:	46c8      	mov	r8, r9
 8022626:	442c      	add	r4, r5
 8022628:	f818 3b01 	ldrb.w	r3, [r8], #1
 802262c:	4601      	mov	r1, r0
 802262e:	3b30      	subs	r3, #48	; 0x30
 8022630:	220a      	movs	r2, #10
 8022632:	4630      	mov	r0, r6
 8022634:	f7ff ff88 	bl	8022548 <__multadd>
 8022638:	45a0      	cmp	r8, r4
 802263a:	d1f5      	bne.n	8022628 <__s2b+0x4c>
 802263c:	f1a5 0408 	sub.w	r4, r5, #8
 8022640:	444c      	add	r4, r9
 8022642:	1b2d      	subs	r5, r5, r4
 8022644:	1963      	adds	r3, r4, r5
 8022646:	42bb      	cmp	r3, r7
 8022648:	db04      	blt.n	8022654 <__s2b+0x78>
 802264a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802264e:	340a      	adds	r4, #10
 8022650:	2509      	movs	r5, #9
 8022652:	e7f6      	b.n	8022642 <__s2b+0x66>
 8022654:	f814 3b01 	ldrb.w	r3, [r4], #1
 8022658:	4601      	mov	r1, r0
 802265a:	3b30      	subs	r3, #48	; 0x30
 802265c:	220a      	movs	r2, #10
 802265e:	4630      	mov	r0, r6
 8022660:	f7ff ff72 	bl	8022548 <__multadd>
 8022664:	e7ee      	b.n	8022644 <__s2b+0x68>
 8022666:	bf00      	nop
 8022668:	0802412c 	.word	0x0802412c
 802266c:	080241bc 	.word	0x080241bc

08022670 <__hi0bits>:
 8022670:	0c03      	lsrs	r3, r0, #16
 8022672:	041b      	lsls	r3, r3, #16
 8022674:	b9d3      	cbnz	r3, 80226ac <__hi0bits+0x3c>
 8022676:	0400      	lsls	r0, r0, #16
 8022678:	2310      	movs	r3, #16
 802267a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802267e:	bf04      	itt	eq
 8022680:	0200      	lsleq	r0, r0, #8
 8022682:	3308      	addeq	r3, #8
 8022684:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8022688:	bf04      	itt	eq
 802268a:	0100      	lsleq	r0, r0, #4
 802268c:	3304      	addeq	r3, #4
 802268e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8022692:	bf04      	itt	eq
 8022694:	0080      	lsleq	r0, r0, #2
 8022696:	3302      	addeq	r3, #2
 8022698:	2800      	cmp	r0, #0
 802269a:	db05      	blt.n	80226a8 <__hi0bits+0x38>
 802269c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80226a0:	f103 0301 	add.w	r3, r3, #1
 80226a4:	bf08      	it	eq
 80226a6:	2320      	moveq	r3, #32
 80226a8:	4618      	mov	r0, r3
 80226aa:	4770      	bx	lr
 80226ac:	2300      	movs	r3, #0
 80226ae:	e7e4      	b.n	802267a <__hi0bits+0xa>

080226b0 <__lo0bits>:
 80226b0:	6803      	ldr	r3, [r0, #0]
 80226b2:	f013 0207 	ands.w	r2, r3, #7
 80226b6:	4601      	mov	r1, r0
 80226b8:	d00b      	beq.n	80226d2 <__lo0bits+0x22>
 80226ba:	07da      	lsls	r2, r3, #31
 80226bc:	d424      	bmi.n	8022708 <__lo0bits+0x58>
 80226be:	0798      	lsls	r0, r3, #30
 80226c0:	bf49      	itett	mi
 80226c2:	085b      	lsrmi	r3, r3, #1
 80226c4:	089b      	lsrpl	r3, r3, #2
 80226c6:	2001      	movmi	r0, #1
 80226c8:	600b      	strmi	r3, [r1, #0]
 80226ca:	bf5c      	itt	pl
 80226cc:	600b      	strpl	r3, [r1, #0]
 80226ce:	2002      	movpl	r0, #2
 80226d0:	4770      	bx	lr
 80226d2:	b298      	uxth	r0, r3
 80226d4:	b9b0      	cbnz	r0, 8022704 <__lo0bits+0x54>
 80226d6:	0c1b      	lsrs	r3, r3, #16
 80226d8:	2010      	movs	r0, #16
 80226da:	f013 0fff 	tst.w	r3, #255	; 0xff
 80226de:	bf04      	itt	eq
 80226e0:	0a1b      	lsreq	r3, r3, #8
 80226e2:	3008      	addeq	r0, #8
 80226e4:	071a      	lsls	r2, r3, #28
 80226e6:	bf04      	itt	eq
 80226e8:	091b      	lsreq	r3, r3, #4
 80226ea:	3004      	addeq	r0, #4
 80226ec:	079a      	lsls	r2, r3, #30
 80226ee:	bf04      	itt	eq
 80226f0:	089b      	lsreq	r3, r3, #2
 80226f2:	3002      	addeq	r0, #2
 80226f4:	07da      	lsls	r2, r3, #31
 80226f6:	d403      	bmi.n	8022700 <__lo0bits+0x50>
 80226f8:	085b      	lsrs	r3, r3, #1
 80226fa:	f100 0001 	add.w	r0, r0, #1
 80226fe:	d005      	beq.n	802270c <__lo0bits+0x5c>
 8022700:	600b      	str	r3, [r1, #0]
 8022702:	4770      	bx	lr
 8022704:	4610      	mov	r0, r2
 8022706:	e7e8      	b.n	80226da <__lo0bits+0x2a>
 8022708:	2000      	movs	r0, #0
 802270a:	4770      	bx	lr
 802270c:	2020      	movs	r0, #32
 802270e:	4770      	bx	lr

08022710 <__i2b>:
 8022710:	b510      	push	{r4, lr}
 8022712:	460c      	mov	r4, r1
 8022714:	2101      	movs	r1, #1
 8022716:	f7ff feb5 	bl	8022484 <_Balloc>
 802271a:	4602      	mov	r2, r0
 802271c:	b928      	cbnz	r0, 802272a <__i2b+0x1a>
 802271e:	4b05      	ldr	r3, [pc, #20]	; (8022734 <__i2b+0x24>)
 8022720:	4805      	ldr	r0, [pc, #20]	; (8022738 <__i2b+0x28>)
 8022722:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8022726:	f000 fcfb 	bl	8023120 <__assert_func>
 802272a:	2301      	movs	r3, #1
 802272c:	6144      	str	r4, [r0, #20]
 802272e:	6103      	str	r3, [r0, #16]
 8022730:	bd10      	pop	{r4, pc}
 8022732:	bf00      	nop
 8022734:	0802412c 	.word	0x0802412c
 8022738:	080241bc 	.word	0x080241bc

0802273c <__multiply>:
 802273c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022740:	4614      	mov	r4, r2
 8022742:	690a      	ldr	r2, [r1, #16]
 8022744:	6923      	ldr	r3, [r4, #16]
 8022746:	429a      	cmp	r2, r3
 8022748:	bfb8      	it	lt
 802274a:	460b      	movlt	r3, r1
 802274c:	460d      	mov	r5, r1
 802274e:	bfbc      	itt	lt
 8022750:	4625      	movlt	r5, r4
 8022752:	461c      	movlt	r4, r3
 8022754:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8022758:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802275c:	68ab      	ldr	r3, [r5, #8]
 802275e:	6869      	ldr	r1, [r5, #4]
 8022760:	eb0a 0709 	add.w	r7, sl, r9
 8022764:	42bb      	cmp	r3, r7
 8022766:	b085      	sub	sp, #20
 8022768:	bfb8      	it	lt
 802276a:	3101      	addlt	r1, #1
 802276c:	f7ff fe8a 	bl	8022484 <_Balloc>
 8022770:	b930      	cbnz	r0, 8022780 <__multiply+0x44>
 8022772:	4602      	mov	r2, r0
 8022774:	4b42      	ldr	r3, [pc, #264]	; (8022880 <__multiply+0x144>)
 8022776:	4843      	ldr	r0, [pc, #268]	; (8022884 <__multiply+0x148>)
 8022778:	f240 115d 	movw	r1, #349	; 0x15d
 802277c:	f000 fcd0 	bl	8023120 <__assert_func>
 8022780:	f100 0614 	add.w	r6, r0, #20
 8022784:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8022788:	4633      	mov	r3, r6
 802278a:	2200      	movs	r2, #0
 802278c:	4543      	cmp	r3, r8
 802278e:	d31e      	bcc.n	80227ce <__multiply+0x92>
 8022790:	f105 0c14 	add.w	ip, r5, #20
 8022794:	f104 0314 	add.w	r3, r4, #20
 8022798:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 802279c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80227a0:	9202      	str	r2, [sp, #8]
 80227a2:	ebac 0205 	sub.w	r2, ip, r5
 80227a6:	3a15      	subs	r2, #21
 80227a8:	f022 0203 	bic.w	r2, r2, #3
 80227ac:	3204      	adds	r2, #4
 80227ae:	f105 0115 	add.w	r1, r5, #21
 80227b2:	458c      	cmp	ip, r1
 80227b4:	bf38      	it	cc
 80227b6:	2204      	movcc	r2, #4
 80227b8:	9201      	str	r2, [sp, #4]
 80227ba:	9a02      	ldr	r2, [sp, #8]
 80227bc:	9303      	str	r3, [sp, #12]
 80227be:	429a      	cmp	r2, r3
 80227c0:	d808      	bhi.n	80227d4 <__multiply+0x98>
 80227c2:	2f00      	cmp	r7, #0
 80227c4:	dc55      	bgt.n	8022872 <__multiply+0x136>
 80227c6:	6107      	str	r7, [r0, #16]
 80227c8:	b005      	add	sp, #20
 80227ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80227ce:	f843 2b04 	str.w	r2, [r3], #4
 80227d2:	e7db      	b.n	802278c <__multiply+0x50>
 80227d4:	f8b3 a000 	ldrh.w	sl, [r3]
 80227d8:	f1ba 0f00 	cmp.w	sl, #0
 80227dc:	d020      	beq.n	8022820 <__multiply+0xe4>
 80227de:	f105 0e14 	add.w	lr, r5, #20
 80227e2:	46b1      	mov	r9, r6
 80227e4:	2200      	movs	r2, #0
 80227e6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80227ea:	f8d9 b000 	ldr.w	fp, [r9]
 80227ee:	b2a1      	uxth	r1, r4
 80227f0:	fa1f fb8b 	uxth.w	fp, fp
 80227f4:	fb0a b101 	mla	r1, sl, r1, fp
 80227f8:	4411      	add	r1, r2
 80227fa:	f8d9 2000 	ldr.w	r2, [r9]
 80227fe:	0c24      	lsrs	r4, r4, #16
 8022800:	0c12      	lsrs	r2, r2, #16
 8022802:	fb0a 2404 	mla	r4, sl, r4, r2
 8022806:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 802280a:	b289      	uxth	r1, r1
 802280c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8022810:	45f4      	cmp	ip, lr
 8022812:	f849 1b04 	str.w	r1, [r9], #4
 8022816:	ea4f 4214 	mov.w	r2, r4, lsr #16
 802281a:	d8e4      	bhi.n	80227e6 <__multiply+0xaa>
 802281c:	9901      	ldr	r1, [sp, #4]
 802281e:	5072      	str	r2, [r6, r1]
 8022820:	9a03      	ldr	r2, [sp, #12]
 8022822:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8022826:	3304      	adds	r3, #4
 8022828:	f1b9 0f00 	cmp.w	r9, #0
 802282c:	d01f      	beq.n	802286e <__multiply+0x132>
 802282e:	6834      	ldr	r4, [r6, #0]
 8022830:	f105 0114 	add.w	r1, r5, #20
 8022834:	46b6      	mov	lr, r6
 8022836:	f04f 0a00 	mov.w	sl, #0
 802283a:	880a      	ldrh	r2, [r1, #0]
 802283c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8022840:	fb09 b202 	mla	r2, r9, r2, fp
 8022844:	4492      	add	sl, r2
 8022846:	b2a4      	uxth	r4, r4
 8022848:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 802284c:	f84e 4b04 	str.w	r4, [lr], #4
 8022850:	f851 4b04 	ldr.w	r4, [r1], #4
 8022854:	f8be 2000 	ldrh.w	r2, [lr]
 8022858:	0c24      	lsrs	r4, r4, #16
 802285a:	fb09 2404 	mla	r4, r9, r4, r2
 802285e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8022862:	458c      	cmp	ip, r1
 8022864:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8022868:	d8e7      	bhi.n	802283a <__multiply+0xfe>
 802286a:	9a01      	ldr	r2, [sp, #4]
 802286c:	50b4      	str	r4, [r6, r2]
 802286e:	3604      	adds	r6, #4
 8022870:	e7a3      	b.n	80227ba <__multiply+0x7e>
 8022872:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8022876:	2b00      	cmp	r3, #0
 8022878:	d1a5      	bne.n	80227c6 <__multiply+0x8a>
 802287a:	3f01      	subs	r7, #1
 802287c:	e7a1      	b.n	80227c2 <__multiply+0x86>
 802287e:	bf00      	nop
 8022880:	0802412c 	.word	0x0802412c
 8022884:	080241bc 	.word	0x080241bc

08022888 <__pow5mult>:
 8022888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802288c:	4615      	mov	r5, r2
 802288e:	f012 0203 	ands.w	r2, r2, #3
 8022892:	4606      	mov	r6, r0
 8022894:	460f      	mov	r7, r1
 8022896:	d007      	beq.n	80228a8 <__pow5mult+0x20>
 8022898:	4c25      	ldr	r4, [pc, #148]	; (8022930 <__pow5mult+0xa8>)
 802289a:	3a01      	subs	r2, #1
 802289c:	2300      	movs	r3, #0
 802289e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80228a2:	f7ff fe51 	bl	8022548 <__multadd>
 80228a6:	4607      	mov	r7, r0
 80228a8:	10ad      	asrs	r5, r5, #2
 80228aa:	d03d      	beq.n	8022928 <__pow5mult+0xa0>
 80228ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80228ae:	b97c      	cbnz	r4, 80228d0 <__pow5mult+0x48>
 80228b0:	2010      	movs	r0, #16
 80228b2:	f7fc fd31 	bl	801f318 <malloc>
 80228b6:	4602      	mov	r2, r0
 80228b8:	6270      	str	r0, [r6, #36]	; 0x24
 80228ba:	b928      	cbnz	r0, 80228c8 <__pow5mult+0x40>
 80228bc:	4b1d      	ldr	r3, [pc, #116]	; (8022934 <__pow5mult+0xac>)
 80228be:	481e      	ldr	r0, [pc, #120]	; (8022938 <__pow5mult+0xb0>)
 80228c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80228c4:	f000 fc2c 	bl	8023120 <__assert_func>
 80228c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80228cc:	6004      	str	r4, [r0, #0]
 80228ce:	60c4      	str	r4, [r0, #12]
 80228d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80228d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80228d8:	b94c      	cbnz	r4, 80228ee <__pow5mult+0x66>
 80228da:	f240 2171 	movw	r1, #625	; 0x271
 80228de:	4630      	mov	r0, r6
 80228e0:	f7ff ff16 	bl	8022710 <__i2b>
 80228e4:	2300      	movs	r3, #0
 80228e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80228ea:	4604      	mov	r4, r0
 80228ec:	6003      	str	r3, [r0, #0]
 80228ee:	f04f 0900 	mov.w	r9, #0
 80228f2:	07eb      	lsls	r3, r5, #31
 80228f4:	d50a      	bpl.n	802290c <__pow5mult+0x84>
 80228f6:	4639      	mov	r1, r7
 80228f8:	4622      	mov	r2, r4
 80228fa:	4630      	mov	r0, r6
 80228fc:	f7ff ff1e 	bl	802273c <__multiply>
 8022900:	4639      	mov	r1, r7
 8022902:	4680      	mov	r8, r0
 8022904:	4630      	mov	r0, r6
 8022906:	f7ff fdfd 	bl	8022504 <_Bfree>
 802290a:	4647      	mov	r7, r8
 802290c:	106d      	asrs	r5, r5, #1
 802290e:	d00b      	beq.n	8022928 <__pow5mult+0xa0>
 8022910:	6820      	ldr	r0, [r4, #0]
 8022912:	b938      	cbnz	r0, 8022924 <__pow5mult+0x9c>
 8022914:	4622      	mov	r2, r4
 8022916:	4621      	mov	r1, r4
 8022918:	4630      	mov	r0, r6
 802291a:	f7ff ff0f 	bl	802273c <__multiply>
 802291e:	6020      	str	r0, [r4, #0]
 8022920:	f8c0 9000 	str.w	r9, [r0]
 8022924:	4604      	mov	r4, r0
 8022926:	e7e4      	b.n	80228f2 <__pow5mult+0x6a>
 8022928:	4638      	mov	r0, r7
 802292a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802292e:	bf00      	nop
 8022930:	08024310 	.word	0x08024310
 8022934:	080240b6 	.word	0x080240b6
 8022938:	080241bc 	.word	0x080241bc

0802293c <__lshift>:
 802293c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022940:	460c      	mov	r4, r1
 8022942:	6849      	ldr	r1, [r1, #4]
 8022944:	6923      	ldr	r3, [r4, #16]
 8022946:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802294a:	68a3      	ldr	r3, [r4, #8]
 802294c:	4607      	mov	r7, r0
 802294e:	4691      	mov	r9, r2
 8022950:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8022954:	f108 0601 	add.w	r6, r8, #1
 8022958:	42b3      	cmp	r3, r6
 802295a:	db0b      	blt.n	8022974 <__lshift+0x38>
 802295c:	4638      	mov	r0, r7
 802295e:	f7ff fd91 	bl	8022484 <_Balloc>
 8022962:	4605      	mov	r5, r0
 8022964:	b948      	cbnz	r0, 802297a <__lshift+0x3e>
 8022966:	4602      	mov	r2, r0
 8022968:	4b28      	ldr	r3, [pc, #160]	; (8022a0c <__lshift+0xd0>)
 802296a:	4829      	ldr	r0, [pc, #164]	; (8022a10 <__lshift+0xd4>)
 802296c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8022970:	f000 fbd6 	bl	8023120 <__assert_func>
 8022974:	3101      	adds	r1, #1
 8022976:	005b      	lsls	r3, r3, #1
 8022978:	e7ee      	b.n	8022958 <__lshift+0x1c>
 802297a:	2300      	movs	r3, #0
 802297c:	f100 0114 	add.w	r1, r0, #20
 8022980:	f100 0210 	add.w	r2, r0, #16
 8022984:	4618      	mov	r0, r3
 8022986:	4553      	cmp	r3, sl
 8022988:	db33      	blt.n	80229f2 <__lshift+0xb6>
 802298a:	6920      	ldr	r0, [r4, #16]
 802298c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8022990:	f104 0314 	add.w	r3, r4, #20
 8022994:	f019 091f 	ands.w	r9, r9, #31
 8022998:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802299c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80229a0:	d02b      	beq.n	80229fa <__lshift+0xbe>
 80229a2:	f1c9 0e20 	rsb	lr, r9, #32
 80229a6:	468a      	mov	sl, r1
 80229a8:	2200      	movs	r2, #0
 80229aa:	6818      	ldr	r0, [r3, #0]
 80229ac:	fa00 f009 	lsl.w	r0, r0, r9
 80229b0:	4302      	orrs	r2, r0
 80229b2:	f84a 2b04 	str.w	r2, [sl], #4
 80229b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80229ba:	459c      	cmp	ip, r3
 80229bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80229c0:	d8f3      	bhi.n	80229aa <__lshift+0x6e>
 80229c2:	ebac 0304 	sub.w	r3, ip, r4
 80229c6:	3b15      	subs	r3, #21
 80229c8:	f023 0303 	bic.w	r3, r3, #3
 80229cc:	3304      	adds	r3, #4
 80229ce:	f104 0015 	add.w	r0, r4, #21
 80229d2:	4584      	cmp	ip, r0
 80229d4:	bf38      	it	cc
 80229d6:	2304      	movcc	r3, #4
 80229d8:	50ca      	str	r2, [r1, r3]
 80229da:	b10a      	cbz	r2, 80229e0 <__lshift+0xa4>
 80229dc:	f108 0602 	add.w	r6, r8, #2
 80229e0:	3e01      	subs	r6, #1
 80229e2:	4638      	mov	r0, r7
 80229e4:	612e      	str	r6, [r5, #16]
 80229e6:	4621      	mov	r1, r4
 80229e8:	f7ff fd8c 	bl	8022504 <_Bfree>
 80229ec:	4628      	mov	r0, r5
 80229ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80229f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80229f6:	3301      	adds	r3, #1
 80229f8:	e7c5      	b.n	8022986 <__lshift+0x4a>
 80229fa:	3904      	subs	r1, #4
 80229fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8022a00:	f841 2f04 	str.w	r2, [r1, #4]!
 8022a04:	459c      	cmp	ip, r3
 8022a06:	d8f9      	bhi.n	80229fc <__lshift+0xc0>
 8022a08:	e7ea      	b.n	80229e0 <__lshift+0xa4>
 8022a0a:	bf00      	nop
 8022a0c:	0802412c 	.word	0x0802412c
 8022a10:	080241bc 	.word	0x080241bc

08022a14 <__mcmp>:
 8022a14:	b530      	push	{r4, r5, lr}
 8022a16:	6902      	ldr	r2, [r0, #16]
 8022a18:	690c      	ldr	r4, [r1, #16]
 8022a1a:	1b12      	subs	r2, r2, r4
 8022a1c:	d10e      	bne.n	8022a3c <__mcmp+0x28>
 8022a1e:	f100 0314 	add.w	r3, r0, #20
 8022a22:	3114      	adds	r1, #20
 8022a24:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8022a28:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8022a2c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8022a30:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8022a34:	42a5      	cmp	r5, r4
 8022a36:	d003      	beq.n	8022a40 <__mcmp+0x2c>
 8022a38:	d305      	bcc.n	8022a46 <__mcmp+0x32>
 8022a3a:	2201      	movs	r2, #1
 8022a3c:	4610      	mov	r0, r2
 8022a3e:	bd30      	pop	{r4, r5, pc}
 8022a40:	4283      	cmp	r3, r0
 8022a42:	d3f3      	bcc.n	8022a2c <__mcmp+0x18>
 8022a44:	e7fa      	b.n	8022a3c <__mcmp+0x28>
 8022a46:	f04f 32ff 	mov.w	r2, #4294967295
 8022a4a:	e7f7      	b.n	8022a3c <__mcmp+0x28>

08022a4c <__mdiff>:
 8022a4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a50:	460c      	mov	r4, r1
 8022a52:	4606      	mov	r6, r0
 8022a54:	4611      	mov	r1, r2
 8022a56:	4620      	mov	r0, r4
 8022a58:	4617      	mov	r7, r2
 8022a5a:	f7ff ffdb 	bl	8022a14 <__mcmp>
 8022a5e:	1e05      	subs	r5, r0, #0
 8022a60:	d110      	bne.n	8022a84 <__mdiff+0x38>
 8022a62:	4629      	mov	r1, r5
 8022a64:	4630      	mov	r0, r6
 8022a66:	f7ff fd0d 	bl	8022484 <_Balloc>
 8022a6a:	b930      	cbnz	r0, 8022a7a <__mdiff+0x2e>
 8022a6c:	4b39      	ldr	r3, [pc, #228]	; (8022b54 <__mdiff+0x108>)
 8022a6e:	4602      	mov	r2, r0
 8022a70:	f240 2132 	movw	r1, #562	; 0x232
 8022a74:	4838      	ldr	r0, [pc, #224]	; (8022b58 <__mdiff+0x10c>)
 8022a76:	f000 fb53 	bl	8023120 <__assert_func>
 8022a7a:	2301      	movs	r3, #1
 8022a7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8022a80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a84:	bfa4      	itt	ge
 8022a86:	463b      	movge	r3, r7
 8022a88:	4627      	movge	r7, r4
 8022a8a:	4630      	mov	r0, r6
 8022a8c:	6879      	ldr	r1, [r7, #4]
 8022a8e:	bfa6      	itte	ge
 8022a90:	461c      	movge	r4, r3
 8022a92:	2500      	movge	r5, #0
 8022a94:	2501      	movlt	r5, #1
 8022a96:	f7ff fcf5 	bl	8022484 <_Balloc>
 8022a9a:	b920      	cbnz	r0, 8022aa6 <__mdiff+0x5a>
 8022a9c:	4b2d      	ldr	r3, [pc, #180]	; (8022b54 <__mdiff+0x108>)
 8022a9e:	4602      	mov	r2, r0
 8022aa0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8022aa4:	e7e6      	b.n	8022a74 <__mdiff+0x28>
 8022aa6:	693e      	ldr	r6, [r7, #16]
 8022aa8:	60c5      	str	r5, [r0, #12]
 8022aaa:	6925      	ldr	r5, [r4, #16]
 8022aac:	f107 0114 	add.w	r1, r7, #20
 8022ab0:	f104 0914 	add.w	r9, r4, #20
 8022ab4:	f100 0e14 	add.w	lr, r0, #20
 8022ab8:	f107 0210 	add.w	r2, r7, #16
 8022abc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8022ac0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8022ac4:	46f2      	mov	sl, lr
 8022ac6:	2700      	movs	r7, #0
 8022ac8:	f859 3b04 	ldr.w	r3, [r9], #4
 8022acc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8022ad0:	fa1f f883 	uxth.w	r8, r3
 8022ad4:	fa17 f78b 	uxtah	r7, r7, fp
 8022ad8:	0c1b      	lsrs	r3, r3, #16
 8022ada:	eba7 0808 	sub.w	r8, r7, r8
 8022ade:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8022ae2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8022ae6:	fa1f f888 	uxth.w	r8, r8
 8022aea:	141f      	asrs	r7, r3, #16
 8022aec:	454d      	cmp	r5, r9
 8022aee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8022af2:	f84a 3b04 	str.w	r3, [sl], #4
 8022af6:	d8e7      	bhi.n	8022ac8 <__mdiff+0x7c>
 8022af8:	1b2b      	subs	r3, r5, r4
 8022afa:	3b15      	subs	r3, #21
 8022afc:	f023 0303 	bic.w	r3, r3, #3
 8022b00:	3304      	adds	r3, #4
 8022b02:	3415      	adds	r4, #21
 8022b04:	42a5      	cmp	r5, r4
 8022b06:	bf38      	it	cc
 8022b08:	2304      	movcc	r3, #4
 8022b0a:	4419      	add	r1, r3
 8022b0c:	4473      	add	r3, lr
 8022b0e:	469e      	mov	lr, r3
 8022b10:	460d      	mov	r5, r1
 8022b12:	4565      	cmp	r5, ip
 8022b14:	d30e      	bcc.n	8022b34 <__mdiff+0xe8>
 8022b16:	f10c 0203 	add.w	r2, ip, #3
 8022b1a:	1a52      	subs	r2, r2, r1
 8022b1c:	f022 0203 	bic.w	r2, r2, #3
 8022b20:	3903      	subs	r1, #3
 8022b22:	458c      	cmp	ip, r1
 8022b24:	bf38      	it	cc
 8022b26:	2200      	movcc	r2, #0
 8022b28:	441a      	add	r2, r3
 8022b2a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8022b2e:	b17b      	cbz	r3, 8022b50 <__mdiff+0x104>
 8022b30:	6106      	str	r6, [r0, #16]
 8022b32:	e7a5      	b.n	8022a80 <__mdiff+0x34>
 8022b34:	f855 8b04 	ldr.w	r8, [r5], #4
 8022b38:	fa17 f488 	uxtah	r4, r7, r8
 8022b3c:	1422      	asrs	r2, r4, #16
 8022b3e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8022b42:	b2a4      	uxth	r4, r4
 8022b44:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8022b48:	f84e 4b04 	str.w	r4, [lr], #4
 8022b4c:	1417      	asrs	r7, r2, #16
 8022b4e:	e7e0      	b.n	8022b12 <__mdiff+0xc6>
 8022b50:	3e01      	subs	r6, #1
 8022b52:	e7ea      	b.n	8022b2a <__mdiff+0xde>
 8022b54:	0802412c 	.word	0x0802412c
 8022b58:	080241bc 	.word	0x080241bc

08022b5c <__ulp>:
 8022b5c:	b082      	sub	sp, #8
 8022b5e:	ed8d 0b00 	vstr	d0, [sp]
 8022b62:	9b01      	ldr	r3, [sp, #4]
 8022b64:	4912      	ldr	r1, [pc, #72]	; (8022bb0 <__ulp+0x54>)
 8022b66:	4019      	ands	r1, r3
 8022b68:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8022b6c:	2900      	cmp	r1, #0
 8022b6e:	dd05      	ble.n	8022b7c <__ulp+0x20>
 8022b70:	2200      	movs	r2, #0
 8022b72:	460b      	mov	r3, r1
 8022b74:	ec43 2b10 	vmov	d0, r2, r3
 8022b78:	b002      	add	sp, #8
 8022b7a:	4770      	bx	lr
 8022b7c:	4249      	negs	r1, r1
 8022b7e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8022b82:	ea4f 5021 	mov.w	r0, r1, asr #20
 8022b86:	f04f 0200 	mov.w	r2, #0
 8022b8a:	f04f 0300 	mov.w	r3, #0
 8022b8e:	da04      	bge.n	8022b9a <__ulp+0x3e>
 8022b90:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8022b94:	fa41 f300 	asr.w	r3, r1, r0
 8022b98:	e7ec      	b.n	8022b74 <__ulp+0x18>
 8022b9a:	f1a0 0114 	sub.w	r1, r0, #20
 8022b9e:	291e      	cmp	r1, #30
 8022ba0:	bfda      	itte	le
 8022ba2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8022ba6:	fa20 f101 	lsrle.w	r1, r0, r1
 8022baa:	2101      	movgt	r1, #1
 8022bac:	460a      	mov	r2, r1
 8022bae:	e7e1      	b.n	8022b74 <__ulp+0x18>
 8022bb0:	7ff00000 	.word	0x7ff00000

08022bb4 <__b2d>:
 8022bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022bb6:	6905      	ldr	r5, [r0, #16]
 8022bb8:	f100 0714 	add.w	r7, r0, #20
 8022bbc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8022bc0:	1f2e      	subs	r6, r5, #4
 8022bc2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8022bc6:	4620      	mov	r0, r4
 8022bc8:	f7ff fd52 	bl	8022670 <__hi0bits>
 8022bcc:	f1c0 0320 	rsb	r3, r0, #32
 8022bd0:	280a      	cmp	r0, #10
 8022bd2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8022c50 <__b2d+0x9c>
 8022bd6:	600b      	str	r3, [r1, #0]
 8022bd8:	dc14      	bgt.n	8022c04 <__b2d+0x50>
 8022bda:	f1c0 0e0b 	rsb	lr, r0, #11
 8022bde:	fa24 f10e 	lsr.w	r1, r4, lr
 8022be2:	42b7      	cmp	r7, r6
 8022be4:	ea41 030c 	orr.w	r3, r1, ip
 8022be8:	bf34      	ite	cc
 8022bea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8022bee:	2100      	movcs	r1, #0
 8022bf0:	3015      	adds	r0, #21
 8022bf2:	fa04 f000 	lsl.w	r0, r4, r0
 8022bf6:	fa21 f10e 	lsr.w	r1, r1, lr
 8022bfa:	ea40 0201 	orr.w	r2, r0, r1
 8022bfe:	ec43 2b10 	vmov	d0, r2, r3
 8022c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022c04:	42b7      	cmp	r7, r6
 8022c06:	bf3a      	itte	cc
 8022c08:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8022c0c:	f1a5 0608 	subcc.w	r6, r5, #8
 8022c10:	2100      	movcs	r1, #0
 8022c12:	380b      	subs	r0, #11
 8022c14:	d017      	beq.n	8022c46 <__b2d+0x92>
 8022c16:	f1c0 0c20 	rsb	ip, r0, #32
 8022c1a:	fa04 f500 	lsl.w	r5, r4, r0
 8022c1e:	42be      	cmp	r6, r7
 8022c20:	fa21 f40c 	lsr.w	r4, r1, ip
 8022c24:	ea45 0504 	orr.w	r5, r5, r4
 8022c28:	bf8c      	ite	hi
 8022c2a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8022c2e:	2400      	movls	r4, #0
 8022c30:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8022c34:	fa01 f000 	lsl.w	r0, r1, r0
 8022c38:	fa24 f40c 	lsr.w	r4, r4, ip
 8022c3c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8022c40:	ea40 0204 	orr.w	r2, r0, r4
 8022c44:	e7db      	b.n	8022bfe <__b2d+0x4a>
 8022c46:	ea44 030c 	orr.w	r3, r4, ip
 8022c4a:	460a      	mov	r2, r1
 8022c4c:	e7d7      	b.n	8022bfe <__b2d+0x4a>
 8022c4e:	bf00      	nop
 8022c50:	3ff00000 	.word	0x3ff00000

08022c54 <__d2b>:
 8022c54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8022c58:	4689      	mov	r9, r1
 8022c5a:	2101      	movs	r1, #1
 8022c5c:	ec57 6b10 	vmov	r6, r7, d0
 8022c60:	4690      	mov	r8, r2
 8022c62:	f7ff fc0f 	bl	8022484 <_Balloc>
 8022c66:	4604      	mov	r4, r0
 8022c68:	b930      	cbnz	r0, 8022c78 <__d2b+0x24>
 8022c6a:	4602      	mov	r2, r0
 8022c6c:	4b25      	ldr	r3, [pc, #148]	; (8022d04 <__d2b+0xb0>)
 8022c6e:	4826      	ldr	r0, [pc, #152]	; (8022d08 <__d2b+0xb4>)
 8022c70:	f240 310a 	movw	r1, #778	; 0x30a
 8022c74:	f000 fa54 	bl	8023120 <__assert_func>
 8022c78:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8022c7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8022c80:	bb35      	cbnz	r5, 8022cd0 <__d2b+0x7c>
 8022c82:	2e00      	cmp	r6, #0
 8022c84:	9301      	str	r3, [sp, #4]
 8022c86:	d028      	beq.n	8022cda <__d2b+0x86>
 8022c88:	4668      	mov	r0, sp
 8022c8a:	9600      	str	r6, [sp, #0]
 8022c8c:	f7ff fd10 	bl	80226b0 <__lo0bits>
 8022c90:	9900      	ldr	r1, [sp, #0]
 8022c92:	b300      	cbz	r0, 8022cd6 <__d2b+0x82>
 8022c94:	9a01      	ldr	r2, [sp, #4]
 8022c96:	f1c0 0320 	rsb	r3, r0, #32
 8022c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8022c9e:	430b      	orrs	r3, r1
 8022ca0:	40c2      	lsrs	r2, r0
 8022ca2:	6163      	str	r3, [r4, #20]
 8022ca4:	9201      	str	r2, [sp, #4]
 8022ca6:	9b01      	ldr	r3, [sp, #4]
 8022ca8:	61a3      	str	r3, [r4, #24]
 8022caa:	2b00      	cmp	r3, #0
 8022cac:	bf14      	ite	ne
 8022cae:	2202      	movne	r2, #2
 8022cb0:	2201      	moveq	r2, #1
 8022cb2:	6122      	str	r2, [r4, #16]
 8022cb4:	b1d5      	cbz	r5, 8022cec <__d2b+0x98>
 8022cb6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8022cba:	4405      	add	r5, r0
 8022cbc:	f8c9 5000 	str.w	r5, [r9]
 8022cc0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8022cc4:	f8c8 0000 	str.w	r0, [r8]
 8022cc8:	4620      	mov	r0, r4
 8022cca:	b003      	add	sp, #12
 8022ccc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022cd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8022cd4:	e7d5      	b.n	8022c82 <__d2b+0x2e>
 8022cd6:	6161      	str	r1, [r4, #20]
 8022cd8:	e7e5      	b.n	8022ca6 <__d2b+0x52>
 8022cda:	a801      	add	r0, sp, #4
 8022cdc:	f7ff fce8 	bl	80226b0 <__lo0bits>
 8022ce0:	9b01      	ldr	r3, [sp, #4]
 8022ce2:	6163      	str	r3, [r4, #20]
 8022ce4:	2201      	movs	r2, #1
 8022ce6:	6122      	str	r2, [r4, #16]
 8022ce8:	3020      	adds	r0, #32
 8022cea:	e7e3      	b.n	8022cb4 <__d2b+0x60>
 8022cec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8022cf0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8022cf4:	f8c9 0000 	str.w	r0, [r9]
 8022cf8:	6918      	ldr	r0, [r3, #16]
 8022cfa:	f7ff fcb9 	bl	8022670 <__hi0bits>
 8022cfe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8022d02:	e7df      	b.n	8022cc4 <__d2b+0x70>
 8022d04:	0802412c 	.word	0x0802412c
 8022d08:	080241bc 	.word	0x080241bc

08022d0c <__ratio>:
 8022d0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d10:	4688      	mov	r8, r1
 8022d12:	4669      	mov	r1, sp
 8022d14:	4681      	mov	r9, r0
 8022d16:	f7ff ff4d 	bl	8022bb4 <__b2d>
 8022d1a:	a901      	add	r1, sp, #4
 8022d1c:	4640      	mov	r0, r8
 8022d1e:	ec55 4b10 	vmov	r4, r5, d0
 8022d22:	f7ff ff47 	bl	8022bb4 <__b2d>
 8022d26:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8022d2a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8022d2e:	eba3 0c02 	sub.w	ip, r3, r2
 8022d32:	e9dd 3200 	ldrd	r3, r2, [sp]
 8022d36:	1a9b      	subs	r3, r3, r2
 8022d38:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8022d3c:	ec51 0b10 	vmov	r0, r1, d0
 8022d40:	2b00      	cmp	r3, #0
 8022d42:	bfd6      	itet	le
 8022d44:	460a      	movle	r2, r1
 8022d46:	462a      	movgt	r2, r5
 8022d48:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8022d4c:	468b      	mov	fp, r1
 8022d4e:	462f      	mov	r7, r5
 8022d50:	bfd4      	ite	le
 8022d52:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8022d56:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8022d5a:	4620      	mov	r0, r4
 8022d5c:	ee10 2a10 	vmov	r2, s0
 8022d60:	465b      	mov	r3, fp
 8022d62:	4639      	mov	r1, r7
 8022d64:	f7f6 fd72 	bl	801984c <__aeabi_ddiv>
 8022d68:	ec41 0b10 	vmov	d0, r0, r1
 8022d6c:	b003      	add	sp, #12
 8022d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022d72 <__copybits>:
 8022d72:	3901      	subs	r1, #1
 8022d74:	b570      	push	{r4, r5, r6, lr}
 8022d76:	1149      	asrs	r1, r1, #5
 8022d78:	6914      	ldr	r4, [r2, #16]
 8022d7a:	3101      	adds	r1, #1
 8022d7c:	f102 0314 	add.w	r3, r2, #20
 8022d80:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8022d84:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8022d88:	1f05      	subs	r5, r0, #4
 8022d8a:	42a3      	cmp	r3, r4
 8022d8c:	d30c      	bcc.n	8022da8 <__copybits+0x36>
 8022d8e:	1aa3      	subs	r3, r4, r2
 8022d90:	3b11      	subs	r3, #17
 8022d92:	f023 0303 	bic.w	r3, r3, #3
 8022d96:	3211      	adds	r2, #17
 8022d98:	42a2      	cmp	r2, r4
 8022d9a:	bf88      	it	hi
 8022d9c:	2300      	movhi	r3, #0
 8022d9e:	4418      	add	r0, r3
 8022da0:	2300      	movs	r3, #0
 8022da2:	4288      	cmp	r0, r1
 8022da4:	d305      	bcc.n	8022db2 <__copybits+0x40>
 8022da6:	bd70      	pop	{r4, r5, r6, pc}
 8022da8:	f853 6b04 	ldr.w	r6, [r3], #4
 8022dac:	f845 6f04 	str.w	r6, [r5, #4]!
 8022db0:	e7eb      	b.n	8022d8a <__copybits+0x18>
 8022db2:	f840 3b04 	str.w	r3, [r0], #4
 8022db6:	e7f4      	b.n	8022da2 <__copybits+0x30>

08022db8 <__any_on>:
 8022db8:	f100 0214 	add.w	r2, r0, #20
 8022dbc:	6900      	ldr	r0, [r0, #16]
 8022dbe:	114b      	asrs	r3, r1, #5
 8022dc0:	4298      	cmp	r0, r3
 8022dc2:	b510      	push	{r4, lr}
 8022dc4:	db11      	blt.n	8022dea <__any_on+0x32>
 8022dc6:	dd0a      	ble.n	8022dde <__any_on+0x26>
 8022dc8:	f011 011f 	ands.w	r1, r1, #31
 8022dcc:	d007      	beq.n	8022dde <__any_on+0x26>
 8022dce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8022dd2:	fa24 f001 	lsr.w	r0, r4, r1
 8022dd6:	fa00 f101 	lsl.w	r1, r0, r1
 8022dda:	428c      	cmp	r4, r1
 8022ddc:	d10b      	bne.n	8022df6 <__any_on+0x3e>
 8022dde:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8022de2:	4293      	cmp	r3, r2
 8022de4:	d803      	bhi.n	8022dee <__any_on+0x36>
 8022de6:	2000      	movs	r0, #0
 8022de8:	bd10      	pop	{r4, pc}
 8022dea:	4603      	mov	r3, r0
 8022dec:	e7f7      	b.n	8022dde <__any_on+0x26>
 8022dee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8022df2:	2900      	cmp	r1, #0
 8022df4:	d0f5      	beq.n	8022de2 <__any_on+0x2a>
 8022df6:	2001      	movs	r0, #1
 8022df8:	e7f6      	b.n	8022de8 <__any_on+0x30>

08022dfa <_calloc_r>:
 8022dfa:	b513      	push	{r0, r1, r4, lr}
 8022dfc:	434a      	muls	r2, r1
 8022dfe:	4611      	mov	r1, r2
 8022e00:	9201      	str	r2, [sp, #4]
 8022e02:	f7fc fb19 	bl	801f438 <_malloc_r>
 8022e06:	4604      	mov	r4, r0
 8022e08:	b118      	cbz	r0, 8022e12 <_calloc_r+0x18>
 8022e0a:	9a01      	ldr	r2, [sp, #4]
 8022e0c:	2100      	movs	r1, #0
 8022e0e:	f7fc fabb 	bl	801f388 <memset>
 8022e12:	4620      	mov	r0, r4
 8022e14:	b002      	add	sp, #8
 8022e16:	bd10      	pop	{r4, pc}

08022e18 <__ssputs_r>:
 8022e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022e1c:	688e      	ldr	r6, [r1, #8]
 8022e1e:	429e      	cmp	r6, r3
 8022e20:	4682      	mov	sl, r0
 8022e22:	460c      	mov	r4, r1
 8022e24:	4690      	mov	r8, r2
 8022e26:	461f      	mov	r7, r3
 8022e28:	d838      	bhi.n	8022e9c <__ssputs_r+0x84>
 8022e2a:	898a      	ldrh	r2, [r1, #12]
 8022e2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8022e30:	d032      	beq.n	8022e98 <__ssputs_r+0x80>
 8022e32:	6825      	ldr	r5, [r4, #0]
 8022e34:	6909      	ldr	r1, [r1, #16]
 8022e36:	eba5 0901 	sub.w	r9, r5, r1
 8022e3a:	6965      	ldr	r5, [r4, #20]
 8022e3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022e40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022e44:	3301      	adds	r3, #1
 8022e46:	444b      	add	r3, r9
 8022e48:	106d      	asrs	r5, r5, #1
 8022e4a:	429d      	cmp	r5, r3
 8022e4c:	bf38      	it	cc
 8022e4e:	461d      	movcc	r5, r3
 8022e50:	0553      	lsls	r3, r2, #21
 8022e52:	d531      	bpl.n	8022eb8 <__ssputs_r+0xa0>
 8022e54:	4629      	mov	r1, r5
 8022e56:	f7fc faef 	bl	801f438 <_malloc_r>
 8022e5a:	4606      	mov	r6, r0
 8022e5c:	b950      	cbnz	r0, 8022e74 <__ssputs_r+0x5c>
 8022e5e:	230c      	movs	r3, #12
 8022e60:	f8ca 3000 	str.w	r3, [sl]
 8022e64:	89a3      	ldrh	r3, [r4, #12]
 8022e66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022e6a:	81a3      	strh	r3, [r4, #12]
 8022e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8022e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022e74:	6921      	ldr	r1, [r4, #16]
 8022e76:	464a      	mov	r2, r9
 8022e78:	f7fc fa5e 	bl	801f338 <memcpy>
 8022e7c:	89a3      	ldrh	r3, [r4, #12]
 8022e7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8022e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022e86:	81a3      	strh	r3, [r4, #12]
 8022e88:	6126      	str	r6, [r4, #16]
 8022e8a:	6165      	str	r5, [r4, #20]
 8022e8c:	444e      	add	r6, r9
 8022e8e:	eba5 0509 	sub.w	r5, r5, r9
 8022e92:	6026      	str	r6, [r4, #0]
 8022e94:	60a5      	str	r5, [r4, #8]
 8022e96:	463e      	mov	r6, r7
 8022e98:	42be      	cmp	r6, r7
 8022e9a:	d900      	bls.n	8022e9e <__ssputs_r+0x86>
 8022e9c:	463e      	mov	r6, r7
 8022e9e:	4632      	mov	r2, r6
 8022ea0:	6820      	ldr	r0, [r4, #0]
 8022ea2:	4641      	mov	r1, r8
 8022ea4:	f7fc fa56 	bl	801f354 <memmove>
 8022ea8:	68a3      	ldr	r3, [r4, #8]
 8022eaa:	6822      	ldr	r2, [r4, #0]
 8022eac:	1b9b      	subs	r3, r3, r6
 8022eae:	4432      	add	r2, r6
 8022eb0:	60a3      	str	r3, [r4, #8]
 8022eb2:	6022      	str	r2, [r4, #0]
 8022eb4:	2000      	movs	r0, #0
 8022eb6:	e7db      	b.n	8022e70 <__ssputs_r+0x58>
 8022eb8:	462a      	mov	r2, r5
 8022eba:	f000 f964 	bl	8023186 <_realloc_r>
 8022ebe:	4606      	mov	r6, r0
 8022ec0:	2800      	cmp	r0, #0
 8022ec2:	d1e1      	bne.n	8022e88 <__ssputs_r+0x70>
 8022ec4:	6921      	ldr	r1, [r4, #16]
 8022ec6:	4650      	mov	r0, sl
 8022ec8:	f7fc fa66 	bl	801f398 <_free_r>
 8022ecc:	e7c7      	b.n	8022e5e <__ssputs_r+0x46>
	...

08022ed0 <_svfiprintf_r>:
 8022ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ed4:	4698      	mov	r8, r3
 8022ed6:	898b      	ldrh	r3, [r1, #12]
 8022ed8:	061b      	lsls	r3, r3, #24
 8022eda:	b09d      	sub	sp, #116	; 0x74
 8022edc:	4607      	mov	r7, r0
 8022ede:	460d      	mov	r5, r1
 8022ee0:	4614      	mov	r4, r2
 8022ee2:	d50e      	bpl.n	8022f02 <_svfiprintf_r+0x32>
 8022ee4:	690b      	ldr	r3, [r1, #16]
 8022ee6:	b963      	cbnz	r3, 8022f02 <_svfiprintf_r+0x32>
 8022ee8:	2140      	movs	r1, #64	; 0x40
 8022eea:	f7fc faa5 	bl	801f438 <_malloc_r>
 8022eee:	6028      	str	r0, [r5, #0]
 8022ef0:	6128      	str	r0, [r5, #16]
 8022ef2:	b920      	cbnz	r0, 8022efe <_svfiprintf_r+0x2e>
 8022ef4:	230c      	movs	r3, #12
 8022ef6:	603b      	str	r3, [r7, #0]
 8022ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8022efc:	e0d1      	b.n	80230a2 <_svfiprintf_r+0x1d2>
 8022efe:	2340      	movs	r3, #64	; 0x40
 8022f00:	616b      	str	r3, [r5, #20]
 8022f02:	2300      	movs	r3, #0
 8022f04:	9309      	str	r3, [sp, #36]	; 0x24
 8022f06:	2320      	movs	r3, #32
 8022f08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022f0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8022f10:	2330      	movs	r3, #48	; 0x30
 8022f12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80230bc <_svfiprintf_r+0x1ec>
 8022f16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022f1a:	f04f 0901 	mov.w	r9, #1
 8022f1e:	4623      	mov	r3, r4
 8022f20:	469a      	mov	sl, r3
 8022f22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022f26:	b10a      	cbz	r2, 8022f2c <_svfiprintf_r+0x5c>
 8022f28:	2a25      	cmp	r2, #37	; 0x25
 8022f2a:	d1f9      	bne.n	8022f20 <_svfiprintf_r+0x50>
 8022f2c:	ebba 0b04 	subs.w	fp, sl, r4
 8022f30:	d00b      	beq.n	8022f4a <_svfiprintf_r+0x7a>
 8022f32:	465b      	mov	r3, fp
 8022f34:	4622      	mov	r2, r4
 8022f36:	4629      	mov	r1, r5
 8022f38:	4638      	mov	r0, r7
 8022f3a:	f7ff ff6d 	bl	8022e18 <__ssputs_r>
 8022f3e:	3001      	adds	r0, #1
 8022f40:	f000 80aa 	beq.w	8023098 <_svfiprintf_r+0x1c8>
 8022f44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022f46:	445a      	add	r2, fp
 8022f48:	9209      	str	r2, [sp, #36]	; 0x24
 8022f4a:	f89a 3000 	ldrb.w	r3, [sl]
 8022f4e:	2b00      	cmp	r3, #0
 8022f50:	f000 80a2 	beq.w	8023098 <_svfiprintf_r+0x1c8>
 8022f54:	2300      	movs	r3, #0
 8022f56:	f04f 32ff 	mov.w	r2, #4294967295
 8022f5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022f5e:	f10a 0a01 	add.w	sl, sl, #1
 8022f62:	9304      	str	r3, [sp, #16]
 8022f64:	9307      	str	r3, [sp, #28]
 8022f66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022f6a:	931a      	str	r3, [sp, #104]	; 0x68
 8022f6c:	4654      	mov	r4, sl
 8022f6e:	2205      	movs	r2, #5
 8022f70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022f74:	4851      	ldr	r0, [pc, #324]	; (80230bc <_svfiprintf_r+0x1ec>)
 8022f76:	f7f6 f92b 	bl	80191d0 <memchr>
 8022f7a:	9a04      	ldr	r2, [sp, #16]
 8022f7c:	b9d8      	cbnz	r0, 8022fb6 <_svfiprintf_r+0xe6>
 8022f7e:	06d0      	lsls	r0, r2, #27
 8022f80:	bf44      	itt	mi
 8022f82:	2320      	movmi	r3, #32
 8022f84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022f88:	0711      	lsls	r1, r2, #28
 8022f8a:	bf44      	itt	mi
 8022f8c:	232b      	movmi	r3, #43	; 0x2b
 8022f8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022f92:	f89a 3000 	ldrb.w	r3, [sl]
 8022f96:	2b2a      	cmp	r3, #42	; 0x2a
 8022f98:	d015      	beq.n	8022fc6 <_svfiprintf_r+0xf6>
 8022f9a:	9a07      	ldr	r2, [sp, #28]
 8022f9c:	4654      	mov	r4, sl
 8022f9e:	2000      	movs	r0, #0
 8022fa0:	f04f 0c0a 	mov.w	ip, #10
 8022fa4:	4621      	mov	r1, r4
 8022fa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022faa:	3b30      	subs	r3, #48	; 0x30
 8022fac:	2b09      	cmp	r3, #9
 8022fae:	d94e      	bls.n	802304e <_svfiprintf_r+0x17e>
 8022fb0:	b1b0      	cbz	r0, 8022fe0 <_svfiprintf_r+0x110>
 8022fb2:	9207      	str	r2, [sp, #28]
 8022fb4:	e014      	b.n	8022fe0 <_svfiprintf_r+0x110>
 8022fb6:	eba0 0308 	sub.w	r3, r0, r8
 8022fba:	fa09 f303 	lsl.w	r3, r9, r3
 8022fbe:	4313      	orrs	r3, r2
 8022fc0:	9304      	str	r3, [sp, #16]
 8022fc2:	46a2      	mov	sl, r4
 8022fc4:	e7d2      	b.n	8022f6c <_svfiprintf_r+0x9c>
 8022fc6:	9b03      	ldr	r3, [sp, #12]
 8022fc8:	1d19      	adds	r1, r3, #4
 8022fca:	681b      	ldr	r3, [r3, #0]
 8022fcc:	9103      	str	r1, [sp, #12]
 8022fce:	2b00      	cmp	r3, #0
 8022fd0:	bfbb      	ittet	lt
 8022fd2:	425b      	neglt	r3, r3
 8022fd4:	f042 0202 	orrlt.w	r2, r2, #2
 8022fd8:	9307      	strge	r3, [sp, #28]
 8022fda:	9307      	strlt	r3, [sp, #28]
 8022fdc:	bfb8      	it	lt
 8022fde:	9204      	strlt	r2, [sp, #16]
 8022fe0:	7823      	ldrb	r3, [r4, #0]
 8022fe2:	2b2e      	cmp	r3, #46	; 0x2e
 8022fe4:	d10c      	bne.n	8023000 <_svfiprintf_r+0x130>
 8022fe6:	7863      	ldrb	r3, [r4, #1]
 8022fe8:	2b2a      	cmp	r3, #42	; 0x2a
 8022fea:	d135      	bne.n	8023058 <_svfiprintf_r+0x188>
 8022fec:	9b03      	ldr	r3, [sp, #12]
 8022fee:	1d1a      	adds	r2, r3, #4
 8022ff0:	681b      	ldr	r3, [r3, #0]
 8022ff2:	9203      	str	r2, [sp, #12]
 8022ff4:	2b00      	cmp	r3, #0
 8022ff6:	bfb8      	it	lt
 8022ff8:	f04f 33ff 	movlt.w	r3, #4294967295
 8022ffc:	3402      	adds	r4, #2
 8022ffe:	9305      	str	r3, [sp, #20]
 8023000:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80230cc <_svfiprintf_r+0x1fc>
 8023004:	7821      	ldrb	r1, [r4, #0]
 8023006:	2203      	movs	r2, #3
 8023008:	4650      	mov	r0, sl
 802300a:	f7f6 f8e1 	bl	80191d0 <memchr>
 802300e:	b140      	cbz	r0, 8023022 <_svfiprintf_r+0x152>
 8023010:	2340      	movs	r3, #64	; 0x40
 8023012:	eba0 000a 	sub.w	r0, r0, sl
 8023016:	fa03 f000 	lsl.w	r0, r3, r0
 802301a:	9b04      	ldr	r3, [sp, #16]
 802301c:	4303      	orrs	r3, r0
 802301e:	3401      	adds	r4, #1
 8023020:	9304      	str	r3, [sp, #16]
 8023022:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023026:	4826      	ldr	r0, [pc, #152]	; (80230c0 <_svfiprintf_r+0x1f0>)
 8023028:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802302c:	2206      	movs	r2, #6
 802302e:	f7f6 f8cf 	bl	80191d0 <memchr>
 8023032:	2800      	cmp	r0, #0
 8023034:	d038      	beq.n	80230a8 <_svfiprintf_r+0x1d8>
 8023036:	4b23      	ldr	r3, [pc, #140]	; (80230c4 <_svfiprintf_r+0x1f4>)
 8023038:	bb1b      	cbnz	r3, 8023082 <_svfiprintf_r+0x1b2>
 802303a:	9b03      	ldr	r3, [sp, #12]
 802303c:	3307      	adds	r3, #7
 802303e:	f023 0307 	bic.w	r3, r3, #7
 8023042:	3308      	adds	r3, #8
 8023044:	9303      	str	r3, [sp, #12]
 8023046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023048:	4433      	add	r3, r6
 802304a:	9309      	str	r3, [sp, #36]	; 0x24
 802304c:	e767      	b.n	8022f1e <_svfiprintf_r+0x4e>
 802304e:	fb0c 3202 	mla	r2, ip, r2, r3
 8023052:	460c      	mov	r4, r1
 8023054:	2001      	movs	r0, #1
 8023056:	e7a5      	b.n	8022fa4 <_svfiprintf_r+0xd4>
 8023058:	2300      	movs	r3, #0
 802305a:	3401      	adds	r4, #1
 802305c:	9305      	str	r3, [sp, #20]
 802305e:	4619      	mov	r1, r3
 8023060:	f04f 0c0a 	mov.w	ip, #10
 8023064:	4620      	mov	r0, r4
 8023066:	f810 2b01 	ldrb.w	r2, [r0], #1
 802306a:	3a30      	subs	r2, #48	; 0x30
 802306c:	2a09      	cmp	r2, #9
 802306e:	d903      	bls.n	8023078 <_svfiprintf_r+0x1a8>
 8023070:	2b00      	cmp	r3, #0
 8023072:	d0c5      	beq.n	8023000 <_svfiprintf_r+0x130>
 8023074:	9105      	str	r1, [sp, #20]
 8023076:	e7c3      	b.n	8023000 <_svfiprintf_r+0x130>
 8023078:	fb0c 2101 	mla	r1, ip, r1, r2
 802307c:	4604      	mov	r4, r0
 802307e:	2301      	movs	r3, #1
 8023080:	e7f0      	b.n	8023064 <_svfiprintf_r+0x194>
 8023082:	ab03      	add	r3, sp, #12
 8023084:	9300      	str	r3, [sp, #0]
 8023086:	462a      	mov	r2, r5
 8023088:	4b0f      	ldr	r3, [pc, #60]	; (80230c8 <_svfiprintf_r+0x1f8>)
 802308a:	a904      	add	r1, sp, #16
 802308c:	4638      	mov	r0, r7
 802308e:	f7fc facd 	bl	801f62c <_printf_float>
 8023092:	1c42      	adds	r2, r0, #1
 8023094:	4606      	mov	r6, r0
 8023096:	d1d6      	bne.n	8023046 <_svfiprintf_r+0x176>
 8023098:	89ab      	ldrh	r3, [r5, #12]
 802309a:	065b      	lsls	r3, r3, #25
 802309c:	f53f af2c 	bmi.w	8022ef8 <_svfiprintf_r+0x28>
 80230a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80230a2:	b01d      	add	sp, #116	; 0x74
 80230a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80230a8:	ab03      	add	r3, sp, #12
 80230aa:	9300      	str	r3, [sp, #0]
 80230ac:	462a      	mov	r2, r5
 80230ae:	4b06      	ldr	r3, [pc, #24]	; (80230c8 <_svfiprintf_r+0x1f8>)
 80230b0:	a904      	add	r1, sp, #16
 80230b2:	4638      	mov	r0, r7
 80230b4:	f7fc fd5e 	bl	801fb74 <_printf_i>
 80230b8:	e7eb      	b.n	8023092 <_svfiprintf_r+0x1c2>
 80230ba:	bf00      	nop
 80230bc:	0802431c 	.word	0x0802431c
 80230c0:	08024326 	.word	0x08024326
 80230c4:	0801f62d 	.word	0x0801f62d
 80230c8:	08022e19 	.word	0x08022e19
 80230cc:	08024322 	.word	0x08024322

080230d0 <nan>:
 80230d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80230d8 <nan+0x8>
 80230d4:	4770      	bx	lr
 80230d6:	bf00      	nop
 80230d8:	00000000 	.word	0x00000000
 80230dc:	7ff80000 	.word	0x7ff80000

080230e0 <strncmp>:
 80230e0:	b510      	push	{r4, lr}
 80230e2:	b16a      	cbz	r2, 8023100 <strncmp+0x20>
 80230e4:	3901      	subs	r1, #1
 80230e6:	1884      	adds	r4, r0, r2
 80230e8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80230ec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80230f0:	4293      	cmp	r3, r2
 80230f2:	d103      	bne.n	80230fc <strncmp+0x1c>
 80230f4:	42a0      	cmp	r0, r4
 80230f6:	d001      	beq.n	80230fc <strncmp+0x1c>
 80230f8:	2b00      	cmp	r3, #0
 80230fa:	d1f5      	bne.n	80230e8 <strncmp+0x8>
 80230fc:	1a98      	subs	r0, r3, r2
 80230fe:	bd10      	pop	{r4, pc}
 8023100:	4610      	mov	r0, r2
 8023102:	e7fc      	b.n	80230fe <strncmp+0x1e>

08023104 <__ascii_wctomb>:
 8023104:	b149      	cbz	r1, 802311a <__ascii_wctomb+0x16>
 8023106:	2aff      	cmp	r2, #255	; 0xff
 8023108:	bf85      	ittet	hi
 802310a:	238a      	movhi	r3, #138	; 0x8a
 802310c:	6003      	strhi	r3, [r0, #0]
 802310e:	700a      	strbls	r2, [r1, #0]
 8023110:	f04f 30ff 	movhi.w	r0, #4294967295
 8023114:	bf98      	it	ls
 8023116:	2001      	movls	r0, #1
 8023118:	4770      	bx	lr
 802311a:	4608      	mov	r0, r1
 802311c:	4770      	bx	lr
	...

08023120 <__assert_func>:
 8023120:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023122:	4614      	mov	r4, r2
 8023124:	461a      	mov	r2, r3
 8023126:	4b09      	ldr	r3, [pc, #36]	; (802314c <__assert_func+0x2c>)
 8023128:	681b      	ldr	r3, [r3, #0]
 802312a:	4605      	mov	r5, r0
 802312c:	68d8      	ldr	r0, [r3, #12]
 802312e:	b14c      	cbz	r4, 8023144 <__assert_func+0x24>
 8023130:	4b07      	ldr	r3, [pc, #28]	; (8023150 <__assert_func+0x30>)
 8023132:	9100      	str	r1, [sp, #0]
 8023134:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8023138:	4906      	ldr	r1, [pc, #24]	; (8023154 <__assert_func+0x34>)
 802313a:	462b      	mov	r3, r5
 802313c:	f000 f80e 	bl	802315c <fiprintf>
 8023140:	f7fc f8b8 	bl	801f2b4 <abort>
 8023144:	4b04      	ldr	r3, [pc, #16]	; (8023158 <__assert_func+0x38>)
 8023146:	461c      	mov	r4, r3
 8023148:	e7f3      	b.n	8023132 <__assert_func+0x12>
 802314a:	bf00      	nop
 802314c:	20000030 	.word	0x20000030
 8023150:	0802432d 	.word	0x0802432d
 8023154:	0802433a 	.word	0x0802433a
 8023158:	08024368 	.word	0x08024368

0802315c <fiprintf>:
 802315c:	b40e      	push	{r1, r2, r3}
 802315e:	b503      	push	{r0, r1, lr}
 8023160:	4601      	mov	r1, r0
 8023162:	ab03      	add	r3, sp, #12
 8023164:	4805      	ldr	r0, [pc, #20]	; (802317c <fiprintf+0x20>)
 8023166:	f853 2b04 	ldr.w	r2, [r3], #4
 802316a:	6800      	ldr	r0, [r0, #0]
 802316c:	9301      	str	r3, [sp, #4]
 802316e:	f000 f859 	bl	8023224 <_vfiprintf_r>
 8023172:	b002      	add	sp, #8
 8023174:	f85d eb04 	ldr.w	lr, [sp], #4
 8023178:	b003      	add	sp, #12
 802317a:	4770      	bx	lr
 802317c:	20000030 	.word	0x20000030

08023180 <__retarget_lock_init_recursive>:
 8023180:	4770      	bx	lr

08023182 <__retarget_lock_acquire_recursive>:
 8023182:	4770      	bx	lr

08023184 <__retarget_lock_release_recursive>:
 8023184:	4770      	bx	lr

08023186 <_realloc_r>:
 8023186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023188:	4607      	mov	r7, r0
 802318a:	4614      	mov	r4, r2
 802318c:	460e      	mov	r6, r1
 802318e:	b921      	cbnz	r1, 802319a <_realloc_r+0x14>
 8023190:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8023194:	4611      	mov	r1, r2
 8023196:	f7fc b94f 	b.w	801f438 <_malloc_r>
 802319a:	b922      	cbnz	r2, 80231a6 <_realloc_r+0x20>
 802319c:	f7fc f8fc 	bl	801f398 <_free_r>
 80231a0:	4625      	mov	r5, r4
 80231a2:	4628      	mov	r0, r5
 80231a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80231a6:	f000 fc49 	bl	8023a3c <_malloc_usable_size_r>
 80231aa:	42a0      	cmp	r0, r4
 80231ac:	d20f      	bcs.n	80231ce <_realloc_r+0x48>
 80231ae:	4621      	mov	r1, r4
 80231b0:	4638      	mov	r0, r7
 80231b2:	f7fc f941 	bl	801f438 <_malloc_r>
 80231b6:	4605      	mov	r5, r0
 80231b8:	2800      	cmp	r0, #0
 80231ba:	d0f2      	beq.n	80231a2 <_realloc_r+0x1c>
 80231bc:	4631      	mov	r1, r6
 80231be:	4622      	mov	r2, r4
 80231c0:	f7fc f8ba 	bl	801f338 <memcpy>
 80231c4:	4631      	mov	r1, r6
 80231c6:	4638      	mov	r0, r7
 80231c8:	f7fc f8e6 	bl	801f398 <_free_r>
 80231cc:	e7e9      	b.n	80231a2 <_realloc_r+0x1c>
 80231ce:	4635      	mov	r5, r6
 80231d0:	e7e7      	b.n	80231a2 <_realloc_r+0x1c>

080231d2 <__sfputc_r>:
 80231d2:	6893      	ldr	r3, [r2, #8]
 80231d4:	3b01      	subs	r3, #1
 80231d6:	2b00      	cmp	r3, #0
 80231d8:	b410      	push	{r4}
 80231da:	6093      	str	r3, [r2, #8]
 80231dc:	da08      	bge.n	80231f0 <__sfputc_r+0x1e>
 80231de:	6994      	ldr	r4, [r2, #24]
 80231e0:	42a3      	cmp	r3, r4
 80231e2:	db01      	blt.n	80231e8 <__sfputc_r+0x16>
 80231e4:	290a      	cmp	r1, #10
 80231e6:	d103      	bne.n	80231f0 <__sfputc_r+0x1e>
 80231e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80231ec:	f000 b94a 	b.w	8023484 <__swbuf_r>
 80231f0:	6813      	ldr	r3, [r2, #0]
 80231f2:	1c58      	adds	r0, r3, #1
 80231f4:	6010      	str	r0, [r2, #0]
 80231f6:	7019      	strb	r1, [r3, #0]
 80231f8:	4608      	mov	r0, r1
 80231fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80231fe:	4770      	bx	lr

08023200 <__sfputs_r>:
 8023200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023202:	4606      	mov	r6, r0
 8023204:	460f      	mov	r7, r1
 8023206:	4614      	mov	r4, r2
 8023208:	18d5      	adds	r5, r2, r3
 802320a:	42ac      	cmp	r4, r5
 802320c:	d101      	bne.n	8023212 <__sfputs_r+0x12>
 802320e:	2000      	movs	r0, #0
 8023210:	e007      	b.n	8023222 <__sfputs_r+0x22>
 8023212:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023216:	463a      	mov	r2, r7
 8023218:	4630      	mov	r0, r6
 802321a:	f7ff ffda 	bl	80231d2 <__sfputc_r>
 802321e:	1c43      	adds	r3, r0, #1
 8023220:	d1f3      	bne.n	802320a <__sfputs_r+0xa>
 8023222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08023224 <_vfiprintf_r>:
 8023224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023228:	460d      	mov	r5, r1
 802322a:	b09d      	sub	sp, #116	; 0x74
 802322c:	4614      	mov	r4, r2
 802322e:	4698      	mov	r8, r3
 8023230:	4606      	mov	r6, r0
 8023232:	b118      	cbz	r0, 802323c <_vfiprintf_r+0x18>
 8023234:	6983      	ldr	r3, [r0, #24]
 8023236:	b90b      	cbnz	r3, 802323c <_vfiprintf_r+0x18>
 8023238:	f000 fafe 	bl	8023838 <__sinit>
 802323c:	4b89      	ldr	r3, [pc, #548]	; (8023464 <_vfiprintf_r+0x240>)
 802323e:	429d      	cmp	r5, r3
 8023240:	d11b      	bne.n	802327a <_vfiprintf_r+0x56>
 8023242:	6875      	ldr	r5, [r6, #4]
 8023244:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023246:	07d9      	lsls	r1, r3, #31
 8023248:	d405      	bmi.n	8023256 <_vfiprintf_r+0x32>
 802324a:	89ab      	ldrh	r3, [r5, #12]
 802324c:	059a      	lsls	r2, r3, #22
 802324e:	d402      	bmi.n	8023256 <_vfiprintf_r+0x32>
 8023250:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023252:	f7ff ff96 	bl	8023182 <__retarget_lock_acquire_recursive>
 8023256:	89ab      	ldrh	r3, [r5, #12]
 8023258:	071b      	lsls	r3, r3, #28
 802325a:	d501      	bpl.n	8023260 <_vfiprintf_r+0x3c>
 802325c:	692b      	ldr	r3, [r5, #16]
 802325e:	b9eb      	cbnz	r3, 802329c <_vfiprintf_r+0x78>
 8023260:	4629      	mov	r1, r5
 8023262:	4630      	mov	r0, r6
 8023264:	f000 f960 	bl	8023528 <__swsetup_r>
 8023268:	b1c0      	cbz	r0, 802329c <_vfiprintf_r+0x78>
 802326a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802326c:	07dc      	lsls	r4, r3, #31
 802326e:	d50e      	bpl.n	802328e <_vfiprintf_r+0x6a>
 8023270:	f04f 30ff 	mov.w	r0, #4294967295
 8023274:	b01d      	add	sp, #116	; 0x74
 8023276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802327a:	4b7b      	ldr	r3, [pc, #492]	; (8023468 <_vfiprintf_r+0x244>)
 802327c:	429d      	cmp	r5, r3
 802327e:	d101      	bne.n	8023284 <_vfiprintf_r+0x60>
 8023280:	68b5      	ldr	r5, [r6, #8]
 8023282:	e7df      	b.n	8023244 <_vfiprintf_r+0x20>
 8023284:	4b79      	ldr	r3, [pc, #484]	; (802346c <_vfiprintf_r+0x248>)
 8023286:	429d      	cmp	r5, r3
 8023288:	bf08      	it	eq
 802328a:	68f5      	ldreq	r5, [r6, #12]
 802328c:	e7da      	b.n	8023244 <_vfiprintf_r+0x20>
 802328e:	89ab      	ldrh	r3, [r5, #12]
 8023290:	0598      	lsls	r0, r3, #22
 8023292:	d4ed      	bmi.n	8023270 <_vfiprintf_r+0x4c>
 8023294:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023296:	f7ff ff75 	bl	8023184 <__retarget_lock_release_recursive>
 802329a:	e7e9      	b.n	8023270 <_vfiprintf_r+0x4c>
 802329c:	2300      	movs	r3, #0
 802329e:	9309      	str	r3, [sp, #36]	; 0x24
 80232a0:	2320      	movs	r3, #32
 80232a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80232a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80232aa:	2330      	movs	r3, #48	; 0x30
 80232ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8023470 <_vfiprintf_r+0x24c>
 80232b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80232b4:	f04f 0901 	mov.w	r9, #1
 80232b8:	4623      	mov	r3, r4
 80232ba:	469a      	mov	sl, r3
 80232bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80232c0:	b10a      	cbz	r2, 80232c6 <_vfiprintf_r+0xa2>
 80232c2:	2a25      	cmp	r2, #37	; 0x25
 80232c4:	d1f9      	bne.n	80232ba <_vfiprintf_r+0x96>
 80232c6:	ebba 0b04 	subs.w	fp, sl, r4
 80232ca:	d00b      	beq.n	80232e4 <_vfiprintf_r+0xc0>
 80232cc:	465b      	mov	r3, fp
 80232ce:	4622      	mov	r2, r4
 80232d0:	4629      	mov	r1, r5
 80232d2:	4630      	mov	r0, r6
 80232d4:	f7ff ff94 	bl	8023200 <__sfputs_r>
 80232d8:	3001      	adds	r0, #1
 80232da:	f000 80aa 	beq.w	8023432 <_vfiprintf_r+0x20e>
 80232de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80232e0:	445a      	add	r2, fp
 80232e2:	9209      	str	r2, [sp, #36]	; 0x24
 80232e4:	f89a 3000 	ldrb.w	r3, [sl]
 80232e8:	2b00      	cmp	r3, #0
 80232ea:	f000 80a2 	beq.w	8023432 <_vfiprintf_r+0x20e>
 80232ee:	2300      	movs	r3, #0
 80232f0:	f04f 32ff 	mov.w	r2, #4294967295
 80232f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80232f8:	f10a 0a01 	add.w	sl, sl, #1
 80232fc:	9304      	str	r3, [sp, #16]
 80232fe:	9307      	str	r3, [sp, #28]
 8023300:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023304:	931a      	str	r3, [sp, #104]	; 0x68
 8023306:	4654      	mov	r4, sl
 8023308:	2205      	movs	r2, #5
 802330a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802330e:	4858      	ldr	r0, [pc, #352]	; (8023470 <_vfiprintf_r+0x24c>)
 8023310:	f7f5 ff5e 	bl	80191d0 <memchr>
 8023314:	9a04      	ldr	r2, [sp, #16]
 8023316:	b9d8      	cbnz	r0, 8023350 <_vfiprintf_r+0x12c>
 8023318:	06d1      	lsls	r1, r2, #27
 802331a:	bf44      	itt	mi
 802331c:	2320      	movmi	r3, #32
 802331e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023322:	0713      	lsls	r3, r2, #28
 8023324:	bf44      	itt	mi
 8023326:	232b      	movmi	r3, #43	; 0x2b
 8023328:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802332c:	f89a 3000 	ldrb.w	r3, [sl]
 8023330:	2b2a      	cmp	r3, #42	; 0x2a
 8023332:	d015      	beq.n	8023360 <_vfiprintf_r+0x13c>
 8023334:	9a07      	ldr	r2, [sp, #28]
 8023336:	4654      	mov	r4, sl
 8023338:	2000      	movs	r0, #0
 802333a:	f04f 0c0a 	mov.w	ip, #10
 802333e:	4621      	mov	r1, r4
 8023340:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023344:	3b30      	subs	r3, #48	; 0x30
 8023346:	2b09      	cmp	r3, #9
 8023348:	d94e      	bls.n	80233e8 <_vfiprintf_r+0x1c4>
 802334a:	b1b0      	cbz	r0, 802337a <_vfiprintf_r+0x156>
 802334c:	9207      	str	r2, [sp, #28]
 802334e:	e014      	b.n	802337a <_vfiprintf_r+0x156>
 8023350:	eba0 0308 	sub.w	r3, r0, r8
 8023354:	fa09 f303 	lsl.w	r3, r9, r3
 8023358:	4313      	orrs	r3, r2
 802335a:	9304      	str	r3, [sp, #16]
 802335c:	46a2      	mov	sl, r4
 802335e:	e7d2      	b.n	8023306 <_vfiprintf_r+0xe2>
 8023360:	9b03      	ldr	r3, [sp, #12]
 8023362:	1d19      	adds	r1, r3, #4
 8023364:	681b      	ldr	r3, [r3, #0]
 8023366:	9103      	str	r1, [sp, #12]
 8023368:	2b00      	cmp	r3, #0
 802336a:	bfbb      	ittet	lt
 802336c:	425b      	neglt	r3, r3
 802336e:	f042 0202 	orrlt.w	r2, r2, #2
 8023372:	9307      	strge	r3, [sp, #28]
 8023374:	9307      	strlt	r3, [sp, #28]
 8023376:	bfb8      	it	lt
 8023378:	9204      	strlt	r2, [sp, #16]
 802337a:	7823      	ldrb	r3, [r4, #0]
 802337c:	2b2e      	cmp	r3, #46	; 0x2e
 802337e:	d10c      	bne.n	802339a <_vfiprintf_r+0x176>
 8023380:	7863      	ldrb	r3, [r4, #1]
 8023382:	2b2a      	cmp	r3, #42	; 0x2a
 8023384:	d135      	bne.n	80233f2 <_vfiprintf_r+0x1ce>
 8023386:	9b03      	ldr	r3, [sp, #12]
 8023388:	1d1a      	adds	r2, r3, #4
 802338a:	681b      	ldr	r3, [r3, #0]
 802338c:	9203      	str	r2, [sp, #12]
 802338e:	2b00      	cmp	r3, #0
 8023390:	bfb8      	it	lt
 8023392:	f04f 33ff 	movlt.w	r3, #4294967295
 8023396:	3402      	adds	r4, #2
 8023398:	9305      	str	r3, [sp, #20]
 802339a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8023480 <_vfiprintf_r+0x25c>
 802339e:	7821      	ldrb	r1, [r4, #0]
 80233a0:	2203      	movs	r2, #3
 80233a2:	4650      	mov	r0, sl
 80233a4:	f7f5 ff14 	bl	80191d0 <memchr>
 80233a8:	b140      	cbz	r0, 80233bc <_vfiprintf_r+0x198>
 80233aa:	2340      	movs	r3, #64	; 0x40
 80233ac:	eba0 000a 	sub.w	r0, r0, sl
 80233b0:	fa03 f000 	lsl.w	r0, r3, r0
 80233b4:	9b04      	ldr	r3, [sp, #16]
 80233b6:	4303      	orrs	r3, r0
 80233b8:	3401      	adds	r4, #1
 80233ba:	9304      	str	r3, [sp, #16]
 80233bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80233c0:	482c      	ldr	r0, [pc, #176]	; (8023474 <_vfiprintf_r+0x250>)
 80233c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80233c6:	2206      	movs	r2, #6
 80233c8:	f7f5 ff02 	bl	80191d0 <memchr>
 80233cc:	2800      	cmp	r0, #0
 80233ce:	d03f      	beq.n	8023450 <_vfiprintf_r+0x22c>
 80233d0:	4b29      	ldr	r3, [pc, #164]	; (8023478 <_vfiprintf_r+0x254>)
 80233d2:	bb1b      	cbnz	r3, 802341c <_vfiprintf_r+0x1f8>
 80233d4:	9b03      	ldr	r3, [sp, #12]
 80233d6:	3307      	adds	r3, #7
 80233d8:	f023 0307 	bic.w	r3, r3, #7
 80233dc:	3308      	adds	r3, #8
 80233de:	9303      	str	r3, [sp, #12]
 80233e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80233e2:	443b      	add	r3, r7
 80233e4:	9309      	str	r3, [sp, #36]	; 0x24
 80233e6:	e767      	b.n	80232b8 <_vfiprintf_r+0x94>
 80233e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80233ec:	460c      	mov	r4, r1
 80233ee:	2001      	movs	r0, #1
 80233f0:	e7a5      	b.n	802333e <_vfiprintf_r+0x11a>
 80233f2:	2300      	movs	r3, #0
 80233f4:	3401      	adds	r4, #1
 80233f6:	9305      	str	r3, [sp, #20]
 80233f8:	4619      	mov	r1, r3
 80233fa:	f04f 0c0a 	mov.w	ip, #10
 80233fe:	4620      	mov	r0, r4
 8023400:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023404:	3a30      	subs	r2, #48	; 0x30
 8023406:	2a09      	cmp	r2, #9
 8023408:	d903      	bls.n	8023412 <_vfiprintf_r+0x1ee>
 802340a:	2b00      	cmp	r3, #0
 802340c:	d0c5      	beq.n	802339a <_vfiprintf_r+0x176>
 802340e:	9105      	str	r1, [sp, #20]
 8023410:	e7c3      	b.n	802339a <_vfiprintf_r+0x176>
 8023412:	fb0c 2101 	mla	r1, ip, r1, r2
 8023416:	4604      	mov	r4, r0
 8023418:	2301      	movs	r3, #1
 802341a:	e7f0      	b.n	80233fe <_vfiprintf_r+0x1da>
 802341c:	ab03      	add	r3, sp, #12
 802341e:	9300      	str	r3, [sp, #0]
 8023420:	462a      	mov	r2, r5
 8023422:	4b16      	ldr	r3, [pc, #88]	; (802347c <_vfiprintf_r+0x258>)
 8023424:	a904      	add	r1, sp, #16
 8023426:	4630      	mov	r0, r6
 8023428:	f7fc f900 	bl	801f62c <_printf_float>
 802342c:	4607      	mov	r7, r0
 802342e:	1c78      	adds	r0, r7, #1
 8023430:	d1d6      	bne.n	80233e0 <_vfiprintf_r+0x1bc>
 8023432:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023434:	07d9      	lsls	r1, r3, #31
 8023436:	d405      	bmi.n	8023444 <_vfiprintf_r+0x220>
 8023438:	89ab      	ldrh	r3, [r5, #12]
 802343a:	059a      	lsls	r2, r3, #22
 802343c:	d402      	bmi.n	8023444 <_vfiprintf_r+0x220>
 802343e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023440:	f7ff fea0 	bl	8023184 <__retarget_lock_release_recursive>
 8023444:	89ab      	ldrh	r3, [r5, #12]
 8023446:	065b      	lsls	r3, r3, #25
 8023448:	f53f af12 	bmi.w	8023270 <_vfiprintf_r+0x4c>
 802344c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802344e:	e711      	b.n	8023274 <_vfiprintf_r+0x50>
 8023450:	ab03      	add	r3, sp, #12
 8023452:	9300      	str	r3, [sp, #0]
 8023454:	462a      	mov	r2, r5
 8023456:	4b09      	ldr	r3, [pc, #36]	; (802347c <_vfiprintf_r+0x258>)
 8023458:	a904      	add	r1, sp, #16
 802345a:	4630      	mov	r0, r6
 802345c:	f7fc fb8a 	bl	801fb74 <_printf_i>
 8023460:	e7e4      	b.n	802342c <_vfiprintf_r+0x208>
 8023462:	bf00      	nop
 8023464:	0802438c 	.word	0x0802438c
 8023468:	080243ac 	.word	0x080243ac
 802346c:	0802436c 	.word	0x0802436c
 8023470:	0802431c 	.word	0x0802431c
 8023474:	08024326 	.word	0x08024326
 8023478:	0801f62d 	.word	0x0801f62d
 802347c:	08023201 	.word	0x08023201
 8023480:	08024322 	.word	0x08024322

08023484 <__swbuf_r>:
 8023484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023486:	460e      	mov	r6, r1
 8023488:	4614      	mov	r4, r2
 802348a:	4605      	mov	r5, r0
 802348c:	b118      	cbz	r0, 8023496 <__swbuf_r+0x12>
 802348e:	6983      	ldr	r3, [r0, #24]
 8023490:	b90b      	cbnz	r3, 8023496 <__swbuf_r+0x12>
 8023492:	f000 f9d1 	bl	8023838 <__sinit>
 8023496:	4b21      	ldr	r3, [pc, #132]	; (802351c <__swbuf_r+0x98>)
 8023498:	429c      	cmp	r4, r3
 802349a:	d12b      	bne.n	80234f4 <__swbuf_r+0x70>
 802349c:	686c      	ldr	r4, [r5, #4]
 802349e:	69a3      	ldr	r3, [r4, #24]
 80234a0:	60a3      	str	r3, [r4, #8]
 80234a2:	89a3      	ldrh	r3, [r4, #12]
 80234a4:	071a      	lsls	r2, r3, #28
 80234a6:	d52f      	bpl.n	8023508 <__swbuf_r+0x84>
 80234a8:	6923      	ldr	r3, [r4, #16]
 80234aa:	b36b      	cbz	r3, 8023508 <__swbuf_r+0x84>
 80234ac:	6923      	ldr	r3, [r4, #16]
 80234ae:	6820      	ldr	r0, [r4, #0]
 80234b0:	1ac0      	subs	r0, r0, r3
 80234b2:	6963      	ldr	r3, [r4, #20]
 80234b4:	b2f6      	uxtb	r6, r6
 80234b6:	4283      	cmp	r3, r0
 80234b8:	4637      	mov	r7, r6
 80234ba:	dc04      	bgt.n	80234c6 <__swbuf_r+0x42>
 80234bc:	4621      	mov	r1, r4
 80234be:	4628      	mov	r0, r5
 80234c0:	f000 f926 	bl	8023710 <_fflush_r>
 80234c4:	bb30      	cbnz	r0, 8023514 <__swbuf_r+0x90>
 80234c6:	68a3      	ldr	r3, [r4, #8]
 80234c8:	3b01      	subs	r3, #1
 80234ca:	60a3      	str	r3, [r4, #8]
 80234cc:	6823      	ldr	r3, [r4, #0]
 80234ce:	1c5a      	adds	r2, r3, #1
 80234d0:	6022      	str	r2, [r4, #0]
 80234d2:	701e      	strb	r6, [r3, #0]
 80234d4:	6963      	ldr	r3, [r4, #20]
 80234d6:	3001      	adds	r0, #1
 80234d8:	4283      	cmp	r3, r0
 80234da:	d004      	beq.n	80234e6 <__swbuf_r+0x62>
 80234dc:	89a3      	ldrh	r3, [r4, #12]
 80234de:	07db      	lsls	r3, r3, #31
 80234e0:	d506      	bpl.n	80234f0 <__swbuf_r+0x6c>
 80234e2:	2e0a      	cmp	r6, #10
 80234e4:	d104      	bne.n	80234f0 <__swbuf_r+0x6c>
 80234e6:	4621      	mov	r1, r4
 80234e8:	4628      	mov	r0, r5
 80234ea:	f000 f911 	bl	8023710 <_fflush_r>
 80234ee:	b988      	cbnz	r0, 8023514 <__swbuf_r+0x90>
 80234f0:	4638      	mov	r0, r7
 80234f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80234f4:	4b0a      	ldr	r3, [pc, #40]	; (8023520 <__swbuf_r+0x9c>)
 80234f6:	429c      	cmp	r4, r3
 80234f8:	d101      	bne.n	80234fe <__swbuf_r+0x7a>
 80234fa:	68ac      	ldr	r4, [r5, #8]
 80234fc:	e7cf      	b.n	802349e <__swbuf_r+0x1a>
 80234fe:	4b09      	ldr	r3, [pc, #36]	; (8023524 <__swbuf_r+0xa0>)
 8023500:	429c      	cmp	r4, r3
 8023502:	bf08      	it	eq
 8023504:	68ec      	ldreq	r4, [r5, #12]
 8023506:	e7ca      	b.n	802349e <__swbuf_r+0x1a>
 8023508:	4621      	mov	r1, r4
 802350a:	4628      	mov	r0, r5
 802350c:	f000 f80c 	bl	8023528 <__swsetup_r>
 8023510:	2800      	cmp	r0, #0
 8023512:	d0cb      	beq.n	80234ac <__swbuf_r+0x28>
 8023514:	f04f 37ff 	mov.w	r7, #4294967295
 8023518:	e7ea      	b.n	80234f0 <__swbuf_r+0x6c>
 802351a:	bf00      	nop
 802351c:	0802438c 	.word	0x0802438c
 8023520:	080243ac 	.word	0x080243ac
 8023524:	0802436c 	.word	0x0802436c

08023528 <__swsetup_r>:
 8023528:	4b32      	ldr	r3, [pc, #200]	; (80235f4 <__swsetup_r+0xcc>)
 802352a:	b570      	push	{r4, r5, r6, lr}
 802352c:	681d      	ldr	r5, [r3, #0]
 802352e:	4606      	mov	r6, r0
 8023530:	460c      	mov	r4, r1
 8023532:	b125      	cbz	r5, 802353e <__swsetup_r+0x16>
 8023534:	69ab      	ldr	r3, [r5, #24]
 8023536:	b913      	cbnz	r3, 802353e <__swsetup_r+0x16>
 8023538:	4628      	mov	r0, r5
 802353a:	f000 f97d 	bl	8023838 <__sinit>
 802353e:	4b2e      	ldr	r3, [pc, #184]	; (80235f8 <__swsetup_r+0xd0>)
 8023540:	429c      	cmp	r4, r3
 8023542:	d10f      	bne.n	8023564 <__swsetup_r+0x3c>
 8023544:	686c      	ldr	r4, [r5, #4]
 8023546:	89a3      	ldrh	r3, [r4, #12]
 8023548:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802354c:	0719      	lsls	r1, r3, #28
 802354e:	d42c      	bmi.n	80235aa <__swsetup_r+0x82>
 8023550:	06dd      	lsls	r5, r3, #27
 8023552:	d411      	bmi.n	8023578 <__swsetup_r+0x50>
 8023554:	2309      	movs	r3, #9
 8023556:	6033      	str	r3, [r6, #0]
 8023558:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802355c:	81a3      	strh	r3, [r4, #12]
 802355e:	f04f 30ff 	mov.w	r0, #4294967295
 8023562:	e03e      	b.n	80235e2 <__swsetup_r+0xba>
 8023564:	4b25      	ldr	r3, [pc, #148]	; (80235fc <__swsetup_r+0xd4>)
 8023566:	429c      	cmp	r4, r3
 8023568:	d101      	bne.n	802356e <__swsetup_r+0x46>
 802356a:	68ac      	ldr	r4, [r5, #8]
 802356c:	e7eb      	b.n	8023546 <__swsetup_r+0x1e>
 802356e:	4b24      	ldr	r3, [pc, #144]	; (8023600 <__swsetup_r+0xd8>)
 8023570:	429c      	cmp	r4, r3
 8023572:	bf08      	it	eq
 8023574:	68ec      	ldreq	r4, [r5, #12]
 8023576:	e7e6      	b.n	8023546 <__swsetup_r+0x1e>
 8023578:	0758      	lsls	r0, r3, #29
 802357a:	d512      	bpl.n	80235a2 <__swsetup_r+0x7a>
 802357c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802357e:	b141      	cbz	r1, 8023592 <__swsetup_r+0x6a>
 8023580:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023584:	4299      	cmp	r1, r3
 8023586:	d002      	beq.n	802358e <__swsetup_r+0x66>
 8023588:	4630      	mov	r0, r6
 802358a:	f7fb ff05 	bl	801f398 <_free_r>
 802358e:	2300      	movs	r3, #0
 8023590:	6363      	str	r3, [r4, #52]	; 0x34
 8023592:	89a3      	ldrh	r3, [r4, #12]
 8023594:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8023598:	81a3      	strh	r3, [r4, #12]
 802359a:	2300      	movs	r3, #0
 802359c:	6063      	str	r3, [r4, #4]
 802359e:	6923      	ldr	r3, [r4, #16]
 80235a0:	6023      	str	r3, [r4, #0]
 80235a2:	89a3      	ldrh	r3, [r4, #12]
 80235a4:	f043 0308 	orr.w	r3, r3, #8
 80235a8:	81a3      	strh	r3, [r4, #12]
 80235aa:	6923      	ldr	r3, [r4, #16]
 80235ac:	b94b      	cbnz	r3, 80235c2 <__swsetup_r+0x9a>
 80235ae:	89a3      	ldrh	r3, [r4, #12]
 80235b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80235b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80235b8:	d003      	beq.n	80235c2 <__swsetup_r+0x9a>
 80235ba:	4621      	mov	r1, r4
 80235bc:	4630      	mov	r0, r6
 80235be:	f000 f9fd 	bl	80239bc <__smakebuf_r>
 80235c2:	89a0      	ldrh	r0, [r4, #12]
 80235c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80235c8:	f010 0301 	ands.w	r3, r0, #1
 80235cc:	d00a      	beq.n	80235e4 <__swsetup_r+0xbc>
 80235ce:	2300      	movs	r3, #0
 80235d0:	60a3      	str	r3, [r4, #8]
 80235d2:	6963      	ldr	r3, [r4, #20]
 80235d4:	425b      	negs	r3, r3
 80235d6:	61a3      	str	r3, [r4, #24]
 80235d8:	6923      	ldr	r3, [r4, #16]
 80235da:	b943      	cbnz	r3, 80235ee <__swsetup_r+0xc6>
 80235dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80235e0:	d1ba      	bne.n	8023558 <__swsetup_r+0x30>
 80235e2:	bd70      	pop	{r4, r5, r6, pc}
 80235e4:	0781      	lsls	r1, r0, #30
 80235e6:	bf58      	it	pl
 80235e8:	6963      	ldrpl	r3, [r4, #20]
 80235ea:	60a3      	str	r3, [r4, #8]
 80235ec:	e7f4      	b.n	80235d8 <__swsetup_r+0xb0>
 80235ee:	2000      	movs	r0, #0
 80235f0:	e7f7      	b.n	80235e2 <__swsetup_r+0xba>
 80235f2:	bf00      	nop
 80235f4:	20000030 	.word	0x20000030
 80235f8:	0802438c 	.word	0x0802438c
 80235fc:	080243ac 	.word	0x080243ac
 8023600:	0802436c 	.word	0x0802436c

08023604 <__sflush_r>:
 8023604:	898a      	ldrh	r2, [r1, #12]
 8023606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802360a:	4605      	mov	r5, r0
 802360c:	0710      	lsls	r0, r2, #28
 802360e:	460c      	mov	r4, r1
 8023610:	d458      	bmi.n	80236c4 <__sflush_r+0xc0>
 8023612:	684b      	ldr	r3, [r1, #4]
 8023614:	2b00      	cmp	r3, #0
 8023616:	dc05      	bgt.n	8023624 <__sflush_r+0x20>
 8023618:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802361a:	2b00      	cmp	r3, #0
 802361c:	dc02      	bgt.n	8023624 <__sflush_r+0x20>
 802361e:	2000      	movs	r0, #0
 8023620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023624:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023626:	2e00      	cmp	r6, #0
 8023628:	d0f9      	beq.n	802361e <__sflush_r+0x1a>
 802362a:	2300      	movs	r3, #0
 802362c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8023630:	682f      	ldr	r7, [r5, #0]
 8023632:	602b      	str	r3, [r5, #0]
 8023634:	d032      	beq.n	802369c <__sflush_r+0x98>
 8023636:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8023638:	89a3      	ldrh	r3, [r4, #12]
 802363a:	075a      	lsls	r2, r3, #29
 802363c:	d505      	bpl.n	802364a <__sflush_r+0x46>
 802363e:	6863      	ldr	r3, [r4, #4]
 8023640:	1ac0      	subs	r0, r0, r3
 8023642:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8023644:	b10b      	cbz	r3, 802364a <__sflush_r+0x46>
 8023646:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023648:	1ac0      	subs	r0, r0, r3
 802364a:	2300      	movs	r3, #0
 802364c:	4602      	mov	r2, r0
 802364e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023650:	6a21      	ldr	r1, [r4, #32]
 8023652:	4628      	mov	r0, r5
 8023654:	47b0      	blx	r6
 8023656:	1c43      	adds	r3, r0, #1
 8023658:	89a3      	ldrh	r3, [r4, #12]
 802365a:	d106      	bne.n	802366a <__sflush_r+0x66>
 802365c:	6829      	ldr	r1, [r5, #0]
 802365e:	291d      	cmp	r1, #29
 8023660:	d82c      	bhi.n	80236bc <__sflush_r+0xb8>
 8023662:	4a2a      	ldr	r2, [pc, #168]	; (802370c <__sflush_r+0x108>)
 8023664:	40ca      	lsrs	r2, r1
 8023666:	07d6      	lsls	r6, r2, #31
 8023668:	d528      	bpl.n	80236bc <__sflush_r+0xb8>
 802366a:	2200      	movs	r2, #0
 802366c:	6062      	str	r2, [r4, #4]
 802366e:	04d9      	lsls	r1, r3, #19
 8023670:	6922      	ldr	r2, [r4, #16]
 8023672:	6022      	str	r2, [r4, #0]
 8023674:	d504      	bpl.n	8023680 <__sflush_r+0x7c>
 8023676:	1c42      	adds	r2, r0, #1
 8023678:	d101      	bne.n	802367e <__sflush_r+0x7a>
 802367a:	682b      	ldr	r3, [r5, #0]
 802367c:	b903      	cbnz	r3, 8023680 <__sflush_r+0x7c>
 802367e:	6560      	str	r0, [r4, #84]	; 0x54
 8023680:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023682:	602f      	str	r7, [r5, #0]
 8023684:	2900      	cmp	r1, #0
 8023686:	d0ca      	beq.n	802361e <__sflush_r+0x1a>
 8023688:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802368c:	4299      	cmp	r1, r3
 802368e:	d002      	beq.n	8023696 <__sflush_r+0x92>
 8023690:	4628      	mov	r0, r5
 8023692:	f7fb fe81 	bl	801f398 <_free_r>
 8023696:	2000      	movs	r0, #0
 8023698:	6360      	str	r0, [r4, #52]	; 0x34
 802369a:	e7c1      	b.n	8023620 <__sflush_r+0x1c>
 802369c:	6a21      	ldr	r1, [r4, #32]
 802369e:	2301      	movs	r3, #1
 80236a0:	4628      	mov	r0, r5
 80236a2:	47b0      	blx	r6
 80236a4:	1c41      	adds	r1, r0, #1
 80236a6:	d1c7      	bne.n	8023638 <__sflush_r+0x34>
 80236a8:	682b      	ldr	r3, [r5, #0]
 80236aa:	2b00      	cmp	r3, #0
 80236ac:	d0c4      	beq.n	8023638 <__sflush_r+0x34>
 80236ae:	2b1d      	cmp	r3, #29
 80236b0:	d001      	beq.n	80236b6 <__sflush_r+0xb2>
 80236b2:	2b16      	cmp	r3, #22
 80236b4:	d101      	bne.n	80236ba <__sflush_r+0xb6>
 80236b6:	602f      	str	r7, [r5, #0]
 80236b8:	e7b1      	b.n	802361e <__sflush_r+0x1a>
 80236ba:	89a3      	ldrh	r3, [r4, #12]
 80236bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80236c0:	81a3      	strh	r3, [r4, #12]
 80236c2:	e7ad      	b.n	8023620 <__sflush_r+0x1c>
 80236c4:	690f      	ldr	r7, [r1, #16]
 80236c6:	2f00      	cmp	r7, #0
 80236c8:	d0a9      	beq.n	802361e <__sflush_r+0x1a>
 80236ca:	0793      	lsls	r3, r2, #30
 80236cc:	680e      	ldr	r6, [r1, #0]
 80236ce:	bf08      	it	eq
 80236d0:	694b      	ldreq	r3, [r1, #20]
 80236d2:	600f      	str	r7, [r1, #0]
 80236d4:	bf18      	it	ne
 80236d6:	2300      	movne	r3, #0
 80236d8:	eba6 0807 	sub.w	r8, r6, r7
 80236dc:	608b      	str	r3, [r1, #8]
 80236de:	f1b8 0f00 	cmp.w	r8, #0
 80236e2:	dd9c      	ble.n	802361e <__sflush_r+0x1a>
 80236e4:	6a21      	ldr	r1, [r4, #32]
 80236e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80236e8:	4643      	mov	r3, r8
 80236ea:	463a      	mov	r2, r7
 80236ec:	4628      	mov	r0, r5
 80236ee:	47b0      	blx	r6
 80236f0:	2800      	cmp	r0, #0
 80236f2:	dc06      	bgt.n	8023702 <__sflush_r+0xfe>
 80236f4:	89a3      	ldrh	r3, [r4, #12]
 80236f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80236fa:	81a3      	strh	r3, [r4, #12]
 80236fc:	f04f 30ff 	mov.w	r0, #4294967295
 8023700:	e78e      	b.n	8023620 <__sflush_r+0x1c>
 8023702:	4407      	add	r7, r0
 8023704:	eba8 0800 	sub.w	r8, r8, r0
 8023708:	e7e9      	b.n	80236de <__sflush_r+0xda>
 802370a:	bf00      	nop
 802370c:	20400001 	.word	0x20400001

08023710 <_fflush_r>:
 8023710:	b538      	push	{r3, r4, r5, lr}
 8023712:	690b      	ldr	r3, [r1, #16]
 8023714:	4605      	mov	r5, r0
 8023716:	460c      	mov	r4, r1
 8023718:	b913      	cbnz	r3, 8023720 <_fflush_r+0x10>
 802371a:	2500      	movs	r5, #0
 802371c:	4628      	mov	r0, r5
 802371e:	bd38      	pop	{r3, r4, r5, pc}
 8023720:	b118      	cbz	r0, 802372a <_fflush_r+0x1a>
 8023722:	6983      	ldr	r3, [r0, #24]
 8023724:	b90b      	cbnz	r3, 802372a <_fflush_r+0x1a>
 8023726:	f000 f887 	bl	8023838 <__sinit>
 802372a:	4b14      	ldr	r3, [pc, #80]	; (802377c <_fflush_r+0x6c>)
 802372c:	429c      	cmp	r4, r3
 802372e:	d11b      	bne.n	8023768 <_fflush_r+0x58>
 8023730:	686c      	ldr	r4, [r5, #4]
 8023732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023736:	2b00      	cmp	r3, #0
 8023738:	d0ef      	beq.n	802371a <_fflush_r+0xa>
 802373a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802373c:	07d0      	lsls	r0, r2, #31
 802373e:	d404      	bmi.n	802374a <_fflush_r+0x3a>
 8023740:	0599      	lsls	r1, r3, #22
 8023742:	d402      	bmi.n	802374a <_fflush_r+0x3a>
 8023744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023746:	f7ff fd1c 	bl	8023182 <__retarget_lock_acquire_recursive>
 802374a:	4628      	mov	r0, r5
 802374c:	4621      	mov	r1, r4
 802374e:	f7ff ff59 	bl	8023604 <__sflush_r>
 8023752:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023754:	07da      	lsls	r2, r3, #31
 8023756:	4605      	mov	r5, r0
 8023758:	d4e0      	bmi.n	802371c <_fflush_r+0xc>
 802375a:	89a3      	ldrh	r3, [r4, #12]
 802375c:	059b      	lsls	r3, r3, #22
 802375e:	d4dd      	bmi.n	802371c <_fflush_r+0xc>
 8023760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023762:	f7ff fd0f 	bl	8023184 <__retarget_lock_release_recursive>
 8023766:	e7d9      	b.n	802371c <_fflush_r+0xc>
 8023768:	4b05      	ldr	r3, [pc, #20]	; (8023780 <_fflush_r+0x70>)
 802376a:	429c      	cmp	r4, r3
 802376c:	d101      	bne.n	8023772 <_fflush_r+0x62>
 802376e:	68ac      	ldr	r4, [r5, #8]
 8023770:	e7df      	b.n	8023732 <_fflush_r+0x22>
 8023772:	4b04      	ldr	r3, [pc, #16]	; (8023784 <_fflush_r+0x74>)
 8023774:	429c      	cmp	r4, r3
 8023776:	bf08      	it	eq
 8023778:	68ec      	ldreq	r4, [r5, #12]
 802377a:	e7da      	b.n	8023732 <_fflush_r+0x22>
 802377c:	0802438c 	.word	0x0802438c
 8023780:	080243ac 	.word	0x080243ac
 8023784:	0802436c 	.word	0x0802436c

08023788 <std>:
 8023788:	2300      	movs	r3, #0
 802378a:	b510      	push	{r4, lr}
 802378c:	4604      	mov	r4, r0
 802378e:	e9c0 3300 	strd	r3, r3, [r0]
 8023792:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023796:	6083      	str	r3, [r0, #8]
 8023798:	8181      	strh	r1, [r0, #12]
 802379a:	6643      	str	r3, [r0, #100]	; 0x64
 802379c:	81c2      	strh	r2, [r0, #14]
 802379e:	6183      	str	r3, [r0, #24]
 80237a0:	4619      	mov	r1, r3
 80237a2:	2208      	movs	r2, #8
 80237a4:	305c      	adds	r0, #92	; 0x5c
 80237a6:	f7fb fdef 	bl	801f388 <memset>
 80237aa:	4b05      	ldr	r3, [pc, #20]	; (80237c0 <std+0x38>)
 80237ac:	6263      	str	r3, [r4, #36]	; 0x24
 80237ae:	4b05      	ldr	r3, [pc, #20]	; (80237c4 <std+0x3c>)
 80237b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80237b2:	4b05      	ldr	r3, [pc, #20]	; (80237c8 <std+0x40>)
 80237b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80237b6:	4b05      	ldr	r3, [pc, #20]	; (80237cc <std+0x44>)
 80237b8:	6224      	str	r4, [r4, #32]
 80237ba:	6323      	str	r3, [r4, #48]	; 0x30
 80237bc:	bd10      	pop	{r4, pc}
 80237be:	bf00      	nop
 80237c0:	08023a4d 	.word	0x08023a4d
 80237c4:	08023a6f 	.word	0x08023a6f
 80237c8:	08023aa7 	.word	0x08023aa7
 80237cc:	08023acb 	.word	0x08023acb

080237d0 <_cleanup_r>:
 80237d0:	4901      	ldr	r1, [pc, #4]	; (80237d8 <_cleanup_r+0x8>)
 80237d2:	f000 b8af 	b.w	8023934 <_fwalk_reent>
 80237d6:	bf00      	nop
 80237d8:	08023711 	.word	0x08023711

080237dc <__sfmoreglue>:
 80237dc:	b570      	push	{r4, r5, r6, lr}
 80237de:	1e4a      	subs	r2, r1, #1
 80237e0:	2568      	movs	r5, #104	; 0x68
 80237e2:	4355      	muls	r5, r2
 80237e4:	460e      	mov	r6, r1
 80237e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80237ea:	f7fb fe25 	bl	801f438 <_malloc_r>
 80237ee:	4604      	mov	r4, r0
 80237f0:	b140      	cbz	r0, 8023804 <__sfmoreglue+0x28>
 80237f2:	2100      	movs	r1, #0
 80237f4:	e9c0 1600 	strd	r1, r6, [r0]
 80237f8:	300c      	adds	r0, #12
 80237fa:	60a0      	str	r0, [r4, #8]
 80237fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8023800:	f7fb fdc2 	bl	801f388 <memset>
 8023804:	4620      	mov	r0, r4
 8023806:	bd70      	pop	{r4, r5, r6, pc}

08023808 <__sfp_lock_acquire>:
 8023808:	4801      	ldr	r0, [pc, #4]	; (8023810 <__sfp_lock_acquire+0x8>)
 802380a:	f7ff bcba 	b.w	8023182 <__retarget_lock_acquire_recursive>
 802380e:	bf00      	nop
 8023810:	200003fc 	.word	0x200003fc

08023814 <__sfp_lock_release>:
 8023814:	4801      	ldr	r0, [pc, #4]	; (802381c <__sfp_lock_release+0x8>)
 8023816:	f7ff bcb5 	b.w	8023184 <__retarget_lock_release_recursive>
 802381a:	bf00      	nop
 802381c:	200003fc 	.word	0x200003fc

08023820 <__sinit_lock_acquire>:
 8023820:	4801      	ldr	r0, [pc, #4]	; (8023828 <__sinit_lock_acquire+0x8>)
 8023822:	f7ff bcae 	b.w	8023182 <__retarget_lock_acquire_recursive>
 8023826:	bf00      	nop
 8023828:	200003f7 	.word	0x200003f7

0802382c <__sinit_lock_release>:
 802382c:	4801      	ldr	r0, [pc, #4]	; (8023834 <__sinit_lock_release+0x8>)
 802382e:	f7ff bca9 	b.w	8023184 <__retarget_lock_release_recursive>
 8023832:	bf00      	nop
 8023834:	200003f7 	.word	0x200003f7

08023838 <__sinit>:
 8023838:	b510      	push	{r4, lr}
 802383a:	4604      	mov	r4, r0
 802383c:	f7ff fff0 	bl	8023820 <__sinit_lock_acquire>
 8023840:	69a3      	ldr	r3, [r4, #24]
 8023842:	b11b      	cbz	r3, 802384c <__sinit+0x14>
 8023844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023848:	f7ff bff0 	b.w	802382c <__sinit_lock_release>
 802384c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8023850:	6523      	str	r3, [r4, #80]	; 0x50
 8023852:	4b13      	ldr	r3, [pc, #76]	; (80238a0 <__sinit+0x68>)
 8023854:	4a13      	ldr	r2, [pc, #76]	; (80238a4 <__sinit+0x6c>)
 8023856:	681b      	ldr	r3, [r3, #0]
 8023858:	62a2      	str	r2, [r4, #40]	; 0x28
 802385a:	42a3      	cmp	r3, r4
 802385c:	bf04      	itt	eq
 802385e:	2301      	moveq	r3, #1
 8023860:	61a3      	streq	r3, [r4, #24]
 8023862:	4620      	mov	r0, r4
 8023864:	f000 f820 	bl	80238a8 <__sfp>
 8023868:	6060      	str	r0, [r4, #4]
 802386a:	4620      	mov	r0, r4
 802386c:	f000 f81c 	bl	80238a8 <__sfp>
 8023870:	60a0      	str	r0, [r4, #8]
 8023872:	4620      	mov	r0, r4
 8023874:	f000 f818 	bl	80238a8 <__sfp>
 8023878:	2200      	movs	r2, #0
 802387a:	60e0      	str	r0, [r4, #12]
 802387c:	2104      	movs	r1, #4
 802387e:	6860      	ldr	r0, [r4, #4]
 8023880:	f7ff ff82 	bl	8023788 <std>
 8023884:	68a0      	ldr	r0, [r4, #8]
 8023886:	2201      	movs	r2, #1
 8023888:	2109      	movs	r1, #9
 802388a:	f7ff ff7d 	bl	8023788 <std>
 802388e:	68e0      	ldr	r0, [r4, #12]
 8023890:	2202      	movs	r2, #2
 8023892:	2112      	movs	r1, #18
 8023894:	f7ff ff78 	bl	8023788 <std>
 8023898:	2301      	movs	r3, #1
 802389a:	61a3      	str	r3, [r4, #24]
 802389c:	e7d2      	b.n	8023844 <__sinit+0xc>
 802389e:	bf00      	nop
 80238a0:	08023f14 	.word	0x08023f14
 80238a4:	080237d1 	.word	0x080237d1

080238a8 <__sfp>:
 80238a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80238aa:	4607      	mov	r7, r0
 80238ac:	f7ff ffac 	bl	8023808 <__sfp_lock_acquire>
 80238b0:	4b1e      	ldr	r3, [pc, #120]	; (802392c <__sfp+0x84>)
 80238b2:	681e      	ldr	r6, [r3, #0]
 80238b4:	69b3      	ldr	r3, [r6, #24]
 80238b6:	b913      	cbnz	r3, 80238be <__sfp+0x16>
 80238b8:	4630      	mov	r0, r6
 80238ba:	f7ff ffbd 	bl	8023838 <__sinit>
 80238be:	3648      	adds	r6, #72	; 0x48
 80238c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80238c4:	3b01      	subs	r3, #1
 80238c6:	d503      	bpl.n	80238d0 <__sfp+0x28>
 80238c8:	6833      	ldr	r3, [r6, #0]
 80238ca:	b30b      	cbz	r3, 8023910 <__sfp+0x68>
 80238cc:	6836      	ldr	r6, [r6, #0]
 80238ce:	e7f7      	b.n	80238c0 <__sfp+0x18>
 80238d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80238d4:	b9d5      	cbnz	r5, 802390c <__sfp+0x64>
 80238d6:	4b16      	ldr	r3, [pc, #88]	; (8023930 <__sfp+0x88>)
 80238d8:	60e3      	str	r3, [r4, #12]
 80238da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80238de:	6665      	str	r5, [r4, #100]	; 0x64
 80238e0:	f7ff fc4e 	bl	8023180 <__retarget_lock_init_recursive>
 80238e4:	f7ff ff96 	bl	8023814 <__sfp_lock_release>
 80238e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80238ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80238f0:	6025      	str	r5, [r4, #0]
 80238f2:	61a5      	str	r5, [r4, #24]
 80238f4:	2208      	movs	r2, #8
 80238f6:	4629      	mov	r1, r5
 80238f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80238fc:	f7fb fd44 	bl	801f388 <memset>
 8023900:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8023904:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8023908:	4620      	mov	r0, r4
 802390a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802390c:	3468      	adds	r4, #104	; 0x68
 802390e:	e7d9      	b.n	80238c4 <__sfp+0x1c>
 8023910:	2104      	movs	r1, #4
 8023912:	4638      	mov	r0, r7
 8023914:	f7ff ff62 	bl	80237dc <__sfmoreglue>
 8023918:	4604      	mov	r4, r0
 802391a:	6030      	str	r0, [r6, #0]
 802391c:	2800      	cmp	r0, #0
 802391e:	d1d5      	bne.n	80238cc <__sfp+0x24>
 8023920:	f7ff ff78 	bl	8023814 <__sfp_lock_release>
 8023924:	230c      	movs	r3, #12
 8023926:	603b      	str	r3, [r7, #0]
 8023928:	e7ee      	b.n	8023908 <__sfp+0x60>
 802392a:	bf00      	nop
 802392c:	08023f14 	.word	0x08023f14
 8023930:	ffff0001 	.word	0xffff0001

08023934 <_fwalk_reent>:
 8023934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023938:	4606      	mov	r6, r0
 802393a:	4688      	mov	r8, r1
 802393c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8023940:	2700      	movs	r7, #0
 8023942:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023946:	f1b9 0901 	subs.w	r9, r9, #1
 802394a:	d505      	bpl.n	8023958 <_fwalk_reent+0x24>
 802394c:	6824      	ldr	r4, [r4, #0]
 802394e:	2c00      	cmp	r4, #0
 8023950:	d1f7      	bne.n	8023942 <_fwalk_reent+0xe>
 8023952:	4638      	mov	r0, r7
 8023954:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023958:	89ab      	ldrh	r3, [r5, #12]
 802395a:	2b01      	cmp	r3, #1
 802395c:	d907      	bls.n	802396e <_fwalk_reent+0x3a>
 802395e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023962:	3301      	adds	r3, #1
 8023964:	d003      	beq.n	802396e <_fwalk_reent+0x3a>
 8023966:	4629      	mov	r1, r5
 8023968:	4630      	mov	r0, r6
 802396a:	47c0      	blx	r8
 802396c:	4307      	orrs	r7, r0
 802396e:	3568      	adds	r5, #104	; 0x68
 8023970:	e7e9      	b.n	8023946 <_fwalk_reent+0x12>

08023972 <__swhatbuf_r>:
 8023972:	b570      	push	{r4, r5, r6, lr}
 8023974:	460e      	mov	r6, r1
 8023976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802397a:	2900      	cmp	r1, #0
 802397c:	b096      	sub	sp, #88	; 0x58
 802397e:	4614      	mov	r4, r2
 8023980:	461d      	mov	r5, r3
 8023982:	da07      	bge.n	8023994 <__swhatbuf_r+0x22>
 8023984:	2300      	movs	r3, #0
 8023986:	602b      	str	r3, [r5, #0]
 8023988:	89b3      	ldrh	r3, [r6, #12]
 802398a:	061a      	lsls	r2, r3, #24
 802398c:	d410      	bmi.n	80239b0 <__swhatbuf_r+0x3e>
 802398e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023992:	e00e      	b.n	80239b2 <__swhatbuf_r+0x40>
 8023994:	466a      	mov	r2, sp
 8023996:	f000 f8bf 	bl	8023b18 <_fstat_r>
 802399a:	2800      	cmp	r0, #0
 802399c:	dbf2      	blt.n	8023984 <__swhatbuf_r+0x12>
 802399e:	9a01      	ldr	r2, [sp, #4]
 80239a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80239a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80239a8:	425a      	negs	r2, r3
 80239aa:	415a      	adcs	r2, r3
 80239ac:	602a      	str	r2, [r5, #0]
 80239ae:	e7ee      	b.n	802398e <__swhatbuf_r+0x1c>
 80239b0:	2340      	movs	r3, #64	; 0x40
 80239b2:	2000      	movs	r0, #0
 80239b4:	6023      	str	r3, [r4, #0]
 80239b6:	b016      	add	sp, #88	; 0x58
 80239b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080239bc <__smakebuf_r>:
 80239bc:	898b      	ldrh	r3, [r1, #12]
 80239be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80239c0:	079d      	lsls	r5, r3, #30
 80239c2:	4606      	mov	r6, r0
 80239c4:	460c      	mov	r4, r1
 80239c6:	d507      	bpl.n	80239d8 <__smakebuf_r+0x1c>
 80239c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80239cc:	6023      	str	r3, [r4, #0]
 80239ce:	6123      	str	r3, [r4, #16]
 80239d0:	2301      	movs	r3, #1
 80239d2:	6163      	str	r3, [r4, #20]
 80239d4:	b002      	add	sp, #8
 80239d6:	bd70      	pop	{r4, r5, r6, pc}
 80239d8:	ab01      	add	r3, sp, #4
 80239da:	466a      	mov	r2, sp
 80239dc:	f7ff ffc9 	bl	8023972 <__swhatbuf_r>
 80239e0:	9900      	ldr	r1, [sp, #0]
 80239e2:	4605      	mov	r5, r0
 80239e4:	4630      	mov	r0, r6
 80239e6:	f7fb fd27 	bl	801f438 <_malloc_r>
 80239ea:	b948      	cbnz	r0, 8023a00 <__smakebuf_r+0x44>
 80239ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80239f0:	059a      	lsls	r2, r3, #22
 80239f2:	d4ef      	bmi.n	80239d4 <__smakebuf_r+0x18>
 80239f4:	f023 0303 	bic.w	r3, r3, #3
 80239f8:	f043 0302 	orr.w	r3, r3, #2
 80239fc:	81a3      	strh	r3, [r4, #12]
 80239fe:	e7e3      	b.n	80239c8 <__smakebuf_r+0xc>
 8023a00:	4b0d      	ldr	r3, [pc, #52]	; (8023a38 <__smakebuf_r+0x7c>)
 8023a02:	62b3      	str	r3, [r6, #40]	; 0x28
 8023a04:	89a3      	ldrh	r3, [r4, #12]
 8023a06:	6020      	str	r0, [r4, #0]
 8023a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023a0c:	81a3      	strh	r3, [r4, #12]
 8023a0e:	9b00      	ldr	r3, [sp, #0]
 8023a10:	6163      	str	r3, [r4, #20]
 8023a12:	9b01      	ldr	r3, [sp, #4]
 8023a14:	6120      	str	r0, [r4, #16]
 8023a16:	b15b      	cbz	r3, 8023a30 <__smakebuf_r+0x74>
 8023a18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023a1c:	4630      	mov	r0, r6
 8023a1e:	f000 f88d 	bl	8023b3c <_isatty_r>
 8023a22:	b128      	cbz	r0, 8023a30 <__smakebuf_r+0x74>
 8023a24:	89a3      	ldrh	r3, [r4, #12]
 8023a26:	f023 0303 	bic.w	r3, r3, #3
 8023a2a:	f043 0301 	orr.w	r3, r3, #1
 8023a2e:	81a3      	strh	r3, [r4, #12]
 8023a30:	89a0      	ldrh	r0, [r4, #12]
 8023a32:	4305      	orrs	r5, r0
 8023a34:	81a5      	strh	r5, [r4, #12]
 8023a36:	e7cd      	b.n	80239d4 <__smakebuf_r+0x18>
 8023a38:	080237d1 	.word	0x080237d1

08023a3c <_malloc_usable_size_r>:
 8023a3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023a40:	1f18      	subs	r0, r3, #4
 8023a42:	2b00      	cmp	r3, #0
 8023a44:	bfbc      	itt	lt
 8023a46:	580b      	ldrlt	r3, [r1, r0]
 8023a48:	18c0      	addlt	r0, r0, r3
 8023a4a:	4770      	bx	lr

08023a4c <__sread>:
 8023a4c:	b510      	push	{r4, lr}
 8023a4e:	460c      	mov	r4, r1
 8023a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023a54:	f000 f894 	bl	8023b80 <_read_r>
 8023a58:	2800      	cmp	r0, #0
 8023a5a:	bfab      	itete	ge
 8023a5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8023a5e:	89a3      	ldrhlt	r3, [r4, #12]
 8023a60:	181b      	addge	r3, r3, r0
 8023a62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8023a66:	bfac      	ite	ge
 8023a68:	6563      	strge	r3, [r4, #84]	; 0x54
 8023a6a:	81a3      	strhlt	r3, [r4, #12]
 8023a6c:	bd10      	pop	{r4, pc}

08023a6e <__swrite>:
 8023a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023a72:	461f      	mov	r7, r3
 8023a74:	898b      	ldrh	r3, [r1, #12]
 8023a76:	05db      	lsls	r3, r3, #23
 8023a78:	4605      	mov	r5, r0
 8023a7a:	460c      	mov	r4, r1
 8023a7c:	4616      	mov	r6, r2
 8023a7e:	d505      	bpl.n	8023a8c <__swrite+0x1e>
 8023a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023a84:	2302      	movs	r3, #2
 8023a86:	2200      	movs	r2, #0
 8023a88:	f000 f868 	bl	8023b5c <_lseek_r>
 8023a8c:	89a3      	ldrh	r3, [r4, #12]
 8023a8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023a92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8023a96:	81a3      	strh	r3, [r4, #12]
 8023a98:	4632      	mov	r2, r6
 8023a9a:	463b      	mov	r3, r7
 8023a9c:	4628      	mov	r0, r5
 8023a9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023aa2:	f000 b817 	b.w	8023ad4 <_write_r>

08023aa6 <__sseek>:
 8023aa6:	b510      	push	{r4, lr}
 8023aa8:	460c      	mov	r4, r1
 8023aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023aae:	f000 f855 	bl	8023b5c <_lseek_r>
 8023ab2:	1c43      	adds	r3, r0, #1
 8023ab4:	89a3      	ldrh	r3, [r4, #12]
 8023ab6:	bf15      	itete	ne
 8023ab8:	6560      	strne	r0, [r4, #84]	; 0x54
 8023aba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8023abe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8023ac2:	81a3      	strheq	r3, [r4, #12]
 8023ac4:	bf18      	it	ne
 8023ac6:	81a3      	strhne	r3, [r4, #12]
 8023ac8:	bd10      	pop	{r4, pc}

08023aca <__sclose>:
 8023aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023ace:	f000 b813 	b.w	8023af8 <_close_r>
	...

08023ad4 <_write_r>:
 8023ad4:	b538      	push	{r3, r4, r5, lr}
 8023ad6:	4d07      	ldr	r5, [pc, #28]	; (8023af4 <_write_r+0x20>)
 8023ad8:	4604      	mov	r4, r0
 8023ada:	4608      	mov	r0, r1
 8023adc:	4611      	mov	r1, r2
 8023ade:	2200      	movs	r2, #0
 8023ae0:	602a      	str	r2, [r5, #0]
 8023ae2:	461a      	mov	r2, r3
 8023ae4:	f7f7 f9ab 	bl	801ae3e <_write>
 8023ae8:	1c43      	adds	r3, r0, #1
 8023aea:	d102      	bne.n	8023af2 <_write_r+0x1e>
 8023aec:	682b      	ldr	r3, [r5, #0]
 8023aee:	b103      	cbz	r3, 8023af2 <_write_r+0x1e>
 8023af0:	6023      	str	r3, [r4, #0]
 8023af2:	bd38      	pop	{r3, r4, r5, pc}
 8023af4:	200003f0 	.word	0x200003f0

08023af8 <_close_r>:
 8023af8:	b538      	push	{r3, r4, r5, lr}
 8023afa:	4d06      	ldr	r5, [pc, #24]	; (8023b14 <_close_r+0x1c>)
 8023afc:	2300      	movs	r3, #0
 8023afe:	4604      	mov	r4, r0
 8023b00:	4608      	mov	r0, r1
 8023b02:	602b      	str	r3, [r5, #0]
 8023b04:	f7f7 f9b7 	bl	801ae76 <_close>
 8023b08:	1c43      	adds	r3, r0, #1
 8023b0a:	d102      	bne.n	8023b12 <_close_r+0x1a>
 8023b0c:	682b      	ldr	r3, [r5, #0]
 8023b0e:	b103      	cbz	r3, 8023b12 <_close_r+0x1a>
 8023b10:	6023      	str	r3, [r4, #0]
 8023b12:	bd38      	pop	{r3, r4, r5, pc}
 8023b14:	200003f0 	.word	0x200003f0

08023b18 <_fstat_r>:
 8023b18:	b538      	push	{r3, r4, r5, lr}
 8023b1a:	4d07      	ldr	r5, [pc, #28]	; (8023b38 <_fstat_r+0x20>)
 8023b1c:	2300      	movs	r3, #0
 8023b1e:	4604      	mov	r4, r0
 8023b20:	4608      	mov	r0, r1
 8023b22:	4611      	mov	r1, r2
 8023b24:	602b      	str	r3, [r5, #0]
 8023b26:	f7f7 f9b2 	bl	801ae8e <_fstat>
 8023b2a:	1c43      	adds	r3, r0, #1
 8023b2c:	d102      	bne.n	8023b34 <_fstat_r+0x1c>
 8023b2e:	682b      	ldr	r3, [r5, #0]
 8023b30:	b103      	cbz	r3, 8023b34 <_fstat_r+0x1c>
 8023b32:	6023      	str	r3, [r4, #0]
 8023b34:	bd38      	pop	{r3, r4, r5, pc}
 8023b36:	bf00      	nop
 8023b38:	200003f0 	.word	0x200003f0

08023b3c <_isatty_r>:
 8023b3c:	b538      	push	{r3, r4, r5, lr}
 8023b3e:	4d06      	ldr	r5, [pc, #24]	; (8023b58 <_isatty_r+0x1c>)
 8023b40:	2300      	movs	r3, #0
 8023b42:	4604      	mov	r4, r0
 8023b44:	4608      	mov	r0, r1
 8023b46:	602b      	str	r3, [r5, #0]
 8023b48:	f7f7 f9b1 	bl	801aeae <_isatty>
 8023b4c:	1c43      	adds	r3, r0, #1
 8023b4e:	d102      	bne.n	8023b56 <_isatty_r+0x1a>
 8023b50:	682b      	ldr	r3, [r5, #0]
 8023b52:	b103      	cbz	r3, 8023b56 <_isatty_r+0x1a>
 8023b54:	6023      	str	r3, [r4, #0]
 8023b56:	bd38      	pop	{r3, r4, r5, pc}
 8023b58:	200003f0 	.word	0x200003f0

08023b5c <_lseek_r>:
 8023b5c:	b538      	push	{r3, r4, r5, lr}
 8023b5e:	4d07      	ldr	r5, [pc, #28]	; (8023b7c <_lseek_r+0x20>)
 8023b60:	4604      	mov	r4, r0
 8023b62:	4608      	mov	r0, r1
 8023b64:	4611      	mov	r1, r2
 8023b66:	2200      	movs	r2, #0
 8023b68:	602a      	str	r2, [r5, #0]
 8023b6a:	461a      	mov	r2, r3
 8023b6c:	f7f7 f9aa 	bl	801aec4 <_lseek>
 8023b70:	1c43      	adds	r3, r0, #1
 8023b72:	d102      	bne.n	8023b7a <_lseek_r+0x1e>
 8023b74:	682b      	ldr	r3, [r5, #0]
 8023b76:	b103      	cbz	r3, 8023b7a <_lseek_r+0x1e>
 8023b78:	6023      	str	r3, [r4, #0]
 8023b7a:	bd38      	pop	{r3, r4, r5, pc}
 8023b7c:	200003f0 	.word	0x200003f0

08023b80 <_read_r>:
 8023b80:	b538      	push	{r3, r4, r5, lr}
 8023b82:	4d07      	ldr	r5, [pc, #28]	; (8023ba0 <_read_r+0x20>)
 8023b84:	4604      	mov	r4, r0
 8023b86:	4608      	mov	r0, r1
 8023b88:	4611      	mov	r1, r2
 8023b8a:	2200      	movs	r2, #0
 8023b8c:	602a      	str	r2, [r5, #0]
 8023b8e:	461a      	mov	r2, r3
 8023b90:	f7f7 f938 	bl	801ae04 <_read>
 8023b94:	1c43      	adds	r3, r0, #1
 8023b96:	d102      	bne.n	8023b9e <_read_r+0x1e>
 8023b98:	682b      	ldr	r3, [r5, #0]
 8023b9a:	b103      	cbz	r3, 8023b9e <_read_r+0x1e>
 8023b9c:	6023      	str	r3, [r4, #0]
 8023b9e:	bd38      	pop	{r3, r4, r5, pc}
 8023ba0:	200003f0 	.word	0x200003f0

08023ba4 <_init>:
 8023ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023ba6:	bf00      	nop
 8023ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023baa:	bc08      	pop	{r3}
 8023bac:	469e      	mov	lr, r3
 8023bae:	4770      	bx	lr

08023bb0 <_fini>:
 8023bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023bb2:	bf00      	nop
 8023bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023bb6:	bc08      	pop	{r3}
 8023bb8:	469e      	mov	lr, r3
 8023bba:	4770      	bx	lr
