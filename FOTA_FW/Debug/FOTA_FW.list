
FOTA_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035c0  08040188  08040188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08043748  08043748  00013748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080437c4  080437c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080437c4  080437c4  000137c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080437cc  080437cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080437cc  080437cc  000137cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080437d0  080437d0  000137d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080437d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000000c  080437e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  080437e0  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c66e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dcc  00000000  00000000  0002c6aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  0002e478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f8  00000000  00000000  0002ee38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025e4c  00000000  00000000  0002f730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b496  00000000  00000000  0005557c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8754  00000000  00000000  00060a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00149166  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002628  00000000  00000000  001491bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08040188 <__do_global_dtors_aux>:
 8040188:	b510      	push	{r4, lr}
 804018a:	4c05      	ldr	r4, [pc, #20]	; (80401a0 <__do_global_dtors_aux+0x18>)
 804018c:	7823      	ldrb	r3, [r4, #0]
 804018e:	b933      	cbnz	r3, 804019e <__do_global_dtors_aux+0x16>
 8040190:	4b04      	ldr	r3, [pc, #16]	; (80401a4 <__do_global_dtors_aux+0x1c>)
 8040192:	b113      	cbz	r3, 804019a <__do_global_dtors_aux+0x12>
 8040194:	4804      	ldr	r0, [pc, #16]	; (80401a8 <__do_global_dtors_aux+0x20>)
 8040196:	f3af 8000 	nop.w
 804019a:	2301      	movs	r3, #1
 804019c:	7023      	strb	r3, [r4, #0]
 804019e:	bd10      	pop	{r4, pc}
 80401a0:	2000000c 	.word	0x2000000c
 80401a4:	00000000 	.word	0x00000000
 80401a8:	08043730 	.word	0x08043730

080401ac <frame_dummy>:
 80401ac:	b508      	push	{r3, lr}
 80401ae:	4b03      	ldr	r3, [pc, #12]	; (80401bc <frame_dummy+0x10>)
 80401b0:	b11b      	cbz	r3, 80401ba <frame_dummy+0xe>
 80401b2:	4903      	ldr	r1, [pc, #12]	; (80401c0 <frame_dummy+0x14>)
 80401b4:	4803      	ldr	r0, [pc, #12]	; (80401c4 <frame_dummy+0x18>)
 80401b6:	f3af 8000 	nop.w
 80401ba:	bd08      	pop	{r3, pc}
 80401bc:	00000000 	.word	0x00000000
 80401c0:	20000010 	.word	0x20000010
 80401c4:	08043730 	.word	0x08043730

080401c8 <strlen>:
 80401c8:	4603      	mov	r3, r0
 80401ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80401ce:	2a00      	cmp	r2, #0
 80401d0:	d1fb      	bne.n	80401ca <strlen+0x2>
 80401d2:	1a18      	subs	r0, r3, r0
 80401d4:	3801      	subs	r0, #1
 80401d6:	4770      	bx	lr

080401d8 <__aeabi_uldivmod>:
 80401d8:	b953      	cbnz	r3, 80401f0 <__aeabi_uldivmod+0x18>
 80401da:	b94a      	cbnz	r2, 80401f0 <__aeabi_uldivmod+0x18>
 80401dc:	2900      	cmp	r1, #0
 80401de:	bf08      	it	eq
 80401e0:	2800      	cmpeq	r0, #0
 80401e2:	bf1c      	itt	ne
 80401e4:	f04f 31ff 	movne.w	r1, #4294967295
 80401e8:	f04f 30ff 	movne.w	r0, #4294967295
 80401ec:	f000 b96e 	b.w	80404cc <__aeabi_idiv0>
 80401f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80401f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80401f8:	f000 f806 	bl	8040208 <__udivmoddi4>
 80401fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040204:	b004      	add	sp, #16
 8040206:	4770      	bx	lr

08040208 <__udivmoddi4>:
 8040208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804020c:	9d08      	ldr	r5, [sp, #32]
 804020e:	4604      	mov	r4, r0
 8040210:	468c      	mov	ip, r1
 8040212:	2b00      	cmp	r3, #0
 8040214:	f040 8083 	bne.w	804031e <__udivmoddi4+0x116>
 8040218:	428a      	cmp	r2, r1
 804021a:	4617      	mov	r7, r2
 804021c:	d947      	bls.n	80402ae <__udivmoddi4+0xa6>
 804021e:	fab2 f282 	clz	r2, r2
 8040222:	b142      	cbz	r2, 8040236 <__udivmoddi4+0x2e>
 8040224:	f1c2 0020 	rsb	r0, r2, #32
 8040228:	fa24 f000 	lsr.w	r0, r4, r0
 804022c:	4091      	lsls	r1, r2
 804022e:	4097      	lsls	r7, r2
 8040230:	ea40 0c01 	orr.w	ip, r0, r1
 8040234:	4094      	lsls	r4, r2
 8040236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 804023a:	0c23      	lsrs	r3, r4, #16
 804023c:	fbbc f6f8 	udiv	r6, ip, r8
 8040240:	fa1f fe87 	uxth.w	lr, r7
 8040244:	fb08 c116 	mls	r1, r8, r6, ip
 8040248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 804024c:	fb06 f10e 	mul.w	r1, r6, lr
 8040250:	4299      	cmp	r1, r3
 8040252:	d909      	bls.n	8040268 <__udivmoddi4+0x60>
 8040254:	18fb      	adds	r3, r7, r3
 8040256:	f106 30ff 	add.w	r0, r6, #4294967295
 804025a:	f080 8119 	bcs.w	8040490 <__udivmoddi4+0x288>
 804025e:	4299      	cmp	r1, r3
 8040260:	f240 8116 	bls.w	8040490 <__udivmoddi4+0x288>
 8040264:	3e02      	subs	r6, #2
 8040266:	443b      	add	r3, r7
 8040268:	1a5b      	subs	r3, r3, r1
 804026a:	b2a4      	uxth	r4, r4
 804026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8040270:	fb08 3310 	mls	r3, r8, r0, r3
 8040274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8040278:	fb00 fe0e 	mul.w	lr, r0, lr
 804027c:	45a6      	cmp	lr, r4
 804027e:	d909      	bls.n	8040294 <__udivmoddi4+0x8c>
 8040280:	193c      	adds	r4, r7, r4
 8040282:	f100 33ff 	add.w	r3, r0, #4294967295
 8040286:	f080 8105 	bcs.w	8040494 <__udivmoddi4+0x28c>
 804028a:	45a6      	cmp	lr, r4
 804028c:	f240 8102 	bls.w	8040494 <__udivmoddi4+0x28c>
 8040290:	3802      	subs	r0, #2
 8040292:	443c      	add	r4, r7
 8040294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8040298:	eba4 040e 	sub.w	r4, r4, lr
 804029c:	2600      	movs	r6, #0
 804029e:	b11d      	cbz	r5, 80402a8 <__udivmoddi4+0xa0>
 80402a0:	40d4      	lsrs	r4, r2
 80402a2:	2300      	movs	r3, #0
 80402a4:	e9c5 4300 	strd	r4, r3, [r5]
 80402a8:	4631      	mov	r1, r6
 80402aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80402ae:	b902      	cbnz	r2, 80402b2 <__udivmoddi4+0xaa>
 80402b0:	deff      	udf	#255	; 0xff
 80402b2:	fab2 f282 	clz	r2, r2
 80402b6:	2a00      	cmp	r2, #0
 80402b8:	d150      	bne.n	804035c <__udivmoddi4+0x154>
 80402ba:	1bcb      	subs	r3, r1, r7
 80402bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80402c0:	fa1f f887 	uxth.w	r8, r7
 80402c4:	2601      	movs	r6, #1
 80402c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80402ca:	0c21      	lsrs	r1, r4, #16
 80402cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80402d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80402d4:	fb08 f30c 	mul.w	r3, r8, ip
 80402d8:	428b      	cmp	r3, r1
 80402da:	d907      	bls.n	80402ec <__udivmoddi4+0xe4>
 80402dc:	1879      	adds	r1, r7, r1
 80402de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80402e2:	d202      	bcs.n	80402ea <__udivmoddi4+0xe2>
 80402e4:	428b      	cmp	r3, r1
 80402e6:	f200 80e9 	bhi.w	80404bc <__udivmoddi4+0x2b4>
 80402ea:	4684      	mov	ip, r0
 80402ec:	1ac9      	subs	r1, r1, r3
 80402ee:	b2a3      	uxth	r3, r4
 80402f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80402f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80402f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80402fc:	fb08 f800 	mul.w	r8, r8, r0
 8040300:	45a0      	cmp	r8, r4
 8040302:	d907      	bls.n	8040314 <__udivmoddi4+0x10c>
 8040304:	193c      	adds	r4, r7, r4
 8040306:	f100 33ff 	add.w	r3, r0, #4294967295
 804030a:	d202      	bcs.n	8040312 <__udivmoddi4+0x10a>
 804030c:	45a0      	cmp	r8, r4
 804030e:	f200 80d9 	bhi.w	80404c4 <__udivmoddi4+0x2bc>
 8040312:	4618      	mov	r0, r3
 8040314:	eba4 0408 	sub.w	r4, r4, r8
 8040318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 804031c:	e7bf      	b.n	804029e <__udivmoddi4+0x96>
 804031e:	428b      	cmp	r3, r1
 8040320:	d909      	bls.n	8040336 <__udivmoddi4+0x12e>
 8040322:	2d00      	cmp	r5, #0
 8040324:	f000 80b1 	beq.w	804048a <__udivmoddi4+0x282>
 8040328:	2600      	movs	r6, #0
 804032a:	e9c5 0100 	strd	r0, r1, [r5]
 804032e:	4630      	mov	r0, r6
 8040330:	4631      	mov	r1, r6
 8040332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040336:	fab3 f683 	clz	r6, r3
 804033a:	2e00      	cmp	r6, #0
 804033c:	d14a      	bne.n	80403d4 <__udivmoddi4+0x1cc>
 804033e:	428b      	cmp	r3, r1
 8040340:	d302      	bcc.n	8040348 <__udivmoddi4+0x140>
 8040342:	4282      	cmp	r2, r0
 8040344:	f200 80b8 	bhi.w	80404b8 <__udivmoddi4+0x2b0>
 8040348:	1a84      	subs	r4, r0, r2
 804034a:	eb61 0103 	sbc.w	r1, r1, r3
 804034e:	2001      	movs	r0, #1
 8040350:	468c      	mov	ip, r1
 8040352:	2d00      	cmp	r5, #0
 8040354:	d0a8      	beq.n	80402a8 <__udivmoddi4+0xa0>
 8040356:	e9c5 4c00 	strd	r4, ip, [r5]
 804035a:	e7a5      	b.n	80402a8 <__udivmoddi4+0xa0>
 804035c:	f1c2 0320 	rsb	r3, r2, #32
 8040360:	fa20 f603 	lsr.w	r6, r0, r3
 8040364:	4097      	lsls	r7, r2
 8040366:	fa01 f002 	lsl.w	r0, r1, r2
 804036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 804036e:	40d9      	lsrs	r1, r3
 8040370:	4330      	orrs	r0, r6
 8040372:	0c03      	lsrs	r3, r0, #16
 8040374:	fbb1 f6fe 	udiv	r6, r1, lr
 8040378:	fa1f f887 	uxth.w	r8, r7
 804037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8040380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8040384:	fb06 f108 	mul.w	r1, r6, r8
 8040388:	4299      	cmp	r1, r3
 804038a:	fa04 f402 	lsl.w	r4, r4, r2
 804038e:	d909      	bls.n	80403a4 <__udivmoddi4+0x19c>
 8040390:	18fb      	adds	r3, r7, r3
 8040392:	f106 3cff 	add.w	ip, r6, #4294967295
 8040396:	f080 808d 	bcs.w	80404b4 <__udivmoddi4+0x2ac>
 804039a:	4299      	cmp	r1, r3
 804039c:	f240 808a 	bls.w	80404b4 <__udivmoddi4+0x2ac>
 80403a0:	3e02      	subs	r6, #2
 80403a2:	443b      	add	r3, r7
 80403a4:	1a5b      	subs	r3, r3, r1
 80403a6:	b281      	uxth	r1, r0
 80403a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80403ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80403b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80403b4:	fb00 f308 	mul.w	r3, r0, r8
 80403b8:	428b      	cmp	r3, r1
 80403ba:	d907      	bls.n	80403cc <__udivmoddi4+0x1c4>
 80403bc:	1879      	adds	r1, r7, r1
 80403be:	f100 3cff 	add.w	ip, r0, #4294967295
 80403c2:	d273      	bcs.n	80404ac <__udivmoddi4+0x2a4>
 80403c4:	428b      	cmp	r3, r1
 80403c6:	d971      	bls.n	80404ac <__udivmoddi4+0x2a4>
 80403c8:	3802      	subs	r0, #2
 80403ca:	4439      	add	r1, r7
 80403cc:	1acb      	subs	r3, r1, r3
 80403ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80403d2:	e778      	b.n	80402c6 <__udivmoddi4+0xbe>
 80403d4:	f1c6 0c20 	rsb	ip, r6, #32
 80403d8:	fa03 f406 	lsl.w	r4, r3, r6
 80403dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80403e0:	431c      	orrs	r4, r3
 80403e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80403e6:	fa01 f306 	lsl.w	r3, r1, r6
 80403ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80403ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80403f2:	431f      	orrs	r7, r3
 80403f4:	0c3b      	lsrs	r3, r7, #16
 80403f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80403fa:	fa1f f884 	uxth.w	r8, r4
 80403fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8040402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8040406:	fb09 fa08 	mul.w	sl, r9, r8
 804040a:	458a      	cmp	sl, r1
 804040c:	fa02 f206 	lsl.w	r2, r2, r6
 8040410:	fa00 f306 	lsl.w	r3, r0, r6
 8040414:	d908      	bls.n	8040428 <__udivmoddi4+0x220>
 8040416:	1861      	adds	r1, r4, r1
 8040418:	f109 30ff 	add.w	r0, r9, #4294967295
 804041c:	d248      	bcs.n	80404b0 <__udivmoddi4+0x2a8>
 804041e:	458a      	cmp	sl, r1
 8040420:	d946      	bls.n	80404b0 <__udivmoddi4+0x2a8>
 8040422:	f1a9 0902 	sub.w	r9, r9, #2
 8040426:	4421      	add	r1, r4
 8040428:	eba1 010a 	sub.w	r1, r1, sl
 804042c:	b2bf      	uxth	r7, r7
 804042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8040432:	fb0e 1110 	mls	r1, lr, r0, r1
 8040436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 804043a:	fb00 f808 	mul.w	r8, r0, r8
 804043e:	45b8      	cmp	r8, r7
 8040440:	d907      	bls.n	8040452 <__udivmoddi4+0x24a>
 8040442:	19e7      	adds	r7, r4, r7
 8040444:	f100 31ff 	add.w	r1, r0, #4294967295
 8040448:	d22e      	bcs.n	80404a8 <__udivmoddi4+0x2a0>
 804044a:	45b8      	cmp	r8, r7
 804044c:	d92c      	bls.n	80404a8 <__udivmoddi4+0x2a0>
 804044e:	3802      	subs	r0, #2
 8040450:	4427      	add	r7, r4
 8040452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8040456:	eba7 0708 	sub.w	r7, r7, r8
 804045a:	fba0 8902 	umull	r8, r9, r0, r2
 804045e:	454f      	cmp	r7, r9
 8040460:	46c6      	mov	lr, r8
 8040462:	4649      	mov	r1, r9
 8040464:	d31a      	bcc.n	804049c <__udivmoddi4+0x294>
 8040466:	d017      	beq.n	8040498 <__udivmoddi4+0x290>
 8040468:	b15d      	cbz	r5, 8040482 <__udivmoddi4+0x27a>
 804046a:	ebb3 020e 	subs.w	r2, r3, lr
 804046e:	eb67 0701 	sbc.w	r7, r7, r1
 8040472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8040476:	40f2      	lsrs	r2, r6
 8040478:	ea4c 0202 	orr.w	r2, ip, r2
 804047c:	40f7      	lsrs	r7, r6
 804047e:	e9c5 2700 	strd	r2, r7, [r5]
 8040482:	2600      	movs	r6, #0
 8040484:	4631      	mov	r1, r6
 8040486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804048a:	462e      	mov	r6, r5
 804048c:	4628      	mov	r0, r5
 804048e:	e70b      	b.n	80402a8 <__udivmoddi4+0xa0>
 8040490:	4606      	mov	r6, r0
 8040492:	e6e9      	b.n	8040268 <__udivmoddi4+0x60>
 8040494:	4618      	mov	r0, r3
 8040496:	e6fd      	b.n	8040294 <__udivmoddi4+0x8c>
 8040498:	4543      	cmp	r3, r8
 804049a:	d2e5      	bcs.n	8040468 <__udivmoddi4+0x260>
 804049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80404a0:	eb69 0104 	sbc.w	r1, r9, r4
 80404a4:	3801      	subs	r0, #1
 80404a6:	e7df      	b.n	8040468 <__udivmoddi4+0x260>
 80404a8:	4608      	mov	r0, r1
 80404aa:	e7d2      	b.n	8040452 <__udivmoddi4+0x24a>
 80404ac:	4660      	mov	r0, ip
 80404ae:	e78d      	b.n	80403cc <__udivmoddi4+0x1c4>
 80404b0:	4681      	mov	r9, r0
 80404b2:	e7b9      	b.n	8040428 <__udivmoddi4+0x220>
 80404b4:	4666      	mov	r6, ip
 80404b6:	e775      	b.n	80403a4 <__udivmoddi4+0x19c>
 80404b8:	4630      	mov	r0, r6
 80404ba:	e74a      	b.n	8040352 <__udivmoddi4+0x14a>
 80404bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80404c0:	4439      	add	r1, r7
 80404c2:	e713      	b.n	80402ec <__udivmoddi4+0xe4>
 80404c4:	3802      	subs	r0, #2
 80404c6:	443c      	add	r4, r7
 80404c8:	e724      	b.n	8040314 <__udivmoddi4+0x10c>
 80404ca:	bf00      	nop

080404cc <__aeabi_idiv0>:
 80404cc:	4770      	bx	lr
 80404ce:	bf00      	nop

080404d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80404d0:	b580      	push	{r7, lr}
 80404d2:	b088      	sub	sp, #32
 80404d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80404d6:	f107 030c 	add.w	r3, r7, #12
 80404da:	2200      	movs	r2, #0
 80404dc:	601a      	str	r2, [r3, #0]
 80404de:	605a      	str	r2, [r3, #4]
 80404e0:	609a      	str	r2, [r3, #8]
 80404e2:	60da      	str	r2, [r3, #12]
 80404e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80404e6:	4b25      	ldr	r3, [pc, #148]	; (804057c <MX_GPIO_Init+0xac>)
 80404e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80404ea:	4a24      	ldr	r2, [pc, #144]	; (804057c <MX_GPIO_Init+0xac>)
 80404ec:	f043 0304 	orr.w	r3, r3, #4
 80404f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80404f2:	4b22      	ldr	r3, [pc, #136]	; (804057c <MX_GPIO_Init+0xac>)
 80404f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80404f6:	f003 0304 	and.w	r3, r3, #4
 80404fa:	60bb      	str	r3, [r7, #8]
 80404fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80404fe:	4b1f      	ldr	r3, [pc, #124]	; (804057c <MX_GPIO_Init+0xac>)
 8040500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040502:	4a1e      	ldr	r2, [pc, #120]	; (804057c <MX_GPIO_Init+0xac>)
 8040504:	f043 0301 	orr.w	r3, r3, #1
 8040508:	64d3      	str	r3, [r2, #76]	; 0x4c
 804050a:	4b1c      	ldr	r3, [pc, #112]	; (804057c <MX_GPIO_Init+0xac>)
 804050c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804050e:	f003 0301 	and.w	r3, r3, #1
 8040512:	607b      	str	r3, [r7, #4]
 8040514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8040516:	4b19      	ldr	r3, [pc, #100]	; (804057c <MX_GPIO_Init+0xac>)
 8040518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804051a:	4a18      	ldr	r2, [pc, #96]	; (804057c <MX_GPIO_Init+0xac>)
 804051c:	f043 0302 	orr.w	r3, r3, #2
 8040520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040522:	4b16      	ldr	r3, [pc, #88]	; (804057c <MX_GPIO_Init+0xac>)
 8040524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040526:	f003 0302 	and.w	r3, r3, #2
 804052a:	603b      	str	r3, [r7, #0]
 804052c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(user_led_GPIO_Port, user_led_Pin, GPIO_PIN_RESET);
 804052e:	2200      	movs	r2, #0
 8040530:	2120      	movs	r1, #32
 8040532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8040536:	f000 fe4d 	bl	80411d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = user_btn_Pin;
 804053a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 804053e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8040540:	2300      	movs	r3, #0
 8040542:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8040544:	2301      	movs	r3, #1
 8040546:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(user_btn_GPIO_Port, &GPIO_InitStruct);
 8040548:	f107 030c 	add.w	r3, r7, #12
 804054c:	4619      	mov	r1, r3
 804054e:	480c      	ldr	r0, [pc, #48]	; (8040580 <MX_GPIO_Init+0xb0>)
 8040550:	f000 fc96 	bl	8040e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = user_led_Pin;
 8040554:	2320      	movs	r3, #32
 8040556:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040558:	2301      	movs	r3, #1
 804055a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 804055c:	2300      	movs	r3, #0
 804055e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8040560:	2303      	movs	r3, #3
 8040562:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(user_led_GPIO_Port, &GPIO_InitStruct);
 8040564:	f107 030c 	add.w	r3, r7, #12
 8040568:	4619      	mov	r1, r3
 804056a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 804056e:	f000 fc87 	bl	8040e80 <HAL_GPIO_Init>

}
 8040572:	bf00      	nop
 8040574:	3720      	adds	r7, #32
 8040576:	46bd      	mov	sp, r7
 8040578:	bd80      	pop	{r7, pc}
 804057a:	bf00      	nop
 804057c:	40021000 	.word	0x40021000
 8040580:	48000800 	.word	0x48000800

08040584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8040584:	b5b0      	push	{r4, r5, r7, lr}
 8040586:	b08e      	sub	sp, #56	; 0x38
 8040588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	SCB->VTOR = (uint32_t)0x08040000;
 804058a:	4b1b      	ldr	r3, [pc, #108]	; (80405f8 <main+0x74>)
 804058c:	4a1b      	ldr	r2, [pc, #108]	; (80405fc <main+0x78>)
 804058e:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8040590:	f000 fa46 	bl	8040a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8040594:	f000 f838 	bl	8040608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8040598:	f7ff ff9a 	bl	80404d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 804059c:	f000 f962 	bl	8040864 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80405a0:	f000 f930 	bl	8040804 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  char info[ 50 ] = "\nThis is FOTA Firmware" ;
 80405a4:	4b16      	ldr	r3, [pc, #88]	; (8040600 <main+0x7c>)
 80405a6:	1d3c      	adds	r4, r7, #4
 80405a8:	461d      	mov	r5, r3
 80405aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80405ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80405ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80405b2:	6020      	str	r0, [r4, #0]
 80405b4:	3404      	adds	r4, #4
 80405b6:	8021      	strh	r1, [r4, #0]
 80405b8:	3402      	adds	r4, #2
 80405ba:	0c0b      	lsrs	r3, r1, #16
 80405bc:	7023      	strb	r3, [r4, #0]
 80405be:	f107 031b 	add.w	r3, r7, #27
 80405c2:	2200      	movs	r2, #0
 80405c4:	601a      	str	r2, [r3, #0]
 80405c6:	605a      	str	r2, [r3, #4]
 80405c8:	609a      	str	r2, [r3, #8]
 80405ca:	60da      	str	r2, [r3, #12]
 80405cc:	611a      	str	r2, [r3, #16]
 80405ce:	615a      	str	r2, [r3, #20]
 80405d0:	f8c3 2017 	str.w	r2, [r3, #23]
	  HAL_UART_Transmit( &huart2, (uint8_t*)info, strlen( info ), 2000 ) ;
 80405d4:	1d3b      	adds	r3, r7, #4
 80405d6:	4618      	mov	r0, r3
 80405d8:	f7ff fdf6 	bl	80401c8 <strlen>
 80405dc:	4603      	mov	r3, r0
 80405de:	b29a      	uxth	r2, r3
 80405e0:	1d39      	adds	r1, r7, #4
 80405e2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80405e6:	4807      	ldr	r0, [pc, #28]	; (8040604 <main+0x80>)
 80405e8:	f002 f966 	bl	80428b8 <HAL_UART_Transmit>
	  HAL_Delay( 1000 ) ;
 80405ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80405f0:	f000 fa92 	bl	8040b18 <HAL_Delay>
  {
 80405f4:	e7d6      	b.n	80405a4 <main+0x20>
 80405f6:	bf00      	nop
 80405f8:	e000ed00 	.word	0xe000ed00
 80405fc:	08040000 	.word	0x08040000
 8040600:	08043748 	.word	0x08043748
 8040604:	200000ac 	.word	0x200000ac

08040608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8040608:	b580      	push	{r7, lr}
 804060a:	b0b8      	sub	sp, #224	; 0xe0
 804060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 804060e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8040612:	2244      	movs	r2, #68	; 0x44
 8040614:	2100      	movs	r1, #0
 8040616:	4618      	mov	r0, r3
 8040618:	f003 f882 	bl	8043720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 804061c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8040620:	2200      	movs	r2, #0
 8040622:	601a      	str	r2, [r3, #0]
 8040624:	605a      	str	r2, [r3, #4]
 8040626:	609a      	str	r2, [r3, #8]
 8040628:	60da      	str	r2, [r3, #12]
 804062a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 804062c:	463b      	mov	r3, r7
 804062e:	2288      	movs	r2, #136	; 0x88
 8040630:	2100      	movs	r1, #0
 8040632:	4618      	mov	r0, r3
 8040634:	f003 f874 	bl	8043720 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8040638:	2302      	movs	r3, #2
 804063a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 804063e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8040642:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8040646:	2310      	movs	r3, #16
 8040648:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 804064c:	2300      	movs	r3, #0
 804064e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8040652:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8040656:	4618      	mov	r0, r3
 8040658:	f000 fe38 	bl	80412cc <HAL_RCC_OscConfig>
 804065c:	4603      	mov	r3, r0
 804065e:	2b00      	cmp	r3, #0
 8040660:	d001      	beq.n	8040666 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8040662:	f000 f836 	bl	80406d2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8040666:	230f      	movs	r3, #15
 8040668:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 804066c:	2301      	movs	r3, #1
 804066e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8040672:	2300      	movs	r3, #0
 8040674:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8040678:	2300      	movs	r3, #0
 804067a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 804067e:	2300      	movs	r3, #0
 8040680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8040684:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8040688:	2100      	movs	r1, #0
 804068a:	4618      	mov	r0, r3
 804068c:	f001 fa04 	bl	8041a98 <HAL_RCC_ClockConfig>
 8040690:	4603      	mov	r3, r0
 8040692:	2b00      	cmp	r3, #0
 8040694:	d001      	beq.n	804069a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8040696:	f000 f81c 	bl	80406d2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 804069a:	2303      	movs	r3, #3
 804069c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 804069e:	2300      	movs	r3, #0
 80406a0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80406a2:	2300      	movs	r3, #0
 80406a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80406a6:	463b      	mov	r3, r7
 80406a8:	4618      	mov	r0, r3
 80406aa:	f001 fbfb 	bl	8041ea4 <HAL_RCCEx_PeriphCLKConfig>
 80406ae:	4603      	mov	r3, r0
 80406b0:	2b00      	cmp	r3, #0
 80406b2:	d001      	beq.n	80406b8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80406b4:	f000 f80d 	bl	80406d2 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80406b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80406bc:	f000 fdb0 	bl	8041220 <HAL_PWREx_ControlVoltageScaling>
 80406c0:	4603      	mov	r3, r0
 80406c2:	2b00      	cmp	r3, #0
 80406c4:	d001      	beq.n	80406ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80406c6:	f000 f804 	bl	80406d2 <Error_Handler>
  }
}
 80406ca:	bf00      	nop
 80406cc:	37e0      	adds	r7, #224	; 0xe0
 80406ce:	46bd      	mov	sp, r7
 80406d0:	bd80      	pop	{r7, pc}

080406d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80406d2:	b480      	push	{r7}
 80406d4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80406d6:	b672      	cpsid	i
}
 80406d8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80406da:	e7fe      	b.n	80406da <Error_Handler+0x8>

080406dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80406dc:	b480      	push	{r7}
 80406de:	b083      	sub	sp, #12
 80406e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80406e2:	4b0f      	ldr	r3, [pc, #60]	; (8040720 <HAL_MspInit+0x44>)
 80406e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80406e6:	4a0e      	ldr	r2, [pc, #56]	; (8040720 <HAL_MspInit+0x44>)
 80406e8:	f043 0301 	orr.w	r3, r3, #1
 80406ec:	6613      	str	r3, [r2, #96]	; 0x60
 80406ee:	4b0c      	ldr	r3, [pc, #48]	; (8040720 <HAL_MspInit+0x44>)
 80406f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80406f2:	f003 0301 	and.w	r3, r3, #1
 80406f6:	607b      	str	r3, [r7, #4]
 80406f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80406fa:	4b09      	ldr	r3, [pc, #36]	; (8040720 <HAL_MspInit+0x44>)
 80406fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80406fe:	4a08      	ldr	r2, [pc, #32]	; (8040720 <HAL_MspInit+0x44>)
 8040700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040704:	6593      	str	r3, [r2, #88]	; 0x58
 8040706:	4b06      	ldr	r3, [pc, #24]	; (8040720 <HAL_MspInit+0x44>)
 8040708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804070a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804070e:	603b      	str	r3, [r7, #0]
 8040710:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8040712:	bf00      	nop
 8040714:	370c      	adds	r7, #12
 8040716:	46bd      	mov	sp, r7
 8040718:	f85d 7b04 	ldr.w	r7, [sp], #4
 804071c:	4770      	bx	lr
 804071e:	bf00      	nop
 8040720:	40021000 	.word	0x40021000

08040724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8040724:	b480      	push	{r7}
 8040726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8040728:	e7fe      	b.n	8040728 <NMI_Handler+0x4>

0804072a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 804072a:	b480      	push	{r7}
 804072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 804072e:	e7fe      	b.n	804072e <HardFault_Handler+0x4>

08040730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8040730:	b480      	push	{r7}
 8040732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8040734:	e7fe      	b.n	8040734 <MemManage_Handler+0x4>

08040736 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8040736:	b480      	push	{r7}
 8040738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 804073a:	e7fe      	b.n	804073a <BusFault_Handler+0x4>

0804073c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 804073c:	b480      	push	{r7}
 804073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8040740:	e7fe      	b.n	8040740 <UsageFault_Handler+0x4>

08040742 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8040742:	b480      	push	{r7}
 8040744:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8040746:	bf00      	nop
 8040748:	46bd      	mov	sp, r7
 804074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804074e:	4770      	bx	lr

08040750 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8040750:	b480      	push	{r7}
 8040752:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8040754:	bf00      	nop
 8040756:	46bd      	mov	sp, r7
 8040758:	f85d 7b04 	ldr.w	r7, [sp], #4
 804075c:	4770      	bx	lr

0804075e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 804075e:	b480      	push	{r7}
 8040760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8040762:	bf00      	nop
 8040764:	46bd      	mov	sp, r7
 8040766:	f85d 7b04 	ldr.w	r7, [sp], #4
 804076a:	4770      	bx	lr

0804076c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 804076c:	b580      	push	{r7, lr}
 804076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8040770:	f000 f9b2 	bl	8040ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8040774:	bf00      	nop
 8040776:	bd80      	pop	{r7, pc}

08040778 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8040778:	b580      	push	{r7, lr}
 804077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 804077c:	4802      	ldr	r0, [pc, #8]	; (8040788 <USART1_IRQHandler+0x10>)
 804077e:	f002 f92f 	bl	80429e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8040782:	bf00      	nop
 8040784:	bd80      	pop	{r7, pc}
 8040786:	bf00      	nop
 8040788:	20000028 	.word	0x20000028

0804078c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 804078c:	b580      	push	{r7, lr}
 804078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8040790:	4802      	ldr	r0, [pc, #8]	; (804079c <USART2_IRQHandler+0x10>)
 8040792:	f002 f925 	bl	80429e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8040796:	bf00      	nop
 8040798:	bd80      	pop	{r7, pc}
 804079a:	bf00      	nop
 804079c:	200000ac 	.word	0x200000ac

080407a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80407a0:	b480      	push	{r7}
 80407a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80407a4:	4b15      	ldr	r3, [pc, #84]	; (80407fc <SystemInit+0x5c>)
 80407a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80407aa:	4a14      	ldr	r2, [pc, #80]	; (80407fc <SystemInit+0x5c>)
 80407ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80407b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80407b4:	4b12      	ldr	r3, [pc, #72]	; (8040800 <SystemInit+0x60>)
 80407b6:	681b      	ldr	r3, [r3, #0]
 80407b8:	4a11      	ldr	r2, [pc, #68]	; (8040800 <SystemInit+0x60>)
 80407ba:	f043 0301 	orr.w	r3, r3, #1
 80407be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80407c0:	4b0f      	ldr	r3, [pc, #60]	; (8040800 <SystemInit+0x60>)
 80407c2:	2200      	movs	r2, #0
 80407c4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80407c6:	4b0e      	ldr	r3, [pc, #56]	; (8040800 <SystemInit+0x60>)
 80407c8:	681b      	ldr	r3, [r3, #0]
 80407ca:	4a0d      	ldr	r2, [pc, #52]	; (8040800 <SystemInit+0x60>)
 80407cc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80407d0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80407d4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80407d6:	4b0a      	ldr	r3, [pc, #40]	; (8040800 <SystemInit+0x60>)
 80407d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80407dc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80407de:	4b08      	ldr	r3, [pc, #32]	; (8040800 <SystemInit+0x60>)
 80407e0:	681b      	ldr	r3, [r3, #0]
 80407e2:	4a07      	ldr	r2, [pc, #28]	; (8040800 <SystemInit+0x60>)
 80407e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80407e8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80407ea:	4b05      	ldr	r3, [pc, #20]	; (8040800 <SystemInit+0x60>)
 80407ec:	2200      	movs	r2, #0
 80407ee:	619a      	str	r2, [r3, #24]
}
 80407f0:	bf00      	nop
 80407f2:	46bd      	mov	sp, r7
 80407f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80407f8:	4770      	bx	lr
 80407fa:	bf00      	nop
 80407fc:	e000ed00 	.word	0xe000ed00
 8040800:	40021000 	.word	0x40021000

08040804 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8040804:	b580      	push	{r7, lr}
 8040806:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8040808:	4b14      	ldr	r3, [pc, #80]	; (804085c <MX_USART1_UART_Init+0x58>)
 804080a:	4a15      	ldr	r2, [pc, #84]	; (8040860 <MX_USART1_UART_Init+0x5c>)
 804080c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 804080e:	4b13      	ldr	r3, [pc, #76]	; (804085c <MX_USART1_UART_Init+0x58>)
 8040810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8040814:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8040816:	4b11      	ldr	r3, [pc, #68]	; (804085c <MX_USART1_UART_Init+0x58>)
 8040818:	2200      	movs	r2, #0
 804081a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 804081c:	4b0f      	ldr	r3, [pc, #60]	; (804085c <MX_USART1_UART_Init+0x58>)
 804081e:	2200      	movs	r2, #0
 8040820:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8040822:	4b0e      	ldr	r3, [pc, #56]	; (804085c <MX_USART1_UART_Init+0x58>)
 8040824:	2200      	movs	r2, #0
 8040826:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8040828:	4b0c      	ldr	r3, [pc, #48]	; (804085c <MX_USART1_UART_Init+0x58>)
 804082a:	220c      	movs	r2, #12
 804082c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 804082e:	4b0b      	ldr	r3, [pc, #44]	; (804085c <MX_USART1_UART_Init+0x58>)
 8040830:	2200      	movs	r2, #0
 8040832:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8040834:	4b09      	ldr	r3, [pc, #36]	; (804085c <MX_USART1_UART_Init+0x58>)
 8040836:	2200      	movs	r2, #0
 8040838:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 804083a:	4b08      	ldr	r3, [pc, #32]	; (804085c <MX_USART1_UART_Init+0x58>)
 804083c:	2200      	movs	r2, #0
 804083e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8040840:	4b06      	ldr	r3, [pc, #24]	; (804085c <MX_USART1_UART_Init+0x58>)
 8040842:	2200      	movs	r2, #0
 8040844:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8040846:	4805      	ldr	r0, [pc, #20]	; (804085c <MX_USART1_UART_Init+0x58>)
 8040848:	f001 ffe8 	bl	804281c <HAL_UART_Init>
 804084c:	4603      	mov	r3, r0
 804084e:	2b00      	cmp	r3, #0
 8040850:	d001      	beq.n	8040856 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8040852:	f7ff ff3e 	bl	80406d2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8040856:	bf00      	nop
 8040858:	bd80      	pop	{r7, pc}
 804085a:	bf00      	nop
 804085c:	20000028 	.word	0x20000028
 8040860:	40013800 	.word	0x40013800

08040864 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8040864:	b580      	push	{r7, lr}
 8040866:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8040868:	4b14      	ldr	r3, [pc, #80]	; (80408bc <MX_USART2_UART_Init+0x58>)
 804086a:	4a15      	ldr	r2, [pc, #84]	; (80408c0 <MX_USART2_UART_Init+0x5c>)
 804086c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 804086e:	4b13      	ldr	r3, [pc, #76]	; (80408bc <MX_USART2_UART_Init+0x58>)
 8040870:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8040874:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8040876:	4b11      	ldr	r3, [pc, #68]	; (80408bc <MX_USART2_UART_Init+0x58>)
 8040878:	2200      	movs	r2, #0
 804087a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 804087c:	4b0f      	ldr	r3, [pc, #60]	; (80408bc <MX_USART2_UART_Init+0x58>)
 804087e:	2200      	movs	r2, #0
 8040880:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8040882:	4b0e      	ldr	r3, [pc, #56]	; (80408bc <MX_USART2_UART_Init+0x58>)
 8040884:	2200      	movs	r2, #0
 8040886:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8040888:	4b0c      	ldr	r3, [pc, #48]	; (80408bc <MX_USART2_UART_Init+0x58>)
 804088a:	220c      	movs	r2, #12
 804088c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 804088e:	4b0b      	ldr	r3, [pc, #44]	; (80408bc <MX_USART2_UART_Init+0x58>)
 8040890:	2200      	movs	r2, #0
 8040892:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8040894:	4b09      	ldr	r3, [pc, #36]	; (80408bc <MX_USART2_UART_Init+0x58>)
 8040896:	2200      	movs	r2, #0
 8040898:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 804089a:	4b08      	ldr	r3, [pc, #32]	; (80408bc <MX_USART2_UART_Init+0x58>)
 804089c:	2200      	movs	r2, #0
 804089e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80408a0:	4b06      	ldr	r3, [pc, #24]	; (80408bc <MX_USART2_UART_Init+0x58>)
 80408a2:	2200      	movs	r2, #0
 80408a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80408a6:	4805      	ldr	r0, [pc, #20]	; (80408bc <MX_USART2_UART_Init+0x58>)
 80408a8:	f001 ffb8 	bl	804281c <HAL_UART_Init>
 80408ac:	4603      	mov	r3, r0
 80408ae:	2b00      	cmp	r3, #0
 80408b0:	d001      	beq.n	80408b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80408b2:	f7ff ff0e 	bl	80406d2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80408b6:	bf00      	nop
 80408b8:	bd80      	pop	{r7, pc}
 80408ba:	bf00      	nop
 80408bc:	200000ac 	.word	0x200000ac
 80408c0:	40004400 	.word	0x40004400

080408c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80408c4:	b580      	push	{r7, lr}
 80408c6:	b08c      	sub	sp, #48	; 0x30
 80408c8:	af00      	add	r7, sp, #0
 80408ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80408cc:	f107 031c 	add.w	r3, r7, #28
 80408d0:	2200      	movs	r2, #0
 80408d2:	601a      	str	r2, [r3, #0]
 80408d4:	605a      	str	r2, [r3, #4]
 80408d6:	609a      	str	r2, [r3, #8]
 80408d8:	60da      	str	r2, [r3, #12]
 80408da:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80408dc:	687b      	ldr	r3, [r7, #4]
 80408de:	681b      	ldr	r3, [r3, #0]
 80408e0:	4a36      	ldr	r2, [pc, #216]	; (80409bc <HAL_UART_MspInit+0xf8>)
 80408e2:	4293      	cmp	r3, r2
 80408e4:	d130      	bne.n	8040948 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80408e6:	4b36      	ldr	r3, [pc, #216]	; (80409c0 <HAL_UART_MspInit+0xfc>)
 80408e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80408ea:	4a35      	ldr	r2, [pc, #212]	; (80409c0 <HAL_UART_MspInit+0xfc>)
 80408ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80408f0:	6613      	str	r3, [r2, #96]	; 0x60
 80408f2:	4b33      	ldr	r3, [pc, #204]	; (80409c0 <HAL_UART_MspInit+0xfc>)
 80408f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80408f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80408fa:	61bb      	str	r3, [r7, #24]
 80408fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80408fe:	4b30      	ldr	r3, [pc, #192]	; (80409c0 <HAL_UART_MspInit+0xfc>)
 8040900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040902:	4a2f      	ldr	r2, [pc, #188]	; (80409c0 <HAL_UART_MspInit+0xfc>)
 8040904:	f043 0302 	orr.w	r3, r3, #2
 8040908:	64d3      	str	r3, [r2, #76]	; 0x4c
 804090a:	4b2d      	ldr	r3, [pc, #180]	; (80409c0 <HAL_UART_MspInit+0xfc>)
 804090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804090e:	f003 0302 	and.w	r3, r3, #2
 8040912:	617b      	str	r3, [r7, #20]
 8040914:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SIM7600_TX_Pin|SIM7600_RX_Pin;
 8040916:	23c0      	movs	r3, #192	; 0xc0
 8040918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804091a:	2302      	movs	r3, #2
 804091c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804091e:	2300      	movs	r3, #0
 8040920:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8040922:	2303      	movs	r3, #3
 8040924:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8040926:	2307      	movs	r3, #7
 8040928:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804092a:	f107 031c 	add.w	r3, r7, #28
 804092e:	4619      	mov	r1, r3
 8040930:	4824      	ldr	r0, [pc, #144]	; (80409c4 <HAL_UART_MspInit+0x100>)
 8040932:	f000 faa5 	bl	8040e80 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8040936:	2200      	movs	r2, #0
 8040938:	2100      	movs	r1, #0
 804093a:	2025      	movs	r0, #37	; 0x25
 804093c:	f000 f9eb 	bl	8040d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8040940:	2025      	movs	r0, #37	; 0x25
 8040942:	f000 fa04 	bl	8040d4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8040946:	e035      	b.n	80409b4 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8040948:	687b      	ldr	r3, [r7, #4]
 804094a:	681b      	ldr	r3, [r3, #0]
 804094c:	4a1e      	ldr	r2, [pc, #120]	; (80409c8 <HAL_UART_MspInit+0x104>)
 804094e:	4293      	cmp	r3, r2
 8040950:	d130      	bne.n	80409b4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8040952:	4b1b      	ldr	r3, [pc, #108]	; (80409c0 <HAL_UART_MspInit+0xfc>)
 8040954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8040956:	4a1a      	ldr	r2, [pc, #104]	; (80409c0 <HAL_UART_MspInit+0xfc>)
 8040958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 804095c:	6593      	str	r3, [r2, #88]	; 0x58
 804095e:	4b18      	ldr	r3, [pc, #96]	; (80409c0 <HAL_UART_MspInit+0xfc>)
 8040960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8040962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8040966:	613b      	str	r3, [r7, #16]
 8040968:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 804096a:	4b15      	ldr	r3, [pc, #84]	; (80409c0 <HAL_UART_MspInit+0xfc>)
 804096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804096e:	4a14      	ldr	r2, [pc, #80]	; (80409c0 <HAL_UART_MspInit+0xfc>)
 8040970:	f043 0301 	orr.w	r3, r3, #1
 8040974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040976:	4b12      	ldr	r3, [pc, #72]	; (80409c0 <HAL_UART_MspInit+0xfc>)
 8040978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804097a:	f003 0301 	and.w	r3, r3, #1
 804097e:	60fb      	str	r3, [r7, #12]
 8040980:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TERMINAL_TX_Pin|TERMINAL_RX_Pin;
 8040982:	230c      	movs	r3, #12
 8040984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040986:	2302      	movs	r3, #2
 8040988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804098a:	2300      	movs	r3, #0
 804098c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804098e:	2303      	movs	r3, #3
 8040990:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8040992:	2307      	movs	r3, #7
 8040994:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8040996:	f107 031c 	add.w	r3, r7, #28
 804099a:	4619      	mov	r1, r3
 804099c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80409a0:	f000 fa6e 	bl	8040e80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80409a4:	2200      	movs	r2, #0
 80409a6:	2100      	movs	r1, #0
 80409a8:	2026      	movs	r0, #38	; 0x26
 80409aa:	f000 f9b4 	bl	8040d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80409ae:	2026      	movs	r0, #38	; 0x26
 80409b0:	f000 f9cd 	bl	8040d4e <HAL_NVIC_EnableIRQ>
}
 80409b4:	bf00      	nop
 80409b6:	3730      	adds	r7, #48	; 0x30
 80409b8:	46bd      	mov	sp, r7
 80409ba:	bd80      	pop	{r7, pc}
 80409bc:	40013800 	.word	0x40013800
 80409c0:	40021000 	.word	0x40021000
 80409c4:	48000400 	.word	0x48000400
 80409c8:	40004400 	.word	0x40004400

080409cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80409cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8040a04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80409d0:	f7ff fee6 	bl	80407a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80409d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80409d6:	e003      	b.n	80409e0 <LoopCopyDataInit>

080409d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80409d8:	4b0b      	ldr	r3, [pc, #44]	; (8040a08 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80409da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80409dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80409de:	3104      	adds	r1, #4

080409e0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80409e0:	480a      	ldr	r0, [pc, #40]	; (8040a0c <LoopForever+0xa>)
	ldr	r3, =_edata
 80409e2:	4b0b      	ldr	r3, [pc, #44]	; (8040a10 <LoopForever+0xe>)
	adds	r2, r0, r1
 80409e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80409e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80409e8:	d3f6      	bcc.n	80409d8 <CopyDataInit>
	ldr	r2, =_sbss
 80409ea:	4a0a      	ldr	r2, [pc, #40]	; (8040a14 <LoopForever+0x12>)
	b	LoopFillZerobss
 80409ec:	e002      	b.n	80409f4 <LoopFillZerobss>

080409ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80409ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80409f0:	f842 3b04 	str.w	r3, [r2], #4

080409f4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80409f4:	4b08      	ldr	r3, [pc, #32]	; (8040a18 <LoopForever+0x16>)
	cmp	r2, r3
 80409f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80409f8:	d3f9      	bcc.n	80409ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80409fa:	f002 fe6d 	bl	80436d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80409fe:	f7ff fdc1 	bl	8040584 <main>

08040a02 <LoopForever>:

LoopForever:
    b LoopForever
 8040a02:	e7fe      	b.n	8040a02 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8040a04:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8040a08:	080437d4 	.word	0x080437d4
	ldr	r0, =_sdata
 8040a0c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8040a10:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8040a14:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8040a18:	20000134 	.word	0x20000134

08040a1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8040a1c:	e7fe      	b.n	8040a1c <ADC1_2_IRQHandler>
	...

08040a20 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8040a20:	b580      	push	{r7, lr}
 8040a22:	b082      	sub	sp, #8
 8040a24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8040a26:	2300      	movs	r3, #0
 8040a28:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8040a2a:	4b0c      	ldr	r3, [pc, #48]	; (8040a5c <HAL_Init+0x3c>)
 8040a2c:	681b      	ldr	r3, [r3, #0]
 8040a2e:	4a0b      	ldr	r2, [pc, #44]	; (8040a5c <HAL_Init+0x3c>)
 8040a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8040a34:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8040a36:	2003      	movs	r0, #3
 8040a38:	f000 f962 	bl	8040d00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8040a3c:	2000      	movs	r0, #0
 8040a3e:	f000 f80f 	bl	8040a60 <HAL_InitTick>
 8040a42:	4603      	mov	r3, r0
 8040a44:	2b00      	cmp	r3, #0
 8040a46:	d002      	beq.n	8040a4e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8040a48:	2301      	movs	r3, #1
 8040a4a:	71fb      	strb	r3, [r7, #7]
 8040a4c:	e001      	b.n	8040a52 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8040a4e:	f7ff fe45 	bl	80406dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8040a52:	79fb      	ldrb	r3, [r7, #7]
}
 8040a54:	4618      	mov	r0, r3
 8040a56:	3708      	adds	r7, #8
 8040a58:	46bd      	mov	sp, r7
 8040a5a:	bd80      	pop	{r7, pc}
 8040a5c:	40022000 	.word	0x40022000

08040a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040a60:	b580      	push	{r7, lr}
 8040a62:	b084      	sub	sp, #16
 8040a64:	af00      	add	r7, sp, #0
 8040a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8040a68:	2300      	movs	r3, #0
 8040a6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8040a6c:	4b17      	ldr	r3, [pc, #92]	; (8040acc <HAL_InitTick+0x6c>)
 8040a6e:	781b      	ldrb	r3, [r3, #0]
 8040a70:	2b00      	cmp	r3, #0
 8040a72:	d023      	beq.n	8040abc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8040a74:	4b16      	ldr	r3, [pc, #88]	; (8040ad0 <HAL_InitTick+0x70>)
 8040a76:	681a      	ldr	r2, [r3, #0]
 8040a78:	4b14      	ldr	r3, [pc, #80]	; (8040acc <HAL_InitTick+0x6c>)
 8040a7a:	781b      	ldrb	r3, [r3, #0]
 8040a7c:	4619      	mov	r1, r3
 8040a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8040a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8040a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8040a8a:	4618      	mov	r0, r3
 8040a8c:	f000 f96d 	bl	8040d6a <HAL_SYSTICK_Config>
 8040a90:	4603      	mov	r3, r0
 8040a92:	2b00      	cmp	r3, #0
 8040a94:	d10f      	bne.n	8040ab6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8040a96:	687b      	ldr	r3, [r7, #4]
 8040a98:	2b0f      	cmp	r3, #15
 8040a9a:	d809      	bhi.n	8040ab0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8040a9c:	2200      	movs	r2, #0
 8040a9e:	6879      	ldr	r1, [r7, #4]
 8040aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8040aa4:	f000 f937 	bl	8040d16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8040aa8:	4a0a      	ldr	r2, [pc, #40]	; (8040ad4 <HAL_InitTick+0x74>)
 8040aaa:	687b      	ldr	r3, [r7, #4]
 8040aac:	6013      	str	r3, [r2, #0]
 8040aae:	e007      	b.n	8040ac0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8040ab0:	2301      	movs	r3, #1
 8040ab2:	73fb      	strb	r3, [r7, #15]
 8040ab4:	e004      	b.n	8040ac0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8040ab6:	2301      	movs	r3, #1
 8040ab8:	73fb      	strb	r3, [r7, #15]
 8040aba:	e001      	b.n	8040ac0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8040abc:	2301      	movs	r3, #1
 8040abe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8040ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8040ac2:	4618      	mov	r0, r3
 8040ac4:	3710      	adds	r7, #16
 8040ac6:	46bd      	mov	sp, r7
 8040ac8:	bd80      	pop	{r7, pc}
 8040aca:	bf00      	nop
 8040acc:	20000008 	.word	0x20000008
 8040ad0:	20000000 	.word	0x20000000
 8040ad4:	20000004 	.word	0x20000004

08040ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8040ad8:	b480      	push	{r7}
 8040ada:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8040adc:	4b06      	ldr	r3, [pc, #24]	; (8040af8 <HAL_IncTick+0x20>)
 8040ade:	781b      	ldrb	r3, [r3, #0]
 8040ae0:	461a      	mov	r2, r3
 8040ae2:	4b06      	ldr	r3, [pc, #24]	; (8040afc <HAL_IncTick+0x24>)
 8040ae4:	681b      	ldr	r3, [r3, #0]
 8040ae6:	4413      	add	r3, r2
 8040ae8:	4a04      	ldr	r2, [pc, #16]	; (8040afc <HAL_IncTick+0x24>)
 8040aea:	6013      	str	r3, [r2, #0]
}
 8040aec:	bf00      	nop
 8040aee:	46bd      	mov	sp, r7
 8040af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040af4:	4770      	bx	lr
 8040af6:	bf00      	nop
 8040af8:	20000008 	.word	0x20000008
 8040afc:	20000130 	.word	0x20000130

08040b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040b00:	b480      	push	{r7}
 8040b02:	af00      	add	r7, sp, #0
  return uwTick;
 8040b04:	4b03      	ldr	r3, [pc, #12]	; (8040b14 <HAL_GetTick+0x14>)
 8040b06:	681b      	ldr	r3, [r3, #0]
}
 8040b08:	4618      	mov	r0, r3
 8040b0a:	46bd      	mov	sp, r7
 8040b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b10:	4770      	bx	lr
 8040b12:	bf00      	nop
 8040b14:	20000130 	.word	0x20000130

08040b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8040b18:	b580      	push	{r7, lr}
 8040b1a:	b084      	sub	sp, #16
 8040b1c:	af00      	add	r7, sp, #0
 8040b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8040b20:	f7ff ffee 	bl	8040b00 <HAL_GetTick>
 8040b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8040b26:	687b      	ldr	r3, [r7, #4]
 8040b28:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8040b2a:	68fb      	ldr	r3, [r7, #12]
 8040b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8040b30:	d005      	beq.n	8040b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8040b32:	4b0a      	ldr	r3, [pc, #40]	; (8040b5c <HAL_Delay+0x44>)
 8040b34:	781b      	ldrb	r3, [r3, #0]
 8040b36:	461a      	mov	r2, r3
 8040b38:	68fb      	ldr	r3, [r7, #12]
 8040b3a:	4413      	add	r3, r2
 8040b3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8040b3e:	bf00      	nop
 8040b40:	f7ff ffde 	bl	8040b00 <HAL_GetTick>
 8040b44:	4602      	mov	r2, r0
 8040b46:	68bb      	ldr	r3, [r7, #8]
 8040b48:	1ad3      	subs	r3, r2, r3
 8040b4a:	68fa      	ldr	r2, [r7, #12]
 8040b4c:	429a      	cmp	r2, r3
 8040b4e:	d8f7      	bhi.n	8040b40 <HAL_Delay+0x28>
  {
  }
}
 8040b50:	bf00      	nop
 8040b52:	bf00      	nop
 8040b54:	3710      	adds	r7, #16
 8040b56:	46bd      	mov	sp, r7
 8040b58:	bd80      	pop	{r7, pc}
 8040b5a:	bf00      	nop
 8040b5c:	20000008 	.word	0x20000008

08040b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040b60:	b480      	push	{r7}
 8040b62:	b085      	sub	sp, #20
 8040b64:	af00      	add	r7, sp, #0
 8040b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8040b68:	687b      	ldr	r3, [r7, #4]
 8040b6a:	f003 0307 	and.w	r3, r3, #7
 8040b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040b70:	4b0c      	ldr	r3, [pc, #48]	; (8040ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8040b72:	68db      	ldr	r3, [r3, #12]
 8040b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8040b76:	68ba      	ldr	r2, [r7, #8]
 8040b78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8040b7c:	4013      	ands	r3, r2
 8040b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8040b80:	68fb      	ldr	r3, [r7, #12]
 8040b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040b84:	68bb      	ldr	r3, [r7, #8]
 8040b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8040b88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8040b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8040b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8040b92:	4a04      	ldr	r2, [pc, #16]	; (8040ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8040b94:	68bb      	ldr	r3, [r7, #8]
 8040b96:	60d3      	str	r3, [r2, #12]
}
 8040b98:	bf00      	nop
 8040b9a:	3714      	adds	r7, #20
 8040b9c:	46bd      	mov	sp, r7
 8040b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040ba2:	4770      	bx	lr
 8040ba4:	e000ed00 	.word	0xe000ed00

08040ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8040ba8:	b480      	push	{r7}
 8040baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8040bac:	4b04      	ldr	r3, [pc, #16]	; (8040bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8040bae:	68db      	ldr	r3, [r3, #12]
 8040bb0:	0a1b      	lsrs	r3, r3, #8
 8040bb2:	f003 0307 	and.w	r3, r3, #7
}
 8040bb6:	4618      	mov	r0, r3
 8040bb8:	46bd      	mov	sp, r7
 8040bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040bbe:	4770      	bx	lr
 8040bc0:	e000ed00 	.word	0xe000ed00

08040bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8040bc4:	b480      	push	{r7}
 8040bc6:	b083      	sub	sp, #12
 8040bc8:	af00      	add	r7, sp, #0
 8040bca:	4603      	mov	r3, r0
 8040bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040bd2:	2b00      	cmp	r3, #0
 8040bd4:	db0b      	blt.n	8040bee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8040bd6:	79fb      	ldrb	r3, [r7, #7]
 8040bd8:	f003 021f 	and.w	r2, r3, #31
 8040bdc:	4907      	ldr	r1, [pc, #28]	; (8040bfc <__NVIC_EnableIRQ+0x38>)
 8040bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040be2:	095b      	lsrs	r3, r3, #5
 8040be4:	2001      	movs	r0, #1
 8040be6:	fa00 f202 	lsl.w	r2, r0, r2
 8040bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8040bee:	bf00      	nop
 8040bf0:	370c      	adds	r7, #12
 8040bf2:	46bd      	mov	sp, r7
 8040bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040bf8:	4770      	bx	lr
 8040bfa:	bf00      	nop
 8040bfc:	e000e100 	.word	0xe000e100

08040c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8040c00:	b480      	push	{r7}
 8040c02:	b083      	sub	sp, #12
 8040c04:	af00      	add	r7, sp, #0
 8040c06:	4603      	mov	r3, r0
 8040c08:	6039      	str	r1, [r7, #0]
 8040c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040c10:	2b00      	cmp	r3, #0
 8040c12:	db0a      	blt.n	8040c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040c14:	683b      	ldr	r3, [r7, #0]
 8040c16:	b2da      	uxtb	r2, r3
 8040c18:	490c      	ldr	r1, [pc, #48]	; (8040c4c <__NVIC_SetPriority+0x4c>)
 8040c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040c1e:	0112      	lsls	r2, r2, #4
 8040c20:	b2d2      	uxtb	r2, r2
 8040c22:	440b      	add	r3, r1
 8040c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8040c28:	e00a      	b.n	8040c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040c2a:	683b      	ldr	r3, [r7, #0]
 8040c2c:	b2da      	uxtb	r2, r3
 8040c2e:	4908      	ldr	r1, [pc, #32]	; (8040c50 <__NVIC_SetPriority+0x50>)
 8040c30:	79fb      	ldrb	r3, [r7, #7]
 8040c32:	f003 030f 	and.w	r3, r3, #15
 8040c36:	3b04      	subs	r3, #4
 8040c38:	0112      	lsls	r2, r2, #4
 8040c3a:	b2d2      	uxtb	r2, r2
 8040c3c:	440b      	add	r3, r1
 8040c3e:	761a      	strb	r2, [r3, #24]
}
 8040c40:	bf00      	nop
 8040c42:	370c      	adds	r7, #12
 8040c44:	46bd      	mov	sp, r7
 8040c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c4a:	4770      	bx	lr
 8040c4c:	e000e100 	.word	0xe000e100
 8040c50:	e000ed00 	.word	0xe000ed00

08040c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040c54:	b480      	push	{r7}
 8040c56:	b089      	sub	sp, #36	; 0x24
 8040c58:	af00      	add	r7, sp, #0
 8040c5a:	60f8      	str	r0, [r7, #12]
 8040c5c:	60b9      	str	r1, [r7, #8]
 8040c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8040c60:	68fb      	ldr	r3, [r7, #12]
 8040c62:	f003 0307 	and.w	r3, r3, #7
 8040c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8040c68:	69fb      	ldr	r3, [r7, #28]
 8040c6a:	f1c3 0307 	rsb	r3, r3, #7
 8040c6e:	2b04      	cmp	r3, #4
 8040c70:	bf28      	it	cs
 8040c72:	2304      	movcs	r3, #4
 8040c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8040c76:	69fb      	ldr	r3, [r7, #28]
 8040c78:	3304      	adds	r3, #4
 8040c7a:	2b06      	cmp	r3, #6
 8040c7c:	d902      	bls.n	8040c84 <NVIC_EncodePriority+0x30>
 8040c7e:	69fb      	ldr	r3, [r7, #28]
 8040c80:	3b03      	subs	r3, #3
 8040c82:	e000      	b.n	8040c86 <NVIC_EncodePriority+0x32>
 8040c84:	2300      	movs	r3, #0
 8040c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040c88:	f04f 32ff 	mov.w	r2, #4294967295
 8040c8c:	69bb      	ldr	r3, [r7, #24]
 8040c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8040c92:	43da      	mvns	r2, r3
 8040c94:	68bb      	ldr	r3, [r7, #8]
 8040c96:	401a      	ands	r2, r3
 8040c98:	697b      	ldr	r3, [r7, #20]
 8040c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8040c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8040ca0:	697b      	ldr	r3, [r7, #20]
 8040ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8040ca6:	43d9      	mvns	r1, r3
 8040ca8:	687b      	ldr	r3, [r7, #4]
 8040caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040cac:	4313      	orrs	r3, r2
         );
}
 8040cae:	4618      	mov	r0, r3
 8040cb0:	3724      	adds	r7, #36	; 0x24
 8040cb2:	46bd      	mov	sp, r7
 8040cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040cb8:	4770      	bx	lr
	...

08040cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8040cbc:	b580      	push	{r7, lr}
 8040cbe:	b082      	sub	sp, #8
 8040cc0:	af00      	add	r7, sp, #0
 8040cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8040cc4:	687b      	ldr	r3, [r7, #4]
 8040cc6:	3b01      	subs	r3, #1
 8040cc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8040ccc:	d301      	bcc.n	8040cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8040cce:	2301      	movs	r3, #1
 8040cd0:	e00f      	b.n	8040cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8040cd2:	4a0a      	ldr	r2, [pc, #40]	; (8040cfc <SysTick_Config+0x40>)
 8040cd4:	687b      	ldr	r3, [r7, #4]
 8040cd6:	3b01      	subs	r3, #1
 8040cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8040cda:	210f      	movs	r1, #15
 8040cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8040ce0:	f7ff ff8e 	bl	8040c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8040ce4:	4b05      	ldr	r3, [pc, #20]	; (8040cfc <SysTick_Config+0x40>)
 8040ce6:	2200      	movs	r2, #0
 8040ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8040cea:	4b04      	ldr	r3, [pc, #16]	; (8040cfc <SysTick_Config+0x40>)
 8040cec:	2207      	movs	r2, #7
 8040cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8040cf0:	2300      	movs	r3, #0
}
 8040cf2:	4618      	mov	r0, r3
 8040cf4:	3708      	adds	r7, #8
 8040cf6:	46bd      	mov	sp, r7
 8040cf8:	bd80      	pop	{r7, pc}
 8040cfa:	bf00      	nop
 8040cfc:	e000e010 	.word	0xe000e010

08040d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040d00:	b580      	push	{r7, lr}
 8040d02:	b082      	sub	sp, #8
 8040d04:	af00      	add	r7, sp, #0
 8040d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8040d08:	6878      	ldr	r0, [r7, #4]
 8040d0a:	f7ff ff29 	bl	8040b60 <__NVIC_SetPriorityGrouping>
}
 8040d0e:	bf00      	nop
 8040d10:	3708      	adds	r7, #8
 8040d12:	46bd      	mov	sp, r7
 8040d14:	bd80      	pop	{r7, pc}

08040d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040d16:	b580      	push	{r7, lr}
 8040d18:	b086      	sub	sp, #24
 8040d1a:	af00      	add	r7, sp, #0
 8040d1c:	4603      	mov	r3, r0
 8040d1e:	60b9      	str	r1, [r7, #8]
 8040d20:	607a      	str	r2, [r7, #4]
 8040d22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8040d24:	2300      	movs	r3, #0
 8040d26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8040d28:	f7ff ff3e 	bl	8040ba8 <__NVIC_GetPriorityGrouping>
 8040d2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8040d2e:	687a      	ldr	r2, [r7, #4]
 8040d30:	68b9      	ldr	r1, [r7, #8]
 8040d32:	6978      	ldr	r0, [r7, #20]
 8040d34:	f7ff ff8e 	bl	8040c54 <NVIC_EncodePriority>
 8040d38:	4602      	mov	r2, r0
 8040d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8040d3e:	4611      	mov	r1, r2
 8040d40:	4618      	mov	r0, r3
 8040d42:	f7ff ff5d 	bl	8040c00 <__NVIC_SetPriority>
}
 8040d46:	bf00      	nop
 8040d48:	3718      	adds	r7, #24
 8040d4a:	46bd      	mov	sp, r7
 8040d4c:	bd80      	pop	{r7, pc}

08040d4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8040d4e:	b580      	push	{r7, lr}
 8040d50:	b082      	sub	sp, #8
 8040d52:	af00      	add	r7, sp, #0
 8040d54:	4603      	mov	r3, r0
 8040d56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8040d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040d5c:	4618      	mov	r0, r3
 8040d5e:	f7ff ff31 	bl	8040bc4 <__NVIC_EnableIRQ>
}
 8040d62:	bf00      	nop
 8040d64:	3708      	adds	r7, #8
 8040d66:	46bd      	mov	sp, r7
 8040d68:	bd80      	pop	{r7, pc}

08040d6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8040d6a:	b580      	push	{r7, lr}
 8040d6c:	b082      	sub	sp, #8
 8040d6e:	af00      	add	r7, sp, #0
 8040d70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8040d72:	6878      	ldr	r0, [r7, #4]
 8040d74:	f7ff ffa2 	bl	8040cbc <SysTick_Config>
 8040d78:	4603      	mov	r3, r0
}
 8040d7a:	4618      	mov	r0, r3
 8040d7c:	3708      	adds	r7, #8
 8040d7e:	46bd      	mov	sp, r7
 8040d80:	bd80      	pop	{r7, pc}

08040d82 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8040d82:	b480      	push	{r7}
 8040d84:	b085      	sub	sp, #20
 8040d86:	af00      	add	r7, sp, #0
 8040d88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8040d8a:	2300      	movs	r3, #0
 8040d8c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8040d8e:	687b      	ldr	r3, [r7, #4]
 8040d90:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8040d94:	b2db      	uxtb	r3, r3
 8040d96:	2b02      	cmp	r3, #2
 8040d98:	d008      	beq.n	8040dac <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8040d9a:	687b      	ldr	r3, [r7, #4]
 8040d9c:	2204      	movs	r2, #4
 8040d9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8040da0:	687b      	ldr	r3, [r7, #4]
 8040da2:	2200      	movs	r2, #0
 8040da4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8040da8:	2301      	movs	r3, #1
 8040daa:	e022      	b.n	8040df2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8040dac:	687b      	ldr	r3, [r7, #4]
 8040dae:	681b      	ldr	r3, [r3, #0]
 8040db0:	681a      	ldr	r2, [r3, #0]
 8040db2:	687b      	ldr	r3, [r7, #4]
 8040db4:	681b      	ldr	r3, [r3, #0]
 8040db6:	f022 020e 	bic.w	r2, r2, #14
 8040dba:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8040dbc:	687b      	ldr	r3, [r7, #4]
 8040dbe:	681b      	ldr	r3, [r3, #0]
 8040dc0:	681a      	ldr	r2, [r3, #0]
 8040dc2:	687b      	ldr	r3, [r7, #4]
 8040dc4:	681b      	ldr	r3, [r3, #0]
 8040dc6:	f022 0201 	bic.w	r2, r2, #1
 8040dca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8040dcc:	687b      	ldr	r3, [r7, #4]
 8040dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040dd0:	f003 021c 	and.w	r2, r3, #28
 8040dd4:	687b      	ldr	r3, [r7, #4]
 8040dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040dd8:	2101      	movs	r1, #1
 8040dda:	fa01 f202 	lsl.w	r2, r1, r2
 8040dde:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8040de0:	687b      	ldr	r3, [r7, #4]
 8040de2:	2201      	movs	r2, #1
 8040de4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8040de8:	687b      	ldr	r3, [r7, #4]
 8040dea:	2200      	movs	r2, #0
 8040dec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8040df0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8040df2:	4618      	mov	r0, r3
 8040df4:	3714      	adds	r7, #20
 8040df6:	46bd      	mov	sp, r7
 8040df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040dfc:	4770      	bx	lr

08040dfe <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8040dfe:	b580      	push	{r7, lr}
 8040e00:	b084      	sub	sp, #16
 8040e02:	af00      	add	r7, sp, #0
 8040e04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8040e06:	2300      	movs	r3, #0
 8040e08:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8040e0a:	687b      	ldr	r3, [r7, #4]
 8040e0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8040e10:	b2db      	uxtb	r3, r3
 8040e12:	2b02      	cmp	r3, #2
 8040e14:	d005      	beq.n	8040e22 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8040e16:	687b      	ldr	r3, [r7, #4]
 8040e18:	2204      	movs	r2, #4
 8040e1a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8040e1c:	2301      	movs	r3, #1
 8040e1e:	73fb      	strb	r3, [r7, #15]
 8040e20:	e029      	b.n	8040e76 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8040e22:	687b      	ldr	r3, [r7, #4]
 8040e24:	681b      	ldr	r3, [r3, #0]
 8040e26:	681a      	ldr	r2, [r3, #0]
 8040e28:	687b      	ldr	r3, [r7, #4]
 8040e2a:	681b      	ldr	r3, [r3, #0]
 8040e2c:	f022 020e 	bic.w	r2, r2, #14
 8040e30:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8040e32:	687b      	ldr	r3, [r7, #4]
 8040e34:	681b      	ldr	r3, [r3, #0]
 8040e36:	681a      	ldr	r2, [r3, #0]
 8040e38:	687b      	ldr	r3, [r7, #4]
 8040e3a:	681b      	ldr	r3, [r3, #0]
 8040e3c:	f022 0201 	bic.w	r2, r2, #1
 8040e40:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8040e42:	687b      	ldr	r3, [r7, #4]
 8040e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040e46:	f003 021c 	and.w	r2, r3, #28
 8040e4a:	687b      	ldr	r3, [r7, #4]
 8040e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040e4e:	2101      	movs	r1, #1
 8040e50:	fa01 f202 	lsl.w	r2, r1, r2
 8040e54:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8040e56:	687b      	ldr	r3, [r7, #4]
 8040e58:	2201      	movs	r2, #1
 8040e5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8040e5e:	687b      	ldr	r3, [r7, #4]
 8040e60:	2200      	movs	r2, #0
 8040e62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8040e66:	687b      	ldr	r3, [r7, #4]
 8040e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8040e6a:	2b00      	cmp	r3, #0
 8040e6c:	d003      	beq.n	8040e76 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8040e6e:	687b      	ldr	r3, [r7, #4]
 8040e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8040e72:	6878      	ldr	r0, [r7, #4]
 8040e74:	4798      	blx	r3
    }
  }
  return status;
 8040e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8040e78:	4618      	mov	r0, r3
 8040e7a:	3710      	adds	r7, #16
 8040e7c:	46bd      	mov	sp, r7
 8040e7e:	bd80      	pop	{r7, pc}

08040e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8040e80:	b480      	push	{r7}
 8040e82:	b087      	sub	sp, #28
 8040e84:	af00      	add	r7, sp, #0
 8040e86:	6078      	str	r0, [r7, #4]
 8040e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8040e8a:	2300      	movs	r3, #0
 8040e8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8040e8e:	e17f      	b.n	8041190 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8040e90:	683b      	ldr	r3, [r7, #0]
 8040e92:	681a      	ldr	r2, [r3, #0]
 8040e94:	2101      	movs	r1, #1
 8040e96:	697b      	ldr	r3, [r7, #20]
 8040e98:	fa01 f303 	lsl.w	r3, r1, r3
 8040e9c:	4013      	ands	r3, r2
 8040e9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8040ea0:	68fb      	ldr	r3, [r7, #12]
 8040ea2:	2b00      	cmp	r3, #0
 8040ea4:	f000 8171 	beq.w	804118a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8040ea8:	683b      	ldr	r3, [r7, #0]
 8040eaa:	685b      	ldr	r3, [r3, #4]
 8040eac:	2b01      	cmp	r3, #1
 8040eae:	d00b      	beq.n	8040ec8 <HAL_GPIO_Init+0x48>
 8040eb0:	683b      	ldr	r3, [r7, #0]
 8040eb2:	685b      	ldr	r3, [r3, #4]
 8040eb4:	2b02      	cmp	r3, #2
 8040eb6:	d007      	beq.n	8040ec8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8040eb8:	683b      	ldr	r3, [r7, #0]
 8040eba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8040ebc:	2b11      	cmp	r3, #17
 8040ebe:	d003      	beq.n	8040ec8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8040ec0:	683b      	ldr	r3, [r7, #0]
 8040ec2:	685b      	ldr	r3, [r3, #4]
 8040ec4:	2b12      	cmp	r3, #18
 8040ec6:	d130      	bne.n	8040f2a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8040ec8:	687b      	ldr	r3, [r7, #4]
 8040eca:	689b      	ldr	r3, [r3, #8]
 8040ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8040ece:	697b      	ldr	r3, [r7, #20]
 8040ed0:	005b      	lsls	r3, r3, #1
 8040ed2:	2203      	movs	r2, #3
 8040ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8040ed8:	43db      	mvns	r3, r3
 8040eda:	693a      	ldr	r2, [r7, #16]
 8040edc:	4013      	ands	r3, r2
 8040ede:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8040ee0:	683b      	ldr	r3, [r7, #0]
 8040ee2:	68da      	ldr	r2, [r3, #12]
 8040ee4:	697b      	ldr	r3, [r7, #20]
 8040ee6:	005b      	lsls	r3, r3, #1
 8040ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8040eec:	693a      	ldr	r2, [r7, #16]
 8040eee:	4313      	orrs	r3, r2
 8040ef0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8040ef2:	687b      	ldr	r3, [r7, #4]
 8040ef4:	693a      	ldr	r2, [r7, #16]
 8040ef6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8040ef8:	687b      	ldr	r3, [r7, #4]
 8040efa:	685b      	ldr	r3, [r3, #4]
 8040efc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8040efe:	2201      	movs	r2, #1
 8040f00:	697b      	ldr	r3, [r7, #20]
 8040f02:	fa02 f303 	lsl.w	r3, r2, r3
 8040f06:	43db      	mvns	r3, r3
 8040f08:	693a      	ldr	r2, [r7, #16]
 8040f0a:	4013      	ands	r3, r2
 8040f0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8040f0e:	683b      	ldr	r3, [r7, #0]
 8040f10:	685b      	ldr	r3, [r3, #4]
 8040f12:	091b      	lsrs	r3, r3, #4
 8040f14:	f003 0201 	and.w	r2, r3, #1
 8040f18:	697b      	ldr	r3, [r7, #20]
 8040f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8040f1e:	693a      	ldr	r2, [r7, #16]
 8040f20:	4313      	orrs	r3, r2
 8040f22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8040f24:	687b      	ldr	r3, [r7, #4]
 8040f26:	693a      	ldr	r2, [r7, #16]
 8040f28:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8040f2a:	683b      	ldr	r3, [r7, #0]
 8040f2c:	685b      	ldr	r3, [r3, #4]
 8040f2e:	f003 0303 	and.w	r3, r3, #3
 8040f32:	2b03      	cmp	r3, #3
 8040f34:	d118      	bne.n	8040f68 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8040f36:	687b      	ldr	r3, [r7, #4]
 8040f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8040f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8040f3c:	2201      	movs	r2, #1
 8040f3e:	697b      	ldr	r3, [r7, #20]
 8040f40:	fa02 f303 	lsl.w	r3, r2, r3
 8040f44:	43db      	mvns	r3, r3
 8040f46:	693a      	ldr	r2, [r7, #16]
 8040f48:	4013      	ands	r3, r2
 8040f4a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8040f4c:	683b      	ldr	r3, [r7, #0]
 8040f4e:	685b      	ldr	r3, [r3, #4]
 8040f50:	08db      	lsrs	r3, r3, #3
 8040f52:	f003 0201 	and.w	r2, r3, #1
 8040f56:	697b      	ldr	r3, [r7, #20]
 8040f58:	fa02 f303 	lsl.w	r3, r2, r3
 8040f5c:	693a      	ldr	r2, [r7, #16]
 8040f5e:	4313      	orrs	r3, r2
 8040f60:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8040f62:	687b      	ldr	r3, [r7, #4]
 8040f64:	693a      	ldr	r2, [r7, #16]
 8040f66:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8040f68:	687b      	ldr	r3, [r7, #4]
 8040f6a:	68db      	ldr	r3, [r3, #12]
 8040f6c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8040f6e:	697b      	ldr	r3, [r7, #20]
 8040f70:	005b      	lsls	r3, r3, #1
 8040f72:	2203      	movs	r2, #3
 8040f74:	fa02 f303 	lsl.w	r3, r2, r3
 8040f78:	43db      	mvns	r3, r3
 8040f7a:	693a      	ldr	r2, [r7, #16]
 8040f7c:	4013      	ands	r3, r2
 8040f7e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8040f80:	683b      	ldr	r3, [r7, #0]
 8040f82:	689a      	ldr	r2, [r3, #8]
 8040f84:	697b      	ldr	r3, [r7, #20]
 8040f86:	005b      	lsls	r3, r3, #1
 8040f88:	fa02 f303 	lsl.w	r3, r2, r3
 8040f8c:	693a      	ldr	r2, [r7, #16]
 8040f8e:	4313      	orrs	r3, r2
 8040f90:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8040f92:	687b      	ldr	r3, [r7, #4]
 8040f94:	693a      	ldr	r2, [r7, #16]
 8040f96:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8040f98:	683b      	ldr	r3, [r7, #0]
 8040f9a:	685b      	ldr	r3, [r3, #4]
 8040f9c:	2b02      	cmp	r3, #2
 8040f9e:	d003      	beq.n	8040fa8 <HAL_GPIO_Init+0x128>
 8040fa0:	683b      	ldr	r3, [r7, #0]
 8040fa2:	685b      	ldr	r3, [r3, #4]
 8040fa4:	2b12      	cmp	r3, #18
 8040fa6:	d123      	bne.n	8040ff0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8040fa8:	697b      	ldr	r3, [r7, #20]
 8040faa:	08da      	lsrs	r2, r3, #3
 8040fac:	687b      	ldr	r3, [r7, #4]
 8040fae:	3208      	adds	r2, #8
 8040fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8040fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8040fb6:	697b      	ldr	r3, [r7, #20]
 8040fb8:	f003 0307 	and.w	r3, r3, #7
 8040fbc:	009b      	lsls	r3, r3, #2
 8040fbe:	220f      	movs	r2, #15
 8040fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8040fc4:	43db      	mvns	r3, r3
 8040fc6:	693a      	ldr	r2, [r7, #16]
 8040fc8:	4013      	ands	r3, r2
 8040fca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8040fcc:	683b      	ldr	r3, [r7, #0]
 8040fce:	691a      	ldr	r2, [r3, #16]
 8040fd0:	697b      	ldr	r3, [r7, #20]
 8040fd2:	f003 0307 	and.w	r3, r3, #7
 8040fd6:	009b      	lsls	r3, r3, #2
 8040fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8040fdc:	693a      	ldr	r2, [r7, #16]
 8040fde:	4313      	orrs	r3, r2
 8040fe0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8040fe2:	697b      	ldr	r3, [r7, #20]
 8040fe4:	08da      	lsrs	r2, r3, #3
 8040fe6:	687b      	ldr	r3, [r7, #4]
 8040fe8:	3208      	adds	r2, #8
 8040fea:	6939      	ldr	r1, [r7, #16]
 8040fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8040ff0:	687b      	ldr	r3, [r7, #4]
 8040ff2:	681b      	ldr	r3, [r3, #0]
 8040ff4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8040ff6:	697b      	ldr	r3, [r7, #20]
 8040ff8:	005b      	lsls	r3, r3, #1
 8040ffa:	2203      	movs	r2, #3
 8040ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8041000:	43db      	mvns	r3, r3
 8041002:	693a      	ldr	r2, [r7, #16]
 8041004:	4013      	ands	r3, r2
 8041006:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8041008:	683b      	ldr	r3, [r7, #0]
 804100a:	685b      	ldr	r3, [r3, #4]
 804100c:	f003 0203 	and.w	r2, r3, #3
 8041010:	697b      	ldr	r3, [r7, #20]
 8041012:	005b      	lsls	r3, r3, #1
 8041014:	fa02 f303 	lsl.w	r3, r2, r3
 8041018:	693a      	ldr	r2, [r7, #16]
 804101a:	4313      	orrs	r3, r2
 804101c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 804101e:	687b      	ldr	r3, [r7, #4]
 8041020:	693a      	ldr	r2, [r7, #16]
 8041022:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8041024:	683b      	ldr	r3, [r7, #0]
 8041026:	685b      	ldr	r3, [r3, #4]
 8041028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804102c:	2b00      	cmp	r3, #0
 804102e:	f000 80ac 	beq.w	804118a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8041032:	4b5f      	ldr	r3, [pc, #380]	; (80411b0 <HAL_GPIO_Init+0x330>)
 8041034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8041036:	4a5e      	ldr	r2, [pc, #376]	; (80411b0 <HAL_GPIO_Init+0x330>)
 8041038:	f043 0301 	orr.w	r3, r3, #1
 804103c:	6613      	str	r3, [r2, #96]	; 0x60
 804103e:	4b5c      	ldr	r3, [pc, #368]	; (80411b0 <HAL_GPIO_Init+0x330>)
 8041040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8041042:	f003 0301 	and.w	r3, r3, #1
 8041046:	60bb      	str	r3, [r7, #8]
 8041048:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 804104a:	4a5a      	ldr	r2, [pc, #360]	; (80411b4 <HAL_GPIO_Init+0x334>)
 804104c:	697b      	ldr	r3, [r7, #20]
 804104e:	089b      	lsrs	r3, r3, #2
 8041050:	3302      	adds	r3, #2
 8041052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8041056:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8041058:	697b      	ldr	r3, [r7, #20]
 804105a:	f003 0303 	and.w	r3, r3, #3
 804105e:	009b      	lsls	r3, r3, #2
 8041060:	220f      	movs	r2, #15
 8041062:	fa02 f303 	lsl.w	r3, r2, r3
 8041066:	43db      	mvns	r3, r3
 8041068:	693a      	ldr	r2, [r7, #16]
 804106a:	4013      	ands	r3, r2
 804106c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 804106e:	687b      	ldr	r3, [r7, #4]
 8041070:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8041074:	d025      	beq.n	80410c2 <HAL_GPIO_Init+0x242>
 8041076:	687b      	ldr	r3, [r7, #4]
 8041078:	4a4f      	ldr	r2, [pc, #316]	; (80411b8 <HAL_GPIO_Init+0x338>)
 804107a:	4293      	cmp	r3, r2
 804107c:	d01f      	beq.n	80410be <HAL_GPIO_Init+0x23e>
 804107e:	687b      	ldr	r3, [r7, #4]
 8041080:	4a4e      	ldr	r2, [pc, #312]	; (80411bc <HAL_GPIO_Init+0x33c>)
 8041082:	4293      	cmp	r3, r2
 8041084:	d019      	beq.n	80410ba <HAL_GPIO_Init+0x23a>
 8041086:	687b      	ldr	r3, [r7, #4]
 8041088:	4a4d      	ldr	r2, [pc, #308]	; (80411c0 <HAL_GPIO_Init+0x340>)
 804108a:	4293      	cmp	r3, r2
 804108c:	d013      	beq.n	80410b6 <HAL_GPIO_Init+0x236>
 804108e:	687b      	ldr	r3, [r7, #4]
 8041090:	4a4c      	ldr	r2, [pc, #304]	; (80411c4 <HAL_GPIO_Init+0x344>)
 8041092:	4293      	cmp	r3, r2
 8041094:	d00d      	beq.n	80410b2 <HAL_GPIO_Init+0x232>
 8041096:	687b      	ldr	r3, [r7, #4]
 8041098:	4a4b      	ldr	r2, [pc, #300]	; (80411c8 <HAL_GPIO_Init+0x348>)
 804109a:	4293      	cmp	r3, r2
 804109c:	d007      	beq.n	80410ae <HAL_GPIO_Init+0x22e>
 804109e:	687b      	ldr	r3, [r7, #4]
 80410a0:	4a4a      	ldr	r2, [pc, #296]	; (80411cc <HAL_GPIO_Init+0x34c>)
 80410a2:	4293      	cmp	r3, r2
 80410a4:	d101      	bne.n	80410aa <HAL_GPIO_Init+0x22a>
 80410a6:	2306      	movs	r3, #6
 80410a8:	e00c      	b.n	80410c4 <HAL_GPIO_Init+0x244>
 80410aa:	2307      	movs	r3, #7
 80410ac:	e00a      	b.n	80410c4 <HAL_GPIO_Init+0x244>
 80410ae:	2305      	movs	r3, #5
 80410b0:	e008      	b.n	80410c4 <HAL_GPIO_Init+0x244>
 80410b2:	2304      	movs	r3, #4
 80410b4:	e006      	b.n	80410c4 <HAL_GPIO_Init+0x244>
 80410b6:	2303      	movs	r3, #3
 80410b8:	e004      	b.n	80410c4 <HAL_GPIO_Init+0x244>
 80410ba:	2302      	movs	r3, #2
 80410bc:	e002      	b.n	80410c4 <HAL_GPIO_Init+0x244>
 80410be:	2301      	movs	r3, #1
 80410c0:	e000      	b.n	80410c4 <HAL_GPIO_Init+0x244>
 80410c2:	2300      	movs	r3, #0
 80410c4:	697a      	ldr	r2, [r7, #20]
 80410c6:	f002 0203 	and.w	r2, r2, #3
 80410ca:	0092      	lsls	r2, r2, #2
 80410cc:	4093      	lsls	r3, r2
 80410ce:	693a      	ldr	r2, [r7, #16]
 80410d0:	4313      	orrs	r3, r2
 80410d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80410d4:	4937      	ldr	r1, [pc, #220]	; (80411b4 <HAL_GPIO_Init+0x334>)
 80410d6:	697b      	ldr	r3, [r7, #20]
 80410d8:	089b      	lsrs	r3, r3, #2
 80410da:	3302      	adds	r3, #2
 80410dc:	693a      	ldr	r2, [r7, #16]
 80410de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80410e2:	4b3b      	ldr	r3, [pc, #236]	; (80411d0 <HAL_GPIO_Init+0x350>)
 80410e4:	681b      	ldr	r3, [r3, #0]
 80410e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80410e8:	68fb      	ldr	r3, [r7, #12]
 80410ea:	43db      	mvns	r3, r3
 80410ec:	693a      	ldr	r2, [r7, #16]
 80410ee:	4013      	ands	r3, r2
 80410f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80410f2:	683b      	ldr	r3, [r7, #0]
 80410f4:	685b      	ldr	r3, [r3, #4]
 80410f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80410fa:	2b00      	cmp	r3, #0
 80410fc:	d003      	beq.n	8041106 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80410fe:	693a      	ldr	r2, [r7, #16]
 8041100:	68fb      	ldr	r3, [r7, #12]
 8041102:	4313      	orrs	r3, r2
 8041104:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8041106:	4a32      	ldr	r2, [pc, #200]	; (80411d0 <HAL_GPIO_Init+0x350>)
 8041108:	693b      	ldr	r3, [r7, #16]
 804110a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 804110c:	4b30      	ldr	r3, [pc, #192]	; (80411d0 <HAL_GPIO_Init+0x350>)
 804110e:	685b      	ldr	r3, [r3, #4]
 8041110:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8041112:	68fb      	ldr	r3, [r7, #12]
 8041114:	43db      	mvns	r3, r3
 8041116:	693a      	ldr	r2, [r7, #16]
 8041118:	4013      	ands	r3, r2
 804111a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 804111c:	683b      	ldr	r3, [r7, #0]
 804111e:	685b      	ldr	r3, [r3, #4]
 8041120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041124:	2b00      	cmp	r3, #0
 8041126:	d003      	beq.n	8041130 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8041128:	693a      	ldr	r2, [r7, #16]
 804112a:	68fb      	ldr	r3, [r7, #12]
 804112c:	4313      	orrs	r3, r2
 804112e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8041130:	4a27      	ldr	r2, [pc, #156]	; (80411d0 <HAL_GPIO_Init+0x350>)
 8041132:	693b      	ldr	r3, [r7, #16]
 8041134:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8041136:	4b26      	ldr	r3, [pc, #152]	; (80411d0 <HAL_GPIO_Init+0x350>)
 8041138:	689b      	ldr	r3, [r3, #8]
 804113a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 804113c:	68fb      	ldr	r3, [r7, #12]
 804113e:	43db      	mvns	r3, r3
 8041140:	693a      	ldr	r2, [r7, #16]
 8041142:	4013      	ands	r3, r2
 8041144:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8041146:	683b      	ldr	r3, [r7, #0]
 8041148:	685b      	ldr	r3, [r3, #4]
 804114a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 804114e:	2b00      	cmp	r3, #0
 8041150:	d003      	beq.n	804115a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8041152:	693a      	ldr	r2, [r7, #16]
 8041154:	68fb      	ldr	r3, [r7, #12]
 8041156:	4313      	orrs	r3, r2
 8041158:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 804115a:	4a1d      	ldr	r2, [pc, #116]	; (80411d0 <HAL_GPIO_Init+0x350>)
 804115c:	693b      	ldr	r3, [r7, #16]
 804115e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8041160:	4b1b      	ldr	r3, [pc, #108]	; (80411d0 <HAL_GPIO_Init+0x350>)
 8041162:	68db      	ldr	r3, [r3, #12]
 8041164:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8041166:	68fb      	ldr	r3, [r7, #12]
 8041168:	43db      	mvns	r3, r3
 804116a:	693a      	ldr	r2, [r7, #16]
 804116c:	4013      	ands	r3, r2
 804116e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8041170:	683b      	ldr	r3, [r7, #0]
 8041172:	685b      	ldr	r3, [r3, #4]
 8041174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8041178:	2b00      	cmp	r3, #0
 804117a:	d003      	beq.n	8041184 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 804117c:	693a      	ldr	r2, [r7, #16]
 804117e:	68fb      	ldr	r3, [r7, #12]
 8041180:	4313      	orrs	r3, r2
 8041182:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8041184:	4a12      	ldr	r2, [pc, #72]	; (80411d0 <HAL_GPIO_Init+0x350>)
 8041186:	693b      	ldr	r3, [r7, #16]
 8041188:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 804118a:	697b      	ldr	r3, [r7, #20]
 804118c:	3301      	adds	r3, #1
 804118e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8041190:	683b      	ldr	r3, [r7, #0]
 8041192:	681a      	ldr	r2, [r3, #0]
 8041194:	697b      	ldr	r3, [r7, #20]
 8041196:	fa22 f303 	lsr.w	r3, r2, r3
 804119a:	2b00      	cmp	r3, #0
 804119c:	f47f ae78 	bne.w	8040e90 <HAL_GPIO_Init+0x10>
  }
}
 80411a0:	bf00      	nop
 80411a2:	bf00      	nop
 80411a4:	371c      	adds	r7, #28
 80411a6:	46bd      	mov	sp, r7
 80411a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80411ac:	4770      	bx	lr
 80411ae:	bf00      	nop
 80411b0:	40021000 	.word	0x40021000
 80411b4:	40010000 	.word	0x40010000
 80411b8:	48000400 	.word	0x48000400
 80411bc:	48000800 	.word	0x48000800
 80411c0:	48000c00 	.word	0x48000c00
 80411c4:	48001000 	.word	0x48001000
 80411c8:	48001400 	.word	0x48001400
 80411cc:	48001800 	.word	0x48001800
 80411d0:	40010400 	.word	0x40010400

080411d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80411d4:	b480      	push	{r7}
 80411d6:	b083      	sub	sp, #12
 80411d8:	af00      	add	r7, sp, #0
 80411da:	6078      	str	r0, [r7, #4]
 80411dc:	460b      	mov	r3, r1
 80411de:	807b      	strh	r3, [r7, #2]
 80411e0:	4613      	mov	r3, r2
 80411e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80411e4:	787b      	ldrb	r3, [r7, #1]
 80411e6:	2b00      	cmp	r3, #0
 80411e8:	d003      	beq.n	80411f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80411ea:	887a      	ldrh	r2, [r7, #2]
 80411ec:	687b      	ldr	r3, [r7, #4]
 80411ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80411f0:	e002      	b.n	80411f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80411f2:	887a      	ldrh	r2, [r7, #2]
 80411f4:	687b      	ldr	r3, [r7, #4]
 80411f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80411f8:	bf00      	nop
 80411fa:	370c      	adds	r7, #12
 80411fc:	46bd      	mov	sp, r7
 80411fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041202:	4770      	bx	lr

08041204 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8041204:	b480      	push	{r7}
 8041206:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8041208:	4b04      	ldr	r3, [pc, #16]	; (804121c <HAL_PWREx_GetVoltageRange+0x18>)
 804120a:	681b      	ldr	r3, [r3, #0]
 804120c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8041210:	4618      	mov	r0, r3
 8041212:	46bd      	mov	sp, r7
 8041214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041218:	4770      	bx	lr
 804121a:	bf00      	nop
 804121c:	40007000 	.word	0x40007000

08041220 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8041220:	b480      	push	{r7}
 8041222:	b085      	sub	sp, #20
 8041224:	af00      	add	r7, sp, #0
 8041226:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8041228:	687b      	ldr	r3, [r7, #4]
 804122a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804122e:	d130      	bne.n	8041292 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8041230:	4b23      	ldr	r3, [pc, #140]	; (80412c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8041232:	681b      	ldr	r3, [r3, #0]
 8041234:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8041238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804123c:	d038      	beq.n	80412b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 804123e:	4b20      	ldr	r3, [pc, #128]	; (80412c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8041240:	681b      	ldr	r3, [r3, #0]
 8041242:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8041246:	4a1e      	ldr	r2, [pc, #120]	; (80412c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8041248:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 804124c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 804124e:	4b1d      	ldr	r3, [pc, #116]	; (80412c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8041250:	681b      	ldr	r3, [r3, #0]
 8041252:	2232      	movs	r2, #50	; 0x32
 8041254:	fb02 f303 	mul.w	r3, r2, r3
 8041258:	4a1b      	ldr	r2, [pc, #108]	; (80412c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 804125a:	fba2 2303 	umull	r2, r3, r2, r3
 804125e:	0c9b      	lsrs	r3, r3, #18
 8041260:	3301      	adds	r3, #1
 8041262:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8041264:	e002      	b.n	804126c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8041266:	68fb      	ldr	r3, [r7, #12]
 8041268:	3b01      	subs	r3, #1
 804126a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 804126c:	4b14      	ldr	r3, [pc, #80]	; (80412c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 804126e:	695b      	ldr	r3, [r3, #20]
 8041270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8041278:	d102      	bne.n	8041280 <HAL_PWREx_ControlVoltageScaling+0x60>
 804127a:	68fb      	ldr	r3, [r7, #12]
 804127c:	2b00      	cmp	r3, #0
 804127e:	d1f2      	bne.n	8041266 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8041280:	4b0f      	ldr	r3, [pc, #60]	; (80412c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8041282:	695b      	ldr	r3, [r3, #20]
 8041284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804128c:	d110      	bne.n	80412b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 804128e:	2303      	movs	r3, #3
 8041290:	e00f      	b.n	80412b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8041292:	4b0b      	ldr	r3, [pc, #44]	; (80412c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8041294:	681b      	ldr	r3, [r3, #0]
 8041296:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 804129a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804129e:	d007      	beq.n	80412b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80412a0:	4b07      	ldr	r3, [pc, #28]	; (80412c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80412a2:	681b      	ldr	r3, [r3, #0]
 80412a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80412a8:	4a05      	ldr	r2, [pc, #20]	; (80412c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80412aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80412ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80412b0:	2300      	movs	r3, #0
}
 80412b2:	4618      	mov	r0, r3
 80412b4:	3714      	adds	r7, #20
 80412b6:	46bd      	mov	sp, r7
 80412b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80412bc:	4770      	bx	lr
 80412be:	bf00      	nop
 80412c0:	40007000 	.word	0x40007000
 80412c4:	20000000 	.word	0x20000000
 80412c8:	431bde83 	.word	0x431bde83

080412cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80412cc:	b580      	push	{r7, lr}
 80412ce:	b088      	sub	sp, #32
 80412d0:	af00      	add	r7, sp, #0
 80412d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80412d4:	687b      	ldr	r3, [r7, #4]
 80412d6:	2b00      	cmp	r3, #0
 80412d8:	d101      	bne.n	80412de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80412da:	2301      	movs	r3, #1
 80412dc:	e3d4      	b.n	8041a88 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80412de:	4ba1      	ldr	r3, [pc, #644]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 80412e0:	689b      	ldr	r3, [r3, #8]
 80412e2:	f003 030c 	and.w	r3, r3, #12
 80412e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80412e8:	4b9e      	ldr	r3, [pc, #632]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 80412ea:	68db      	ldr	r3, [r3, #12]
 80412ec:	f003 0303 	and.w	r3, r3, #3
 80412f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80412f2:	687b      	ldr	r3, [r7, #4]
 80412f4:	681b      	ldr	r3, [r3, #0]
 80412f6:	f003 0310 	and.w	r3, r3, #16
 80412fa:	2b00      	cmp	r3, #0
 80412fc:	f000 80e4 	beq.w	80414c8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8041300:	69bb      	ldr	r3, [r7, #24]
 8041302:	2b00      	cmp	r3, #0
 8041304:	d007      	beq.n	8041316 <HAL_RCC_OscConfig+0x4a>
 8041306:	69bb      	ldr	r3, [r7, #24]
 8041308:	2b0c      	cmp	r3, #12
 804130a:	f040 808b 	bne.w	8041424 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 804130e:	697b      	ldr	r3, [r7, #20]
 8041310:	2b01      	cmp	r3, #1
 8041312:	f040 8087 	bne.w	8041424 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8041316:	4b93      	ldr	r3, [pc, #588]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 8041318:	681b      	ldr	r3, [r3, #0]
 804131a:	f003 0302 	and.w	r3, r3, #2
 804131e:	2b00      	cmp	r3, #0
 8041320:	d005      	beq.n	804132e <HAL_RCC_OscConfig+0x62>
 8041322:	687b      	ldr	r3, [r7, #4]
 8041324:	699b      	ldr	r3, [r3, #24]
 8041326:	2b00      	cmp	r3, #0
 8041328:	d101      	bne.n	804132e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 804132a:	2301      	movs	r3, #1
 804132c:	e3ac      	b.n	8041a88 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 804132e:	687b      	ldr	r3, [r7, #4]
 8041330:	6a1a      	ldr	r2, [r3, #32]
 8041332:	4b8c      	ldr	r3, [pc, #560]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 8041334:	681b      	ldr	r3, [r3, #0]
 8041336:	f003 0308 	and.w	r3, r3, #8
 804133a:	2b00      	cmp	r3, #0
 804133c:	d004      	beq.n	8041348 <HAL_RCC_OscConfig+0x7c>
 804133e:	4b89      	ldr	r3, [pc, #548]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 8041340:	681b      	ldr	r3, [r3, #0]
 8041342:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8041346:	e005      	b.n	8041354 <HAL_RCC_OscConfig+0x88>
 8041348:	4b86      	ldr	r3, [pc, #536]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 804134a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 804134e:	091b      	lsrs	r3, r3, #4
 8041350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8041354:	4293      	cmp	r3, r2
 8041356:	d223      	bcs.n	80413a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8041358:	687b      	ldr	r3, [r7, #4]
 804135a:	6a1b      	ldr	r3, [r3, #32]
 804135c:	4618      	mov	r0, r3
 804135e:	f000 fd41 	bl	8041de4 <RCC_SetFlashLatencyFromMSIRange>
 8041362:	4603      	mov	r3, r0
 8041364:	2b00      	cmp	r3, #0
 8041366:	d001      	beq.n	804136c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8041368:	2301      	movs	r3, #1
 804136a:	e38d      	b.n	8041a88 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 804136c:	4b7d      	ldr	r3, [pc, #500]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 804136e:	681b      	ldr	r3, [r3, #0]
 8041370:	4a7c      	ldr	r2, [pc, #496]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 8041372:	f043 0308 	orr.w	r3, r3, #8
 8041376:	6013      	str	r3, [r2, #0]
 8041378:	4b7a      	ldr	r3, [pc, #488]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 804137a:	681b      	ldr	r3, [r3, #0]
 804137c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8041380:	687b      	ldr	r3, [r7, #4]
 8041382:	6a1b      	ldr	r3, [r3, #32]
 8041384:	4977      	ldr	r1, [pc, #476]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 8041386:	4313      	orrs	r3, r2
 8041388:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 804138a:	4b76      	ldr	r3, [pc, #472]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 804138c:	685b      	ldr	r3, [r3, #4]
 804138e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8041392:	687b      	ldr	r3, [r7, #4]
 8041394:	69db      	ldr	r3, [r3, #28]
 8041396:	021b      	lsls	r3, r3, #8
 8041398:	4972      	ldr	r1, [pc, #456]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 804139a:	4313      	orrs	r3, r2
 804139c:	604b      	str	r3, [r1, #4]
 804139e:	e025      	b.n	80413ec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80413a0:	4b70      	ldr	r3, [pc, #448]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 80413a2:	681b      	ldr	r3, [r3, #0]
 80413a4:	4a6f      	ldr	r2, [pc, #444]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 80413a6:	f043 0308 	orr.w	r3, r3, #8
 80413aa:	6013      	str	r3, [r2, #0]
 80413ac:	4b6d      	ldr	r3, [pc, #436]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 80413ae:	681b      	ldr	r3, [r3, #0]
 80413b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80413b4:	687b      	ldr	r3, [r7, #4]
 80413b6:	6a1b      	ldr	r3, [r3, #32]
 80413b8:	496a      	ldr	r1, [pc, #424]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 80413ba:	4313      	orrs	r3, r2
 80413bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80413be:	4b69      	ldr	r3, [pc, #420]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 80413c0:	685b      	ldr	r3, [r3, #4]
 80413c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80413c6:	687b      	ldr	r3, [r7, #4]
 80413c8:	69db      	ldr	r3, [r3, #28]
 80413ca:	021b      	lsls	r3, r3, #8
 80413cc:	4965      	ldr	r1, [pc, #404]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 80413ce:	4313      	orrs	r3, r2
 80413d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80413d2:	69bb      	ldr	r3, [r7, #24]
 80413d4:	2b00      	cmp	r3, #0
 80413d6:	d109      	bne.n	80413ec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80413d8:	687b      	ldr	r3, [r7, #4]
 80413da:	6a1b      	ldr	r3, [r3, #32]
 80413dc:	4618      	mov	r0, r3
 80413de:	f000 fd01 	bl	8041de4 <RCC_SetFlashLatencyFromMSIRange>
 80413e2:	4603      	mov	r3, r0
 80413e4:	2b00      	cmp	r3, #0
 80413e6:	d001      	beq.n	80413ec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80413e8:	2301      	movs	r3, #1
 80413ea:	e34d      	b.n	8041a88 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80413ec:	f000 fc36 	bl	8041c5c <HAL_RCC_GetSysClockFreq>
 80413f0:	4602      	mov	r2, r0
 80413f2:	4b5c      	ldr	r3, [pc, #368]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 80413f4:	689b      	ldr	r3, [r3, #8]
 80413f6:	091b      	lsrs	r3, r3, #4
 80413f8:	f003 030f 	and.w	r3, r3, #15
 80413fc:	495a      	ldr	r1, [pc, #360]	; (8041568 <HAL_RCC_OscConfig+0x29c>)
 80413fe:	5ccb      	ldrb	r3, [r1, r3]
 8041400:	f003 031f 	and.w	r3, r3, #31
 8041404:	fa22 f303 	lsr.w	r3, r2, r3
 8041408:	4a58      	ldr	r2, [pc, #352]	; (804156c <HAL_RCC_OscConfig+0x2a0>)
 804140a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 804140c:	4b58      	ldr	r3, [pc, #352]	; (8041570 <HAL_RCC_OscConfig+0x2a4>)
 804140e:	681b      	ldr	r3, [r3, #0]
 8041410:	4618      	mov	r0, r3
 8041412:	f7ff fb25 	bl	8040a60 <HAL_InitTick>
 8041416:	4603      	mov	r3, r0
 8041418:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 804141a:	7bfb      	ldrb	r3, [r7, #15]
 804141c:	2b00      	cmp	r3, #0
 804141e:	d052      	beq.n	80414c6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8041420:	7bfb      	ldrb	r3, [r7, #15]
 8041422:	e331      	b.n	8041a88 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8041424:	687b      	ldr	r3, [r7, #4]
 8041426:	699b      	ldr	r3, [r3, #24]
 8041428:	2b00      	cmp	r3, #0
 804142a:	d032      	beq.n	8041492 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 804142c:	4b4d      	ldr	r3, [pc, #308]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 804142e:	681b      	ldr	r3, [r3, #0]
 8041430:	4a4c      	ldr	r2, [pc, #304]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 8041432:	f043 0301 	orr.w	r3, r3, #1
 8041436:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8041438:	f7ff fb62 	bl	8040b00 <HAL_GetTick>
 804143c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 804143e:	e008      	b.n	8041452 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8041440:	f7ff fb5e 	bl	8040b00 <HAL_GetTick>
 8041444:	4602      	mov	r2, r0
 8041446:	693b      	ldr	r3, [r7, #16]
 8041448:	1ad3      	subs	r3, r2, r3
 804144a:	2b02      	cmp	r3, #2
 804144c:	d901      	bls.n	8041452 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 804144e:	2303      	movs	r3, #3
 8041450:	e31a      	b.n	8041a88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8041452:	4b44      	ldr	r3, [pc, #272]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 8041454:	681b      	ldr	r3, [r3, #0]
 8041456:	f003 0302 	and.w	r3, r3, #2
 804145a:	2b00      	cmp	r3, #0
 804145c:	d0f0      	beq.n	8041440 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 804145e:	4b41      	ldr	r3, [pc, #260]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 8041460:	681b      	ldr	r3, [r3, #0]
 8041462:	4a40      	ldr	r2, [pc, #256]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 8041464:	f043 0308 	orr.w	r3, r3, #8
 8041468:	6013      	str	r3, [r2, #0]
 804146a:	4b3e      	ldr	r3, [pc, #248]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 804146c:	681b      	ldr	r3, [r3, #0]
 804146e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8041472:	687b      	ldr	r3, [r7, #4]
 8041474:	6a1b      	ldr	r3, [r3, #32]
 8041476:	493b      	ldr	r1, [pc, #236]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 8041478:	4313      	orrs	r3, r2
 804147a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 804147c:	4b39      	ldr	r3, [pc, #228]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 804147e:	685b      	ldr	r3, [r3, #4]
 8041480:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8041484:	687b      	ldr	r3, [r7, #4]
 8041486:	69db      	ldr	r3, [r3, #28]
 8041488:	021b      	lsls	r3, r3, #8
 804148a:	4936      	ldr	r1, [pc, #216]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 804148c:	4313      	orrs	r3, r2
 804148e:	604b      	str	r3, [r1, #4]
 8041490:	e01a      	b.n	80414c8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8041492:	4b34      	ldr	r3, [pc, #208]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 8041494:	681b      	ldr	r3, [r3, #0]
 8041496:	4a33      	ldr	r2, [pc, #204]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 8041498:	f023 0301 	bic.w	r3, r3, #1
 804149c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 804149e:	f7ff fb2f 	bl	8040b00 <HAL_GetTick>
 80414a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80414a4:	e008      	b.n	80414b8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80414a6:	f7ff fb2b 	bl	8040b00 <HAL_GetTick>
 80414aa:	4602      	mov	r2, r0
 80414ac:	693b      	ldr	r3, [r7, #16]
 80414ae:	1ad3      	subs	r3, r2, r3
 80414b0:	2b02      	cmp	r3, #2
 80414b2:	d901      	bls.n	80414b8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80414b4:	2303      	movs	r3, #3
 80414b6:	e2e7      	b.n	8041a88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80414b8:	4b2a      	ldr	r3, [pc, #168]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 80414ba:	681b      	ldr	r3, [r3, #0]
 80414bc:	f003 0302 	and.w	r3, r3, #2
 80414c0:	2b00      	cmp	r3, #0
 80414c2:	d1f0      	bne.n	80414a6 <HAL_RCC_OscConfig+0x1da>
 80414c4:	e000      	b.n	80414c8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80414c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80414c8:	687b      	ldr	r3, [r7, #4]
 80414ca:	681b      	ldr	r3, [r3, #0]
 80414cc:	f003 0301 	and.w	r3, r3, #1
 80414d0:	2b00      	cmp	r3, #0
 80414d2:	d074      	beq.n	80415be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80414d4:	69bb      	ldr	r3, [r7, #24]
 80414d6:	2b08      	cmp	r3, #8
 80414d8:	d005      	beq.n	80414e6 <HAL_RCC_OscConfig+0x21a>
 80414da:	69bb      	ldr	r3, [r7, #24]
 80414dc:	2b0c      	cmp	r3, #12
 80414de:	d10e      	bne.n	80414fe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80414e0:	697b      	ldr	r3, [r7, #20]
 80414e2:	2b03      	cmp	r3, #3
 80414e4:	d10b      	bne.n	80414fe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80414e6:	4b1f      	ldr	r3, [pc, #124]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 80414e8:	681b      	ldr	r3, [r3, #0]
 80414ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80414ee:	2b00      	cmp	r3, #0
 80414f0:	d064      	beq.n	80415bc <HAL_RCC_OscConfig+0x2f0>
 80414f2:	687b      	ldr	r3, [r7, #4]
 80414f4:	685b      	ldr	r3, [r3, #4]
 80414f6:	2b00      	cmp	r3, #0
 80414f8:	d160      	bne.n	80415bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80414fa:	2301      	movs	r3, #1
 80414fc:	e2c4      	b.n	8041a88 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80414fe:	687b      	ldr	r3, [r7, #4]
 8041500:	685b      	ldr	r3, [r3, #4]
 8041502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8041506:	d106      	bne.n	8041516 <HAL_RCC_OscConfig+0x24a>
 8041508:	4b16      	ldr	r3, [pc, #88]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 804150a:	681b      	ldr	r3, [r3, #0]
 804150c:	4a15      	ldr	r2, [pc, #84]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 804150e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041512:	6013      	str	r3, [r2, #0]
 8041514:	e01d      	b.n	8041552 <HAL_RCC_OscConfig+0x286>
 8041516:	687b      	ldr	r3, [r7, #4]
 8041518:	685b      	ldr	r3, [r3, #4]
 804151a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 804151e:	d10c      	bne.n	804153a <HAL_RCC_OscConfig+0x26e>
 8041520:	4b10      	ldr	r3, [pc, #64]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 8041522:	681b      	ldr	r3, [r3, #0]
 8041524:	4a0f      	ldr	r2, [pc, #60]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 8041526:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 804152a:	6013      	str	r3, [r2, #0]
 804152c:	4b0d      	ldr	r3, [pc, #52]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 804152e:	681b      	ldr	r3, [r3, #0]
 8041530:	4a0c      	ldr	r2, [pc, #48]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 8041532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041536:	6013      	str	r3, [r2, #0]
 8041538:	e00b      	b.n	8041552 <HAL_RCC_OscConfig+0x286>
 804153a:	4b0a      	ldr	r3, [pc, #40]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 804153c:	681b      	ldr	r3, [r3, #0]
 804153e:	4a09      	ldr	r2, [pc, #36]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 8041540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8041544:	6013      	str	r3, [r2, #0]
 8041546:	4b07      	ldr	r3, [pc, #28]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 8041548:	681b      	ldr	r3, [r3, #0]
 804154a:	4a06      	ldr	r2, [pc, #24]	; (8041564 <HAL_RCC_OscConfig+0x298>)
 804154c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8041550:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8041552:	687b      	ldr	r3, [r7, #4]
 8041554:	685b      	ldr	r3, [r3, #4]
 8041556:	2b00      	cmp	r3, #0
 8041558:	d01c      	beq.n	8041594 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804155a:	f7ff fad1 	bl	8040b00 <HAL_GetTick>
 804155e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8041560:	e011      	b.n	8041586 <HAL_RCC_OscConfig+0x2ba>
 8041562:	bf00      	nop
 8041564:	40021000 	.word	0x40021000
 8041568:	0804377c 	.word	0x0804377c
 804156c:	20000000 	.word	0x20000000
 8041570:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8041574:	f7ff fac4 	bl	8040b00 <HAL_GetTick>
 8041578:	4602      	mov	r2, r0
 804157a:	693b      	ldr	r3, [r7, #16]
 804157c:	1ad3      	subs	r3, r2, r3
 804157e:	2b64      	cmp	r3, #100	; 0x64
 8041580:	d901      	bls.n	8041586 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8041582:	2303      	movs	r3, #3
 8041584:	e280      	b.n	8041a88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8041586:	4baf      	ldr	r3, [pc, #700]	; (8041844 <HAL_RCC_OscConfig+0x578>)
 8041588:	681b      	ldr	r3, [r3, #0]
 804158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804158e:	2b00      	cmp	r3, #0
 8041590:	d0f0      	beq.n	8041574 <HAL_RCC_OscConfig+0x2a8>
 8041592:	e014      	b.n	80415be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041594:	f7ff fab4 	bl	8040b00 <HAL_GetTick>
 8041598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 804159a:	e008      	b.n	80415ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 804159c:	f7ff fab0 	bl	8040b00 <HAL_GetTick>
 80415a0:	4602      	mov	r2, r0
 80415a2:	693b      	ldr	r3, [r7, #16]
 80415a4:	1ad3      	subs	r3, r2, r3
 80415a6:	2b64      	cmp	r3, #100	; 0x64
 80415a8:	d901      	bls.n	80415ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80415aa:	2303      	movs	r3, #3
 80415ac:	e26c      	b.n	8041a88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80415ae:	4ba5      	ldr	r3, [pc, #660]	; (8041844 <HAL_RCC_OscConfig+0x578>)
 80415b0:	681b      	ldr	r3, [r3, #0]
 80415b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80415b6:	2b00      	cmp	r3, #0
 80415b8:	d1f0      	bne.n	804159c <HAL_RCC_OscConfig+0x2d0>
 80415ba:	e000      	b.n	80415be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80415bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80415be:	687b      	ldr	r3, [r7, #4]
 80415c0:	681b      	ldr	r3, [r3, #0]
 80415c2:	f003 0302 	and.w	r3, r3, #2
 80415c6:	2b00      	cmp	r3, #0
 80415c8:	d060      	beq.n	804168c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80415ca:	69bb      	ldr	r3, [r7, #24]
 80415cc:	2b04      	cmp	r3, #4
 80415ce:	d005      	beq.n	80415dc <HAL_RCC_OscConfig+0x310>
 80415d0:	69bb      	ldr	r3, [r7, #24]
 80415d2:	2b0c      	cmp	r3, #12
 80415d4:	d119      	bne.n	804160a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80415d6:	697b      	ldr	r3, [r7, #20]
 80415d8:	2b02      	cmp	r3, #2
 80415da:	d116      	bne.n	804160a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80415dc:	4b99      	ldr	r3, [pc, #612]	; (8041844 <HAL_RCC_OscConfig+0x578>)
 80415de:	681b      	ldr	r3, [r3, #0]
 80415e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80415e4:	2b00      	cmp	r3, #0
 80415e6:	d005      	beq.n	80415f4 <HAL_RCC_OscConfig+0x328>
 80415e8:	687b      	ldr	r3, [r7, #4]
 80415ea:	68db      	ldr	r3, [r3, #12]
 80415ec:	2b00      	cmp	r3, #0
 80415ee:	d101      	bne.n	80415f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80415f0:	2301      	movs	r3, #1
 80415f2:	e249      	b.n	8041a88 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80415f4:	4b93      	ldr	r3, [pc, #588]	; (8041844 <HAL_RCC_OscConfig+0x578>)
 80415f6:	685b      	ldr	r3, [r3, #4]
 80415f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80415fc:	687b      	ldr	r3, [r7, #4]
 80415fe:	691b      	ldr	r3, [r3, #16]
 8041600:	061b      	lsls	r3, r3, #24
 8041602:	4990      	ldr	r1, [pc, #576]	; (8041844 <HAL_RCC_OscConfig+0x578>)
 8041604:	4313      	orrs	r3, r2
 8041606:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8041608:	e040      	b.n	804168c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 804160a:	687b      	ldr	r3, [r7, #4]
 804160c:	68db      	ldr	r3, [r3, #12]
 804160e:	2b00      	cmp	r3, #0
 8041610:	d023      	beq.n	804165a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8041612:	4b8c      	ldr	r3, [pc, #560]	; (8041844 <HAL_RCC_OscConfig+0x578>)
 8041614:	681b      	ldr	r3, [r3, #0]
 8041616:	4a8b      	ldr	r2, [pc, #556]	; (8041844 <HAL_RCC_OscConfig+0x578>)
 8041618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804161c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804161e:	f7ff fa6f 	bl	8040b00 <HAL_GetTick>
 8041622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8041624:	e008      	b.n	8041638 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8041626:	f7ff fa6b 	bl	8040b00 <HAL_GetTick>
 804162a:	4602      	mov	r2, r0
 804162c:	693b      	ldr	r3, [r7, #16]
 804162e:	1ad3      	subs	r3, r2, r3
 8041630:	2b02      	cmp	r3, #2
 8041632:	d901      	bls.n	8041638 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8041634:	2303      	movs	r3, #3
 8041636:	e227      	b.n	8041a88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8041638:	4b82      	ldr	r3, [pc, #520]	; (8041844 <HAL_RCC_OscConfig+0x578>)
 804163a:	681b      	ldr	r3, [r3, #0]
 804163c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041640:	2b00      	cmp	r3, #0
 8041642:	d0f0      	beq.n	8041626 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8041644:	4b7f      	ldr	r3, [pc, #508]	; (8041844 <HAL_RCC_OscConfig+0x578>)
 8041646:	685b      	ldr	r3, [r3, #4]
 8041648:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 804164c:	687b      	ldr	r3, [r7, #4]
 804164e:	691b      	ldr	r3, [r3, #16]
 8041650:	061b      	lsls	r3, r3, #24
 8041652:	497c      	ldr	r1, [pc, #496]	; (8041844 <HAL_RCC_OscConfig+0x578>)
 8041654:	4313      	orrs	r3, r2
 8041656:	604b      	str	r3, [r1, #4]
 8041658:	e018      	b.n	804168c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 804165a:	4b7a      	ldr	r3, [pc, #488]	; (8041844 <HAL_RCC_OscConfig+0x578>)
 804165c:	681b      	ldr	r3, [r3, #0]
 804165e:	4a79      	ldr	r2, [pc, #484]	; (8041844 <HAL_RCC_OscConfig+0x578>)
 8041660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8041664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041666:	f7ff fa4b 	bl	8040b00 <HAL_GetTick>
 804166a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 804166c:	e008      	b.n	8041680 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 804166e:	f7ff fa47 	bl	8040b00 <HAL_GetTick>
 8041672:	4602      	mov	r2, r0
 8041674:	693b      	ldr	r3, [r7, #16]
 8041676:	1ad3      	subs	r3, r2, r3
 8041678:	2b02      	cmp	r3, #2
 804167a:	d901      	bls.n	8041680 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 804167c:	2303      	movs	r3, #3
 804167e:	e203      	b.n	8041a88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8041680:	4b70      	ldr	r3, [pc, #448]	; (8041844 <HAL_RCC_OscConfig+0x578>)
 8041682:	681b      	ldr	r3, [r3, #0]
 8041684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041688:	2b00      	cmp	r3, #0
 804168a:	d1f0      	bne.n	804166e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 804168c:	687b      	ldr	r3, [r7, #4]
 804168e:	681b      	ldr	r3, [r3, #0]
 8041690:	f003 0308 	and.w	r3, r3, #8
 8041694:	2b00      	cmp	r3, #0
 8041696:	d03c      	beq.n	8041712 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8041698:	687b      	ldr	r3, [r7, #4]
 804169a:	695b      	ldr	r3, [r3, #20]
 804169c:	2b00      	cmp	r3, #0
 804169e:	d01c      	beq.n	80416da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80416a0:	4b68      	ldr	r3, [pc, #416]	; (8041844 <HAL_RCC_OscConfig+0x578>)
 80416a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80416a6:	4a67      	ldr	r2, [pc, #412]	; (8041844 <HAL_RCC_OscConfig+0x578>)
 80416a8:	f043 0301 	orr.w	r3, r3, #1
 80416ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80416b0:	f7ff fa26 	bl	8040b00 <HAL_GetTick>
 80416b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80416b6:	e008      	b.n	80416ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80416b8:	f7ff fa22 	bl	8040b00 <HAL_GetTick>
 80416bc:	4602      	mov	r2, r0
 80416be:	693b      	ldr	r3, [r7, #16]
 80416c0:	1ad3      	subs	r3, r2, r3
 80416c2:	2b02      	cmp	r3, #2
 80416c4:	d901      	bls.n	80416ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80416c6:	2303      	movs	r3, #3
 80416c8:	e1de      	b.n	8041a88 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80416ca:	4b5e      	ldr	r3, [pc, #376]	; (8041844 <HAL_RCC_OscConfig+0x578>)
 80416cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80416d0:	f003 0302 	and.w	r3, r3, #2
 80416d4:	2b00      	cmp	r3, #0
 80416d6:	d0ef      	beq.n	80416b8 <HAL_RCC_OscConfig+0x3ec>
 80416d8:	e01b      	b.n	8041712 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80416da:	4b5a      	ldr	r3, [pc, #360]	; (8041844 <HAL_RCC_OscConfig+0x578>)
 80416dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80416e0:	4a58      	ldr	r2, [pc, #352]	; (8041844 <HAL_RCC_OscConfig+0x578>)
 80416e2:	f023 0301 	bic.w	r3, r3, #1
 80416e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80416ea:	f7ff fa09 	bl	8040b00 <HAL_GetTick>
 80416ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80416f0:	e008      	b.n	8041704 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80416f2:	f7ff fa05 	bl	8040b00 <HAL_GetTick>
 80416f6:	4602      	mov	r2, r0
 80416f8:	693b      	ldr	r3, [r7, #16]
 80416fa:	1ad3      	subs	r3, r2, r3
 80416fc:	2b02      	cmp	r3, #2
 80416fe:	d901      	bls.n	8041704 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8041700:	2303      	movs	r3, #3
 8041702:	e1c1      	b.n	8041a88 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8041704:	4b4f      	ldr	r3, [pc, #316]	; (8041844 <HAL_RCC_OscConfig+0x578>)
 8041706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 804170a:	f003 0302 	and.w	r3, r3, #2
 804170e:	2b00      	cmp	r3, #0
 8041710:	d1ef      	bne.n	80416f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8041712:	687b      	ldr	r3, [r7, #4]
 8041714:	681b      	ldr	r3, [r3, #0]
 8041716:	f003 0304 	and.w	r3, r3, #4
 804171a:	2b00      	cmp	r3, #0
 804171c:	f000 80a6 	beq.w	804186c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8041720:	2300      	movs	r3, #0
 8041722:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8041724:	4b47      	ldr	r3, [pc, #284]	; (8041844 <HAL_RCC_OscConfig+0x578>)
 8041726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804172c:	2b00      	cmp	r3, #0
 804172e:	d10d      	bne.n	804174c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8041730:	4b44      	ldr	r3, [pc, #272]	; (8041844 <HAL_RCC_OscConfig+0x578>)
 8041732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041734:	4a43      	ldr	r2, [pc, #268]	; (8041844 <HAL_RCC_OscConfig+0x578>)
 8041736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 804173a:	6593      	str	r3, [r2, #88]	; 0x58
 804173c:	4b41      	ldr	r3, [pc, #260]	; (8041844 <HAL_RCC_OscConfig+0x578>)
 804173e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041744:	60bb      	str	r3, [r7, #8]
 8041746:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8041748:	2301      	movs	r3, #1
 804174a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 804174c:	4b3e      	ldr	r3, [pc, #248]	; (8041848 <HAL_RCC_OscConfig+0x57c>)
 804174e:	681b      	ldr	r3, [r3, #0]
 8041750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041754:	2b00      	cmp	r3, #0
 8041756:	d118      	bne.n	804178a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8041758:	4b3b      	ldr	r3, [pc, #236]	; (8041848 <HAL_RCC_OscConfig+0x57c>)
 804175a:	681b      	ldr	r3, [r3, #0]
 804175c:	4a3a      	ldr	r2, [pc, #232]	; (8041848 <HAL_RCC_OscConfig+0x57c>)
 804175e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8041762:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8041764:	f7ff f9cc 	bl	8040b00 <HAL_GetTick>
 8041768:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 804176a:	e008      	b.n	804177e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 804176c:	f7ff f9c8 	bl	8040b00 <HAL_GetTick>
 8041770:	4602      	mov	r2, r0
 8041772:	693b      	ldr	r3, [r7, #16]
 8041774:	1ad3      	subs	r3, r2, r3
 8041776:	2b02      	cmp	r3, #2
 8041778:	d901      	bls.n	804177e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 804177a:	2303      	movs	r3, #3
 804177c:	e184      	b.n	8041a88 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 804177e:	4b32      	ldr	r3, [pc, #200]	; (8041848 <HAL_RCC_OscConfig+0x57c>)
 8041780:	681b      	ldr	r3, [r3, #0]
 8041782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041786:	2b00      	cmp	r3, #0
 8041788:	d0f0      	beq.n	804176c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 804178a:	687b      	ldr	r3, [r7, #4]
 804178c:	689b      	ldr	r3, [r3, #8]
 804178e:	2b01      	cmp	r3, #1
 8041790:	d108      	bne.n	80417a4 <HAL_RCC_OscConfig+0x4d8>
 8041792:	4b2c      	ldr	r3, [pc, #176]	; (8041844 <HAL_RCC_OscConfig+0x578>)
 8041794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041798:	4a2a      	ldr	r2, [pc, #168]	; (8041844 <HAL_RCC_OscConfig+0x578>)
 804179a:	f043 0301 	orr.w	r3, r3, #1
 804179e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80417a2:	e024      	b.n	80417ee <HAL_RCC_OscConfig+0x522>
 80417a4:	687b      	ldr	r3, [r7, #4]
 80417a6:	689b      	ldr	r3, [r3, #8]
 80417a8:	2b05      	cmp	r3, #5
 80417aa:	d110      	bne.n	80417ce <HAL_RCC_OscConfig+0x502>
 80417ac:	4b25      	ldr	r3, [pc, #148]	; (8041844 <HAL_RCC_OscConfig+0x578>)
 80417ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80417b2:	4a24      	ldr	r2, [pc, #144]	; (8041844 <HAL_RCC_OscConfig+0x578>)
 80417b4:	f043 0304 	orr.w	r3, r3, #4
 80417b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80417bc:	4b21      	ldr	r3, [pc, #132]	; (8041844 <HAL_RCC_OscConfig+0x578>)
 80417be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80417c2:	4a20      	ldr	r2, [pc, #128]	; (8041844 <HAL_RCC_OscConfig+0x578>)
 80417c4:	f043 0301 	orr.w	r3, r3, #1
 80417c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80417cc:	e00f      	b.n	80417ee <HAL_RCC_OscConfig+0x522>
 80417ce:	4b1d      	ldr	r3, [pc, #116]	; (8041844 <HAL_RCC_OscConfig+0x578>)
 80417d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80417d4:	4a1b      	ldr	r2, [pc, #108]	; (8041844 <HAL_RCC_OscConfig+0x578>)
 80417d6:	f023 0301 	bic.w	r3, r3, #1
 80417da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80417de:	4b19      	ldr	r3, [pc, #100]	; (8041844 <HAL_RCC_OscConfig+0x578>)
 80417e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80417e4:	4a17      	ldr	r2, [pc, #92]	; (8041844 <HAL_RCC_OscConfig+0x578>)
 80417e6:	f023 0304 	bic.w	r3, r3, #4
 80417ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80417ee:	687b      	ldr	r3, [r7, #4]
 80417f0:	689b      	ldr	r3, [r3, #8]
 80417f2:	2b00      	cmp	r3, #0
 80417f4:	d016      	beq.n	8041824 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80417f6:	f7ff f983 	bl	8040b00 <HAL_GetTick>
 80417fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80417fc:	e00a      	b.n	8041814 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80417fe:	f7ff f97f 	bl	8040b00 <HAL_GetTick>
 8041802:	4602      	mov	r2, r0
 8041804:	693b      	ldr	r3, [r7, #16]
 8041806:	1ad3      	subs	r3, r2, r3
 8041808:	f241 3288 	movw	r2, #5000	; 0x1388
 804180c:	4293      	cmp	r3, r2
 804180e:	d901      	bls.n	8041814 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8041810:	2303      	movs	r3, #3
 8041812:	e139      	b.n	8041a88 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8041814:	4b0b      	ldr	r3, [pc, #44]	; (8041844 <HAL_RCC_OscConfig+0x578>)
 8041816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804181a:	f003 0302 	and.w	r3, r3, #2
 804181e:	2b00      	cmp	r3, #0
 8041820:	d0ed      	beq.n	80417fe <HAL_RCC_OscConfig+0x532>
 8041822:	e01a      	b.n	804185a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041824:	f7ff f96c 	bl	8040b00 <HAL_GetTick>
 8041828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 804182a:	e00f      	b.n	804184c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 804182c:	f7ff f968 	bl	8040b00 <HAL_GetTick>
 8041830:	4602      	mov	r2, r0
 8041832:	693b      	ldr	r3, [r7, #16]
 8041834:	1ad3      	subs	r3, r2, r3
 8041836:	f241 3288 	movw	r2, #5000	; 0x1388
 804183a:	4293      	cmp	r3, r2
 804183c:	d906      	bls.n	804184c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 804183e:	2303      	movs	r3, #3
 8041840:	e122      	b.n	8041a88 <HAL_RCC_OscConfig+0x7bc>
 8041842:	bf00      	nop
 8041844:	40021000 	.word	0x40021000
 8041848:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 804184c:	4b90      	ldr	r3, [pc, #576]	; (8041a90 <HAL_RCC_OscConfig+0x7c4>)
 804184e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041852:	f003 0302 	and.w	r3, r3, #2
 8041856:	2b00      	cmp	r3, #0
 8041858:	d1e8      	bne.n	804182c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 804185a:	7ffb      	ldrb	r3, [r7, #31]
 804185c:	2b01      	cmp	r3, #1
 804185e:	d105      	bne.n	804186c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8041860:	4b8b      	ldr	r3, [pc, #556]	; (8041a90 <HAL_RCC_OscConfig+0x7c4>)
 8041862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041864:	4a8a      	ldr	r2, [pc, #552]	; (8041a90 <HAL_RCC_OscConfig+0x7c4>)
 8041866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 804186a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 804186c:	687b      	ldr	r3, [r7, #4]
 804186e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8041870:	2b00      	cmp	r3, #0
 8041872:	f000 8108 	beq.w	8041a86 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8041876:	687b      	ldr	r3, [r7, #4]
 8041878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804187a:	2b02      	cmp	r3, #2
 804187c:	f040 80d0 	bne.w	8041a20 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8041880:	4b83      	ldr	r3, [pc, #524]	; (8041a90 <HAL_RCC_OscConfig+0x7c4>)
 8041882:	68db      	ldr	r3, [r3, #12]
 8041884:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8041886:	697b      	ldr	r3, [r7, #20]
 8041888:	f003 0203 	and.w	r2, r3, #3
 804188c:	687b      	ldr	r3, [r7, #4]
 804188e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041890:	429a      	cmp	r2, r3
 8041892:	d130      	bne.n	80418f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8041894:	697b      	ldr	r3, [r7, #20]
 8041896:	f003 0270 	and.w	r2, r3, #112	; 0x70
 804189a:	687b      	ldr	r3, [r7, #4]
 804189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804189e:	3b01      	subs	r3, #1
 80418a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80418a2:	429a      	cmp	r2, r3
 80418a4:	d127      	bne.n	80418f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80418a6:	697b      	ldr	r3, [r7, #20]
 80418a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80418ac:	687b      	ldr	r3, [r7, #4]
 80418ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80418b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80418b2:	429a      	cmp	r2, r3
 80418b4:	d11f      	bne.n	80418f6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80418b6:	697b      	ldr	r3, [r7, #20]
 80418b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80418bc:	687a      	ldr	r2, [r7, #4]
 80418be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80418c0:	2a07      	cmp	r2, #7
 80418c2:	bf14      	ite	ne
 80418c4:	2201      	movne	r2, #1
 80418c6:	2200      	moveq	r2, #0
 80418c8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80418ca:	4293      	cmp	r3, r2
 80418cc:	d113      	bne.n	80418f6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80418ce:	697b      	ldr	r3, [r7, #20]
 80418d0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80418d4:	687b      	ldr	r3, [r7, #4]
 80418d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80418d8:	085b      	lsrs	r3, r3, #1
 80418da:	3b01      	subs	r3, #1
 80418dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80418de:	429a      	cmp	r2, r3
 80418e0:	d109      	bne.n	80418f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80418e2:	697b      	ldr	r3, [r7, #20]
 80418e4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80418e8:	687b      	ldr	r3, [r7, #4]
 80418ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80418ec:	085b      	lsrs	r3, r3, #1
 80418ee:	3b01      	subs	r3, #1
 80418f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80418f2:	429a      	cmp	r2, r3
 80418f4:	d06e      	beq.n	80419d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80418f6:	69bb      	ldr	r3, [r7, #24]
 80418f8:	2b0c      	cmp	r3, #12
 80418fa:	d069      	beq.n	80419d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80418fc:	4b64      	ldr	r3, [pc, #400]	; (8041a90 <HAL_RCC_OscConfig+0x7c4>)
 80418fe:	681b      	ldr	r3, [r3, #0]
 8041900:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8041904:	2b00      	cmp	r3, #0
 8041906:	d105      	bne.n	8041914 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8041908:	4b61      	ldr	r3, [pc, #388]	; (8041a90 <HAL_RCC_OscConfig+0x7c4>)
 804190a:	681b      	ldr	r3, [r3, #0]
 804190c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041910:	2b00      	cmp	r3, #0
 8041912:	d001      	beq.n	8041918 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8041914:	2301      	movs	r3, #1
 8041916:	e0b7      	b.n	8041a88 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8041918:	4b5d      	ldr	r3, [pc, #372]	; (8041a90 <HAL_RCC_OscConfig+0x7c4>)
 804191a:	681b      	ldr	r3, [r3, #0]
 804191c:	4a5c      	ldr	r2, [pc, #368]	; (8041a90 <HAL_RCC_OscConfig+0x7c4>)
 804191e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8041922:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8041924:	f7ff f8ec 	bl	8040b00 <HAL_GetTick>
 8041928:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 804192a:	e008      	b.n	804193e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 804192c:	f7ff f8e8 	bl	8040b00 <HAL_GetTick>
 8041930:	4602      	mov	r2, r0
 8041932:	693b      	ldr	r3, [r7, #16]
 8041934:	1ad3      	subs	r3, r2, r3
 8041936:	2b02      	cmp	r3, #2
 8041938:	d901      	bls.n	804193e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 804193a:	2303      	movs	r3, #3
 804193c:	e0a4      	b.n	8041a88 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 804193e:	4b54      	ldr	r3, [pc, #336]	; (8041a90 <HAL_RCC_OscConfig+0x7c4>)
 8041940:	681b      	ldr	r3, [r3, #0]
 8041942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041946:	2b00      	cmp	r3, #0
 8041948:	d1f0      	bne.n	804192c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 804194a:	4b51      	ldr	r3, [pc, #324]	; (8041a90 <HAL_RCC_OscConfig+0x7c4>)
 804194c:	68da      	ldr	r2, [r3, #12]
 804194e:	4b51      	ldr	r3, [pc, #324]	; (8041a94 <HAL_RCC_OscConfig+0x7c8>)
 8041950:	4013      	ands	r3, r2
 8041952:	687a      	ldr	r2, [r7, #4]
 8041954:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8041956:	687a      	ldr	r2, [r7, #4]
 8041958:	6b12      	ldr	r2, [r2, #48]	; 0x30
 804195a:	3a01      	subs	r2, #1
 804195c:	0112      	lsls	r2, r2, #4
 804195e:	4311      	orrs	r1, r2
 8041960:	687a      	ldr	r2, [r7, #4]
 8041962:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8041964:	0212      	lsls	r2, r2, #8
 8041966:	4311      	orrs	r1, r2
 8041968:	687a      	ldr	r2, [r7, #4]
 804196a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 804196c:	0852      	lsrs	r2, r2, #1
 804196e:	3a01      	subs	r2, #1
 8041970:	0552      	lsls	r2, r2, #21
 8041972:	4311      	orrs	r1, r2
 8041974:	687a      	ldr	r2, [r7, #4]
 8041976:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8041978:	0852      	lsrs	r2, r2, #1
 804197a:	3a01      	subs	r2, #1
 804197c:	0652      	lsls	r2, r2, #25
 804197e:	4311      	orrs	r1, r2
 8041980:	687a      	ldr	r2, [r7, #4]
 8041982:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8041984:	0912      	lsrs	r2, r2, #4
 8041986:	0452      	lsls	r2, r2, #17
 8041988:	430a      	orrs	r2, r1
 804198a:	4941      	ldr	r1, [pc, #260]	; (8041a90 <HAL_RCC_OscConfig+0x7c4>)
 804198c:	4313      	orrs	r3, r2
 804198e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8041990:	4b3f      	ldr	r3, [pc, #252]	; (8041a90 <HAL_RCC_OscConfig+0x7c4>)
 8041992:	681b      	ldr	r3, [r3, #0]
 8041994:	4a3e      	ldr	r2, [pc, #248]	; (8041a90 <HAL_RCC_OscConfig+0x7c4>)
 8041996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 804199a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 804199c:	4b3c      	ldr	r3, [pc, #240]	; (8041a90 <HAL_RCC_OscConfig+0x7c4>)
 804199e:	68db      	ldr	r3, [r3, #12]
 80419a0:	4a3b      	ldr	r2, [pc, #236]	; (8041a90 <HAL_RCC_OscConfig+0x7c4>)
 80419a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80419a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80419a8:	f7ff f8aa 	bl	8040b00 <HAL_GetTick>
 80419ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80419ae:	e008      	b.n	80419c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80419b0:	f7ff f8a6 	bl	8040b00 <HAL_GetTick>
 80419b4:	4602      	mov	r2, r0
 80419b6:	693b      	ldr	r3, [r7, #16]
 80419b8:	1ad3      	subs	r3, r2, r3
 80419ba:	2b02      	cmp	r3, #2
 80419bc:	d901      	bls.n	80419c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80419be:	2303      	movs	r3, #3
 80419c0:	e062      	b.n	8041a88 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80419c2:	4b33      	ldr	r3, [pc, #204]	; (8041a90 <HAL_RCC_OscConfig+0x7c4>)
 80419c4:	681b      	ldr	r3, [r3, #0]
 80419c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80419ca:	2b00      	cmp	r3, #0
 80419cc:	d0f0      	beq.n	80419b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80419ce:	e05a      	b.n	8041a86 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80419d0:	2301      	movs	r3, #1
 80419d2:	e059      	b.n	8041a88 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80419d4:	4b2e      	ldr	r3, [pc, #184]	; (8041a90 <HAL_RCC_OscConfig+0x7c4>)
 80419d6:	681b      	ldr	r3, [r3, #0]
 80419d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80419dc:	2b00      	cmp	r3, #0
 80419de:	d152      	bne.n	8041a86 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80419e0:	4b2b      	ldr	r3, [pc, #172]	; (8041a90 <HAL_RCC_OscConfig+0x7c4>)
 80419e2:	681b      	ldr	r3, [r3, #0]
 80419e4:	4a2a      	ldr	r2, [pc, #168]	; (8041a90 <HAL_RCC_OscConfig+0x7c4>)
 80419e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80419ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80419ec:	4b28      	ldr	r3, [pc, #160]	; (8041a90 <HAL_RCC_OscConfig+0x7c4>)
 80419ee:	68db      	ldr	r3, [r3, #12]
 80419f0:	4a27      	ldr	r2, [pc, #156]	; (8041a90 <HAL_RCC_OscConfig+0x7c4>)
 80419f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80419f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80419f8:	f7ff f882 	bl	8040b00 <HAL_GetTick>
 80419fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80419fe:	e008      	b.n	8041a12 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041a00:	f7ff f87e 	bl	8040b00 <HAL_GetTick>
 8041a04:	4602      	mov	r2, r0
 8041a06:	693b      	ldr	r3, [r7, #16]
 8041a08:	1ad3      	subs	r3, r2, r3
 8041a0a:	2b02      	cmp	r3, #2
 8041a0c:	d901      	bls.n	8041a12 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8041a0e:	2303      	movs	r3, #3
 8041a10:	e03a      	b.n	8041a88 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8041a12:	4b1f      	ldr	r3, [pc, #124]	; (8041a90 <HAL_RCC_OscConfig+0x7c4>)
 8041a14:	681b      	ldr	r3, [r3, #0]
 8041a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041a1a:	2b00      	cmp	r3, #0
 8041a1c:	d0f0      	beq.n	8041a00 <HAL_RCC_OscConfig+0x734>
 8041a1e:	e032      	b.n	8041a86 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8041a20:	69bb      	ldr	r3, [r7, #24]
 8041a22:	2b0c      	cmp	r3, #12
 8041a24:	d02d      	beq.n	8041a82 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041a26:	4b1a      	ldr	r3, [pc, #104]	; (8041a90 <HAL_RCC_OscConfig+0x7c4>)
 8041a28:	681b      	ldr	r3, [r3, #0]
 8041a2a:	4a19      	ldr	r2, [pc, #100]	; (8041a90 <HAL_RCC_OscConfig+0x7c4>)
 8041a2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8041a30:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8041a32:	4b17      	ldr	r3, [pc, #92]	; (8041a90 <HAL_RCC_OscConfig+0x7c4>)
 8041a34:	681b      	ldr	r3, [r3, #0]
 8041a36:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8041a3a:	2b00      	cmp	r3, #0
 8041a3c:	d105      	bne.n	8041a4a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8041a3e:	4b14      	ldr	r3, [pc, #80]	; (8041a90 <HAL_RCC_OscConfig+0x7c4>)
 8041a40:	68db      	ldr	r3, [r3, #12]
 8041a42:	4a13      	ldr	r2, [pc, #76]	; (8041a90 <HAL_RCC_OscConfig+0x7c4>)
 8041a44:	f023 0303 	bic.w	r3, r3, #3
 8041a48:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8041a4a:	4b11      	ldr	r3, [pc, #68]	; (8041a90 <HAL_RCC_OscConfig+0x7c4>)
 8041a4c:	68db      	ldr	r3, [r3, #12]
 8041a4e:	4a10      	ldr	r2, [pc, #64]	; (8041a90 <HAL_RCC_OscConfig+0x7c4>)
 8041a50:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8041a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8041a58:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041a5a:	f7ff f851 	bl	8040b00 <HAL_GetTick>
 8041a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8041a60:	e008      	b.n	8041a74 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041a62:	f7ff f84d 	bl	8040b00 <HAL_GetTick>
 8041a66:	4602      	mov	r2, r0
 8041a68:	693b      	ldr	r3, [r7, #16]
 8041a6a:	1ad3      	subs	r3, r2, r3
 8041a6c:	2b02      	cmp	r3, #2
 8041a6e:	d901      	bls.n	8041a74 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8041a70:	2303      	movs	r3, #3
 8041a72:	e009      	b.n	8041a88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8041a74:	4b06      	ldr	r3, [pc, #24]	; (8041a90 <HAL_RCC_OscConfig+0x7c4>)
 8041a76:	681b      	ldr	r3, [r3, #0]
 8041a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041a7c:	2b00      	cmp	r3, #0
 8041a7e:	d1f0      	bne.n	8041a62 <HAL_RCC_OscConfig+0x796>
 8041a80:	e001      	b.n	8041a86 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8041a82:	2301      	movs	r3, #1
 8041a84:	e000      	b.n	8041a88 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8041a86:	2300      	movs	r3, #0
}
 8041a88:	4618      	mov	r0, r3
 8041a8a:	3720      	adds	r7, #32
 8041a8c:	46bd      	mov	sp, r7
 8041a8e:	bd80      	pop	{r7, pc}
 8041a90:	40021000 	.word	0x40021000
 8041a94:	f99d808c 	.word	0xf99d808c

08041a98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8041a98:	b580      	push	{r7, lr}
 8041a9a:	b084      	sub	sp, #16
 8041a9c:	af00      	add	r7, sp, #0
 8041a9e:	6078      	str	r0, [r7, #4]
 8041aa0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8041aa2:	687b      	ldr	r3, [r7, #4]
 8041aa4:	2b00      	cmp	r3, #0
 8041aa6:	d101      	bne.n	8041aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8041aa8:	2301      	movs	r3, #1
 8041aaa:	e0c8      	b.n	8041c3e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8041aac:	4b66      	ldr	r3, [pc, #408]	; (8041c48 <HAL_RCC_ClockConfig+0x1b0>)
 8041aae:	681b      	ldr	r3, [r3, #0]
 8041ab0:	f003 0307 	and.w	r3, r3, #7
 8041ab4:	683a      	ldr	r2, [r7, #0]
 8041ab6:	429a      	cmp	r2, r3
 8041ab8:	d910      	bls.n	8041adc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8041aba:	4b63      	ldr	r3, [pc, #396]	; (8041c48 <HAL_RCC_ClockConfig+0x1b0>)
 8041abc:	681b      	ldr	r3, [r3, #0]
 8041abe:	f023 0207 	bic.w	r2, r3, #7
 8041ac2:	4961      	ldr	r1, [pc, #388]	; (8041c48 <HAL_RCC_ClockConfig+0x1b0>)
 8041ac4:	683b      	ldr	r3, [r7, #0]
 8041ac6:	4313      	orrs	r3, r2
 8041ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8041aca:	4b5f      	ldr	r3, [pc, #380]	; (8041c48 <HAL_RCC_ClockConfig+0x1b0>)
 8041acc:	681b      	ldr	r3, [r3, #0]
 8041ace:	f003 0307 	and.w	r3, r3, #7
 8041ad2:	683a      	ldr	r2, [r7, #0]
 8041ad4:	429a      	cmp	r2, r3
 8041ad6:	d001      	beq.n	8041adc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8041ad8:	2301      	movs	r3, #1
 8041ada:	e0b0      	b.n	8041c3e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8041adc:	687b      	ldr	r3, [r7, #4]
 8041ade:	681b      	ldr	r3, [r3, #0]
 8041ae0:	f003 0301 	and.w	r3, r3, #1
 8041ae4:	2b00      	cmp	r3, #0
 8041ae6:	d04c      	beq.n	8041b82 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8041ae8:	687b      	ldr	r3, [r7, #4]
 8041aea:	685b      	ldr	r3, [r3, #4]
 8041aec:	2b03      	cmp	r3, #3
 8041aee:	d107      	bne.n	8041b00 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8041af0:	4b56      	ldr	r3, [pc, #344]	; (8041c4c <HAL_RCC_ClockConfig+0x1b4>)
 8041af2:	681b      	ldr	r3, [r3, #0]
 8041af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041af8:	2b00      	cmp	r3, #0
 8041afa:	d121      	bne.n	8041b40 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8041afc:	2301      	movs	r3, #1
 8041afe:	e09e      	b.n	8041c3e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8041b00:	687b      	ldr	r3, [r7, #4]
 8041b02:	685b      	ldr	r3, [r3, #4]
 8041b04:	2b02      	cmp	r3, #2
 8041b06:	d107      	bne.n	8041b18 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8041b08:	4b50      	ldr	r3, [pc, #320]	; (8041c4c <HAL_RCC_ClockConfig+0x1b4>)
 8041b0a:	681b      	ldr	r3, [r3, #0]
 8041b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041b10:	2b00      	cmp	r3, #0
 8041b12:	d115      	bne.n	8041b40 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8041b14:	2301      	movs	r3, #1
 8041b16:	e092      	b.n	8041c3e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8041b18:	687b      	ldr	r3, [r7, #4]
 8041b1a:	685b      	ldr	r3, [r3, #4]
 8041b1c:	2b00      	cmp	r3, #0
 8041b1e:	d107      	bne.n	8041b30 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8041b20:	4b4a      	ldr	r3, [pc, #296]	; (8041c4c <HAL_RCC_ClockConfig+0x1b4>)
 8041b22:	681b      	ldr	r3, [r3, #0]
 8041b24:	f003 0302 	and.w	r3, r3, #2
 8041b28:	2b00      	cmp	r3, #0
 8041b2a:	d109      	bne.n	8041b40 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8041b2c:	2301      	movs	r3, #1
 8041b2e:	e086      	b.n	8041c3e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8041b30:	4b46      	ldr	r3, [pc, #280]	; (8041c4c <HAL_RCC_ClockConfig+0x1b4>)
 8041b32:	681b      	ldr	r3, [r3, #0]
 8041b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041b38:	2b00      	cmp	r3, #0
 8041b3a:	d101      	bne.n	8041b40 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8041b3c:	2301      	movs	r3, #1
 8041b3e:	e07e      	b.n	8041c3e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8041b40:	4b42      	ldr	r3, [pc, #264]	; (8041c4c <HAL_RCC_ClockConfig+0x1b4>)
 8041b42:	689b      	ldr	r3, [r3, #8]
 8041b44:	f023 0203 	bic.w	r2, r3, #3
 8041b48:	687b      	ldr	r3, [r7, #4]
 8041b4a:	685b      	ldr	r3, [r3, #4]
 8041b4c:	493f      	ldr	r1, [pc, #252]	; (8041c4c <HAL_RCC_ClockConfig+0x1b4>)
 8041b4e:	4313      	orrs	r3, r2
 8041b50:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8041b52:	f7fe ffd5 	bl	8040b00 <HAL_GetTick>
 8041b56:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8041b58:	e00a      	b.n	8041b70 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8041b5a:	f7fe ffd1 	bl	8040b00 <HAL_GetTick>
 8041b5e:	4602      	mov	r2, r0
 8041b60:	68fb      	ldr	r3, [r7, #12]
 8041b62:	1ad3      	subs	r3, r2, r3
 8041b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8041b68:	4293      	cmp	r3, r2
 8041b6a:	d901      	bls.n	8041b70 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8041b6c:	2303      	movs	r3, #3
 8041b6e:	e066      	b.n	8041c3e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8041b70:	4b36      	ldr	r3, [pc, #216]	; (8041c4c <HAL_RCC_ClockConfig+0x1b4>)
 8041b72:	689b      	ldr	r3, [r3, #8]
 8041b74:	f003 020c 	and.w	r2, r3, #12
 8041b78:	687b      	ldr	r3, [r7, #4]
 8041b7a:	685b      	ldr	r3, [r3, #4]
 8041b7c:	009b      	lsls	r3, r3, #2
 8041b7e:	429a      	cmp	r2, r3
 8041b80:	d1eb      	bne.n	8041b5a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8041b82:	687b      	ldr	r3, [r7, #4]
 8041b84:	681b      	ldr	r3, [r3, #0]
 8041b86:	f003 0302 	and.w	r3, r3, #2
 8041b8a:	2b00      	cmp	r3, #0
 8041b8c:	d008      	beq.n	8041ba0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8041b8e:	4b2f      	ldr	r3, [pc, #188]	; (8041c4c <HAL_RCC_ClockConfig+0x1b4>)
 8041b90:	689b      	ldr	r3, [r3, #8]
 8041b92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8041b96:	687b      	ldr	r3, [r7, #4]
 8041b98:	689b      	ldr	r3, [r3, #8]
 8041b9a:	492c      	ldr	r1, [pc, #176]	; (8041c4c <HAL_RCC_ClockConfig+0x1b4>)
 8041b9c:	4313      	orrs	r3, r2
 8041b9e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8041ba0:	4b29      	ldr	r3, [pc, #164]	; (8041c48 <HAL_RCC_ClockConfig+0x1b0>)
 8041ba2:	681b      	ldr	r3, [r3, #0]
 8041ba4:	f003 0307 	and.w	r3, r3, #7
 8041ba8:	683a      	ldr	r2, [r7, #0]
 8041baa:	429a      	cmp	r2, r3
 8041bac:	d210      	bcs.n	8041bd0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8041bae:	4b26      	ldr	r3, [pc, #152]	; (8041c48 <HAL_RCC_ClockConfig+0x1b0>)
 8041bb0:	681b      	ldr	r3, [r3, #0]
 8041bb2:	f023 0207 	bic.w	r2, r3, #7
 8041bb6:	4924      	ldr	r1, [pc, #144]	; (8041c48 <HAL_RCC_ClockConfig+0x1b0>)
 8041bb8:	683b      	ldr	r3, [r7, #0]
 8041bba:	4313      	orrs	r3, r2
 8041bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8041bbe:	4b22      	ldr	r3, [pc, #136]	; (8041c48 <HAL_RCC_ClockConfig+0x1b0>)
 8041bc0:	681b      	ldr	r3, [r3, #0]
 8041bc2:	f003 0307 	and.w	r3, r3, #7
 8041bc6:	683a      	ldr	r2, [r7, #0]
 8041bc8:	429a      	cmp	r2, r3
 8041bca:	d001      	beq.n	8041bd0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8041bcc:	2301      	movs	r3, #1
 8041bce:	e036      	b.n	8041c3e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8041bd0:	687b      	ldr	r3, [r7, #4]
 8041bd2:	681b      	ldr	r3, [r3, #0]
 8041bd4:	f003 0304 	and.w	r3, r3, #4
 8041bd8:	2b00      	cmp	r3, #0
 8041bda:	d008      	beq.n	8041bee <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8041bdc:	4b1b      	ldr	r3, [pc, #108]	; (8041c4c <HAL_RCC_ClockConfig+0x1b4>)
 8041bde:	689b      	ldr	r3, [r3, #8]
 8041be0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8041be4:	687b      	ldr	r3, [r7, #4]
 8041be6:	68db      	ldr	r3, [r3, #12]
 8041be8:	4918      	ldr	r1, [pc, #96]	; (8041c4c <HAL_RCC_ClockConfig+0x1b4>)
 8041bea:	4313      	orrs	r3, r2
 8041bec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8041bee:	687b      	ldr	r3, [r7, #4]
 8041bf0:	681b      	ldr	r3, [r3, #0]
 8041bf2:	f003 0308 	and.w	r3, r3, #8
 8041bf6:	2b00      	cmp	r3, #0
 8041bf8:	d009      	beq.n	8041c0e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8041bfa:	4b14      	ldr	r3, [pc, #80]	; (8041c4c <HAL_RCC_ClockConfig+0x1b4>)
 8041bfc:	689b      	ldr	r3, [r3, #8]
 8041bfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8041c02:	687b      	ldr	r3, [r7, #4]
 8041c04:	691b      	ldr	r3, [r3, #16]
 8041c06:	00db      	lsls	r3, r3, #3
 8041c08:	4910      	ldr	r1, [pc, #64]	; (8041c4c <HAL_RCC_ClockConfig+0x1b4>)
 8041c0a:	4313      	orrs	r3, r2
 8041c0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8041c0e:	f000 f825 	bl	8041c5c <HAL_RCC_GetSysClockFreq>
 8041c12:	4602      	mov	r2, r0
 8041c14:	4b0d      	ldr	r3, [pc, #52]	; (8041c4c <HAL_RCC_ClockConfig+0x1b4>)
 8041c16:	689b      	ldr	r3, [r3, #8]
 8041c18:	091b      	lsrs	r3, r3, #4
 8041c1a:	f003 030f 	and.w	r3, r3, #15
 8041c1e:	490c      	ldr	r1, [pc, #48]	; (8041c50 <HAL_RCC_ClockConfig+0x1b8>)
 8041c20:	5ccb      	ldrb	r3, [r1, r3]
 8041c22:	f003 031f 	and.w	r3, r3, #31
 8041c26:	fa22 f303 	lsr.w	r3, r2, r3
 8041c2a:	4a0a      	ldr	r2, [pc, #40]	; (8041c54 <HAL_RCC_ClockConfig+0x1bc>)
 8041c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8041c2e:	4b0a      	ldr	r3, [pc, #40]	; (8041c58 <HAL_RCC_ClockConfig+0x1c0>)
 8041c30:	681b      	ldr	r3, [r3, #0]
 8041c32:	4618      	mov	r0, r3
 8041c34:	f7fe ff14 	bl	8040a60 <HAL_InitTick>
 8041c38:	4603      	mov	r3, r0
 8041c3a:	72fb      	strb	r3, [r7, #11]

  return status;
 8041c3c:	7afb      	ldrb	r3, [r7, #11]
}
 8041c3e:	4618      	mov	r0, r3
 8041c40:	3710      	adds	r7, #16
 8041c42:	46bd      	mov	sp, r7
 8041c44:	bd80      	pop	{r7, pc}
 8041c46:	bf00      	nop
 8041c48:	40022000 	.word	0x40022000
 8041c4c:	40021000 	.word	0x40021000
 8041c50:	0804377c 	.word	0x0804377c
 8041c54:	20000000 	.word	0x20000000
 8041c58:	20000004 	.word	0x20000004

08041c5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8041c5c:	b480      	push	{r7}
 8041c5e:	b089      	sub	sp, #36	; 0x24
 8041c60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8041c62:	2300      	movs	r3, #0
 8041c64:	61fb      	str	r3, [r7, #28]
 8041c66:	2300      	movs	r3, #0
 8041c68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8041c6a:	4b3e      	ldr	r3, [pc, #248]	; (8041d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8041c6c:	689b      	ldr	r3, [r3, #8]
 8041c6e:	f003 030c 	and.w	r3, r3, #12
 8041c72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8041c74:	4b3b      	ldr	r3, [pc, #236]	; (8041d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8041c76:	68db      	ldr	r3, [r3, #12]
 8041c78:	f003 0303 	and.w	r3, r3, #3
 8041c7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8041c7e:	693b      	ldr	r3, [r7, #16]
 8041c80:	2b00      	cmp	r3, #0
 8041c82:	d005      	beq.n	8041c90 <HAL_RCC_GetSysClockFreq+0x34>
 8041c84:	693b      	ldr	r3, [r7, #16]
 8041c86:	2b0c      	cmp	r3, #12
 8041c88:	d121      	bne.n	8041cce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8041c8a:	68fb      	ldr	r3, [r7, #12]
 8041c8c:	2b01      	cmp	r3, #1
 8041c8e:	d11e      	bne.n	8041cce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8041c90:	4b34      	ldr	r3, [pc, #208]	; (8041d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8041c92:	681b      	ldr	r3, [r3, #0]
 8041c94:	f003 0308 	and.w	r3, r3, #8
 8041c98:	2b00      	cmp	r3, #0
 8041c9a:	d107      	bne.n	8041cac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8041c9c:	4b31      	ldr	r3, [pc, #196]	; (8041d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8041c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041ca2:	0a1b      	lsrs	r3, r3, #8
 8041ca4:	f003 030f 	and.w	r3, r3, #15
 8041ca8:	61fb      	str	r3, [r7, #28]
 8041caa:	e005      	b.n	8041cb8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8041cac:	4b2d      	ldr	r3, [pc, #180]	; (8041d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8041cae:	681b      	ldr	r3, [r3, #0]
 8041cb0:	091b      	lsrs	r3, r3, #4
 8041cb2:	f003 030f 	and.w	r3, r3, #15
 8041cb6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8041cb8:	4a2b      	ldr	r2, [pc, #172]	; (8041d68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8041cba:	69fb      	ldr	r3, [r7, #28]
 8041cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8041cc0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8041cc2:	693b      	ldr	r3, [r7, #16]
 8041cc4:	2b00      	cmp	r3, #0
 8041cc6:	d10d      	bne.n	8041ce4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8041cc8:	69fb      	ldr	r3, [r7, #28]
 8041cca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8041ccc:	e00a      	b.n	8041ce4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8041cce:	693b      	ldr	r3, [r7, #16]
 8041cd0:	2b04      	cmp	r3, #4
 8041cd2:	d102      	bne.n	8041cda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8041cd4:	4b25      	ldr	r3, [pc, #148]	; (8041d6c <HAL_RCC_GetSysClockFreq+0x110>)
 8041cd6:	61bb      	str	r3, [r7, #24]
 8041cd8:	e004      	b.n	8041ce4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8041cda:	693b      	ldr	r3, [r7, #16]
 8041cdc:	2b08      	cmp	r3, #8
 8041cde:	d101      	bne.n	8041ce4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8041ce0:	4b23      	ldr	r3, [pc, #140]	; (8041d70 <HAL_RCC_GetSysClockFreq+0x114>)
 8041ce2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8041ce4:	693b      	ldr	r3, [r7, #16]
 8041ce6:	2b0c      	cmp	r3, #12
 8041ce8:	d134      	bne.n	8041d54 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8041cea:	4b1e      	ldr	r3, [pc, #120]	; (8041d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8041cec:	68db      	ldr	r3, [r3, #12]
 8041cee:	f003 0303 	and.w	r3, r3, #3
 8041cf2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8041cf4:	68bb      	ldr	r3, [r7, #8]
 8041cf6:	2b02      	cmp	r3, #2
 8041cf8:	d003      	beq.n	8041d02 <HAL_RCC_GetSysClockFreq+0xa6>
 8041cfa:	68bb      	ldr	r3, [r7, #8]
 8041cfc:	2b03      	cmp	r3, #3
 8041cfe:	d003      	beq.n	8041d08 <HAL_RCC_GetSysClockFreq+0xac>
 8041d00:	e005      	b.n	8041d0e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8041d02:	4b1a      	ldr	r3, [pc, #104]	; (8041d6c <HAL_RCC_GetSysClockFreq+0x110>)
 8041d04:	617b      	str	r3, [r7, #20]
      break;
 8041d06:	e005      	b.n	8041d14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8041d08:	4b19      	ldr	r3, [pc, #100]	; (8041d70 <HAL_RCC_GetSysClockFreq+0x114>)
 8041d0a:	617b      	str	r3, [r7, #20]
      break;
 8041d0c:	e002      	b.n	8041d14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8041d0e:	69fb      	ldr	r3, [r7, #28]
 8041d10:	617b      	str	r3, [r7, #20]
      break;
 8041d12:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8041d14:	4b13      	ldr	r3, [pc, #76]	; (8041d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8041d16:	68db      	ldr	r3, [r3, #12]
 8041d18:	091b      	lsrs	r3, r3, #4
 8041d1a:	f003 0307 	and.w	r3, r3, #7
 8041d1e:	3301      	adds	r3, #1
 8041d20:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8041d22:	4b10      	ldr	r3, [pc, #64]	; (8041d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8041d24:	68db      	ldr	r3, [r3, #12]
 8041d26:	0a1b      	lsrs	r3, r3, #8
 8041d28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8041d2c:	697a      	ldr	r2, [r7, #20]
 8041d2e:	fb02 f203 	mul.w	r2, r2, r3
 8041d32:	687b      	ldr	r3, [r7, #4]
 8041d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8041d38:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8041d3a:	4b0a      	ldr	r3, [pc, #40]	; (8041d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8041d3c:	68db      	ldr	r3, [r3, #12]
 8041d3e:	0e5b      	lsrs	r3, r3, #25
 8041d40:	f003 0303 	and.w	r3, r3, #3
 8041d44:	3301      	adds	r3, #1
 8041d46:	005b      	lsls	r3, r3, #1
 8041d48:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8041d4a:	697a      	ldr	r2, [r7, #20]
 8041d4c:	683b      	ldr	r3, [r7, #0]
 8041d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8041d52:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8041d54:	69bb      	ldr	r3, [r7, #24]
}
 8041d56:	4618      	mov	r0, r3
 8041d58:	3724      	adds	r7, #36	; 0x24
 8041d5a:	46bd      	mov	sp, r7
 8041d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041d60:	4770      	bx	lr
 8041d62:	bf00      	nop
 8041d64:	40021000 	.word	0x40021000
 8041d68:	08043794 	.word	0x08043794
 8041d6c:	00f42400 	.word	0x00f42400
 8041d70:	007a1200 	.word	0x007a1200

08041d74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8041d74:	b480      	push	{r7}
 8041d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8041d78:	4b03      	ldr	r3, [pc, #12]	; (8041d88 <HAL_RCC_GetHCLKFreq+0x14>)
 8041d7a:	681b      	ldr	r3, [r3, #0]
}
 8041d7c:	4618      	mov	r0, r3
 8041d7e:	46bd      	mov	sp, r7
 8041d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041d84:	4770      	bx	lr
 8041d86:	bf00      	nop
 8041d88:	20000000 	.word	0x20000000

08041d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8041d8c:	b580      	push	{r7, lr}
 8041d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8041d90:	f7ff fff0 	bl	8041d74 <HAL_RCC_GetHCLKFreq>
 8041d94:	4602      	mov	r2, r0
 8041d96:	4b06      	ldr	r3, [pc, #24]	; (8041db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8041d98:	689b      	ldr	r3, [r3, #8]
 8041d9a:	0a1b      	lsrs	r3, r3, #8
 8041d9c:	f003 0307 	and.w	r3, r3, #7
 8041da0:	4904      	ldr	r1, [pc, #16]	; (8041db4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8041da2:	5ccb      	ldrb	r3, [r1, r3]
 8041da4:	f003 031f 	and.w	r3, r3, #31
 8041da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8041dac:	4618      	mov	r0, r3
 8041dae:	bd80      	pop	{r7, pc}
 8041db0:	40021000 	.word	0x40021000
 8041db4:	0804378c 	.word	0x0804378c

08041db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8041db8:	b580      	push	{r7, lr}
 8041dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8041dbc:	f7ff ffda 	bl	8041d74 <HAL_RCC_GetHCLKFreq>
 8041dc0:	4602      	mov	r2, r0
 8041dc2:	4b06      	ldr	r3, [pc, #24]	; (8041ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8041dc4:	689b      	ldr	r3, [r3, #8]
 8041dc6:	0adb      	lsrs	r3, r3, #11
 8041dc8:	f003 0307 	and.w	r3, r3, #7
 8041dcc:	4904      	ldr	r1, [pc, #16]	; (8041de0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8041dce:	5ccb      	ldrb	r3, [r1, r3]
 8041dd0:	f003 031f 	and.w	r3, r3, #31
 8041dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8041dd8:	4618      	mov	r0, r3
 8041dda:	bd80      	pop	{r7, pc}
 8041ddc:	40021000 	.word	0x40021000
 8041de0:	0804378c 	.word	0x0804378c

08041de4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8041de4:	b580      	push	{r7, lr}
 8041de6:	b086      	sub	sp, #24
 8041de8:	af00      	add	r7, sp, #0
 8041dea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8041dec:	2300      	movs	r3, #0
 8041dee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8041df0:	4b2a      	ldr	r3, [pc, #168]	; (8041e9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8041df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041df8:	2b00      	cmp	r3, #0
 8041dfa:	d003      	beq.n	8041e04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8041dfc:	f7ff fa02 	bl	8041204 <HAL_PWREx_GetVoltageRange>
 8041e00:	6178      	str	r0, [r7, #20]
 8041e02:	e014      	b.n	8041e2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8041e04:	4b25      	ldr	r3, [pc, #148]	; (8041e9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8041e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041e08:	4a24      	ldr	r2, [pc, #144]	; (8041e9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8041e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041e0e:	6593      	str	r3, [r2, #88]	; 0x58
 8041e10:	4b22      	ldr	r3, [pc, #136]	; (8041e9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8041e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041e18:	60fb      	str	r3, [r7, #12]
 8041e1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8041e1c:	f7ff f9f2 	bl	8041204 <HAL_PWREx_GetVoltageRange>
 8041e20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8041e22:	4b1e      	ldr	r3, [pc, #120]	; (8041e9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8041e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041e26:	4a1d      	ldr	r2, [pc, #116]	; (8041e9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8041e28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8041e2c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8041e2e:	697b      	ldr	r3, [r7, #20]
 8041e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8041e34:	d10b      	bne.n	8041e4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8041e36:	687b      	ldr	r3, [r7, #4]
 8041e38:	2b80      	cmp	r3, #128	; 0x80
 8041e3a:	d919      	bls.n	8041e70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8041e3c:	687b      	ldr	r3, [r7, #4]
 8041e3e:	2ba0      	cmp	r3, #160	; 0xa0
 8041e40:	d902      	bls.n	8041e48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8041e42:	2302      	movs	r3, #2
 8041e44:	613b      	str	r3, [r7, #16]
 8041e46:	e013      	b.n	8041e70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8041e48:	2301      	movs	r3, #1
 8041e4a:	613b      	str	r3, [r7, #16]
 8041e4c:	e010      	b.n	8041e70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8041e4e:	687b      	ldr	r3, [r7, #4]
 8041e50:	2b80      	cmp	r3, #128	; 0x80
 8041e52:	d902      	bls.n	8041e5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8041e54:	2303      	movs	r3, #3
 8041e56:	613b      	str	r3, [r7, #16]
 8041e58:	e00a      	b.n	8041e70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8041e5a:	687b      	ldr	r3, [r7, #4]
 8041e5c:	2b80      	cmp	r3, #128	; 0x80
 8041e5e:	d102      	bne.n	8041e66 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8041e60:	2302      	movs	r3, #2
 8041e62:	613b      	str	r3, [r7, #16]
 8041e64:	e004      	b.n	8041e70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8041e66:	687b      	ldr	r3, [r7, #4]
 8041e68:	2b70      	cmp	r3, #112	; 0x70
 8041e6a:	d101      	bne.n	8041e70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8041e6c:	2301      	movs	r3, #1
 8041e6e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8041e70:	4b0b      	ldr	r3, [pc, #44]	; (8041ea0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8041e72:	681b      	ldr	r3, [r3, #0]
 8041e74:	f023 0207 	bic.w	r2, r3, #7
 8041e78:	4909      	ldr	r1, [pc, #36]	; (8041ea0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8041e7a:	693b      	ldr	r3, [r7, #16]
 8041e7c:	4313      	orrs	r3, r2
 8041e7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8041e80:	4b07      	ldr	r3, [pc, #28]	; (8041ea0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8041e82:	681b      	ldr	r3, [r3, #0]
 8041e84:	f003 0307 	and.w	r3, r3, #7
 8041e88:	693a      	ldr	r2, [r7, #16]
 8041e8a:	429a      	cmp	r2, r3
 8041e8c:	d001      	beq.n	8041e92 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8041e8e:	2301      	movs	r3, #1
 8041e90:	e000      	b.n	8041e94 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8041e92:	2300      	movs	r3, #0
}
 8041e94:	4618      	mov	r0, r3
 8041e96:	3718      	adds	r7, #24
 8041e98:	46bd      	mov	sp, r7
 8041e9a:	bd80      	pop	{r7, pc}
 8041e9c:	40021000 	.word	0x40021000
 8041ea0:	40022000 	.word	0x40022000

08041ea4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8041ea4:	b580      	push	{r7, lr}
 8041ea6:	b086      	sub	sp, #24
 8041ea8:	af00      	add	r7, sp, #0
 8041eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8041eac:	2300      	movs	r3, #0
 8041eae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8041eb0:	2300      	movs	r3, #0
 8041eb2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8041eb4:	687b      	ldr	r3, [r7, #4]
 8041eb6:	681b      	ldr	r3, [r3, #0]
 8041eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8041ebc:	2b00      	cmp	r3, #0
 8041ebe:	d041      	beq.n	8041f44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8041ec0:	687b      	ldr	r3, [r7, #4]
 8041ec2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8041ec4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8041ec8:	d02a      	beq.n	8041f20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8041eca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8041ece:	d824      	bhi.n	8041f1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8041ed0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8041ed4:	d008      	beq.n	8041ee8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8041ed6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8041eda:	d81e      	bhi.n	8041f1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8041edc:	2b00      	cmp	r3, #0
 8041ede:	d00a      	beq.n	8041ef6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8041ee0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8041ee4:	d010      	beq.n	8041f08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8041ee6:	e018      	b.n	8041f1a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8041ee8:	4b86      	ldr	r3, [pc, #536]	; (8042104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8041eea:	68db      	ldr	r3, [r3, #12]
 8041eec:	4a85      	ldr	r2, [pc, #532]	; (8042104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8041eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041ef2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8041ef4:	e015      	b.n	8041f22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8041ef6:	687b      	ldr	r3, [r7, #4]
 8041ef8:	3304      	adds	r3, #4
 8041efa:	2100      	movs	r1, #0
 8041efc:	4618      	mov	r0, r3
 8041efe:	f000 fabb 	bl	8042478 <RCCEx_PLLSAI1_Config>
 8041f02:	4603      	mov	r3, r0
 8041f04:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8041f06:	e00c      	b.n	8041f22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8041f08:	687b      	ldr	r3, [r7, #4]
 8041f0a:	3320      	adds	r3, #32
 8041f0c:	2100      	movs	r1, #0
 8041f0e:	4618      	mov	r0, r3
 8041f10:	f000 fba6 	bl	8042660 <RCCEx_PLLSAI2_Config>
 8041f14:	4603      	mov	r3, r0
 8041f16:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8041f18:	e003      	b.n	8041f22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8041f1a:	2301      	movs	r3, #1
 8041f1c:	74fb      	strb	r3, [r7, #19]
      break;
 8041f1e:	e000      	b.n	8041f22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8041f20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8041f22:	7cfb      	ldrb	r3, [r7, #19]
 8041f24:	2b00      	cmp	r3, #0
 8041f26:	d10b      	bne.n	8041f40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8041f28:	4b76      	ldr	r3, [pc, #472]	; (8042104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8041f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041f2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8041f32:	687b      	ldr	r3, [r7, #4]
 8041f34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8041f36:	4973      	ldr	r1, [pc, #460]	; (8042104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8041f38:	4313      	orrs	r3, r2
 8041f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8041f3e:	e001      	b.n	8041f44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8041f40:	7cfb      	ldrb	r3, [r7, #19]
 8041f42:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8041f44:	687b      	ldr	r3, [r7, #4]
 8041f46:	681b      	ldr	r3, [r3, #0]
 8041f48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8041f4c:	2b00      	cmp	r3, #0
 8041f4e:	d041      	beq.n	8041fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8041f50:	687b      	ldr	r3, [r7, #4]
 8041f52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8041f54:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8041f58:	d02a      	beq.n	8041fb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8041f5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8041f5e:	d824      	bhi.n	8041faa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8041f60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8041f64:	d008      	beq.n	8041f78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8041f66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8041f6a:	d81e      	bhi.n	8041faa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8041f6c:	2b00      	cmp	r3, #0
 8041f6e:	d00a      	beq.n	8041f86 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8041f70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8041f74:	d010      	beq.n	8041f98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8041f76:	e018      	b.n	8041faa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8041f78:	4b62      	ldr	r3, [pc, #392]	; (8042104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8041f7a:	68db      	ldr	r3, [r3, #12]
 8041f7c:	4a61      	ldr	r2, [pc, #388]	; (8042104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8041f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041f82:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8041f84:	e015      	b.n	8041fb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8041f86:	687b      	ldr	r3, [r7, #4]
 8041f88:	3304      	adds	r3, #4
 8041f8a:	2100      	movs	r1, #0
 8041f8c:	4618      	mov	r0, r3
 8041f8e:	f000 fa73 	bl	8042478 <RCCEx_PLLSAI1_Config>
 8041f92:	4603      	mov	r3, r0
 8041f94:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8041f96:	e00c      	b.n	8041fb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8041f98:	687b      	ldr	r3, [r7, #4]
 8041f9a:	3320      	adds	r3, #32
 8041f9c:	2100      	movs	r1, #0
 8041f9e:	4618      	mov	r0, r3
 8041fa0:	f000 fb5e 	bl	8042660 <RCCEx_PLLSAI2_Config>
 8041fa4:	4603      	mov	r3, r0
 8041fa6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8041fa8:	e003      	b.n	8041fb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8041faa:	2301      	movs	r3, #1
 8041fac:	74fb      	strb	r3, [r7, #19]
      break;
 8041fae:	e000      	b.n	8041fb2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8041fb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8041fb2:	7cfb      	ldrb	r3, [r7, #19]
 8041fb4:	2b00      	cmp	r3, #0
 8041fb6:	d10b      	bne.n	8041fd0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8041fb8:	4b52      	ldr	r3, [pc, #328]	; (8042104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8041fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041fbe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8041fc2:	687b      	ldr	r3, [r7, #4]
 8041fc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8041fc6:	494f      	ldr	r1, [pc, #316]	; (8042104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8041fc8:	4313      	orrs	r3, r2
 8041fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8041fce:	e001      	b.n	8041fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8041fd0:	7cfb      	ldrb	r3, [r7, #19]
 8041fd2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8041fd4:	687b      	ldr	r3, [r7, #4]
 8041fd6:	681b      	ldr	r3, [r3, #0]
 8041fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041fdc:	2b00      	cmp	r3, #0
 8041fde:	f000 80a0 	beq.w	8042122 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8041fe2:	2300      	movs	r3, #0
 8041fe4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8041fe6:	4b47      	ldr	r3, [pc, #284]	; (8042104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8041fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041fee:	2b00      	cmp	r3, #0
 8041ff0:	d101      	bne.n	8041ff6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8041ff2:	2301      	movs	r3, #1
 8041ff4:	e000      	b.n	8041ff8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8041ff6:	2300      	movs	r3, #0
 8041ff8:	2b00      	cmp	r3, #0
 8041ffa:	d00d      	beq.n	8042018 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8041ffc:	4b41      	ldr	r3, [pc, #260]	; (8042104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8041ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042000:	4a40      	ldr	r2, [pc, #256]	; (8042104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8042002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8042006:	6593      	str	r3, [r2, #88]	; 0x58
 8042008:	4b3e      	ldr	r3, [pc, #248]	; (8042104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804200a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804200c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8042010:	60bb      	str	r3, [r7, #8]
 8042012:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8042014:	2301      	movs	r3, #1
 8042016:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8042018:	4b3b      	ldr	r3, [pc, #236]	; (8042108 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 804201a:	681b      	ldr	r3, [r3, #0]
 804201c:	4a3a      	ldr	r2, [pc, #232]	; (8042108 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 804201e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8042022:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8042024:	f7fe fd6c 	bl	8040b00 <HAL_GetTick>
 8042028:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 804202a:	e009      	b.n	8042040 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 804202c:	f7fe fd68 	bl	8040b00 <HAL_GetTick>
 8042030:	4602      	mov	r2, r0
 8042032:	68fb      	ldr	r3, [r7, #12]
 8042034:	1ad3      	subs	r3, r2, r3
 8042036:	2b02      	cmp	r3, #2
 8042038:	d902      	bls.n	8042040 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 804203a:	2303      	movs	r3, #3
 804203c:	74fb      	strb	r3, [r7, #19]
        break;
 804203e:	e005      	b.n	804204c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8042040:	4b31      	ldr	r3, [pc, #196]	; (8042108 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8042042:	681b      	ldr	r3, [r3, #0]
 8042044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8042048:	2b00      	cmp	r3, #0
 804204a:	d0ef      	beq.n	804202c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 804204c:	7cfb      	ldrb	r3, [r7, #19]
 804204e:	2b00      	cmp	r3, #0
 8042050:	d15c      	bne.n	804210c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8042052:	4b2c      	ldr	r3, [pc, #176]	; (8042104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8042054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 804205c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 804205e:	697b      	ldr	r3, [r7, #20]
 8042060:	2b00      	cmp	r3, #0
 8042062:	d01f      	beq.n	80420a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8042064:	687b      	ldr	r3, [r7, #4]
 8042066:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804206a:	697a      	ldr	r2, [r7, #20]
 804206c:	429a      	cmp	r2, r3
 804206e:	d019      	beq.n	80420a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8042070:	4b24      	ldr	r3, [pc, #144]	; (8042104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8042072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 804207a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 804207c:	4b21      	ldr	r3, [pc, #132]	; (8042104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804207e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042082:	4a20      	ldr	r2, [pc, #128]	; (8042104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8042084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8042088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 804208c:	4b1d      	ldr	r3, [pc, #116]	; (8042104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804208e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042092:	4a1c      	ldr	r2, [pc, #112]	; (8042104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8042094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8042098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 804209c:	4a19      	ldr	r2, [pc, #100]	; (8042104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804209e:	697b      	ldr	r3, [r7, #20]
 80420a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80420a4:	697b      	ldr	r3, [r7, #20]
 80420a6:	f003 0301 	and.w	r3, r3, #1
 80420aa:	2b00      	cmp	r3, #0
 80420ac:	d016      	beq.n	80420dc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80420ae:	f7fe fd27 	bl	8040b00 <HAL_GetTick>
 80420b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80420b4:	e00b      	b.n	80420ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80420b6:	f7fe fd23 	bl	8040b00 <HAL_GetTick>
 80420ba:	4602      	mov	r2, r0
 80420bc:	68fb      	ldr	r3, [r7, #12]
 80420be:	1ad3      	subs	r3, r2, r3
 80420c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80420c4:	4293      	cmp	r3, r2
 80420c6:	d902      	bls.n	80420ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80420c8:	2303      	movs	r3, #3
 80420ca:	74fb      	strb	r3, [r7, #19]
            break;
 80420cc:	e006      	b.n	80420dc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80420ce:	4b0d      	ldr	r3, [pc, #52]	; (8042104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80420d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80420d4:	f003 0302 	and.w	r3, r3, #2
 80420d8:	2b00      	cmp	r3, #0
 80420da:	d0ec      	beq.n	80420b6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80420dc:	7cfb      	ldrb	r3, [r7, #19]
 80420de:	2b00      	cmp	r3, #0
 80420e0:	d10c      	bne.n	80420fc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80420e2:	4b08      	ldr	r3, [pc, #32]	; (8042104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80420e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80420e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80420ec:	687b      	ldr	r3, [r7, #4]
 80420ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80420f2:	4904      	ldr	r1, [pc, #16]	; (8042104 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80420f4:	4313      	orrs	r3, r2
 80420f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80420fa:	e009      	b.n	8042110 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80420fc:	7cfb      	ldrb	r3, [r7, #19]
 80420fe:	74bb      	strb	r3, [r7, #18]
 8042100:	e006      	b.n	8042110 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8042102:	bf00      	nop
 8042104:	40021000 	.word	0x40021000
 8042108:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 804210c:	7cfb      	ldrb	r3, [r7, #19]
 804210e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8042110:	7c7b      	ldrb	r3, [r7, #17]
 8042112:	2b01      	cmp	r3, #1
 8042114:	d105      	bne.n	8042122 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8042116:	4b9e      	ldr	r3, [pc, #632]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8042118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804211a:	4a9d      	ldr	r2, [pc, #628]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 804211c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8042120:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8042122:	687b      	ldr	r3, [r7, #4]
 8042124:	681b      	ldr	r3, [r3, #0]
 8042126:	f003 0301 	and.w	r3, r3, #1
 804212a:	2b00      	cmp	r3, #0
 804212c:	d00a      	beq.n	8042144 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 804212e:	4b98      	ldr	r3, [pc, #608]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8042130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042134:	f023 0203 	bic.w	r2, r3, #3
 8042138:	687b      	ldr	r3, [r7, #4]
 804213a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804213c:	4994      	ldr	r1, [pc, #592]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 804213e:	4313      	orrs	r3, r2
 8042140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8042144:	687b      	ldr	r3, [r7, #4]
 8042146:	681b      	ldr	r3, [r3, #0]
 8042148:	f003 0302 	and.w	r3, r3, #2
 804214c:	2b00      	cmp	r3, #0
 804214e:	d00a      	beq.n	8042166 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8042150:	4b8f      	ldr	r3, [pc, #572]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8042152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042156:	f023 020c 	bic.w	r2, r3, #12
 804215a:	687b      	ldr	r3, [r7, #4]
 804215c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804215e:	498c      	ldr	r1, [pc, #560]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8042160:	4313      	orrs	r3, r2
 8042162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8042166:	687b      	ldr	r3, [r7, #4]
 8042168:	681b      	ldr	r3, [r3, #0]
 804216a:	f003 0304 	and.w	r3, r3, #4
 804216e:	2b00      	cmp	r3, #0
 8042170:	d00a      	beq.n	8042188 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8042172:	4b87      	ldr	r3, [pc, #540]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8042174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042178:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 804217c:	687b      	ldr	r3, [r7, #4]
 804217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042180:	4983      	ldr	r1, [pc, #524]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8042182:	4313      	orrs	r3, r2
 8042184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8042188:	687b      	ldr	r3, [r7, #4]
 804218a:	681b      	ldr	r3, [r3, #0]
 804218c:	f003 0308 	and.w	r3, r3, #8
 8042190:	2b00      	cmp	r3, #0
 8042192:	d00a      	beq.n	80421aa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8042194:	4b7e      	ldr	r3, [pc, #504]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8042196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804219a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 804219e:	687b      	ldr	r3, [r7, #4]
 80421a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80421a2:	497b      	ldr	r1, [pc, #492]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80421a4:	4313      	orrs	r3, r2
 80421a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80421aa:	687b      	ldr	r3, [r7, #4]
 80421ac:	681b      	ldr	r3, [r3, #0]
 80421ae:	f003 0310 	and.w	r3, r3, #16
 80421b2:	2b00      	cmp	r3, #0
 80421b4:	d00a      	beq.n	80421cc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80421b6:	4b76      	ldr	r3, [pc, #472]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80421b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80421bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80421c0:	687b      	ldr	r3, [r7, #4]
 80421c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80421c4:	4972      	ldr	r1, [pc, #456]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80421c6:	4313      	orrs	r3, r2
 80421c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80421cc:	687b      	ldr	r3, [r7, #4]
 80421ce:	681b      	ldr	r3, [r3, #0]
 80421d0:	f003 0320 	and.w	r3, r3, #32
 80421d4:	2b00      	cmp	r3, #0
 80421d6:	d00a      	beq.n	80421ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80421d8:	4b6d      	ldr	r3, [pc, #436]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80421da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80421de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80421e2:	687b      	ldr	r3, [r7, #4]
 80421e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80421e6:	496a      	ldr	r1, [pc, #424]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80421e8:	4313      	orrs	r3, r2
 80421ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80421ee:	687b      	ldr	r3, [r7, #4]
 80421f0:	681b      	ldr	r3, [r3, #0]
 80421f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80421f6:	2b00      	cmp	r3, #0
 80421f8:	d00a      	beq.n	8042210 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80421fa:	4b65      	ldr	r3, [pc, #404]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80421fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042200:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8042204:	687b      	ldr	r3, [r7, #4]
 8042206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8042208:	4961      	ldr	r1, [pc, #388]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 804220a:	4313      	orrs	r3, r2
 804220c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8042210:	687b      	ldr	r3, [r7, #4]
 8042212:	681b      	ldr	r3, [r3, #0]
 8042214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8042218:	2b00      	cmp	r3, #0
 804221a:	d00a      	beq.n	8042232 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 804221c:	4b5c      	ldr	r3, [pc, #368]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 804221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042222:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8042226:	687b      	ldr	r3, [r7, #4]
 8042228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804222a:	4959      	ldr	r1, [pc, #356]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 804222c:	4313      	orrs	r3, r2
 804222e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8042232:	687b      	ldr	r3, [r7, #4]
 8042234:	681b      	ldr	r3, [r3, #0]
 8042236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804223a:	2b00      	cmp	r3, #0
 804223c:	d00a      	beq.n	8042254 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 804223e:	4b54      	ldr	r3, [pc, #336]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8042240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042244:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8042248:	687b      	ldr	r3, [r7, #4]
 804224a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 804224c:	4950      	ldr	r1, [pc, #320]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 804224e:	4313      	orrs	r3, r2
 8042250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8042254:	687b      	ldr	r3, [r7, #4]
 8042256:	681b      	ldr	r3, [r3, #0]
 8042258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804225c:	2b00      	cmp	r3, #0
 804225e:	d00a      	beq.n	8042276 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8042260:	4b4b      	ldr	r3, [pc, #300]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8042262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042266:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 804226a:	687b      	ldr	r3, [r7, #4]
 804226c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804226e:	4948      	ldr	r1, [pc, #288]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8042270:	4313      	orrs	r3, r2
 8042272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8042276:	687b      	ldr	r3, [r7, #4]
 8042278:	681b      	ldr	r3, [r3, #0]
 804227a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804227e:	2b00      	cmp	r3, #0
 8042280:	d00a      	beq.n	8042298 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8042282:	4b43      	ldr	r3, [pc, #268]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8042284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042288:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 804228c:	687b      	ldr	r3, [r7, #4]
 804228e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042290:	493f      	ldr	r1, [pc, #252]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8042292:	4313      	orrs	r3, r2
 8042294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8042298:	687b      	ldr	r3, [r7, #4]
 804229a:	681b      	ldr	r3, [r3, #0]
 804229c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80422a0:	2b00      	cmp	r3, #0
 80422a2:	d028      	beq.n	80422f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80422a4:	4b3a      	ldr	r3, [pc, #232]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80422a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80422aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80422ae:	687b      	ldr	r3, [r7, #4]
 80422b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80422b2:	4937      	ldr	r1, [pc, #220]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80422b4:	4313      	orrs	r3, r2
 80422b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80422ba:	687b      	ldr	r3, [r7, #4]
 80422bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80422be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80422c2:	d106      	bne.n	80422d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80422c4:	4b32      	ldr	r3, [pc, #200]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80422c6:	68db      	ldr	r3, [r3, #12]
 80422c8:	4a31      	ldr	r2, [pc, #196]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80422ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80422ce:	60d3      	str	r3, [r2, #12]
 80422d0:	e011      	b.n	80422f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80422d2:	687b      	ldr	r3, [r7, #4]
 80422d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80422d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80422da:	d10c      	bne.n	80422f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80422dc:	687b      	ldr	r3, [r7, #4]
 80422de:	3304      	adds	r3, #4
 80422e0:	2101      	movs	r1, #1
 80422e2:	4618      	mov	r0, r3
 80422e4:	f000 f8c8 	bl	8042478 <RCCEx_PLLSAI1_Config>
 80422e8:	4603      	mov	r3, r0
 80422ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80422ec:	7cfb      	ldrb	r3, [r7, #19]
 80422ee:	2b00      	cmp	r3, #0
 80422f0:	d001      	beq.n	80422f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80422f2:	7cfb      	ldrb	r3, [r7, #19]
 80422f4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80422f6:	687b      	ldr	r3, [r7, #4]
 80422f8:	681b      	ldr	r3, [r3, #0]
 80422fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80422fe:	2b00      	cmp	r3, #0
 8042300:	d028      	beq.n	8042354 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8042302:	4b23      	ldr	r3, [pc, #140]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8042304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042308:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 804230c:	687b      	ldr	r3, [r7, #4]
 804230e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042310:	491f      	ldr	r1, [pc, #124]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8042312:	4313      	orrs	r3, r2
 8042314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8042318:	687b      	ldr	r3, [r7, #4]
 804231a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804231c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8042320:	d106      	bne.n	8042330 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8042322:	4b1b      	ldr	r3, [pc, #108]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8042324:	68db      	ldr	r3, [r3, #12]
 8042326:	4a1a      	ldr	r2, [pc, #104]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8042328:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 804232c:	60d3      	str	r3, [r2, #12]
 804232e:	e011      	b.n	8042354 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8042330:	687b      	ldr	r3, [r7, #4]
 8042332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042334:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8042338:	d10c      	bne.n	8042354 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 804233a:	687b      	ldr	r3, [r7, #4]
 804233c:	3304      	adds	r3, #4
 804233e:	2101      	movs	r1, #1
 8042340:	4618      	mov	r0, r3
 8042342:	f000 f899 	bl	8042478 <RCCEx_PLLSAI1_Config>
 8042346:	4603      	mov	r3, r0
 8042348:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 804234a:	7cfb      	ldrb	r3, [r7, #19]
 804234c:	2b00      	cmp	r3, #0
 804234e:	d001      	beq.n	8042354 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8042350:	7cfb      	ldrb	r3, [r7, #19]
 8042352:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8042354:	687b      	ldr	r3, [r7, #4]
 8042356:	681b      	ldr	r3, [r3, #0]
 8042358:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 804235c:	2b00      	cmp	r3, #0
 804235e:	d02b      	beq.n	80423b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8042360:	4b0b      	ldr	r3, [pc, #44]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8042362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042366:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 804236a:	687b      	ldr	r3, [r7, #4]
 804236c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804236e:	4908      	ldr	r1, [pc, #32]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8042370:	4313      	orrs	r3, r2
 8042372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8042376:	687b      	ldr	r3, [r7, #4]
 8042378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804237a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 804237e:	d109      	bne.n	8042394 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8042380:	4b03      	ldr	r3, [pc, #12]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8042382:	68db      	ldr	r3, [r3, #12]
 8042384:	4a02      	ldr	r2, [pc, #8]	; (8042390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8042386:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 804238a:	60d3      	str	r3, [r2, #12]
 804238c:	e014      	b.n	80423b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 804238e:	bf00      	nop
 8042390:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8042394:	687b      	ldr	r3, [r7, #4]
 8042396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8042398:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 804239c:	d10c      	bne.n	80423b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 804239e:	687b      	ldr	r3, [r7, #4]
 80423a0:	3304      	adds	r3, #4
 80423a2:	2101      	movs	r1, #1
 80423a4:	4618      	mov	r0, r3
 80423a6:	f000 f867 	bl	8042478 <RCCEx_PLLSAI1_Config>
 80423aa:	4603      	mov	r3, r0
 80423ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80423ae:	7cfb      	ldrb	r3, [r7, #19]
 80423b0:	2b00      	cmp	r3, #0
 80423b2:	d001      	beq.n	80423b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80423b4:	7cfb      	ldrb	r3, [r7, #19]
 80423b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80423b8:	687b      	ldr	r3, [r7, #4]
 80423ba:	681b      	ldr	r3, [r3, #0]
 80423bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80423c0:	2b00      	cmp	r3, #0
 80423c2:	d02f      	beq.n	8042424 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80423c4:	4b2b      	ldr	r3, [pc, #172]	; (8042474 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80423c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80423ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80423ce:	687b      	ldr	r3, [r7, #4]
 80423d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80423d2:	4928      	ldr	r1, [pc, #160]	; (8042474 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80423d4:	4313      	orrs	r3, r2
 80423d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80423da:	687b      	ldr	r3, [r7, #4]
 80423dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80423de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80423e2:	d10d      	bne.n	8042400 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80423e4:	687b      	ldr	r3, [r7, #4]
 80423e6:	3304      	adds	r3, #4
 80423e8:	2102      	movs	r1, #2
 80423ea:	4618      	mov	r0, r3
 80423ec:	f000 f844 	bl	8042478 <RCCEx_PLLSAI1_Config>
 80423f0:	4603      	mov	r3, r0
 80423f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80423f4:	7cfb      	ldrb	r3, [r7, #19]
 80423f6:	2b00      	cmp	r3, #0
 80423f8:	d014      	beq.n	8042424 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80423fa:	7cfb      	ldrb	r3, [r7, #19]
 80423fc:	74bb      	strb	r3, [r7, #18]
 80423fe:	e011      	b.n	8042424 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8042400:	687b      	ldr	r3, [r7, #4]
 8042402:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8042404:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8042408:	d10c      	bne.n	8042424 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 804240a:	687b      	ldr	r3, [r7, #4]
 804240c:	3320      	adds	r3, #32
 804240e:	2102      	movs	r1, #2
 8042410:	4618      	mov	r0, r3
 8042412:	f000 f925 	bl	8042660 <RCCEx_PLLSAI2_Config>
 8042416:	4603      	mov	r3, r0
 8042418:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 804241a:	7cfb      	ldrb	r3, [r7, #19]
 804241c:	2b00      	cmp	r3, #0
 804241e:	d001      	beq.n	8042424 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8042420:	7cfb      	ldrb	r3, [r7, #19]
 8042422:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8042424:	687b      	ldr	r3, [r7, #4]
 8042426:	681b      	ldr	r3, [r3, #0]
 8042428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 804242c:	2b00      	cmp	r3, #0
 804242e:	d00a      	beq.n	8042446 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8042430:	4b10      	ldr	r3, [pc, #64]	; (8042474 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8042432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042436:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 804243a:	687b      	ldr	r3, [r7, #4]
 804243c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804243e:	490d      	ldr	r1, [pc, #52]	; (8042474 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8042440:	4313      	orrs	r3, r2
 8042442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8042446:	687b      	ldr	r3, [r7, #4]
 8042448:	681b      	ldr	r3, [r3, #0]
 804244a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 804244e:	2b00      	cmp	r3, #0
 8042450:	d00b      	beq.n	804246a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8042452:	4b08      	ldr	r3, [pc, #32]	; (8042474 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8042454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042458:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 804245c:	687b      	ldr	r3, [r7, #4]
 804245e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8042462:	4904      	ldr	r1, [pc, #16]	; (8042474 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8042464:	4313      	orrs	r3, r2
 8042466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 804246a:	7cbb      	ldrb	r3, [r7, #18]
}
 804246c:	4618      	mov	r0, r3
 804246e:	3718      	adds	r7, #24
 8042470:	46bd      	mov	sp, r7
 8042472:	bd80      	pop	{r7, pc}
 8042474:	40021000 	.word	0x40021000

08042478 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8042478:	b580      	push	{r7, lr}
 804247a:	b084      	sub	sp, #16
 804247c:	af00      	add	r7, sp, #0
 804247e:	6078      	str	r0, [r7, #4]
 8042480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8042482:	2300      	movs	r3, #0
 8042484:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8042486:	4b75      	ldr	r3, [pc, #468]	; (804265c <RCCEx_PLLSAI1_Config+0x1e4>)
 8042488:	68db      	ldr	r3, [r3, #12]
 804248a:	f003 0303 	and.w	r3, r3, #3
 804248e:	2b00      	cmp	r3, #0
 8042490:	d018      	beq.n	80424c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8042492:	4b72      	ldr	r3, [pc, #456]	; (804265c <RCCEx_PLLSAI1_Config+0x1e4>)
 8042494:	68db      	ldr	r3, [r3, #12]
 8042496:	f003 0203 	and.w	r2, r3, #3
 804249a:	687b      	ldr	r3, [r7, #4]
 804249c:	681b      	ldr	r3, [r3, #0]
 804249e:	429a      	cmp	r2, r3
 80424a0:	d10d      	bne.n	80424be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80424a2:	687b      	ldr	r3, [r7, #4]
 80424a4:	681b      	ldr	r3, [r3, #0]
       ||
 80424a6:	2b00      	cmp	r3, #0
 80424a8:	d009      	beq.n	80424be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80424aa:	4b6c      	ldr	r3, [pc, #432]	; (804265c <RCCEx_PLLSAI1_Config+0x1e4>)
 80424ac:	68db      	ldr	r3, [r3, #12]
 80424ae:	091b      	lsrs	r3, r3, #4
 80424b0:	f003 0307 	and.w	r3, r3, #7
 80424b4:	1c5a      	adds	r2, r3, #1
 80424b6:	687b      	ldr	r3, [r7, #4]
 80424b8:	685b      	ldr	r3, [r3, #4]
       ||
 80424ba:	429a      	cmp	r2, r3
 80424bc:	d047      	beq.n	804254e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80424be:	2301      	movs	r3, #1
 80424c0:	73fb      	strb	r3, [r7, #15]
 80424c2:	e044      	b.n	804254e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80424c4:	687b      	ldr	r3, [r7, #4]
 80424c6:	681b      	ldr	r3, [r3, #0]
 80424c8:	2b03      	cmp	r3, #3
 80424ca:	d018      	beq.n	80424fe <RCCEx_PLLSAI1_Config+0x86>
 80424cc:	2b03      	cmp	r3, #3
 80424ce:	d825      	bhi.n	804251c <RCCEx_PLLSAI1_Config+0xa4>
 80424d0:	2b01      	cmp	r3, #1
 80424d2:	d002      	beq.n	80424da <RCCEx_PLLSAI1_Config+0x62>
 80424d4:	2b02      	cmp	r3, #2
 80424d6:	d009      	beq.n	80424ec <RCCEx_PLLSAI1_Config+0x74>
 80424d8:	e020      	b.n	804251c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80424da:	4b60      	ldr	r3, [pc, #384]	; (804265c <RCCEx_PLLSAI1_Config+0x1e4>)
 80424dc:	681b      	ldr	r3, [r3, #0]
 80424de:	f003 0302 	and.w	r3, r3, #2
 80424e2:	2b00      	cmp	r3, #0
 80424e4:	d11d      	bne.n	8042522 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80424e6:	2301      	movs	r3, #1
 80424e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80424ea:	e01a      	b.n	8042522 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80424ec:	4b5b      	ldr	r3, [pc, #364]	; (804265c <RCCEx_PLLSAI1_Config+0x1e4>)
 80424ee:	681b      	ldr	r3, [r3, #0]
 80424f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80424f4:	2b00      	cmp	r3, #0
 80424f6:	d116      	bne.n	8042526 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80424f8:	2301      	movs	r3, #1
 80424fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80424fc:	e013      	b.n	8042526 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80424fe:	4b57      	ldr	r3, [pc, #348]	; (804265c <RCCEx_PLLSAI1_Config+0x1e4>)
 8042500:	681b      	ldr	r3, [r3, #0]
 8042502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8042506:	2b00      	cmp	r3, #0
 8042508:	d10f      	bne.n	804252a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 804250a:	4b54      	ldr	r3, [pc, #336]	; (804265c <RCCEx_PLLSAI1_Config+0x1e4>)
 804250c:	681b      	ldr	r3, [r3, #0]
 804250e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8042512:	2b00      	cmp	r3, #0
 8042514:	d109      	bne.n	804252a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8042516:	2301      	movs	r3, #1
 8042518:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 804251a:	e006      	b.n	804252a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 804251c:	2301      	movs	r3, #1
 804251e:	73fb      	strb	r3, [r7, #15]
      break;
 8042520:	e004      	b.n	804252c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8042522:	bf00      	nop
 8042524:	e002      	b.n	804252c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8042526:	bf00      	nop
 8042528:	e000      	b.n	804252c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 804252a:	bf00      	nop
    }

    if(status == HAL_OK)
 804252c:	7bfb      	ldrb	r3, [r7, #15]
 804252e:	2b00      	cmp	r3, #0
 8042530:	d10d      	bne.n	804254e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8042532:	4b4a      	ldr	r3, [pc, #296]	; (804265c <RCCEx_PLLSAI1_Config+0x1e4>)
 8042534:	68db      	ldr	r3, [r3, #12]
 8042536:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 804253a:	687b      	ldr	r3, [r7, #4]
 804253c:	6819      	ldr	r1, [r3, #0]
 804253e:	687b      	ldr	r3, [r7, #4]
 8042540:	685b      	ldr	r3, [r3, #4]
 8042542:	3b01      	subs	r3, #1
 8042544:	011b      	lsls	r3, r3, #4
 8042546:	430b      	orrs	r3, r1
 8042548:	4944      	ldr	r1, [pc, #272]	; (804265c <RCCEx_PLLSAI1_Config+0x1e4>)
 804254a:	4313      	orrs	r3, r2
 804254c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 804254e:	7bfb      	ldrb	r3, [r7, #15]
 8042550:	2b00      	cmp	r3, #0
 8042552:	d17d      	bne.n	8042650 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8042554:	4b41      	ldr	r3, [pc, #260]	; (804265c <RCCEx_PLLSAI1_Config+0x1e4>)
 8042556:	681b      	ldr	r3, [r3, #0]
 8042558:	4a40      	ldr	r2, [pc, #256]	; (804265c <RCCEx_PLLSAI1_Config+0x1e4>)
 804255a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 804255e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8042560:	f7fe face 	bl	8040b00 <HAL_GetTick>
 8042564:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8042566:	e009      	b.n	804257c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8042568:	f7fe faca 	bl	8040b00 <HAL_GetTick>
 804256c:	4602      	mov	r2, r0
 804256e:	68bb      	ldr	r3, [r7, #8]
 8042570:	1ad3      	subs	r3, r2, r3
 8042572:	2b02      	cmp	r3, #2
 8042574:	d902      	bls.n	804257c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8042576:	2303      	movs	r3, #3
 8042578:	73fb      	strb	r3, [r7, #15]
        break;
 804257a:	e005      	b.n	8042588 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 804257c:	4b37      	ldr	r3, [pc, #220]	; (804265c <RCCEx_PLLSAI1_Config+0x1e4>)
 804257e:	681b      	ldr	r3, [r3, #0]
 8042580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8042584:	2b00      	cmp	r3, #0
 8042586:	d1ef      	bne.n	8042568 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8042588:	7bfb      	ldrb	r3, [r7, #15]
 804258a:	2b00      	cmp	r3, #0
 804258c:	d160      	bne.n	8042650 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 804258e:	683b      	ldr	r3, [r7, #0]
 8042590:	2b00      	cmp	r3, #0
 8042592:	d111      	bne.n	80425b8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8042594:	4b31      	ldr	r3, [pc, #196]	; (804265c <RCCEx_PLLSAI1_Config+0x1e4>)
 8042596:	691b      	ldr	r3, [r3, #16]
 8042598:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 804259c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80425a0:	687a      	ldr	r2, [r7, #4]
 80425a2:	6892      	ldr	r2, [r2, #8]
 80425a4:	0211      	lsls	r1, r2, #8
 80425a6:	687a      	ldr	r2, [r7, #4]
 80425a8:	68d2      	ldr	r2, [r2, #12]
 80425aa:	0912      	lsrs	r2, r2, #4
 80425ac:	0452      	lsls	r2, r2, #17
 80425ae:	430a      	orrs	r2, r1
 80425b0:	492a      	ldr	r1, [pc, #168]	; (804265c <RCCEx_PLLSAI1_Config+0x1e4>)
 80425b2:	4313      	orrs	r3, r2
 80425b4:	610b      	str	r3, [r1, #16]
 80425b6:	e027      	b.n	8042608 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80425b8:	683b      	ldr	r3, [r7, #0]
 80425ba:	2b01      	cmp	r3, #1
 80425bc:	d112      	bne.n	80425e4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80425be:	4b27      	ldr	r3, [pc, #156]	; (804265c <RCCEx_PLLSAI1_Config+0x1e4>)
 80425c0:	691b      	ldr	r3, [r3, #16]
 80425c2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80425c6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80425ca:	687a      	ldr	r2, [r7, #4]
 80425cc:	6892      	ldr	r2, [r2, #8]
 80425ce:	0211      	lsls	r1, r2, #8
 80425d0:	687a      	ldr	r2, [r7, #4]
 80425d2:	6912      	ldr	r2, [r2, #16]
 80425d4:	0852      	lsrs	r2, r2, #1
 80425d6:	3a01      	subs	r2, #1
 80425d8:	0552      	lsls	r2, r2, #21
 80425da:	430a      	orrs	r2, r1
 80425dc:	491f      	ldr	r1, [pc, #124]	; (804265c <RCCEx_PLLSAI1_Config+0x1e4>)
 80425de:	4313      	orrs	r3, r2
 80425e0:	610b      	str	r3, [r1, #16]
 80425e2:	e011      	b.n	8042608 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80425e4:	4b1d      	ldr	r3, [pc, #116]	; (804265c <RCCEx_PLLSAI1_Config+0x1e4>)
 80425e6:	691b      	ldr	r3, [r3, #16]
 80425e8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80425ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80425f0:	687a      	ldr	r2, [r7, #4]
 80425f2:	6892      	ldr	r2, [r2, #8]
 80425f4:	0211      	lsls	r1, r2, #8
 80425f6:	687a      	ldr	r2, [r7, #4]
 80425f8:	6952      	ldr	r2, [r2, #20]
 80425fa:	0852      	lsrs	r2, r2, #1
 80425fc:	3a01      	subs	r2, #1
 80425fe:	0652      	lsls	r2, r2, #25
 8042600:	430a      	orrs	r2, r1
 8042602:	4916      	ldr	r1, [pc, #88]	; (804265c <RCCEx_PLLSAI1_Config+0x1e4>)
 8042604:	4313      	orrs	r3, r2
 8042606:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8042608:	4b14      	ldr	r3, [pc, #80]	; (804265c <RCCEx_PLLSAI1_Config+0x1e4>)
 804260a:	681b      	ldr	r3, [r3, #0]
 804260c:	4a13      	ldr	r2, [pc, #76]	; (804265c <RCCEx_PLLSAI1_Config+0x1e4>)
 804260e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8042612:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8042614:	f7fe fa74 	bl	8040b00 <HAL_GetTick>
 8042618:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 804261a:	e009      	b.n	8042630 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 804261c:	f7fe fa70 	bl	8040b00 <HAL_GetTick>
 8042620:	4602      	mov	r2, r0
 8042622:	68bb      	ldr	r3, [r7, #8]
 8042624:	1ad3      	subs	r3, r2, r3
 8042626:	2b02      	cmp	r3, #2
 8042628:	d902      	bls.n	8042630 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 804262a:	2303      	movs	r3, #3
 804262c:	73fb      	strb	r3, [r7, #15]
          break;
 804262e:	e005      	b.n	804263c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8042630:	4b0a      	ldr	r3, [pc, #40]	; (804265c <RCCEx_PLLSAI1_Config+0x1e4>)
 8042632:	681b      	ldr	r3, [r3, #0]
 8042634:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8042638:	2b00      	cmp	r3, #0
 804263a:	d0ef      	beq.n	804261c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 804263c:	7bfb      	ldrb	r3, [r7, #15]
 804263e:	2b00      	cmp	r3, #0
 8042640:	d106      	bne.n	8042650 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8042642:	4b06      	ldr	r3, [pc, #24]	; (804265c <RCCEx_PLLSAI1_Config+0x1e4>)
 8042644:	691a      	ldr	r2, [r3, #16]
 8042646:	687b      	ldr	r3, [r7, #4]
 8042648:	699b      	ldr	r3, [r3, #24]
 804264a:	4904      	ldr	r1, [pc, #16]	; (804265c <RCCEx_PLLSAI1_Config+0x1e4>)
 804264c:	4313      	orrs	r3, r2
 804264e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8042650:	7bfb      	ldrb	r3, [r7, #15]
}
 8042652:	4618      	mov	r0, r3
 8042654:	3710      	adds	r7, #16
 8042656:	46bd      	mov	sp, r7
 8042658:	bd80      	pop	{r7, pc}
 804265a:	bf00      	nop
 804265c:	40021000 	.word	0x40021000

08042660 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8042660:	b580      	push	{r7, lr}
 8042662:	b084      	sub	sp, #16
 8042664:	af00      	add	r7, sp, #0
 8042666:	6078      	str	r0, [r7, #4]
 8042668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 804266a:	2300      	movs	r3, #0
 804266c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 804266e:	4b6a      	ldr	r3, [pc, #424]	; (8042818 <RCCEx_PLLSAI2_Config+0x1b8>)
 8042670:	68db      	ldr	r3, [r3, #12]
 8042672:	f003 0303 	and.w	r3, r3, #3
 8042676:	2b00      	cmp	r3, #0
 8042678:	d018      	beq.n	80426ac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 804267a:	4b67      	ldr	r3, [pc, #412]	; (8042818 <RCCEx_PLLSAI2_Config+0x1b8>)
 804267c:	68db      	ldr	r3, [r3, #12]
 804267e:	f003 0203 	and.w	r2, r3, #3
 8042682:	687b      	ldr	r3, [r7, #4]
 8042684:	681b      	ldr	r3, [r3, #0]
 8042686:	429a      	cmp	r2, r3
 8042688:	d10d      	bne.n	80426a6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 804268a:	687b      	ldr	r3, [r7, #4]
 804268c:	681b      	ldr	r3, [r3, #0]
       ||
 804268e:	2b00      	cmp	r3, #0
 8042690:	d009      	beq.n	80426a6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8042692:	4b61      	ldr	r3, [pc, #388]	; (8042818 <RCCEx_PLLSAI2_Config+0x1b8>)
 8042694:	68db      	ldr	r3, [r3, #12]
 8042696:	091b      	lsrs	r3, r3, #4
 8042698:	f003 0307 	and.w	r3, r3, #7
 804269c:	1c5a      	adds	r2, r3, #1
 804269e:	687b      	ldr	r3, [r7, #4]
 80426a0:	685b      	ldr	r3, [r3, #4]
       ||
 80426a2:	429a      	cmp	r2, r3
 80426a4:	d047      	beq.n	8042736 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80426a6:	2301      	movs	r3, #1
 80426a8:	73fb      	strb	r3, [r7, #15]
 80426aa:	e044      	b.n	8042736 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80426ac:	687b      	ldr	r3, [r7, #4]
 80426ae:	681b      	ldr	r3, [r3, #0]
 80426b0:	2b03      	cmp	r3, #3
 80426b2:	d018      	beq.n	80426e6 <RCCEx_PLLSAI2_Config+0x86>
 80426b4:	2b03      	cmp	r3, #3
 80426b6:	d825      	bhi.n	8042704 <RCCEx_PLLSAI2_Config+0xa4>
 80426b8:	2b01      	cmp	r3, #1
 80426ba:	d002      	beq.n	80426c2 <RCCEx_PLLSAI2_Config+0x62>
 80426bc:	2b02      	cmp	r3, #2
 80426be:	d009      	beq.n	80426d4 <RCCEx_PLLSAI2_Config+0x74>
 80426c0:	e020      	b.n	8042704 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80426c2:	4b55      	ldr	r3, [pc, #340]	; (8042818 <RCCEx_PLLSAI2_Config+0x1b8>)
 80426c4:	681b      	ldr	r3, [r3, #0]
 80426c6:	f003 0302 	and.w	r3, r3, #2
 80426ca:	2b00      	cmp	r3, #0
 80426cc:	d11d      	bne.n	804270a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80426ce:	2301      	movs	r3, #1
 80426d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80426d2:	e01a      	b.n	804270a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80426d4:	4b50      	ldr	r3, [pc, #320]	; (8042818 <RCCEx_PLLSAI2_Config+0x1b8>)
 80426d6:	681b      	ldr	r3, [r3, #0]
 80426d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80426dc:	2b00      	cmp	r3, #0
 80426de:	d116      	bne.n	804270e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80426e0:	2301      	movs	r3, #1
 80426e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80426e4:	e013      	b.n	804270e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80426e6:	4b4c      	ldr	r3, [pc, #304]	; (8042818 <RCCEx_PLLSAI2_Config+0x1b8>)
 80426e8:	681b      	ldr	r3, [r3, #0]
 80426ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80426ee:	2b00      	cmp	r3, #0
 80426f0:	d10f      	bne.n	8042712 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80426f2:	4b49      	ldr	r3, [pc, #292]	; (8042818 <RCCEx_PLLSAI2_Config+0x1b8>)
 80426f4:	681b      	ldr	r3, [r3, #0]
 80426f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80426fa:	2b00      	cmp	r3, #0
 80426fc:	d109      	bne.n	8042712 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80426fe:	2301      	movs	r3, #1
 8042700:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8042702:	e006      	b.n	8042712 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8042704:	2301      	movs	r3, #1
 8042706:	73fb      	strb	r3, [r7, #15]
      break;
 8042708:	e004      	b.n	8042714 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 804270a:	bf00      	nop
 804270c:	e002      	b.n	8042714 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 804270e:	bf00      	nop
 8042710:	e000      	b.n	8042714 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8042712:	bf00      	nop
    }

    if(status == HAL_OK)
 8042714:	7bfb      	ldrb	r3, [r7, #15]
 8042716:	2b00      	cmp	r3, #0
 8042718:	d10d      	bne.n	8042736 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 804271a:	4b3f      	ldr	r3, [pc, #252]	; (8042818 <RCCEx_PLLSAI2_Config+0x1b8>)
 804271c:	68db      	ldr	r3, [r3, #12]
 804271e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8042722:	687b      	ldr	r3, [r7, #4]
 8042724:	6819      	ldr	r1, [r3, #0]
 8042726:	687b      	ldr	r3, [r7, #4]
 8042728:	685b      	ldr	r3, [r3, #4]
 804272a:	3b01      	subs	r3, #1
 804272c:	011b      	lsls	r3, r3, #4
 804272e:	430b      	orrs	r3, r1
 8042730:	4939      	ldr	r1, [pc, #228]	; (8042818 <RCCEx_PLLSAI2_Config+0x1b8>)
 8042732:	4313      	orrs	r3, r2
 8042734:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8042736:	7bfb      	ldrb	r3, [r7, #15]
 8042738:	2b00      	cmp	r3, #0
 804273a:	d167      	bne.n	804280c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 804273c:	4b36      	ldr	r3, [pc, #216]	; (8042818 <RCCEx_PLLSAI2_Config+0x1b8>)
 804273e:	681b      	ldr	r3, [r3, #0]
 8042740:	4a35      	ldr	r2, [pc, #212]	; (8042818 <RCCEx_PLLSAI2_Config+0x1b8>)
 8042742:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8042746:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8042748:	f7fe f9da 	bl	8040b00 <HAL_GetTick>
 804274c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 804274e:	e009      	b.n	8042764 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8042750:	f7fe f9d6 	bl	8040b00 <HAL_GetTick>
 8042754:	4602      	mov	r2, r0
 8042756:	68bb      	ldr	r3, [r7, #8]
 8042758:	1ad3      	subs	r3, r2, r3
 804275a:	2b02      	cmp	r3, #2
 804275c:	d902      	bls.n	8042764 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 804275e:	2303      	movs	r3, #3
 8042760:	73fb      	strb	r3, [r7, #15]
        break;
 8042762:	e005      	b.n	8042770 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8042764:	4b2c      	ldr	r3, [pc, #176]	; (8042818 <RCCEx_PLLSAI2_Config+0x1b8>)
 8042766:	681b      	ldr	r3, [r3, #0]
 8042768:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 804276c:	2b00      	cmp	r3, #0
 804276e:	d1ef      	bne.n	8042750 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8042770:	7bfb      	ldrb	r3, [r7, #15]
 8042772:	2b00      	cmp	r3, #0
 8042774:	d14a      	bne.n	804280c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8042776:	683b      	ldr	r3, [r7, #0]
 8042778:	2b00      	cmp	r3, #0
 804277a:	d111      	bne.n	80427a0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 804277c:	4b26      	ldr	r3, [pc, #152]	; (8042818 <RCCEx_PLLSAI2_Config+0x1b8>)
 804277e:	695b      	ldr	r3, [r3, #20]
 8042780:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8042784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8042788:	687a      	ldr	r2, [r7, #4]
 804278a:	6892      	ldr	r2, [r2, #8]
 804278c:	0211      	lsls	r1, r2, #8
 804278e:	687a      	ldr	r2, [r7, #4]
 8042790:	68d2      	ldr	r2, [r2, #12]
 8042792:	0912      	lsrs	r2, r2, #4
 8042794:	0452      	lsls	r2, r2, #17
 8042796:	430a      	orrs	r2, r1
 8042798:	491f      	ldr	r1, [pc, #124]	; (8042818 <RCCEx_PLLSAI2_Config+0x1b8>)
 804279a:	4313      	orrs	r3, r2
 804279c:	614b      	str	r3, [r1, #20]
 804279e:	e011      	b.n	80427c4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80427a0:	4b1d      	ldr	r3, [pc, #116]	; (8042818 <RCCEx_PLLSAI2_Config+0x1b8>)
 80427a2:	695b      	ldr	r3, [r3, #20]
 80427a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80427a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80427ac:	687a      	ldr	r2, [r7, #4]
 80427ae:	6892      	ldr	r2, [r2, #8]
 80427b0:	0211      	lsls	r1, r2, #8
 80427b2:	687a      	ldr	r2, [r7, #4]
 80427b4:	6912      	ldr	r2, [r2, #16]
 80427b6:	0852      	lsrs	r2, r2, #1
 80427b8:	3a01      	subs	r2, #1
 80427ba:	0652      	lsls	r2, r2, #25
 80427bc:	430a      	orrs	r2, r1
 80427be:	4916      	ldr	r1, [pc, #88]	; (8042818 <RCCEx_PLLSAI2_Config+0x1b8>)
 80427c0:	4313      	orrs	r3, r2
 80427c2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80427c4:	4b14      	ldr	r3, [pc, #80]	; (8042818 <RCCEx_PLLSAI2_Config+0x1b8>)
 80427c6:	681b      	ldr	r3, [r3, #0]
 80427c8:	4a13      	ldr	r2, [pc, #76]	; (8042818 <RCCEx_PLLSAI2_Config+0x1b8>)
 80427ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80427ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80427d0:	f7fe f996 	bl	8040b00 <HAL_GetTick>
 80427d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80427d6:	e009      	b.n	80427ec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80427d8:	f7fe f992 	bl	8040b00 <HAL_GetTick>
 80427dc:	4602      	mov	r2, r0
 80427de:	68bb      	ldr	r3, [r7, #8]
 80427e0:	1ad3      	subs	r3, r2, r3
 80427e2:	2b02      	cmp	r3, #2
 80427e4:	d902      	bls.n	80427ec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80427e6:	2303      	movs	r3, #3
 80427e8:	73fb      	strb	r3, [r7, #15]
          break;
 80427ea:	e005      	b.n	80427f8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80427ec:	4b0a      	ldr	r3, [pc, #40]	; (8042818 <RCCEx_PLLSAI2_Config+0x1b8>)
 80427ee:	681b      	ldr	r3, [r3, #0]
 80427f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80427f4:	2b00      	cmp	r3, #0
 80427f6:	d0ef      	beq.n	80427d8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80427f8:	7bfb      	ldrb	r3, [r7, #15]
 80427fa:	2b00      	cmp	r3, #0
 80427fc:	d106      	bne.n	804280c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80427fe:	4b06      	ldr	r3, [pc, #24]	; (8042818 <RCCEx_PLLSAI2_Config+0x1b8>)
 8042800:	695a      	ldr	r2, [r3, #20]
 8042802:	687b      	ldr	r3, [r7, #4]
 8042804:	695b      	ldr	r3, [r3, #20]
 8042806:	4904      	ldr	r1, [pc, #16]	; (8042818 <RCCEx_PLLSAI2_Config+0x1b8>)
 8042808:	4313      	orrs	r3, r2
 804280a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 804280c:	7bfb      	ldrb	r3, [r7, #15]
}
 804280e:	4618      	mov	r0, r3
 8042810:	3710      	adds	r7, #16
 8042812:	46bd      	mov	sp, r7
 8042814:	bd80      	pop	{r7, pc}
 8042816:	bf00      	nop
 8042818:	40021000 	.word	0x40021000

0804281c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 804281c:	b580      	push	{r7, lr}
 804281e:	b082      	sub	sp, #8
 8042820:	af00      	add	r7, sp, #0
 8042822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8042824:	687b      	ldr	r3, [r7, #4]
 8042826:	2b00      	cmp	r3, #0
 8042828:	d101      	bne.n	804282e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 804282a:	2301      	movs	r3, #1
 804282c:	e040      	b.n	80428b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 804282e:	687b      	ldr	r3, [r7, #4]
 8042830:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8042832:	2b00      	cmp	r3, #0
 8042834:	d106      	bne.n	8042844 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8042836:	687b      	ldr	r3, [r7, #4]
 8042838:	2200      	movs	r2, #0
 804283a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 804283e:	6878      	ldr	r0, [r7, #4]
 8042840:	f7fe f840 	bl	80408c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8042844:	687b      	ldr	r3, [r7, #4]
 8042846:	2224      	movs	r2, #36	; 0x24
 8042848:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 804284a:	687b      	ldr	r3, [r7, #4]
 804284c:	681b      	ldr	r3, [r3, #0]
 804284e:	681a      	ldr	r2, [r3, #0]
 8042850:	687b      	ldr	r3, [r7, #4]
 8042852:	681b      	ldr	r3, [r3, #0]
 8042854:	f022 0201 	bic.w	r2, r2, #1
 8042858:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 804285a:	6878      	ldr	r0, [r7, #4]
 804285c:	f000 fae2 	bl	8042e24 <UART_SetConfig>
 8042860:	4603      	mov	r3, r0
 8042862:	2b01      	cmp	r3, #1
 8042864:	d101      	bne.n	804286a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8042866:	2301      	movs	r3, #1
 8042868:	e022      	b.n	80428b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 804286a:	687b      	ldr	r3, [r7, #4]
 804286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804286e:	2b00      	cmp	r3, #0
 8042870:	d002      	beq.n	8042878 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8042872:	6878      	ldr	r0, [r7, #4]
 8042874:	f000 fd60 	bl	8043338 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8042878:	687b      	ldr	r3, [r7, #4]
 804287a:	681b      	ldr	r3, [r3, #0]
 804287c:	685a      	ldr	r2, [r3, #4]
 804287e:	687b      	ldr	r3, [r7, #4]
 8042880:	681b      	ldr	r3, [r3, #0]
 8042882:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8042886:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8042888:	687b      	ldr	r3, [r7, #4]
 804288a:	681b      	ldr	r3, [r3, #0]
 804288c:	689a      	ldr	r2, [r3, #8]
 804288e:	687b      	ldr	r3, [r7, #4]
 8042890:	681b      	ldr	r3, [r3, #0]
 8042892:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8042896:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8042898:	687b      	ldr	r3, [r7, #4]
 804289a:	681b      	ldr	r3, [r3, #0]
 804289c:	681a      	ldr	r2, [r3, #0]
 804289e:	687b      	ldr	r3, [r7, #4]
 80428a0:	681b      	ldr	r3, [r3, #0]
 80428a2:	f042 0201 	orr.w	r2, r2, #1
 80428a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80428a8:	6878      	ldr	r0, [r7, #4]
 80428aa:	f000 fde7 	bl	804347c <UART_CheckIdleState>
 80428ae:	4603      	mov	r3, r0
}
 80428b0:	4618      	mov	r0, r3
 80428b2:	3708      	adds	r7, #8
 80428b4:	46bd      	mov	sp, r7
 80428b6:	bd80      	pop	{r7, pc}

080428b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80428b8:	b580      	push	{r7, lr}
 80428ba:	b08a      	sub	sp, #40	; 0x28
 80428bc:	af02      	add	r7, sp, #8
 80428be:	60f8      	str	r0, [r7, #12]
 80428c0:	60b9      	str	r1, [r7, #8]
 80428c2:	603b      	str	r3, [r7, #0]
 80428c4:	4613      	mov	r3, r2
 80428c6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80428c8:	68fb      	ldr	r3, [r7, #12]
 80428ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80428cc:	2b20      	cmp	r3, #32
 80428ce:	f040 8082 	bne.w	80429d6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80428d2:	68bb      	ldr	r3, [r7, #8]
 80428d4:	2b00      	cmp	r3, #0
 80428d6:	d002      	beq.n	80428de <HAL_UART_Transmit+0x26>
 80428d8:	88fb      	ldrh	r3, [r7, #6]
 80428da:	2b00      	cmp	r3, #0
 80428dc:	d101      	bne.n	80428e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80428de:	2301      	movs	r3, #1
 80428e0:	e07a      	b.n	80429d8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80428e2:	68fb      	ldr	r3, [r7, #12]
 80428e4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80428e8:	2b01      	cmp	r3, #1
 80428ea:	d101      	bne.n	80428f0 <HAL_UART_Transmit+0x38>
 80428ec:	2302      	movs	r3, #2
 80428ee:	e073      	b.n	80429d8 <HAL_UART_Transmit+0x120>
 80428f0:	68fb      	ldr	r3, [r7, #12]
 80428f2:	2201      	movs	r2, #1
 80428f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80428f8:	68fb      	ldr	r3, [r7, #12]
 80428fa:	2200      	movs	r2, #0
 80428fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8042900:	68fb      	ldr	r3, [r7, #12]
 8042902:	2221      	movs	r2, #33	; 0x21
 8042904:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8042906:	f7fe f8fb 	bl	8040b00 <HAL_GetTick>
 804290a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 804290c:	68fb      	ldr	r3, [r7, #12]
 804290e:	88fa      	ldrh	r2, [r7, #6]
 8042910:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8042914:	68fb      	ldr	r3, [r7, #12]
 8042916:	88fa      	ldrh	r2, [r7, #6]
 8042918:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 804291c:	68fb      	ldr	r3, [r7, #12]
 804291e:	689b      	ldr	r3, [r3, #8]
 8042920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8042924:	d108      	bne.n	8042938 <HAL_UART_Transmit+0x80>
 8042926:	68fb      	ldr	r3, [r7, #12]
 8042928:	691b      	ldr	r3, [r3, #16]
 804292a:	2b00      	cmp	r3, #0
 804292c:	d104      	bne.n	8042938 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 804292e:	2300      	movs	r3, #0
 8042930:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8042932:	68bb      	ldr	r3, [r7, #8]
 8042934:	61bb      	str	r3, [r7, #24]
 8042936:	e003      	b.n	8042940 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8042938:	68bb      	ldr	r3, [r7, #8]
 804293a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 804293c:	2300      	movs	r3, #0
 804293e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8042940:	68fb      	ldr	r3, [r7, #12]
 8042942:	2200      	movs	r2, #0
 8042944:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8042948:	e02d      	b.n	80429a6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 804294a:	683b      	ldr	r3, [r7, #0]
 804294c:	9300      	str	r3, [sp, #0]
 804294e:	697b      	ldr	r3, [r7, #20]
 8042950:	2200      	movs	r2, #0
 8042952:	2180      	movs	r1, #128	; 0x80
 8042954:	68f8      	ldr	r0, [r7, #12]
 8042956:	f000 fdda 	bl	804350e <UART_WaitOnFlagUntilTimeout>
 804295a:	4603      	mov	r3, r0
 804295c:	2b00      	cmp	r3, #0
 804295e:	d001      	beq.n	8042964 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8042960:	2303      	movs	r3, #3
 8042962:	e039      	b.n	80429d8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8042964:	69fb      	ldr	r3, [r7, #28]
 8042966:	2b00      	cmp	r3, #0
 8042968:	d10b      	bne.n	8042982 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 804296a:	69bb      	ldr	r3, [r7, #24]
 804296c:	881a      	ldrh	r2, [r3, #0]
 804296e:	68fb      	ldr	r3, [r7, #12]
 8042970:	681b      	ldr	r3, [r3, #0]
 8042972:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8042976:	b292      	uxth	r2, r2
 8042978:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 804297a:	69bb      	ldr	r3, [r7, #24]
 804297c:	3302      	adds	r3, #2
 804297e:	61bb      	str	r3, [r7, #24]
 8042980:	e008      	b.n	8042994 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8042982:	69fb      	ldr	r3, [r7, #28]
 8042984:	781a      	ldrb	r2, [r3, #0]
 8042986:	68fb      	ldr	r3, [r7, #12]
 8042988:	681b      	ldr	r3, [r3, #0]
 804298a:	b292      	uxth	r2, r2
 804298c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 804298e:	69fb      	ldr	r3, [r7, #28]
 8042990:	3301      	adds	r3, #1
 8042992:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8042994:	68fb      	ldr	r3, [r7, #12]
 8042996:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 804299a:	b29b      	uxth	r3, r3
 804299c:	3b01      	subs	r3, #1
 804299e:	b29a      	uxth	r2, r3
 80429a0:	68fb      	ldr	r3, [r7, #12]
 80429a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80429a6:	68fb      	ldr	r3, [r7, #12]
 80429a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80429ac:	b29b      	uxth	r3, r3
 80429ae:	2b00      	cmp	r3, #0
 80429b0:	d1cb      	bne.n	804294a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80429b2:	683b      	ldr	r3, [r7, #0]
 80429b4:	9300      	str	r3, [sp, #0]
 80429b6:	697b      	ldr	r3, [r7, #20]
 80429b8:	2200      	movs	r2, #0
 80429ba:	2140      	movs	r1, #64	; 0x40
 80429bc:	68f8      	ldr	r0, [r7, #12]
 80429be:	f000 fda6 	bl	804350e <UART_WaitOnFlagUntilTimeout>
 80429c2:	4603      	mov	r3, r0
 80429c4:	2b00      	cmp	r3, #0
 80429c6:	d001      	beq.n	80429cc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80429c8:	2303      	movs	r3, #3
 80429ca:	e005      	b.n	80429d8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80429cc:	68fb      	ldr	r3, [r7, #12]
 80429ce:	2220      	movs	r2, #32
 80429d0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80429d2:	2300      	movs	r3, #0
 80429d4:	e000      	b.n	80429d8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80429d6:	2302      	movs	r3, #2
  }
}
 80429d8:	4618      	mov	r0, r3
 80429da:	3720      	adds	r7, #32
 80429dc:	46bd      	mov	sp, r7
 80429de:	bd80      	pop	{r7, pc}

080429e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80429e0:	b580      	push	{r7, lr}
 80429e2:	b088      	sub	sp, #32
 80429e4:	af00      	add	r7, sp, #0
 80429e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80429e8:	687b      	ldr	r3, [r7, #4]
 80429ea:	681b      	ldr	r3, [r3, #0]
 80429ec:	69db      	ldr	r3, [r3, #28]
 80429ee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80429f0:	687b      	ldr	r3, [r7, #4]
 80429f2:	681b      	ldr	r3, [r3, #0]
 80429f4:	681b      	ldr	r3, [r3, #0]
 80429f6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80429f8:	687b      	ldr	r3, [r7, #4]
 80429fa:	681b      	ldr	r3, [r3, #0]
 80429fc:	689b      	ldr	r3, [r3, #8]
 80429fe:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8042a00:	69fa      	ldr	r2, [r7, #28]
 8042a02:	f640 030f 	movw	r3, #2063	; 0x80f
 8042a06:	4013      	ands	r3, r2
 8042a08:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8042a0a:	693b      	ldr	r3, [r7, #16]
 8042a0c:	2b00      	cmp	r3, #0
 8042a0e:	d113      	bne.n	8042a38 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8042a10:	69fb      	ldr	r3, [r7, #28]
 8042a12:	f003 0320 	and.w	r3, r3, #32
 8042a16:	2b00      	cmp	r3, #0
 8042a18:	d00e      	beq.n	8042a38 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8042a1a:	69bb      	ldr	r3, [r7, #24]
 8042a1c:	f003 0320 	and.w	r3, r3, #32
 8042a20:	2b00      	cmp	r3, #0
 8042a22:	d009      	beq.n	8042a38 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8042a24:	687b      	ldr	r3, [r7, #4]
 8042a26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8042a28:	2b00      	cmp	r3, #0
 8042a2a:	f000 81ce 	beq.w	8042dca <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8042a2e:	687b      	ldr	r3, [r7, #4]
 8042a30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8042a32:	6878      	ldr	r0, [r7, #4]
 8042a34:	4798      	blx	r3
      }
      return;
 8042a36:	e1c8      	b.n	8042dca <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8042a38:	693b      	ldr	r3, [r7, #16]
 8042a3a:	2b00      	cmp	r3, #0
 8042a3c:	f000 80e3 	beq.w	8042c06 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8042a40:	697b      	ldr	r3, [r7, #20]
 8042a42:	f003 0301 	and.w	r3, r3, #1
 8042a46:	2b00      	cmp	r3, #0
 8042a48:	d105      	bne.n	8042a56 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8042a4a:	69ba      	ldr	r2, [r7, #24]
 8042a4c:	4ba6      	ldr	r3, [pc, #664]	; (8042ce8 <HAL_UART_IRQHandler+0x308>)
 8042a4e:	4013      	ands	r3, r2
 8042a50:	2b00      	cmp	r3, #0
 8042a52:	f000 80d8 	beq.w	8042c06 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8042a56:	69fb      	ldr	r3, [r7, #28]
 8042a58:	f003 0301 	and.w	r3, r3, #1
 8042a5c:	2b00      	cmp	r3, #0
 8042a5e:	d010      	beq.n	8042a82 <HAL_UART_IRQHandler+0xa2>
 8042a60:	69bb      	ldr	r3, [r7, #24]
 8042a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8042a66:	2b00      	cmp	r3, #0
 8042a68:	d00b      	beq.n	8042a82 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8042a6a:	687b      	ldr	r3, [r7, #4]
 8042a6c:	681b      	ldr	r3, [r3, #0]
 8042a6e:	2201      	movs	r2, #1
 8042a70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8042a72:	687b      	ldr	r3, [r7, #4]
 8042a74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8042a78:	f043 0201 	orr.w	r2, r3, #1
 8042a7c:	687b      	ldr	r3, [r7, #4]
 8042a7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8042a82:	69fb      	ldr	r3, [r7, #28]
 8042a84:	f003 0302 	and.w	r3, r3, #2
 8042a88:	2b00      	cmp	r3, #0
 8042a8a:	d010      	beq.n	8042aae <HAL_UART_IRQHandler+0xce>
 8042a8c:	697b      	ldr	r3, [r7, #20]
 8042a8e:	f003 0301 	and.w	r3, r3, #1
 8042a92:	2b00      	cmp	r3, #0
 8042a94:	d00b      	beq.n	8042aae <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8042a96:	687b      	ldr	r3, [r7, #4]
 8042a98:	681b      	ldr	r3, [r3, #0]
 8042a9a:	2202      	movs	r2, #2
 8042a9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8042a9e:	687b      	ldr	r3, [r7, #4]
 8042aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8042aa4:	f043 0204 	orr.w	r2, r3, #4
 8042aa8:	687b      	ldr	r3, [r7, #4]
 8042aaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8042aae:	69fb      	ldr	r3, [r7, #28]
 8042ab0:	f003 0304 	and.w	r3, r3, #4
 8042ab4:	2b00      	cmp	r3, #0
 8042ab6:	d010      	beq.n	8042ada <HAL_UART_IRQHandler+0xfa>
 8042ab8:	697b      	ldr	r3, [r7, #20]
 8042aba:	f003 0301 	and.w	r3, r3, #1
 8042abe:	2b00      	cmp	r3, #0
 8042ac0:	d00b      	beq.n	8042ada <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8042ac2:	687b      	ldr	r3, [r7, #4]
 8042ac4:	681b      	ldr	r3, [r3, #0]
 8042ac6:	2204      	movs	r2, #4
 8042ac8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8042aca:	687b      	ldr	r3, [r7, #4]
 8042acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8042ad0:	f043 0202 	orr.w	r2, r3, #2
 8042ad4:	687b      	ldr	r3, [r7, #4]
 8042ad6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8042ada:	69fb      	ldr	r3, [r7, #28]
 8042adc:	f003 0308 	and.w	r3, r3, #8
 8042ae0:	2b00      	cmp	r3, #0
 8042ae2:	d015      	beq.n	8042b10 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8042ae4:	69bb      	ldr	r3, [r7, #24]
 8042ae6:	f003 0320 	and.w	r3, r3, #32
 8042aea:	2b00      	cmp	r3, #0
 8042aec:	d104      	bne.n	8042af8 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8042aee:	697b      	ldr	r3, [r7, #20]
 8042af0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8042af4:	2b00      	cmp	r3, #0
 8042af6:	d00b      	beq.n	8042b10 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8042af8:	687b      	ldr	r3, [r7, #4]
 8042afa:	681b      	ldr	r3, [r3, #0]
 8042afc:	2208      	movs	r2, #8
 8042afe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8042b00:	687b      	ldr	r3, [r7, #4]
 8042b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8042b06:	f043 0208 	orr.w	r2, r3, #8
 8042b0a:	687b      	ldr	r3, [r7, #4]
 8042b0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8042b10:	69fb      	ldr	r3, [r7, #28]
 8042b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8042b16:	2b00      	cmp	r3, #0
 8042b18:	d011      	beq.n	8042b3e <HAL_UART_IRQHandler+0x15e>
 8042b1a:	69bb      	ldr	r3, [r7, #24]
 8042b1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8042b20:	2b00      	cmp	r3, #0
 8042b22:	d00c      	beq.n	8042b3e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8042b24:	687b      	ldr	r3, [r7, #4]
 8042b26:	681b      	ldr	r3, [r3, #0]
 8042b28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8042b2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8042b2e:	687b      	ldr	r3, [r7, #4]
 8042b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8042b34:	f043 0220 	orr.w	r2, r3, #32
 8042b38:	687b      	ldr	r3, [r7, #4]
 8042b3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8042b3e:	687b      	ldr	r3, [r7, #4]
 8042b40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8042b44:	2b00      	cmp	r3, #0
 8042b46:	f000 8142 	beq.w	8042dce <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8042b4a:	69fb      	ldr	r3, [r7, #28]
 8042b4c:	f003 0320 	and.w	r3, r3, #32
 8042b50:	2b00      	cmp	r3, #0
 8042b52:	d00c      	beq.n	8042b6e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8042b54:	69bb      	ldr	r3, [r7, #24]
 8042b56:	f003 0320 	and.w	r3, r3, #32
 8042b5a:	2b00      	cmp	r3, #0
 8042b5c:	d007      	beq.n	8042b6e <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8042b5e:	687b      	ldr	r3, [r7, #4]
 8042b60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8042b62:	2b00      	cmp	r3, #0
 8042b64:	d003      	beq.n	8042b6e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8042b66:	687b      	ldr	r3, [r7, #4]
 8042b68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8042b6a:	6878      	ldr	r0, [r7, #4]
 8042b6c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8042b6e:	687b      	ldr	r3, [r7, #4]
 8042b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8042b74:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8042b76:	687b      	ldr	r3, [r7, #4]
 8042b78:	681b      	ldr	r3, [r3, #0]
 8042b7a:	689b      	ldr	r3, [r3, #8]
 8042b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042b80:	2b40      	cmp	r3, #64	; 0x40
 8042b82:	d004      	beq.n	8042b8e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8042b84:	68fb      	ldr	r3, [r7, #12]
 8042b86:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8042b8a:	2b00      	cmp	r3, #0
 8042b8c:	d031      	beq.n	8042bf2 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8042b8e:	6878      	ldr	r0, [r7, #4]
 8042b90:	f000 fd39 	bl	8043606 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8042b94:	687b      	ldr	r3, [r7, #4]
 8042b96:	681b      	ldr	r3, [r3, #0]
 8042b98:	689b      	ldr	r3, [r3, #8]
 8042b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042b9e:	2b40      	cmp	r3, #64	; 0x40
 8042ba0:	d123      	bne.n	8042bea <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8042ba2:	687b      	ldr	r3, [r7, #4]
 8042ba4:	681b      	ldr	r3, [r3, #0]
 8042ba6:	689a      	ldr	r2, [r3, #8]
 8042ba8:	687b      	ldr	r3, [r7, #4]
 8042baa:	681b      	ldr	r3, [r3, #0]
 8042bac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8042bb0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8042bb2:	687b      	ldr	r3, [r7, #4]
 8042bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042bb6:	2b00      	cmp	r3, #0
 8042bb8:	d013      	beq.n	8042be2 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8042bba:	687b      	ldr	r3, [r7, #4]
 8042bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042bbe:	4a4b      	ldr	r2, [pc, #300]	; (8042cec <HAL_UART_IRQHandler+0x30c>)
 8042bc0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8042bc2:	687b      	ldr	r3, [r7, #4]
 8042bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042bc6:	4618      	mov	r0, r3
 8042bc8:	f7fe f919 	bl	8040dfe <HAL_DMA_Abort_IT>
 8042bcc:	4603      	mov	r3, r0
 8042bce:	2b00      	cmp	r3, #0
 8042bd0:	d017      	beq.n	8042c02 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8042bd2:	687b      	ldr	r3, [r7, #4]
 8042bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8042bd8:	687a      	ldr	r2, [r7, #4]
 8042bda:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8042bdc:	4610      	mov	r0, r2
 8042bde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8042be0:	e00f      	b.n	8042c02 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8042be2:	6878      	ldr	r0, [r7, #4]
 8042be4:	f000 f908 	bl	8042df8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8042be8:	e00b      	b.n	8042c02 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8042bea:	6878      	ldr	r0, [r7, #4]
 8042bec:	f000 f904 	bl	8042df8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8042bf0:	e007      	b.n	8042c02 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8042bf2:	6878      	ldr	r0, [r7, #4]
 8042bf4:	f000 f900 	bl	8042df8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8042bf8:	687b      	ldr	r3, [r7, #4]
 8042bfa:	2200      	movs	r2, #0
 8042bfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8042c00:	e0e5      	b.n	8042dce <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8042c02:	bf00      	nop
    return;
 8042c04:	e0e3      	b.n	8042dce <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8042c06:	687b      	ldr	r3, [r7, #4]
 8042c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8042c0a:	2b01      	cmp	r3, #1
 8042c0c:	f040 80a9 	bne.w	8042d62 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8042c10:	69fb      	ldr	r3, [r7, #28]
 8042c12:	f003 0310 	and.w	r3, r3, #16
 8042c16:	2b00      	cmp	r3, #0
 8042c18:	f000 80a3 	beq.w	8042d62 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8042c1c:	69bb      	ldr	r3, [r7, #24]
 8042c1e:	f003 0310 	and.w	r3, r3, #16
 8042c22:	2b00      	cmp	r3, #0
 8042c24:	f000 809d 	beq.w	8042d62 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8042c28:	687b      	ldr	r3, [r7, #4]
 8042c2a:	681b      	ldr	r3, [r3, #0]
 8042c2c:	2210      	movs	r2, #16
 8042c2e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8042c30:	687b      	ldr	r3, [r7, #4]
 8042c32:	681b      	ldr	r3, [r3, #0]
 8042c34:	689b      	ldr	r3, [r3, #8]
 8042c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042c3a:	2b40      	cmp	r3, #64	; 0x40
 8042c3c:	d158      	bne.n	8042cf0 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8042c3e:	687b      	ldr	r3, [r7, #4]
 8042c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042c42:	681b      	ldr	r3, [r3, #0]
 8042c44:	685b      	ldr	r3, [r3, #4]
 8042c46:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8042c48:	893b      	ldrh	r3, [r7, #8]
 8042c4a:	2b00      	cmp	r3, #0
 8042c4c:	f000 80c1 	beq.w	8042dd2 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8042c50:	687b      	ldr	r3, [r7, #4]
 8042c52:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8042c56:	893a      	ldrh	r2, [r7, #8]
 8042c58:	429a      	cmp	r2, r3
 8042c5a:	f080 80ba 	bcs.w	8042dd2 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8042c5e:	687b      	ldr	r3, [r7, #4]
 8042c60:	893a      	ldrh	r2, [r7, #8]
 8042c62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8042c66:	687b      	ldr	r3, [r7, #4]
 8042c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042c6a:	681b      	ldr	r3, [r3, #0]
 8042c6c:	681b      	ldr	r3, [r3, #0]
 8042c6e:	f003 0320 	and.w	r3, r3, #32
 8042c72:	2b00      	cmp	r3, #0
 8042c74:	d12a      	bne.n	8042ccc <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8042c76:	687b      	ldr	r3, [r7, #4]
 8042c78:	681b      	ldr	r3, [r3, #0]
 8042c7a:	681a      	ldr	r2, [r3, #0]
 8042c7c:	687b      	ldr	r3, [r7, #4]
 8042c7e:	681b      	ldr	r3, [r3, #0]
 8042c80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8042c84:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8042c86:	687b      	ldr	r3, [r7, #4]
 8042c88:	681b      	ldr	r3, [r3, #0]
 8042c8a:	689a      	ldr	r2, [r3, #8]
 8042c8c:	687b      	ldr	r3, [r7, #4]
 8042c8e:	681b      	ldr	r3, [r3, #0]
 8042c90:	f022 0201 	bic.w	r2, r2, #1
 8042c94:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8042c96:	687b      	ldr	r3, [r7, #4]
 8042c98:	681b      	ldr	r3, [r3, #0]
 8042c9a:	689a      	ldr	r2, [r3, #8]
 8042c9c:	687b      	ldr	r3, [r7, #4]
 8042c9e:	681b      	ldr	r3, [r3, #0]
 8042ca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8042ca4:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8042ca6:	687b      	ldr	r3, [r7, #4]
 8042ca8:	2220      	movs	r2, #32
 8042caa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8042cac:	687b      	ldr	r3, [r7, #4]
 8042cae:	2200      	movs	r2, #0
 8042cb0:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8042cb2:	687b      	ldr	r3, [r7, #4]
 8042cb4:	681b      	ldr	r3, [r3, #0]
 8042cb6:	681a      	ldr	r2, [r3, #0]
 8042cb8:	687b      	ldr	r3, [r7, #4]
 8042cba:	681b      	ldr	r3, [r3, #0]
 8042cbc:	f022 0210 	bic.w	r2, r2, #16
 8042cc0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8042cc2:	687b      	ldr	r3, [r7, #4]
 8042cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042cc6:	4618      	mov	r0, r3
 8042cc8:	f7fe f85b 	bl	8040d82 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8042ccc:	687b      	ldr	r3, [r7, #4]
 8042cce:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8042cd2:	687b      	ldr	r3, [r7, #4]
 8042cd4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8042cd8:	b29b      	uxth	r3, r3
 8042cda:	1ad3      	subs	r3, r2, r3
 8042cdc:	b29b      	uxth	r3, r3
 8042cde:	4619      	mov	r1, r3
 8042ce0:	6878      	ldr	r0, [r7, #4]
 8042ce2:	f000 f893 	bl	8042e0c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8042ce6:	e074      	b.n	8042dd2 <HAL_UART_IRQHandler+0x3f2>
 8042ce8:	04000120 	.word	0x04000120
 8042cec:	08043665 	.word	0x08043665
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8042cf0:	687b      	ldr	r3, [r7, #4]
 8042cf2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8042cf6:	687b      	ldr	r3, [r7, #4]
 8042cf8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8042cfc:	b29b      	uxth	r3, r3
 8042cfe:	1ad3      	subs	r3, r2, r3
 8042d00:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8042d02:	687b      	ldr	r3, [r7, #4]
 8042d04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8042d08:	b29b      	uxth	r3, r3
 8042d0a:	2b00      	cmp	r3, #0
 8042d0c:	d063      	beq.n	8042dd6 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8042d0e:	897b      	ldrh	r3, [r7, #10]
 8042d10:	2b00      	cmp	r3, #0
 8042d12:	d060      	beq.n	8042dd6 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8042d14:	687b      	ldr	r3, [r7, #4]
 8042d16:	681b      	ldr	r3, [r3, #0]
 8042d18:	681a      	ldr	r2, [r3, #0]
 8042d1a:	687b      	ldr	r3, [r7, #4]
 8042d1c:	681b      	ldr	r3, [r3, #0]
 8042d1e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8042d22:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8042d24:	687b      	ldr	r3, [r7, #4]
 8042d26:	681b      	ldr	r3, [r3, #0]
 8042d28:	689a      	ldr	r2, [r3, #8]
 8042d2a:	687b      	ldr	r3, [r7, #4]
 8042d2c:	681b      	ldr	r3, [r3, #0]
 8042d2e:	f022 0201 	bic.w	r2, r2, #1
 8042d32:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8042d34:	687b      	ldr	r3, [r7, #4]
 8042d36:	2220      	movs	r2, #32
 8042d38:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8042d3a:	687b      	ldr	r3, [r7, #4]
 8042d3c:	2200      	movs	r2, #0
 8042d3e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8042d40:	687b      	ldr	r3, [r7, #4]
 8042d42:	2200      	movs	r2, #0
 8042d44:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8042d46:	687b      	ldr	r3, [r7, #4]
 8042d48:	681b      	ldr	r3, [r3, #0]
 8042d4a:	681a      	ldr	r2, [r3, #0]
 8042d4c:	687b      	ldr	r3, [r7, #4]
 8042d4e:	681b      	ldr	r3, [r3, #0]
 8042d50:	f022 0210 	bic.w	r2, r2, #16
 8042d54:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8042d56:	897b      	ldrh	r3, [r7, #10]
 8042d58:	4619      	mov	r1, r3
 8042d5a:	6878      	ldr	r0, [r7, #4]
 8042d5c:	f000 f856 	bl	8042e0c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8042d60:	e039      	b.n	8042dd6 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8042d62:	69fb      	ldr	r3, [r7, #28]
 8042d64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8042d68:	2b00      	cmp	r3, #0
 8042d6a:	d00d      	beq.n	8042d88 <HAL_UART_IRQHandler+0x3a8>
 8042d6c:	697b      	ldr	r3, [r7, #20]
 8042d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8042d72:	2b00      	cmp	r3, #0
 8042d74:	d008      	beq.n	8042d88 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8042d76:	687b      	ldr	r3, [r7, #4]
 8042d78:	681b      	ldr	r3, [r3, #0]
 8042d7a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8042d7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8042d80:	6878      	ldr	r0, [r7, #4]
 8042d82:	f000 fc9e 	bl	80436c2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8042d86:	e029      	b.n	8042ddc <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8042d88:	69fb      	ldr	r3, [r7, #28]
 8042d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8042d8e:	2b00      	cmp	r3, #0
 8042d90:	d00d      	beq.n	8042dae <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8042d92:	69bb      	ldr	r3, [r7, #24]
 8042d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8042d98:	2b00      	cmp	r3, #0
 8042d9a:	d008      	beq.n	8042dae <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8042d9c:	687b      	ldr	r3, [r7, #4]
 8042d9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8042da0:	2b00      	cmp	r3, #0
 8042da2:	d01a      	beq.n	8042dda <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8042da4:	687b      	ldr	r3, [r7, #4]
 8042da6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8042da8:	6878      	ldr	r0, [r7, #4]
 8042daa:	4798      	blx	r3
    }
    return;
 8042dac:	e015      	b.n	8042dda <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8042dae:	69fb      	ldr	r3, [r7, #28]
 8042db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042db4:	2b00      	cmp	r3, #0
 8042db6:	d011      	beq.n	8042ddc <HAL_UART_IRQHandler+0x3fc>
 8042db8:	69bb      	ldr	r3, [r7, #24]
 8042dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042dbe:	2b00      	cmp	r3, #0
 8042dc0:	d00c      	beq.n	8042ddc <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8042dc2:	6878      	ldr	r0, [r7, #4]
 8042dc4:	f000 fc64 	bl	8043690 <UART_EndTransmit_IT>
    return;
 8042dc8:	e008      	b.n	8042ddc <HAL_UART_IRQHandler+0x3fc>
      return;
 8042dca:	bf00      	nop
 8042dcc:	e006      	b.n	8042ddc <HAL_UART_IRQHandler+0x3fc>
    return;
 8042dce:	bf00      	nop
 8042dd0:	e004      	b.n	8042ddc <HAL_UART_IRQHandler+0x3fc>
      return;
 8042dd2:	bf00      	nop
 8042dd4:	e002      	b.n	8042ddc <HAL_UART_IRQHandler+0x3fc>
      return;
 8042dd6:	bf00      	nop
 8042dd8:	e000      	b.n	8042ddc <HAL_UART_IRQHandler+0x3fc>
    return;
 8042dda:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8042ddc:	3720      	adds	r7, #32
 8042dde:	46bd      	mov	sp, r7
 8042de0:	bd80      	pop	{r7, pc}
 8042de2:	bf00      	nop

08042de4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8042de4:	b480      	push	{r7}
 8042de6:	b083      	sub	sp, #12
 8042de8:	af00      	add	r7, sp, #0
 8042dea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8042dec:	bf00      	nop
 8042dee:	370c      	adds	r7, #12
 8042df0:	46bd      	mov	sp, r7
 8042df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042df6:	4770      	bx	lr

08042df8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8042df8:	b480      	push	{r7}
 8042dfa:	b083      	sub	sp, #12
 8042dfc:	af00      	add	r7, sp, #0
 8042dfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8042e00:	bf00      	nop
 8042e02:	370c      	adds	r7, #12
 8042e04:	46bd      	mov	sp, r7
 8042e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e0a:	4770      	bx	lr

08042e0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8042e0c:	b480      	push	{r7}
 8042e0e:	b083      	sub	sp, #12
 8042e10:	af00      	add	r7, sp, #0
 8042e12:	6078      	str	r0, [r7, #4]
 8042e14:	460b      	mov	r3, r1
 8042e16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8042e18:	bf00      	nop
 8042e1a:	370c      	adds	r7, #12
 8042e1c:	46bd      	mov	sp, r7
 8042e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e22:	4770      	bx	lr

08042e24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8042e24:	b5b0      	push	{r4, r5, r7, lr}
 8042e26:	b088      	sub	sp, #32
 8042e28:	af00      	add	r7, sp, #0
 8042e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8042e2c:	2300      	movs	r3, #0
 8042e2e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8042e30:	687b      	ldr	r3, [r7, #4]
 8042e32:	689a      	ldr	r2, [r3, #8]
 8042e34:	687b      	ldr	r3, [r7, #4]
 8042e36:	691b      	ldr	r3, [r3, #16]
 8042e38:	431a      	orrs	r2, r3
 8042e3a:	687b      	ldr	r3, [r7, #4]
 8042e3c:	695b      	ldr	r3, [r3, #20]
 8042e3e:	431a      	orrs	r2, r3
 8042e40:	687b      	ldr	r3, [r7, #4]
 8042e42:	69db      	ldr	r3, [r3, #28]
 8042e44:	4313      	orrs	r3, r2
 8042e46:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8042e48:	687b      	ldr	r3, [r7, #4]
 8042e4a:	681b      	ldr	r3, [r3, #0]
 8042e4c:	681a      	ldr	r2, [r3, #0]
 8042e4e:	4bad      	ldr	r3, [pc, #692]	; (8043104 <UART_SetConfig+0x2e0>)
 8042e50:	4013      	ands	r3, r2
 8042e52:	687a      	ldr	r2, [r7, #4]
 8042e54:	6812      	ldr	r2, [r2, #0]
 8042e56:	69f9      	ldr	r1, [r7, #28]
 8042e58:	430b      	orrs	r3, r1
 8042e5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8042e5c:	687b      	ldr	r3, [r7, #4]
 8042e5e:	681b      	ldr	r3, [r3, #0]
 8042e60:	685b      	ldr	r3, [r3, #4]
 8042e62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8042e66:	687b      	ldr	r3, [r7, #4]
 8042e68:	68da      	ldr	r2, [r3, #12]
 8042e6a:	687b      	ldr	r3, [r7, #4]
 8042e6c:	681b      	ldr	r3, [r3, #0]
 8042e6e:	430a      	orrs	r2, r1
 8042e70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8042e72:	687b      	ldr	r3, [r7, #4]
 8042e74:	699b      	ldr	r3, [r3, #24]
 8042e76:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8042e78:	687b      	ldr	r3, [r7, #4]
 8042e7a:	681b      	ldr	r3, [r3, #0]
 8042e7c:	4aa2      	ldr	r2, [pc, #648]	; (8043108 <UART_SetConfig+0x2e4>)
 8042e7e:	4293      	cmp	r3, r2
 8042e80:	d004      	beq.n	8042e8c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8042e82:	687b      	ldr	r3, [r7, #4]
 8042e84:	6a1b      	ldr	r3, [r3, #32]
 8042e86:	69fa      	ldr	r2, [r7, #28]
 8042e88:	4313      	orrs	r3, r2
 8042e8a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8042e8c:	687b      	ldr	r3, [r7, #4]
 8042e8e:	681b      	ldr	r3, [r3, #0]
 8042e90:	689b      	ldr	r3, [r3, #8]
 8042e92:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8042e96:	687b      	ldr	r3, [r7, #4]
 8042e98:	681b      	ldr	r3, [r3, #0]
 8042e9a:	69fa      	ldr	r2, [r7, #28]
 8042e9c:	430a      	orrs	r2, r1
 8042e9e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8042ea0:	687b      	ldr	r3, [r7, #4]
 8042ea2:	681b      	ldr	r3, [r3, #0]
 8042ea4:	4a99      	ldr	r2, [pc, #612]	; (804310c <UART_SetConfig+0x2e8>)
 8042ea6:	4293      	cmp	r3, r2
 8042ea8:	d121      	bne.n	8042eee <UART_SetConfig+0xca>
 8042eaa:	4b99      	ldr	r3, [pc, #612]	; (8043110 <UART_SetConfig+0x2ec>)
 8042eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042eb0:	f003 0303 	and.w	r3, r3, #3
 8042eb4:	2b03      	cmp	r3, #3
 8042eb6:	d817      	bhi.n	8042ee8 <UART_SetConfig+0xc4>
 8042eb8:	a201      	add	r2, pc, #4	; (adr r2, 8042ec0 <UART_SetConfig+0x9c>)
 8042eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042ebe:	bf00      	nop
 8042ec0:	08042ed1 	.word	0x08042ed1
 8042ec4:	08042edd 	.word	0x08042edd
 8042ec8:	08042ed7 	.word	0x08042ed7
 8042ecc:	08042ee3 	.word	0x08042ee3
 8042ed0:	2301      	movs	r3, #1
 8042ed2:	76fb      	strb	r3, [r7, #27]
 8042ed4:	e0e7      	b.n	80430a6 <UART_SetConfig+0x282>
 8042ed6:	2302      	movs	r3, #2
 8042ed8:	76fb      	strb	r3, [r7, #27]
 8042eda:	e0e4      	b.n	80430a6 <UART_SetConfig+0x282>
 8042edc:	2304      	movs	r3, #4
 8042ede:	76fb      	strb	r3, [r7, #27]
 8042ee0:	e0e1      	b.n	80430a6 <UART_SetConfig+0x282>
 8042ee2:	2308      	movs	r3, #8
 8042ee4:	76fb      	strb	r3, [r7, #27]
 8042ee6:	e0de      	b.n	80430a6 <UART_SetConfig+0x282>
 8042ee8:	2310      	movs	r3, #16
 8042eea:	76fb      	strb	r3, [r7, #27]
 8042eec:	e0db      	b.n	80430a6 <UART_SetConfig+0x282>
 8042eee:	687b      	ldr	r3, [r7, #4]
 8042ef0:	681b      	ldr	r3, [r3, #0]
 8042ef2:	4a88      	ldr	r2, [pc, #544]	; (8043114 <UART_SetConfig+0x2f0>)
 8042ef4:	4293      	cmp	r3, r2
 8042ef6:	d132      	bne.n	8042f5e <UART_SetConfig+0x13a>
 8042ef8:	4b85      	ldr	r3, [pc, #532]	; (8043110 <UART_SetConfig+0x2ec>)
 8042efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042efe:	f003 030c 	and.w	r3, r3, #12
 8042f02:	2b0c      	cmp	r3, #12
 8042f04:	d828      	bhi.n	8042f58 <UART_SetConfig+0x134>
 8042f06:	a201      	add	r2, pc, #4	; (adr r2, 8042f0c <UART_SetConfig+0xe8>)
 8042f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042f0c:	08042f41 	.word	0x08042f41
 8042f10:	08042f59 	.word	0x08042f59
 8042f14:	08042f59 	.word	0x08042f59
 8042f18:	08042f59 	.word	0x08042f59
 8042f1c:	08042f4d 	.word	0x08042f4d
 8042f20:	08042f59 	.word	0x08042f59
 8042f24:	08042f59 	.word	0x08042f59
 8042f28:	08042f59 	.word	0x08042f59
 8042f2c:	08042f47 	.word	0x08042f47
 8042f30:	08042f59 	.word	0x08042f59
 8042f34:	08042f59 	.word	0x08042f59
 8042f38:	08042f59 	.word	0x08042f59
 8042f3c:	08042f53 	.word	0x08042f53
 8042f40:	2300      	movs	r3, #0
 8042f42:	76fb      	strb	r3, [r7, #27]
 8042f44:	e0af      	b.n	80430a6 <UART_SetConfig+0x282>
 8042f46:	2302      	movs	r3, #2
 8042f48:	76fb      	strb	r3, [r7, #27]
 8042f4a:	e0ac      	b.n	80430a6 <UART_SetConfig+0x282>
 8042f4c:	2304      	movs	r3, #4
 8042f4e:	76fb      	strb	r3, [r7, #27]
 8042f50:	e0a9      	b.n	80430a6 <UART_SetConfig+0x282>
 8042f52:	2308      	movs	r3, #8
 8042f54:	76fb      	strb	r3, [r7, #27]
 8042f56:	e0a6      	b.n	80430a6 <UART_SetConfig+0x282>
 8042f58:	2310      	movs	r3, #16
 8042f5a:	76fb      	strb	r3, [r7, #27]
 8042f5c:	e0a3      	b.n	80430a6 <UART_SetConfig+0x282>
 8042f5e:	687b      	ldr	r3, [r7, #4]
 8042f60:	681b      	ldr	r3, [r3, #0]
 8042f62:	4a6d      	ldr	r2, [pc, #436]	; (8043118 <UART_SetConfig+0x2f4>)
 8042f64:	4293      	cmp	r3, r2
 8042f66:	d120      	bne.n	8042faa <UART_SetConfig+0x186>
 8042f68:	4b69      	ldr	r3, [pc, #420]	; (8043110 <UART_SetConfig+0x2ec>)
 8042f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042f6e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8042f72:	2b30      	cmp	r3, #48	; 0x30
 8042f74:	d013      	beq.n	8042f9e <UART_SetConfig+0x17a>
 8042f76:	2b30      	cmp	r3, #48	; 0x30
 8042f78:	d814      	bhi.n	8042fa4 <UART_SetConfig+0x180>
 8042f7a:	2b20      	cmp	r3, #32
 8042f7c:	d009      	beq.n	8042f92 <UART_SetConfig+0x16e>
 8042f7e:	2b20      	cmp	r3, #32
 8042f80:	d810      	bhi.n	8042fa4 <UART_SetConfig+0x180>
 8042f82:	2b00      	cmp	r3, #0
 8042f84:	d002      	beq.n	8042f8c <UART_SetConfig+0x168>
 8042f86:	2b10      	cmp	r3, #16
 8042f88:	d006      	beq.n	8042f98 <UART_SetConfig+0x174>
 8042f8a:	e00b      	b.n	8042fa4 <UART_SetConfig+0x180>
 8042f8c:	2300      	movs	r3, #0
 8042f8e:	76fb      	strb	r3, [r7, #27]
 8042f90:	e089      	b.n	80430a6 <UART_SetConfig+0x282>
 8042f92:	2302      	movs	r3, #2
 8042f94:	76fb      	strb	r3, [r7, #27]
 8042f96:	e086      	b.n	80430a6 <UART_SetConfig+0x282>
 8042f98:	2304      	movs	r3, #4
 8042f9a:	76fb      	strb	r3, [r7, #27]
 8042f9c:	e083      	b.n	80430a6 <UART_SetConfig+0x282>
 8042f9e:	2308      	movs	r3, #8
 8042fa0:	76fb      	strb	r3, [r7, #27]
 8042fa2:	e080      	b.n	80430a6 <UART_SetConfig+0x282>
 8042fa4:	2310      	movs	r3, #16
 8042fa6:	76fb      	strb	r3, [r7, #27]
 8042fa8:	e07d      	b.n	80430a6 <UART_SetConfig+0x282>
 8042faa:	687b      	ldr	r3, [r7, #4]
 8042fac:	681b      	ldr	r3, [r3, #0]
 8042fae:	4a5b      	ldr	r2, [pc, #364]	; (804311c <UART_SetConfig+0x2f8>)
 8042fb0:	4293      	cmp	r3, r2
 8042fb2:	d120      	bne.n	8042ff6 <UART_SetConfig+0x1d2>
 8042fb4:	4b56      	ldr	r3, [pc, #344]	; (8043110 <UART_SetConfig+0x2ec>)
 8042fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042fba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8042fbe:	2bc0      	cmp	r3, #192	; 0xc0
 8042fc0:	d013      	beq.n	8042fea <UART_SetConfig+0x1c6>
 8042fc2:	2bc0      	cmp	r3, #192	; 0xc0
 8042fc4:	d814      	bhi.n	8042ff0 <UART_SetConfig+0x1cc>
 8042fc6:	2b80      	cmp	r3, #128	; 0x80
 8042fc8:	d009      	beq.n	8042fde <UART_SetConfig+0x1ba>
 8042fca:	2b80      	cmp	r3, #128	; 0x80
 8042fcc:	d810      	bhi.n	8042ff0 <UART_SetConfig+0x1cc>
 8042fce:	2b00      	cmp	r3, #0
 8042fd0:	d002      	beq.n	8042fd8 <UART_SetConfig+0x1b4>
 8042fd2:	2b40      	cmp	r3, #64	; 0x40
 8042fd4:	d006      	beq.n	8042fe4 <UART_SetConfig+0x1c0>
 8042fd6:	e00b      	b.n	8042ff0 <UART_SetConfig+0x1cc>
 8042fd8:	2300      	movs	r3, #0
 8042fda:	76fb      	strb	r3, [r7, #27]
 8042fdc:	e063      	b.n	80430a6 <UART_SetConfig+0x282>
 8042fde:	2302      	movs	r3, #2
 8042fe0:	76fb      	strb	r3, [r7, #27]
 8042fe2:	e060      	b.n	80430a6 <UART_SetConfig+0x282>
 8042fe4:	2304      	movs	r3, #4
 8042fe6:	76fb      	strb	r3, [r7, #27]
 8042fe8:	e05d      	b.n	80430a6 <UART_SetConfig+0x282>
 8042fea:	2308      	movs	r3, #8
 8042fec:	76fb      	strb	r3, [r7, #27]
 8042fee:	e05a      	b.n	80430a6 <UART_SetConfig+0x282>
 8042ff0:	2310      	movs	r3, #16
 8042ff2:	76fb      	strb	r3, [r7, #27]
 8042ff4:	e057      	b.n	80430a6 <UART_SetConfig+0x282>
 8042ff6:	687b      	ldr	r3, [r7, #4]
 8042ff8:	681b      	ldr	r3, [r3, #0]
 8042ffa:	4a49      	ldr	r2, [pc, #292]	; (8043120 <UART_SetConfig+0x2fc>)
 8042ffc:	4293      	cmp	r3, r2
 8042ffe:	d125      	bne.n	804304c <UART_SetConfig+0x228>
 8043000:	4b43      	ldr	r3, [pc, #268]	; (8043110 <UART_SetConfig+0x2ec>)
 8043002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 804300a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804300e:	d017      	beq.n	8043040 <UART_SetConfig+0x21c>
 8043010:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8043014:	d817      	bhi.n	8043046 <UART_SetConfig+0x222>
 8043016:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804301a:	d00b      	beq.n	8043034 <UART_SetConfig+0x210>
 804301c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8043020:	d811      	bhi.n	8043046 <UART_SetConfig+0x222>
 8043022:	2b00      	cmp	r3, #0
 8043024:	d003      	beq.n	804302e <UART_SetConfig+0x20a>
 8043026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804302a:	d006      	beq.n	804303a <UART_SetConfig+0x216>
 804302c:	e00b      	b.n	8043046 <UART_SetConfig+0x222>
 804302e:	2300      	movs	r3, #0
 8043030:	76fb      	strb	r3, [r7, #27]
 8043032:	e038      	b.n	80430a6 <UART_SetConfig+0x282>
 8043034:	2302      	movs	r3, #2
 8043036:	76fb      	strb	r3, [r7, #27]
 8043038:	e035      	b.n	80430a6 <UART_SetConfig+0x282>
 804303a:	2304      	movs	r3, #4
 804303c:	76fb      	strb	r3, [r7, #27]
 804303e:	e032      	b.n	80430a6 <UART_SetConfig+0x282>
 8043040:	2308      	movs	r3, #8
 8043042:	76fb      	strb	r3, [r7, #27]
 8043044:	e02f      	b.n	80430a6 <UART_SetConfig+0x282>
 8043046:	2310      	movs	r3, #16
 8043048:	76fb      	strb	r3, [r7, #27]
 804304a:	e02c      	b.n	80430a6 <UART_SetConfig+0x282>
 804304c:	687b      	ldr	r3, [r7, #4]
 804304e:	681b      	ldr	r3, [r3, #0]
 8043050:	4a2d      	ldr	r2, [pc, #180]	; (8043108 <UART_SetConfig+0x2e4>)
 8043052:	4293      	cmp	r3, r2
 8043054:	d125      	bne.n	80430a2 <UART_SetConfig+0x27e>
 8043056:	4b2e      	ldr	r3, [pc, #184]	; (8043110 <UART_SetConfig+0x2ec>)
 8043058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804305c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8043060:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8043064:	d017      	beq.n	8043096 <UART_SetConfig+0x272>
 8043066:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 804306a:	d817      	bhi.n	804309c <UART_SetConfig+0x278>
 804306c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8043070:	d00b      	beq.n	804308a <UART_SetConfig+0x266>
 8043072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8043076:	d811      	bhi.n	804309c <UART_SetConfig+0x278>
 8043078:	2b00      	cmp	r3, #0
 804307a:	d003      	beq.n	8043084 <UART_SetConfig+0x260>
 804307c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8043080:	d006      	beq.n	8043090 <UART_SetConfig+0x26c>
 8043082:	e00b      	b.n	804309c <UART_SetConfig+0x278>
 8043084:	2300      	movs	r3, #0
 8043086:	76fb      	strb	r3, [r7, #27]
 8043088:	e00d      	b.n	80430a6 <UART_SetConfig+0x282>
 804308a:	2302      	movs	r3, #2
 804308c:	76fb      	strb	r3, [r7, #27]
 804308e:	e00a      	b.n	80430a6 <UART_SetConfig+0x282>
 8043090:	2304      	movs	r3, #4
 8043092:	76fb      	strb	r3, [r7, #27]
 8043094:	e007      	b.n	80430a6 <UART_SetConfig+0x282>
 8043096:	2308      	movs	r3, #8
 8043098:	76fb      	strb	r3, [r7, #27]
 804309a:	e004      	b.n	80430a6 <UART_SetConfig+0x282>
 804309c:	2310      	movs	r3, #16
 804309e:	76fb      	strb	r3, [r7, #27]
 80430a0:	e001      	b.n	80430a6 <UART_SetConfig+0x282>
 80430a2:	2310      	movs	r3, #16
 80430a4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80430a6:	687b      	ldr	r3, [r7, #4]
 80430a8:	681b      	ldr	r3, [r3, #0]
 80430aa:	4a17      	ldr	r2, [pc, #92]	; (8043108 <UART_SetConfig+0x2e4>)
 80430ac:	4293      	cmp	r3, r2
 80430ae:	f040 8087 	bne.w	80431c0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80430b2:	7efb      	ldrb	r3, [r7, #27]
 80430b4:	2b08      	cmp	r3, #8
 80430b6:	d837      	bhi.n	8043128 <UART_SetConfig+0x304>
 80430b8:	a201      	add	r2, pc, #4	; (adr r2, 80430c0 <UART_SetConfig+0x29c>)
 80430ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80430be:	bf00      	nop
 80430c0:	080430e5 	.word	0x080430e5
 80430c4:	08043129 	.word	0x08043129
 80430c8:	080430ed 	.word	0x080430ed
 80430cc:	08043129 	.word	0x08043129
 80430d0:	080430f3 	.word	0x080430f3
 80430d4:	08043129 	.word	0x08043129
 80430d8:	08043129 	.word	0x08043129
 80430dc:	08043129 	.word	0x08043129
 80430e0:	080430fb 	.word	0x080430fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80430e4:	f7fe fe52 	bl	8041d8c <HAL_RCC_GetPCLK1Freq>
 80430e8:	6178      	str	r0, [r7, #20]
        break;
 80430ea:	e022      	b.n	8043132 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80430ec:	4b0d      	ldr	r3, [pc, #52]	; (8043124 <UART_SetConfig+0x300>)
 80430ee:	617b      	str	r3, [r7, #20]
        break;
 80430f0:	e01f      	b.n	8043132 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80430f2:	f7fe fdb3 	bl	8041c5c <HAL_RCC_GetSysClockFreq>
 80430f6:	6178      	str	r0, [r7, #20]
        break;
 80430f8:	e01b      	b.n	8043132 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80430fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80430fe:	617b      	str	r3, [r7, #20]
        break;
 8043100:	e017      	b.n	8043132 <UART_SetConfig+0x30e>
 8043102:	bf00      	nop
 8043104:	efff69f3 	.word	0xefff69f3
 8043108:	40008000 	.word	0x40008000
 804310c:	40013800 	.word	0x40013800
 8043110:	40021000 	.word	0x40021000
 8043114:	40004400 	.word	0x40004400
 8043118:	40004800 	.word	0x40004800
 804311c:	40004c00 	.word	0x40004c00
 8043120:	40005000 	.word	0x40005000
 8043124:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8043128:	2300      	movs	r3, #0
 804312a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 804312c:	2301      	movs	r3, #1
 804312e:	76bb      	strb	r3, [r7, #26]
        break;
 8043130:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8043132:	697b      	ldr	r3, [r7, #20]
 8043134:	2b00      	cmp	r3, #0
 8043136:	f000 80f1 	beq.w	804331c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 804313a:	687b      	ldr	r3, [r7, #4]
 804313c:	685a      	ldr	r2, [r3, #4]
 804313e:	4613      	mov	r3, r2
 8043140:	005b      	lsls	r3, r3, #1
 8043142:	4413      	add	r3, r2
 8043144:	697a      	ldr	r2, [r7, #20]
 8043146:	429a      	cmp	r2, r3
 8043148:	d305      	bcc.n	8043156 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 804314a:	687b      	ldr	r3, [r7, #4]
 804314c:	685b      	ldr	r3, [r3, #4]
 804314e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8043150:	697a      	ldr	r2, [r7, #20]
 8043152:	429a      	cmp	r2, r3
 8043154:	d902      	bls.n	804315c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8043156:	2301      	movs	r3, #1
 8043158:	76bb      	strb	r3, [r7, #26]
 804315a:	e0df      	b.n	804331c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 804315c:	697b      	ldr	r3, [r7, #20]
 804315e:	4618      	mov	r0, r3
 8043160:	f04f 0100 	mov.w	r1, #0
 8043164:	f04f 0200 	mov.w	r2, #0
 8043168:	f04f 0300 	mov.w	r3, #0
 804316c:	020b      	lsls	r3, r1, #8
 804316e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8043172:	0202      	lsls	r2, r0, #8
 8043174:	6879      	ldr	r1, [r7, #4]
 8043176:	6849      	ldr	r1, [r1, #4]
 8043178:	0849      	lsrs	r1, r1, #1
 804317a:	4608      	mov	r0, r1
 804317c:	f04f 0100 	mov.w	r1, #0
 8043180:	1814      	adds	r4, r2, r0
 8043182:	eb43 0501 	adc.w	r5, r3, r1
 8043186:	687b      	ldr	r3, [r7, #4]
 8043188:	685b      	ldr	r3, [r3, #4]
 804318a:	461a      	mov	r2, r3
 804318c:	f04f 0300 	mov.w	r3, #0
 8043190:	4620      	mov	r0, r4
 8043192:	4629      	mov	r1, r5
 8043194:	f7fd f820 	bl	80401d8 <__aeabi_uldivmod>
 8043198:	4602      	mov	r2, r0
 804319a:	460b      	mov	r3, r1
 804319c:	4613      	mov	r3, r2
 804319e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80431a0:	693b      	ldr	r3, [r7, #16]
 80431a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80431a6:	d308      	bcc.n	80431ba <UART_SetConfig+0x396>
 80431a8:	693b      	ldr	r3, [r7, #16]
 80431aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80431ae:	d204      	bcs.n	80431ba <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80431b0:	687b      	ldr	r3, [r7, #4]
 80431b2:	681b      	ldr	r3, [r3, #0]
 80431b4:	693a      	ldr	r2, [r7, #16]
 80431b6:	60da      	str	r2, [r3, #12]
 80431b8:	e0b0      	b.n	804331c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80431ba:	2301      	movs	r3, #1
 80431bc:	76bb      	strb	r3, [r7, #26]
 80431be:	e0ad      	b.n	804331c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80431c0:	687b      	ldr	r3, [r7, #4]
 80431c2:	69db      	ldr	r3, [r3, #28]
 80431c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80431c8:	d15c      	bne.n	8043284 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80431ca:	7efb      	ldrb	r3, [r7, #27]
 80431cc:	2b08      	cmp	r3, #8
 80431ce:	d828      	bhi.n	8043222 <UART_SetConfig+0x3fe>
 80431d0:	a201      	add	r2, pc, #4	; (adr r2, 80431d8 <UART_SetConfig+0x3b4>)
 80431d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80431d6:	bf00      	nop
 80431d8:	080431fd 	.word	0x080431fd
 80431dc:	08043205 	.word	0x08043205
 80431e0:	0804320d 	.word	0x0804320d
 80431e4:	08043223 	.word	0x08043223
 80431e8:	08043213 	.word	0x08043213
 80431ec:	08043223 	.word	0x08043223
 80431f0:	08043223 	.word	0x08043223
 80431f4:	08043223 	.word	0x08043223
 80431f8:	0804321b 	.word	0x0804321b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80431fc:	f7fe fdc6 	bl	8041d8c <HAL_RCC_GetPCLK1Freq>
 8043200:	6178      	str	r0, [r7, #20]
        break;
 8043202:	e013      	b.n	804322c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8043204:	f7fe fdd8 	bl	8041db8 <HAL_RCC_GetPCLK2Freq>
 8043208:	6178      	str	r0, [r7, #20]
        break;
 804320a:	e00f      	b.n	804322c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 804320c:	4b49      	ldr	r3, [pc, #292]	; (8043334 <UART_SetConfig+0x510>)
 804320e:	617b      	str	r3, [r7, #20]
        break;
 8043210:	e00c      	b.n	804322c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8043212:	f7fe fd23 	bl	8041c5c <HAL_RCC_GetSysClockFreq>
 8043216:	6178      	str	r0, [r7, #20]
        break;
 8043218:	e008      	b.n	804322c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 804321a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 804321e:	617b      	str	r3, [r7, #20]
        break;
 8043220:	e004      	b.n	804322c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8043222:	2300      	movs	r3, #0
 8043224:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8043226:	2301      	movs	r3, #1
 8043228:	76bb      	strb	r3, [r7, #26]
        break;
 804322a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 804322c:	697b      	ldr	r3, [r7, #20]
 804322e:	2b00      	cmp	r3, #0
 8043230:	d074      	beq.n	804331c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8043232:	697b      	ldr	r3, [r7, #20]
 8043234:	005a      	lsls	r2, r3, #1
 8043236:	687b      	ldr	r3, [r7, #4]
 8043238:	685b      	ldr	r3, [r3, #4]
 804323a:	085b      	lsrs	r3, r3, #1
 804323c:	441a      	add	r2, r3
 804323e:	687b      	ldr	r3, [r7, #4]
 8043240:	685b      	ldr	r3, [r3, #4]
 8043242:	fbb2 f3f3 	udiv	r3, r2, r3
 8043246:	b29b      	uxth	r3, r3
 8043248:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 804324a:	693b      	ldr	r3, [r7, #16]
 804324c:	2b0f      	cmp	r3, #15
 804324e:	d916      	bls.n	804327e <UART_SetConfig+0x45a>
 8043250:	693b      	ldr	r3, [r7, #16]
 8043252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8043256:	d212      	bcs.n	804327e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8043258:	693b      	ldr	r3, [r7, #16]
 804325a:	b29b      	uxth	r3, r3
 804325c:	f023 030f 	bic.w	r3, r3, #15
 8043260:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8043262:	693b      	ldr	r3, [r7, #16]
 8043264:	085b      	lsrs	r3, r3, #1
 8043266:	b29b      	uxth	r3, r3
 8043268:	f003 0307 	and.w	r3, r3, #7
 804326c:	b29a      	uxth	r2, r3
 804326e:	89fb      	ldrh	r3, [r7, #14]
 8043270:	4313      	orrs	r3, r2
 8043272:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8043274:	687b      	ldr	r3, [r7, #4]
 8043276:	681b      	ldr	r3, [r3, #0]
 8043278:	89fa      	ldrh	r2, [r7, #14]
 804327a:	60da      	str	r2, [r3, #12]
 804327c:	e04e      	b.n	804331c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 804327e:	2301      	movs	r3, #1
 8043280:	76bb      	strb	r3, [r7, #26]
 8043282:	e04b      	b.n	804331c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8043284:	7efb      	ldrb	r3, [r7, #27]
 8043286:	2b08      	cmp	r3, #8
 8043288:	d827      	bhi.n	80432da <UART_SetConfig+0x4b6>
 804328a:	a201      	add	r2, pc, #4	; (adr r2, 8043290 <UART_SetConfig+0x46c>)
 804328c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043290:	080432b5 	.word	0x080432b5
 8043294:	080432bd 	.word	0x080432bd
 8043298:	080432c5 	.word	0x080432c5
 804329c:	080432db 	.word	0x080432db
 80432a0:	080432cb 	.word	0x080432cb
 80432a4:	080432db 	.word	0x080432db
 80432a8:	080432db 	.word	0x080432db
 80432ac:	080432db 	.word	0x080432db
 80432b0:	080432d3 	.word	0x080432d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80432b4:	f7fe fd6a 	bl	8041d8c <HAL_RCC_GetPCLK1Freq>
 80432b8:	6178      	str	r0, [r7, #20]
        break;
 80432ba:	e013      	b.n	80432e4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80432bc:	f7fe fd7c 	bl	8041db8 <HAL_RCC_GetPCLK2Freq>
 80432c0:	6178      	str	r0, [r7, #20]
        break;
 80432c2:	e00f      	b.n	80432e4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80432c4:	4b1b      	ldr	r3, [pc, #108]	; (8043334 <UART_SetConfig+0x510>)
 80432c6:	617b      	str	r3, [r7, #20]
        break;
 80432c8:	e00c      	b.n	80432e4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80432ca:	f7fe fcc7 	bl	8041c5c <HAL_RCC_GetSysClockFreq>
 80432ce:	6178      	str	r0, [r7, #20]
        break;
 80432d0:	e008      	b.n	80432e4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80432d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80432d6:	617b      	str	r3, [r7, #20]
        break;
 80432d8:	e004      	b.n	80432e4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80432da:	2300      	movs	r3, #0
 80432dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80432de:	2301      	movs	r3, #1
 80432e0:	76bb      	strb	r3, [r7, #26]
        break;
 80432e2:	bf00      	nop
    }

    if (pclk != 0U)
 80432e4:	697b      	ldr	r3, [r7, #20]
 80432e6:	2b00      	cmp	r3, #0
 80432e8:	d018      	beq.n	804331c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80432ea:	687b      	ldr	r3, [r7, #4]
 80432ec:	685b      	ldr	r3, [r3, #4]
 80432ee:	085a      	lsrs	r2, r3, #1
 80432f0:	697b      	ldr	r3, [r7, #20]
 80432f2:	441a      	add	r2, r3
 80432f4:	687b      	ldr	r3, [r7, #4]
 80432f6:	685b      	ldr	r3, [r3, #4]
 80432f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80432fc:	b29b      	uxth	r3, r3
 80432fe:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8043300:	693b      	ldr	r3, [r7, #16]
 8043302:	2b0f      	cmp	r3, #15
 8043304:	d908      	bls.n	8043318 <UART_SetConfig+0x4f4>
 8043306:	693b      	ldr	r3, [r7, #16]
 8043308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804330c:	d204      	bcs.n	8043318 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 804330e:	687b      	ldr	r3, [r7, #4]
 8043310:	681b      	ldr	r3, [r3, #0]
 8043312:	693a      	ldr	r2, [r7, #16]
 8043314:	60da      	str	r2, [r3, #12]
 8043316:	e001      	b.n	804331c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8043318:	2301      	movs	r3, #1
 804331a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 804331c:	687b      	ldr	r3, [r7, #4]
 804331e:	2200      	movs	r2, #0
 8043320:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8043322:	687b      	ldr	r3, [r7, #4]
 8043324:	2200      	movs	r2, #0
 8043326:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8043328:	7ebb      	ldrb	r3, [r7, #26]
}
 804332a:	4618      	mov	r0, r3
 804332c:	3720      	adds	r7, #32
 804332e:	46bd      	mov	sp, r7
 8043330:	bdb0      	pop	{r4, r5, r7, pc}
 8043332:	bf00      	nop
 8043334:	00f42400 	.word	0x00f42400

08043338 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8043338:	b480      	push	{r7}
 804333a:	b083      	sub	sp, #12
 804333c:	af00      	add	r7, sp, #0
 804333e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8043340:	687b      	ldr	r3, [r7, #4]
 8043342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043344:	f003 0301 	and.w	r3, r3, #1
 8043348:	2b00      	cmp	r3, #0
 804334a:	d00a      	beq.n	8043362 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 804334c:	687b      	ldr	r3, [r7, #4]
 804334e:	681b      	ldr	r3, [r3, #0]
 8043350:	685b      	ldr	r3, [r3, #4]
 8043352:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8043356:	687b      	ldr	r3, [r7, #4]
 8043358:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 804335a:	687b      	ldr	r3, [r7, #4]
 804335c:	681b      	ldr	r3, [r3, #0]
 804335e:	430a      	orrs	r2, r1
 8043360:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8043362:	687b      	ldr	r3, [r7, #4]
 8043364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043366:	f003 0302 	and.w	r3, r3, #2
 804336a:	2b00      	cmp	r3, #0
 804336c:	d00a      	beq.n	8043384 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 804336e:	687b      	ldr	r3, [r7, #4]
 8043370:	681b      	ldr	r3, [r3, #0]
 8043372:	685b      	ldr	r3, [r3, #4]
 8043374:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8043378:	687b      	ldr	r3, [r7, #4]
 804337a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804337c:	687b      	ldr	r3, [r7, #4]
 804337e:	681b      	ldr	r3, [r3, #0]
 8043380:	430a      	orrs	r2, r1
 8043382:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8043384:	687b      	ldr	r3, [r7, #4]
 8043386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043388:	f003 0304 	and.w	r3, r3, #4
 804338c:	2b00      	cmp	r3, #0
 804338e:	d00a      	beq.n	80433a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8043390:	687b      	ldr	r3, [r7, #4]
 8043392:	681b      	ldr	r3, [r3, #0]
 8043394:	685b      	ldr	r3, [r3, #4]
 8043396:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 804339a:	687b      	ldr	r3, [r7, #4]
 804339c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804339e:	687b      	ldr	r3, [r7, #4]
 80433a0:	681b      	ldr	r3, [r3, #0]
 80433a2:	430a      	orrs	r2, r1
 80433a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80433a6:	687b      	ldr	r3, [r7, #4]
 80433a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80433aa:	f003 0308 	and.w	r3, r3, #8
 80433ae:	2b00      	cmp	r3, #0
 80433b0:	d00a      	beq.n	80433c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80433b2:	687b      	ldr	r3, [r7, #4]
 80433b4:	681b      	ldr	r3, [r3, #0]
 80433b6:	685b      	ldr	r3, [r3, #4]
 80433b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80433bc:	687b      	ldr	r3, [r7, #4]
 80433be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80433c0:	687b      	ldr	r3, [r7, #4]
 80433c2:	681b      	ldr	r3, [r3, #0]
 80433c4:	430a      	orrs	r2, r1
 80433c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80433c8:	687b      	ldr	r3, [r7, #4]
 80433ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80433cc:	f003 0310 	and.w	r3, r3, #16
 80433d0:	2b00      	cmp	r3, #0
 80433d2:	d00a      	beq.n	80433ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80433d4:	687b      	ldr	r3, [r7, #4]
 80433d6:	681b      	ldr	r3, [r3, #0]
 80433d8:	689b      	ldr	r3, [r3, #8]
 80433da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80433de:	687b      	ldr	r3, [r7, #4]
 80433e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80433e2:	687b      	ldr	r3, [r7, #4]
 80433e4:	681b      	ldr	r3, [r3, #0]
 80433e6:	430a      	orrs	r2, r1
 80433e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80433ea:	687b      	ldr	r3, [r7, #4]
 80433ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80433ee:	f003 0320 	and.w	r3, r3, #32
 80433f2:	2b00      	cmp	r3, #0
 80433f4:	d00a      	beq.n	804340c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80433f6:	687b      	ldr	r3, [r7, #4]
 80433f8:	681b      	ldr	r3, [r3, #0]
 80433fa:	689b      	ldr	r3, [r3, #8]
 80433fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8043400:	687b      	ldr	r3, [r7, #4]
 8043402:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8043404:	687b      	ldr	r3, [r7, #4]
 8043406:	681b      	ldr	r3, [r3, #0]
 8043408:	430a      	orrs	r2, r1
 804340a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 804340c:	687b      	ldr	r3, [r7, #4]
 804340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8043414:	2b00      	cmp	r3, #0
 8043416:	d01a      	beq.n	804344e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8043418:	687b      	ldr	r3, [r7, #4]
 804341a:	681b      	ldr	r3, [r3, #0]
 804341c:	685b      	ldr	r3, [r3, #4]
 804341e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8043422:	687b      	ldr	r3, [r7, #4]
 8043424:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8043426:	687b      	ldr	r3, [r7, #4]
 8043428:	681b      	ldr	r3, [r3, #0]
 804342a:	430a      	orrs	r2, r1
 804342c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 804342e:	687b      	ldr	r3, [r7, #4]
 8043430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043432:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8043436:	d10a      	bne.n	804344e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8043438:	687b      	ldr	r3, [r7, #4]
 804343a:	681b      	ldr	r3, [r3, #0]
 804343c:	685b      	ldr	r3, [r3, #4]
 804343e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8043442:	687b      	ldr	r3, [r7, #4]
 8043444:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8043446:	687b      	ldr	r3, [r7, #4]
 8043448:	681b      	ldr	r3, [r3, #0]
 804344a:	430a      	orrs	r2, r1
 804344c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 804344e:	687b      	ldr	r3, [r7, #4]
 8043450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8043456:	2b00      	cmp	r3, #0
 8043458:	d00a      	beq.n	8043470 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 804345a:	687b      	ldr	r3, [r7, #4]
 804345c:	681b      	ldr	r3, [r3, #0]
 804345e:	685b      	ldr	r3, [r3, #4]
 8043460:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8043464:	687b      	ldr	r3, [r7, #4]
 8043466:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8043468:	687b      	ldr	r3, [r7, #4]
 804346a:	681b      	ldr	r3, [r3, #0]
 804346c:	430a      	orrs	r2, r1
 804346e:	605a      	str	r2, [r3, #4]
  }
}
 8043470:	bf00      	nop
 8043472:	370c      	adds	r7, #12
 8043474:	46bd      	mov	sp, r7
 8043476:	f85d 7b04 	ldr.w	r7, [sp], #4
 804347a:	4770      	bx	lr

0804347c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 804347c:	b580      	push	{r7, lr}
 804347e:	b086      	sub	sp, #24
 8043480:	af02      	add	r7, sp, #8
 8043482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8043484:	687b      	ldr	r3, [r7, #4]
 8043486:	2200      	movs	r2, #0
 8043488:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 804348c:	f7fd fb38 	bl	8040b00 <HAL_GetTick>
 8043490:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8043492:	687b      	ldr	r3, [r7, #4]
 8043494:	681b      	ldr	r3, [r3, #0]
 8043496:	681b      	ldr	r3, [r3, #0]
 8043498:	f003 0308 	and.w	r3, r3, #8
 804349c:	2b08      	cmp	r3, #8
 804349e:	d10e      	bne.n	80434be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80434a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80434a4:	9300      	str	r3, [sp, #0]
 80434a6:	68fb      	ldr	r3, [r7, #12]
 80434a8:	2200      	movs	r2, #0
 80434aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80434ae:	6878      	ldr	r0, [r7, #4]
 80434b0:	f000 f82d 	bl	804350e <UART_WaitOnFlagUntilTimeout>
 80434b4:	4603      	mov	r3, r0
 80434b6:	2b00      	cmp	r3, #0
 80434b8:	d001      	beq.n	80434be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80434ba:	2303      	movs	r3, #3
 80434bc:	e023      	b.n	8043506 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80434be:	687b      	ldr	r3, [r7, #4]
 80434c0:	681b      	ldr	r3, [r3, #0]
 80434c2:	681b      	ldr	r3, [r3, #0]
 80434c4:	f003 0304 	and.w	r3, r3, #4
 80434c8:	2b04      	cmp	r3, #4
 80434ca:	d10e      	bne.n	80434ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80434cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80434d0:	9300      	str	r3, [sp, #0]
 80434d2:	68fb      	ldr	r3, [r7, #12]
 80434d4:	2200      	movs	r2, #0
 80434d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80434da:	6878      	ldr	r0, [r7, #4]
 80434dc:	f000 f817 	bl	804350e <UART_WaitOnFlagUntilTimeout>
 80434e0:	4603      	mov	r3, r0
 80434e2:	2b00      	cmp	r3, #0
 80434e4:	d001      	beq.n	80434ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80434e6:	2303      	movs	r3, #3
 80434e8:	e00d      	b.n	8043506 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80434ea:	687b      	ldr	r3, [r7, #4]
 80434ec:	2220      	movs	r2, #32
 80434ee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80434f0:	687b      	ldr	r3, [r7, #4]
 80434f2:	2220      	movs	r2, #32
 80434f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80434f6:	687b      	ldr	r3, [r7, #4]
 80434f8:	2200      	movs	r2, #0
 80434fa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80434fc:	687b      	ldr	r3, [r7, #4]
 80434fe:	2200      	movs	r2, #0
 8043500:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8043504:	2300      	movs	r3, #0
}
 8043506:	4618      	mov	r0, r3
 8043508:	3710      	adds	r7, #16
 804350a:	46bd      	mov	sp, r7
 804350c:	bd80      	pop	{r7, pc}

0804350e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 804350e:	b580      	push	{r7, lr}
 8043510:	b084      	sub	sp, #16
 8043512:	af00      	add	r7, sp, #0
 8043514:	60f8      	str	r0, [r7, #12]
 8043516:	60b9      	str	r1, [r7, #8]
 8043518:	603b      	str	r3, [r7, #0]
 804351a:	4613      	mov	r3, r2
 804351c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 804351e:	e05e      	b.n	80435de <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8043520:	69bb      	ldr	r3, [r7, #24]
 8043522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8043526:	d05a      	beq.n	80435de <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8043528:	f7fd faea 	bl	8040b00 <HAL_GetTick>
 804352c:	4602      	mov	r2, r0
 804352e:	683b      	ldr	r3, [r7, #0]
 8043530:	1ad3      	subs	r3, r2, r3
 8043532:	69ba      	ldr	r2, [r7, #24]
 8043534:	429a      	cmp	r2, r3
 8043536:	d302      	bcc.n	804353e <UART_WaitOnFlagUntilTimeout+0x30>
 8043538:	69bb      	ldr	r3, [r7, #24]
 804353a:	2b00      	cmp	r3, #0
 804353c:	d11b      	bne.n	8043576 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 804353e:	68fb      	ldr	r3, [r7, #12]
 8043540:	681b      	ldr	r3, [r3, #0]
 8043542:	681a      	ldr	r2, [r3, #0]
 8043544:	68fb      	ldr	r3, [r7, #12]
 8043546:	681b      	ldr	r3, [r3, #0]
 8043548:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 804354c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804354e:	68fb      	ldr	r3, [r7, #12]
 8043550:	681b      	ldr	r3, [r3, #0]
 8043552:	689a      	ldr	r2, [r3, #8]
 8043554:	68fb      	ldr	r3, [r7, #12]
 8043556:	681b      	ldr	r3, [r3, #0]
 8043558:	f022 0201 	bic.w	r2, r2, #1
 804355c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 804355e:	68fb      	ldr	r3, [r7, #12]
 8043560:	2220      	movs	r2, #32
 8043562:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8043564:	68fb      	ldr	r3, [r7, #12]
 8043566:	2220      	movs	r2, #32
 8043568:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 804356a:	68fb      	ldr	r3, [r7, #12]
 804356c:	2200      	movs	r2, #0
 804356e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8043572:	2303      	movs	r3, #3
 8043574:	e043      	b.n	80435fe <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8043576:	68fb      	ldr	r3, [r7, #12]
 8043578:	681b      	ldr	r3, [r3, #0]
 804357a:	681b      	ldr	r3, [r3, #0]
 804357c:	f003 0304 	and.w	r3, r3, #4
 8043580:	2b00      	cmp	r3, #0
 8043582:	d02c      	beq.n	80435de <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8043584:	68fb      	ldr	r3, [r7, #12]
 8043586:	681b      	ldr	r3, [r3, #0]
 8043588:	69db      	ldr	r3, [r3, #28]
 804358a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 804358e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8043592:	d124      	bne.n	80435de <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8043594:	68fb      	ldr	r3, [r7, #12]
 8043596:	681b      	ldr	r3, [r3, #0]
 8043598:	f44f 6200 	mov.w	r2, #2048	; 0x800
 804359c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 804359e:	68fb      	ldr	r3, [r7, #12]
 80435a0:	681b      	ldr	r3, [r3, #0]
 80435a2:	681a      	ldr	r2, [r3, #0]
 80435a4:	68fb      	ldr	r3, [r7, #12]
 80435a6:	681b      	ldr	r3, [r3, #0]
 80435a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80435ac:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80435ae:	68fb      	ldr	r3, [r7, #12]
 80435b0:	681b      	ldr	r3, [r3, #0]
 80435b2:	689a      	ldr	r2, [r3, #8]
 80435b4:	68fb      	ldr	r3, [r7, #12]
 80435b6:	681b      	ldr	r3, [r3, #0]
 80435b8:	f022 0201 	bic.w	r2, r2, #1
 80435bc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80435be:	68fb      	ldr	r3, [r7, #12]
 80435c0:	2220      	movs	r2, #32
 80435c2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80435c4:	68fb      	ldr	r3, [r7, #12]
 80435c6:	2220      	movs	r2, #32
 80435c8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80435ca:	68fb      	ldr	r3, [r7, #12]
 80435cc:	2220      	movs	r2, #32
 80435ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80435d2:	68fb      	ldr	r3, [r7, #12]
 80435d4:	2200      	movs	r2, #0
 80435d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80435da:	2303      	movs	r3, #3
 80435dc:	e00f      	b.n	80435fe <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80435de:	68fb      	ldr	r3, [r7, #12]
 80435e0:	681b      	ldr	r3, [r3, #0]
 80435e2:	69da      	ldr	r2, [r3, #28]
 80435e4:	68bb      	ldr	r3, [r7, #8]
 80435e6:	4013      	ands	r3, r2
 80435e8:	68ba      	ldr	r2, [r7, #8]
 80435ea:	429a      	cmp	r2, r3
 80435ec:	bf0c      	ite	eq
 80435ee:	2301      	moveq	r3, #1
 80435f0:	2300      	movne	r3, #0
 80435f2:	b2db      	uxtb	r3, r3
 80435f4:	461a      	mov	r2, r3
 80435f6:	79fb      	ldrb	r3, [r7, #7]
 80435f8:	429a      	cmp	r2, r3
 80435fa:	d091      	beq.n	8043520 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80435fc:	2300      	movs	r3, #0
}
 80435fe:	4618      	mov	r0, r3
 8043600:	3710      	adds	r7, #16
 8043602:	46bd      	mov	sp, r7
 8043604:	bd80      	pop	{r7, pc}

08043606 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8043606:	b480      	push	{r7}
 8043608:	b083      	sub	sp, #12
 804360a:	af00      	add	r7, sp, #0
 804360c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 804360e:	687b      	ldr	r3, [r7, #4]
 8043610:	681b      	ldr	r3, [r3, #0]
 8043612:	681a      	ldr	r2, [r3, #0]
 8043614:	687b      	ldr	r3, [r7, #4]
 8043616:	681b      	ldr	r3, [r3, #0]
 8043618:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 804361c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804361e:	687b      	ldr	r3, [r7, #4]
 8043620:	681b      	ldr	r3, [r3, #0]
 8043622:	689a      	ldr	r2, [r3, #8]
 8043624:	687b      	ldr	r3, [r7, #4]
 8043626:	681b      	ldr	r3, [r3, #0]
 8043628:	f022 0201 	bic.w	r2, r2, #1
 804362c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 804362e:	687b      	ldr	r3, [r7, #4]
 8043630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8043632:	2b01      	cmp	r3, #1
 8043634:	d107      	bne.n	8043646 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8043636:	687b      	ldr	r3, [r7, #4]
 8043638:	681b      	ldr	r3, [r3, #0]
 804363a:	681a      	ldr	r2, [r3, #0]
 804363c:	687b      	ldr	r3, [r7, #4]
 804363e:	681b      	ldr	r3, [r3, #0]
 8043640:	f022 0210 	bic.w	r2, r2, #16
 8043644:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8043646:	687b      	ldr	r3, [r7, #4]
 8043648:	2220      	movs	r2, #32
 804364a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 804364c:	687b      	ldr	r3, [r7, #4]
 804364e:	2200      	movs	r2, #0
 8043650:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8043652:	687b      	ldr	r3, [r7, #4]
 8043654:	2200      	movs	r2, #0
 8043656:	665a      	str	r2, [r3, #100]	; 0x64
}
 8043658:	bf00      	nop
 804365a:	370c      	adds	r7, #12
 804365c:	46bd      	mov	sp, r7
 804365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043662:	4770      	bx	lr

08043664 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8043664:	b580      	push	{r7, lr}
 8043666:	b084      	sub	sp, #16
 8043668:	af00      	add	r7, sp, #0
 804366a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 804366c:	687b      	ldr	r3, [r7, #4]
 804366e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043670:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8043672:	68fb      	ldr	r3, [r7, #12]
 8043674:	2200      	movs	r2, #0
 8043676:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 804367a:	68fb      	ldr	r3, [r7, #12]
 804367c:	2200      	movs	r2, #0
 804367e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8043682:	68f8      	ldr	r0, [r7, #12]
 8043684:	f7ff fbb8 	bl	8042df8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8043688:	bf00      	nop
 804368a:	3710      	adds	r7, #16
 804368c:	46bd      	mov	sp, r7
 804368e:	bd80      	pop	{r7, pc}

08043690 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8043690:	b580      	push	{r7, lr}
 8043692:	b082      	sub	sp, #8
 8043694:	af00      	add	r7, sp, #0
 8043696:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8043698:	687b      	ldr	r3, [r7, #4]
 804369a:	681b      	ldr	r3, [r3, #0]
 804369c:	681a      	ldr	r2, [r3, #0]
 804369e:	687b      	ldr	r3, [r7, #4]
 80436a0:	681b      	ldr	r3, [r3, #0]
 80436a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80436a6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80436a8:	687b      	ldr	r3, [r7, #4]
 80436aa:	2220      	movs	r2, #32
 80436ac:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80436ae:	687b      	ldr	r3, [r7, #4]
 80436b0:	2200      	movs	r2, #0
 80436b2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80436b4:	6878      	ldr	r0, [r7, #4]
 80436b6:	f7ff fb95 	bl	8042de4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80436ba:	bf00      	nop
 80436bc:	3708      	adds	r7, #8
 80436be:	46bd      	mov	sp, r7
 80436c0:	bd80      	pop	{r7, pc}

080436c2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80436c2:	b480      	push	{r7}
 80436c4:	b083      	sub	sp, #12
 80436c6:	af00      	add	r7, sp, #0
 80436c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80436ca:	bf00      	nop
 80436cc:	370c      	adds	r7, #12
 80436ce:	46bd      	mov	sp, r7
 80436d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80436d4:	4770      	bx	lr
	...

080436d8 <__libc_init_array>:
 80436d8:	b570      	push	{r4, r5, r6, lr}
 80436da:	4d0d      	ldr	r5, [pc, #52]	; (8043710 <__libc_init_array+0x38>)
 80436dc:	4c0d      	ldr	r4, [pc, #52]	; (8043714 <__libc_init_array+0x3c>)
 80436de:	1b64      	subs	r4, r4, r5
 80436e0:	10a4      	asrs	r4, r4, #2
 80436e2:	2600      	movs	r6, #0
 80436e4:	42a6      	cmp	r6, r4
 80436e6:	d109      	bne.n	80436fc <__libc_init_array+0x24>
 80436e8:	4d0b      	ldr	r5, [pc, #44]	; (8043718 <__libc_init_array+0x40>)
 80436ea:	4c0c      	ldr	r4, [pc, #48]	; (804371c <__libc_init_array+0x44>)
 80436ec:	f000 f820 	bl	8043730 <_init>
 80436f0:	1b64      	subs	r4, r4, r5
 80436f2:	10a4      	asrs	r4, r4, #2
 80436f4:	2600      	movs	r6, #0
 80436f6:	42a6      	cmp	r6, r4
 80436f8:	d105      	bne.n	8043706 <__libc_init_array+0x2e>
 80436fa:	bd70      	pop	{r4, r5, r6, pc}
 80436fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8043700:	4798      	blx	r3
 8043702:	3601      	adds	r6, #1
 8043704:	e7ee      	b.n	80436e4 <__libc_init_array+0xc>
 8043706:	f855 3b04 	ldr.w	r3, [r5], #4
 804370a:	4798      	blx	r3
 804370c:	3601      	adds	r6, #1
 804370e:	e7f2      	b.n	80436f6 <__libc_init_array+0x1e>
 8043710:	080437cc 	.word	0x080437cc
 8043714:	080437cc 	.word	0x080437cc
 8043718:	080437cc 	.word	0x080437cc
 804371c:	080437d0 	.word	0x080437d0

08043720 <memset>:
 8043720:	4402      	add	r2, r0
 8043722:	4603      	mov	r3, r0
 8043724:	4293      	cmp	r3, r2
 8043726:	d100      	bne.n	804372a <memset+0xa>
 8043728:	4770      	bx	lr
 804372a:	f803 1b01 	strb.w	r1, [r3], #1
 804372e:	e7f9      	b.n	8043724 <memset+0x4>

08043730 <_init>:
 8043730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8043732:	bf00      	nop
 8043734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8043736:	bc08      	pop	{r3}
 8043738:	469e      	mov	lr, r3
 804373a:	4770      	bx	lr

0804373c <_fini>:
 804373c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804373e:	bf00      	nop
 8043740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8043742:	bc08      	pop	{r3}
 8043744:	469e      	mov	lr, r3
 8043746:	4770      	bx	lr
