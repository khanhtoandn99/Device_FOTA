
FOTA_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08019000  08019000  00009000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa84  08019190  08019190  00009190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000080c  08023c18  08023c18  00013c18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024424  08024424  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  08024424  08024424  00014424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802442c  0802442c  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0802442c  0802442c  0001442c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08024434  08024434  00014434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0802443c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000204  08024640  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  08024640  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024c87  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043b5  00000000  00000000  00044ebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  00049270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb8  00000000  00000000  00049f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bdd5  00000000  00000000  0004ab18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b48  00000000  00000000  000768ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f90ae  00000000  00000000  00089435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001824e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bc4  00000000  00000000  00182538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08019190 <__do_global_dtors_aux>:
 8019190:	b510      	push	{r4, lr}
 8019192:	4c05      	ldr	r4, [pc, #20]	; (80191a8 <__do_global_dtors_aux+0x18>)
 8019194:	7823      	ldrb	r3, [r4, #0]
 8019196:	b933      	cbnz	r3, 80191a6 <__do_global_dtors_aux+0x16>
 8019198:	4b04      	ldr	r3, [pc, #16]	; (80191ac <__do_global_dtors_aux+0x1c>)
 801919a:	b113      	cbz	r3, 80191a2 <__do_global_dtors_aux+0x12>
 801919c:	4804      	ldr	r0, [pc, #16]	; (80191b0 <__do_global_dtors_aux+0x20>)
 801919e:	f3af 8000 	nop.w
 80191a2:	2301      	movs	r3, #1
 80191a4:	7023      	strb	r3, [r4, #0]
 80191a6:	bd10      	pop	{r4, pc}
 80191a8:	20000204 	.word	0x20000204
 80191ac:	00000000 	.word	0x00000000
 80191b0:	08023bfc 	.word	0x08023bfc

080191b4 <frame_dummy>:
 80191b4:	b508      	push	{r3, lr}
 80191b6:	4b03      	ldr	r3, [pc, #12]	; (80191c4 <frame_dummy+0x10>)
 80191b8:	b11b      	cbz	r3, 80191c2 <frame_dummy+0xe>
 80191ba:	4903      	ldr	r1, [pc, #12]	; (80191c8 <frame_dummy+0x14>)
 80191bc:	4803      	ldr	r0, [pc, #12]	; (80191cc <frame_dummy+0x18>)
 80191be:	f3af 8000 	nop.w
 80191c2:	bd08      	pop	{r3, pc}
 80191c4:	00000000 	.word	0x00000000
 80191c8:	20000208 	.word	0x20000208
 80191cc:	08023bfc 	.word	0x08023bfc

080191d0 <memchr>:
 80191d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80191d4:	2a10      	cmp	r2, #16
 80191d6:	db2b      	blt.n	8019230 <memchr+0x60>
 80191d8:	f010 0f07 	tst.w	r0, #7
 80191dc:	d008      	beq.n	80191f0 <memchr+0x20>
 80191de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80191e2:	3a01      	subs	r2, #1
 80191e4:	428b      	cmp	r3, r1
 80191e6:	d02d      	beq.n	8019244 <memchr+0x74>
 80191e8:	f010 0f07 	tst.w	r0, #7
 80191ec:	b342      	cbz	r2, 8019240 <memchr+0x70>
 80191ee:	d1f6      	bne.n	80191de <memchr+0xe>
 80191f0:	b4f0      	push	{r4, r5, r6, r7}
 80191f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80191f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80191fa:	f022 0407 	bic.w	r4, r2, #7
 80191fe:	f07f 0700 	mvns.w	r7, #0
 8019202:	2300      	movs	r3, #0
 8019204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8019208:	3c08      	subs	r4, #8
 801920a:	ea85 0501 	eor.w	r5, r5, r1
 801920e:	ea86 0601 	eor.w	r6, r6, r1
 8019212:	fa85 f547 	uadd8	r5, r5, r7
 8019216:	faa3 f587 	sel	r5, r3, r7
 801921a:	fa86 f647 	uadd8	r6, r6, r7
 801921e:	faa5 f687 	sel	r6, r5, r7
 8019222:	b98e      	cbnz	r6, 8019248 <memchr+0x78>
 8019224:	d1ee      	bne.n	8019204 <memchr+0x34>
 8019226:	bcf0      	pop	{r4, r5, r6, r7}
 8019228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801922c:	f002 0207 	and.w	r2, r2, #7
 8019230:	b132      	cbz	r2, 8019240 <memchr+0x70>
 8019232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019236:	3a01      	subs	r2, #1
 8019238:	ea83 0301 	eor.w	r3, r3, r1
 801923c:	b113      	cbz	r3, 8019244 <memchr+0x74>
 801923e:	d1f8      	bne.n	8019232 <memchr+0x62>
 8019240:	2000      	movs	r0, #0
 8019242:	4770      	bx	lr
 8019244:	3801      	subs	r0, #1
 8019246:	4770      	bx	lr
 8019248:	2d00      	cmp	r5, #0
 801924a:	bf06      	itte	eq
 801924c:	4635      	moveq	r5, r6
 801924e:	3803      	subeq	r0, #3
 8019250:	3807      	subne	r0, #7
 8019252:	f015 0f01 	tst.w	r5, #1
 8019256:	d107      	bne.n	8019268 <memchr+0x98>
 8019258:	3001      	adds	r0, #1
 801925a:	f415 7f80 	tst.w	r5, #256	; 0x100
 801925e:	bf02      	ittt	eq
 8019260:	3001      	addeq	r0, #1
 8019262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8019266:	3001      	addeq	r0, #1
 8019268:	bcf0      	pop	{r4, r5, r6, r7}
 801926a:	3801      	subs	r0, #1
 801926c:	4770      	bx	lr
 801926e:	bf00      	nop

08019270 <strlen>:
 8019270:	4603      	mov	r3, r0
 8019272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019276:	2a00      	cmp	r2, #0
 8019278:	d1fb      	bne.n	8019272 <strlen+0x2>
 801927a:	1a18      	subs	r0, r3, r0
 801927c:	3801      	subs	r0, #1
 801927e:	4770      	bx	lr

08019280 <__aeabi_drsub>:
 8019280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8019284:	e002      	b.n	801928c <__adddf3>
 8019286:	bf00      	nop

08019288 <__aeabi_dsub>:
 8019288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0801928c <__adddf3>:
 801928c:	b530      	push	{r4, r5, lr}
 801928e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8019292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8019296:	ea94 0f05 	teq	r4, r5
 801929a:	bf08      	it	eq
 801929c:	ea90 0f02 	teqeq	r0, r2
 80192a0:	bf1f      	itttt	ne
 80192a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80192a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80192aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80192ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80192b2:	f000 80e2 	beq.w	801947a <__adddf3+0x1ee>
 80192b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80192ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80192be:	bfb8      	it	lt
 80192c0:	426d      	neglt	r5, r5
 80192c2:	dd0c      	ble.n	80192de <__adddf3+0x52>
 80192c4:	442c      	add	r4, r5
 80192c6:	ea80 0202 	eor.w	r2, r0, r2
 80192ca:	ea81 0303 	eor.w	r3, r1, r3
 80192ce:	ea82 0000 	eor.w	r0, r2, r0
 80192d2:	ea83 0101 	eor.w	r1, r3, r1
 80192d6:	ea80 0202 	eor.w	r2, r0, r2
 80192da:	ea81 0303 	eor.w	r3, r1, r3
 80192de:	2d36      	cmp	r5, #54	; 0x36
 80192e0:	bf88      	it	hi
 80192e2:	bd30      	pophi	{r4, r5, pc}
 80192e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80192e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80192ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80192f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80192f4:	d002      	beq.n	80192fc <__adddf3+0x70>
 80192f6:	4240      	negs	r0, r0
 80192f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80192fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8019300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8019304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8019308:	d002      	beq.n	8019310 <__adddf3+0x84>
 801930a:	4252      	negs	r2, r2
 801930c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8019310:	ea94 0f05 	teq	r4, r5
 8019314:	f000 80a7 	beq.w	8019466 <__adddf3+0x1da>
 8019318:	f1a4 0401 	sub.w	r4, r4, #1
 801931c:	f1d5 0e20 	rsbs	lr, r5, #32
 8019320:	db0d      	blt.n	801933e <__adddf3+0xb2>
 8019322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8019326:	fa22 f205 	lsr.w	r2, r2, r5
 801932a:	1880      	adds	r0, r0, r2
 801932c:	f141 0100 	adc.w	r1, r1, #0
 8019330:	fa03 f20e 	lsl.w	r2, r3, lr
 8019334:	1880      	adds	r0, r0, r2
 8019336:	fa43 f305 	asr.w	r3, r3, r5
 801933a:	4159      	adcs	r1, r3
 801933c:	e00e      	b.n	801935c <__adddf3+0xd0>
 801933e:	f1a5 0520 	sub.w	r5, r5, #32
 8019342:	f10e 0e20 	add.w	lr, lr, #32
 8019346:	2a01      	cmp	r2, #1
 8019348:	fa03 fc0e 	lsl.w	ip, r3, lr
 801934c:	bf28      	it	cs
 801934e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8019352:	fa43 f305 	asr.w	r3, r3, r5
 8019356:	18c0      	adds	r0, r0, r3
 8019358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801935c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8019360:	d507      	bpl.n	8019372 <__adddf3+0xe6>
 8019362:	f04f 0e00 	mov.w	lr, #0
 8019366:	f1dc 0c00 	rsbs	ip, ip, #0
 801936a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801936e:	eb6e 0101 	sbc.w	r1, lr, r1
 8019372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8019376:	d31b      	bcc.n	80193b0 <__adddf3+0x124>
 8019378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 801937c:	d30c      	bcc.n	8019398 <__adddf3+0x10c>
 801937e:	0849      	lsrs	r1, r1, #1
 8019380:	ea5f 0030 	movs.w	r0, r0, rrx
 8019384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8019388:	f104 0401 	add.w	r4, r4, #1
 801938c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8019390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8019394:	f080 809a 	bcs.w	80194cc <__adddf3+0x240>
 8019398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 801939c:	bf08      	it	eq
 801939e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80193a2:	f150 0000 	adcs.w	r0, r0, #0
 80193a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80193aa:	ea41 0105 	orr.w	r1, r1, r5
 80193ae:	bd30      	pop	{r4, r5, pc}
 80193b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80193b4:	4140      	adcs	r0, r0
 80193b6:	eb41 0101 	adc.w	r1, r1, r1
 80193ba:	3c01      	subs	r4, #1
 80193bc:	bf28      	it	cs
 80193be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80193c2:	d2e9      	bcs.n	8019398 <__adddf3+0x10c>
 80193c4:	f091 0f00 	teq	r1, #0
 80193c8:	bf04      	itt	eq
 80193ca:	4601      	moveq	r1, r0
 80193cc:	2000      	moveq	r0, #0
 80193ce:	fab1 f381 	clz	r3, r1
 80193d2:	bf08      	it	eq
 80193d4:	3320      	addeq	r3, #32
 80193d6:	f1a3 030b 	sub.w	r3, r3, #11
 80193da:	f1b3 0220 	subs.w	r2, r3, #32
 80193de:	da0c      	bge.n	80193fa <__adddf3+0x16e>
 80193e0:	320c      	adds	r2, #12
 80193e2:	dd08      	ble.n	80193f6 <__adddf3+0x16a>
 80193e4:	f102 0c14 	add.w	ip, r2, #20
 80193e8:	f1c2 020c 	rsb	r2, r2, #12
 80193ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80193f0:	fa21 f102 	lsr.w	r1, r1, r2
 80193f4:	e00c      	b.n	8019410 <__adddf3+0x184>
 80193f6:	f102 0214 	add.w	r2, r2, #20
 80193fa:	bfd8      	it	le
 80193fc:	f1c2 0c20 	rsble	ip, r2, #32
 8019400:	fa01 f102 	lsl.w	r1, r1, r2
 8019404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8019408:	bfdc      	itt	le
 801940a:	ea41 010c 	orrle.w	r1, r1, ip
 801940e:	4090      	lslle	r0, r2
 8019410:	1ae4      	subs	r4, r4, r3
 8019412:	bfa2      	ittt	ge
 8019414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8019418:	4329      	orrge	r1, r5
 801941a:	bd30      	popge	{r4, r5, pc}
 801941c:	ea6f 0404 	mvn.w	r4, r4
 8019420:	3c1f      	subs	r4, #31
 8019422:	da1c      	bge.n	801945e <__adddf3+0x1d2>
 8019424:	340c      	adds	r4, #12
 8019426:	dc0e      	bgt.n	8019446 <__adddf3+0x1ba>
 8019428:	f104 0414 	add.w	r4, r4, #20
 801942c:	f1c4 0220 	rsb	r2, r4, #32
 8019430:	fa20 f004 	lsr.w	r0, r0, r4
 8019434:	fa01 f302 	lsl.w	r3, r1, r2
 8019438:	ea40 0003 	orr.w	r0, r0, r3
 801943c:	fa21 f304 	lsr.w	r3, r1, r4
 8019440:	ea45 0103 	orr.w	r1, r5, r3
 8019444:	bd30      	pop	{r4, r5, pc}
 8019446:	f1c4 040c 	rsb	r4, r4, #12
 801944a:	f1c4 0220 	rsb	r2, r4, #32
 801944e:	fa20 f002 	lsr.w	r0, r0, r2
 8019452:	fa01 f304 	lsl.w	r3, r1, r4
 8019456:	ea40 0003 	orr.w	r0, r0, r3
 801945a:	4629      	mov	r1, r5
 801945c:	bd30      	pop	{r4, r5, pc}
 801945e:	fa21 f004 	lsr.w	r0, r1, r4
 8019462:	4629      	mov	r1, r5
 8019464:	bd30      	pop	{r4, r5, pc}
 8019466:	f094 0f00 	teq	r4, #0
 801946a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 801946e:	bf06      	itte	eq
 8019470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8019474:	3401      	addeq	r4, #1
 8019476:	3d01      	subne	r5, #1
 8019478:	e74e      	b.n	8019318 <__adddf3+0x8c>
 801947a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801947e:	bf18      	it	ne
 8019480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8019484:	d029      	beq.n	80194da <__adddf3+0x24e>
 8019486:	ea94 0f05 	teq	r4, r5
 801948a:	bf08      	it	eq
 801948c:	ea90 0f02 	teqeq	r0, r2
 8019490:	d005      	beq.n	801949e <__adddf3+0x212>
 8019492:	ea54 0c00 	orrs.w	ip, r4, r0
 8019496:	bf04      	itt	eq
 8019498:	4619      	moveq	r1, r3
 801949a:	4610      	moveq	r0, r2
 801949c:	bd30      	pop	{r4, r5, pc}
 801949e:	ea91 0f03 	teq	r1, r3
 80194a2:	bf1e      	ittt	ne
 80194a4:	2100      	movne	r1, #0
 80194a6:	2000      	movne	r0, #0
 80194a8:	bd30      	popne	{r4, r5, pc}
 80194aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80194ae:	d105      	bne.n	80194bc <__adddf3+0x230>
 80194b0:	0040      	lsls	r0, r0, #1
 80194b2:	4149      	adcs	r1, r1
 80194b4:	bf28      	it	cs
 80194b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80194ba:	bd30      	pop	{r4, r5, pc}
 80194bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80194c0:	bf3c      	itt	cc
 80194c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80194c6:	bd30      	popcc	{r4, r5, pc}
 80194c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80194cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80194d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80194d4:	f04f 0000 	mov.w	r0, #0
 80194d8:	bd30      	pop	{r4, r5, pc}
 80194da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80194de:	bf1a      	itte	ne
 80194e0:	4619      	movne	r1, r3
 80194e2:	4610      	movne	r0, r2
 80194e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80194e8:	bf1c      	itt	ne
 80194ea:	460b      	movne	r3, r1
 80194ec:	4602      	movne	r2, r0
 80194ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80194f2:	bf06      	itte	eq
 80194f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80194f8:	ea91 0f03 	teqeq	r1, r3
 80194fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8019500:	bd30      	pop	{r4, r5, pc}
 8019502:	bf00      	nop

08019504 <__aeabi_ui2d>:
 8019504:	f090 0f00 	teq	r0, #0
 8019508:	bf04      	itt	eq
 801950a:	2100      	moveq	r1, #0
 801950c:	4770      	bxeq	lr
 801950e:	b530      	push	{r4, r5, lr}
 8019510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8019514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8019518:	f04f 0500 	mov.w	r5, #0
 801951c:	f04f 0100 	mov.w	r1, #0
 8019520:	e750      	b.n	80193c4 <__adddf3+0x138>
 8019522:	bf00      	nop

08019524 <__aeabi_i2d>:
 8019524:	f090 0f00 	teq	r0, #0
 8019528:	bf04      	itt	eq
 801952a:	2100      	moveq	r1, #0
 801952c:	4770      	bxeq	lr
 801952e:	b530      	push	{r4, r5, lr}
 8019530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8019534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8019538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 801953c:	bf48      	it	mi
 801953e:	4240      	negmi	r0, r0
 8019540:	f04f 0100 	mov.w	r1, #0
 8019544:	e73e      	b.n	80193c4 <__adddf3+0x138>
 8019546:	bf00      	nop

08019548 <__aeabi_f2d>:
 8019548:	0042      	lsls	r2, r0, #1
 801954a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801954e:	ea4f 0131 	mov.w	r1, r1, rrx
 8019552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8019556:	bf1f      	itttt	ne
 8019558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 801955c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8019560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8019564:	4770      	bxne	lr
 8019566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 801956a:	bf08      	it	eq
 801956c:	4770      	bxeq	lr
 801956e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8019572:	bf04      	itt	eq
 8019574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8019578:	4770      	bxeq	lr
 801957a:	b530      	push	{r4, r5, lr}
 801957c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8019580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8019584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8019588:	e71c      	b.n	80193c4 <__adddf3+0x138>
 801958a:	bf00      	nop

0801958c <__aeabi_ul2d>:
 801958c:	ea50 0201 	orrs.w	r2, r0, r1
 8019590:	bf08      	it	eq
 8019592:	4770      	bxeq	lr
 8019594:	b530      	push	{r4, r5, lr}
 8019596:	f04f 0500 	mov.w	r5, #0
 801959a:	e00a      	b.n	80195b2 <__aeabi_l2d+0x16>

0801959c <__aeabi_l2d>:
 801959c:	ea50 0201 	orrs.w	r2, r0, r1
 80195a0:	bf08      	it	eq
 80195a2:	4770      	bxeq	lr
 80195a4:	b530      	push	{r4, r5, lr}
 80195a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80195aa:	d502      	bpl.n	80195b2 <__aeabi_l2d+0x16>
 80195ac:	4240      	negs	r0, r0
 80195ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80195b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80195b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80195ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80195be:	f43f aed8 	beq.w	8019372 <__adddf3+0xe6>
 80195c2:	f04f 0203 	mov.w	r2, #3
 80195c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80195ca:	bf18      	it	ne
 80195cc:	3203      	addne	r2, #3
 80195ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80195d2:	bf18      	it	ne
 80195d4:	3203      	addne	r2, #3
 80195d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80195da:	f1c2 0320 	rsb	r3, r2, #32
 80195de:	fa00 fc03 	lsl.w	ip, r0, r3
 80195e2:	fa20 f002 	lsr.w	r0, r0, r2
 80195e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80195ea:	ea40 000e 	orr.w	r0, r0, lr
 80195ee:	fa21 f102 	lsr.w	r1, r1, r2
 80195f2:	4414      	add	r4, r2
 80195f4:	e6bd      	b.n	8019372 <__adddf3+0xe6>
 80195f6:	bf00      	nop

080195f8 <__aeabi_dmul>:
 80195f8:	b570      	push	{r4, r5, r6, lr}
 80195fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80195fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8019602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8019606:	bf1d      	ittte	ne
 8019608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801960c:	ea94 0f0c 	teqne	r4, ip
 8019610:	ea95 0f0c 	teqne	r5, ip
 8019614:	f000 f8de 	bleq	80197d4 <__aeabi_dmul+0x1dc>
 8019618:	442c      	add	r4, r5
 801961a:	ea81 0603 	eor.w	r6, r1, r3
 801961e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8019622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8019626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801962a:	bf18      	it	ne
 801962c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8019630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8019634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019638:	d038      	beq.n	80196ac <__aeabi_dmul+0xb4>
 801963a:	fba0 ce02 	umull	ip, lr, r0, r2
 801963e:	f04f 0500 	mov.w	r5, #0
 8019642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8019646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 801964a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801964e:	f04f 0600 	mov.w	r6, #0
 8019652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8019656:	f09c 0f00 	teq	ip, #0
 801965a:	bf18      	it	ne
 801965c:	f04e 0e01 	orrne.w	lr, lr, #1
 8019660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8019664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8019668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 801966c:	d204      	bcs.n	8019678 <__aeabi_dmul+0x80>
 801966e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8019672:	416d      	adcs	r5, r5
 8019674:	eb46 0606 	adc.w	r6, r6, r6
 8019678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 801967c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8019680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8019684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8019688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 801968c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8019690:	bf88      	it	hi
 8019692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8019696:	d81e      	bhi.n	80196d6 <__aeabi_dmul+0xde>
 8019698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 801969c:	bf08      	it	eq
 801969e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80196a2:	f150 0000 	adcs.w	r0, r0, #0
 80196a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80196aa:	bd70      	pop	{r4, r5, r6, pc}
 80196ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80196b0:	ea46 0101 	orr.w	r1, r6, r1
 80196b4:	ea40 0002 	orr.w	r0, r0, r2
 80196b8:	ea81 0103 	eor.w	r1, r1, r3
 80196bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80196c0:	bfc2      	ittt	gt
 80196c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80196c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80196ca:	bd70      	popgt	{r4, r5, r6, pc}
 80196cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80196d0:	f04f 0e00 	mov.w	lr, #0
 80196d4:	3c01      	subs	r4, #1
 80196d6:	f300 80ab 	bgt.w	8019830 <__aeabi_dmul+0x238>
 80196da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80196de:	bfde      	ittt	le
 80196e0:	2000      	movle	r0, #0
 80196e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80196e6:	bd70      	pople	{r4, r5, r6, pc}
 80196e8:	f1c4 0400 	rsb	r4, r4, #0
 80196ec:	3c20      	subs	r4, #32
 80196ee:	da35      	bge.n	801975c <__aeabi_dmul+0x164>
 80196f0:	340c      	adds	r4, #12
 80196f2:	dc1b      	bgt.n	801972c <__aeabi_dmul+0x134>
 80196f4:	f104 0414 	add.w	r4, r4, #20
 80196f8:	f1c4 0520 	rsb	r5, r4, #32
 80196fc:	fa00 f305 	lsl.w	r3, r0, r5
 8019700:	fa20 f004 	lsr.w	r0, r0, r4
 8019704:	fa01 f205 	lsl.w	r2, r1, r5
 8019708:	ea40 0002 	orr.w	r0, r0, r2
 801970c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8019710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8019714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8019718:	fa21 f604 	lsr.w	r6, r1, r4
 801971c:	eb42 0106 	adc.w	r1, r2, r6
 8019720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8019724:	bf08      	it	eq
 8019726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801972a:	bd70      	pop	{r4, r5, r6, pc}
 801972c:	f1c4 040c 	rsb	r4, r4, #12
 8019730:	f1c4 0520 	rsb	r5, r4, #32
 8019734:	fa00 f304 	lsl.w	r3, r0, r4
 8019738:	fa20 f005 	lsr.w	r0, r0, r5
 801973c:	fa01 f204 	lsl.w	r2, r1, r4
 8019740:	ea40 0002 	orr.w	r0, r0, r2
 8019744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8019748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801974c:	f141 0100 	adc.w	r1, r1, #0
 8019750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8019754:	bf08      	it	eq
 8019756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801975a:	bd70      	pop	{r4, r5, r6, pc}
 801975c:	f1c4 0520 	rsb	r5, r4, #32
 8019760:	fa00 f205 	lsl.w	r2, r0, r5
 8019764:	ea4e 0e02 	orr.w	lr, lr, r2
 8019768:	fa20 f304 	lsr.w	r3, r0, r4
 801976c:	fa01 f205 	lsl.w	r2, r1, r5
 8019770:	ea43 0302 	orr.w	r3, r3, r2
 8019774:	fa21 f004 	lsr.w	r0, r1, r4
 8019778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801977c:	fa21 f204 	lsr.w	r2, r1, r4
 8019780:	ea20 0002 	bic.w	r0, r0, r2
 8019784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8019788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 801978c:	bf08      	it	eq
 801978e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8019792:	bd70      	pop	{r4, r5, r6, pc}
 8019794:	f094 0f00 	teq	r4, #0
 8019798:	d10f      	bne.n	80197ba <__aeabi_dmul+0x1c2>
 801979a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 801979e:	0040      	lsls	r0, r0, #1
 80197a0:	eb41 0101 	adc.w	r1, r1, r1
 80197a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80197a8:	bf08      	it	eq
 80197aa:	3c01      	subeq	r4, #1
 80197ac:	d0f7      	beq.n	801979e <__aeabi_dmul+0x1a6>
 80197ae:	ea41 0106 	orr.w	r1, r1, r6
 80197b2:	f095 0f00 	teq	r5, #0
 80197b6:	bf18      	it	ne
 80197b8:	4770      	bxne	lr
 80197ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80197be:	0052      	lsls	r2, r2, #1
 80197c0:	eb43 0303 	adc.w	r3, r3, r3
 80197c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80197c8:	bf08      	it	eq
 80197ca:	3d01      	subeq	r5, #1
 80197cc:	d0f7      	beq.n	80197be <__aeabi_dmul+0x1c6>
 80197ce:	ea43 0306 	orr.w	r3, r3, r6
 80197d2:	4770      	bx	lr
 80197d4:	ea94 0f0c 	teq	r4, ip
 80197d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80197dc:	bf18      	it	ne
 80197de:	ea95 0f0c 	teqne	r5, ip
 80197e2:	d00c      	beq.n	80197fe <__aeabi_dmul+0x206>
 80197e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80197e8:	bf18      	it	ne
 80197ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80197ee:	d1d1      	bne.n	8019794 <__aeabi_dmul+0x19c>
 80197f0:	ea81 0103 	eor.w	r1, r1, r3
 80197f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80197f8:	f04f 0000 	mov.w	r0, #0
 80197fc:	bd70      	pop	{r4, r5, r6, pc}
 80197fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8019802:	bf06      	itte	eq
 8019804:	4610      	moveq	r0, r2
 8019806:	4619      	moveq	r1, r3
 8019808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801980c:	d019      	beq.n	8019842 <__aeabi_dmul+0x24a>
 801980e:	ea94 0f0c 	teq	r4, ip
 8019812:	d102      	bne.n	801981a <__aeabi_dmul+0x222>
 8019814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8019818:	d113      	bne.n	8019842 <__aeabi_dmul+0x24a>
 801981a:	ea95 0f0c 	teq	r5, ip
 801981e:	d105      	bne.n	801982c <__aeabi_dmul+0x234>
 8019820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8019824:	bf1c      	itt	ne
 8019826:	4610      	movne	r0, r2
 8019828:	4619      	movne	r1, r3
 801982a:	d10a      	bne.n	8019842 <__aeabi_dmul+0x24a>
 801982c:	ea81 0103 	eor.w	r1, r1, r3
 8019830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8019834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8019838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801983c:	f04f 0000 	mov.w	r0, #0
 8019840:	bd70      	pop	{r4, r5, r6, pc}
 8019842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8019846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 801984a:	bd70      	pop	{r4, r5, r6, pc}

0801984c <__aeabi_ddiv>:
 801984c:	b570      	push	{r4, r5, r6, lr}
 801984e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8019852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8019856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801985a:	bf1d      	ittte	ne
 801985c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8019860:	ea94 0f0c 	teqne	r4, ip
 8019864:	ea95 0f0c 	teqne	r5, ip
 8019868:	f000 f8a7 	bleq	80199ba <__aeabi_ddiv+0x16e>
 801986c:	eba4 0405 	sub.w	r4, r4, r5
 8019870:	ea81 0e03 	eor.w	lr, r1, r3
 8019874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8019878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801987c:	f000 8088 	beq.w	8019990 <__aeabi_ddiv+0x144>
 8019880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8019884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8019888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 801988c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8019890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8019894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8019898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 801989c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80198a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80198a4:	429d      	cmp	r5, r3
 80198a6:	bf08      	it	eq
 80198a8:	4296      	cmpeq	r6, r2
 80198aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80198ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80198b2:	d202      	bcs.n	80198ba <__aeabi_ddiv+0x6e>
 80198b4:	085b      	lsrs	r3, r3, #1
 80198b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80198ba:	1ab6      	subs	r6, r6, r2
 80198bc:	eb65 0503 	sbc.w	r5, r5, r3
 80198c0:	085b      	lsrs	r3, r3, #1
 80198c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80198c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80198ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80198ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80198d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80198d6:	bf22      	ittt	cs
 80198d8:	1ab6      	subcs	r6, r6, r2
 80198da:	4675      	movcs	r5, lr
 80198dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80198e0:	085b      	lsrs	r3, r3, #1
 80198e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80198e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80198ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80198ee:	bf22      	ittt	cs
 80198f0:	1ab6      	subcs	r6, r6, r2
 80198f2:	4675      	movcs	r5, lr
 80198f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80198f8:	085b      	lsrs	r3, r3, #1
 80198fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80198fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8019902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8019906:	bf22      	ittt	cs
 8019908:	1ab6      	subcs	r6, r6, r2
 801990a:	4675      	movcs	r5, lr
 801990c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8019910:	085b      	lsrs	r3, r3, #1
 8019912:	ea4f 0232 	mov.w	r2, r2, rrx
 8019916:	ebb6 0e02 	subs.w	lr, r6, r2
 801991a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801991e:	bf22      	ittt	cs
 8019920:	1ab6      	subcs	r6, r6, r2
 8019922:	4675      	movcs	r5, lr
 8019924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8019928:	ea55 0e06 	orrs.w	lr, r5, r6
 801992c:	d018      	beq.n	8019960 <__aeabi_ddiv+0x114>
 801992e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8019932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8019936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801993a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801993e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8019942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8019946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801994a:	d1c0      	bne.n	80198ce <__aeabi_ddiv+0x82>
 801994c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8019950:	d10b      	bne.n	801996a <__aeabi_ddiv+0x11e>
 8019952:	ea41 0100 	orr.w	r1, r1, r0
 8019956:	f04f 0000 	mov.w	r0, #0
 801995a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 801995e:	e7b6      	b.n	80198ce <__aeabi_ddiv+0x82>
 8019960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8019964:	bf04      	itt	eq
 8019966:	4301      	orreq	r1, r0
 8019968:	2000      	moveq	r0, #0
 801996a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 801996e:	bf88      	it	hi
 8019970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8019974:	f63f aeaf 	bhi.w	80196d6 <__aeabi_dmul+0xde>
 8019978:	ebb5 0c03 	subs.w	ip, r5, r3
 801997c:	bf04      	itt	eq
 801997e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8019982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8019986:	f150 0000 	adcs.w	r0, r0, #0
 801998a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801998e:	bd70      	pop	{r4, r5, r6, pc}
 8019990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8019994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8019998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 801999c:	bfc2      	ittt	gt
 801999e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80199a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80199a6:	bd70      	popgt	{r4, r5, r6, pc}
 80199a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80199ac:	f04f 0e00 	mov.w	lr, #0
 80199b0:	3c01      	subs	r4, #1
 80199b2:	e690      	b.n	80196d6 <__aeabi_dmul+0xde>
 80199b4:	ea45 0e06 	orr.w	lr, r5, r6
 80199b8:	e68d      	b.n	80196d6 <__aeabi_dmul+0xde>
 80199ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80199be:	ea94 0f0c 	teq	r4, ip
 80199c2:	bf08      	it	eq
 80199c4:	ea95 0f0c 	teqeq	r5, ip
 80199c8:	f43f af3b 	beq.w	8019842 <__aeabi_dmul+0x24a>
 80199cc:	ea94 0f0c 	teq	r4, ip
 80199d0:	d10a      	bne.n	80199e8 <__aeabi_ddiv+0x19c>
 80199d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80199d6:	f47f af34 	bne.w	8019842 <__aeabi_dmul+0x24a>
 80199da:	ea95 0f0c 	teq	r5, ip
 80199de:	f47f af25 	bne.w	801982c <__aeabi_dmul+0x234>
 80199e2:	4610      	mov	r0, r2
 80199e4:	4619      	mov	r1, r3
 80199e6:	e72c      	b.n	8019842 <__aeabi_dmul+0x24a>
 80199e8:	ea95 0f0c 	teq	r5, ip
 80199ec:	d106      	bne.n	80199fc <__aeabi_ddiv+0x1b0>
 80199ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80199f2:	f43f aefd 	beq.w	80197f0 <__aeabi_dmul+0x1f8>
 80199f6:	4610      	mov	r0, r2
 80199f8:	4619      	mov	r1, r3
 80199fa:	e722      	b.n	8019842 <__aeabi_dmul+0x24a>
 80199fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8019a00:	bf18      	it	ne
 8019a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8019a06:	f47f aec5 	bne.w	8019794 <__aeabi_dmul+0x19c>
 8019a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8019a0e:	f47f af0d 	bne.w	801982c <__aeabi_dmul+0x234>
 8019a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8019a16:	f47f aeeb 	bne.w	80197f0 <__aeabi_dmul+0x1f8>
 8019a1a:	e712      	b.n	8019842 <__aeabi_dmul+0x24a>

08019a1c <__gedf2>:
 8019a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8019a20:	e006      	b.n	8019a30 <__cmpdf2+0x4>
 8019a22:	bf00      	nop

08019a24 <__ledf2>:
 8019a24:	f04f 0c01 	mov.w	ip, #1
 8019a28:	e002      	b.n	8019a30 <__cmpdf2+0x4>
 8019a2a:	bf00      	nop

08019a2c <__cmpdf2>:
 8019a2c:	f04f 0c01 	mov.w	ip, #1
 8019a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8019a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8019a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8019a40:	bf18      	it	ne
 8019a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8019a46:	d01b      	beq.n	8019a80 <__cmpdf2+0x54>
 8019a48:	b001      	add	sp, #4
 8019a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8019a4e:	bf0c      	ite	eq
 8019a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8019a54:	ea91 0f03 	teqne	r1, r3
 8019a58:	bf02      	ittt	eq
 8019a5a:	ea90 0f02 	teqeq	r0, r2
 8019a5e:	2000      	moveq	r0, #0
 8019a60:	4770      	bxeq	lr
 8019a62:	f110 0f00 	cmn.w	r0, #0
 8019a66:	ea91 0f03 	teq	r1, r3
 8019a6a:	bf58      	it	pl
 8019a6c:	4299      	cmppl	r1, r3
 8019a6e:	bf08      	it	eq
 8019a70:	4290      	cmpeq	r0, r2
 8019a72:	bf2c      	ite	cs
 8019a74:	17d8      	asrcs	r0, r3, #31
 8019a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8019a7a:	f040 0001 	orr.w	r0, r0, #1
 8019a7e:	4770      	bx	lr
 8019a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8019a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019a88:	d102      	bne.n	8019a90 <__cmpdf2+0x64>
 8019a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8019a8e:	d107      	bne.n	8019aa0 <__cmpdf2+0x74>
 8019a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8019a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019a98:	d1d6      	bne.n	8019a48 <__cmpdf2+0x1c>
 8019a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8019a9e:	d0d3      	beq.n	8019a48 <__cmpdf2+0x1c>
 8019aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8019aa4:	4770      	bx	lr
 8019aa6:	bf00      	nop

08019aa8 <__aeabi_cdrcmple>:
 8019aa8:	4684      	mov	ip, r0
 8019aaa:	4610      	mov	r0, r2
 8019aac:	4662      	mov	r2, ip
 8019aae:	468c      	mov	ip, r1
 8019ab0:	4619      	mov	r1, r3
 8019ab2:	4663      	mov	r3, ip
 8019ab4:	e000      	b.n	8019ab8 <__aeabi_cdcmpeq>
 8019ab6:	bf00      	nop

08019ab8 <__aeabi_cdcmpeq>:
 8019ab8:	b501      	push	{r0, lr}
 8019aba:	f7ff ffb7 	bl	8019a2c <__cmpdf2>
 8019abe:	2800      	cmp	r0, #0
 8019ac0:	bf48      	it	mi
 8019ac2:	f110 0f00 	cmnmi.w	r0, #0
 8019ac6:	bd01      	pop	{r0, pc}

08019ac8 <__aeabi_dcmpeq>:
 8019ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8019acc:	f7ff fff4 	bl	8019ab8 <__aeabi_cdcmpeq>
 8019ad0:	bf0c      	ite	eq
 8019ad2:	2001      	moveq	r0, #1
 8019ad4:	2000      	movne	r0, #0
 8019ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8019ada:	bf00      	nop

08019adc <__aeabi_dcmplt>:
 8019adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8019ae0:	f7ff ffea 	bl	8019ab8 <__aeabi_cdcmpeq>
 8019ae4:	bf34      	ite	cc
 8019ae6:	2001      	movcc	r0, #1
 8019ae8:	2000      	movcs	r0, #0
 8019aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8019aee:	bf00      	nop

08019af0 <__aeabi_dcmple>:
 8019af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8019af4:	f7ff ffe0 	bl	8019ab8 <__aeabi_cdcmpeq>
 8019af8:	bf94      	ite	ls
 8019afa:	2001      	movls	r0, #1
 8019afc:	2000      	movhi	r0, #0
 8019afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8019b02:	bf00      	nop

08019b04 <__aeabi_dcmpge>:
 8019b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8019b08:	f7ff ffce 	bl	8019aa8 <__aeabi_cdrcmple>
 8019b0c:	bf94      	ite	ls
 8019b0e:	2001      	movls	r0, #1
 8019b10:	2000      	movhi	r0, #0
 8019b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8019b16:	bf00      	nop

08019b18 <__aeabi_dcmpgt>:
 8019b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8019b1c:	f7ff ffc4 	bl	8019aa8 <__aeabi_cdrcmple>
 8019b20:	bf34      	ite	cc
 8019b22:	2001      	movcc	r0, #1
 8019b24:	2000      	movcs	r0, #0
 8019b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8019b2a:	bf00      	nop

08019b2c <__aeabi_dcmpun>:
 8019b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8019b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019b34:	d102      	bne.n	8019b3c <__aeabi_dcmpun+0x10>
 8019b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8019b3a:	d10a      	bne.n	8019b52 <__aeabi_dcmpun+0x26>
 8019b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8019b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019b44:	d102      	bne.n	8019b4c <__aeabi_dcmpun+0x20>
 8019b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8019b4a:	d102      	bne.n	8019b52 <__aeabi_dcmpun+0x26>
 8019b4c:	f04f 0000 	mov.w	r0, #0
 8019b50:	4770      	bx	lr
 8019b52:	f04f 0001 	mov.w	r0, #1
 8019b56:	4770      	bx	lr

08019b58 <__aeabi_d2iz>:
 8019b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8019b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8019b60:	d215      	bcs.n	8019b8e <__aeabi_d2iz+0x36>
 8019b62:	d511      	bpl.n	8019b88 <__aeabi_d2iz+0x30>
 8019b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8019b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8019b6c:	d912      	bls.n	8019b94 <__aeabi_d2iz+0x3c>
 8019b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8019b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8019b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8019b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8019b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8019b82:	bf18      	it	ne
 8019b84:	4240      	negne	r0, r0
 8019b86:	4770      	bx	lr
 8019b88:	f04f 0000 	mov.w	r0, #0
 8019b8c:	4770      	bx	lr
 8019b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8019b92:	d105      	bne.n	8019ba0 <__aeabi_d2iz+0x48>
 8019b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8019b98:	bf08      	it	eq
 8019b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8019b9e:	4770      	bx	lr
 8019ba0:	f04f 0000 	mov.w	r0, #0
 8019ba4:	4770      	bx	lr
 8019ba6:	bf00      	nop

08019ba8 <__aeabi_d2uiz>:
 8019ba8:	004a      	lsls	r2, r1, #1
 8019baa:	d211      	bcs.n	8019bd0 <__aeabi_d2uiz+0x28>
 8019bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8019bb0:	d211      	bcs.n	8019bd6 <__aeabi_d2uiz+0x2e>
 8019bb2:	d50d      	bpl.n	8019bd0 <__aeabi_d2uiz+0x28>
 8019bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8019bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8019bbc:	d40e      	bmi.n	8019bdc <__aeabi_d2uiz+0x34>
 8019bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8019bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8019bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8019bca:	fa23 f002 	lsr.w	r0, r3, r2
 8019bce:	4770      	bx	lr
 8019bd0:	f04f 0000 	mov.w	r0, #0
 8019bd4:	4770      	bx	lr
 8019bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8019bda:	d102      	bne.n	8019be2 <__aeabi_d2uiz+0x3a>
 8019bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8019be0:	4770      	bx	lr
 8019be2:	f04f 0000 	mov.w	r0, #0
 8019be6:	4770      	bx	lr

08019be8 <__aeabi_d2f>:
 8019be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8019bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8019bf0:	bf24      	itt	cs
 8019bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8019bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8019bfa:	d90d      	bls.n	8019c18 <__aeabi_d2f+0x30>
 8019bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8019c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8019c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8019c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8019c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8019c10:	bf08      	it	eq
 8019c12:	f020 0001 	biceq.w	r0, r0, #1
 8019c16:	4770      	bx	lr
 8019c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8019c1c:	d121      	bne.n	8019c62 <__aeabi_d2f+0x7a>
 8019c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8019c22:	bfbc      	itt	lt
 8019c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8019c28:	4770      	bxlt	lr
 8019c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8019c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8019c32:	f1c2 0218 	rsb	r2, r2, #24
 8019c36:	f1c2 0c20 	rsb	ip, r2, #32
 8019c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8019c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8019c42:	bf18      	it	ne
 8019c44:	f040 0001 	orrne.w	r0, r0, #1
 8019c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8019c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8019c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8019c54:	ea40 000c 	orr.w	r0, r0, ip
 8019c58:	fa23 f302 	lsr.w	r3, r3, r2
 8019c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019c60:	e7cc      	b.n	8019bfc <__aeabi_d2f+0x14>
 8019c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8019c66:	d107      	bne.n	8019c78 <__aeabi_d2f+0x90>
 8019c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8019c6c:	bf1e      	ittt	ne
 8019c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8019c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8019c76:	4770      	bxne	lr
 8019c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8019c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8019c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8019c84:	4770      	bx	lr
 8019c86:	bf00      	nop

08019c88 <__aeabi_uldivmod>:
 8019c88:	b953      	cbnz	r3, 8019ca0 <__aeabi_uldivmod+0x18>
 8019c8a:	b94a      	cbnz	r2, 8019ca0 <__aeabi_uldivmod+0x18>
 8019c8c:	2900      	cmp	r1, #0
 8019c8e:	bf08      	it	eq
 8019c90:	2800      	cmpeq	r0, #0
 8019c92:	bf1c      	itt	ne
 8019c94:	f04f 31ff 	movne.w	r1, #4294967295
 8019c98:	f04f 30ff 	movne.w	r0, #4294967295
 8019c9c:	f000 b9a4 	b.w	8019fe8 <__aeabi_idiv0>
 8019ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8019ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8019ca8:	f000 f83c 	bl	8019d24 <__udivmoddi4>
 8019cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8019cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019cb4:	b004      	add	sp, #16
 8019cb6:	4770      	bx	lr

08019cb8 <__aeabi_d2lz>:
 8019cb8:	b538      	push	{r3, r4, r5, lr}
 8019cba:	2200      	movs	r2, #0
 8019cbc:	2300      	movs	r3, #0
 8019cbe:	4604      	mov	r4, r0
 8019cc0:	460d      	mov	r5, r1
 8019cc2:	f7ff ff0b 	bl	8019adc <__aeabi_dcmplt>
 8019cc6:	b928      	cbnz	r0, 8019cd4 <__aeabi_d2lz+0x1c>
 8019cc8:	4620      	mov	r0, r4
 8019cca:	4629      	mov	r1, r5
 8019ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019cd0:	f000 b80a 	b.w	8019ce8 <__aeabi_d2ulz>
 8019cd4:	4620      	mov	r0, r4
 8019cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8019cda:	f000 f805 	bl	8019ce8 <__aeabi_d2ulz>
 8019cde:	4240      	negs	r0, r0
 8019ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8019ce4:	bd38      	pop	{r3, r4, r5, pc}
 8019ce6:	bf00      	nop

08019ce8 <__aeabi_d2ulz>:
 8019ce8:	b5d0      	push	{r4, r6, r7, lr}
 8019cea:	4b0c      	ldr	r3, [pc, #48]	; (8019d1c <__aeabi_d2ulz+0x34>)
 8019cec:	2200      	movs	r2, #0
 8019cee:	4606      	mov	r6, r0
 8019cf0:	460f      	mov	r7, r1
 8019cf2:	f7ff fc81 	bl	80195f8 <__aeabi_dmul>
 8019cf6:	f7ff ff57 	bl	8019ba8 <__aeabi_d2uiz>
 8019cfa:	4604      	mov	r4, r0
 8019cfc:	f7ff fc02 	bl	8019504 <__aeabi_ui2d>
 8019d00:	4b07      	ldr	r3, [pc, #28]	; (8019d20 <__aeabi_d2ulz+0x38>)
 8019d02:	2200      	movs	r2, #0
 8019d04:	f7ff fc78 	bl	80195f8 <__aeabi_dmul>
 8019d08:	4602      	mov	r2, r0
 8019d0a:	460b      	mov	r3, r1
 8019d0c:	4630      	mov	r0, r6
 8019d0e:	4639      	mov	r1, r7
 8019d10:	f7ff faba 	bl	8019288 <__aeabi_dsub>
 8019d14:	f7ff ff48 	bl	8019ba8 <__aeabi_d2uiz>
 8019d18:	4621      	mov	r1, r4
 8019d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8019d1c:	3df00000 	.word	0x3df00000
 8019d20:	41f00000 	.word	0x41f00000

08019d24 <__udivmoddi4>:
 8019d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d28:	9d08      	ldr	r5, [sp, #32]
 8019d2a:	4604      	mov	r4, r0
 8019d2c:	468c      	mov	ip, r1
 8019d2e:	2b00      	cmp	r3, #0
 8019d30:	f040 8083 	bne.w	8019e3a <__udivmoddi4+0x116>
 8019d34:	428a      	cmp	r2, r1
 8019d36:	4617      	mov	r7, r2
 8019d38:	d947      	bls.n	8019dca <__udivmoddi4+0xa6>
 8019d3a:	fab2 f282 	clz	r2, r2
 8019d3e:	b142      	cbz	r2, 8019d52 <__udivmoddi4+0x2e>
 8019d40:	f1c2 0020 	rsb	r0, r2, #32
 8019d44:	fa24 f000 	lsr.w	r0, r4, r0
 8019d48:	4091      	lsls	r1, r2
 8019d4a:	4097      	lsls	r7, r2
 8019d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8019d50:	4094      	lsls	r4, r2
 8019d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8019d56:	0c23      	lsrs	r3, r4, #16
 8019d58:	fbbc f6f8 	udiv	r6, ip, r8
 8019d5c:	fa1f fe87 	uxth.w	lr, r7
 8019d60:	fb08 c116 	mls	r1, r8, r6, ip
 8019d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8019d68:	fb06 f10e 	mul.w	r1, r6, lr
 8019d6c:	4299      	cmp	r1, r3
 8019d6e:	d909      	bls.n	8019d84 <__udivmoddi4+0x60>
 8019d70:	18fb      	adds	r3, r7, r3
 8019d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8019d76:	f080 8119 	bcs.w	8019fac <__udivmoddi4+0x288>
 8019d7a:	4299      	cmp	r1, r3
 8019d7c:	f240 8116 	bls.w	8019fac <__udivmoddi4+0x288>
 8019d80:	3e02      	subs	r6, #2
 8019d82:	443b      	add	r3, r7
 8019d84:	1a5b      	subs	r3, r3, r1
 8019d86:	b2a4      	uxth	r4, r4
 8019d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8019d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8019d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8019d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8019d98:	45a6      	cmp	lr, r4
 8019d9a:	d909      	bls.n	8019db0 <__udivmoddi4+0x8c>
 8019d9c:	193c      	adds	r4, r7, r4
 8019d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8019da2:	f080 8105 	bcs.w	8019fb0 <__udivmoddi4+0x28c>
 8019da6:	45a6      	cmp	lr, r4
 8019da8:	f240 8102 	bls.w	8019fb0 <__udivmoddi4+0x28c>
 8019dac:	3802      	subs	r0, #2
 8019dae:	443c      	add	r4, r7
 8019db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8019db4:	eba4 040e 	sub.w	r4, r4, lr
 8019db8:	2600      	movs	r6, #0
 8019dba:	b11d      	cbz	r5, 8019dc4 <__udivmoddi4+0xa0>
 8019dbc:	40d4      	lsrs	r4, r2
 8019dbe:	2300      	movs	r3, #0
 8019dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8019dc4:	4631      	mov	r1, r6
 8019dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019dca:	b902      	cbnz	r2, 8019dce <__udivmoddi4+0xaa>
 8019dcc:	deff      	udf	#255	; 0xff
 8019dce:	fab2 f282 	clz	r2, r2
 8019dd2:	2a00      	cmp	r2, #0
 8019dd4:	d150      	bne.n	8019e78 <__udivmoddi4+0x154>
 8019dd6:	1bcb      	subs	r3, r1, r7
 8019dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8019ddc:	fa1f f887 	uxth.w	r8, r7
 8019de0:	2601      	movs	r6, #1
 8019de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8019de6:	0c21      	lsrs	r1, r4, #16
 8019de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8019dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8019df0:	fb08 f30c 	mul.w	r3, r8, ip
 8019df4:	428b      	cmp	r3, r1
 8019df6:	d907      	bls.n	8019e08 <__udivmoddi4+0xe4>
 8019df8:	1879      	adds	r1, r7, r1
 8019dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8019dfe:	d202      	bcs.n	8019e06 <__udivmoddi4+0xe2>
 8019e00:	428b      	cmp	r3, r1
 8019e02:	f200 80e9 	bhi.w	8019fd8 <__udivmoddi4+0x2b4>
 8019e06:	4684      	mov	ip, r0
 8019e08:	1ac9      	subs	r1, r1, r3
 8019e0a:	b2a3      	uxth	r3, r4
 8019e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8019e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8019e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8019e18:	fb08 f800 	mul.w	r8, r8, r0
 8019e1c:	45a0      	cmp	r8, r4
 8019e1e:	d907      	bls.n	8019e30 <__udivmoddi4+0x10c>
 8019e20:	193c      	adds	r4, r7, r4
 8019e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8019e26:	d202      	bcs.n	8019e2e <__udivmoddi4+0x10a>
 8019e28:	45a0      	cmp	r8, r4
 8019e2a:	f200 80d9 	bhi.w	8019fe0 <__udivmoddi4+0x2bc>
 8019e2e:	4618      	mov	r0, r3
 8019e30:	eba4 0408 	sub.w	r4, r4, r8
 8019e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8019e38:	e7bf      	b.n	8019dba <__udivmoddi4+0x96>
 8019e3a:	428b      	cmp	r3, r1
 8019e3c:	d909      	bls.n	8019e52 <__udivmoddi4+0x12e>
 8019e3e:	2d00      	cmp	r5, #0
 8019e40:	f000 80b1 	beq.w	8019fa6 <__udivmoddi4+0x282>
 8019e44:	2600      	movs	r6, #0
 8019e46:	e9c5 0100 	strd	r0, r1, [r5]
 8019e4a:	4630      	mov	r0, r6
 8019e4c:	4631      	mov	r1, r6
 8019e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e52:	fab3 f683 	clz	r6, r3
 8019e56:	2e00      	cmp	r6, #0
 8019e58:	d14a      	bne.n	8019ef0 <__udivmoddi4+0x1cc>
 8019e5a:	428b      	cmp	r3, r1
 8019e5c:	d302      	bcc.n	8019e64 <__udivmoddi4+0x140>
 8019e5e:	4282      	cmp	r2, r0
 8019e60:	f200 80b8 	bhi.w	8019fd4 <__udivmoddi4+0x2b0>
 8019e64:	1a84      	subs	r4, r0, r2
 8019e66:	eb61 0103 	sbc.w	r1, r1, r3
 8019e6a:	2001      	movs	r0, #1
 8019e6c:	468c      	mov	ip, r1
 8019e6e:	2d00      	cmp	r5, #0
 8019e70:	d0a8      	beq.n	8019dc4 <__udivmoddi4+0xa0>
 8019e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8019e76:	e7a5      	b.n	8019dc4 <__udivmoddi4+0xa0>
 8019e78:	f1c2 0320 	rsb	r3, r2, #32
 8019e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8019e80:	4097      	lsls	r7, r2
 8019e82:	fa01 f002 	lsl.w	r0, r1, r2
 8019e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8019e8a:	40d9      	lsrs	r1, r3
 8019e8c:	4330      	orrs	r0, r6
 8019e8e:	0c03      	lsrs	r3, r0, #16
 8019e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8019e94:	fa1f f887 	uxth.w	r8, r7
 8019e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8019e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8019ea0:	fb06 f108 	mul.w	r1, r6, r8
 8019ea4:	4299      	cmp	r1, r3
 8019ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8019eaa:	d909      	bls.n	8019ec0 <__udivmoddi4+0x19c>
 8019eac:	18fb      	adds	r3, r7, r3
 8019eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8019eb2:	f080 808d 	bcs.w	8019fd0 <__udivmoddi4+0x2ac>
 8019eb6:	4299      	cmp	r1, r3
 8019eb8:	f240 808a 	bls.w	8019fd0 <__udivmoddi4+0x2ac>
 8019ebc:	3e02      	subs	r6, #2
 8019ebe:	443b      	add	r3, r7
 8019ec0:	1a5b      	subs	r3, r3, r1
 8019ec2:	b281      	uxth	r1, r0
 8019ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8019ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8019ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8019ed0:	fb00 f308 	mul.w	r3, r0, r8
 8019ed4:	428b      	cmp	r3, r1
 8019ed6:	d907      	bls.n	8019ee8 <__udivmoddi4+0x1c4>
 8019ed8:	1879      	adds	r1, r7, r1
 8019eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8019ede:	d273      	bcs.n	8019fc8 <__udivmoddi4+0x2a4>
 8019ee0:	428b      	cmp	r3, r1
 8019ee2:	d971      	bls.n	8019fc8 <__udivmoddi4+0x2a4>
 8019ee4:	3802      	subs	r0, #2
 8019ee6:	4439      	add	r1, r7
 8019ee8:	1acb      	subs	r3, r1, r3
 8019eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8019eee:	e778      	b.n	8019de2 <__udivmoddi4+0xbe>
 8019ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8019ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8019ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8019efc:	431c      	orrs	r4, r3
 8019efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8019f02:	fa01 f306 	lsl.w	r3, r1, r6
 8019f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8019f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8019f0e:	431f      	orrs	r7, r3
 8019f10:	0c3b      	lsrs	r3, r7, #16
 8019f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8019f16:	fa1f f884 	uxth.w	r8, r4
 8019f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8019f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8019f22:	fb09 fa08 	mul.w	sl, r9, r8
 8019f26:	458a      	cmp	sl, r1
 8019f28:	fa02 f206 	lsl.w	r2, r2, r6
 8019f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8019f30:	d908      	bls.n	8019f44 <__udivmoddi4+0x220>
 8019f32:	1861      	adds	r1, r4, r1
 8019f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8019f38:	d248      	bcs.n	8019fcc <__udivmoddi4+0x2a8>
 8019f3a:	458a      	cmp	sl, r1
 8019f3c:	d946      	bls.n	8019fcc <__udivmoddi4+0x2a8>
 8019f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8019f42:	4421      	add	r1, r4
 8019f44:	eba1 010a 	sub.w	r1, r1, sl
 8019f48:	b2bf      	uxth	r7, r7
 8019f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8019f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8019f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8019f56:	fb00 f808 	mul.w	r8, r0, r8
 8019f5a:	45b8      	cmp	r8, r7
 8019f5c:	d907      	bls.n	8019f6e <__udivmoddi4+0x24a>
 8019f5e:	19e7      	adds	r7, r4, r7
 8019f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8019f64:	d22e      	bcs.n	8019fc4 <__udivmoddi4+0x2a0>
 8019f66:	45b8      	cmp	r8, r7
 8019f68:	d92c      	bls.n	8019fc4 <__udivmoddi4+0x2a0>
 8019f6a:	3802      	subs	r0, #2
 8019f6c:	4427      	add	r7, r4
 8019f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8019f72:	eba7 0708 	sub.w	r7, r7, r8
 8019f76:	fba0 8902 	umull	r8, r9, r0, r2
 8019f7a:	454f      	cmp	r7, r9
 8019f7c:	46c6      	mov	lr, r8
 8019f7e:	4649      	mov	r1, r9
 8019f80:	d31a      	bcc.n	8019fb8 <__udivmoddi4+0x294>
 8019f82:	d017      	beq.n	8019fb4 <__udivmoddi4+0x290>
 8019f84:	b15d      	cbz	r5, 8019f9e <__udivmoddi4+0x27a>
 8019f86:	ebb3 020e 	subs.w	r2, r3, lr
 8019f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8019f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8019f92:	40f2      	lsrs	r2, r6
 8019f94:	ea4c 0202 	orr.w	r2, ip, r2
 8019f98:	40f7      	lsrs	r7, r6
 8019f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8019f9e:	2600      	movs	r6, #0
 8019fa0:	4631      	mov	r1, r6
 8019fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019fa6:	462e      	mov	r6, r5
 8019fa8:	4628      	mov	r0, r5
 8019faa:	e70b      	b.n	8019dc4 <__udivmoddi4+0xa0>
 8019fac:	4606      	mov	r6, r0
 8019fae:	e6e9      	b.n	8019d84 <__udivmoddi4+0x60>
 8019fb0:	4618      	mov	r0, r3
 8019fb2:	e6fd      	b.n	8019db0 <__udivmoddi4+0x8c>
 8019fb4:	4543      	cmp	r3, r8
 8019fb6:	d2e5      	bcs.n	8019f84 <__udivmoddi4+0x260>
 8019fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8019fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8019fc0:	3801      	subs	r0, #1
 8019fc2:	e7df      	b.n	8019f84 <__udivmoddi4+0x260>
 8019fc4:	4608      	mov	r0, r1
 8019fc6:	e7d2      	b.n	8019f6e <__udivmoddi4+0x24a>
 8019fc8:	4660      	mov	r0, ip
 8019fca:	e78d      	b.n	8019ee8 <__udivmoddi4+0x1c4>
 8019fcc:	4681      	mov	r9, r0
 8019fce:	e7b9      	b.n	8019f44 <__udivmoddi4+0x220>
 8019fd0:	4666      	mov	r6, ip
 8019fd2:	e775      	b.n	8019ec0 <__udivmoddi4+0x19c>
 8019fd4:	4630      	mov	r0, r6
 8019fd6:	e74a      	b.n	8019e6e <__udivmoddi4+0x14a>
 8019fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8019fdc:	4439      	add	r1, r7
 8019fde:	e713      	b.n	8019e08 <__udivmoddi4+0xe4>
 8019fe0:	3802      	subs	r0, #2
 8019fe2:	443c      	add	r4, r7
 8019fe4:	e724      	b.n	8019e30 <__udivmoddi4+0x10c>
 8019fe6:	bf00      	nop

08019fe8 <__aeabi_idiv0>:
 8019fe8:	4770      	bx	lr
 8019fea:	bf00      	nop

08019fec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8019fec:	b580      	push	{r7, lr}
 8019fee:	b088      	sub	sp, #32
 8019ff0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019ff2:	f107 030c 	add.w	r3, r7, #12
 8019ff6:	2200      	movs	r2, #0
 8019ff8:	601a      	str	r2, [r3, #0]
 8019ffa:	605a      	str	r2, [r3, #4]
 8019ffc:	609a      	str	r2, [r3, #8]
 8019ffe:	60da      	str	r2, [r3, #12]
 801a000:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801a002:	4b25      	ldr	r3, [pc, #148]	; (801a098 <MX_GPIO_Init+0xac>)
 801a004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a006:	4a24      	ldr	r2, [pc, #144]	; (801a098 <MX_GPIO_Init+0xac>)
 801a008:	f043 0304 	orr.w	r3, r3, #4
 801a00c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801a00e:	4b22      	ldr	r3, [pc, #136]	; (801a098 <MX_GPIO_Init+0xac>)
 801a010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a012:	f003 0304 	and.w	r3, r3, #4
 801a016:	60bb      	str	r3, [r7, #8]
 801a018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801a01a:	4b1f      	ldr	r3, [pc, #124]	; (801a098 <MX_GPIO_Init+0xac>)
 801a01c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a01e:	4a1e      	ldr	r2, [pc, #120]	; (801a098 <MX_GPIO_Init+0xac>)
 801a020:	f043 0301 	orr.w	r3, r3, #1
 801a024:	64d3      	str	r3, [r2, #76]	; 0x4c
 801a026:	4b1c      	ldr	r3, [pc, #112]	; (801a098 <MX_GPIO_Init+0xac>)
 801a028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a02a:	f003 0301 	and.w	r3, r3, #1
 801a02e:	607b      	str	r3, [r7, #4]
 801a030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801a032:	4b19      	ldr	r3, [pc, #100]	; (801a098 <MX_GPIO_Init+0xac>)
 801a034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a036:	4a18      	ldr	r2, [pc, #96]	; (801a098 <MX_GPIO_Init+0xac>)
 801a038:	f043 0302 	orr.w	r3, r3, #2
 801a03c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801a03e:	4b16      	ldr	r3, [pc, #88]	; (801a098 <MX_GPIO_Init+0xac>)
 801a040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a042:	f003 0302 	and.w	r3, r3, #2
 801a046:	603b      	str	r3, [r7, #0]
 801a048:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(user_led_GPIO_Port, user_led_Pin, GPIO_PIN_RESET);
 801a04a:	2200      	movs	r2, #0
 801a04c:	2120      	movs	r1, #32
 801a04e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801a052:	f001 ff73 	bl	801bf3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = user_btn_Pin;
 801a056:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801a05a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801a05c:	2300      	movs	r3, #0
 801a05e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 801a060:	2301      	movs	r3, #1
 801a062:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(user_btn_GPIO_Port, &GPIO_InitStruct);
 801a064:	f107 030c 	add.w	r3, r7, #12
 801a068:	4619      	mov	r1, r3
 801a06a:	480c      	ldr	r0, [pc, #48]	; (801a09c <MX_GPIO_Init+0xb0>)
 801a06c:	f001 fdbc 	bl	801bbe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = user_led_Pin;
 801a070:	2320      	movs	r3, #32
 801a072:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801a074:	2301      	movs	r3, #1
 801a076:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a078:	2300      	movs	r3, #0
 801a07a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801a07c:	2303      	movs	r3, #3
 801a07e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(user_led_GPIO_Port, &GPIO_InitStruct);
 801a080:	f107 030c 	add.w	r3, r7, #12
 801a084:	4619      	mov	r1, r3
 801a086:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801a08a:	f001 fdad 	bl	801bbe8 <HAL_GPIO_Init>

}
 801a08e:	bf00      	nop
 801a090:	3720      	adds	r7, #32
 801a092:	46bd      	mov	sp, r7
 801a094:	bd80      	pop	{r7, pc}
 801a096:	bf00      	nop
 801a098:	40021000 	.word	0x40021000
 801a09c:	48000800 	.word	0x48000800

0801a0a0 <_ZSt6strstrPcPKc>:
  strrchr(char* __s, int __n)
  { return __builtin_strrchr(__s, __n); }

  inline char*
  strstr(char* __s1, const char* __s2)
  { return __builtin_strstr(__s1, __s2); }
 801a0a0:	b580      	push	{r7, lr}
 801a0a2:	b082      	sub	sp, #8
 801a0a4:	af00      	add	r7, sp, #0
 801a0a6:	6078      	str	r0, [r7, #4]
 801a0a8:	6039      	str	r1, [r7, #0]
 801a0aa:	6839      	ldr	r1, [r7, #0]
 801a0ac:	6878      	ldr	r0, [r7, #4]
 801a0ae:	f006 f93d 	bl	802032c <strstr>
 801a0b2:	4603      	mov	r3, r0
 801a0b4:	4618      	mov	r0, r3
 801a0b6:	3708      	adds	r7, #8
 801a0b8:	46bd      	mov	sp, r7
 801a0ba:	bd80      	pop	{r7, pc}

0801a0bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 801a0bc:	b5b0      	push	{r4, r5, r7, lr}
 801a0be:	b096      	sub	sp, #88	; 0x58
 801a0c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	SCB->VTOR = (uint32_t)0x08019000;
 801a0c2:	4b8b      	ldr	r3, [pc, #556]	; (801a2f0 <main+0x234>)
 801a0c4:	4a8b      	ldr	r2, [pc, #556]	; (801a2f4 <main+0x238>)
 801a0c6:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801a0c8:	f001 f8ab 	bl	801b222 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801a0cc:	f000 f93e 	bl	801a34c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 801a0d0:	f7ff ff8c 	bl	8019fec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 801a0d4:	f000 ffc8 	bl	801b068 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 801a0d8:	f000 ff96 	bl	801b008 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Sim7600.init() ;
 801a0dc:	4886      	ldr	r0, [pc, #536]	; (801a2f8 <main+0x23c>)
 801a0de:	f004 fe91 	bl	801ee04 <_ZN7Sim76004initEv>
  Terminal.init() ;
 801a0e2:	4886      	ldr	r0, [pc, #536]	; (801a2fc <main+0x240>)
 801a0e4:	f004 ffa2 	bl	801f02c <_ZN8Terminal4initEv>

  Terminal.println( "----------------------------------------------------------------------------------------------------------------" ) ;
 801a0e8:	4985      	ldr	r1, [pc, #532]	; (801a300 <main+0x244>)
 801a0ea:	4884      	ldr	r0, [pc, #528]	; (801a2fc <main+0x240>)
 801a0ec:	f004 ffe4 	bl	801f0b8 <_ZN8Terminal7printlnEPKc>
  Terminal.println( "                                             FIRMWARE OVER THE AIR UPDATE" ) ;
 801a0f0:	4984      	ldr	r1, [pc, #528]	; (801a304 <main+0x248>)
 801a0f2:	4882      	ldr	r0, [pc, #520]	; (801a2fc <main+0x240>)
 801a0f4:	f004 ffe0 	bl	801f0b8 <_ZN8Terminal7printlnEPKc>
  Terminal.println( "----------------------------------------------------------------------------------------------------------------" ) ;
 801a0f8:	4981      	ldr	r1, [pc, #516]	; (801a300 <main+0x244>)
 801a0fa:	4880      	ldr	r0, [pc, #512]	; (801a2fc <main+0x240>)
 801a0fc:	f004 ffdc 	bl	801f0b8 <_ZN8Terminal7printlnEPKc>
  Terminal.println( "Booting on...\nPlease wait for 30 second !" ) ;
 801a100:	4981      	ldr	r1, [pc, #516]	; (801a308 <main+0x24c>)
 801a102:	487e      	ldr	r0, [pc, #504]	; (801a2fc <main+0x240>)
 801a104:	f004 ffd8 	bl	801f0b8 <_ZN8Terminal7printlnEPKc>

  if( Sim7600.sendCmd( "AT", "OK", 1000 ) != true ) {
 801a108:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801a10c:	4a7f      	ldr	r2, [pc, #508]	; (801a30c <main+0x250>)
 801a10e:	4980      	ldr	r1, [pc, #512]	; (801a310 <main+0x254>)
 801a110:	4879      	ldr	r0, [pc, #484]	; (801a2f8 <main+0x23c>)
 801a112:	f004 febb 	bl	801ee8c <_ZN7Sim76007sendCmdEPKcS1_j>
 801a116:	4603      	mov	r3, r0
 801a118:	2b01      	cmp	r3, #1
 801a11a:	bf14      	ite	ne
 801a11c:	2301      	movne	r3, #1
 801a11e:	2300      	moveq	r3, #0
 801a120:	b2db      	uxtb	r3, r3
 801a122:	2b00      	cmp	r3, #0
 801a124:	d009      	beq.n	801a13a <main+0x7e>
	  Sim7600.sendCmd( "AT+CRESET", "", 200 ) ;
 801a126:	23c8      	movs	r3, #200	; 0xc8
 801a128:	4a7a      	ldr	r2, [pc, #488]	; (801a314 <main+0x258>)
 801a12a:	497b      	ldr	r1, [pc, #492]	; (801a318 <main+0x25c>)
 801a12c:	4872      	ldr	r0, [pc, #456]	; (801a2f8 <main+0x23c>)
 801a12e:	f004 fead 	bl	801ee8c <_ZN7Sim76007sendCmdEPKcS1_j>
	  HAL_Delay(30000) ;
 801a132:	f247 5030 	movw	r0, #30000	; 0x7530
 801a136:	f001 f8e9 	bl	801b30c <HAL_Delay>
//	Flash_erase(500) ;
//	HAL_Delay(1000) ;
//	uint8_t x[24] = "datalogger_1.0.0.bin" ;
//	Flash_write( 0x080FA000, x, strlen((char*)x) ) ;

  Sim7600.sendCmd( "AT", "OK", 200 ) ;
 801a13a:	23c8      	movs	r3, #200	; 0xc8
 801a13c:	4a73      	ldr	r2, [pc, #460]	; (801a30c <main+0x250>)
 801a13e:	4974      	ldr	r1, [pc, #464]	; (801a310 <main+0x254>)
 801a140:	486d      	ldr	r0, [pc, #436]	; (801a2f8 <main+0x23c>)
 801a142:	f004 fea3 	bl	801ee8c <_ZN7Sim76007sendCmdEPKcS1_j>
  Sim7600.sendCmd( "AT+FSCD=E:", "OK", 200 ) ;
 801a146:	23c8      	movs	r3, #200	; 0xc8
 801a148:	4a70      	ldr	r2, [pc, #448]	; (801a30c <main+0x250>)
 801a14a:	4974      	ldr	r1, [pc, #464]	; (801a31c <main+0x260>)
 801a14c:	486a      	ldr	r0, [pc, #424]	; (801a2f8 <main+0x23c>)
 801a14e:	f004 fe9d 	bl	801ee8c <_ZN7Sim76007sendCmdEPKcS1_j>
  Sim7600.sendCmd( "AT+CATR=1", "OK", 200 ) ;
 801a152:	23c8      	movs	r3, #200	; 0xc8
 801a154:	4a6d      	ldr	r2, [pc, #436]	; (801a30c <main+0x250>)
 801a156:	4972      	ldr	r1, [pc, #456]	; (801a320 <main+0x264>)
 801a158:	4867      	ldr	r0, [pc, #412]	; (801a2f8 <main+0x23c>)
 801a15a:	f004 fe97 	bl	801ee8c <_ZN7Sim76007sendCmdEPKcS1_j>
  Sim7600.memreset() ;
 801a15e:	4866      	ldr	r0, [pc, #408]	; (801a2f8 <main+0x23c>)
 801a160:	f004 fe80 	bl	801ee64 <_ZN7Sim76008memresetEv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	// Code start here :


  char curVersionOnFLASH[24] = {0} ;
 801a164:	2300      	movs	r3, #0
 801a166:	63bb      	str	r3, [r7, #56]	; 0x38
 801a168:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801a16c:	2200      	movs	r2, #0
 801a16e:	601a      	str	r2, [r3, #0]
 801a170:	605a      	str	r2, [r3, #4]
 801a172:	609a      	str	r2, [r3, #8]
 801a174:	60da      	str	r2, [r3, #12]
 801a176:	611a      	str	r2, [r3, #16]
  memcpy( curVersionOnFLASH, getCurrentVersion(), 24 ) ;
 801a178:	f000 fbda 	bl	801a930 <_Z17getCurrentVersionv>
 801a17c:	4603      	mov	r3, r0
 801a17e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 801a182:	461d      	mov	r5, r3
 801a184:	6828      	ldr	r0, [r5, #0]
 801a186:	6869      	ldr	r1, [r5, #4]
 801a188:	68aa      	ldr	r2, [r5, #8]
 801a18a:	68eb      	ldr	r3, [r5, #12]
 801a18c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a18e:	6928      	ldr	r0, [r5, #16]
 801a190:	6969      	ldr	r1, [r5, #20]
 801a192:	c403      	stmia	r4!, {r0, r1}

  char onSimVersion[25] = {0} ;
 801a194:	2300      	movs	r3, #0
 801a196:	61fb      	str	r3, [r7, #28]
 801a198:	f107 0320 	add.w	r3, r7, #32
 801a19c:	2200      	movs	r2, #0
 801a19e:	601a      	str	r2, [r3, #0]
 801a1a0:	605a      	str	r2, [r3, #4]
 801a1a2:	609a      	str	r2, [r3, #8]
 801a1a4:	60da      	str	r2, [r3, #12]
 801a1a6:	611a      	str	r2, [r3, #16]
 801a1a8:	751a      	strb	r2, [r3, #20]
  memcpy( onSimVersion, getOnSimVersion(), 24 ) ;
 801a1aa:	f000 fc69 	bl	801aa80 <_Z15getOnSimVersionv>
 801a1ae:	4601      	mov	r1, r0
 801a1b0:	f107 031c 	add.w	r3, r7, #28
 801a1b4:	2218      	movs	r2, #24
 801a1b6:	4618      	mov	r0, r3
 801a1b8:	f005 f8ea 	bl	801f390 <memcpy>

  Terminal.println( "Checking..." ) ;
 801a1bc:	4959      	ldr	r1, [pc, #356]	; (801a324 <main+0x268>)
 801a1be:	484f      	ldr	r0, [pc, #316]	; (801a2fc <main+0x240>)
 801a1c0:	f004 ff7a 	bl	801f0b8 <_ZN8Terminal7printlnEPKc>
  if( strstr( onSimVersion, curVersionOnFLASH ) == NULL ) {
 801a1c4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801a1c8:	f107 031c 	add.w	r3, r7, #28
 801a1cc:	4611      	mov	r1, r2
 801a1ce:	4618      	mov	r0, r3
 801a1d0:	f7ff ff66 	bl	801a0a0 <_ZSt6strstrPcPKc>
 801a1d4:	4603      	mov	r3, r0
 801a1d6:	2b00      	cmp	r3, #0
 801a1d8:	bf0c      	ite	eq
 801a1da:	2301      	moveq	r3, #1
 801a1dc:	2300      	movne	r3, #0
 801a1de:	b2db      	uxtb	r3, r3
 801a1e0:	2b00      	cmp	r3, #0
 801a1e2:	d07d      	beq.n	801a2e0 <main+0x224>
	  // Start write firmware tai day
	  Terminal.println( "*New program version detected!\nPage ereasing... " ) ;
 801a1e4:	4950      	ldr	r1, [pc, #320]	; (801a328 <main+0x26c>)
 801a1e6:	4845      	ldr	r0, [pc, #276]	; (801a2fc <main+0x240>)
 801a1e8:	f004 ff66 	bl	801f0b8 <_ZN8Terminal7printlnEPKc>
	  for( int i = 0; i <= 150; i++ )
 801a1ec:	2300      	movs	r3, #0
 801a1ee:	657b      	str	r3, [r7, #84]	; 0x54
 801a1f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a1f2:	2b96      	cmp	r3, #150	; 0x96
 801a1f4:	dc08      	bgt.n	801a208 <main+0x14c>
		  Flash_erase( i + 125 ) ;
 801a1f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a1f8:	337d      	adds	r3, #125	; 0x7d
 801a1fa:	4618      	mov	r0, r3
 801a1fc:	f004 fade 	bl	801e7bc <_Z11Flash_erasem>
	  for( int i = 0; i <= 150; i++ )
 801a200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a202:	3301      	adds	r3, #1
 801a204:	657b      	str	r3, [r7, #84]	; 0x54
 801a206:	e7f3      	b.n	801a1f0 <main+0x134>

	  Terminal.print( "Done.\nNow flashing... " ) ;
 801a208:	4948      	ldr	r1, [pc, #288]	; (801a32c <main+0x270>)
 801a20a:	483c      	ldr	r0, [pc, #240]	; (801a2fc <main+0x240>)
 801a20c:	f004 ff3e 	bl	801f08c <_ZN8Terminal5printEPKc>
	  if( CF_writeBFFWtoFlash( appFW_BaseAddress ) == true )
 801a210:	4b47      	ldr	r3, [pc, #284]	; (801a330 <main+0x274>)
 801a212:	681b      	ldr	r3, [r3, #0]
 801a214:	4618      	mov	r0, r3
 801a216:	f000 fa7d 	bl	801a714 <_Z19CF_writeBFFWtoFlashm>
 801a21a:	4603      	mov	r3, r0
 801a21c:	2b01      	cmp	r3, #1
 801a21e:	bf0c      	ite	eq
 801a220:	2301      	moveq	r3, #1
 801a222:	2300      	movne	r3, #0
 801a224:	b2db      	uxtb	r3, r3
 801a226:	2b00      	cmp	r3, #0
 801a228:	d004      	beq.n	801a234 <main+0x178>
		  Terminal.println( "...Flash successful!" ) ;
 801a22a:	4942      	ldr	r1, [pc, #264]	; (801a334 <main+0x278>)
 801a22c:	4833      	ldr	r0, [pc, #204]	; (801a2fc <main+0x240>)
 801a22e:	f004 ff43 	bl	801f0b8 <_ZN8Terminal7printlnEPKc>
 801a232:	e003      	b.n	801a23c <main+0x180>
	  else
		  Terminal.println( "...Flash failed! Please try again!" ) ;
 801a234:	4940      	ldr	r1, [pc, #256]	; (801a338 <main+0x27c>)
 801a236:	4831      	ldr	r0, [pc, #196]	; (801a2fc <main+0x240>)
 801a238:	f004 ff3e 	bl	801f0b8 <_ZN8Terminal7printlnEPKc>

	  for( int i = 0 ; i < 6 ; i++ ) {
 801a23c:	2300      	movs	r3, #0
 801a23e:	653b      	str	r3, [r7, #80]	; 0x50
 801a240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a242:	2b05      	cmp	r3, #5
 801a244:	dc0c      	bgt.n	801a260 <main+0x1a4>
		  HAL_GPIO_TogglePin( user_led_GPIO_Port, user_led_Pin ) ;
 801a246:	2120      	movs	r1, #32
 801a248:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801a24c:	f001 fe8e 	bl	801bf6c <HAL_GPIO_TogglePin>
		  HAL_Delay(500) ;
 801a250:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801a254:	f001 f85a 	bl	801b30c <HAL_Delay>
	  for( int i = 0 ; i < 6 ; i++ ) {
 801a258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a25a:	3301      	adds	r3, #1
 801a25c:	653b      	str	r3, [r7, #80]	; 0x50
 801a25e:	e7ef      	b.n	801a240 <main+0x184>
	  }

	  HAL_GPIO_WritePin( user_led_GPIO_Port,  user_led_Pin, (GPIO_PinState)0 ) ;
 801a260:	2200      	movs	r2, #0
 801a262:	2120      	movs	r1, #32
 801a264:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801a268:	f001 fe68 	bl	801bf3c <HAL_GPIO_WritePin>

	  // lưu lại firmware hiện tại
	  Terminal.println( "Saving... " ) ;
 801a26c:	4933      	ldr	r1, [pc, #204]	; (801a33c <main+0x280>)
 801a26e:	4823      	ldr	r0, [pc, #140]	; (801a2fc <main+0x240>)
 801a270:	f004 ff22 	bl	801f0b8 <_ZN8Terminal7printlnEPKc>
	  char savedVersion[25] = {0} ;
 801a274:	2300      	movs	r3, #0
 801a276:	603b      	str	r3, [r7, #0]
 801a278:	1d3b      	adds	r3, r7, #4
 801a27a:	2200      	movs	r2, #0
 801a27c:	601a      	str	r2, [r3, #0]
 801a27e:	605a      	str	r2, [r3, #4]
 801a280:	609a      	str	r2, [r3, #8]
 801a282:	60da      	str	r2, [r3, #12]
 801a284:	611a      	str	r2, [r3, #16]
 801a286:	751a      	strb	r2, [r3, #20]
	  HAL_Delay(1000) ;
 801a288:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a28c:	f001 f83e 	bl	801b30c <HAL_Delay>
	  memcpy( savedVersion, getOnSimVersion(), 24 ) ;
 801a290:	f000 fbf6 	bl	801aa80 <_Z15getOnSimVersionv>
 801a294:	4601      	mov	r1, r0
 801a296:	463b      	mov	r3, r7
 801a298:	2218      	movs	r2, #24
 801a29a:	4618      	mov	r0, r3
 801a29c:	f005 f878 	bl	801f390 <memcpy>
	  Flash_erase(500) ;
 801a2a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801a2a4:	f004 fa8a 	bl	801e7bc <_Z11Flash_erasem>
	  HAL_Delay(1000) ;
 801a2a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a2ac:	f001 f82e 	bl	801b30c <HAL_Delay>
	  Flash_write( 0x080FA000, (const uint8_t*)savedVersion, strlen( savedVersion ) ) ;
 801a2b0:	463b      	mov	r3, r7
 801a2b2:	4618      	mov	r0, r3
 801a2b4:	f7fe ffdc 	bl	8019270 <strlen>
 801a2b8:	4603      	mov	r3, r0
 801a2ba:	461a      	mov	r2, r3
 801a2bc:	463b      	mov	r3, r7
 801a2be:	4619      	mov	r1, r3
 801a2c0:	481f      	ldr	r0, [pc, #124]	; (801a340 <main+0x284>)
 801a2c2:	f004 faa7 	bl	801e814 <_Z11Flash_writemPKhi>
	  Terminal.print( "Done" ) ;
 801a2c6:	491f      	ldr	r1, [pc, #124]	; (801a344 <main+0x288>)
 801a2c8:	480c      	ldr	r0, [pc, #48]	; (801a2fc <main+0x240>)
 801a2ca:	f004 fedf 	bl	801f08c <_ZN8Terminal5printEPKc>

	  Sim7600.sendCmd( "AT+CRESET", "", 100 ) ;
 801a2ce:	2364      	movs	r3, #100	; 0x64
 801a2d0:	4a10      	ldr	r2, [pc, #64]	; (801a314 <main+0x258>)
 801a2d2:	4911      	ldr	r1, [pc, #68]	; (801a318 <main+0x25c>)
 801a2d4:	4808      	ldr	r0, [pc, #32]	; (801a2f8 <main+0x23c>)
 801a2d6:	f004 fdd9 	bl	801ee8c <_ZN7Sim76007sendCmdEPKcS1_j>
	  HAL_NVIC_SystemReset() ;
 801a2da:	f001 f956 	bl	801b58a <HAL_NVIC_SystemReset>
 801a2de:	e005      	b.n	801a2ec <main+0x230>

  }else {
	  Terminal.println( "Firmware version is up to date." ) ;
 801a2e0:	4919      	ldr	r1, [pc, #100]	; (801a348 <main+0x28c>)
 801a2e2:	4806      	ldr	r0, [pc, #24]	; (801a2fc <main+0x240>)
 801a2e4:	f004 fee8 	bl	801f0b8 <_ZN8Terminal7printlnEPKc>
	  HAL_NVIC_SystemReset() ;
 801a2e8:	f001 f94f 	bl	801b58a <HAL_NVIC_SystemReset>
  }


  while (1)
 801a2ec:	e7fe      	b.n	801a2ec <main+0x230>
 801a2ee:	bf00      	nop
 801a2f0:	e000ed00 	.word	0xe000ed00
 801a2f4:	08019000 	.word	0x08019000
 801a2f8:	20000220 	.word	0x20000220
 801a2fc:	20000244 	.word	0x20000244
 801a300:	08023c18 	.word	0x08023c18
 801a304:	08023c8c 	.word	0x08023c8c
 801a308:	08023cd8 	.word	0x08023cd8
 801a30c:	08023d04 	.word	0x08023d04
 801a310:	08023d08 	.word	0x08023d08
 801a314:	08023d0c 	.word	0x08023d0c
 801a318:	08023d10 	.word	0x08023d10
 801a31c:	08023d1c 	.word	0x08023d1c
 801a320:	08023d28 	.word	0x08023d28
 801a324:	08023d34 	.word	0x08023d34
 801a328:	08023d40 	.word	0x08023d40
 801a32c:	08023d74 	.word	0x08023d74
 801a330:	20000000 	.word	0x20000000
 801a334:	08023d8c 	.word	0x08023d8c
 801a338:	08023da4 	.word	0x08023da4
 801a33c:	08023dc8 	.word	0x08023dc8
 801a340:	080fa000 	.word	0x080fa000
 801a344:	08023dd4 	.word	0x08023dd4
 801a348:	08023ddc 	.word	0x08023ddc

0801a34c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 801a34c:	b580      	push	{r7, lr}
 801a34e:	b0b8      	sub	sp, #224	; 0xe0
 801a350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801a352:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801a356:	2244      	movs	r2, #68	; 0x44
 801a358:	2100      	movs	r1, #0
 801a35a:	4618      	mov	r0, r3
 801a35c:	f005 f840 	bl	801f3e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801a360:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801a364:	2200      	movs	r2, #0
 801a366:	601a      	str	r2, [r3, #0]
 801a368:	605a      	str	r2, [r3, #4]
 801a36a:	609a      	str	r2, [r3, #8]
 801a36c:	60da      	str	r2, [r3, #12]
 801a36e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801a370:	463b      	mov	r3, r7
 801a372:	2288      	movs	r2, #136	; 0x88
 801a374:	2100      	movs	r1, #0
 801a376:	4618      	mov	r0, r3
 801a378:	f005 f832 	bl	801f3e0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 801a37c:	2302      	movs	r3, #2
 801a37e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801a382:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a386:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 801a38a:	2310      	movs	r3, #16
 801a38c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801a390:	2302      	movs	r3, #2
 801a392:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 801a396:	2302      	movs	r3, #2
 801a398:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 801a39c:	2301      	movs	r3, #1
 801a39e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 801a3a2:	230a      	movs	r3, #10
 801a3a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 801a3a8:	2307      	movs	r3, #7
 801a3aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 801a3ae:	2302      	movs	r3, #2
 801a3b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 801a3b4:	2302      	movs	r3, #2
 801a3b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801a3ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801a3be:	4618      	mov	r0, r3
 801a3c0:	f001 fe52 	bl	801c068 <HAL_RCC_OscConfig>
 801a3c4:	4603      	mov	r3, r0
 801a3c6:	2b00      	cmp	r3, #0
 801a3c8:	bf14      	ite	ne
 801a3ca:	2301      	movne	r3, #1
 801a3cc:	2300      	moveq	r3, #0
 801a3ce:	b2db      	uxtb	r3, r3
 801a3d0:	2b00      	cmp	r3, #0
 801a3d2:	d001      	beq.n	801a3d8 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 801a3d4:	f000 fc78 	bl	801acc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801a3d8:	230f      	movs	r3, #15
 801a3da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801a3de:	2303      	movs	r3, #3
 801a3e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801a3e4:	2300      	movs	r3, #0
 801a3e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 801a3ea:	2300      	movs	r3, #0
 801a3ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801a3f0:	2300      	movs	r3, #0
 801a3f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 801a3f6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801a3fa:	2104      	movs	r1, #4
 801a3fc:	4618      	mov	r0, r3
 801a3fe:	f002 fa19 	bl	801c834 <HAL_RCC_ClockConfig>
 801a402:	4603      	mov	r3, r0
 801a404:	2b00      	cmp	r3, #0
 801a406:	bf14      	ite	ne
 801a408:	2301      	movne	r3, #1
 801a40a:	2300      	moveq	r3, #0
 801a40c:	b2db      	uxtb	r3, r3
 801a40e:	2b00      	cmp	r3, #0
 801a410:	d001      	beq.n	801a416 <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 801a412:	f000 fc59 	bl	801acc8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 801a416:	2303      	movs	r3, #3
 801a418:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 801a41a:	2300      	movs	r3, #0
 801a41c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 801a41e:	2300      	movs	r3, #0
 801a420:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801a422:	463b      	mov	r3, r7
 801a424:	4618      	mov	r0, r3
 801a426:	f002 fc0b 	bl	801cc40 <HAL_RCCEx_PeriphCLKConfig>
 801a42a:	4603      	mov	r3, r0
 801a42c:	2b00      	cmp	r3, #0
 801a42e:	bf14      	ite	ne
 801a430:	2301      	movne	r3, #1
 801a432:	2300      	moveq	r3, #0
 801a434:	b2db      	uxtb	r3, r3
 801a436:	2b00      	cmp	r3, #0
 801a438:	d001      	beq.n	801a43e <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 801a43a:	f000 fc45 	bl	801acc8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 801a43e:	f44f 7000 	mov.w	r0, #512	; 0x200
 801a442:	f001 fdbb 	bl	801bfbc <HAL_PWREx_ControlVoltageScaling>
 801a446:	4603      	mov	r3, r0
 801a448:	2b00      	cmp	r3, #0
 801a44a:	bf14      	ite	ne
 801a44c:	2301      	movne	r3, #1
 801a44e:	2300      	moveq	r3, #0
 801a450:	b2db      	uxtb	r3, r3
 801a452:	2b00      	cmp	r3, #0
 801a454:	d001      	beq.n	801a45a <_Z18SystemClock_Configv+0x10e>
  {
    Error_Handler();
 801a456:	f000 fc37 	bl	801acc8 <Error_Handler>
  }
}
 801a45a:	bf00      	nop
 801a45c:	37e0      	adds	r7, #224	; 0xe0
 801a45e:	46bd      	mov	sp, r7
 801a460:	bd80      	pop	{r7, pc}
	...

0801a464 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */



/*____________________________________________________________________________________________________________________________________________*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 801a464:	b580      	push	{r7, lr}
 801a466:	b082      	sub	sp, #8
 801a468:	af00      	add	r7, sp, #0
 801a46a:	6078      	str	r0, [r7, #4]
	if( huart->Instance == USART1 )
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	681b      	ldr	r3, [r3, #0]
 801a470:	4a09      	ldr	r2, [pc, #36]	; (801a498 <HAL_UART_RxCpltCallback+0x34>)
 801a472:	4293      	cmp	r3, r2
 801a474:	d103      	bne.n	801a47e <HAL_UART_RxCpltCallback+0x1a>
		Sim7600.irqProcess() ;
 801a476:	4809      	ldr	r0, [pc, #36]	; (801a49c <HAL_UART_RxCpltCallback+0x38>)
 801a478:	f004 fcd4 	bl	801ee24 <_ZN7Sim760010irqProcessEv>
	else if( huart->Instance == USART2 )
		Terminal.irqProcess() ;
}
 801a47c:	e007      	b.n	801a48e <HAL_UART_RxCpltCallback+0x2a>
	else if( huart->Instance == USART2 )
 801a47e:	687b      	ldr	r3, [r7, #4]
 801a480:	681b      	ldr	r3, [r3, #0]
 801a482:	4a07      	ldr	r2, [pc, #28]	; (801a4a0 <HAL_UART_RxCpltCallback+0x3c>)
 801a484:	4293      	cmp	r3, r2
 801a486:	d102      	bne.n	801a48e <HAL_UART_RxCpltCallback+0x2a>
		Terminal.irqProcess() ;
 801a488:	4806      	ldr	r0, [pc, #24]	; (801a4a4 <HAL_UART_RxCpltCallback+0x40>)
 801a48a:	f004 fddf 	bl	801f04c <_ZN8Terminal10irqProcessEv>
}
 801a48e:	bf00      	nop
 801a490:	3708      	adds	r7, #8
 801a492:	46bd      	mov	sp, r7
 801a494:	bd80      	pop	{r7, pc}
 801a496:	bf00      	nop
 801a498:	40013800 	.word	0x40013800
 801a49c:	20000220 	.word	0x20000220
 801a4a0:	40004400 	.word	0x40004400
 801a4a4:	20000244 	.word	0x20000244

0801a4a8 <_Z10parseToHexcc>:

/*____________________________________________________________________________________________________________________________________________*/
/*
 * parse from 2 character type 'A' and 'B' to 0xAB
 */
uint8_t parseToHex( char c0, char c1 ){
 801a4a8:	b480      	push	{r7}
 801a4aa:	b085      	sub	sp, #20
 801a4ac:	af00      	add	r7, sp, #0
 801a4ae:	4603      	mov	r3, r0
 801a4b0:	460a      	mov	r2, r1
 801a4b2:	71fb      	strb	r3, [r7, #7]
 801a4b4:	4613      	mov	r3, r2
 801a4b6:	71bb      	strb	r3, [r7, #6]
	uint8_t result = 0x00 ;
 801a4b8:	2300      	movs	r3, #0
 801a4ba:	73fb      	strb	r3, [r7, #15]
    if ('0' <= c0 && c0 <= '9') result = c0 - '0';
 801a4bc:	79fb      	ldrb	r3, [r7, #7]
 801a4be:	2b2f      	cmp	r3, #47	; 0x2f
 801a4c0:	d905      	bls.n	801a4ce <_Z10parseToHexcc+0x26>
 801a4c2:	79fb      	ldrb	r3, [r7, #7]
 801a4c4:	2b39      	cmp	r3, #57	; 0x39
 801a4c6:	d802      	bhi.n	801a4ce <_Z10parseToHexcc+0x26>
 801a4c8:	79fb      	ldrb	r3, [r7, #7]
 801a4ca:	3b30      	subs	r3, #48	; 0x30
 801a4cc:	73fb      	strb	r3, [r7, #15]
    if ('a' <= c0 && c0 <= 'f') result = 10 + c0 - 'a';
 801a4ce:	79fb      	ldrb	r3, [r7, #7]
 801a4d0:	2b60      	cmp	r3, #96	; 0x60
 801a4d2:	d905      	bls.n	801a4e0 <_Z10parseToHexcc+0x38>
 801a4d4:	79fb      	ldrb	r3, [r7, #7]
 801a4d6:	2b66      	cmp	r3, #102	; 0x66
 801a4d8:	d802      	bhi.n	801a4e0 <_Z10parseToHexcc+0x38>
 801a4da:	79fb      	ldrb	r3, [r7, #7]
 801a4dc:	3b57      	subs	r3, #87	; 0x57
 801a4de:	73fb      	strb	r3, [r7, #15]
    if ('A' <= c0 && c0 <= 'F') result = 10 + c0 - 'A';
 801a4e0:	79fb      	ldrb	r3, [r7, #7]
 801a4e2:	2b40      	cmp	r3, #64	; 0x40
 801a4e4:	d905      	bls.n	801a4f2 <_Z10parseToHexcc+0x4a>
 801a4e6:	79fb      	ldrb	r3, [r7, #7]
 801a4e8:	2b46      	cmp	r3, #70	; 0x46
 801a4ea:	d802      	bhi.n	801a4f2 <_Z10parseToHexcc+0x4a>
 801a4ec:	79fb      	ldrb	r3, [r7, #7]
 801a4ee:	3b37      	subs	r3, #55	; 0x37
 801a4f0:	73fb      	strb	r3, [r7, #15]

    result <<= 4 ;
 801a4f2:	7bfb      	ldrb	r3, [r7, #15]
 801a4f4:	011b      	lsls	r3, r3, #4
 801a4f6:	73fb      	strb	r3, [r7, #15]

    if ('0' <= c1 && c1 <= '9') result |= c1 - '0';
 801a4f8:	79bb      	ldrb	r3, [r7, #6]
 801a4fa:	2b2f      	cmp	r3, #47	; 0x2f
 801a4fc:	d90b      	bls.n	801a516 <_Z10parseToHexcc+0x6e>
 801a4fe:	79bb      	ldrb	r3, [r7, #6]
 801a500:	2b39      	cmp	r3, #57	; 0x39
 801a502:	d808      	bhi.n	801a516 <_Z10parseToHexcc+0x6e>
 801a504:	79bb      	ldrb	r3, [r7, #6]
 801a506:	3b30      	subs	r3, #48	; 0x30
 801a508:	b2db      	uxtb	r3, r3
 801a50a:	b25a      	sxtb	r2, r3
 801a50c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a510:	4313      	orrs	r3, r2
 801a512:	b25b      	sxtb	r3, r3
 801a514:	73fb      	strb	r3, [r7, #15]
    if ('a' <= c1 && c1 <= 'f') result |= 10 + c1 - 'a';
 801a516:	79bb      	ldrb	r3, [r7, #6]
 801a518:	2b60      	cmp	r3, #96	; 0x60
 801a51a:	d90b      	bls.n	801a534 <_Z10parseToHexcc+0x8c>
 801a51c:	79bb      	ldrb	r3, [r7, #6]
 801a51e:	2b66      	cmp	r3, #102	; 0x66
 801a520:	d808      	bhi.n	801a534 <_Z10parseToHexcc+0x8c>
 801a522:	79bb      	ldrb	r3, [r7, #6]
 801a524:	3b57      	subs	r3, #87	; 0x57
 801a526:	b2db      	uxtb	r3, r3
 801a528:	b25a      	sxtb	r2, r3
 801a52a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a52e:	4313      	orrs	r3, r2
 801a530:	b25b      	sxtb	r3, r3
 801a532:	73fb      	strb	r3, [r7, #15]
    if ('A' <= c1 && c1 <= 'F') result |= 10 + c1 - 'A';
 801a534:	79bb      	ldrb	r3, [r7, #6]
 801a536:	2b40      	cmp	r3, #64	; 0x40
 801a538:	d90b      	bls.n	801a552 <_Z10parseToHexcc+0xaa>
 801a53a:	79bb      	ldrb	r3, [r7, #6]
 801a53c:	2b46      	cmp	r3, #70	; 0x46
 801a53e:	d808      	bhi.n	801a552 <_Z10parseToHexcc+0xaa>
 801a540:	79bb      	ldrb	r3, [r7, #6]
 801a542:	3b37      	subs	r3, #55	; 0x37
 801a544:	b2db      	uxtb	r3, r3
 801a546:	b25a      	sxtb	r2, r3
 801a548:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a54c:	4313      	orrs	r3, r2
 801a54e:	b25b      	sxtb	r3, r3
 801a550:	73fb      	strb	r3, [r7, #15]

    return result ;
 801a552:	7bfb      	ldrb	r3, [r7, #15]

}
 801a554:	4618      	mov	r0, r3
 801a556:	3714      	adds	r7, #20
 801a558:	46bd      	mov	sp, r7
 801a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a55e:	4770      	bx	lr

0801a560 <_Z16CS_getDoubleWordm>:



/*____________________________________________________________________________________________________________________________________________*/
BF_dWordHArrTypeDef CS_getDoubleWord( uint32_t _address ) {
 801a560:	b5b0      	push	{r4, r5, r7, lr}
 801a562:	b090      	sub	sp, #64	; 0x40
 801a564:	af00      	add	r7, sp, #0
 801a566:	6078      	str	r0, [r7, #4]
 801a568:	6039      	str	r1, [r7, #0]
		for( int i = 0 ; i < 8 ; i++ )
			result.data[i] = dataZone[ i + 9 ] ;
	}


	return (BF_dWordHArrTypeDef)result ;
 801a56a:	466b      	mov	r3, sp
 801a56c:	461d      	mov	r5, r3
	result.isLastDWord = false ;
 801a56e:	4b61      	ldr	r3, [pc, #388]	; (801a6f4 <_Z16CS_getDoubleWordm+0x194>)
 801a570:	2200      	movs	r2, #0
 801a572:	701a      	strb	r2, [r3, #0]
	memset( result.data, 0x00, 8 ) ;
 801a574:	2208      	movs	r2, #8
 801a576:	2100      	movs	r1, #0
 801a578:	485f      	ldr	r0, [pc, #380]	; (801a6f8 <_Z16CS_getDoubleWordm+0x198>)
 801a57a:	f004 ff31 	bl	801f3e0 <memset>
	char cmd[ strlen( newAppFW_name ) + 30 ] = {0} ;
 801a57e:	485f      	ldr	r0, [pc, #380]	; (801a6fc <_Z16CS_getDoubleWordm+0x19c>)
 801a580:	f7fe fe76 	bl	8019270 <strlen>
 801a584:	4603      	mov	r3, r0
 801a586:	331d      	adds	r3, #29
 801a588:	461c      	mov	r4, r3
 801a58a:	637c      	str	r4, [r7, #52]	; 0x34
 801a58c:	4623      	mov	r3, r4
 801a58e:	3301      	adds	r3, #1
 801a590:	4618      	mov	r0, r3
 801a592:	f04f 0100 	mov.w	r1, #0
 801a596:	f04f 0200 	mov.w	r2, #0
 801a59a:	f04f 0300 	mov.w	r3, #0
 801a59e:	00cb      	lsls	r3, r1, #3
 801a5a0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 801a5a4:	00c2      	lsls	r2, r0, #3
 801a5a6:	4623      	mov	r3, r4
 801a5a8:	3301      	adds	r3, #1
 801a5aa:	4618      	mov	r0, r3
 801a5ac:	f04f 0100 	mov.w	r1, #0
 801a5b0:	f04f 0200 	mov.w	r2, #0
 801a5b4:	f04f 0300 	mov.w	r3, #0
 801a5b8:	00cb      	lsls	r3, r1, #3
 801a5ba:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 801a5be:	00c2      	lsls	r2, r0, #3
 801a5c0:	4623      	mov	r3, r4
 801a5c2:	3301      	adds	r3, #1
 801a5c4:	3307      	adds	r3, #7
 801a5c6:	08db      	lsrs	r3, r3, #3
 801a5c8:	00db      	lsls	r3, r3, #3
 801a5ca:	ebad 0d03 	sub.w	sp, sp, r3
 801a5ce:	466b      	mov	r3, sp
 801a5d0:	3300      	adds	r3, #0
 801a5d2:	633b      	str	r3, [r7, #48]	; 0x30
 801a5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5d6:	2200      	movs	r2, #0
 801a5d8:	701a      	strb	r2, [r3, #0]
 801a5da:	1c5a      	adds	r2, r3, #1
 801a5dc:	1e63      	subs	r3, r4, #1
 801a5de:	2b00      	cmp	r3, #0
 801a5e0:	db04      	blt.n	801a5ec <_Z16CS_getDoubleWordm+0x8c>
 801a5e2:	2100      	movs	r1, #0
 801a5e4:	7011      	strb	r1, [r2, #0]
 801a5e6:	3201      	adds	r2, #1
 801a5e8:	3b01      	subs	r3, #1
 801a5ea:	e7f8      	b.n	801a5de <_Z16CS_getDoubleWordm+0x7e>
	sprintf( cmd, "AT+CFTRANTX=\"E:/%s\",%lu,8\r\n", newAppFW_name, _address ) ;
 801a5ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a5ee:	683b      	ldr	r3, [r7, #0]
 801a5f0:	4a42      	ldr	r2, [pc, #264]	; (801a6fc <_Z16CS_getDoubleWordm+0x19c>)
 801a5f2:	4943      	ldr	r1, [pc, #268]	; (801a700 <_Z16CS_getDoubleWordm+0x1a0>)
 801a5f4:	f005 fe7a 	bl	80202ec <siprintf>
	Sim7600.sendCmd( cmd, "+CFTRANTX: DATA", 5000 ) ;
 801a5f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a5fa:	f241 3388 	movw	r3, #5000	; 0x1388
 801a5fe:	4a41      	ldr	r2, [pc, #260]	; (801a704 <_Z16CS_getDoubleWordm+0x1a4>)
 801a600:	4841      	ldr	r0, [pc, #260]	; (801a708 <_Z16CS_getDoubleWordm+0x1a8>)
 801a602:	f004 fc43 	bl	801ee8c <_ZN7Sim76007sendCmdEPKcS1_j>
	char dataZone[36] = {0} ;
 801a606:	2300      	movs	r3, #0
 801a608:	60bb      	str	r3, [r7, #8]
 801a60a:	f107 030c 	add.w	r3, r7, #12
 801a60e:	2220      	movs	r2, #32
 801a610:	2100      	movs	r1, #0
 801a612:	4618      	mov	r0, r3
 801a614:	f004 fee4 	bl	801f3e0 <memset>
	memcpy( dataZone, strstr( Sim7600.rxData.c_str(), "DATA" ), 35 ) ;
 801a618:	483c      	ldr	r0, [pc, #240]	; (801a70c <_Z16CS_getDoubleWordm+0x1ac>)
 801a61a:	f004 fe53 	bl	801f2c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 801a61e:	4603      	mov	r3, r0
 801a620:	493b      	ldr	r1, [pc, #236]	; (801a710 <_Z16CS_getDoubleWordm+0x1b0>)
 801a622:	4618      	mov	r0, r3
 801a624:	f005 fe82 	bl	802032c <strstr>
 801a628:	4601      	mov	r1, r0
 801a62a:	f107 0308 	add.w	r3, r7, #8
 801a62e:	2223      	movs	r2, #35	; 0x23
 801a630:	4618      	mov	r0, r3
 801a632:	f004 fead 	bl	801f390 <memcpy>
	uint8_t restNbData = parseToHex( dataZone[6], dataZone[7] ) ;
 801a636:	7bbb      	ldrb	r3, [r7, #14]
 801a638:	7bfa      	ldrb	r2, [r7, #15]
 801a63a:	4611      	mov	r1, r2
 801a63c:	4618      	mov	r0, r3
 801a63e:	f7ff ff33 	bl	801a4a8 <_Z10parseToHexcc>
 801a642:	4603      	mov	r3, r0
 801a644:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if( strstr( dataZone, "DATA" ) == NULL )
 801a648:	f107 0308 	add.w	r3, r7, #8
 801a64c:	4930      	ldr	r1, [pc, #192]	; (801a710 <_Z16CS_getDoubleWordm+0x1b0>)
 801a64e:	4618      	mov	r0, r3
 801a650:	f7ff fd26 	bl	801a0a0 <_ZSt6strstrPcPKc>
 801a654:	4603      	mov	r3, r0
 801a656:	2b00      	cmp	r3, #0
 801a658:	bf0c      	ite	eq
 801a65a:	2301      	moveq	r3, #1
 801a65c:	2300      	movne	r3, #0
 801a65e:	b2db      	uxtb	r3, r3
 801a660:	2b00      	cmp	r3, #0
 801a662:	d003      	beq.n	801a66c <_Z16CS_getDoubleWordm+0x10c>
		result.isLastDWord = true ;
 801a664:	4b23      	ldr	r3, [pc, #140]	; (801a6f4 <_Z16CS_getDoubleWordm+0x194>)
 801a666:	2201      	movs	r2, #1
 801a668:	701a      	strb	r2, [r3, #0]
 801a66a:	e034      	b.n	801a6d6 <_Z16CS_getDoubleWordm+0x176>
	else if( restNbData < 0x08  ) {
 801a66c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a670:	2b07      	cmp	r3, #7
 801a672:	d81a      	bhi.n	801a6aa <_Z16CS_getDoubleWordm+0x14a>
		result.isLastDWord = true ;
 801a674:	4b1f      	ldr	r3, [pc, #124]	; (801a6f4 <_Z16CS_getDoubleWordm+0x194>)
 801a676:	2201      	movs	r2, #1
 801a678:	701a      	strb	r2, [r3, #0]
		for( int i = 0 ; i < restNbData ; i++ )
 801a67a:	2300      	movs	r3, #0
 801a67c:	63bb      	str	r3, [r7, #56]	; 0x38
 801a67e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a682:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a684:	429a      	cmp	r2, r3
 801a686:	da26      	bge.n	801a6d6 <_Z16CS_getDoubleWordm+0x176>
			result.data[i] = dataZone[ i + 9 ] ;
 801a688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a68a:	3309      	adds	r3, #9
 801a68c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801a690:	4413      	add	r3, r2
 801a692:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 801a696:	4a17      	ldr	r2, [pc, #92]	; (801a6f4 <_Z16CS_getDoubleWordm+0x194>)
 801a698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a69a:	4413      	add	r3, r2
 801a69c:	3301      	adds	r3, #1
 801a69e:	460a      	mov	r2, r1
 801a6a0:	701a      	strb	r2, [r3, #0]
		for( int i = 0 ; i < restNbData ; i++ )
 801a6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a6a4:	3301      	adds	r3, #1
 801a6a6:	63bb      	str	r3, [r7, #56]	; 0x38
 801a6a8:	e7e9      	b.n	801a67e <_Z16CS_getDoubleWordm+0x11e>
		for( int i = 0 ; i < 8 ; i++ )
 801a6aa:	2300      	movs	r3, #0
 801a6ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 801a6ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a6b0:	2b07      	cmp	r3, #7
 801a6b2:	dc10      	bgt.n	801a6d6 <_Z16CS_getDoubleWordm+0x176>
			result.data[i] = dataZone[ i + 9 ] ;
 801a6b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a6b6:	3309      	adds	r3, #9
 801a6b8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801a6bc:	4413      	add	r3, r2
 801a6be:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 801a6c2:	4a0c      	ldr	r2, [pc, #48]	; (801a6f4 <_Z16CS_getDoubleWordm+0x194>)
 801a6c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a6c6:	4413      	add	r3, r2
 801a6c8:	3301      	adds	r3, #1
 801a6ca:	460a      	mov	r2, r1
 801a6cc:	701a      	strb	r2, [r3, #0]
		for( int i = 0 ; i < 8 ; i++ )
 801a6ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a6d0:	3301      	adds	r3, #1
 801a6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 801a6d4:	e7eb      	b.n	801a6ae <_Z16CS_getDoubleWordm+0x14e>
	return (BF_dWordHArrTypeDef)result ;
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	4906      	ldr	r1, [pc, #24]	; (801a6f4 <_Z16CS_getDoubleWordm+0x194>)
 801a6da:	461a      	mov	r2, r3
 801a6dc:	460b      	mov	r3, r1
 801a6de:	cb03      	ldmia	r3!, {r0, r1}
 801a6e0:	6010      	str	r0, [r2, #0]
 801a6e2:	6051      	str	r1, [r2, #4]
 801a6e4:	781b      	ldrb	r3, [r3, #0]
 801a6e6:	7213      	strb	r3, [r2, #8]
 801a6e8:	46ad      	mov	sp, r5
}
 801a6ea:	6878      	ldr	r0, [r7, #4]
 801a6ec:	3740      	adds	r7, #64	; 0x40
 801a6ee:	46bd      	mov	sp, r7
 801a6f0:	bdb0      	pop	{r4, r5, r7, pc}
 801a6f2:	bf00      	nop
 801a6f4:	20000280 	.word	0x20000280
 801a6f8:	20000281 	.word	0x20000281
 801a6fc:	20000268 	.word	0x20000268
 801a700:	08023dfc 	.word	0x08023dfc
 801a704:	08023e18 	.word	0x08023e18
 801a708:	20000220 	.word	0x20000220
 801a70c:	20000224 	.word	0x20000224
 801a710:	08023e28 	.word	0x08023e28

0801a714 <_Z19CF_writeBFFWtoFlashm>:



/*____________________________________________________________________________________________________________________________________________*/
bool CF_writeBFFWtoFlash( uint32_t _baseAddress ) {
 801a714:	b5b0      	push	{r4, r5, r7, lr}
 801a716:	b08c      	sub	sp, #48	; 0x30
 801a718:	af00      	add	r7, sp, #0
 801a71a:	6178      	str	r0, [r7, #20]
	// Before start
	Sim7600.sendCmd( "AT", "OK", 200 ) ;
 801a71c:	23c8      	movs	r3, #200	; 0xc8
 801a71e:	4a71      	ldr	r2, [pc, #452]	; (801a8e4 <_Z19CF_writeBFFWtoFlashm+0x1d0>)
 801a720:	4971      	ldr	r1, [pc, #452]	; (801a8e8 <_Z19CF_writeBFFWtoFlashm+0x1d4>)
 801a722:	4872      	ldr	r0, [pc, #456]	; (801a8ec <_Z19CF_writeBFFWtoFlashm+0x1d8>)
 801a724:	f004 fbb2 	bl	801ee8c <_ZN7Sim76007sendCmdEPKcS1_j>
	Sim7600.sendCmd( "AT+FSCD=E:", "OK", 200 ) ;
 801a728:	23c8      	movs	r3, #200	; 0xc8
 801a72a:	4a6e      	ldr	r2, [pc, #440]	; (801a8e4 <_Z19CF_writeBFFWtoFlashm+0x1d0>)
 801a72c:	4970      	ldr	r1, [pc, #448]	; (801a8f0 <_Z19CF_writeBFFWtoFlashm+0x1dc>)
 801a72e:	486f      	ldr	r0, [pc, #444]	; (801a8ec <_Z19CF_writeBFFWtoFlashm+0x1d8>)
 801a730:	f004 fbac 	bl	801ee8c <_ZN7Sim76007sendCmdEPKcS1_j>
	Sim7600.sendCmd( "AT+CATR=1", "OK", 200 ) ;
 801a734:	23c8      	movs	r3, #200	; 0xc8
 801a736:	4a6b      	ldr	r2, [pc, #428]	; (801a8e4 <_Z19CF_writeBFFWtoFlashm+0x1d0>)
 801a738:	496e      	ldr	r1, [pc, #440]	; (801a8f4 <_Z19CF_writeBFFWtoFlashm+0x1e0>)
 801a73a:	486c      	ldr	r0, [pc, #432]	; (801a8ec <_Z19CF_writeBFFWtoFlashm+0x1d8>)
 801a73c:	f004 fba6 	bl	801ee8c <_ZN7Sim76007sendCmdEPKcS1_j>
	Sim7600.memreset() ;
 801a740:	486a      	ldr	r0, [pc, #424]	; (801a8ec <_Z19CF_writeBFFWtoFlashm+0x1d8>)
 801a742:	f004 fb8f 	bl	801ee64 <_ZN7Sim76008memresetEv>

	memset( newAppFW_name, 0, 25 ) ;
 801a746:	2219      	movs	r2, #25
 801a748:	2100      	movs	r1, #0
 801a74a:	486b      	ldr	r0, [pc, #428]	; (801a8f8 <_Z19CF_writeBFFWtoFlashm+0x1e4>)
 801a74c:	f004 fe48 	bl	801f3e0 <memset>
	memcpy( newAppFW_name, getOnSimVersion(), 24 ) ;
 801a750:	f000 f996 	bl	801aa80 <_Z15getOnSimVersionv>
 801a754:	4603      	mov	r3, r0
 801a756:	4a68      	ldr	r2, [pc, #416]	; (801a8f8 <_Z19CF_writeBFFWtoFlashm+0x1e4>)
 801a758:	4614      	mov	r4, r2
 801a75a:	461d      	mov	r5, r3
 801a75c:	6828      	ldr	r0, [r5, #0]
 801a75e:	6869      	ldr	r1, [r5, #4]
 801a760:	68aa      	ldr	r2, [r5, #8]
 801a762:	68eb      	ldr	r3, [r5, #12]
 801a764:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a766:	6928      	ldr	r0, [r5, #16]
 801a768:	6969      	ldr	r1, [r5, #20]
 801a76a:	c403      	stmia	r4!, {r0, r1}

	bool result = false ;
 801a76c:	2300      	movs	r3, #0
 801a76e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t address = 0x00 ;
 801a772:	2300      	movs	r3, #0
 801a774:	62bb      	str	r3, [r7, #40]	; 0x28
	BF_dWordHArrTypeDef wDWord = { 0, 0 } ;
 801a776:	2300      	movs	r3, #0
 801a778:	773b      	strb	r3, [r7, #28]
 801a77a:	4b60      	ldr	r3, [pc, #384]	; (801a8fc <_Z19CF_writeBFFWtoFlashm+0x1e8>)
 801a77c:	781b      	ldrb	r3, [r3, #0]
 801a77e:	777b      	strb	r3, [r7, #29]
 801a780:	f107 031e 	add.w	r3, r7, #30
 801a784:	2200      	movs	r2, #0
 801a786:	601a      	str	r2, [r3, #0]
 801a788:	f8c3 2003 	str.w	r2, [r3, #3]
	while(1) {
		// Lấy double word
		wDWord = CS_getDoubleWord( address ) ;
 801a78c:	463b      	mov	r3, r7
 801a78e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a790:	4618      	mov	r0, r3
 801a792:	f7ff fee5 	bl	801a560 <_Z16CS_getDoubleWordm>
 801a796:	f107 031c 	add.w	r3, r7, #28
 801a79a:	463a      	mov	r2, r7
 801a79c:	6810      	ldr	r0, [r2, #0]
 801a79e:	6851      	ldr	r1, [r2, #4]
 801a7a0:	c303      	stmia	r3!, {r0, r1}
 801a7a2:	7a12      	ldrb	r2, [r2, #8]
 801a7a4:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin( user_led_GPIO_Port, user_led_Pin ) ;
 801a7a6:	2120      	movs	r1, #32
 801a7a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801a7ac:	f001 fbde 	bl	801bf6c <HAL_GPIO_TogglePin>

		// Kiểm tra có phải đã đến data cuối cùng chưa ?
		if( ( wDWord.isLastDWord == true ) && ( address > 0x800 ) ) {
 801a7b0:	7f3b      	ldrb	r3, [r7, #28]
 801a7b2:	2b01      	cmp	r3, #1
 801a7b4:	d111      	bne.n	801a7da <_Z19CF_writeBFFWtoFlashm+0xc6>
 801a7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a7bc:	d90d      	bls.n	801a7da <_Z19CF_writeBFFWtoFlashm+0xc6>
			Flash_write_doubleWord( address + _baseAddress, (const uint8_t*)wDWord.data ) ;
 801a7be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a7c0:	697b      	ldr	r3, [r7, #20]
 801a7c2:	441a      	add	r2, r3
 801a7c4:	f107 031c 	add.w	r3, r7, #28
 801a7c8:	3301      	adds	r3, #1
 801a7ca:	4619      	mov	r1, r3
 801a7cc:	4610      	mov	r0, r2
 801a7ce:	f004 f99a 	bl	801eb06 <_Z22Flash_write_doubleWordmPKh>
			result = true ;
 801a7d2:	2301      	movs	r3, #1
 801a7d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break ;
 801a7d8:	e075      	b.n	801a8c6 <_Z19CF_writeBFFWtoFlashm+0x1b2>

		// Trường hợp này là bị lỗi chớ k phải đã hoàn thành
		}else if( ( wDWord.isLastDWord == true ) && ( address < 0x800 )  ){
 801a7da:	7f3b      	ldrb	r3, [r7, #28]
 801a7dc:	2b01      	cmp	r3, #1
 801a7de:	d103      	bne.n	801a7e8 <_Z19CF_writeBFFWtoFlashm+0xd4>
 801a7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a7e6:	d36e      	bcc.n	801a8c6 <_Z19CF_writeBFFWtoFlashm+0x1b2>
			break ;

		// còn nếu chưa thì cứ tiếp tục
		}else {
			Flash_write_doubleWord( address + _baseAddress, (const uint8_t*)wDWord.data ) ;
 801a7e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a7ea:	697b      	ldr	r3, [r7, #20]
 801a7ec:	441a      	add	r2, r3
 801a7ee:	f107 031c 	add.w	r3, r7, #28
 801a7f2:	3301      	adds	r3, #1
 801a7f4:	4619      	mov	r1, r3
 801a7f6:	4610      	mov	r0, r2
 801a7f8:	f004 f985 	bl	801eb06 <_Z22Flash_write_doubleWordmPKh>
			address += 0x08 ;
 801a7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7fe:	3308      	adds	r3, #8
 801a800:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		HAL_GPIO_TogglePin( user_led_GPIO_Port, user_led_Pin ) ;
 801a802:	2120      	movs	r1, #32
 801a804:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801a808:	f001 fbb0 	bl	801bf6c <HAL_GPIO_TogglePin>
		// Debug
		if( address == 0x0C60 )
 801a80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a80e:	f5b3 6f46 	cmp.w	r3, #3168	; 0xc60
 801a812:	d104      	bne.n	801a81e <_Z19CF_writeBFFWtoFlashm+0x10a>
			Terminal.println( "...10%..." ) ;
 801a814:	493a      	ldr	r1, [pc, #232]	; (801a900 <_Z19CF_writeBFFWtoFlashm+0x1ec>)
 801a816:	483b      	ldr	r0, [pc, #236]	; (801a904 <_Z19CF_writeBFFWtoFlashm+0x1f0>)
 801a818:	f004 fc4e 	bl	801f0b8 <_ZN8Terminal7printlnEPKc>
 801a81c:	e04d      	b.n	801a8ba <_Z19CF_writeBFFWtoFlashm+0x1a6>
		else if( address == 0x18E0 )
 801a81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a820:	f5b3 5fc7 	cmp.w	r3, #6368	; 0x18e0
 801a824:	d104      	bne.n	801a830 <_Z19CF_writeBFFWtoFlashm+0x11c>
			Terminal.println( "...20%..." ) ;
 801a826:	4938      	ldr	r1, [pc, #224]	; (801a908 <_Z19CF_writeBFFWtoFlashm+0x1f4>)
 801a828:	4836      	ldr	r0, [pc, #216]	; (801a904 <_Z19CF_writeBFFWtoFlashm+0x1f0>)
 801a82a:	f004 fc45 	bl	801f0b8 <_ZN8Terminal7printlnEPKc>
 801a82e:	e044      	b.n	801a8ba <_Z19CF_writeBFFWtoFlashm+0x1a6>
		else if( address == 0x2560 )
 801a830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a832:	f242 5260 	movw	r2, #9568	; 0x2560
 801a836:	4293      	cmp	r3, r2
 801a838:	d104      	bne.n	801a844 <_Z19CF_writeBFFWtoFlashm+0x130>
			Terminal.println( "...30%..." ) ;
 801a83a:	4934      	ldr	r1, [pc, #208]	; (801a90c <_Z19CF_writeBFFWtoFlashm+0x1f8>)
 801a83c:	4831      	ldr	r0, [pc, #196]	; (801a904 <_Z19CF_writeBFFWtoFlashm+0x1f0>)
 801a83e:	f004 fc3b 	bl	801f0b8 <_ZN8Terminal7printlnEPKc>
 801a842:	e03a      	b.n	801a8ba <_Z19CF_writeBFFWtoFlashm+0x1a6>
		else if( address == 0x31E0 )
 801a844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a846:	f243 12e0 	movw	r2, #12768	; 0x31e0
 801a84a:	4293      	cmp	r3, r2
 801a84c:	d104      	bne.n	801a858 <_Z19CF_writeBFFWtoFlashm+0x144>
			Terminal.println( "...40%..." ) ;
 801a84e:	4930      	ldr	r1, [pc, #192]	; (801a910 <_Z19CF_writeBFFWtoFlashm+0x1fc>)
 801a850:	482c      	ldr	r0, [pc, #176]	; (801a904 <_Z19CF_writeBFFWtoFlashm+0x1f0>)
 801a852:	f004 fc31 	bl	801f0b8 <_ZN8Terminal7printlnEPKc>
 801a856:	e030      	b.n	801a8ba <_Z19CF_writeBFFWtoFlashm+0x1a6>
		else if( address == 0x3E60 )
 801a858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a85a:	f643 6260 	movw	r2, #15968	; 0x3e60
 801a85e:	4293      	cmp	r3, r2
 801a860:	d104      	bne.n	801a86c <_Z19CF_writeBFFWtoFlashm+0x158>
			Terminal.println( "...50%..." ) ;
 801a862:	492c      	ldr	r1, [pc, #176]	; (801a914 <_Z19CF_writeBFFWtoFlashm+0x200>)
 801a864:	4827      	ldr	r0, [pc, #156]	; (801a904 <_Z19CF_writeBFFWtoFlashm+0x1f0>)
 801a866:	f004 fc27 	bl	801f0b8 <_ZN8Terminal7printlnEPKc>
 801a86a:	e026      	b.n	801a8ba <_Z19CF_writeBFFWtoFlashm+0x1a6>
		else if( address == 0x4AE0 )
 801a86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a86e:	f644 22e0 	movw	r2, #19168	; 0x4ae0
 801a872:	4293      	cmp	r3, r2
 801a874:	d104      	bne.n	801a880 <_Z19CF_writeBFFWtoFlashm+0x16c>
			Terminal.println( "...60%..." ) ;
 801a876:	4928      	ldr	r1, [pc, #160]	; (801a918 <_Z19CF_writeBFFWtoFlashm+0x204>)
 801a878:	4822      	ldr	r0, [pc, #136]	; (801a904 <_Z19CF_writeBFFWtoFlashm+0x1f0>)
 801a87a:	f004 fc1d 	bl	801f0b8 <_ZN8Terminal7printlnEPKc>
 801a87e:	e01c      	b.n	801a8ba <_Z19CF_writeBFFWtoFlashm+0x1a6>
		else if( address == 0x5760 )
 801a880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a882:	f245 7260 	movw	r2, #22368	; 0x5760
 801a886:	4293      	cmp	r3, r2
 801a888:	d104      	bne.n	801a894 <_Z19CF_writeBFFWtoFlashm+0x180>
			Terminal.println( "...70%..." ) ;
 801a88a:	4924      	ldr	r1, [pc, #144]	; (801a91c <_Z19CF_writeBFFWtoFlashm+0x208>)
 801a88c:	481d      	ldr	r0, [pc, #116]	; (801a904 <_Z19CF_writeBFFWtoFlashm+0x1f0>)
 801a88e:	f004 fc13 	bl	801f0b8 <_ZN8Terminal7printlnEPKc>
 801a892:	e012      	b.n	801a8ba <_Z19CF_writeBFFWtoFlashm+0x1a6>
		else if( address == 0x63E0 )
 801a894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a896:	f246 32e0 	movw	r2, #25568	; 0x63e0
 801a89a:	4293      	cmp	r3, r2
 801a89c:	d104      	bne.n	801a8a8 <_Z19CF_writeBFFWtoFlashm+0x194>
			Terminal.println( "...80%..." ) ;
 801a89e:	4920      	ldr	r1, [pc, #128]	; (801a920 <_Z19CF_writeBFFWtoFlashm+0x20c>)
 801a8a0:	4818      	ldr	r0, [pc, #96]	; (801a904 <_Z19CF_writeBFFWtoFlashm+0x1f0>)
 801a8a2:	f004 fc09 	bl	801f0b8 <_ZN8Terminal7printlnEPKc>
 801a8a6:	e008      	b.n	801a8ba <_Z19CF_writeBFFWtoFlashm+0x1a6>
		else if( address == 0x76A0 )
 801a8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8aa:	f247 62a0 	movw	r2, #30368	; 0x76a0
 801a8ae:	4293      	cmp	r3, r2
 801a8b0:	d103      	bne.n	801a8ba <_Z19CF_writeBFFWtoFlashm+0x1a6>
			Terminal.println( "...90%..." ) ;
 801a8b2:	491c      	ldr	r1, [pc, #112]	; (801a924 <_Z19CF_writeBFFWtoFlashm+0x210>)
 801a8b4:	4813      	ldr	r0, [pc, #76]	; (801a904 <_Z19CF_writeBFFWtoFlashm+0x1f0>)
 801a8b6:	f004 fbff 	bl	801f0b8 <_ZN8Terminal7printlnEPKc>

		HAL_GPIO_TogglePin( user_led_GPIO_Port, user_led_Pin ) ;
 801a8ba:	2120      	movs	r1, #32
 801a8bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801a8c0:	f001 fb54 	bl	801bf6c <HAL_GPIO_TogglePin>
		wDWord = CS_getDoubleWord( address ) ;
 801a8c4:	e762      	b.n	801a78c <_Z19CF_writeBFFWtoFlashm+0x78>


	}

	if( result == true )
 801a8c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a8ca:	2b01      	cmp	r3, #1
 801a8cc:	d103      	bne.n	801a8d6 <_Z19CF_writeBFFWtoFlashm+0x1c2>
		Terminal.println( "...100%... Done." ) ;
 801a8ce:	4916      	ldr	r1, [pc, #88]	; (801a928 <_Z19CF_writeBFFWtoFlashm+0x214>)
 801a8d0:	480c      	ldr	r0, [pc, #48]	; (801a904 <_Z19CF_writeBFFWtoFlashm+0x1f0>)
 801a8d2:	f004 fbf1 	bl	801f0b8 <_ZN8Terminal7printlnEPKc>

	return result ;
 801a8d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801a8da:	4618      	mov	r0, r3
 801a8dc:	3730      	adds	r7, #48	; 0x30
 801a8de:	46bd      	mov	sp, r7
 801a8e0:	bdb0      	pop	{r4, r5, r7, pc}
 801a8e2:	bf00      	nop
 801a8e4:	08023d04 	.word	0x08023d04
 801a8e8:	08023d08 	.word	0x08023d08
 801a8ec:	20000220 	.word	0x20000220
 801a8f0:	08023d1c 	.word	0x08023d1c
 801a8f4:	08023d28 	.word	0x08023d28
 801a8f8:	20000268 	.word	0x20000268
 801a8fc:	08023eb0 	.word	0x08023eb0
 801a900:	08023e30 	.word	0x08023e30
 801a904:	20000244 	.word	0x20000244
 801a908:	08023e3c 	.word	0x08023e3c
 801a90c:	08023e48 	.word	0x08023e48
 801a910:	08023e54 	.word	0x08023e54
 801a914:	08023e60 	.word	0x08023e60
 801a918:	08023e6c 	.word	0x08023e6c
 801a91c:	08023e78 	.word	0x08023e78
 801a920:	08023e84 	.word	0x08023e84
 801a924:	08023e90 	.word	0x08023e90
 801a928:	08023e9c 	.word	0x08023e9c
 801a92c:	00000000 	.word	0x00000000

0801a930 <_Z17getCurrentVersionv>:



/*__________________________________________________________________________________________________________________________________________*/
char *getCurrentVersion() {
 801a930:	b580      	push	{r7, lr}
 801a932:	b08a      	sub	sp, #40	; 0x28
 801a934:	af00      	add	r7, sp, #0
	// version: 1.0.0FF
	static char version[24] ;
	memset( version, 0 , 24 ) ;
 801a936:	2218      	movs	r2, #24
 801a938:	2100      	movs	r1, #0
 801a93a:	484f      	ldr	r0, [pc, #316]	; (801aa78 <_Z17getCurrentVersionv+0x148>)
 801a93c:	f004 fd50 	bl	801f3e0 <memset>

	char firstDW[8] = {0} ;
 801a940:	2300      	movs	r3, #0
 801a942:	617b      	str	r3, [r7, #20]
 801a944:	2300      	movs	r3, #0
 801a946:	61bb      	str	r3, [r7, #24]
	char secondDW[8] = {0} ;
 801a948:	2300      	movs	r3, #0
 801a94a:	60fb      	str	r3, [r7, #12]
 801a94c:	2300      	movs	r3, #0
 801a94e:	613b      	str	r3, [r7, #16]
	char thirdDW[8] = {0} ;
 801a950:	2300      	movs	r3, #0
 801a952:	607b      	str	r3, [r7, #4]
 801a954:	2300      	movs	r3, #0
 801a956:	60bb      	str	r3, [r7, #8]
	memcpy( firstDW, Flash_read_doubleWord(0x080FA000), 8 ) ;
 801a958:	4848      	ldr	r0, [pc, #288]	; (801aa7c <_Z17getCurrentVersionv+0x14c>)
 801a95a:	f04f 0100 	mov.w	r1, #0
 801a95e:	f004 f9c7 	bl	801ecf0 <_Z21Flash_read_doubleWordy>
 801a962:	4602      	mov	r2, r0
 801a964:	f107 0314 	add.w	r3, r7, #20
 801a968:	6810      	ldr	r0, [r2, #0]
 801a96a:	6851      	ldr	r1, [r2, #4]
 801a96c:	c303      	stmia	r3!, {r0, r1}
	memcpy( secondDW, Flash_read_doubleWord(0x080FA008), 8 ) ;
 801a96e:	a13e      	add	r1, pc, #248	; (adr r1, 801aa68 <_Z17getCurrentVersionv+0x138>)
 801a970:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a974:	f004 f9bc 	bl	801ecf0 <_Z21Flash_read_doubleWordy>
 801a978:	4602      	mov	r2, r0
 801a97a:	f107 030c 	add.w	r3, r7, #12
 801a97e:	6810      	ldr	r0, [r2, #0]
 801a980:	6851      	ldr	r1, [r2, #4]
 801a982:	c303      	stmia	r3!, {r0, r1}
	memcpy( thirdDW, Flash_read_doubleWord(0x080FA010), 8 ) ;
 801a984:	a13a      	add	r1, pc, #232	; (adr r1, 801aa70 <_Z17getCurrentVersionv+0x140>)
 801a986:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a98a:	f004 f9b1 	bl	801ecf0 <_Z21Flash_read_doubleWordy>
 801a98e:	4602      	mov	r2, r0
 801a990:	1d3b      	adds	r3, r7, #4
 801a992:	6810      	ldr	r0, [r2, #0]
 801a994:	6851      	ldr	r1, [r2, #4]
 801a996:	c303      	stmia	r3!, {r0, r1}

	for( int i = 0 ; i < 8 ; i++ )
 801a998:	2300      	movs	r3, #0
 801a99a:	627b      	str	r3, [r7, #36]	; 0x24
 801a99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a99e:	2b07      	cmp	r3, #7
 801a9a0:	dc0d      	bgt.n	801a9be <_Z17getCurrentVersionv+0x8e>
		version[i] = firstDW[i] ;
 801a9a2:	f107 0214 	add.w	r2, r7, #20
 801a9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9a8:	4413      	add	r3, r2
 801a9aa:	7819      	ldrb	r1, [r3, #0]
 801a9ac:	4a32      	ldr	r2, [pc, #200]	; (801aa78 <_Z17getCurrentVersionv+0x148>)
 801a9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9b0:	4413      	add	r3, r2
 801a9b2:	460a      	mov	r2, r1
 801a9b4:	701a      	strb	r2, [r3, #0]
	for( int i = 0 ; i < 8 ; i++ )
 801a9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9b8:	3301      	adds	r3, #1
 801a9ba:	627b      	str	r3, [r7, #36]	; 0x24
 801a9bc:	e7ee      	b.n	801a99c <_Z17getCurrentVersionv+0x6c>
	for( int i = 0 ; i < 8 ; i++ ) {
 801a9be:	2300      	movs	r3, #0
 801a9c0:	623b      	str	r3, [r7, #32]
 801a9c2:	6a3b      	ldr	r3, [r7, #32]
 801a9c4:	2b07      	cmp	r3, #7
 801a9c6:	dc22      	bgt.n	801aa0e <_Z17getCurrentVersionv+0xde>
		if( checkFWnameFormat( (char)secondDW[i] ) == 1 )
 801a9c8:	f107 020c 	add.w	r2, r7, #12
 801a9cc:	6a3b      	ldr	r3, [r7, #32]
 801a9ce:	4413      	add	r3, r2
 801a9d0:	781b      	ldrb	r3, [r3, #0]
 801a9d2:	4618      	mov	r0, r3
 801a9d4:	f000 f8b2 	bl	801ab3c <_Z17checkFWnameFormatc>
 801a9d8:	4603      	mov	r3, r0
 801a9da:	2b01      	cmp	r3, #1
 801a9dc:	bf0c      	ite	eq
 801a9de:	2301      	moveq	r3, #1
 801a9e0:	2300      	movne	r3, #0
 801a9e2:	b2db      	uxtb	r3, r3
 801a9e4:	2b00      	cmp	r3, #0
 801a9e6:	d009      	beq.n	801a9fc <_Z17getCurrentVersionv+0xcc>
			version[ i + 8 ] = secondDW[i] ;
 801a9e8:	6a3b      	ldr	r3, [r7, #32]
 801a9ea:	3308      	adds	r3, #8
 801a9ec:	f107 010c 	add.w	r1, r7, #12
 801a9f0:	6a3a      	ldr	r2, [r7, #32]
 801a9f2:	440a      	add	r2, r1
 801a9f4:	7811      	ldrb	r1, [r2, #0]
 801a9f6:	4a20      	ldr	r2, [pc, #128]	; (801aa78 <_Z17getCurrentVersionv+0x148>)
 801a9f8:	54d1      	strb	r1, [r2, r3]
 801a9fa:	e004      	b.n	801aa06 <_Z17getCurrentVersionv+0xd6>
		else
			version[ i + 8 ] = 0x00 ;
 801a9fc:	6a3b      	ldr	r3, [r7, #32]
 801a9fe:	3308      	adds	r3, #8
 801aa00:	4a1d      	ldr	r2, [pc, #116]	; (801aa78 <_Z17getCurrentVersionv+0x148>)
 801aa02:	2100      	movs	r1, #0
 801aa04:	54d1      	strb	r1, [r2, r3]
	for( int i = 0 ; i < 8 ; i++ ) {
 801aa06:	6a3b      	ldr	r3, [r7, #32]
 801aa08:	3301      	adds	r3, #1
 801aa0a:	623b      	str	r3, [r7, #32]
 801aa0c:	e7d9      	b.n	801a9c2 <_Z17getCurrentVersionv+0x92>
	}
	for( int i = 0 ; i < 8 ; i++ ) {
 801aa0e:	2300      	movs	r3, #0
 801aa10:	61fb      	str	r3, [r7, #28]
 801aa12:	69fb      	ldr	r3, [r7, #28]
 801aa14:	2b07      	cmp	r3, #7
 801aa16:	dc20      	bgt.n	801aa5a <_Z17getCurrentVersionv+0x12a>
		if( checkFWnameFormat( thirdDW[i] ) == 1 )
 801aa18:	1d3a      	adds	r2, r7, #4
 801aa1a:	69fb      	ldr	r3, [r7, #28]
 801aa1c:	4413      	add	r3, r2
 801aa1e:	781b      	ldrb	r3, [r3, #0]
 801aa20:	4618      	mov	r0, r3
 801aa22:	f000 f88b 	bl	801ab3c <_Z17checkFWnameFormatc>
 801aa26:	4603      	mov	r3, r0
 801aa28:	2b01      	cmp	r3, #1
 801aa2a:	bf0c      	ite	eq
 801aa2c:	2301      	moveq	r3, #1
 801aa2e:	2300      	movne	r3, #0
 801aa30:	b2db      	uxtb	r3, r3
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	d008      	beq.n	801aa48 <_Z17getCurrentVersionv+0x118>
			version[ i + 16 ] = thirdDW[i] ;
 801aa36:	69fb      	ldr	r3, [r7, #28]
 801aa38:	3310      	adds	r3, #16
 801aa3a:	1d39      	adds	r1, r7, #4
 801aa3c:	69fa      	ldr	r2, [r7, #28]
 801aa3e:	440a      	add	r2, r1
 801aa40:	7811      	ldrb	r1, [r2, #0]
 801aa42:	4a0d      	ldr	r2, [pc, #52]	; (801aa78 <_Z17getCurrentVersionv+0x148>)
 801aa44:	54d1      	strb	r1, [r2, r3]
 801aa46:	e004      	b.n	801aa52 <_Z17getCurrentVersionv+0x122>
		else
			version[ i + 16 ] = 0x00 ;
 801aa48:	69fb      	ldr	r3, [r7, #28]
 801aa4a:	3310      	adds	r3, #16
 801aa4c:	4a0a      	ldr	r2, [pc, #40]	; (801aa78 <_Z17getCurrentVersionv+0x148>)
 801aa4e:	2100      	movs	r1, #0
 801aa50:	54d1      	strb	r1, [r2, r3]
	for( int i = 0 ; i < 8 ; i++ ) {
 801aa52:	69fb      	ldr	r3, [r7, #28]
 801aa54:	3301      	adds	r3, #1
 801aa56:	61fb      	str	r3, [r7, #28]
 801aa58:	e7db      	b.n	801aa12 <_Z17getCurrentVersionv+0xe2>
	}

	return version ;
 801aa5a:	4b07      	ldr	r3, [pc, #28]	; (801aa78 <_Z17getCurrentVersionv+0x148>)
}
 801aa5c:	4618      	mov	r0, r3
 801aa5e:	3728      	adds	r7, #40	; 0x28
 801aa60:	46bd      	mov	sp, r7
 801aa62:	bd80      	pop	{r7, pc}
 801aa64:	f3af 8000 	nop.w
 801aa68:	080fa008 	.word	0x080fa008
 801aa6c:	00000000 	.word	0x00000000
 801aa70:	080fa010 	.word	0x080fa010
 801aa74:	00000000 	.word	0x00000000
 801aa78:	2000028c 	.word	0x2000028c
 801aa7c:	080fa000 	.word	0x080fa000

0801aa80 <_Z15getOnSimVersionv>:



/*__________________________________________________________________________________________________________________________________________*/
char *getOnSimVersion() {
 801aa80:	b580      	push	{r7, lr}
 801aa82:	b082      	sub	sp, #8
 801aa84:	af00      	add	r7, sp, #0
	// version: 1.0.0FF
	static char version[25] ;
	memset( version, 0 , 25 ) ;
 801aa86:	2219      	movs	r2, #25
 801aa88:	2100      	movs	r1, #0
 801aa8a:	4824      	ldr	r0, [pc, #144]	; (801ab1c <_Z15getOnSimVersionv+0x9c>)
 801aa8c:	f004 fca8 	bl	801f3e0 <memset>

	Sim7600.sendCmd( "AT\r", "OK", 2000 ) ;
 801aa90:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801aa94:	4a22      	ldr	r2, [pc, #136]	; (801ab20 <_Z15getOnSimVersionv+0xa0>)
 801aa96:	4923      	ldr	r1, [pc, #140]	; (801ab24 <_Z15getOnSimVersionv+0xa4>)
 801aa98:	4823      	ldr	r0, [pc, #140]	; (801ab28 <_Z15getOnSimVersionv+0xa8>)
 801aa9a:	f004 f9f7 	bl	801ee8c <_ZN7Sim76007sendCmdEPKcS1_j>
	Sim7600.sendCmd( "AT+FSCD=E:\r", "OK", 2000 ) ;
 801aa9e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801aaa2:	4a1f      	ldr	r2, [pc, #124]	; (801ab20 <_Z15getOnSimVersionv+0xa0>)
 801aaa4:	4921      	ldr	r1, [pc, #132]	; (801ab2c <_Z15getOnSimVersionv+0xac>)
 801aaa6:	4820      	ldr	r0, [pc, #128]	; (801ab28 <_Z15getOnSimVersionv+0xa8>)
 801aaa8:	f004 f9f0 	bl	801ee8c <_ZN7Sim76007sendCmdEPKcS1_j>
	Sim7600.sendCmd( "AT+FSLS\r", "OK", 2000 ) ;
 801aaac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801aab0:	4a1b      	ldr	r2, [pc, #108]	; (801ab20 <_Z15getOnSimVersionv+0xa0>)
 801aab2:	491f      	ldr	r1, [pc, #124]	; (801ab30 <_Z15getOnSimVersionv+0xb0>)
 801aab4:	481c      	ldr	r0, [pc, #112]	; (801ab28 <_Z15getOnSimVersionv+0xa8>)
 801aab6:	f004 f9e9 	bl	801ee8c <_ZN7Sim76007sendCmdEPKcS1_j>

	memcpy( version, strstr( Sim7600.rxData.c_str(), "datalogger" ), 24 ) ;
 801aaba:	481e      	ldr	r0, [pc, #120]	; (801ab34 <_Z15getOnSimVersionv+0xb4>)
 801aabc:	f004 fc02 	bl	801f2c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 801aac0:	4603      	mov	r3, r0
 801aac2:	491d      	ldr	r1, [pc, #116]	; (801ab38 <_Z15getOnSimVersionv+0xb8>)
 801aac4:	4618      	mov	r0, r3
 801aac6:	f005 fc31 	bl	802032c <strstr>
 801aaca:	4603      	mov	r3, r0
 801aacc:	2218      	movs	r2, #24
 801aace:	4619      	mov	r1, r3
 801aad0:	4812      	ldr	r0, [pc, #72]	; (801ab1c <_Z15getOnSimVersionv+0x9c>)
 801aad2:	f004 fc5d 	bl	801f390 <memcpy>

	// filter version name
	for( int i = 0 ; i < 24 ; i++ )
 801aad6:	2300      	movs	r3, #0
 801aad8:	607b      	str	r3, [r7, #4]
 801aada:	687b      	ldr	r3, [r7, #4]
 801aadc:	2b17      	cmp	r3, #23
 801aade:	dc17      	bgt.n	801ab10 <_Z15getOnSimVersionv+0x90>
		if( checkFWnameFormat( version[i] ) == false )
 801aae0:	4a0e      	ldr	r2, [pc, #56]	; (801ab1c <_Z15getOnSimVersionv+0x9c>)
 801aae2:	687b      	ldr	r3, [r7, #4]
 801aae4:	4413      	add	r3, r2
 801aae6:	781b      	ldrb	r3, [r3, #0]
 801aae8:	4618      	mov	r0, r3
 801aaea:	f000 f827 	bl	801ab3c <_Z17checkFWnameFormatc>
 801aaee:	4603      	mov	r3, r0
 801aaf0:	2b00      	cmp	r3, #0
 801aaf2:	bf0c      	ite	eq
 801aaf4:	2301      	moveq	r3, #1
 801aaf6:	2300      	movne	r3, #0
 801aaf8:	b2db      	uxtb	r3, r3
 801aafa:	2b00      	cmp	r3, #0
 801aafc:	d004      	beq.n	801ab08 <_Z15getOnSimVersionv+0x88>
			version[i] = 0x00 ;
 801aafe:	4a07      	ldr	r2, [pc, #28]	; (801ab1c <_Z15getOnSimVersionv+0x9c>)
 801ab00:	687b      	ldr	r3, [r7, #4]
 801ab02:	4413      	add	r3, r2
 801ab04:	2200      	movs	r2, #0
 801ab06:	701a      	strb	r2, [r3, #0]
	for( int i = 0 ; i < 24 ; i++ )
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	3301      	adds	r3, #1
 801ab0c:	607b      	str	r3, [r7, #4]
 801ab0e:	e7e4      	b.n	801aada <_Z15getOnSimVersionv+0x5a>

	return version ;
 801ab10:	4b02      	ldr	r3, [pc, #8]	; (801ab1c <_Z15getOnSimVersionv+0x9c>)
}
 801ab12:	4618      	mov	r0, r3
 801ab14:	3708      	adds	r7, #8
 801ab16:	46bd      	mov	sp, r7
 801ab18:	bd80      	pop	{r7, pc}
 801ab1a:	bf00      	nop
 801ab1c:	200002a4 	.word	0x200002a4
 801ab20:	08023d04 	.word	0x08023d04
 801ab24:	08023eb8 	.word	0x08023eb8
 801ab28:	20000220 	.word	0x20000220
 801ab2c:	08023ebc 	.word	0x08023ebc
 801ab30:	08023ec8 	.word	0x08023ec8
 801ab34:	20000224 	.word	0x20000224
 801ab38:	08023ed4 	.word	0x08023ed4

0801ab3c <_Z17checkFWnameFormatc>:



/*__________________________________________________________________________________________________________________________________________*/
// datalogger_1.1.1.bin => d,a,t,l,o,g,e,r,b,i,n,_,.,'number'
bool checkFWnameFormat( char _character ) {
 801ab3c:	b480      	push	{r7}
 801ab3e:	b083      	sub	sp, #12
 801ab40:	af00      	add	r7, sp, #0
 801ab42:	4603      	mov	r3, r0
 801ab44:	71fb      	strb	r3, [r7, #7]
	switch ( _character ) {
 801ab46:	79fb      	ldrb	r3, [r7, #7]
 801ab48:	3b2e      	subs	r3, #46	; 0x2e
 801ab4a:	2b46      	cmp	r3, #70	; 0x46
 801ab4c:	f200 80ac 	bhi.w	801aca8 <_Z17checkFWnameFormatc+0x16c>
 801ab50:	a201      	add	r2, pc, #4	; (adr r2, 801ab58 <_Z17checkFWnameFormatc+0x1c>)
 801ab52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ab56:	bf00      	nop
 801ab58:	0801aca5 	.word	0x0801aca5
 801ab5c:	0801aca9 	.word	0x0801aca9
 801ab60:	0801aca9 	.word	0x0801aca9
 801ab64:	0801aca9 	.word	0x0801aca9
 801ab68:	0801aca9 	.word	0x0801aca9
 801ab6c:	0801aca9 	.word	0x0801aca9
 801ab70:	0801aca9 	.word	0x0801aca9
 801ab74:	0801aca9 	.word	0x0801aca9
 801ab78:	0801aca9 	.word	0x0801aca9
 801ab7c:	0801aca9 	.word	0x0801aca9
 801ab80:	0801aca9 	.word	0x0801aca9
 801ab84:	0801aca9 	.word	0x0801aca9
 801ab88:	0801aca9 	.word	0x0801aca9
 801ab8c:	0801aca9 	.word	0x0801aca9
 801ab90:	0801aca9 	.word	0x0801aca9
 801ab94:	0801aca9 	.word	0x0801aca9
 801ab98:	0801aca9 	.word	0x0801aca9
 801ab9c:	0801aca9 	.word	0x0801aca9
 801aba0:	0801aca9 	.word	0x0801aca9
 801aba4:	0801aca9 	.word	0x0801aca9
 801aba8:	0801aca9 	.word	0x0801aca9
 801abac:	0801aca9 	.word	0x0801aca9
 801abb0:	0801aca9 	.word	0x0801aca9
 801abb4:	0801aca9 	.word	0x0801aca9
 801abb8:	0801aca9 	.word	0x0801aca9
 801abbc:	0801aca9 	.word	0x0801aca9
 801abc0:	0801aca9 	.word	0x0801aca9
 801abc4:	0801aca9 	.word	0x0801aca9
 801abc8:	0801aca9 	.word	0x0801aca9
 801abcc:	0801aca9 	.word	0x0801aca9
 801abd0:	0801aca9 	.word	0x0801aca9
 801abd4:	0801aca9 	.word	0x0801aca9
 801abd8:	0801aca9 	.word	0x0801aca9
 801abdc:	0801aca9 	.word	0x0801aca9
 801abe0:	0801aca9 	.word	0x0801aca9
 801abe4:	0801aca9 	.word	0x0801aca9
 801abe8:	0801aca9 	.word	0x0801aca9
 801abec:	0801aca9 	.word	0x0801aca9
 801abf0:	0801aca9 	.word	0x0801aca9
 801abf4:	0801aca9 	.word	0x0801aca9
 801abf8:	0801aca9 	.word	0x0801aca9
 801abfc:	0801aca9 	.word	0x0801aca9
 801ac00:	0801aca9 	.word	0x0801aca9
 801ac04:	0801aca9 	.word	0x0801aca9
 801ac08:	0801aca9 	.word	0x0801aca9
 801ac0c:	0801aca9 	.word	0x0801aca9
 801ac10:	0801aca9 	.word	0x0801aca9
 801ac14:	0801aca9 	.word	0x0801aca9
 801ac18:	0801aca9 	.word	0x0801aca9
 801ac1c:	0801aca1 	.word	0x0801aca1
 801ac20:	0801aca9 	.word	0x0801aca9
 801ac24:	0801ac79 	.word	0x0801ac79
 801ac28:	0801ac95 	.word	0x0801ac95
 801ac2c:	0801aca9 	.word	0x0801aca9
 801ac30:	0801ac75 	.word	0x0801ac75
 801ac34:	0801ac8d 	.word	0x0801ac8d
 801ac38:	0801aca9 	.word	0x0801aca9
 801ac3c:	0801ac89 	.word	0x0801ac89
 801ac40:	0801aca9 	.word	0x0801aca9
 801ac44:	0801ac99 	.word	0x0801ac99
 801ac48:	0801aca9 	.word	0x0801aca9
 801ac4c:	0801aca9 	.word	0x0801aca9
 801ac50:	0801ac81 	.word	0x0801ac81
 801ac54:	0801aca9 	.word	0x0801aca9
 801ac58:	0801ac9d 	.word	0x0801ac9d
 801ac5c:	0801ac85 	.word	0x0801ac85
 801ac60:	0801aca9 	.word	0x0801aca9
 801ac64:	0801aca9 	.word	0x0801aca9
 801ac68:	0801ac91 	.word	0x0801ac91
 801ac6c:	0801aca9 	.word	0x0801aca9
 801ac70:	0801ac7d 	.word	0x0801ac7d
		case 'd':
			return 1 ;
 801ac74:	2301      	movs	r3, #1
 801ac76:	e020      	b.n	801acba <_Z17checkFWnameFormatc+0x17e>
		case 'a':
			return 1 ;
 801ac78:	2301      	movs	r3, #1
 801ac7a:	e01e      	b.n	801acba <_Z17checkFWnameFormatc+0x17e>
		case 't':
			return 1 ;
 801ac7c:	2301      	movs	r3, #1
 801ac7e:	e01c      	b.n	801acba <_Z17checkFWnameFormatc+0x17e>
		case 'l':
			return 1 ;
 801ac80:	2301      	movs	r3, #1
 801ac82:	e01a      	b.n	801acba <_Z17checkFWnameFormatc+0x17e>
		case 'o':
			return 1 ;
 801ac84:	2301      	movs	r3, #1
 801ac86:	e018      	b.n	801acba <_Z17checkFWnameFormatc+0x17e>
		case 'g':
			return 1 ;
 801ac88:	2301      	movs	r3, #1
 801ac8a:	e016      	b.n	801acba <_Z17checkFWnameFormatc+0x17e>
		case (char)'e':
			return 1 ;
 801ac8c:	2301      	movs	r3, #1
 801ac8e:	e014      	b.n	801acba <_Z17checkFWnameFormatc+0x17e>
		case 'r':
			return 1 ;
 801ac90:	2301      	movs	r3, #1
 801ac92:	e012      	b.n	801acba <_Z17checkFWnameFormatc+0x17e>
		case 'b':
			return 1 ;
 801ac94:	2301      	movs	r3, #1
 801ac96:	e010      	b.n	801acba <_Z17checkFWnameFormatc+0x17e>
		case 'i':
			return 1 ;
 801ac98:	2301      	movs	r3, #1
 801ac9a:	e00e      	b.n	801acba <_Z17checkFWnameFormatc+0x17e>
		case 'n':
			return 1 ;
 801ac9c:	2301      	movs	r3, #1
 801ac9e:	e00c      	b.n	801acba <_Z17checkFWnameFormatc+0x17e>
		case '_':
			return 1 ;
 801aca0:	2301      	movs	r3, #1
 801aca2:	e00a      	b.n	801acba <_Z17checkFWnameFormatc+0x17e>
		case '.':
			return 1 ;
 801aca4:	2301      	movs	r3, #1
 801aca6:	e008      	b.n	801acba <_Z17checkFWnameFormatc+0x17e>

		default:
			if( ( _character >= 0x30 && _character <= 0x39 ) )
 801aca8:	79fb      	ldrb	r3, [r7, #7]
 801acaa:	2b2f      	cmp	r3, #47	; 0x2f
 801acac:	d904      	bls.n	801acb8 <_Z17checkFWnameFormatc+0x17c>
 801acae:	79fb      	ldrb	r3, [r7, #7]
 801acb0:	2b39      	cmp	r3, #57	; 0x39
 801acb2:	d801      	bhi.n	801acb8 <_Z17checkFWnameFormatc+0x17c>
				return 1 ;
 801acb4:	2301      	movs	r3, #1
 801acb6:	e000      	b.n	801acba <_Z17checkFWnameFormatc+0x17e>
			else
				return 0 ;
 801acb8:	2300      	movs	r3, #0
			break;
	}
}
 801acba:	4618      	mov	r0, r3
 801acbc:	370c      	adds	r7, #12
 801acbe:	46bd      	mov	sp, r7
 801acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acc4:	4770      	bx	lr
 801acc6:	bf00      	nop

0801acc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 801acc8:	b480      	push	{r7}
 801acca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 801accc:	b672      	cpsid	i
}
 801acce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 801acd0:	e7fe      	b.n	801acd0 <Error_Handler+0x8>
	...

0801acd4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 801acd4:	b580      	push	{r7, lr}
 801acd6:	b082      	sub	sp, #8
 801acd8:	af00      	add	r7, sp, #0
 801acda:	6078      	str	r0, [r7, #4]
 801acdc:	6039      	str	r1, [r7, #0]
 801acde:	687b      	ldr	r3, [r7, #4]
 801ace0:	2b01      	cmp	r3, #1
 801ace2:	d10c      	bne.n	801acfe <_Z41__static_initialization_and_destruction_0ii+0x2a>
 801ace4:	683b      	ldr	r3, [r7, #0]
 801ace6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801acea:	4293      	cmp	r3, r2
 801acec:	d107      	bne.n	801acfe <_Z41__static_initialization_and_destruction_0ii+0x2a>
Sim7600 Sim7600( &huart1 ) ;
 801acee:	490d      	ldr	r1, [pc, #52]	; (801ad24 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 801acf0:	480d      	ldr	r0, [pc, #52]	; (801ad28 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 801acf2:	f004 f845 	bl	801ed80 <_ZN7Sim7600C1EP20__UART_HandleTypeDef>
Terminal Terminal( &huart2 ) ;
 801acf6:	490d      	ldr	r1, [pc, #52]	; (801ad2c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 801acf8:	480d      	ldr	r0, [pc, #52]	; (801ad30 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801acfa:	f004 f955 	bl	801efa8 <_ZN8TerminalC1EP20__UART_HandleTypeDef>
 801acfe:	687b      	ldr	r3, [r7, #4]
 801ad00:	2b00      	cmp	r3, #0
 801ad02:	d10a      	bne.n	801ad1a <_Z41__static_initialization_and_destruction_0ii+0x46>
 801ad04:	683b      	ldr	r3, [r7, #0]
 801ad06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ad0a:	4293      	cmp	r3, r2
 801ad0c:	d105      	bne.n	801ad1a <_Z41__static_initialization_and_destruction_0ii+0x46>
 801ad0e:	4808      	ldr	r0, [pc, #32]	; (801ad30 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 801ad10:	f004 f968 	bl	801efe4 <_ZN8TerminalD1Ev>
Sim7600 Sim7600( &huart1 ) ;
 801ad14:	4804      	ldr	r0, [pc, #16]	; (801ad28 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 801ad16:	f004 f851 	bl	801edbc <_ZN7Sim7600D1Ev>
}
 801ad1a:	bf00      	nop
 801ad1c:	3708      	adds	r7, #8
 801ad1e:	46bd      	mov	sp, r7
 801ad20:	bd80      	pop	{r7, pc}
 801ad22:	bf00      	nop
 801ad24:	200002e0 	.word	0x200002e0
 801ad28:	20000220 	.word	0x20000220
 801ad2c:	20000364 	.word	0x20000364
 801ad30:	20000244 	.word	0x20000244

0801ad34 <_GLOBAL__sub_I_Sim7600>:
 801ad34:	b580      	push	{r7, lr}
 801ad36:	af00      	add	r7, sp, #0
 801ad38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801ad3c:	2001      	movs	r0, #1
 801ad3e:	f7ff ffc9 	bl	801acd4 <_Z41__static_initialization_and_destruction_0ii>
 801ad42:	bd80      	pop	{r7, pc}

0801ad44 <_GLOBAL__sub_D_Sim7600>:
 801ad44:	b580      	push	{r7, lr}
 801ad46:	af00      	add	r7, sp, #0
 801ad48:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801ad4c:	2000      	movs	r0, #0
 801ad4e:	f7ff ffc1 	bl	801acd4 <_Z41__static_initialization_and_destruction_0ii>
 801ad52:	bd80      	pop	{r7, pc}

0801ad54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801ad54:	b480      	push	{r7}
 801ad56:	b083      	sub	sp, #12
 801ad58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801ad5a:	4b0f      	ldr	r3, [pc, #60]	; (801ad98 <HAL_MspInit+0x44>)
 801ad5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ad5e:	4a0e      	ldr	r2, [pc, #56]	; (801ad98 <HAL_MspInit+0x44>)
 801ad60:	f043 0301 	orr.w	r3, r3, #1
 801ad64:	6613      	str	r3, [r2, #96]	; 0x60
 801ad66:	4b0c      	ldr	r3, [pc, #48]	; (801ad98 <HAL_MspInit+0x44>)
 801ad68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ad6a:	f003 0301 	and.w	r3, r3, #1
 801ad6e:	607b      	str	r3, [r7, #4]
 801ad70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801ad72:	4b09      	ldr	r3, [pc, #36]	; (801ad98 <HAL_MspInit+0x44>)
 801ad74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ad76:	4a08      	ldr	r2, [pc, #32]	; (801ad98 <HAL_MspInit+0x44>)
 801ad78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ad7c:	6593      	str	r3, [r2, #88]	; 0x58
 801ad7e:	4b06      	ldr	r3, [pc, #24]	; (801ad98 <HAL_MspInit+0x44>)
 801ad80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ad82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801ad86:	603b      	str	r3, [r7, #0]
 801ad88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801ad8a:	bf00      	nop
 801ad8c:	370c      	adds	r7, #12
 801ad8e:	46bd      	mov	sp, r7
 801ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad94:	4770      	bx	lr
 801ad96:	bf00      	nop
 801ad98:	40021000 	.word	0x40021000

0801ad9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801ad9c:	b480      	push	{r7}
 801ad9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 801ada0:	e7fe      	b.n	801ada0 <NMI_Handler+0x4>

0801ada2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801ada2:	b480      	push	{r7}
 801ada4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801ada6:	e7fe      	b.n	801ada6 <HardFault_Handler+0x4>

0801ada8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801ada8:	b480      	push	{r7}
 801adaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801adac:	e7fe      	b.n	801adac <MemManage_Handler+0x4>

0801adae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801adae:	b480      	push	{r7}
 801adb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801adb2:	e7fe      	b.n	801adb2 <BusFault_Handler+0x4>

0801adb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801adb4:	b480      	push	{r7}
 801adb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801adb8:	e7fe      	b.n	801adb8 <UsageFault_Handler+0x4>

0801adba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801adba:	b480      	push	{r7}
 801adbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801adbe:	bf00      	nop
 801adc0:	46bd      	mov	sp, r7
 801adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adc6:	4770      	bx	lr

0801adc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801adc8:	b480      	push	{r7}
 801adca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801adcc:	bf00      	nop
 801adce:	46bd      	mov	sp, r7
 801add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801add4:	4770      	bx	lr

0801add6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801add6:	b480      	push	{r7}
 801add8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801adda:	bf00      	nop
 801addc:	46bd      	mov	sp, r7
 801adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ade2:	4770      	bx	lr

0801ade4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801ade4:	b580      	push	{r7, lr}
 801ade6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801ade8:	f000 fa70 	bl	801b2cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 801adec:	bf00      	nop
 801adee:	bd80      	pop	{r7, pc}

0801adf0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 801adf0:	b580      	push	{r7, lr}
 801adf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 801adf4:	4802      	ldr	r0, [pc, #8]	; (801ae00 <USART1_IRQHandler+0x10>)
 801adf6:	f002 fd05 	bl	801d804 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 801adfa:	bf00      	nop
 801adfc:	bd80      	pop	{r7, pc}
 801adfe:	bf00      	nop
 801ae00:	200002e0 	.word	0x200002e0

0801ae04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 801ae04:	b580      	push	{r7, lr}
 801ae06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 801ae08:	4802      	ldr	r0, [pc, #8]	; (801ae14 <USART2_IRQHandler+0x10>)
 801ae0a:	f002 fcfb 	bl	801d804 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 801ae0e:	bf00      	nop
 801ae10:	bd80      	pop	{r7, pc}
 801ae12:	bf00      	nop
 801ae14:	20000364 	.word	0x20000364

0801ae18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 801ae18:	b480      	push	{r7}
 801ae1a:	af00      	add	r7, sp, #0
	return 1;
 801ae1c:	2301      	movs	r3, #1
}
 801ae1e:	4618      	mov	r0, r3
 801ae20:	46bd      	mov	sp, r7
 801ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae26:	4770      	bx	lr

0801ae28 <_kill>:

int _kill(int pid, int sig)
{
 801ae28:	b580      	push	{r7, lr}
 801ae2a:	b082      	sub	sp, #8
 801ae2c:	af00      	add	r7, sp, #0
 801ae2e:	6078      	str	r0, [r7, #4]
 801ae30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 801ae32:	f004 fa73 	bl	801f31c <__errno>
 801ae36:	4603      	mov	r3, r0
 801ae38:	2216      	movs	r2, #22
 801ae3a:	601a      	str	r2, [r3, #0]
	return -1;
 801ae3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ae40:	4618      	mov	r0, r3
 801ae42:	3708      	adds	r7, #8
 801ae44:	46bd      	mov	sp, r7
 801ae46:	bd80      	pop	{r7, pc}

0801ae48 <_exit>:

void _exit (int status)
{
 801ae48:	b580      	push	{r7, lr}
 801ae4a:	b082      	sub	sp, #8
 801ae4c:	af00      	add	r7, sp, #0
 801ae4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 801ae50:	f04f 31ff 	mov.w	r1, #4294967295
 801ae54:	6878      	ldr	r0, [r7, #4]
 801ae56:	f7ff ffe7 	bl	801ae28 <_kill>
	while (1) {}		/* Make sure we hang here */
 801ae5a:	e7fe      	b.n	801ae5a <_exit+0x12>

0801ae5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801ae5c:	b580      	push	{r7, lr}
 801ae5e:	b086      	sub	sp, #24
 801ae60:	af00      	add	r7, sp, #0
 801ae62:	60f8      	str	r0, [r7, #12]
 801ae64:	60b9      	str	r1, [r7, #8]
 801ae66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801ae68:	2300      	movs	r3, #0
 801ae6a:	617b      	str	r3, [r7, #20]
 801ae6c:	e00a      	b.n	801ae84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 801ae6e:	f3af 8000 	nop.w
 801ae72:	4601      	mov	r1, r0
 801ae74:	68bb      	ldr	r3, [r7, #8]
 801ae76:	1c5a      	adds	r2, r3, #1
 801ae78:	60ba      	str	r2, [r7, #8]
 801ae7a:	b2ca      	uxtb	r2, r1
 801ae7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801ae7e:	697b      	ldr	r3, [r7, #20]
 801ae80:	3301      	adds	r3, #1
 801ae82:	617b      	str	r3, [r7, #20]
 801ae84:	697a      	ldr	r2, [r7, #20]
 801ae86:	687b      	ldr	r3, [r7, #4]
 801ae88:	429a      	cmp	r2, r3
 801ae8a:	dbf0      	blt.n	801ae6e <_read+0x12>
	}

return len;
 801ae8c:	687b      	ldr	r3, [r7, #4]
}
 801ae8e:	4618      	mov	r0, r3
 801ae90:	3718      	adds	r7, #24
 801ae92:	46bd      	mov	sp, r7
 801ae94:	bd80      	pop	{r7, pc}

0801ae96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801ae96:	b580      	push	{r7, lr}
 801ae98:	b086      	sub	sp, #24
 801ae9a:	af00      	add	r7, sp, #0
 801ae9c:	60f8      	str	r0, [r7, #12]
 801ae9e:	60b9      	str	r1, [r7, #8]
 801aea0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801aea2:	2300      	movs	r3, #0
 801aea4:	617b      	str	r3, [r7, #20]
 801aea6:	e009      	b.n	801aebc <_write+0x26>
	{
		__io_putchar(*ptr++);
 801aea8:	68bb      	ldr	r3, [r7, #8]
 801aeaa:	1c5a      	adds	r2, r3, #1
 801aeac:	60ba      	str	r2, [r7, #8]
 801aeae:	781b      	ldrb	r3, [r3, #0]
 801aeb0:	4618      	mov	r0, r3
 801aeb2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801aeb6:	697b      	ldr	r3, [r7, #20]
 801aeb8:	3301      	adds	r3, #1
 801aeba:	617b      	str	r3, [r7, #20]
 801aebc:	697a      	ldr	r2, [r7, #20]
 801aebe:	687b      	ldr	r3, [r7, #4]
 801aec0:	429a      	cmp	r2, r3
 801aec2:	dbf1      	blt.n	801aea8 <_write+0x12>
	}
	return len;
 801aec4:	687b      	ldr	r3, [r7, #4]
}
 801aec6:	4618      	mov	r0, r3
 801aec8:	3718      	adds	r7, #24
 801aeca:	46bd      	mov	sp, r7
 801aecc:	bd80      	pop	{r7, pc}

0801aece <_close>:

int _close(int file)
{
 801aece:	b480      	push	{r7}
 801aed0:	b083      	sub	sp, #12
 801aed2:	af00      	add	r7, sp, #0
 801aed4:	6078      	str	r0, [r7, #4]
	return -1;
 801aed6:	f04f 33ff 	mov.w	r3, #4294967295
}
 801aeda:	4618      	mov	r0, r3
 801aedc:	370c      	adds	r7, #12
 801aede:	46bd      	mov	sp, r7
 801aee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aee4:	4770      	bx	lr

0801aee6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 801aee6:	b480      	push	{r7}
 801aee8:	b083      	sub	sp, #12
 801aeea:	af00      	add	r7, sp, #0
 801aeec:	6078      	str	r0, [r7, #4]
 801aeee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 801aef0:	683b      	ldr	r3, [r7, #0]
 801aef2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801aef6:	605a      	str	r2, [r3, #4]
	return 0;
 801aef8:	2300      	movs	r3, #0
}
 801aefa:	4618      	mov	r0, r3
 801aefc:	370c      	adds	r7, #12
 801aefe:	46bd      	mov	sp, r7
 801af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af04:	4770      	bx	lr

0801af06 <_isatty>:

int _isatty(int file)
{
 801af06:	b480      	push	{r7}
 801af08:	b083      	sub	sp, #12
 801af0a:	af00      	add	r7, sp, #0
 801af0c:	6078      	str	r0, [r7, #4]
	return 1;
 801af0e:	2301      	movs	r3, #1
}
 801af10:	4618      	mov	r0, r3
 801af12:	370c      	adds	r7, #12
 801af14:	46bd      	mov	sp, r7
 801af16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af1a:	4770      	bx	lr

0801af1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801af1c:	b480      	push	{r7}
 801af1e:	b085      	sub	sp, #20
 801af20:	af00      	add	r7, sp, #0
 801af22:	60f8      	str	r0, [r7, #12]
 801af24:	60b9      	str	r1, [r7, #8]
 801af26:	607a      	str	r2, [r7, #4]
	return 0;
 801af28:	2300      	movs	r3, #0
}
 801af2a:	4618      	mov	r0, r3
 801af2c:	3714      	adds	r7, #20
 801af2e:	46bd      	mov	sp, r7
 801af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af34:	4770      	bx	lr
	...

0801af38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 801af38:	b580      	push	{r7, lr}
 801af3a:	b086      	sub	sp, #24
 801af3c:	af00      	add	r7, sp, #0
 801af3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 801af40:	4a14      	ldr	r2, [pc, #80]	; (801af94 <_sbrk+0x5c>)
 801af42:	4b15      	ldr	r3, [pc, #84]	; (801af98 <_sbrk+0x60>)
 801af44:	1ad3      	subs	r3, r2, r3
 801af46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 801af48:	697b      	ldr	r3, [r7, #20]
 801af4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801af4c:	4b13      	ldr	r3, [pc, #76]	; (801af9c <_sbrk+0x64>)
 801af4e:	681b      	ldr	r3, [r3, #0]
 801af50:	2b00      	cmp	r3, #0
 801af52:	d102      	bne.n	801af5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 801af54:	4b11      	ldr	r3, [pc, #68]	; (801af9c <_sbrk+0x64>)
 801af56:	4a12      	ldr	r2, [pc, #72]	; (801afa0 <_sbrk+0x68>)
 801af58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801af5a:	4b10      	ldr	r3, [pc, #64]	; (801af9c <_sbrk+0x64>)
 801af5c:	681a      	ldr	r2, [r3, #0]
 801af5e:	687b      	ldr	r3, [r7, #4]
 801af60:	4413      	add	r3, r2
 801af62:	693a      	ldr	r2, [r7, #16]
 801af64:	429a      	cmp	r2, r3
 801af66:	d207      	bcs.n	801af78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 801af68:	f004 f9d8 	bl	801f31c <__errno>
 801af6c:	4603      	mov	r3, r0
 801af6e:	220c      	movs	r2, #12
 801af70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801af72:	f04f 33ff 	mov.w	r3, #4294967295
 801af76:	e009      	b.n	801af8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 801af78:	4b08      	ldr	r3, [pc, #32]	; (801af9c <_sbrk+0x64>)
 801af7a:	681b      	ldr	r3, [r3, #0]
 801af7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801af7e:	4b07      	ldr	r3, [pc, #28]	; (801af9c <_sbrk+0x64>)
 801af80:	681a      	ldr	r2, [r3, #0]
 801af82:	687b      	ldr	r3, [r7, #4]
 801af84:	4413      	add	r3, r2
 801af86:	4a05      	ldr	r2, [pc, #20]	; (801af9c <_sbrk+0x64>)
 801af88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801af8a:	68fb      	ldr	r3, [r7, #12]
}
 801af8c:	4618      	mov	r0, r3
 801af8e:	3718      	adds	r7, #24
 801af90:	46bd      	mov	sp, r7
 801af92:	bd80      	pop	{r7, pc}
 801af94:	20018000 	.word	0x20018000
 801af98:	00000400 	.word	0x00000400
 801af9c:	200002c0 	.word	0x200002c0
 801afa0:	20000400 	.word	0x20000400

0801afa4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 801afa4:	b480      	push	{r7}
 801afa6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 801afa8:	4b15      	ldr	r3, [pc, #84]	; (801b000 <SystemInit+0x5c>)
 801afaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801afae:	4a14      	ldr	r2, [pc, #80]	; (801b000 <SystemInit+0x5c>)
 801afb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801afb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 801afb8:	4b12      	ldr	r3, [pc, #72]	; (801b004 <SystemInit+0x60>)
 801afba:	681b      	ldr	r3, [r3, #0]
 801afbc:	4a11      	ldr	r2, [pc, #68]	; (801b004 <SystemInit+0x60>)
 801afbe:	f043 0301 	orr.w	r3, r3, #1
 801afc2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 801afc4:	4b0f      	ldr	r3, [pc, #60]	; (801b004 <SystemInit+0x60>)
 801afc6:	2200      	movs	r2, #0
 801afc8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 801afca:	4b0e      	ldr	r3, [pc, #56]	; (801b004 <SystemInit+0x60>)
 801afcc:	681b      	ldr	r3, [r3, #0]
 801afce:	4a0d      	ldr	r2, [pc, #52]	; (801b004 <SystemInit+0x60>)
 801afd0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 801afd4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 801afd8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 801afda:	4b0a      	ldr	r3, [pc, #40]	; (801b004 <SystemInit+0x60>)
 801afdc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801afe0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 801afe2:	4b08      	ldr	r3, [pc, #32]	; (801b004 <SystemInit+0x60>)
 801afe4:	681b      	ldr	r3, [r3, #0]
 801afe6:	4a07      	ldr	r2, [pc, #28]	; (801b004 <SystemInit+0x60>)
 801afe8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801afec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 801afee:	4b05      	ldr	r3, [pc, #20]	; (801b004 <SystemInit+0x60>)
 801aff0:	2200      	movs	r2, #0
 801aff2:	619a      	str	r2, [r3, #24]
}
 801aff4:	bf00      	nop
 801aff6:	46bd      	mov	sp, r7
 801aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801affc:	4770      	bx	lr
 801affe:	bf00      	nop
 801b000:	e000ed00 	.word	0xe000ed00
 801b004:	40021000 	.word	0x40021000

0801b008 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 801b008:	b580      	push	{r7, lr}
 801b00a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 801b00c:	4b14      	ldr	r3, [pc, #80]	; (801b060 <MX_USART1_UART_Init+0x58>)
 801b00e:	4a15      	ldr	r2, [pc, #84]	; (801b064 <MX_USART1_UART_Init+0x5c>)
 801b010:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 801b012:	4b13      	ldr	r3, [pc, #76]	; (801b060 <MX_USART1_UART_Init+0x58>)
 801b014:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 801b018:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801b01a:	4b11      	ldr	r3, [pc, #68]	; (801b060 <MX_USART1_UART_Init+0x58>)
 801b01c:	2200      	movs	r2, #0
 801b01e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 801b020:	4b0f      	ldr	r3, [pc, #60]	; (801b060 <MX_USART1_UART_Init+0x58>)
 801b022:	2200      	movs	r2, #0
 801b024:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801b026:	4b0e      	ldr	r3, [pc, #56]	; (801b060 <MX_USART1_UART_Init+0x58>)
 801b028:	2200      	movs	r2, #0
 801b02a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 801b02c:	4b0c      	ldr	r3, [pc, #48]	; (801b060 <MX_USART1_UART_Init+0x58>)
 801b02e:	220c      	movs	r2, #12
 801b030:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801b032:	4b0b      	ldr	r3, [pc, #44]	; (801b060 <MX_USART1_UART_Init+0x58>)
 801b034:	2200      	movs	r2, #0
 801b036:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801b038:	4b09      	ldr	r3, [pc, #36]	; (801b060 <MX_USART1_UART_Init+0x58>)
 801b03a:	2200      	movs	r2, #0
 801b03c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801b03e:	4b08      	ldr	r3, [pc, #32]	; (801b060 <MX_USART1_UART_Init+0x58>)
 801b040:	2200      	movs	r2, #0
 801b042:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801b044:	4b06      	ldr	r3, [pc, #24]	; (801b060 <MX_USART1_UART_Init+0x58>)
 801b046:	2200      	movs	r2, #0
 801b048:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801b04a:	4805      	ldr	r0, [pc, #20]	; (801b060 <MX_USART1_UART_Init+0x58>)
 801b04c:	f002 fab4 	bl	801d5b8 <HAL_UART_Init>
 801b050:	4603      	mov	r3, r0
 801b052:	2b00      	cmp	r3, #0
 801b054:	d001      	beq.n	801b05a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 801b056:	f7ff fe37 	bl	801acc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 801b05a:	bf00      	nop
 801b05c:	bd80      	pop	{r7, pc}
 801b05e:	bf00      	nop
 801b060:	200002e0 	.word	0x200002e0
 801b064:	40013800 	.word	0x40013800

0801b068 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 801b068:	b580      	push	{r7, lr}
 801b06a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 801b06c:	4b14      	ldr	r3, [pc, #80]	; (801b0c0 <MX_USART2_UART_Init+0x58>)
 801b06e:	4a15      	ldr	r2, [pc, #84]	; (801b0c4 <MX_USART2_UART_Init+0x5c>)
 801b070:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 801b072:	4b13      	ldr	r3, [pc, #76]	; (801b0c0 <MX_USART2_UART_Init+0x58>)
 801b074:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 801b078:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 801b07a:	4b11      	ldr	r3, [pc, #68]	; (801b0c0 <MX_USART2_UART_Init+0x58>)
 801b07c:	2200      	movs	r2, #0
 801b07e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 801b080:	4b0f      	ldr	r3, [pc, #60]	; (801b0c0 <MX_USART2_UART_Init+0x58>)
 801b082:	2200      	movs	r2, #0
 801b084:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 801b086:	4b0e      	ldr	r3, [pc, #56]	; (801b0c0 <MX_USART2_UART_Init+0x58>)
 801b088:	2200      	movs	r2, #0
 801b08a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 801b08c:	4b0c      	ldr	r3, [pc, #48]	; (801b0c0 <MX_USART2_UART_Init+0x58>)
 801b08e:	220c      	movs	r2, #12
 801b090:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801b092:	4b0b      	ldr	r3, [pc, #44]	; (801b0c0 <MX_USART2_UART_Init+0x58>)
 801b094:	2200      	movs	r2, #0
 801b096:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 801b098:	4b09      	ldr	r3, [pc, #36]	; (801b0c0 <MX_USART2_UART_Init+0x58>)
 801b09a:	2200      	movs	r2, #0
 801b09c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801b09e:	4b08      	ldr	r3, [pc, #32]	; (801b0c0 <MX_USART2_UART_Init+0x58>)
 801b0a0:	2200      	movs	r2, #0
 801b0a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801b0a4:	4b06      	ldr	r3, [pc, #24]	; (801b0c0 <MX_USART2_UART_Init+0x58>)
 801b0a6:	2200      	movs	r2, #0
 801b0a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 801b0aa:	4805      	ldr	r0, [pc, #20]	; (801b0c0 <MX_USART2_UART_Init+0x58>)
 801b0ac:	f002 fa84 	bl	801d5b8 <HAL_UART_Init>
 801b0b0:	4603      	mov	r3, r0
 801b0b2:	2b00      	cmp	r3, #0
 801b0b4:	d001      	beq.n	801b0ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 801b0b6:	f7ff fe07 	bl	801acc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 801b0ba:	bf00      	nop
 801b0bc:	bd80      	pop	{r7, pc}
 801b0be:	bf00      	nop
 801b0c0:	20000364 	.word	0x20000364
 801b0c4:	40004400 	.word	0x40004400

0801b0c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 801b0c8:	b580      	push	{r7, lr}
 801b0ca:	b08c      	sub	sp, #48	; 0x30
 801b0cc:	af00      	add	r7, sp, #0
 801b0ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801b0d0:	f107 031c 	add.w	r3, r7, #28
 801b0d4:	2200      	movs	r2, #0
 801b0d6:	601a      	str	r2, [r3, #0]
 801b0d8:	605a      	str	r2, [r3, #4]
 801b0da:	609a      	str	r2, [r3, #8]
 801b0dc:	60da      	str	r2, [r3, #12]
 801b0de:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 801b0e0:	687b      	ldr	r3, [r7, #4]
 801b0e2:	681b      	ldr	r3, [r3, #0]
 801b0e4:	4a36      	ldr	r2, [pc, #216]	; (801b1c0 <HAL_UART_MspInit+0xf8>)
 801b0e6:	4293      	cmp	r3, r2
 801b0e8:	d130      	bne.n	801b14c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 801b0ea:	4b36      	ldr	r3, [pc, #216]	; (801b1c4 <HAL_UART_MspInit+0xfc>)
 801b0ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b0ee:	4a35      	ldr	r2, [pc, #212]	; (801b1c4 <HAL_UART_MspInit+0xfc>)
 801b0f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801b0f4:	6613      	str	r3, [r2, #96]	; 0x60
 801b0f6:	4b33      	ldr	r3, [pc, #204]	; (801b1c4 <HAL_UART_MspInit+0xfc>)
 801b0f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b0fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801b0fe:	61bb      	str	r3, [r7, #24]
 801b100:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801b102:	4b30      	ldr	r3, [pc, #192]	; (801b1c4 <HAL_UART_MspInit+0xfc>)
 801b104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b106:	4a2f      	ldr	r2, [pc, #188]	; (801b1c4 <HAL_UART_MspInit+0xfc>)
 801b108:	f043 0302 	orr.w	r3, r3, #2
 801b10c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801b10e:	4b2d      	ldr	r3, [pc, #180]	; (801b1c4 <HAL_UART_MspInit+0xfc>)
 801b110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b112:	f003 0302 	and.w	r3, r3, #2
 801b116:	617b      	str	r3, [r7, #20]
 801b118:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SIM7600_TX_Pin|SIM7600_RX_Pin;
 801b11a:	23c0      	movs	r3, #192	; 0xc0
 801b11c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b11e:	2302      	movs	r3, #2
 801b120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b122:	2300      	movs	r3, #0
 801b124:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b126:	2303      	movs	r3, #3
 801b128:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801b12a:	2307      	movs	r3, #7
 801b12c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801b12e:	f107 031c 	add.w	r3, r7, #28
 801b132:	4619      	mov	r1, r3
 801b134:	4824      	ldr	r0, [pc, #144]	; (801b1c8 <HAL_UART_MspInit+0x100>)
 801b136:	f000 fd57 	bl	801bbe8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 801b13a:	2200      	movs	r2, #0
 801b13c:	2100      	movs	r1, #0
 801b13e:	2025      	movs	r0, #37	; 0x25
 801b140:	f000 f9f9 	bl	801b536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 801b144:	2025      	movs	r0, #37	; 0x25
 801b146:	f000 fa12 	bl	801b56e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 801b14a:	e035      	b.n	801b1b8 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 801b14c:	687b      	ldr	r3, [r7, #4]
 801b14e:	681b      	ldr	r3, [r3, #0]
 801b150:	4a1e      	ldr	r2, [pc, #120]	; (801b1cc <HAL_UART_MspInit+0x104>)
 801b152:	4293      	cmp	r3, r2
 801b154:	d130      	bne.n	801b1b8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 801b156:	4b1b      	ldr	r3, [pc, #108]	; (801b1c4 <HAL_UART_MspInit+0xfc>)
 801b158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b15a:	4a1a      	ldr	r2, [pc, #104]	; (801b1c4 <HAL_UART_MspInit+0xfc>)
 801b15c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801b160:	6593      	str	r3, [r2, #88]	; 0x58
 801b162:	4b18      	ldr	r3, [pc, #96]	; (801b1c4 <HAL_UART_MspInit+0xfc>)
 801b164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b16a:	613b      	str	r3, [r7, #16]
 801b16c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801b16e:	4b15      	ldr	r3, [pc, #84]	; (801b1c4 <HAL_UART_MspInit+0xfc>)
 801b170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b172:	4a14      	ldr	r2, [pc, #80]	; (801b1c4 <HAL_UART_MspInit+0xfc>)
 801b174:	f043 0301 	orr.w	r3, r3, #1
 801b178:	64d3      	str	r3, [r2, #76]	; 0x4c
 801b17a:	4b12      	ldr	r3, [pc, #72]	; (801b1c4 <HAL_UART_MspInit+0xfc>)
 801b17c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b17e:	f003 0301 	and.w	r3, r3, #1
 801b182:	60fb      	str	r3, [r7, #12]
 801b184:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TERMINAL_TX_Pin|TERMINAL_RX_Pin;
 801b186:	230c      	movs	r3, #12
 801b188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b18a:	2302      	movs	r3, #2
 801b18c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b18e:	2300      	movs	r3, #0
 801b190:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b192:	2303      	movs	r3, #3
 801b194:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 801b196:	2307      	movs	r3, #7
 801b198:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801b19a:	f107 031c 	add.w	r3, r7, #28
 801b19e:	4619      	mov	r1, r3
 801b1a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801b1a4:	f000 fd20 	bl	801bbe8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 801b1a8:	2200      	movs	r2, #0
 801b1aa:	2100      	movs	r1, #0
 801b1ac:	2026      	movs	r0, #38	; 0x26
 801b1ae:	f000 f9c2 	bl	801b536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 801b1b2:	2026      	movs	r0, #38	; 0x26
 801b1b4:	f000 f9db 	bl	801b56e <HAL_NVIC_EnableIRQ>
}
 801b1b8:	bf00      	nop
 801b1ba:	3730      	adds	r7, #48	; 0x30
 801b1bc:	46bd      	mov	sp, r7
 801b1be:	bd80      	pop	{r7, pc}
 801b1c0:	40013800 	.word	0x40013800
 801b1c4:	40021000 	.word	0x40021000
 801b1c8:	48000400 	.word	0x48000400
 801b1cc:	40004400 	.word	0x40004400

0801b1d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 801b1d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 801b208 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 801b1d4:	f7ff fee6 	bl	801afa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 801b1d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 801b1da:	e003      	b.n	801b1e4 <LoopCopyDataInit>

0801b1dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 801b1dc:	4b0b      	ldr	r3, [pc, #44]	; (801b20c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 801b1de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 801b1e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 801b1e2:	3104      	adds	r1, #4

0801b1e4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 801b1e4:	480a      	ldr	r0, [pc, #40]	; (801b210 <LoopForever+0xa>)
	ldr	r3, =_edata
 801b1e6:	4b0b      	ldr	r3, [pc, #44]	; (801b214 <LoopForever+0xe>)
	adds	r2, r0, r1
 801b1e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 801b1ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 801b1ec:	d3f6      	bcc.n	801b1dc <CopyDataInit>
	ldr	r2, =_sbss
 801b1ee:	4a0a      	ldr	r2, [pc, #40]	; (801b218 <LoopForever+0x12>)
	b	LoopFillZerobss
 801b1f0:	e002      	b.n	801b1f8 <LoopFillZerobss>

0801b1f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 801b1f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 801b1f4:	f842 3b04 	str.w	r3, [r2], #4

0801b1f8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 801b1f8:	4b08      	ldr	r3, [pc, #32]	; (801b21c <LoopForever+0x16>)
	cmp	r2, r3
 801b1fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 801b1fc:	d3f9      	bcc.n	801b1f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 801b1fe:	f004 f893 	bl	801f328 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 801b202:	f7fe ff5b 	bl	801a0bc <main>

0801b206 <LoopForever>:

LoopForever:
    b LoopForever
 801b206:	e7fe      	b.n	801b206 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 801b208:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 801b20c:	0802443c 	.word	0x0802443c
	ldr	r0, =_sdata
 801b210:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 801b214:	20000204 	.word	0x20000204
	ldr	r2, =_sbss
 801b218:	20000204 	.word	0x20000204
	ldr	r3, = _ebss
 801b21c:	200003fc 	.word	0x200003fc

0801b220 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 801b220:	e7fe      	b.n	801b220 <ADC1_2_IRQHandler>

0801b222 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801b222:	b580      	push	{r7, lr}
 801b224:	b082      	sub	sp, #8
 801b226:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 801b228:	2300      	movs	r3, #0
 801b22a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801b22c:	2003      	movs	r0, #3
 801b22e:	f000 f977 	bl	801b520 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801b232:	2000      	movs	r0, #0
 801b234:	f000 f80e 	bl	801b254 <HAL_InitTick>
 801b238:	4603      	mov	r3, r0
 801b23a:	2b00      	cmp	r3, #0
 801b23c:	d002      	beq.n	801b244 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 801b23e:	2301      	movs	r3, #1
 801b240:	71fb      	strb	r3, [r7, #7]
 801b242:	e001      	b.n	801b248 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 801b244:	f7ff fd86 	bl	801ad54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 801b248:	79fb      	ldrb	r3, [r7, #7]
}
 801b24a:	4618      	mov	r0, r3
 801b24c:	3708      	adds	r7, #8
 801b24e:	46bd      	mov	sp, r7
 801b250:	bd80      	pop	{r7, pc}
	...

0801b254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801b254:	b580      	push	{r7, lr}
 801b256:	b084      	sub	sp, #16
 801b258:	af00      	add	r7, sp, #0
 801b25a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 801b25c:	2300      	movs	r3, #0
 801b25e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 801b260:	4b17      	ldr	r3, [pc, #92]	; (801b2c0 <HAL_InitTick+0x6c>)
 801b262:	781b      	ldrb	r3, [r3, #0]
 801b264:	2b00      	cmp	r3, #0
 801b266:	d023      	beq.n	801b2b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 801b268:	4b16      	ldr	r3, [pc, #88]	; (801b2c4 <HAL_InitTick+0x70>)
 801b26a:	681a      	ldr	r2, [r3, #0]
 801b26c:	4b14      	ldr	r3, [pc, #80]	; (801b2c0 <HAL_InitTick+0x6c>)
 801b26e:	781b      	ldrb	r3, [r3, #0]
 801b270:	4619      	mov	r1, r3
 801b272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801b276:	fbb3 f3f1 	udiv	r3, r3, r1
 801b27a:	fbb2 f3f3 	udiv	r3, r2, r3
 801b27e:	4618      	mov	r0, r3
 801b280:	f000 f987 	bl	801b592 <HAL_SYSTICK_Config>
 801b284:	4603      	mov	r3, r0
 801b286:	2b00      	cmp	r3, #0
 801b288:	d10f      	bne.n	801b2aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801b28a:	687b      	ldr	r3, [r7, #4]
 801b28c:	2b0f      	cmp	r3, #15
 801b28e:	d809      	bhi.n	801b2a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801b290:	2200      	movs	r2, #0
 801b292:	6879      	ldr	r1, [r7, #4]
 801b294:	f04f 30ff 	mov.w	r0, #4294967295
 801b298:	f000 f94d 	bl	801b536 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 801b29c:	4a0a      	ldr	r2, [pc, #40]	; (801b2c8 <HAL_InitTick+0x74>)
 801b29e:	687b      	ldr	r3, [r7, #4]
 801b2a0:	6013      	str	r3, [r2, #0]
 801b2a2:	e007      	b.n	801b2b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 801b2a4:	2301      	movs	r3, #1
 801b2a6:	73fb      	strb	r3, [r7, #15]
 801b2a8:	e004      	b.n	801b2b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 801b2aa:	2301      	movs	r3, #1
 801b2ac:	73fb      	strb	r3, [r7, #15]
 801b2ae:	e001      	b.n	801b2b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 801b2b0:	2301      	movs	r3, #1
 801b2b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 801b2b4:	7bfb      	ldrb	r3, [r7, #15]
}
 801b2b6:	4618      	mov	r0, r3
 801b2b8:	3710      	adds	r7, #16
 801b2ba:	46bd      	mov	sp, r7
 801b2bc:	bd80      	pop	{r7, pc}
 801b2be:	bf00      	nop
 801b2c0:	2000000c 	.word	0x2000000c
 801b2c4:	20000004 	.word	0x20000004
 801b2c8:	20000008 	.word	0x20000008

0801b2cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801b2cc:	b480      	push	{r7}
 801b2ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801b2d0:	4b06      	ldr	r3, [pc, #24]	; (801b2ec <HAL_IncTick+0x20>)
 801b2d2:	781b      	ldrb	r3, [r3, #0]
 801b2d4:	461a      	mov	r2, r3
 801b2d6:	4b06      	ldr	r3, [pc, #24]	; (801b2f0 <HAL_IncTick+0x24>)
 801b2d8:	681b      	ldr	r3, [r3, #0]
 801b2da:	4413      	add	r3, r2
 801b2dc:	4a04      	ldr	r2, [pc, #16]	; (801b2f0 <HAL_IncTick+0x24>)
 801b2de:	6013      	str	r3, [r2, #0]
}
 801b2e0:	bf00      	nop
 801b2e2:	46bd      	mov	sp, r7
 801b2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2e8:	4770      	bx	lr
 801b2ea:	bf00      	nop
 801b2ec:	2000000c 	.word	0x2000000c
 801b2f0:	200003e8 	.word	0x200003e8

0801b2f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801b2f4:	b480      	push	{r7}
 801b2f6:	af00      	add	r7, sp, #0
  return uwTick;
 801b2f8:	4b03      	ldr	r3, [pc, #12]	; (801b308 <HAL_GetTick+0x14>)
 801b2fa:	681b      	ldr	r3, [r3, #0]
}
 801b2fc:	4618      	mov	r0, r3
 801b2fe:	46bd      	mov	sp, r7
 801b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b304:	4770      	bx	lr
 801b306:	bf00      	nop
 801b308:	200003e8 	.word	0x200003e8

0801b30c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801b30c:	b580      	push	{r7, lr}
 801b30e:	b084      	sub	sp, #16
 801b310:	af00      	add	r7, sp, #0
 801b312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801b314:	f7ff ffee 	bl	801b2f4 <HAL_GetTick>
 801b318:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801b31a:	687b      	ldr	r3, [r7, #4]
 801b31c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 801b31e:	68fb      	ldr	r3, [r7, #12]
 801b320:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b324:	d005      	beq.n	801b332 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 801b326:	4b0a      	ldr	r3, [pc, #40]	; (801b350 <HAL_Delay+0x44>)
 801b328:	781b      	ldrb	r3, [r3, #0]
 801b32a:	461a      	mov	r2, r3
 801b32c:	68fb      	ldr	r3, [r7, #12]
 801b32e:	4413      	add	r3, r2
 801b330:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801b332:	bf00      	nop
 801b334:	f7ff ffde 	bl	801b2f4 <HAL_GetTick>
 801b338:	4602      	mov	r2, r0
 801b33a:	68bb      	ldr	r3, [r7, #8]
 801b33c:	1ad3      	subs	r3, r2, r3
 801b33e:	68fa      	ldr	r2, [r7, #12]
 801b340:	429a      	cmp	r2, r3
 801b342:	d8f7      	bhi.n	801b334 <HAL_Delay+0x28>
  {
  }
}
 801b344:	bf00      	nop
 801b346:	bf00      	nop
 801b348:	3710      	adds	r7, #16
 801b34a:	46bd      	mov	sp, r7
 801b34c:	bd80      	pop	{r7, pc}
 801b34e:	bf00      	nop
 801b350:	2000000c 	.word	0x2000000c

0801b354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801b354:	b480      	push	{r7}
 801b356:	b085      	sub	sp, #20
 801b358:	af00      	add	r7, sp, #0
 801b35a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801b35c:	687b      	ldr	r3, [r7, #4]
 801b35e:	f003 0307 	and.w	r3, r3, #7
 801b362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801b364:	4b0c      	ldr	r3, [pc, #48]	; (801b398 <__NVIC_SetPriorityGrouping+0x44>)
 801b366:	68db      	ldr	r3, [r3, #12]
 801b368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801b36a:	68ba      	ldr	r2, [r7, #8]
 801b36c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801b370:	4013      	ands	r3, r2
 801b372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801b374:	68fb      	ldr	r3, [r7, #12]
 801b376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801b378:	68bb      	ldr	r3, [r7, #8]
 801b37a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801b37c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801b380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801b384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801b386:	4a04      	ldr	r2, [pc, #16]	; (801b398 <__NVIC_SetPriorityGrouping+0x44>)
 801b388:	68bb      	ldr	r3, [r7, #8]
 801b38a:	60d3      	str	r3, [r2, #12]
}
 801b38c:	bf00      	nop
 801b38e:	3714      	adds	r7, #20
 801b390:	46bd      	mov	sp, r7
 801b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b396:	4770      	bx	lr
 801b398:	e000ed00 	.word	0xe000ed00

0801b39c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801b39c:	b480      	push	{r7}
 801b39e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801b3a0:	4b04      	ldr	r3, [pc, #16]	; (801b3b4 <__NVIC_GetPriorityGrouping+0x18>)
 801b3a2:	68db      	ldr	r3, [r3, #12]
 801b3a4:	0a1b      	lsrs	r3, r3, #8
 801b3a6:	f003 0307 	and.w	r3, r3, #7
}
 801b3aa:	4618      	mov	r0, r3
 801b3ac:	46bd      	mov	sp, r7
 801b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3b2:	4770      	bx	lr
 801b3b4:	e000ed00 	.word	0xe000ed00

0801b3b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801b3b8:	b480      	push	{r7}
 801b3ba:	b083      	sub	sp, #12
 801b3bc:	af00      	add	r7, sp, #0
 801b3be:	4603      	mov	r3, r0
 801b3c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801b3c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b3c6:	2b00      	cmp	r3, #0
 801b3c8:	db0b      	blt.n	801b3e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801b3ca:	79fb      	ldrb	r3, [r7, #7]
 801b3cc:	f003 021f 	and.w	r2, r3, #31
 801b3d0:	4907      	ldr	r1, [pc, #28]	; (801b3f0 <__NVIC_EnableIRQ+0x38>)
 801b3d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b3d6:	095b      	lsrs	r3, r3, #5
 801b3d8:	2001      	movs	r0, #1
 801b3da:	fa00 f202 	lsl.w	r2, r0, r2
 801b3de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 801b3e2:	bf00      	nop
 801b3e4:	370c      	adds	r7, #12
 801b3e6:	46bd      	mov	sp, r7
 801b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3ec:	4770      	bx	lr
 801b3ee:	bf00      	nop
 801b3f0:	e000e100 	.word	0xe000e100

0801b3f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801b3f4:	b480      	push	{r7}
 801b3f6:	b083      	sub	sp, #12
 801b3f8:	af00      	add	r7, sp, #0
 801b3fa:	4603      	mov	r3, r0
 801b3fc:	6039      	str	r1, [r7, #0]
 801b3fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801b400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b404:	2b00      	cmp	r3, #0
 801b406:	db0a      	blt.n	801b41e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801b408:	683b      	ldr	r3, [r7, #0]
 801b40a:	b2da      	uxtb	r2, r3
 801b40c:	490c      	ldr	r1, [pc, #48]	; (801b440 <__NVIC_SetPriority+0x4c>)
 801b40e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b412:	0112      	lsls	r2, r2, #4
 801b414:	b2d2      	uxtb	r2, r2
 801b416:	440b      	add	r3, r1
 801b418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801b41c:	e00a      	b.n	801b434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801b41e:	683b      	ldr	r3, [r7, #0]
 801b420:	b2da      	uxtb	r2, r3
 801b422:	4908      	ldr	r1, [pc, #32]	; (801b444 <__NVIC_SetPriority+0x50>)
 801b424:	79fb      	ldrb	r3, [r7, #7]
 801b426:	f003 030f 	and.w	r3, r3, #15
 801b42a:	3b04      	subs	r3, #4
 801b42c:	0112      	lsls	r2, r2, #4
 801b42e:	b2d2      	uxtb	r2, r2
 801b430:	440b      	add	r3, r1
 801b432:	761a      	strb	r2, [r3, #24]
}
 801b434:	bf00      	nop
 801b436:	370c      	adds	r7, #12
 801b438:	46bd      	mov	sp, r7
 801b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b43e:	4770      	bx	lr
 801b440:	e000e100 	.word	0xe000e100
 801b444:	e000ed00 	.word	0xe000ed00

0801b448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801b448:	b480      	push	{r7}
 801b44a:	b089      	sub	sp, #36	; 0x24
 801b44c:	af00      	add	r7, sp, #0
 801b44e:	60f8      	str	r0, [r7, #12]
 801b450:	60b9      	str	r1, [r7, #8]
 801b452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801b454:	68fb      	ldr	r3, [r7, #12]
 801b456:	f003 0307 	and.w	r3, r3, #7
 801b45a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801b45c:	69fb      	ldr	r3, [r7, #28]
 801b45e:	f1c3 0307 	rsb	r3, r3, #7
 801b462:	2b04      	cmp	r3, #4
 801b464:	bf28      	it	cs
 801b466:	2304      	movcs	r3, #4
 801b468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801b46a:	69fb      	ldr	r3, [r7, #28]
 801b46c:	3304      	adds	r3, #4
 801b46e:	2b06      	cmp	r3, #6
 801b470:	d902      	bls.n	801b478 <NVIC_EncodePriority+0x30>
 801b472:	69fb      	ldr	r3, [r7, #28]
 801b474:	3b03      	subs	r3, #3
 801b476:	e000      	b.n	801b47a <NVIC_EncodePriority+0x32>
 801b478:	2300      	movs	r3, #0
 801b47a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801b47c:	f04f 32ff 	mov.w	r2, #4294967295
 801b480:	69bb      	ldr	r3, [r7, #24]
 801b482:	fa02 f303 	lsl.w	r3, r2, r3
 801b486:	43da      	mvns	r2, r3
 801b488:	68bb      	ldr	r3, [r7, #8]
 801b48a:	401a      	ands	r2, r3
 801b48c:	697b      	ldr	r3, [r7, #20]
 801b48e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801b490:	f04f 31ff 	mov.w	r1, #4294967295
 801b494:	697b      	ldr	r3, [r7, #20]
 801b496:	fa01 f303 	lsl.w	r3, r1, r3
 801b49a:	43d9      	mvns	r1, r3
 801b49c:	687b      	ldr	r3, [r7, #4]
 801b49e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801b4a0:	4313      	orrs	r3, r2
         );
}
 801b4a2:	4618      	mov	r0, r3
 801b4a4:	3724      	adds	r7, #36	; 0x24
 801b4a6:	46bd      	mov	sp, r7
 801b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4ac:	4770      	bx	lr
	...

0801b4b0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 801b4b0:	b480      	push	{r7}
 801b4b2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 801b4b4:	f3bf 8f4f 	dsb	sy
}
 801b4b8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801b4ba:	4b06      	ldr	r3, [pc, #24]	; (801b4d4 <__NVIC_SystemReset+0x24>)
 801b4bc:	68db      	ldr	r3, [r3, #12]
 801b4be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801b4c2:	4904      	ldr	r1, [pc, #16]	; (801b4d4 <__NVIC_SystemReset+0x24>)
 801b4c4:	4b04      	ldr	r3, [pc, #16]	; (801b4d8 <__NVIC_SystemReset+0x28>)
 801b4c6:	4313      	orrs	r3, r2
 801b4c8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801b4ca:	f3bf 8f4f 	dsb	sy
}
 801b4ce:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 801b4d0:	bf00      	nop
 801b4d2:	e7fd      	b.n	801b4d0 <__NVIC_SystemReset+0x20>
 801b4d4:	e000ed00 	.word	0xe000ed00
 801b4d8:	05fa0004 	.word	0x05fa0004

0801b4dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801b4dc:	b580      	push	{r7, lr}
 801b4de:	b082      	sub	sp, #8
 801b4e0:	af00      	add	r7, sp, #0
 801b4e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801b4e4:	687b      	ldr	r3, [r7, #4]
 801b4e6:	3b01      	subs	r3, #1
 801b4e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801b4ec:	d301      	bcc.n	801b4f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801b4ee:	2301      	movs	r3, #1
 801b4f0:	e00f      	b.n	801b512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801b4f2:	4a0a      	ldr	r2, [pc, #40]	; (801b51c <SysTick_Config+0x40>)
 801b4f4:	687b      	ldr	r3, [r7, #4]
 801b4f6:	3b01      	subs	r3, #1
 801b4f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801b4fa:	210f      	movs	r1, #15
 801b4fc:	f04f 30ff 	mov.w	r0, #4294967295
 801b500:	f7ff ff78 	bl	801b3f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801b504:	4b05      	ldr	r3, [pc, #20]	; (801b51c <SysTick_Config+0x40>)
 801b506:	2200      	movs	r2, #0
 801b508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801b50a:	4b04      	ldr	r3, [pc, #16]	; (801b51c <SysTick_Config+0x40>)
 801b50c:	2207      	movs	r2, #7
 801b50e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801b510:	2300      	movs	r3, #0
}
 801b512:	4618      	mov	r0, r3
 801b514:	3708      	adds	r7, #8
 801b516:	46bd      	mov	sp, r7
 801b518:	bd80      	pop	{r7, pc}
 801b51a:	bf00      	nop
 801b51c:	e000e010 	.word	0xe000e010

0801b520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801b520:	b580      	push	{r7, lr}
 801b522:	b082      	sub	sp, #8
 801b524:	af00      	add	r7, sp, #0
 801b526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801b528:	6878      	ldr	r0, [r7, #4]
 801b52a:	f7ff ff13 	bl	801b354 <__NVIC_SetPriorityGrouping>
}
 801b52e:	bf00      	nop
 801b530:	3708      	adds	r7, #8
 801b532:	46bd      	mov	sp, r7
 801b534:	bd80      	pop	{r7, pc}

0801b536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801b536:	b580      	push	{r7, lr}
 801b538:	b086      	sub	sp, #24
 801b53a:	af00      	add	r7, sp, #0
 801b53c:	4603      	mov	r3, r0
 801b53e:	60b9      	str	r1, [r7, #8]
 801b540:	607a      	str	r2, [r7, #4]
 801b542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 801b544:	2300      	movs	r3, #0
 801b546:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801b548:	f7ff ff28 	bl	801b39c <__NVIC_GetPriorityGrouping>
 801b54c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801b54e:	687a      	ldr	r2, [r7, #4]
 801b550:	68b9      	ldr	r1, [r7, #8]
 801b552:	6978      	ldr	r0, [r7, #20]
 801b554:	f7ff ff78 	bl	801b448 <NVIC_EncodePriority>
 801b558:	4602      	mov	r2, r0
 801b55a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b55e:	4611      	mov	r1, r2
 801b560:	4618      	mov	r0, r3
 801b562:	f7ff ff47 	bl	801b3f4 <__NVIC_SetPriority>
}
 801b566:	bf00      	nop
 801b568:	3718      	adds	r7, #24
 801b56a:	46bd      	mov	sp, r7
 801b56c:	bd80      	pop	{r7, pc}

0801b56e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801b56e:	b580      	push	{r7, lr}
 801b570:	b082      	sub	sp, #8
 801b572:	af00      	add	r7, sp, #0
 801b574:	4603      	mov	r3, r0
 801b576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801b578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b57c:	4618      	mov	r0, r3
 801b57e:	f7ff ff1b 	bl	801b3b8 <__NVIC_EnableIRQ>
}
 801b582:	bf00      	nop
 801b584:	3708      	adds	r7, #8
 801b586:	46bd      	mov	sp, r7
 801b588:	bd80      	pop	{r7, pc}

0801b58a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 801b58a:	b580      	push	{r7, lr}
 801b58c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 801b58e:	f7ff ff8f 	bl	801b4b0 <__NVIC_SystemReset>

0801b592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801b592:	b580      	push	{r7, lr}
 801b594:	b082      	sub	sp, #8
 801b596:	af00      	add	r7, sp, #0
 801b598:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801b59a:	6878      	ldr	r0, [r7, #4]
 801b59c:	f7ff ff9e 	bl	801b4dc <SysTick_Config>
 801b5a0:	4603      	mov	r3, r0
}
 801b5a2:	4618      	mov	r0, r3
 801b5a4:	3708      	adds	r7, #8
 801b5a6:	46bd      	mov	sp, r7
 801b5a8:	bd80      	pop	{r7, pc}

0801b5aa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801b5aa:	b480      	push	{r7}
 801b5ac:	b085      	sub	sp, #20
 801b5ae:	af00      	add	r7, sp, #0
 801b5b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b5b2:	2300      	movs	r3, #0
 801b5b4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801b5b6:	687b      	ldr	r3, [r7, #4]
 801b5b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801b5bc:	b2db      	uxtb	r3, r3
 801b5be:	2b02      	cmp	r3, #2
 801b5c0:	d008      	beq.n	801b5d4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801b5c2:	687b      	ldr	r3, [r7, #4]
 801b5c4:	2204      	movs	r2, #4
 801b5c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b5c8:	687b      	ldr	r3, [r7, #4]
 801b5ca:	2200      	movs	r2, #0
 801b5cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801b5d0:	2301      	movs	r3, #1
 801b5d2:	e022      	b.n	801b61a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801b5d4:	687b      	ldr	r3, [r7, #4]
 801b5d6:	681b      	ldr	r3, [r3, #0]
 801b5d8:	681a      	ldr	r2, [r3, #0]
 801b5da:	687b      	ldr	r3, [r7, #4]
 801b5dc:	681b      	ldr	r3, [r3, #0]
 801b5de:	f022 020e 	bic.w	r2, r2, #14
 801b5e2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 801b5e4:	687b      	ldr	r3, [r7, #4]
 801b5e6:	681b      	ldr	r3, [r3, #0]
 801b5e8:	681a      	ldr	r2, [r3, #0]
 801b5ea:	687b      	ldr	r3, [r7, #4]
 801b5ec:	681b      	ldr	r3, [r3, #0]
 801b5ee:	f022 0201 	bic.w	r2, r2, #1
 801b5f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 801b5f4:	687b      	ldr	r3, [r7, #4]
 801b5f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b5f8:	f003 021c 	and.w	r2, r3, #28
 801b5fc:	687b      	ldr	r3, [r7, #4]
 801b5fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b600:	2101      	movs	r1, #1
 801b602:	fa01 f202 	lsl.w	r2, r1, r2
 801b606:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801b608:	687b      	ldr	r3, [r7, #4]
 801b60a:	2201      	movs	r2, #1
 801b60c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b610:	687b      	ldr	r3, [r7, #4]
 801b612:	2200      	movs	r2, #0
 801b614:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 801b618:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 801b61a:	4618      	mov	r0, r3
 801b61c:	3714      	adds	r7, #20
 801b61e:	46bd      	mov	sp, r7
 801b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b624:	4770      	bx	lr

0801b626 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801b626:	b580      	push	{r7, lr}
 801b628:	b084      	sub	sp, #16
 801b62a:	af00      	add	r7, sp, #0
 801b62c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b62e:	2300      	movs	r3, #0
 801b630:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 801b632:	687b      	ldr	r3, [r7, #4]
 801b634:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801b638:	b2db      	uxtb	r3, r3
 801b63a:	2b02      	cmp	r3, #2
 801b63c:	d005      	beq.n	801b64a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801b63e:	687b      	ldr	r3, [r7, #4]
 801b640:	2204      	movs	r2, #4
 801b642:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 801b644:	2301      	movs	r3, #1
 801b646:	73fb      	strb	r3, [r7, #15]
 801b648:	e029      	b.n	801b69e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801b64a:	687b      	ldr	r3, [r7, #4]
 801b64c:	681b      	ldr	r3, [r3, #0]
 801b64e:	681a      	ldr	r2, [r3, #0]
 801b650:	687b      	ldr	r3, [r7, #4]
 801b652:	681b      	ldr	r3, [r3, #0]
 801b654:	f022 020e 	bic.w	r2, r2, #14
 801b658:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 801b65a:	687b      	ldr	r3, [r7, #4]
 801b65c:	681b      	ldr	r3, [r3, #0]
 801b65e:	681a      	ldr	r2, [r3, #0]
 801b660:	687b      	ldr	r3, [r7, #4]
 801b662:	681b      	ldr	r3, [r3, #0]
 801b664:	f022 0201 	bic.w	r2, r2, #1
 801b668:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 801b66a:	687b      	ldr	r3, [r7, #4]
 801b66c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b66e:	f003 021c 	and.w	r2, r3, #28
 801b672:	687b      	ldr	r3, [r7, #4]
 801b674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b676:	2101      	movs	r1, #1
 801b678:	fa01 f202 	lsl.w	r2, r1, r2
 801b67c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801b67e:	687b      	ldr	r3, [r7, #4]
 801b680:	2201      	movs	r2, #1
 801b682:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b686:	687b      	ldr	r3, [r7, #4]
 801b688:	2200      	movs	r2, #0
 801b68a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 801b68e:	687b      	ldr	r3, [r7, #4]
 801b690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b692:	2b00      	cmp	r3, #0
 801b694:	d003      	beq.n	801b69e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 801b696:	687b      	ldr	r3, [r7, #4]
 801b698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b69a:	6878      	ldr	r0, [r7, #4]
 801b69c:	4798      	blx	r3
    }
  }
  return status;
 801b69e:	7bfb      	ldrb	r3, [r7, #15]
}
 801b6a0:	4618      	mov	r0, r3
 801b6a2:	3710      	adds	r7, #16
 801b6a4:	46bd      	mov	sp, r7
 801b6a6:	bd80      	pop	{r7, pc}

0801b6a8 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 801b6a8:	b580      	push	{r7, lr}
 801b6aa:	b086      	sub	sp, #24
 801b6ac:	af00      	add	r7, sp, #0
 801b6ae:	60f8      	str	r0, [r7, #12]
 801b6b0:	60b9      	str	r1, [r7, #8]
 801b6b2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 801b6b6:	2300      	movs	r3, #0
 801b6b8:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801b6ba:	4b2f      	ldr	r3, [pc, #188]	; (801b778 <HAL_FLASH_Program+0xd0>)
 801b6bc:	781b      	ldrb	r3, [r3, #0]
 801b6be:	2b01      	cmp	r3, #1
 801b6c0:	d101      	bne.n	801b6c6 <HAL_FLASH_Program+0x1e>
 801b6c2:	2302      	movs	r3, #2
 801b6c4:	e053      	b.n	801b76e <HAL_FLASH_Program+0xc6>
 801b6c6:	4b2c      	ldr	r3, [pc, #176]	; (801b778 <HAL_FLASH_Program+0xd0>)
 801b6c8:	2201      	movs	r2, #1
 801b6ca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b6cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 801b6d0:	f000 f894 	bl	801b7fc <FLASH_WaitForLastOperation>
 801b6d4:	4603      	mov	r3, r0
 801b6d6:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 801b6d8:	7dfb      	ldrb	r3, [r7, #23]
 801b6da:	2b00      	cmp	r3, #0
 801b6dc:	d143      	bne.n	801b766 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801b6de:	4b26      	ldr	r3, [pc, #152]	; (801b778 <HAL_FLASH_Program+0xd0>)
 801b6e0:	2200      	movs	r2, #0
 801b6e2:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801b6e4:	4b25      	ldr	r3, [pc, #148]	; (801b77c <HAL_FLASH_Program+0xd4>)
 801b6e6:	681b      	ldr	r3, [r3, #0]
 801b6e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b6ec:	2b00      	cmp	r3, #0
 801b6ee:	d009      	beq.n	801b704 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 801b6f0:	4b22      	ldr	r3, [pc, #136]	; (801b77c <HAL_FLASH_Program+0xd4>)
 801b6f2:	681b      	ldr	r3, [r3, #0]
 801b6f4:	4a21      	ldr	r2, [pc, #132]	; (801b77c <HAL_FLASH_Program+0xd4>)
 801b6f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b6fa:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 801b6fc:	4b1e      	ldr	r3, [pc, #120]	; (801b778 <HAL_FLASH_Program+0xd0>)
 801b6fe:	2202      	movs	r2, #2
 801b700:	771a      	strb	r2, [r3, #28]
 801b702:	e002      	b.n	801b70a <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801b704:	4b1c      	ldr	r3, [pc, #112]	; (801b778 <HAL_FLASH_Program+0xd0>)
 801b706:	2200      	movs	r2, #0
 801b708:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 801b70a:	68fb      	ldr	r3, [r7, #12]
 801b70c:	2b00      	cmp	r3, #0
 801b70e:	d107      	bne.n	801b720 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 801b710:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b714:	68b8      	ldr	r0, [r7, #8]
 801b716:	f000 f8c7 	bl	801b8a8 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 801b71a:	2301      	movs	r3, #1
 801b71c:	613b      	str	r3, [r7, #16]
 801b71e:	e010      	b.n	801b742 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 801b720:	68fb      	ldr	r3, [r7, #12]
 801b722:	2b01      	cmp	r3, #1
 801b724:	d002      	beq.n	801b72c <HAL_FLASH_Program+0x84>
 801b726:	68fb      	ldr	r3, [r7, #12]
 801b728:	2b02      	cmp	r3, #2
 801b72a:	d10a      	bne.n	801b742 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 801b72c:	683b      	ldr	r3, [r7, #0]
 801b72e:	4619      	mov	r1, r3
 801b730:	68b8      	ldr	r0, [r7, #8]
 801b732:	f000 f8df 	bl	801b8f4 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 801b736:	68fb      	ldr	r3, [r7, #12]
 801b738:	2b02      	cmp	r3, #2
 801b73a:	d102      	bne.n	801b742 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 801b73c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801b740:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b742:	f24c 3050 	movw	r0, #50000	; 0xc350
 801b746:	f000 f859 	bl	801b7fc <FLASH_WaitForLastOperation>
 801b74a:	4603      	mov	r3, r0
 801b74c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 801b74e:	693b      	ldr	r3, [r7, #16]
 801b750:	2b00      	cmp	r3, #0
 801b752:	d006      	beq.n	801b762 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 801b754:	4b09      	ldr	r3, [pc, #36]	; (801b77c <HAL_FLASH_Program+0xd4>)
 801b756:	695a      	ldr	r2, [r3, #20]
 801b758:	693b      	ldr	r3, [r7, #16]
 801b75a:	43db      	mvns	r3, r3
 801b75c:	4907      	ldr	r1, [pc, #28]	; (801b77c <HAL_FLASH_Program+0xd4>)
 801b75e:	4013      	ands	r3, r2
 801b760:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 801b762:	f000 f9fd 	bl	801bb60 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801b766:	4b04      	ldr	r3, [pc, #16]	; (801b778 <HAL_FLASH_Program+0xd0>)
 801b768:	2200      	movs	r2, #0
 801b76a:	701a      	strb	r2, [r3, #0]

  return status;
 801b76c:	7dfb      	ldrb	r3, [r7, #23]
}
 801b76e:	4618      	mov	r0, r3
 801b770:	3718      	adds	r7, #24
 801b772:	46bd      	mov	sp, r7
 801b774:	bd80      	pop	{r7, pc}
 801b776:	bf00      	nop
 801b778:	20000010 	.word	0x20000010
 801b77c:	40022000 	.word	0x40022000

0801b780 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 801b780:	b480      	push	{r7}
 801b782:	b083      	sub	sp, #12
 801b784:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801b786:	2300      	movs	r3, #0
 801b788:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801b78a:	4b0b      	ldr	r3, [pc, #44]	; (801b7b8 <HAL_FLASH_Unlock+0x38>)
 801b78c:	695b      	ldr	r3, [r3, #20]
 801b78e:	2b00      	cmp	r3, #0
 801b790:	da0b      	bge.n	801b7aa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801b792:	4b09      	ldr	r3, [pc, #36]	; (801b7b8 <HAL_FLASH_Unlock+0x38>)
 801b794:	4a09      	ldr	r2, [pc, #36]	; (801b7bc <HAL_FLASH_Unlock+0x3c>)
 801b796:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 801b798:	4b07      	ldr	r3, [pc, #28]	; (801b7b8 <HAL_FLASH_Unlock+0x38>)
 801b79a:	4a09      	ldr	r2, [pc, #36]	; (801b7c0 <HAL_FLASH_Unlock+0x40>)
 801b79c:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801b79e:	4b06      	ldr	r3, [pc, #24]	; (801b7b8 <HAL_FLASH_Unlock+0x38>)
 801b7a0:	695b      	ldr	r3, [r3, #20]
 801b7a2:	2b00      	cmp	r3, #0
 801b7a4:	da01      	bge.n	801b7aa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801b7a6:	2301      	movs	r3, #1
 801b7a8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 801b7aa:	79fb      	ldrb	r3, [r7, #7]
}
 801b7ac:	4618      	mov	r0, r3
 801b7ae:	370c      	adds	r7, #12
 801b7b0:	46bd      	mov	sp, r7
 801b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7b6:	4770      	bx	lr
 801b7b8:	40022000 	.word	0x40022000
 801b7bc:	45670123 	.word	0x45670123
 801b7c0:	cdef89ab 	.word	0xcdef89ab

0801b7c4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801b7c4:	b480      	push	{r7}
 801b7c6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 801b7c8:	4b05      	ldr	r3, [pc, #20]	; (801b7e0 <HAL_FLASH_Lock+0x1c>)
 801b7ca:	695b      	ldr	r3, [r3, #20]
 801b7cc:	4a04      	ldr	r2, [pc, #16]	; (801b7e0 <HAL_FLASH_Lock+0x1c>)
 801b7ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801b7d2:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 801b7d4:	2300      	movs	r3, #0
}
 801b7d6:	4618      	mov	r0, r3
 801b7d8:	46bd      	mov	sp, r7
 801b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7de:	4770      	bx	lr
 801b7e0:	40022000 	.word	0x40022000

0801b7e4 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  *            @arg FLASH_FLAG_PEMPTY : FLASH Boot from not programmed flash (apply only for STM32L43x/STM32L44x devices)
  */
uint32_t HAL_FLASH_GetError(void)
{
 801b7e4:	b480      	push	{r7}
 801b7e6:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 801b7e8:	4b03      	ldr	r3, [pc, #12]	; (801b7f8 <HAL_FLASH_GetError+0x14>)
 801b7ea:	685b      	ldr	r3, [r3, #4]
}
 801b7ec:	4618      	mov	r0, r3
 801b7ee:	46bd      	mov	sp, r7
 801b7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7f4:	4770      	bx	lr
 801b7f6:	bf00      	nop
 801b7f8:	20000010 	.word	0x20000010

0801b7fc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 801b7fc:	b580      	push	{r7, lr}
 801b7fe:	b084      	sub	sp, #16
 801b800:	af00      	add	r7, sp, #0
 801b802:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 801b804:	f7ff fd76 	bl	801b2f4 <HAL_GetTick>
 801b808:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801b80a:	e00d      	b.n	801b828 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 801b80c:	687b      	ldr	r3, [r7, #4]
 801b80e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b812:	d009      	beq.n	801b828 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 801b814:	f7ff fd6e 	bl	801b2f4 <HAL_GetTick>
 801b818:	4602      	mov	r2, r0
 801b81a:	68fb      	ldr	r3, [r7, #12]
 801b81c:	1ad3      	subs	r3, r2, r3
 801b81e:	687a      	ldr	r2, [r7, #4]
 801b820:	429a      	cmp	r2, r3
 801b822:	d801      	bhi.n	801b828 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 801b824:	2303      	movs	r3, #3
 801b826:	e037      	b.n	801b898 <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801b828:	4b1d      	ldr	r3, [pc, #116]	; (801b8a0 <FLASH_WaitForLastOperation+0xa4>)
 801b82a:	691b      	ldr	r3, [r3, #16]
 801b82c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b830:	2b00      	cmp	r3, #0
 801b832:	d1eb      	bne.n	801b80c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 801b834:	4b1a      	ldr	r3, [pc, #104]	; (801b8a0 <FLASH_WaitForLastOperation+0xa4>)
 801b836:	691a      	ldr	r2, [r3, #16]
 801b838:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 801b83c:	4013      	ands	r3, r2
 801b83e:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 801b840:	68bb      	ldr	r3, [r7, #8]
 801b842:	2b00      	cmp	r3, #0
 801b844:	d01e      	beq.n	801b884 <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 801b846:	4b17      	ldr	r3, [pc, #92]	; (801b8a4 <FLASH_WaitForLastOperation+0xa8>)
 801b848:	685a      	ldr	r2, [r3, #4]
 801b84a:	68bb      	ldr	r3, [r7, #8]
 801b84c:	4313      	orrs	r3, r2
 801b84e:	4a15      	ldr	r2, [pc, #84]	; (801b8a4 <FLASH_WaitForLastOperation+0xa8>)
 801b850:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 801b852:	68bb      	ldr	r3, [r7, #8]
 801b854:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801b858:	2b00      	cmp	r3, #0
 801b85a:	d007      	beq.n	801b86c <FLASH_WaitForLastOperation+0x70>
 801b85c:	4b10      	ldr	r3, [pc, #64]	; (801b8a0 <FLASH_WaitForLastOperation+0xa4>)
 801b85e:	699a      	ldr	r2, [r3, #24]
 801b860:	68bb      	ldr	r3, [r7, #8]
 801b862:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801b866:	490e      	ldr	r1, [pc, #56]	; (801b8a0 <FLASH_WaitForLastOperation+0xa4>)
 801b868:	4313      	orrs	r3, r2
 801b86a:	618b      	str	r3, [r1, #24]
 801b86c:	68bb      	ldr	r3, [r7, #8]
 801b86e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801b872:	2b00      	cmp	r3, #0
 801b874:	d004      	beq.n	801b880 <FLASH_WaitForLastOperation+0x84>
 801b876:	4a0a      	ldr	r2, [pc, #40]	; (801b8a0 <FLASH_WaitForLastOperation+0xa4>)
 801b878:	68bb      	ldr	r3, [r7, #8]
 801b87a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801b87e:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 801b880:	2301      	movs	r3, #1
 801b882:	e009      	b.n	801b898 <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 801b884:	4b06      	ldr	r3, [pc, #24]	; (801b8a0 <FLASH_WaitForLastOperation+0xa4>)
 801b886:	691b      	ldr	r3, [r3, #16]
 801b888:	f003 0301 	and.w	r3, r3, #1
 801b88c:	2b00      	cmp	r3, #0
 801b88e:	d002      	beq.n	801b896 <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801b890:	4b03      	ldr	r3, [pc, #12]	; (801b8a0 <FLASH_WaitForLastOperation+0xa4>)
 801b892:	2201      	movs	r2, #1
 801b894:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 801b896:	2300      	movs	r3, #0
}
 801b898:	4618      	mov	r0, r3
 801b89a:	3710      	adds	r7, #16
 801b89c:	46bd      	mov	sp, r7
 801b89e:	bd80      	pop	{r7, pc}
 801b8a0:	40022000 	.word	0x40022000
 801b8a4:	20000010 	.word	0x20000010

0801b8a8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 801b8a8:	b480      	push	{r7}
 801b8aa:	b085      	sub	sp, #20
 801b8ac:	af00      	add	r7, sp, #0
 801b8ae:	60f8      	str	r0, [r7, #12]
 801b8b0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 801b8b4:	4b0e      	ldr	r3, [pc, #56]	; (801b8f0 <FLASH_Program_DoubleWord+0x48>)
 801b8b6:	695b      	ldr	r3, [r3, #20]
 801b8b8:	4a0d      	ldr	r2, [pc, #52]	; (801b8f0 <FLASH_Program_DoubleWord+0x48>)
 801b8ba:	f043 0301 	orr.w	r3, r3, #1
 801b8be:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 801b8c0:	68fb      	ldr	r3, [r7, #12]
 801b8c2:	683a      	ldr	r2, [r7, #0]
 801b8c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 801b8c6:	f3bf 8f6f 	isb	sy
}
 801b8ca:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 801b8cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 801b8d0:	f04f 0200 	mov.w	r2, #0
 801b8d4:	f04f 0300 	mov.w	r3, #0
 801b8d8:	000a      	movs	r2, r1
 801b8da:	2300      	movs	r3, #0
 801b8dc:	68f9      	ldr	r1, [r7, #12]
 801b8de:	3104      	adds	r1, #4
 801b8e0:	4613      	mov	r3, r2
 801b8e2:	600b      	str	r3, [r1, #0]
}
 801b8e4:	bf00      	nop
 801b8e6:	3714      	adds	r7, #20
 801b8e8:	46bd      	mov	sp, r7
 801b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8ee:	4770      	bx	lr
 801b8f0:	40022000 	.word	0x40022000

0801b8f4 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 801b8f4:	b480      	push	{r7}
 801b8f6:	b089      	sub	sp, #36	; 0x24
 801b8f8:	af00      	add	r7, sp, #0
 801b8fa:	6078      	str	r0, [r7, #4]
 801b8fc:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 801b8fe:	2340      	movs	r3, #64	; 0x40
 801b900:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 801b902:	687b      	ldr	r3, [r7, #4]
 801b904:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 801b906:	683b      	ldr	r3, [r7, #0]
 801b908:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 801b90a:	4b14      	ldr	r3, [pc, #80]	; (801b95c <FLASH_Program_Fast+0x68>)
 801b90c:	695b      	ldr	r3, [r3, #20]
 801b90e:	4a13      	ldr	r2, [pc, #76]	; (801b95c <FLASH_Program_Fast+0x68>)
 801b910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801b914:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b916:	f3ef 8310 	mrs	r3, PRIMASK
 801b91a:	60fb      	str	r3, [r7, #12]
  return(result);
 801b91c:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 801b91e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801b920:	b672      	cpsid	i
}
 801b922:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 801b924:	697b      	ldr	r3, [r7, #20]
 801b926:	681a      	ldr	r2, [r3, #0]
 801b928:	69bb      	ldr	r3, [r7, #24]
 801b92a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 801b92c:	69bb      	ldr	r3, [r7, #24]
 801b92e:	3304      	adds	r3, #4
 801b930:	61bb      	str	r3, [r7, #24]
    src_addr++;
 801b932:	697b      	ldr	r3, [r7, #20]
 801b934:	3304      	adds	r3, #4
 801b936:	617b      	str	r3, [r7, #20]
    row_index--;
 801b938:	7ffb      	ldrb	r3, [r7, #31]
 801b93a:	3b01      	subs	r3, #1
 801b93c:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 801b93e:	7ffb      	ldrb	r3, [r7, #31]
 801b940:	2b00      	cmp	r3, #0
 801b942:	d1ef      	bne.n	801b924 <FLASH_Program_Fast+0x30>
 801b944:	693b      	ldr	r3, [r7, #16]
 801b946:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b948:	68bb      	ldr	r3, [r7, #8]
 801b94a:	f383 8810 	msr	PRIMASK, r3
}
 801b94e:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 801b950:	bf00      	nop
 801b952:	3724      	adds	r7, #36	; 0x24
 801b954:	46bd      	mov	sp, r7
 801b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b95a:	4770      	bx	lr
 801b95c:	40022000 	.word	0x40022000

0801b960 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 801b960:	b580      	push	{r7, lr}
 801b962:	b084      	sub	sp, #16
 801b964:	af00      	add	r7, sp, #0
 801b966:	6078      	str	r0, [r7, #4]
 801b968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801b96a:	4b4c      	ldr	r3, [pc, #304]	; (801ba9c <HAL_FLASHEx_Erase+0x13c>)
 801b96c:	781b      	ldrb	r3, [r3, #0]
 801b96e:	2b01      	cmp	r3, #1
 801b970:	d101      	bne.n	801b976 <HAL_FLASHEx_Erase+0x16>
 801b972:	2302      	movs	r3, #2
 801b974:	e08d      	b.n	801ba92 <HAL_FLASHEx_Erase+0x132>
 801b976:	4b49      	ldr	r3, [pc, #292]	; (801ba9c <HAL_FLASHEx_Erase+0x13c>)
 801b978:	2201      	movs	r2, #1
 801b97a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b97c:	f24c 3050 	movw	r0, #50000	; 0xc350
 801b980:	f7ff ff3c 	bl	801b7fc <FLASH_WaitForLastOperation>
 801b984:	4603      	mov	r3, r0
 801b986:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 801b988:	7bfb      	ldrb	r3, [r7, #15]
 801b98a:	2b00      	cmp	r3, #0
 801b98c:	d17d      	bne.n	801ba8a <HAL_FLASHEx_Erase+0x12a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801b98e:	4b43      	ldr	r3, [pc, #268]	; (801ba9c <HAL_FLASHEx_Erase+0x13c>)
 801b990:	2200      	movs	r2, #0
 801b992:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 801b994:	4b42      	ldr	r3, [pc, #264]	; (801baa0 <HAL_FLASHEx_Erase+0x140>)
 801b996:	681b      	ldr	r3, [r3, #0]
 801b998:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801b99c:	2b00      	cmp	r3, #0
 801b99e:	d019      	beq.n	801b9d4 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 801b9a0:	4b3f      	ldr	r3, [pc, #252]	; (801baa0 <HAL_FLASHEx_Erase+0x140>)
 801b9a2:	681b      	ldr	r3, [r3, #0]
 801b9a4:	4a3e      	ldr	r2, [pc, #248]	; (801baa0 <HAL_FLASHEx_Erase+0x140>)
 801b9a6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801b9aa:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801b9ac:	4b3c      	ldr	r3, [pc, #240]	; (801baa0 <HAL_FLASHEx_Erase+0x140>)
 801b9ae:	681b      	ldr	r3, [r3, #0]
 801b9b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b9b4:	2b00      	cmp	r3, #0
 801b9b6:	d009      	beq.n	801b9cc <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 801b9b8:	4b39      	ldr	r3, [pc, #228]	; (801baa0 <HAL_FLASHEx_Erase+0x140>)
 801b9ba:	681b      	ldr	r3, [r3, #0]
 801b9bc:	4a38      	ldr	r2, [pc, #224]	; (801baa0 <HAL_FLASHEx_Erase+0x140>)
 801b9be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b9c2:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 801b9c4:	4b35      	ldr	r3, [pc, #212]	; (801ba9c <HAL_FLASHEx_Erase+0x13c>)
 801b9c6:	2203      	movs	r2, #3
 801b9c8:	771a      	strb	r2, [r3, #28]
 801b9ca:	e016      	b.n	801b9fa <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 801b9cc:	4b33      	ldr	r3, [pc, #204]	; (801ba9c <HAL_FLASHEx_Erase+0x13c>)
 801b9ce:	2201      	movs	r2, #1
 801b9d0:	771a      	strb	r2, [r3, #28]
 801b9d2:	e012      	b.n	801b9fa <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801b9d4:	4b32      	ldr	r3, [pc, #200]	; (801baa0 <HAL_FLASHEx_Erase+0x140>)
 801b9d6:	681b      	ldr	r3, [r3, #0]
 801b9d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b9dc:	2b00      	cmp	r3, #0
 801b9de:	d009      	beq.n	801b9f4 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 801b9e0:	4b2f      	ldr	r3, [pc, #188]	; (801baa0 <HAL_FLASHEx_Erase+0x140>)
 801b9e2:	681b      	ldr	r3, [r3, #0]
 801b9e4:	4a2e      	ldr	r2, [pc, #184]	; (801baa0 <HAL_FLASHEx_Erase+0x140>)
 801b9e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b9ea:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 801b9ec:	4b2b      	ldr	r3, [pc, #172]	; (801ba9c <HAL_FLASHEx_Erase+0x13c>)
 801b9ee:	2202      	movs	r2, #2
 801b9f0:	771a      	strb	r2, [r3, #28]
 801b9f2:	e002      	b.n	801b9fa <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801b9f4:	4b29      	ldr	r3, [pc, #164]	; (801ba9c <HAL_FLASHEx_Erase+0x13c>)
 801b9f6:	2200      	movs	r2, #0
 801b9f8:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801b9fa:	687b      	ldr	r3, [r7, #4]
 801b9fc:	681b      	ldr	r3, [r3, #0]
 801b9fe:	2b01      	cmp	r3, #1
 801ba00:	d113      	bne.n	801ba2a <HAL_FLASHEx_Erase+0xca>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 801ba02:	687b      	ldr	r3, [r7, #4]
 801ba04:	685b      	ldr	r3, [r3, #4]
 801ba06:	4618      	mov	r0, r3
 801ba08:	f000 f84c 	bl	801baa4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801ba0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 801ba10:	f7ff fef4 	bl	801b7fc <FLASH_WaitForLastOperation>
 801ba14:	4603      	mov	r3, r0
 801ba16:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 801ba18:	4b21      	ldr	r3, [pc, #132]	; (801baa0 <HAL_FLASHEx_Erase+0x140>)
 801ba1a:	695b      	ldr	r3, [r3, #20]
 801ba1c:	4a20      	ldr	r2, [pc, #128]	; (801baa0 <HAL_FLASHEx_Erase+0x140>)
 801ba1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801ba22:	f023 0304 	bic.w	r3, r3, #4
 801ba26:	6153      	str	r3, [r2, #20]
 801ba28:	e02d      	b.n	801ba86 <HAL_FLASHEx_Erase+0x126>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 801ba2a:	683b      	ldr	r3, [r7, #0]
 801ba2c:	f04f 32ff 	mov.w	r2, #4294967295
 801ba30:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801ba32:	687b      	ldr	r3, [r7, #4]
 801ba34:	689b      	ldr	r3, [r3, #8]
 801ba36:	60bb      	str	r3, [r7, #8]
 801ba38:	e01d      	b.n	801ba76 <HAL_FLASHEx_Erase+0x116>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 801ba3a:	687b      	ldr	r3, [r7, #4]
 801ba3c:	685b      	ldr	r3, [r3, #4]
 801ba3e:	4619      	mov	r1, r3
 801ba40:	68b8      	ldr	r0, [r7, #8]
 801ba42:	f000 f857 	bl	801baf4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801ba46:	f24c 3050 	movw	r0, #50000	; 0xc350
 801ba4a:	f7ff fed7 	bl	801b7fc <FLASH_WaitForLastOperation>
 801ba4e:	4603      	mov	r3, r0
 801ba50:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 801ba52:	4b13      	ldr	r3, [pc, #76]	; (801baa0 <HAL_FLASHEx_Erase+0x140>)
 801ba54:	695b      	ldr	r3, [r3, #20]
 801ba56:	4a12      	ldr	r2, [pc, #72]	; (801baa0 <HAL_FLASHEx_Erase+0x140>)
 801ba58:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801ba5c:	f023 0302 	bic.w	r3, r3, #2
 801ba60:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 801ba62:	7bfb      	ldrb	r3, [r7, #15]
 801ba64:	2b00      	cmp	r3, #0
 801ba66:	d003      	beq.n	801ba70 <HAL_FLASHEx_Erase+0x110>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 801ba68:	683b      	ldr	r3, [r7, #0]
 801ba6a:	68ba      	ldr	r2, [r7, #8]
 801ba6c:	601a      	str	r2, [r3, #0]
          break;
 801ba6e:	e00a      	b.n	801ba86 <HAL_FLASHEx_Erase+0x126>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801ba70:	68bb      	ldr	r3, [r7, #8]
 801ba72:	3301      	adds	r3, #1
 801ba74:	60bb      	str	r3, [r7, #8]
 801ba76:	687b      	ldr	r3, [r7, #4]
 801ba78:	689a      	ldr	r2, [r3, #8]
 801ba7a:	687b      	ldr	r3, [r7, #4]
 801ba7c:	68db      	ldr	r3, [r3, #12]
 801ba7e:	4413      	add	r3, r2
 801ba80:	68ba      	ldr	r2, [r7, #8]
 801ba82:	429a      	cmp	r2, r3
 801ba84:	d3d9      	bcc.n	801ba3a <HAL_FLASHEx_Erase+0xda>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 801ba86:	f000 f86b 	bl	801bb60 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801ba8a:	4b04      	ldr	r3, [pc, #16]	; (801ba9c <HAL_FLASHEx_Erase+0x13c>)
 801ba8c:	2200      	movs	r2, #0
 801ba8e:	701a      	strb	r2, [r3, #0]

  return status;
 801ba90:	7bfb      	ldrb	r3, [r7, #15]
}
 801ba92:	4618      	mov	r0, r3
 801ba94:	3710      	adds	r7, #16
 801ba96:	46bd      	mov	sp, r7
 801ba98:	bd80      	pop	{r7, pc}
 801ba9a:	bf00      	nop
 801ba9c:	20000010 	.word	0x20000010
 801baa0:	40022000 	.word	0x40022000

0801baa4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 801baa4:	b480      	push	{r7}
 801baa6:	b083      	sub	sp, #12
 801baa8:	af00      	add	r7, sp, #0
 801baaa:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 801baac:	687b      	ldr	r3, [r7, #4]
 801baae:	f003 0301 	and.w	r3, r3, #1
 801bab2:	2b00      	cmp	r3, #0
 801bab4:	d005      	beq.n	801bac2 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 801bab6:	4b0e      	ldr	r3, [pc, #56]	; (801baf0 <FLASH_MassErase+0x4c>)
 801bab8:	695b      	ldr	r3, [r3, #20]
 801baba:	4a0d      	ldr	r2, [pc, #52]	; (801baf0 <FLASH_MassErase+0x4c>)
 801babc:	f043 0304 	orr.w	r3, r3, #4
 801bac0:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 801bac2:	687b      	ldr	r3, [r7, #4]
 801bac4:	f003 0302 	and.w	r3, r3, #2
 801bac8:	2b00      	cmp	r3, #0
 801baca:	d005      	beq.n	801bad8 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 801bacc:	4b08      	ldr	r3, [pc, #32]	; (801baf0 <FLASH_MassErase+0x4c>)
 801bace:	695b      	ldr	r3, [r3, #20]
 801bad0:	4a07      	ldr	r2, [pc, #28]	; (801baf0 <FLASH_MassErase+0x4c>)
 801bad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801bad6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801bad8:	4b05      	ldr	r3, [pc, #20]	; (801baf0 <FLASH_MassErase+0x4c>)
 801bada:	695b      	ldr	r3, [r3, #20]
 801badc:	4a04      	ldr	r2, [pc, #16]	; (801baf0 <FLASH_MassErase+0x4c>)
 801bade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bae2:	6153      	str	r3, [r2, #20]
}
 801bae4:	bf00      	nop
 801bae6:	370c      	adds	r7, #12
 801bae8:	46bd      	mov	sp, r7
 801baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801baee:	4770      	bx	lr
 801baf0:	40022000 	.word	0x40022000

0801baf4 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 801baf4:	b480      	push	{r7}
 801baf6:	b083      	sub	sp, #12
 801baf8:	af00      	add	r7, sp, #0
 801bafa:	6078      	str	r0, [r7, #4]
 801bafc:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 801bafe:	683b      	ldr	r3, [r7, #0]
 801bb00:	f003 0301 	and.w	r3, r3, #1
 801bb04:	2b00      	cmp	r3, #0
 801bb06:	d006      	beq.n	801bb16 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 801bb08:	4b14      	ldr	r3, [pc, #80]	; (801bb5c <FLASH_PageErase+0x68>)
 801bb0a:	695b      	ldr	r3, [r3, #20]
 801bb0c:	4a13      	ldr	r2, [pc, #76]	; (801bb5c <FLASH_PageErase+0x68>)
 801bb0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801bb12:	6153      	str	r3, [r2, #20]
 801bb14:	e005      	b.n	801bb22 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 801bb16:	4b11      	ldr	r3, [pc, #68]	; (801bb5c <FLASH_PageErase+0x68>)
 801bb18:	695b      	ldr	r3, [r3, #20]
 801bb1a:	4a10      	ldr	r2, [pc, #64]	; (801bb5c <FLASH_PageErase+0x68>)
 801bb1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801bb20:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 801bb22:	4b0e      	ldr	r3, [pc, #56]	; (801bb5c <FLASH_PageErase+0x68>)
 801bb24:	695b      	ldr	r3, [r3, #20]
 801bb26:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 801bb2a:	687b      	ldr	r3, [r7, #4]
 801bb2c:	00db      	lsls	r3, r3, #3
 801bb2e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 801bb32:	490a      	ldr	r1, [pc, #40]	; (801bb5c <FLASH_PageErase+0x68>)
 801bb34:	4313      	orrs	r3, r2
 801bb36:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 801bb38:	4b08      	ldr	r3, [pc, #32]	; (801bb5c <FLASH_PageErase+0x68>)
 801bb3a:	695b      	ldr	r3, [r3, #20]
 801bb3c:	4a07      	ldr	r2, [pc, #28]	; (801bb5c <FLASH_PageErase+0x68>)
 801bb3e:	f043 0302 	orr.w	r3, r3, #2
 801bb42:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801bb44:	4b05      	ldr	r3, [pc, #20]	; (801bb5c <FLASH_PageErase+0x68>)
 801bb46:	695b      	ldr	r3, [r3, #20]
 801bb48:	4a04      	ldr	r2, [pc, #16]	; (801bb5c <FLASH_PageErase+0x68>)
 801bb4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bb4e:	6153      	str	r3, [r2, #20]
}
 801bb50:	bf00      	nop
 801bb52:	370c      	adds	r7, #12
 801bb54:	46bd      	mov	sp, r7
 801bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb5a:	4770      	bx	lr
 801bb5c:	40022000 	.word	0x40022000

0801bb60 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 801bb60:	b480      	push	{r7}
 801bb62:	b083      	sub	sp, #12
 801bb64:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 801bb66:	4b1e      	ldr	r3, [pc, #120]	; (801bbe0 <FLASH_FlushCaches+0x80>)
 801bb68:	7f1b      	ldrb	r3, [r3, #28]
 801bb6a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 801bb6c:	79fb      	ldrb	r3, [r7, #7]
 801bb6e:	2b01      	cmp	r3, #1
 801bb70:	d002      	beq.n	801bb78 <FLASH_FlushCaches+0x18>
 801bb72:	79fb      	ldrb	r3, [r7, #7]
 801bb74:	2b03      	cmp	r3, #3
 801bb76:	d111      	bne.n	801bb9c <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 801bb78:	4b1a      	ldr	r3, [pc, #104]	; (801bbe4 <FLASH_FlushCaches+0x84>)
 801bb7a:	681b      	ldr	r3, [r3, #0]
 801bb7c:	4a19      	ldr	r2, [pc, #100]	; (801bbe4 <FLASH_FlushCaches+0x84>)
 801bb7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801bb82:	6013      	str	r3, [r2, #0]
 801bb84:	4b17      	ldr	r3, [pc, #92]	; (801bbe4 <FLASH_FlushCaches+0x84>)
 801bb86:	681b      	ldr	r3, [r3, #0]
 801bb88:	4a16      	ldr	r2, [pc, #88]	; (801bbe4 <FLASH_FlushCaches+0x84>)
 801bb8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801bb8e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801bb90:	4b14      	ldr	r3, [pc, #80]	; (801bbe4 <FLASH_FlushCaches+0x84>)
 801bb92:	681b      	ldr	r3, [r3, #0]
 801bb94:	4a13      	ldr	r2, [pc, #76]	; (801bbe4 <FLASH_FlushCaches+0x84>)
 801bb96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801bb9a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 801bb9c:	79fb      	ldrb	r3, [r7, #7]
 801bb9e:	2b02      	cmp	r3, #2
 801bba0:	d002      	beq.n	801bba8 <FLASH_FlushCaches+0x48>
 801bba2:	79fb      	ldrb	r3, [r7, #7]
 801bba4:	2b03      	cmp	r3, #3
 801bba6:	d111      	bne.n	801bbcc <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 801bba8:	4b0e      	ldr	r3, [pc, #56]	; (801bbe4 <FLASH_FlushCaches+0x84>)
 801bbaa:	681b      	ldr	r3, [r3, #0]
 801bbac:	4a0d      	ldr	r2, [pc, #52]	; (801bbe4 <FLASH_FlushCaches+0x84>)
 801bbae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801bbb2:	6013      	str	r3, [r2, #0]
 801bbb4:	4b0b      	ldr	r3, [pc, #44]	; (801bbe4 <FLASH_FlushCaches+0x84>)
 801bbb6:	681b      	ldr	r3, [r3, #0]
 801bbb8:	4a0a      	ldr	r2, [pc, #40]	; (801bbe4 <FLASH_FlushCaches+0x84>)
 801bbba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bbbe:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 801bbc0:	4b08      	ldr	r3, [pc, #32]	; (801bbe4 <FLASH_FlushCaches+0x84>)
 801bbc2:	681b      	ldr	r3, [r3, #0]
 801bbc4:	4a07      	ldr	r2, [pc, #28]	; (801bbe4 <FLASH_FlushCaches+0x84>)
 801bbc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801bbca:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801bbcc:	4b04      	ldr	r3, [pc, #16]	; (801bbe0 <FLASH_FlushCaches+0x80>)
 801bbce:	2200      	movs	r2, #0
 801bbd0:	771a      	strb	r2, [r3, #28]
}
 801bbd2:	bf00      	nop
 801bbd4:	370c      	adds	r7, #12
 801bbd6:	46bd      	mov	sp, r7
 801bbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbdc:	4770      	bx	lr
 801bbde:	bf00      	nop
 801bbe0:	20000010 	.word	0x20000010
 801bbe4:	40022000 	.word	0x40022000

0801bbe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801bbe8:	b480      	push	{r7}
 801bbea:	b087      	sub	sp, #28
 801bbec:	af00      	add	r7, sp, #0
 801bbee:	6078      	str	r0, [r7, #4]
 801bbf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 801bbf2:	2300      	movs	r3, #0
 801bbf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801bbf6:	e17f      	b.n	801bef8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 801bbf8:	683b      	ldr	r3, [r7, #0]
 801bbfa:	681a      	ldr	r2, [r3, #0]
 801bbfc:	2101      	movs	r1, #1
 801bbfe:	697b      	ldr	r3, [r7, #20]
 801bc00:	fa01 f303 	lsl.w	r3, r1, r3
 801bc04:	4013      	ands	r3, r2
 801bc06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 801bc08:	68fb      	ldr	r3, [r7, #12]
 801bc0a:	2b00      	cmp	r3, #0
 801bc0c:	f000 8171 	beq.w	801bef2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801bc10:	683b      	ldr	r3, [r7, #0]
 801bc12:	685b      	ldr	r3, [r3, #4]
 801bc14:	2b01      	cmp	r3, #1
 801bc16:	d00b      	beq.n	801bc30 <HAL_GPIO_Init+0x48>
 801bc18:	683b      	ldr	r3, [r7, #0]
 801bc1a:	685b      	ldr	r3, [r3, #4]
 801bc1c:	2b02      	cmp	r3, #2
 801bc1e:	d007      	beq.n	801bc30 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801bc20:	683b      	ldr	r3, [r7, #0]
 801bc22:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801bc24:	2b11      	cmp	r3, #17
 801bc26:	d003      	beq.n	801bc30 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801bc28:	683b      	ldr	r3, [r7, #0]
 801bc2a:	685b      	ldr	r3, [r3, #4]
 801bc2c:	2b12      	cmp	r3, #18
 801bc2e:	d130      	bne.n	801bc92 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	689b      	ldr	r3, [r3, #8]
 801bc34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801bc36:	697b      	ldr	r3, [r7, #20]
 801bc38:	005b      	lsls	r3, r3, #1
 801bc3a:	2203      	movs	r2, #3
 801bc3c:	fa02 f303 	lsl.w	r3, r2, r3
 801bc40:	43db      	mvns	r3, r3
 801bc42:	693a      	ldr	r2, [r7, #16]
 801bc44:	4013      	ands	r3, r2
 801bc46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 801bc48:	683b      	ldr	r3, [r7, #0]
 801bc4a:	68da      	ldr	r2, [r3, #12]
 801bc4c:	697b      	ldr	r3, [r7, #20]
 801bc4e:	005b      	lsls	r3, r3, #1
 801bc50:	fa02 f303 	lsl.w	r3, r2, r3
 801bc54:	693a      	ldr	r2, [r7, #16]
 801bc56:	4313      	orrs	r3, r2
 801bc58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801bc5a:	687b      	ldr	r3, [r7, #4]
 801bc5c:	693a      	ldr	r2, [r7, #16]
 801bc5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801bc60:	687b      	ldr	r3, [r7, #4]
 801bc62:	685b      	ldr	r3, [r3, #4]
 801bc64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801bc66:	2201      	movs	r2, #1
 801bc68:	697b      	ldr	r3, [r7, #20]
 801bc6a:	fa02 f303 	lsl.w	r3, r2, r3
 801bc6e:	43db      	mvns	r3, r3
 801bc70:	693a      	ldr	r2, [r7, #16]
 801bc72:	4013      	ands	r3, r2
 801bc74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 801bc76:	683b      	ldr	r3, [r7, #0]
 801bc78:	685b      	ldr	r3, [r3, #4]
 801bc7a:	091b      	lsrs	r3, r3, #4
 801bc7c:	f003 0201 	and.w	r2, r3, #1
 801bc80:	697b      	ldr	r3, [r7, #20]
 801bc82:	fa02 f303 	lsl.w	r3, r2, r3
 801bc86:	693a      	ldr	r2, [r7, #16]
 801bc88:	4313      	orrs	r3, r2
 801bc8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801bc8c:	687b      	ldr	r3, [r7, #4]
 801bc8e:	693a      	ldr	r2, [r7, #16]
 801bc90:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 801bc92:	683b      	ldr	r3, [r7, #0]
 801bc94:	685b      	ldr	r3, [r3, #4]
 801bc96:	f003 0303 	and.w	r3, r3, #3
 801bc9a:	2b03      	cmp	r3, #3
 801bc9c:	d118      	bne.n	801bcd0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 801bc9e:	687b      	ldr	r3, [r7, #4]
 801bca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bca2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 801bca4:	2201      	movs	r2, #1
 801bca6:	697b      	ldr	r3, [r7, #20]
 801bca8:	fa02 f303 	lsl.w	r3, r2, r3
 801bcac:	43db      	mvns	r3, r3
 801bcae:	693a      	ldr	r2, [r7, #16]
 801bcb0:	4013      	ands	r3, r2
 801bcb2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 801bcb4:	683b      	ldr	r3, [r7, #0]
 801bcb6:	685b      	ldr	r3, [r3, #4]
 801bcb8:	08db      	lsrs	r3, r3, #3
 801bcba:	f003 0201 	and.w	r2, r3, #1
 801bcbe:	697b      	ldr	r3, [r7, #20]
 801bcc0:	fa02 f303 	lsl.w	r3, r2, r3
 801bcc4:	693a      	ldr	r2, [r7, #16]
 801bcc6:	4313      	orrs	r3, r2
 801bcc8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 801bcca:	687b      	ldr	r3, [r7, #4]
 801bccc:	693a      	ldr	r2, [r7, #16]
 801bcce:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801bcd0:	687b      	ldr	r3, [r7, #4]
 801bcd2:	68db      	ldr	r3, [r3, #12]
 801bcd4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 801bcd6:	697b      	ldr	r3, [r7, #20]
 801bcd8:	005b      	lsls	r3, r3, #1
 801bcda:	2203      	movs	r2, #3
 801bcdc:	fa02 f303 	lsl.w	r3, r2, r3
 801bce0:	43db      	mvns	r3, r3
 801bce2:	693a      	ldr	r2, [r7, #16]
 801bce4:	4013      	ands	r3, r2
 801bce6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 801bce8:	683b      	ldr	r3, [r7, #0]
 801bcea:	689a      	ldr	r2, [r3, #8]
 801bcec:	697b      	ldr	r3, [r7, #20]
 801bcee:	005b      	lsls	r3, r3, #1
 801bcf0:	fa02 f303 	lsl.w	r3, r2, r3
 801bcf4:	693a      	ldr	r2, [r7, #16]
 801bcf6:	4313      	orrs	r3, r2
 801bcf8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 801bcfa:	687b      	ldr	r3, [r7, #4]
 801bcfc:	693a      	ldr	r2, [r7, #16]
 801bcfe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801bd00:	683b      	ldr	r3, [r7, #0]
 801bd02:	685b      	ldr	r3, [r3, #4]
 801bd04:	2b02      	cmp	r3, #2
 801bd06:	d003      	beq.n	801bd10 <HAL_GPIO_Init+0x128>
 801bd08:	683b      	ldr	r3, [r7, #0]
 801bd0a:	685b      	ldr	r3, [r3, #4]
 801bd0c:	2b12      	cmp	r3, #18
 801bd0e:	d123      	bne.n	801bd58 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 801bd10:	697b      	ldr	r3, [r7, #20]
 801bd12:	08da      	lsrs	r2, r3, #3
 801bd14:	687b      	ldr	r3, [r7, #4]
 801bd16:	3208      	adds	r2, #8
 801bd18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bd1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 801bd1e:	697b      	ldr	r3, [r7, #20]
 801bd20:	f003 0307 	and.w	r3, r3, #7
 801bd24:	009b      	lsls	r3, r3, #2
 801bd26:	220f      	movs	r2, #15
 801bd28:	fa02 f303 	lsl.w	r3, r2, r3
 801bd2c:	43db      	mvns	r3, r3
 801bd2e:	693a      	ldr	r2, [r7, #16]
 801bd30:	4013      	ands	r3, r2
 801bd32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 801bd34:	683b      	ldr	r3, [r7, #0]
 801bd36:	691a      	ldr	r2, [r3, #16]
 801bd38:	697b      	ldr	r3, [r7, #20]
 801bd3a:	f003 0307 	and.w	r3, r3, #7
 801bd3e:	009b      	lsls	r3, r3, #2
 801bd40:	fa02 f303 	lsl.w	r3, r2, r3
 801bd44:	693a      	ldr	r2, [r7, #16]
 801bd46:	4313      	orrs	r3, r2
 801bd48:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 801bd4a:	697b      	ldr	r3, [r7, #20]
 801bd4c:	08da      	lsrs	r2, r3, #3
 801bd4e:	687b      	ldr	r3, [r7, #4]
 801bd50:	3208      	adds	r2, #8
 801bd52:	6939      	ldr	r1, [r7, #16]
 801bd54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801bd58:	687b      	ldr	r3, [r7, #4]
 801bd5a:	681b      	ldr	r3, [r3, #0]
 801bd5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 801bd5e:	697b      	ldr	r3, [r7, #20]
 801bd60:	005b      	lsls	r3, r3, #1
 801bd62:	2203      	movs	r2, #3
 801bd64:	fa02 f303 	lsl.w	r3, r2, r3
 801bd68:	43db      	mvns	r3, r3
 801bd6a:	693a      	ldr	r2, [r7, #16]
 801bd6c:	4013      	ands	r3, r2
 801bd6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 801bd70:	683b      	ldr	r3, [r7, #0]
 801bd72:	685b      	ldr	r3, [r3, #4]
 801bd74:	f003 0203 	and.w	r2, r3, #3
 801bd78:	697b      	ldr	r3, [r7, #20]
 801bd7a:	005b      	lsls	r3, r3, #1
 801bd7c:	fa02 f303 	lsl.w	r3, r2, r3
 801bd80:	693a      	ldr	r2, [r7, #16]
 801bd82:	4313      	orrs	r3, r2
 801bd84:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 801bd86:	687b      	ldr	r3, [r7, #4]
 801bd88:	693a      	ldr	r2, [r7, #16]
 801bd8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801bd8c:	683b      	ldr	r3, [r7, #0]
 801bd8e:	685b      	ldr	r3, [r3, #4]
 801bd90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801bd94:	2b00      	cmp	r3, #0
 801bd96:	f000 80ac 	beq.w	801bef2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801bd9a:	4b5f      	ldr	r3, [pc, #380]	; (801bf18 <HAL_GPIO_Init+0x330>)
 801bd9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bd9e:	4a5e      	ldr	r2, [pc, #376]	; (801bf18 <HAL_GPIO_Init+0x330>)
 801bda0:	f043 0301 	orr.w	r3, r3, #1
 801bda4:	6613      	str	r3, [r2, #96]	; 0x60
 801bda6:	4b5c      	ldr	r3, [pc, #368]	; (801bf18 <HAL_GPIO_Init+0x330>)
 801bda8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bdaa:	f003 0301 	and.w	r3, r3, #1
 801bdae:	60bb      	str	r3, [r7, #8]
 801bdb0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 801bdb2:	4a5a      	ldr	r2, [pc, #360]	; (801bf1c <HAL_GPIO_Init+0x334>)
 801bdb4:	697b      	ldr	r3, [r7, #20]
 801bdb6:	089b      	lsrs	r3, r3, #2
 801bdb8:	3302      	adds	r3, #2
 801bdba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bdbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 801bdc0:	697b      	ldr	r3, [r7, #20]
 801bdc2:	f003 0303 	and.w	r3, r3, #3
 801bdc6:	009b      	lsls	r3, r3, #2
 801bdc8:	220f      	movs	r2, #15
 801bdca:	fa02 f303 	lsl.w	r3, r2, r3
 801bdce:	43db      	mvns	r3, r3
 801bdd0:	693a      	ldr	r2, [r7, #16]
 801bdd2:	4013      	ands	r3, r2
 801bdd4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 801bdd6:	687b      	ldr	r3, [r7, #4]
 801bdd8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 801bddc:	d025      	beq.n	801be2a <HAL_GPIO_Init+0x242>
 801bdde:	687b      	ldr	r3, [r7, #4]
 801bde0:	4a4f      	ldr	r2, [pc, #316]	; (801bf20 <HAL_GPIO_Init+0x338>)
 801bde2:	4293      	cmp	r3, r2
 801bde4:	d01f      	beq.n	801be26 <HAL_GPIO_Init+0x23e>
 801bde6:	687b      	ldr	r3, [r7, #4]
 801bde8:	4a4e      	ldr	r2, [pc, #312]	; (801bf24 <HAL_GPIO_Init+0x33c>)
 801bdea:	4293      	cmp	r3, r2
 801bdec:	d019      	beq.n	801be22 <HAL_GPIO_Init+0x23a>
 801bdee:	687b      	ldr	r3, [r7, #4]
 801bdf0:	4a4d      	ldr	r2, [pc, #308]	; (801bf28 <HAL_GPIO_Init+0x340>)
 801bdf2:	4293      	cmp	r3, r2
 801bdf4:	d013      	beq.n	801be1e <HAL_GPIO_Init+0x236>
 801bdf6:	687b      	ldr	r3, [r7, #4]
 801bdf8:	4a4c      	ldr	r2, [pc, #304]	; (801bf2c <HAL_GPIO_Init+0x344>)
 801bdfa:	4293      	cmp	r3, r2
 801bdfc:	d00d      	beq.n	801be1a <HAL_GPIO_Init+0x232>
 801bdfe:	687b      	ldr	r3, [r7, #4]
 801be00:	4a4b      	ldr	r2, [pc, #300]	; (801bf30 <HAL_GPIO_Init+0x348>)
 801be02:	4293      	cmp	r3, r2
 801be04:	d007      	beq.n	801be16 <HAL_GPIO_Init+0x22e>
 801be06:	687b      	ldr	r3, [r7, #4]
 801be08:	4a4a      	ldr	r2, [pc, #296]	; (801bf34 <HAL_GPIO_Init+0x34c>)
 801be0a:	4293      	cmp	r3, r2
 801be0c:	d101      	bne.n	801be12 <HAL_GPIO_Init+0x22a>
 801be0e:	2306      	movs	r3, #6
 801be10:	e00c      	b.n	801be2c <HAL_GPIO_Init+0x244>
 801be12:	2307      	movs	r3, #7
 801be14:	e00a      	b.n	801be2c <HAL_GPIO_Init+0x244>
 801be16:	2305      	movs	r3, #5
 801be18:	e008      	b.n	801be2c <HAL_GPIO_Init+0x244>
 801be1a:	2304      	movs	r3, #4
 801be1c:	e006      	b.n	801be2c <HAL_GPIO_Init+0x244>
 801be1e:	2303      	movs	r3, #3
 801be20:	e004      	b.n	801be2c <HAL_GPIO_Init+0x244>
 801be22:	2302      	movs	r3, #2
 801be24:	e002      	b.n	801be2c <HAL_GPIO_Init+0x244>
 801be26:	2301      	movs	r3, #1
 801be28:	e000      	b.n	801be2c <HAL_GPIO_Init+0x244>
 801be2a:	2300      	movs	r3, #0
 801be2c:	697a      	ldr	r2, [r7, #20]
 801be2e:	f002 0203 	and.w	r2, r2, #3
 801be32:	0092      	lsls	r2, r2, #2
 801be34:	4093      	lsls	r3, r2
 801be36:	693a      	ldr	r2, [r7, #16]
 801be38:	4313      	orrs	r3, r2
 801be3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 801be3c:	4937      	ldr	r1, [pc, #220]	; (801bf1c <HAL_GPIO_Init+0x334>)
 801be3e:	697b      	ldr	r3, [r7, #20]
 801be40:	089b      	lsrs	r3, r3, #2
 801be42:	3302      	adds	r3, #2
 801be44:	693a      	ldr	r2, [r7, #16]
 801be46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 801be4a:	4b3b      	ldr	r3, [pc, #236]	; (801bf38 <HAL_GPIO_Init+0x350>)
 801be4c:	681b      	ldr	r3, [r3, #0]
 801be4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801be50:	68fb      	ldr	r3, [r7, #12]
 801be52:	43db      	mvns	r3, r3
 801be54:	693a      	ldr	r2, [r7, #16]
 801be56:	4013      	ands	r3, r2
 801be58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801be5a:	683b      	ldr	r3, [r7, #0]
 801be5c:	685b      	ldr	r3, [r3, #4]
 801be5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801be62:	2b00      	cmp	r3, #0
 801be64:	d003      	beq.n	801be6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 801be66:	693a      	ldr	r2, [r7, #16]
 801be68:	68fb      	ldr	r3, [r7, #12]
 801be6a:	4313      	orrs	r3, r2
 801be6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 801be6e:	4a32      	ldr	r2, [pc, #200]	; (801bf38 <HAL_GPIO_Init+0x350>)
 801be70:	693b      	ldr	r3, [r7, #16]
 801be72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 801be74:	4b30      	ldr	r3, [pc, #192]	; (801bf38 <HAL_GPIO_Init+0x350>)
 801be76:	685b      	ldr	r3, [r3, #4]
 801be78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801be7a:	68fb      	ldr	r3, [r7, #12]
 801be7c:	43db      	mvns	r3, r3
 801be7e:	693a      	ldr	r2, [r7, #16]
 801be80:	4013      	ands	r3, r2
 801be82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801be84:	683b      	ldr	r3, [r7, #0]
 801be86:	685b      	ldr	r3, [r3, #4]
 801be88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801be8c:	2b00      	cmp	r3, #0
 801be8e:	d003      	beq.n	801be98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 801be90:	693a      	ldr	r2, [r7, #16]
 801be92:	68fb      	ldr	r3, [r7, #12]
 801be94:	4313      	orrs	r3, r2
 801be96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 801be98:	4a27      	ldr	r2, [pc, #156]	; (801bf38 <HAL_GPIO_Init+0x350>)
 801be9a:	693b      	ldr	r3, [r7, #16]
 801be9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801be9e:	4b26      	ldr	r3, [pc, #152]	; (801bf38 <HAL_GPIO_Init+0x350>)
 801bea0:	689b      	ldr	r3, [r3, #8]
 801bea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801bea4:	68fb      	ldr	r3, [r7, #12]
 801bea6:	43db      	mvns	r3, r3
 801bea8:	693a      	ldr	r2, [r7, #16]
 801beaa:	4013      	ands	r3, r2
 801beac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801beae:	683b      	ldr	r3, [r7, #0]
 801beb0:	685b      	ldr	r3, [r3, #4]
 801beb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801beb6:	2b00      	cmp	r3, #0
 801beb8:	d003      	beq.n	801bec2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 801beba:	693a      	ldr	r2, [r7, #16]
 801bebc:	68fb      	ldr	r3, [r7, #12]
 801bebe:	4313      	orrs	r3, r2
 801bec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 801bec2:	4a1d      	ldr	r2, [pc, #116]	; (801bf38 <HAL_GPIO_Init+0x350>)
 801bec4:	693b      	ldr	r3, [r7, #16]
 801bec6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 801bec8:	4b1b      	ldr	r3, [pc, #108]	; (801bf38 <HAL_GPIO_Init+0x350>)
 801beca:	68db      	ldr	r3, [r3, #12]
 801becc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801bece:	68fb      	ldr	r3, [r7, #12]
 801bed0:	43db      	mvns	r3, r3
 801bed2:	693a      	ldr	r2, [r7, #16]
 801bed4:	4013      	ands	r3, r2
 801bed6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801bed8:	683b      	ldr	r3, [r7, #0]
 801beda:	685b      	ldr	r3, [r3, #4]
 801bedc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801bee0:	2b00      	cmp	r3, #0
 801bee2:	d003      	beq.n	801beec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 801bee4:	693a      	ldr	r2, [r7, #16]
 801bee6:	68fb      	ldr	r3, [r7, #12]
 801bee8:	4313      	orrs	r3, r2
 801beea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801beec:	4a12      	ldr	r2, [pc, #72]	; (801bf38 <HAL_GPIO_Init+0x350>)
 801beee:	693b      	ldr	r3, [r7, #16]
 801bef0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 801bef2:	697b      	ldr	r3, [r7, #20]
 801bef4:	3301      	adds	r3, #1
 801bef6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801bef8:	683b      	ldr	r3, [r7, #0]
 801befa:	681a      	ldr	r2, [r3, #0]
 801befc:	697b      	ldr	r3, [r7, #20]
 801befe:	fa22 f303 	lsr.w	r3, r2, r3
 801bf02:	2b00      	cmp	r3, #0
 801bf04:	f47f ae78 	bne.w	801bbf8 <HAL_GPIO_Init+0x10>
  }
}
 801bf08:	bf00      	nop
 801bf0a:	bf00      	nop
 801bf0c:	371c      	adds	r7, #28
 801bf0e:	46bd      	mov	sp, r7
 801bf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf14:	4770      	bx	lr
 801bf16:	bf00      	nop
 801bf18:	40021000 	.word	0x40021000
 801bf1c:	40010000 	.word	0x40010000
 801bf20:	48000400 	.word	0x48000400
 801bf24:	48000800 	.word	0x48000800
 801bf28:	48000c00 	.word	0x48000c00
 801bf2c:	48001000 	.word	0x48001000
 801bf30:	48001400 	.word	0x48001400
 801bf34:	48001800 	.word	0x48001800
 801bf38:	40010400 	.word	0x40010400

0801bf3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801bf3c:	b480      	push	{r7}
 801bf3e:	b083      	sub	sp, #12
 801bf40:	af00      	add	r7, sp, #0
 801bf42:	6078      	str	r0, [r7, #4]
 801bf44:	460b      	mov	r3, r1
 801bf46:	807b      	strh	r3, [r7, #2]
 801bf48:	4613      	mov	r3, r2
 801bf4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801bf4c:	787b      	ldrb	r3, [r7, #1]
 801bf4e:	2b00      	cmp	r3, #0
 801bf50:	d003      	beq.n	801bf5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801bf52:	887a      	ldrh	r2, [r7, #2]
 801bf54:	687b      	ldr	r3, [r7, #4]
 801bf56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 801bf58:	e002      	b.n	801bf60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801bf5a:	887a      	ldrh	r2, [r7, #2]
 801bf5c:	687b      	ldr	r3, [r7, #4]
 801bf5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 801bf60:	bf00      	nop
 801bf62:	370c      	adds	r7, #12
 801bf64:	46bd      	mov	sp, r7
 801bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf6a:	4770      	bx	lr

0801bf6c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801bf6c:	b480      	push	{r7}
 801bf6e:	b085      	sub	sp, #20
 801bf70:	af00      	add	r7, sp, #0
 801bf72:	6078      	str	r0, [r7, #4]
 801bf74:	460b      	mov	r3, r1
 801bf76:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 801bf78:	687b      	ldr	r3, [r7, #4]
 801bf7a:	695b      	ldr	r3, [r3, #20]
 801bf7c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 801bf7e:	887a      	ldrh	r2, [r7, #2]
 801bf80:	68fb      	ldr	r3, [r7, #12]
 801bf82:	4013      	ands	r3, r2
 801bf84:	041a      	lsls	r2, r3, #16
 801bf86:	68fb      	ldr	r3, [r7, #12]
 801bf88:	43d9      	mvns	r1, r3
 801bf8a:	887b      	ldrh	r3, [r7, #2]
 801bf8c:	400b      	ands	r3, r1
 801bf8e:	431a      	orrs	r2, r3
 801bf90:	687b      	ldr	r3, [r7, #4]
 801bf92:	619a      	str	r2, [r3, #24]
}
 801bf94:	bf00      	nop
 801bf96:	3714      	adds	r7, #20
 801bf98:	46bd      	mov	sp, r7
 801bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf9e:	4770      	bx	lr

0801bfa0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 801bfa0:	b480      	push	{r7}
 801bfa2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 801bfa4:	4b04      	ldr	r3, [pc, #16]	; (801bfb8 <HAL_PWREx_GetVoltageRange+0x18>)
 801bfa6:	681b      	ldr	r3, [r3, #0]
 801bfa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 801bfac:	4618      	mov	r0, r3
 801bfae:	46bd      	mov	sp, r7
 801bfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfb4:	4770      	bx	lr
 801bfb6:	bf00      	nop
 801bfb8:	40007000 	.word	0x40007000

0801bfbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 801bfbc:	b480      	push	{r7}
 801bfbe:	b085      	sub	sp, #20
 801bfc0:	af00      	add	r7, sp, #0
 801bfc2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 801bfc4:	687b      	ldr	r3, [r7, #4]
 801bfc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bfca:	d130      	bne.n	801c02e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 801bfcc:	4b23      	ldr	r3, [pc, #140]	; (801c05c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801bfce:	681b      	ldr	r3, [r3, #0]
 801bfd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801bfd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bfd8:	d038      	beq.n	801c04c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801bfda:	4b20      	ldr	r3, [pc, #128]	; (801c05c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801bfdc:	681b      	ldr	r3, [r3, #0]
 801bfde:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801bfe2:	4a1e      	ldr	r2, [pc, #120]	; (801c05c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801bfe4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801bfe8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801bfea:	4b1d      	ldr	r3, [pc, #116]	; (801c060 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 801bfec:	681b      	ldr	r3, [r3, #0]
 801bfee:	2232      	movs	r2, #50	; 0x32
 801bff0:	fb02 f303 	mul.w	r3, r2, r3
 801bff4:	4a1b      	ldr	r2, [pc, #108]	; (801c064 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 801bff6:	fba2 2303 	umull	r2, r3, r2, r3
 801bffa:	0c9b      	lsrs	r3, r3, #18
 801bffc:	3301      	adds	r3, #1
 801bffe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801c000:	e002      	b.n	801c008 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 801c002:	68fb      	ldr	r3, [r7, #12]
 801c004:	3b01      	subs	r3, #1
 801c006:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801c008:	4b14      	ldr	r3, [pc, #80]	; (801c05c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801c00a:	695b      	ldr	r3, [r3, #20]
 801c00c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c014:	d102      	bne.n	801c01c <HAL_PWREx_ControlVoltageScaling+0x60>
 801c016:	68fb      	ldr	r3, [r7, #12]
 801c018:	2b00      	cmp	r3, #0
 801c01a:	d1f2      	bne.n	801c002 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801c01c:	4b0f      	ldr	r3, [pc, #60]	; (801c05c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801c01e:	695b      	ldr	r3, [r3, #20]
 801c020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c028:	d110      	bne.n	801c04c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 801c02a:	2303      	movs	r3, #3
 801c02c:	e00f      	b.n	801c04e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 801c02e:	4b0b      	ldr	r3, [pc, #44]	; (801c05c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801c030:	681b      	ldr	r3, [r3, #0]
 801c032:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801c036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c03a:	d007      	beq.n	801c04c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 801c03c:	4b07      	ldr	r3, [pc, #28]	; (801c05c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801c03e:	681b      	ldr	r3, [r3, #0]
 801c040:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801c044:	4a05      	ldr	r2, [pc, #20]	; (801c05c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801c046:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801c04a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 801c04c:	2300      	movs	r3, #0
}
 801c04e:	4618      	mov	r0, r3
 801c050:	3714      	adds	r7, #20
 801c052:	46bd      	mov	sp, r7
 801c054:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c058:	4770      	bx	lr
 801c05a:	bf00      	nop
 801c05c:	40007000 	.word	0x40007000
 801c060:	20000004 	.word	0x20000004
 801c064:	431bde83 	.word	0x431bde83

0801c068 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801c068:	b580      	push	{r7, lr}
 801c06a:	b088      	sub	sp, #32
 801c06c:	af00      	add	r7, sp, #0
 801c06e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801c070:	687b      	ldr	r3, [r7, #4]
 801c072:	2b00      	cmp	r3, #0
 801c074:	d101      	bne.n	801c07a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801c076:	2301      	movs	r3, #1
 801c078:	e3d4      	b.n	801c824 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c07a:	4ba1      	ldr	r3, [pc, #644]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c07c:	689b      	ldr	r3, [r3, #8]
 801c07e:	f003 030c 	and.w	r3, r3, #12
 801c082:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801c084:	4b9e      	ldr	r3, [pc, #632]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c086:	68db      	ldr	r3, [r3, #12]
 801c088:	f003 0303 	and.w	r3, r3, #3
 801c08c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801c08e:	687b      	ldr	r3, [r7, #4]
 801c090:	681b      	ldr	r3, [r3, #0]
 801c092:	f003 0310 	and.w	r3, r3, #16
 801c096:	2b00      	cmp	r3, #0
 801c098:	f000 80e4 	beq.w	801c264 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 801c09c:	69bb      	ldr	r3, [r7, #24]
 801c09e:	2b00      	cmp	r3, #0
 801c0a0:	d007      	beq.n	801c0b2 <HAL_RCC_OscConfig+0x4a>
 801c0a2:	69bb      	ldr	r3, [r7, #24]
 801c0a4:	2b0c      	cmp	r3, #12
 801c0a6:	f040 808b 	bne.w	801c1c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 801c0aa:	697b      	ldr	r3, [r7, #20]
 801c0ac:	2b01      	cmp	r3, #1
 801c0ae:	f040 8087 	bne.w	801c1c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801c0b2:	4b93      	ldr	r3, [pc, #588]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c0b4:	681b      	ldr	r3, [r3, #0]
 801c0b6:	f003 0302 	and.w	r3, r3, #2
 801c0ba:	2b00      	cmp	r3, #0
 801c0bc:	d005      	beq.n	801c0ca <HAL_RCC_OscConfig+0x62>
 801c0be:	687b      	ldr	r3, [r7, #4]
 801c0c0:	699b      	ldr	r3, [r3, #24]
 801c0c2:	2b00      	cmp	r3, #0
 801c0c4:	d101      	bne.n	801c0ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 801c0c6:	2301      	movs	r3, #1
 801c0c8:	e3ac      	b.n	801c824 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 801c0ca:	687b      	ldr	r3, [r7, #4]
 801c0cc:	6a1a      	ldr	r2, [r3, #32]
 801c0ce:	4b8c      	ldr	r3, [pc, #560]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c0d0:	681b      	ldr	r3, [r3, #0]
 801c0d2:	f003 0308 	and.w	r3, r3, #8
 801c0d6:	2b00      	cmp	r3, #0
 801c0d8:	d004      	beq.n	801c0e4 <HAL_RCC_OscConfig+0x7c>
 801c0da:	4b89      	ldr	r3, [pc, #548]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c0dc:	681b      	ldr	r3, [r3, #0]
 801c0de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c0e2:	e005      	b.n	801c0f0 <HAL_RCC_OscConfig+0x88>
 801c0e4:	4b86      	ldr	r3, [pc, #536]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c0e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c0ea:	091b      	lsrs	r3, r3, #4
 801c0ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c0f0:	4293      	cmp	r3, r2
 801c0f2:	d223      	bcs.n	801c13c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801c0f4:	687b      	ldr	r3, [r7, #4]
 801c0f6:	6a1b      	ldr	r3, [r3, #32]
 801c0f8:	4618      	mov	r0, r3
 801c0fa:	f000 fd41 	bl	801cb80 <RCC_SetFlashLatencyFromMSIRange>
 801c0fe:	4603      	mov	r3, r0
 801c100:	2b00      	cmp	r3, #0
 801c102:	d001      	beq.n	801c108 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 801c104:	2301      	movs	r3, #1
 801c106:	e38d      	b.n	801c824 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801c108:	4b7d      	ldr	r3, [pc, #500]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c10a:	681b      	ldr	r3, [r3, #0]
 801c10c:	4a7c      	ldr	r2, [pc, #496]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c10e:	f043 0308 	orr.w	r3, r3, #8
 801c112:	6013      	str	r3, [r2, #0]
 801c114:	4b7a      	ldr	r3, [pc, #488]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c116:	681b      	ldr	r3, [r3, #0]
 801c118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801c11c:	687b      	ldr	r3, [r7, #4]
 801c11e:	6a1b      	ldr	r3, [r3, #32]
 801c120:	4977      	ldr	r1, [pc, #476]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c122:	4313      	orrs	r3, r2
 801c124:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801c126:	4b76      	ldr	r3, [pc, #472]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c128:	685b      	ldr	r3, [r3, #4]
 801c12a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 801c12e:	687b      	ldr	r3, [r7, #4]
 801c130:	69db      	ldr	r3, [r3, #28]
 801c132:	021b      	lsls	r3, r3, #8
 801c134:	4972      	ldr	r1, [pc, #456]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c136:	4313      	orrs	r3, r2
 801c138:	604b      	str	r3, [r1, #4]
 801c13a:	e025      	b.n	801c188 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801c13c:	4b70      	ldr	r3, [pc, #448]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c13e:	681b      	ldr	r3, [r3, #0]
 801c140:	4a6f      	ldr	r2, [pc, #444]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c142:	f043 0308 	orr.w	r3, r3, #8
 801c146:	6013      	str	r3, [r2, #0]
 801c148:	4b6d      	ldr	r3, [pc, #436]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c14a:	681b      	ldr	r3, [r3, #0]
 801c14c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	6a1b      	ldr	r3, [r3, #32]
 801c154:	496a      	ldr	r1, [pc, #424]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c156:	4313      	orrs	r3, r2
 801c158:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801c15a:	4b69      	ldr	r3, [pc, #420]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c15c:	685b      	ldr	r3, [r3, #4]
 801c15e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 801c162:	687b      	ldr	r3, [r7, #4]
 801c164:	69db      	ldr	r3, [r3, #28]
 801c166:	021b      	lsls	r3, r3, #8
 801c168:	4965      	ldr	r1, [pc, #404]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c16a:	4313      	orrs	r3, r2
 801c16c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 801c16e:	69bb      	ldr	r3, [r7, #24]
 801c170:	2b00      	cmp	r3, #0
 801c172:	d109      	bne.n	801c188 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801c174:	687b      	ldr	r3, [r7, #4]
 801c176:	6a1b      	ldr	r3, [r3, #32]
 801c178:	4618      	mov	r0, r3
 801c17a:	f000 fd01 	bl	801cb80 <RCC_SetFlashLatencyFromMSIRange>
 801c17e:	4603      	mov	r3, r0
 801c180:	2b00      	cmp	r3, #0
 801c182:	d001      	beq.n	801c188 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 801c184:	2301      	movs	r3, #1
 801c186:	e34d      	b.n	801c824 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801c188:	f000 fc36 	bl	801c9f8 <HAL_RCC_GetSysClockFreq>
 801c18c:	4602      	mov	r2, r0
 801c18e:	4b5c      	ldr	r3, [pc, #368]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c190:	689b      	ldr	r3, [r3, #8]
 801c192:	091b      	lsrs	r3, r3, #4
 801c194:	f003 030f 	and.w	r3, r3, #15
 801c198:	495a      	ldr	r1, [pc, #360]	; (801c304 <HAL_RCC_OscConfig+0x29c>)
 801c19a:	5ccb      	ldrb	r3, [r1, r3]
 801c19c:	f003 031f 	and.w	r3, r3, #31
 801c1a0:	fa22 f303 	lsr.w	r3, r2, r3
 801c1a4:	4a58      	ldr	r2, [pc, #352]	; (801c308 <HAL_RCC_OscConfig+0x2a0>)
 801c1a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 801c1a8:	4b58      	ldr	r3, [pc, #352]	; (801c30c <HAL_RCC_OscConfig+0x2a4>)
 801c1aa:	681b      	ldr	r3, [r3, #0]
 801c1ac:	4618      	mov	r0, r3
 801c1ae:	f7ff f851 	bl	801b254 <HAL_InitTick>
 801c1b2:	4603      	mov	r3, r0
 801c1b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 801c1b6:	7bfb      	ldrb	r3, [r7, #15]
 801c1b8:	2b00      	cmp	r3, #0
 801c1ba:	d052      	beq.n	801c262 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 801c1bc:	7bfb      	ldrb	r3, [r7, #15]
 801c1be:	e331      	b.n	801c824 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	699b      	ldr	r3, [r3, #24]
 801c1c4:	2b00      	cmp	r3, #0
 801c1c6:	d032      	beq.n	801c22e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801c1c8:	4b4d      	ldr	r3, [pc, #308]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c1ca:	681b      	ldr	r3, [r3, #0]
 801c1cc:	4a4c      	ldr	r2, [pc, #304]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c1ce:	f043 0301 	orr.w	r3, r3, #1
 801c1d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 801c1d4:	f7ff f88e 	bl	801b2f4 <HAL_GetTick>
 801c1d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801c1da:	e008      	b.n	801c1ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801c1dc:	f7ff f88a 	bl	801b2f4 <HAL_GetTick>
 801c1e0:	4602      	mov	r2, r0
 801c1e2:	693b      	ldr	r3, [r7, #16]
 801c1e4:	1ad3      	subs	r3, r2, r3
 801c1e6:	2b02      	cmp	r3, #2
 801c1e8:	d901      	bls.n	801c1ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 801c1ea:	2303      	movs	r3, #3
 801c1ec:	e31a      	b.n	801c824 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801c1ee:	4b44      	ldr	r3, [pc, #272]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c1f0:	681b      	ldr	r3, [r3, #0]
 801c1f2:	f003 0302 	and.w	r3, r3, #2
 801c1f6:	2b00      	cmp	r3, #0
 801c1f8:	d0f0      	beq.n	801c1dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801c1fa:	4b41      	ldr	r3, [pc, #260]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c1fc:	681b      	ldr	r3, [r3, #0]
 801c1fe:	4a40      	ldr	r2, [pc, #256]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c200:	f043 0308 	orr.w	r3, r3, #8
 801c204:	6013      	str	r3, [r2, #0]
 801c206:	4b3e      	ldr	r3, [pc, #248]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c208:	681b      	ldr	r3, [r3, #0]
 801c20a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801c20e:	687b      	ldr	r3, [r7, #4]
 801c210:	6a1b      	ldr	r3, [r3, #32]
 801c212:	493b      	ldr	r1, [pc, #236]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c214:	4313      	orrs	r3, r2
 801c216:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801c218:	4b39      	ldr	r3, [pc, #228]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c21a:	685b      	ldr	r3, [r3, #4]
 801c21c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 801c220:	687b      	ldr	r3, [r7, #4]
 801c222:	69db      	ldr	r3, [r3, #28]
 801c224:	021b      	lsls	r3, r3, #8
 801c226:	4936      	ldr	r1, [pc, #216]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c228:	4313      	orrs	r3, r2
 801c22a:	604b      	str	r3, [r1, #4]
 801c22c:	e01a      	b.n	801c264 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801c22e:	4b34      	ldr	r3, [pc, #208]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c230:	681b      	ldr	r3, [r3, #0]
 801c232:	4a33      	ldr	r2, [pc, #204]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c234:	f023 0301 	bic.w	r3, r3, #1
 801c238:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 801c23a:	f7ff f85b 	bl	801b2f4 <HAL_GetTick>
 801c23e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 801c240:	e008      	b.n	801c254 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801c242:	f7ff f857 	bl	801b2f4 <HAL_GetTick>
 801c246:	4602      	mov	r2, r0
 801c248:	693b      	ldr	r3, [r7, #16]
 801c24a:	1ad3      	subs	r3, r2, r3
 801c24c:	2b02      	cmp	r3, #2
 801c24e:	d901      	bls.n	801c254 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 801c250:	2303      	movs	r3, #3
 801c252:	e2e7      	b.n	801c824 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 801c254:	4b2a      	ldr	r3, [pc, #168]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c256:	681b      	ldr	r3, [r3, #0]
 801c258:	f003 0302 	and.w	r3, r3, #2
 801c25c:	2b00      	cmp	r3, #0
 801c25e:	d1f0      	bne.n	801c242 <HAL_RCC_OscConfig+0x1da>
 801c260:	e000      	b.n	801c264 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801c262:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801c264:	687b      	ldr	r3, [r7, #4]
 801c266:	681b      	ldr	r3, [r3, #0]
 801c268:	f003 0301 	and.w	r3, r3, #1
 801c26c:	2b00      	cmp	r3, #0
 801c26e:	d074      	beq.n	801c35a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 801c270:	69bb      	ldr	r3, [r7, #24]
 801c272:	2b08      	cmp	r3, #8
 801c274:	d005      	beq.n	801c282 <HAL_RCC_OscConfig+0x21a>
 801c276:	69bb      	ldr	r3, [r7, #24]
 801c278:	2b0c      	cmp	r3, #12
 801c27a:	d10e      	bne.n	801c29a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 801c27c:	697b      	ldr	r3, [r7, #20]
 801c27e:	2b03      	cmp	r3, #3
 801c280:	d10b      	bne.n	801c29a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c282:	4b1f      	ldr	r3, [pc, #124]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c284:	681b      	ldr	r3, [r3, #0]
 801c286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c28a:	2b00      	cmp	r3, #0
 801c28c:	d064      	beq.n	801c358 <HAL_RCC_OscConfig+0x2f0>
 801c28e:	687b      	ldr	r3, [r7, #4]
 801c290:	685b      	ldr	r3, [r3, #4]
 801c292:	2b00      	cmp	r3, #0
 801c294:	d160      	bne.n	801c358 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 801c296:	2301      	movs	r3, #1
 801c298:	e2c4      	b.n	801c824 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801c29a:	687b      	ldr	r3, [r7, #4]
 801c29c:	685b      	ldr	r3, [r3, #4]
 801c29e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c2a2:	d106      	bne.n	801c2b2 <HAL_RCC_OscConfig+0x24a>
 801c2a4:	4b16      	ldr	r3, [pc, #88]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c2a6:	681b      	ldr	r3, [r3, #0]
 801c2a8:	4a15      	ldr	r2, [pc, #84]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c2aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c2ae:	6013      	str	r3, [r2, #0]
 801c2b0:	e01d      	b.n	801c2ee <HAL_RCC_OscConfig+0x286>
 801c2b2:	687b      	ldr	r3, [r7, #4]
 801c2b4:	685b      	ldr	r3, [r3, #4]
 801c2b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801c2ba:	d10c      	bne.n	801c2d6 <HAL_RCC_OscConfig+0x26e>
 801c2bc:	4b10      	ldr	r3, [pc, #64]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c2be:	681b      	ldr	r3, [r3, #0]
 801c2c0:	4a0f      	ldr	r2, [pc, #60]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c2c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801c2c6:	6013      	str	r3, [r2, #0]
 801c2c8:	4b0d      	ldr	r3, [pc, #52]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c2ca:	681b      	ldr	r3, [r3, #0]
 801c2cc:	4a0c      	ldr	r2, [pc, #48]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c2ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c2d2:	6013      	str	r3, [r2, #0]
 801c2d4:	e00b      	b.n	801c2ee <HAL_RCC_OscConfig+0x286>
 801c2d6:	4b0a      	ldr	r3, [pc, #40]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c2d8:	681b      	ldr	r3, [r3, #0]
 801c2da:	4a09      	ldr	r2, [pc, #36]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c2dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c2e0:	6013      	str	r3, [r2, #0]
 801c2e2:	4b07      	ldr	r3, [pc, #28]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c2e4:	681b      	ldr	r3, [r3, #0]
 801c2e6:	4a06      	ldr	r2, [pc, #24]	; (801c300 <HAL_RCC_OscConfig+0x298>)
 801c2e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801c2ec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801c2ee:	687b      	ldr	r3, [r7, #4]
 801c2f0:	685b      	ldr	r3, [r3, #4]
 801c2f2:	2b00      	cmp	r3, #0
 801c2f4:	d01c      	beq.n	801c330 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c2f6:	f7fe fffd 	bl	801b2f4 <HAL_GetTick>
 801c2fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801c2fc:	e011      	b.n	801c322 <HAL_RCC_OscConfig+0x2ba>
 801c2fe:	bf00      	nop
 801c300:	40021000 	.word	0x40021000
 801c304:	08023eec 	.word	0x08023eec
 801c308:	20000004 	.word	0x20000004
 801c30c:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c310:	f7fe fff0 	bl	801b2f4 <HAL_GetTick>
 801c314:	4602      	mov	r2, r0
 801c316:	693b      	ldr	r3, [r7, #16]
 801c318:	1ad3      	subs	r3, r2, r3
 801c31a:	2b64      	cmp	r3, #100	; 0x64
 801c31c:	d901      	bls.n	801c322 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 801c31e:	2303      	movs	r3, #3
 801c320:	e280      	b.n	801c824 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801c322:	4baf      	ldr	r3, [pc, #700]	; (801c5e0 <HAL_RCC_OscConfig+0x578>)
 801c324:	681b      	ldr	r3, [r3, #0]
 801c326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c32a:	2b00      	cmp	r3, #0
 801c32c:	d0f0      	beq.n	801c310 <HAL_RCC_OscConfig+0x2a8>
 801c32e:	e014      	b.n	801c35a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c330:	f7fe ffe0 	bl	801b2f4 <HAL_GetTick>
 801c334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801c336:	e008      	b.n	801c34a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c338:	f7fe ffdc 	bl	801b2f4 <HAL_GetTick>
 801c33c:	4602      	mov	r2, r0
 801c33e:	693b      	ldr	r3, [r7, #16]
 801c340:	1ad3      	subs	r3, r2, r3
 801c342:	2b64      	cmp	r3, #100	; 0x64
 801c344:	d901      	bls.n	801c34a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 801c346:	2303      	movs	r3, #3
 801c348:	e26c      	b.n	801c824 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801c34a:	4ba5      	ldr	r3, [pc, #660]	; (801c5e0 <HAL_RCC_OscConfig+0x578>)
 801c34c:	681b      	ldr	r3, [r3, #0]
 801c34e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c352:	2b00      	cmp	r3, #0
 801c354:	d1f0      	bne.n	801c338 <HAL_RCC_OscConfig+0x2d0>
 801c356:	e000      	b.n	801c35a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801c35a:	687b      	ldr	r3, [r7, #4]
 801c35c:	681b      	ldr	r3, [r3, #0]
 801c35e:	f003 0302 	and.w	r3, r3, #2
 801c362:	2b00      	cmp	r3, #0
 801c364:	d060      	beq.n	801c428 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 801c366:	69bb      	ldr	r3, [r7, #24]
 801c368:	2b04      	cmp	r3, #4
 801c36a:	d005      	beq.n	801c378 <HAL_RCC_OscConfig+0x310>
 801c36c:	69bb      	ldr	r3, [r7, #24]
 801c36e:	2b0c      	cmp	r3, #12
 801c370:	d119      	bne.n	801c3a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 801c372:	697b      	ldr	r3, [r7, #20]
 801c374:	2b02      	cmp	r3, #2
 801c376:	d116      	bne.n	801c3a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c378:	4b99      	ldr	r3, [pc, #612]	; (801c5e0 <HAL_RCC_OscConfig+0x578>)
 801c37a:	681b      	ldr	r3, [r3, #0]
 801c37c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c380:	2b00      	cmp	r3, #0
 801c382:	d005      	beq.n	801c390 <HAL_RCC_OscConfig+0x328>
 801c384:	687b      	ldr	r3, [r7, #4]
 801c386:	68db      	ldr	r3, [r3, #12]
 801c388:	2b00      	cmp	r3, #0
 801c38a:	d101      	bne.n	801c390 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 801c38c:	2301      	movs	r3, #1
 801c38e:	e249      	b.n	801c824 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c390:	4b93      	ldr	r3, [pc, #588]	; (801c5e0 <HAL_RCC_OscConfig+0x578>)
 801c392:	685b      	ldr	r3, [r3, #4]
 801c394:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 801c398:	687b      	ldr	r3, [r7, #4]
 801c39a:	691b      	ldr	r3, [r3, #16]
 801c39c:	061b      	lsls	r3, r3, #24
 801c39e:	4990      	ldr	r1, [pc, #576]	; (801c5e0 <HAL_RCC_OscConfig+0x578>)
 801c3a0:	4313      	orrs	r3, r2
 801c3a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c3a4:	e040      	b.n	801c428 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801c3a6:	687b      	ldr	r3, [r7, #4]
 801c3a8:	68db      	ldr	r3, [r3, #12]
 801c3aa:	2b00      	cmp	r3, #0
 801c3ac:	d023      	beq.n	801c3f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801c3ae:	4b8c      	ldr	r3, [pc, #560]	; (801c5e0 <HAL_RCC_OscConfig+0x578>)
 801c3b0:	681b      	ldr	r3, [r3, #0]
 801c3b2:	4a8b      	ldr	r2, [pc, #556]	; (801c5e0 <HAL_RCC_OscConfig+0x578>)
 801c3b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c3b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c3ba:	f7fe ff9b 	bl	801b2f4 <HAL_GetTick>
 801c3be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801c3c0:	e008      	b.n	801c3d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c3c2:	f7fe ff97 	bl	801b2f4 <HAL_GetTick>
 801c3c6:	4602      	mov	r2, r0
 801c3c8:	693b      	ldr	r3, [r7, #16]
 801c3ca:	1ad3      	subs	r3, r2, r3
 801c3cc:	2b02      	cmp	r3, #2
 801c3ce:	d901      	bls.n	801c3d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 801c3d0:	2303      	movs	r3, #3
 801c3d2:	e227      	b.n	801c824 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801c3d4:	4b82      	ldr	r3, [pc, #520]	; (801c5e0 <HAL_RCC_OscConfig+0x578>)
 801c3d6:	681b      	ldr	r3, [r3, #0]
 801c3d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c3dc:	2b00      	cmp	r3, #0
 801c3de:	d0f0      	beq.n	801c3c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c3e0:	4b7f      	ldr	r3, [pc, #508]	; (801c5e0 <HAL_RCC_OscConfig+0x578>)
 801c3e2:	685b      	ldr	r3, [r3, #4]
 801c3e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 801c3e8:	687b      	ldr	r3, [r7, #4]
 801c3ea:	691b      	ldr	r3, [r3, #16]
 801c3ec:	061b      	lsls	r3, r3, #24
 801c3ee:	497c      	ldr	r1, [pc, #496]	; (801c5e0 <HAL_RCC_OscConfig+0x578>)
 801c3f0:	4313      	orrs	r3, r2
 801c3f2:	604b      	str	r3, [r1, #4]
 801c3f4:	e018      	b.n	801c428 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801c3f6:	4b7a      	ldr	r3, [pc, #488]	; (801c5e0 <HAL_RCC_OscConfig+0x578>)
 801c3f8:	681b      	ldr	r3, [r3, #0]
 801c3fa:	4a79      	ldr	r2, [pc, #484]	; (801c5e0 <HAL_RCC_OscConfig+0x578>)
 801c3fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c402:	f7fe ff77 	bl	801b2f4 <HAL_GetTick>
 801c406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801c408:	e008      	b.n	801c41c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c40a:	f7fe ff73 	bl	801b2f4 <HAL_GetTick>
 801c40e:	4602      	mov	r2, r0
 801c410:	693b      	ldr	r3, [r7, #16]
 801c412:	1ad3      	subs	r3, r2, r3
 801c414:	2b02      	cmp	r3, #2
 801c416:	d901      	bls.n	801c41c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 801c418:	2303      	movs	r3, #3
 801c41a:	e203      	b.n	801c824 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801c41c:	4b70      	ldr	r3, [pc, #448]	; (801c5e0 <HAL_RCC_OscConfig+0x578>)
 801c41e:	681b      	ldr	r3, [r3, #0]
 801c420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c424:	2b00      	cmp	r3, #0
 801c426:	d1f0      	bne.n	801c40a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801c428:	687b      	ldr	r3, [r7, #4]
 801c42a:	681b      	ldr	r3, [r3, #0]
 801c42c:	f003 0308 	and.w	r3, r3, #8
 801c430:	2b00      	cmp	r3, #0
 801c432:	d03c      	beq.n	801c4ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801c434:	687b      	ldr	r3, [r7, #4]
 801c436:	695b      	ldr	r3, [r3, #20]
 801c438:	2b00      	cmp	r3, #0
 801c43a:	d01c      	beq.n	801c476 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801c43c:	4b68      	ldr	r3, [pc, #416]	; (801c5e0 <HAL_RCC_OscConfig+0x578>)
 801c43e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c442:	4a67      	ldr	r2, [pc, #412]	; (801c5e0 <HAL_RCC_OscConfig+0x578>)
 801c444:	f043 0301 	orr.w	r3, r3, #1
 801c448:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c44c:	f7fe ff52 	bl	801b2f4 <HAL_GetTick>
 801c450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801c452:	e008      	b.n	801c466 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c454:	f7fe ff4e 	bl	801b2f4 <HAL_GetTick>
 801c458:	4602      	mov	r2, r0
 801c45a:	693b      	ldr	r3, [r7, #16]
 801c45c:	1ad3      	subs	r3, r2, r3
 801c45e:	2b02      	cmp	r3, #2
 801c460:	d901      	bls.n	801c466 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 801c462:	2303      	movs	r3, #3
 801c464:	e1de      	b.n	801c824 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801c466:	4b5e      	ldr	r3, [pc, #376]	; (801c5e0 <HAL_RCC_OscConfig+0x578>)
 801c468:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c46c:	f003 0302 	and.w	r3, r3, #2
 801c470:	2b00      	cmp	r3, #0
 801c472:	d0ef      	beq.n	801c454 <HAL_RCC_OscConfig+0x3ec>
 801c474:	e01b      	b.n	801c4ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801c476:	4b5a      	ldr	r3, [pc, #360]	; (801c5e0 <HAL_RCC_OscConfig+0x578>)
 801c478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c47c:	4a58      	ldr	r2, [pc, #352]	; (801c5e0 <HAL_RCC_OscConfig+0x578>)
 801c47e:	f023 0301 	bic.w	r3, r3, #1
 801c482:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c486:	f7fe ff35 	bl	801b2f4 <HAL_GetTick>
 801c48a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801c48c:	e008      	b.n	801c4a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c48e:	f7fe ff31 	bl	801b2f4 <HAL_GetTick>
 801c492:	4602      	mov	r2, r0
 801c494:	693b      	ldr	r3, [r7, #16]
 801c496:	1ad3      	subs	r3, r2, r3
 801c498:	2b02      	cmp	r3, #2
 801c49a:	d901      	bls.n	801c4a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 801c49c:	2303      	movs	r3, #3
 801c49e:	e1c1      	b.n	801c824 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801c4a0:	4b4f      	ldr	r3, [pc, #316]	; (801c5e0 <HAL_RCC_OscConfig+0x578>)
 801c4a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c4a6:	f003 0302 	and.w	r3, r3, #2
 801c4aa:	2b00      	cmp	r3, #0
 801c4ac:	d1ef      	bne.n	801c48e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801c4ae:	687b      	ldr	r3, [r7, #4]
 801c4b0:	681b      	ldr	r3, [r3, #0]
 801c4b2:	f003 0304 	and.w	r3, r3, #4
 801c4b6:	2b00      	cmp	r3, #0
 801c4b8:	f000 80a6 	beq.w	801c608 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 801c4bc:	2300      	movs	r3, #0
 801c4be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 801c4c0:	4b47      	ldr	r3, [pc, #284]	; (801c5e0 <HAL_RCC_OscConfig+0x578>)
 801c4c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c4c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c4c8:	2b00      	cmp	r3, #0
 801c4ca:	d10d      	bne.n	801c4e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801c4cc:	4b44      	ldr	r3, [pc, #272]	; (801c5e0 <HAL_RCC_OscConfig+0x578>)
 801c4ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c4d0:	4a43      	ldr	r2, [pc, #268]	; (801c5e0 <HAL_RCC_OscConfig+0x578>)
 801c4d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c4d6:	6593      	str	r3, [r2, #88]	; 0x58
 801c4d8:	4b41      	ldr	r3, [pc, #260]	; (801c5e0 <HAL_RCC_OscConfig+0x578>)
 801c4da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c4dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c4e0:	60bb      	str	r3, [r7, #8]
 801c4e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801c4e4:	2301      	movs	r3, #1
 801c4e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c4e8:	4b3e      	ldr	r3, [pc, #248]	; (801c5e4 <HAL_RCC_OscConfig+0x57c>)
 801c4ea:	681b      	ldr	r3, [r3, #0]
 801c4ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c4f0:	2b00      	cmp	r3, #0
 801c4f2:	d118      	bne.n	801c526 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801c4f4:	4b3b      	ldr	r3, [pc, #236]	; (801c5e4 <HAL_RCC_OscConfig+0x57c>)
 801c4f6:	681b      	ldr	r3, [r3, #0]
 801c4f8:	4a3a      	ldr	r2, [pc, #232]	; (801c5e4 <HAL_RCC_OscConfig+0x57c>)
 801c4fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c4fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801c500:	f7fe fef8 	bl	801b2f4 <HAL_GetTick>
 801c504:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c506:	e008      	b.n	801c51a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c508:	f7fe fef4 	bl	801b2f4 <HAL_GetTick>
 801c50c:	4602      	mov	r2, r0
 801c50e:	693b      	ldr	r3, [r7, #16]
 801c510:	1ad3      	subs	r3, r2, r3
 801c512:	2b02      	cmp	r3, #2
 801c514:	d901      	bls.n	801c51a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 801c516:	2303      	movs	r3, #3
 801c518:	e184      	b.n	801c824 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c51a:	4b32      	ldr	r3, [pc, #200]	; (801c5e4 <HAL_RCC_OscConfig+0x57c>)
 801c51c:	681b      	ldr	r3, [r3, #0]
 801c51e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c522:	2b00      	cmp	r3, #0
 801c524:	d0f0      	beq.n	801c508 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801c526:	687b      	ldr	r3, [r7, #4]
 801c528:	689b      	ldr	r3, [r3, #8]
 801c52a:	2b01      	cmp	r3, #1
 801c52c:	d108      	bne.n	801c540 <HAL_RCC_OscConfig+0x4d8>
 801c52e:	4b2c      	ldr	r3, [pc, #176]	; (801c5e0 <HAL_RCC_OscConfig+0x578>)
 801c530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c534:	4a2a      	ldr	r2, [pc, #168]	; (801c5e0 <HAL_RCC_OscConfig+0x578>)
 801c536:	f043 0301 	orr.w	r3, r3, #1
 801c53a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c53e:	e024      	b.n	801c58a <HAL_RCC_OscConfig+0x522>
 801c540:	687b      	ldr	r3, [r7, #4]
 801c542:	689b      	ldr	r3, [r3, #8]
 801c544:	2b05      	cmp	r3, #5
 801c546:	d110      	bne.n	801c56a <HAL_RCC_OscConfig+0x502>
 801c548:	4b25      	ldr	r3, [pc, #148]	; (801c5e0 <HAL_RCC_OscConfig+0x578>)
 801c54a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c54e:	4a24      	ldr	r2, [pc, #144]	; (801c5e0 <HAL_RCC_OscConfig+0x578>)
 801c550:	f043 0304 	orr.w	r3, r3, #4
 801c554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c558:	4b21      	ldr	r3, [pc, #132]	; (801c5e0 <HAL_RCC_OscConfig+0x578>)
 801c55a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c55e:	4a20      	ldr	r2, [pc, #128]	; (801c5e0 <HAL_RCC_OscConfig+0x578>)
 801c560:	f043 0301 	orr.w	r3, r3, #1
 801c564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c568:	e00f      	b.n	801c58a <HAL_RCC_OscConfig+0x522>
 801c56a:	4b1d      	ldr	r3, [pc, #116]	; (801c5e0 <HAL_RCC_OscConfig+0x578>)
 801c56c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c570:	4a1b      	ldr	r2, [pc, #108]	; (801c5e0 <HAL_RCC_OscConfig+0x578>)
 801c572:	f023 0301 	bic.w	r3, r3, #1
 801c576:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c57a:	4b19      	ldr	r3, [pc, #100]	; (801c5e0 <HAL_RCC_OscConfig+0x578>)
 801c57c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c580:	4a17      	ldr	r2, [pc, #92]	; (801c5e0 <HAL_RCC_OscConfig+0x578>)
 801c582:	f023 0304 	bic.w	r3, r3, #4
 801c586:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801c58a:	687b      	ldr	r3, [r7, #4]
 801c58c:	689b      	ldr	r3, [r3, #8]
 801c58e:	2b00      	cmp	r3, #0
 801c590:	d016      	beq.n	801c5c0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c592:	f7fe feaf 	bl	801b2f4 <HAL_GetTick>
 801c596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801c598:	e00a      	b.n	801c5b0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c59a:	f7fe feab 	bl	801b2f4 <HAL_GetTick>
 801c59e:	4602      	mov	r2, r0
 801c5a0:	693b      	ldr	r3, [r7, #16]
 801c5a2:	1ad3      	subs	r3, r2, r3
 801c5a4:	f241 3288 	movw	r2, #5000	; 0x1388
 801c5a8:	4293      	cmp	r3, r2
 801c5aa:	d901      	bls.n	801c5b0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 801c5ac:	2303      	movs	r3, #3
 801c5ae:	e139      	b.n	801c824 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801c5b0:	4b0b      	ldr	r3, [pc, #44]	; (801c5e0 <HAL_RCC_OscConfig+0x578>)
 801c5b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c5b6:	f003 0302 	and.w	r3, r3, #2
 801c5ba:	2b00      	cmp	r3, #0
 801c5bc:	d0ed      	beq.n	801c59a <HAL_RCC_OscConfig+0x532>
 801c5be:	e01a      	b.n	801c5f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c5c0:	f7fe fe98 	bl	801b2f4 <HAL_GetTick>
 801c5c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801c5c6:	e00f      	b.n	801c5e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c5c8:	f7fe fe94 	bl	801b2f4 <HAL_GetTick>
 801c5cc:	4602      	mov	r2, r0
 801c5ce:	693b      	ldr	r3, [r7, #16]
 801c5d0:	1ad3      	subs	r3, r2, r3
 801c5d2:	f241 3288 	movw	r2, #5000	; 0x1388
 801c5d6:	4293      	cmp	r3, r2
 801c5d8:	d906      	bls.n	801c5e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 801c5da:	2303      	movs	r3, #3
 801c5dc:	e122      	b.n	801c824 <HAL_RCC_OscConfig+0x7bc>
 801c5de:	bf00      	nop
 801c5e0:	40021000 	.word	0x40021000
 801c5e4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801c5e8:	4b90      	ldr	r3, [pc, #576]	; (801c82c <HAL_RCC_OscConfig+0x7c4>)
 801c5ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c5ee:	f003 0302 	and.w	r3, r3, #2
 801c5f2:	2b00      	cmp	r3, #0
 801c5f4:	d1e8      	bne.n	801c5c8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801c5f6:	7ffb      	ldrb	r3, [r7, #31]
 801c5f8:	2b01      	cmp	r3, #1
 801c5fa:	d105      	bne.n	801c608 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801c5fc:	4b8b      	ldr	r3, [pc, #556]	; (801c82c <HAL_RCC_OscConfig+0x7c4>)
 801c5fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c600:	4a8a      	ldr	r2, [pc, #552]	; (801c82c <HAL_RCC_OscConfig+0x7c4>)
 801c602:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801c606:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801c608:	687b      	ldr	r3, [r7, #4]
 801c60a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c60c:	2b00      	cmp	r3, #0
 801c60e:	f000 8108 	beq.w	801c822 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801c612:	687b      	ldr	r3, [r7, #4]
 801c614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c616:	2b02      	cmp	r3, #2
 801c618:	f040 80d0 	bne.w	801c7bc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 801c61c:	4b83      	ldr	r3, [pc, #524]	; (801c82c <HAL_RCC_OscConfig+0x7c4>)
 801c61e:	68db      	ldr	r3, [r3, #12]
 801c620:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 801c622:	697b      	ldr	r3, [r7, #20]
 801c624:	f003 0203 	and.w	r2, r3, #3
 801c628:	687b      	ldr	r3, [r7, #4]
 801c62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c62c:	429a      	cmp	r2, r3
 801c62e:	d130      	bne.n	801c692 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801c630:	697b      	ldr	r3, [r7, #20]
 801c632:	f003 0270 	and.w	r2, r3, #112	; 0x70
 801c636:	687b      	ldr	r3, [r7, #4]
 801c638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c63a:	3b01      	subs	r3, #1
 801c63c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 801c63e:	429a      	cmp	r2, r3
 801c640:	d127      	bne.n	801c692 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801c642:	697b      	ldr	r3, [r7, #20]
 801c644:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 801c648:	687b      	ldr	r3, [r7, #4]
 801c64a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c64c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801c64e:	429a      	cmp	r2, r3
 801c650:	d11f      	bne.n	801c692 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 801c652:	697b      	ldr	r3, [r7, #20]
 801c654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c658:	687a      	ldr	r2, [r7, #4]
 801c65a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801c65c:	2a07      	cmp	r2, #7
 801c65e:	bf14      	ite	ne
 801c660:	2201      	movne	r2, #1
 801c662:	2200      	moveq	r2, #0
 801c664:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801c666:	4293      	cmp	r3, r2
 801c668:	d113      	bne.n	801c692 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c66a:	697b      	ldr	r3, [r7, #20]
 801c66c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 801c670:	687b      	ldr	r3, [r7, #4]
 801c672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c674:	085b      	lsrs	r3, r3, #1
 801c676:	3b01      	subs	r3, #1
 801c678:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 801c67a:	429a      	cmp	r2, r3
 801c67c:	d109      	bne.n	801c692 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 801c67e:	697b      	ldr	r3, [r7, #20]
 801c680:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 801c684:	687b      	ldr	r3, [r7, #4]
 801c686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c688:	085b      	lsrs	r3, r3, #1
 801c68a:	3b01      	subs	r3, #1
 801c68c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c68e:	429a      	cmp	r2, r3
 801c690:	d06e      	beq.n	801c770 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 801c692:	69bb      	ldr	r3, [r7, #24]
 801c694:	2b0c      	cmp	r3, #12
 801c696:	d069      	beq.n	801c76c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 801c698:	4b64      	ldr	r3, [pc, #400]	; (801c82c <HAL_RCC_OscConfig+0x7c4>)
 801c69a:	681b      	ldr	r3, [r3, #0]
 801c69c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801c6a0:	2b00      	cmp	r3, #0
 801c6a2:	d105      	bne.n	801c6b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 801c6a4:	4b61      	ldr	r3, [pc, #388]	; (801c82c <HAL_RCC_OscConfig+0x7c4>)
 801c6a6:	681b      	ldr	r3, [r3, #0]
 801c6a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c6ac:	2b00      	cmp	r3, #0
 801c6ae:	d001      	beq.n	801c6b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 801c6b0:	2301      	movs	r3, #1
 801c6b2:	e0b7      	b.n	801c824 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 801c6b4:	4b5d      	ldr	r3, [pc, #372]	; (801c82c <HAL_RCC_OscConfig+0x7c4>)
 801c6b6:	681b      	ldr	r3, [r3, #0]
 801c6b8:	4a5c      	ldr	r2, [pc, #368]	; (801c82c <HAL_RCC_OscConfig+0x7c4>)
 801c6ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801c6be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801c6c0:	f7fe fe18 	bl	801b2f4 <HAL_GetTick>
 801c6c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c6c6:	e008      	b.n	801c6da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c6c8:	f7fe fe14 	bl	801b2f4 <HAL_GetTick>
 801c6cc:	4602      	mov	r2, r0
 801c6ce:	693b      	ldr	r3, [r7, #16]
 801c6d0:	1ad3      	subs	r3, r2, r3
 801c6d2:	2b02      	cmp	r3, #2
 801c6d4:	d901      	bls.n	801c6da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 801c6d6:	2303      	movs	r3, #3
 801c6d8:	e0a4      	b.n	801c824 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c6da:	4b54      	ldr	r3, [pc, #336]	; (801c82c <HAL_RCC_OscConfig+0x7c4>)
 801c6dc:	681b      	ldr	r3, [r3, #0]
 801c6de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c6e2:	2b00      	cmp	r3, #0
 801c6e4:	d1f0      	bne.n	801c6c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801c6e6:	4b51      	ldr	r3, [pc, #324]	; (801c82c <HAL_RCC_OscConfig+0x7c4>)
 801c6e8:	68da      	ldr	r2, [r3, #12]
 801c6ea:	4b51      	ldr	r3, [pc, #324]	; (801c830 <HAL_RCC_OscConfig+0x7c8>)
 801c6ec:	4013      	ands	r3, r2
 801c6ee:	687a      	ldr	r2, [r7, #4]
 801c6f0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 801c6f2:	687a      	ldr	r2, [r7, #4]
 801c6f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801c6f6:	3a01      	subs	r2, #1
 801c6f8:	0112      	lsls	r2, r2, #4
 801c6fa:	4311      	orrs	r1, r2
 801c6fc:	687a      	ldr	r2, [r7, #4]
 801c6fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801c700:	0212      	lsls	r2, r2, #8
 801c702:	4311      	orrs	r1, r2
 801c704:	687a      	ldr	r2, [r7, #4]
 801c706:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801c708:	0852      	lsrs	r2, r2, #1
 801c70a:	3a01      	subs	r2, #1
 801c70c:	0552      	lsls	r2, r2, #21
 801c70e:	4311      	orrs	r1, r2
 801c710:	687a      	ldr	r2, [r7, #4]
 801c712:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801c714:	0852      	lsrs	r2, r2, #1
 801c716:	3a01      	subs	r2, #1
 801c718:	0652      	lsls	r2, r2, #25
 801c71a:	4311      	orrs	r1, r2
 801c71c:	687a      	ldr	r2, [r7, #4]
 801c71e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801c720:	0912      	lsrs	r2, r2, #4
 801c722:	0452      	lsls	r2, r2, #17
 801c724:	430a      	orrs	r2, r1
 801c726:	4941      	ldr	r1, [pc, #260]	; (801c82c <HAL_RCC_OscConfig+0x7c4>)
 801c728:	4313      	orrs	r3, r2
 801c72a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 801c72c:	4b3f      	ldr	r3, [pc, #252]	; (801c82c <HAL_RCC_OscConfig+0x7c4>)
 801c72e:	681b      	ldr	r3, [r3, #0]
 801c730:	4a3e      	ldr	r2, [pc, #248]	; (801c82c <HAL_RCC_OscConfig+0x7c4>)
 801c732:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c736:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801c738:	4b3c      	ldr	r3, [pc, #240]	; (801c82c <HAL_RCC_OscConfig+0x7c4>)
 801c73a:	68db      	ldr	r3, [r3, #12]
 801c73c:	4a3b      	ldr	r2, [pc, #236]	; (801c82c <HAL_RCC_OscConfig+0x7c4>)
 801c73e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c742:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801c744:	f7fe fdd6 	bl	801b2f4 <HAL_GetTick>
 801c748:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c74a:	e008      	b.n	801c75e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c74c:	f7fe fdd2 	bl	801b2f4 <HAL_GetTick>
 801c750:	4602      	mov	r2, r0
 801c752:	693b      	ldr	r3, [r7, #16]
 801c754:	1ad3      	subs	r3, r2, r3
 801c756:	2b02      	cmp	r3, #2
 801c758:	d901      	bls.n	801c75e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 801c75a:	2303      	movs	r3, #3
 801c75c:	e062      	b.n	801c824 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c75e:	4b33      	ldr	r3, [pc, #204]	; (801c82c <HAL_RCC_OscConfig+0x7c4>)
 801c760:	681b      	ldr	r3, [r3, #0]
 801c762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c766:	2b00      	cmp	r3, #0
 801c768:	d0f0      	beq.n	801c74c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 801c76a:	e05a      	b.n	801c822 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 801c76c:	2301      	movs	r3, #1
 801c76e:	e059      	b.n	801c824 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c770:	4b2e      	ldr	r3, [pc, #184]	; (801c82c <HAL_RCC_OscConfig+0x7c4>)
 801c772:	681b      	ldr	r3, [r3, #0]
 801c774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c778:	2b00      	cmp	r3, #0
 801c77a:	d152      	bne.n	801c822 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 801c77c:	4b2b      	ldr	r3, [pc, #172]	; (801c82c <HAL_RCC_OscConfig+0x7c4>)
 801c77e:	681b      	ldr	r3, [r3, #0]
 801c780:	4a2a      	ldr	r2, [pc, #168]	; (801c82c <HAL_RCC_OscConfig+0x7c4>)
 801c782:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c786:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801c788:	4b28      	ldr	r3, [pc, #160]	; (801c82c <HAL_RCC_OscConfig+0x7c4>)
 801c78a:	68db      	ldr	r3, [r3, #12]
 801c78c:	4a27      	ldr	r2, [pc, #156]	; (801c82c <HAL_RCC_OscConfig+0x7c4>)
 801c78e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c792:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801c794:	f7fe fdae 	bl	801b2f4 <HAL_GetTick>
 801c798:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c79a:	e008      	b.n	801c7ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c79c:	f7fe fdaa 	bl	801b2f4 <HAL_GetTick>
 801c7a0:	4602      	mov	r2, r0
 801c7a2:	693b      	ldr	r3, [r7, #16]
 801c7a4:	1ad3      	subs	r3, r2, r3
 801c7a6:	2b02      	cmp	r3, #2
 801c7a8:	d901      	bls.n	801c7ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 801c7aa:	2303      	movs	r3, #3
 801c7ac:	e03a      	b.n	801c824 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c7ae:	4b1f      	ldr	r3, [pc, #124]	; (801c82c <HAL_RCC_OscConfig+0x7c4>)
 801c7b0:	681b      	ldr	r3, [r3, #0]
 801c7b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c7b6:	2b00      	cmp	r3, #0
 801c7b8:	d0f0      	beq.n	801c79c <HAL_RCC_OscConfig+0x734>
 801c7ba:	e032      	b.n	801c822 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 801c7bc:	69bb      	ldr	r3, [r7, #24]
 801c7be:	2b0c      	cmp	r3, #12
 801c7c0:	d02d      	beq.n	801c81e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c7c2:	4b1a      	ldr	r3, [pc, #104]	; (801c82c <HAL_RCC_OscConfig+0x7c4>)
 801c7c4:	681b      	ldr	r3, [r3, #0]
 801c7c6:	4a19      	ldr	r2, [pc, #100]	; (801c82c <HAL_RCC_OscConfig+0x7c4>)
 801c7c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801c7cc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 801c7ce:	4b17      	ldr	r3, [pc, #92]	; (801c82c <HAL_RCC_OscConfig+0x7c4>)
 801c7d0:	681b      	ldr	r3, [r3, #0]
 801c7d2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 801c7d6:	2b00      	cmp	r3, #0
 801c7d8:	d105      	bne.n	801c7e6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 801c7da:	4b14      	ldr	r3, [pc, #80]	; (801c82c <HAL_RCC_OscConfig+0x7c4>)
 801c7dc:	68db      	ldr	r3, [r3, #12]
 801c7de:	4a13      	ldr	r2, [pc, #76]	; (801c82c <HAL_RCC_OscConfig+0x7c4>)
 801c7e0:	f023 0303 	bic.w	r3, r3, #3
 801c7e4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 801c7e6:	4b11      	ldr	r3, [pc, #68]	; (801c82c <HAL_RCC_OscConfig+0x7c4>)
 801c7e8:	68db      	ldr	r3, [r3, #12]
 801c7ea:	4a10      	ldr	r2, [pc, #64]	; (801c82c <HAL_RCC_OscConfig+0x7c4>)
 801c7ec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 801c7f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c7f4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c7f6:	f7fe fd7d 	bl	801b2f4 <HAL_GetTick>
 801c7fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c7fc:	e008      	b.n	801c810 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c7fe:	f7fe fd79 	bl	801b2f4 <HAL_GetTick>
 801c802:	4602      	mov	r2, r0
 801c804:	693b      	ldr	r3, [r7, #16]
 801c806:	1ad3      	subs	r3, r2, r3
 801c808:	2b02      	cmp	r3, #2
 801c80a:	d901      	bls.n	801c810 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 801c80c:	2303      	movs	r3, #3
 801c80e:	e009      	b.n	801c824 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c810:	4b06      	ldr	r3, [pc, #24]	; (801c82c <HAL_RCC_OscConfig+0x7c4>)
 801c812:	681b      	ldr	r3, [r3, #0]
 801c814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c818:	2b00      	cmp	r3, #0
 801c81a:	d1f0      	bne.n	801c7fe <HAL_RCC_OscConfig+0x796>
 801c81c:	e001      	b.n	801c822 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 801c81e:	2301      	movs	r3, #1
 801c820:	e000      	b.n	801c824 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 801c822:	2300      	movs	r3, #0
}
 801c824:	4618      	mov	r0, r3
 801c826:	3720      	adds	r7, #32
 801c828:	46bd      	mov	sp, r7
 801c82a:	bd80      	pop	{r7, pc}
 801c82c:	40021000 	.word	0x40021000
 801c830:	f99d808c 	.word	0xf99d808c

0801c834 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801c834:	b580      	push	{r7, lr}
 801c836:	b084      	sub	sp, #16
 801c838:	af00      	add	r7, sp, #0
 801c83a:	6078      	str	r0, [r7, #4]
 801c83c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801c83e:	687b      	ldr	r3, [r7, #4]
 801c840:	2b00      	cmp	r3, #0
 801c842:	d101      	bne.n	801c848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801c844:	2301      	movs	r3, #1
 801c846:	e0c8      	b.n	801c9da <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801c848:	4b66      	ldr	r3, [pc, #408]	; (801c9e4 <HAL_RCC_ClockConfig+0x1b0>)
 801c84a:	681b      	ldr	r3, [r3, #0]
 801c84c:	f003 0307 	and.w	r3, r3, #7
 801c850:	683a      	ldr	r2, [r7, #0]
 801c852:	429a      	cmp	r2, r3
 801c854:	d910      	bls.n	801c878 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c856:	4b63      	ldr	r3, [pc, #396]	; (801c9e4 <HAL_RCC_ClockConfig+0x1b0>)
 801c858:	681b      	ldr	r3, [r3, #0]
 801c85a:	f023 0207 	bic.w	r2, r3, #7
 801c85e:	4961      	ldr	r1, [pc, #388]	; (801c9e4 <HAL_RCC_ClockConfig+0x1b0>)
 801c860:	683b      	ldr	r3, [r7, #0]
 801c862:	4313      	orrs	r3, r2
 801c864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801c866:	4b5f      	ldr	r3, [pc, #380]	; (801c9e4 <HAL_RCC_ClockConfig+0x1b0>)
 801c868:	681b      	ldr	r3, [r3, #0]
 801c86a:	f003 0307 	and.w	r3, r3, #7
 801c86e:	683a      	ldr	r2, [r7, #0]
 801c870:	429a      	cmp	r2, r3
 801c872:	d001      	beq.n	801c878 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801c874:	2301      	movs	r3, #1
 801c876:	e0b0      	b.n	801c9da <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801c878:	687b      	ldr	r3, [r7, #4]
 801c87a:	681b      	ldr	r3, [r3, #0]
 801c87c:	f003 0301 	and.w	r3, r3, #1
 801c880:	2b00      	cmp	r3, #0
 801c882:	d04c      	beq.n	801c91e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801c884:	687b      	ldr	r3, [r7, #4]
 801c886:	685b      	ldr	r3, [r3, #4]
 801c888:	2b03      	cmp	r3, #3
 801c88a:	d107      	bne.n	801c89c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c88c:	4b56      	ldr	r3, [pc, #344]	; (801c9e8 <HAL_RCC_ClockConfig+0x1b4>)
 801c88e:	681b      	ldr	r3, [r3, #0]
 801c890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c894:	2b00      	cmp	r3, #0
 801c896:	d121      	bne.n	801c8dc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 801c898:	2301      	movs	r3, #1
 801c89a:	e09e      	b.n	801c9da <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801c89c:	687b      	ldr	r3, [r7, #4]
 801c89e:	685b      	ldr	r3, [r3, #4]
 801c8a0:	2b02      	cmp	r3, #2
 801c8a2:	d107      	bne.n	801c8b4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801c8a4:	4b50      	ldr	r3, [pc, #320]	; (801c9e8 <HAL_RCC_ClockConfig+0x1b4>)
 801c8a6:	681b      	ldr	r3, [r3, #0]
 801c8a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c8ac:	2b00      	cmp	r3, #0
 801c8ae:	d115      	bne.n	801c8dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 801c8b0:	2301      	movs	r3, #1
 801c8b2:	e092      	b.n	801c9da <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 801c8b4:	687b      	ldr	r3, [r7, #4]
 801c8b6:	685b      	ldr	r3, [r3, #4]
 801c8b8:	2b00      	cmp	r3, #0
 801c8ba:	d107      	bne.n	801c8cc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801c8bc:	4b4a      	ldr	r3, [pc, #296]	; (801c9e8 <HAL_RCC_ClockConfig+0x1b4>)
 801c8be:	681b      	ldr	r3, [r3, #0]
 801c8c0:	f003 0302 	and.w	r3, r3, #2
 801c8c4:	2b00      	cmp	r3, #0
 801c8c6:	d109      	bne.n	801c8dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 801c8c8:	2301      	movs	r3, #1
 801c8ca:	e086      	b.n	801c9da <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801c8cc:	4b46      	ldr	r3, [pc, #280]	; (801c9e8 <HAL_RCC_ClockConfig+0x1b4>)
 801c8ce:	681b      	ldr	r3, [r3, #0]
 801c8d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c8d4:	2b00      	cmp	r3, #0
 801c8d6:	d101      	bne.n	801c8dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 801c8d8:	2301      	movs	r3, #1
 801c8da:	e07e      	b.n	801c9da <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801c8dc:	4b42      	ldr	r3, [pc, #264]	; (801c9e8 <HAL_RCC_ClockConfig+0x1b4>)
 801c8de:	689b      	ldr	r3, [r3, #8]
 801c8e0:	f023 0203 	bic.w	r2, r3, #3
 801c8e4:	687b      	ldr	r3, [r7, #4]
 801c8e6:	685b      	ldr	r3, [r3, #4]
 801c8e8:	493f      	ldr	r1, [pc, #252]	; (801c9e8 <HAL_RCC_ClockConfig+0x1b4>)
 801c8ea:	4313      	orrs	r3, r2
 801c8ec:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c8ee:	f7fe fd01 	bl	801b2f4 <HAL_GetTick>
 801c8f2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c8f4:	e00a      	b.n	801c90c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801c8f6:	f7fe fcfd 	bl	801b2f4 <HAL_GetTick>
 801c8fa:	4602      	mov	r2, r0
 801c8fc:	68fb      	ldr	r3, [r7, #12]
 801c8fe:	1ad3      	subs	r3, r2, r3
 801c900:	f241 3288 	movw	r2, #5000	; 0x1388
 801c904:	4293      	cmp	r3, r2
 801c906:	d901      	bls.n	801c90c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 801c908:	2303      	movs	r3, #3
 801c90a:	e066      	b.n	801c9da <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c90c:	4b36      	ldr	r3, [pc, #216]	; (801c9e8 <HAL_RCC_ClockConfig+0x1b4>)
 801c90e:	689b      	ldr	r3, [r3, #8]
 801c910:	f003 020c 	and.w	r2, r3, #12
 801c914:	687b      	ldr	r3, [r7, #4]
 801c916:	685b      	ldr	r3, [r3, #4]
 801c918:	009b      	lsls	r3, r3, #2
 801c91a:	429a      	cmp	r2, r3
 801c91c:	d1eb      	bne.n	801c8f6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801c91e:	687b      	ldr	r3, [r7, #4]
 801c920:	681b      	ldr	r3, [r3, #0]
 801c922:	f003 0302 	and.w	r3, r3, #2
 801c926:	2b00      	cmp	r3, #0
 801c928:	d008      	beq.n	801c93c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801c92a:	4b2f      	ldr	r3, [pc, #188]	; (801c9e8 <HAL_RCC_ClockConfig+0x1b4>)
 801c92c:	689b      	ldr	r3, [r3, #8]
 801c92e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801c932:	687b      	ldr	r3, [r7, #4]
 801c934:	689b      	ldr	r3, [r3, #8]
 801c936:	492c      	ldr	r1, [pc, #176]	; (801c9e8 <HAL_RCC_ClockConfig+0x1b4>)
 801c938:	4313      	orrs	r3, r2
 801c93a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801c93c:	4b29      	ldr	r3, [pc, #164]	; (801c9e4 <HAL_RCC_ClockConfig+0x1b0>)
 801c93e:	681b      	ldr	r3, [r3, #0]
 801c940:	f003 0307 	and.w	r3, r3, #7
 801c944:	683a      	ldr	r2, [r7, #0]
 801c946:	429a      	cmp	r2, r3
 801c948:	d210      	bcs.n	801c96c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c94a:	4b26      	ldr	r3, [pc, #152]	; (801c9e4 <HAL_RCC_ClockConfig+0x1b0>)
 801c94c:	681b      	ldr	r3, [r3, #0]
 801c94e:	f023 0207 	bic.w	r2, r3, #7
 801c952:	4924      	ldr	r1, [pc, #144]	; (801c9e4 <HAL_RCC_ClockConfig+0x1b0>)
 801c954:	683b      	ldr	r3, [r7, #0]
 801c956:	4313      	orrs	r3, r2
 801c958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801c95a:	4b22      	ldr	r3, [pc, #136]	; (801c9e4 <HAL_RCC_ClockConfig+0x1b0>)
 801c95c:	681b      	ldr	r3, [r3, #0]
 801c95e:	f003 0307 	and.w	r3, r3, #7
 801c962:	683a      	ldr	r2, [r7, #0]
 801c964:	429a      	cmp	r2, r3
 801c966:	d001      	beq.n	801c96c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 801c968:	2301      	movs	r3, #1
 801c96a:	e036      	b.n	801c9da <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801c96c:	687b      	ldr	r3, [r7, #4]
 801c96e:	681b      	ldr	r3, [r3, #0]
 801c970:	f003 0304 	and.w	r3, r3, #4
 801c974:	2b00      	cmp	r3, #0
 801c976:	d008      	beq.n	801c98a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801c978:	4b1b      	ldr	r3, [pc, #108]	; (801c9e8 <HAL_RCC_ClockConfig+0x1b4>)
 801c97a:	689b      	ldr	r3, [r3, #8]
 801c97c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801c980:	687b      	ldr	r3, [r7, #4]
 801c982:	68db      	ldr	r3, [r3, #12]
 801c984:	4918      	ldr	r1, [pc, #96]	; (801c9e8 <HAL_RCC_ClockConfig+0x1b4>)
 801c986:	4313      	orrs	r3, r2
 801c988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801c98a:	687b      	ldr	r3, [r7, #4]
 801c98c:	681b      	ldr	r3, [r3, #0]
 801c98e:	f003 0308 	and.w	r3, r3, #8
 801c992:	2b00      	cmp	r3, #0
 801c994:	d009      	beq.n	801c9aa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801c996:	4b14      	ldr	r3, [pc, #80]	; (801c9e8 <HAL_RCC_ClockConfig+0x1b4>)
 801c998:	689b      	ldr	r3, [r3, #8]
 801c99a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 801c99e:	687b      	ldr	r3, [r7, #4]
 801c9a0:	691b      	ldr	r3, [r3, #16]
 801c9a2:	00db      	lsls	r3, r3, #3
 801c9a4:	4910      	ldr	r1, [pc, #64]	; (801c9e8 <HAL_RCC_ClockConfig+0x1b4>)
 801c9a6:	4313      	orrs	r3, r2
 801c9a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801c9aa:	f000 f825 	bl	801c9f8 <HAL_RCC_GetSysClockFreq>
 801c9ae:	4602      	mov	r2, r0
 801c9b0:	4b0d      	ldr	r3, [pc, #52]	; (801c9e8 <HAL_RCC_ClockConfig+0x1b4>)
 801c9b2:	689b      	ldr	r3, [r3, #8]
 801c9b4:	091b      	lsrs	r3, r3, #4
 801c9b6:	f003 030f 	and.w	r3, r3, #15
 801c9ba:	490c      	ldr	r1, [pc, #48]	; (801c9ec <HAL_RCC_ClockConfig+0x1b8>)
 801c9bc:	5ccb      	ldrb	r3, [r1, r3]
 801c9be:	f003 031f 	and.w	r3, r3, #31
 801c9c2:	fa22 f303 	lsr.w	r3, r2, r3
 801c9c6:	4a0a      	ldr	r2, [pc, #40]	; (801c9f0 <HAL_RCC_ClockConfig+0x1bc>)
 801c9c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801c9ca:	4b0a      	ldr	r3, [pc, #40]	; (801c9f4 <HAL_RCC_ClockConfig+0x1c0>)
 801c9cc:	681b      	ldr	r3, [r3, #0]
 801c9ce:	4618      	mov	r0, r3
 801c9d0:	f7fe fc40 	bl	801b254 <HAL_InitTick>
 801c9d4:	4603      	mov	r3, r0
 801c9d6:	72fb      	strb	r3, [r7, #11]

  return status;
 801c9d8:	7afb      	ldrb	r3, [r7, #11]
}
 801c9da:	4618      	mov	r0, r3
 801c9dc:	3710      	adds	r7, #16
 801c9de:	46bd      	mov	sp, r7
 801c9e0:	bd80      	pop	{r7, pc}
 801c9e2:	bf00      	nop
 801c9e4:	40022000 	.word	0x40022000
 801c9e8:	40021000 	.word	0x40021000
 801c9ec:	08023eec 	.word	0x08023eec
 801c9f0:	20000004 	.word	0x20000004
 801c9f4:	20000008 	.word	0x20000008

0801c9f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801c9f8:	b480      	push	{r7}
 801c9fa:	b089      	sub	sp, #36	; 0x24
 801c9fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 801c9fe:	2300      	movs	r3, #0
 801ca00:	61fb      	str	r3, [r7, #28]
 801ca02:	2300      	movs	r3, #0
 801ca04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801ca06:	4b3e      	ldr	r3, [pc, #248]	; (801cb00 <HAL_RCC_GetSysClockFreq+0x108>)
 801ca08:	689b      	ldr	r3, [r3, #8]
 801ca0a:	f003 030c 	and.w	r3, r3, #12
 801ca0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 801ca10:	4b3b      	ldr	r3, [pc, #236]	; (801cb00 <HAL_RCC_GetSysClockFreq+0x108>)
 801ca12:	68db      	ldr	r3, [r3, #12]
 801ca14:	f003 0303 	and.w	r3, r3, #3
 801ca18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 801ca1a:	693b      	ldr	r3, [r7, #16]
 801ca1c:	2b00      	cmp	r3, #0
 801ca1e:	d005      	beq.n	801ca2c <HAL_RCC_GetSysClockFreq+0x34>
 801ca20:	693b      	ldr	r3, [r7, #16]
 801ca22:	2b0c      	cmp	r3, #12
 801ca24:	d121      	bne.n	801ca6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 801ca26:	68fb      	ldr	r3, [r7, #12]
 801ca28:	2b01      	cmp	r3, #1
 801ca2a:	d11e      	bne.n	801ca6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 801ca2c:	4b34      	ldr	r3, [pc, #208]	; (801cb00 <HAL_RCC_GetSysClockFreq+0x108>)
 801ca2e:	681b      	ldr	r3, [r3, #0]
 801ca30:	f003 0308 	and.w	r3, r3, #8
 801ca34:	2b00      	cmp	r3, #0
 801ca36:	d107      	bne.n	801ca48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 801ca38:	4b31      	ldr	r3, [pc, #196]	; (801cb00 <HAL_RCC_GetSysClockFreq+0x108>)
 801ca3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801ca3e:	0a1b      	lsrs	r3, r3, #8
 801ca40:	f003 030f 	and.w	r3, r3, #15
 801ca44:	61fb      	str	r3, [r7, #28]
 801ca46:	e005      	b.n	801ca54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 801ca48:	4b2d      	ldr	r3, [pc, #180]	; (801cb00 <HAL_RCC_GetSysClockFreq+0x108>)
 801ca4a:	681b      	ldr	r3, [r3, #0]
 801ca4c:	091b      	lsrs	r3, r3, #4
 801ca4e:	f003 030f 	and.w	r3, r3, #15
 801ca52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 801ca54:	4a2b      	ldr	r2, [pc, #172]	; (801cb04 <HAL_RCC_GetSysClockFreq+0x10c>)
 801ca56:	69fb      	ldr	r3, [r7, #28]
 801ca58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ca5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801ca5e:	693b      	ldr	r3, [r7, #16]
 801ca60:	2b00      	cmp	r3, #0
 801ca62:	d10d      	bne.n	801ca80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 801ca64:	69fb      	ldr	r3, [r7, #28]
 801ca66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801ca68:	e00a      	b.n	801ca80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 801ca6a:	693b      	ldr	r3, [r7, #16]
 801ca6c:	2b04      	cmp	r3, #4
 801ca6e:	d102      	bne.n	801ca76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801ca70:	4b25      	ldr	r3, [pc, #148]	; (801cb08 <HAL_RCC_GetSysClockFreq+0x110>)
 801ca72:	61bb      	str	r3, [r7, #24]
 801ca74:	e004      	b.n	801ca80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 801ca76:	693b      	ldr	r3, [r7, #16]
 801ca78:	2b08      	cmp	r3, #8
 801ca7a:	d101      	bne.n	801ca80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 801ca7c:	4b23      	ldr	r3, [pc, #140]	; (801cb0c <HAL_RCC_GetSysClockFreq+0x114>)
 801ca7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 801ca80:	693b      	ldr	r3, [r7, #16]
 801ca82:	2b0c      	cmp	r3, #12
 801ca84:	d134      	bne.n	801caf0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801ca86:	4b1e      	ldr	r3, [pc, #120]	; (801cb00 <HAL_RCC_GetSysClockFreq+0x108>)
 801ca88:	68db      	ldr	r3, [r3, #12]
 801ca8a:	f003 0303 	and.w	r3, r3, #3
 801ca8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 801ca90:	68bb      	ldr	r3, [r7, #8]
 801ca92:	2b02      	cmp	r3, #2
 801ca94:	d003      	beq.n	801ca9e <HAL_RCC_GetSysClockFreq+0xa6>
 801ca96:	68bb      	ldr	r3, [r7, #8]
 801ca98:	2b03      	cmp	r3, #3
 801ca9a:	d003      	beq.n	801caa4 <HAL_RCC_GetSysClockFreq+0xac>
 801ca9c:	e005      	b.n	801caaa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 801ca9e:	4b1a      	ldr	r3, [pc, #104]	; (801cb08 <HAL_RCC_GetSysClockFreq+0x110>)
 801caa0:	617b      	str	r3, [r7, #20]
      break;
 801caa2:	e005      	b.n	801cab0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 801caa4:	4b19      	ldr	r3, [pc, #100]	; (801cb0c <HAL_RCC_GetSysClockFreq+0x114>)
 801caa6:	617b      	str	r3, [r7, #20]
      break;
 801caa8:	e002      	b.n	801cab0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 801caaa:	69fb      	ldr	r3, [r7, #28]
 801caac:	617b      	str	r3, [r7, #20]
      break;
 801caae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801cab0:	4b13      	ldr	r3, [pc, #76]	; (801cb00 <HAL_RCC_GetSysClockFreq+0x108>)
 801cab2:	68db      	ldr	r3, [r3, #12]
 801cab4:	091b      	lsrs	r3, r3, #4
 801cab6:	f003 0307 	and.w	r3, r3, #7
 801caba:	3301      	adds	r3, #1
 801cabc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 801cabe:	4b10      	ldr	r3, [pc, #64]	; (801cb00 <HAL_RCC_GetSysClockFreq+0x108>)
 801cac0:	68db      	ldr	r3, [r3, #12]
 801cac2:	0a1b      	lsrs	r3, r3, #8
 801cac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801cac8:	697a      	ldr	r2, [r7, #20]
 801caca:	fb02 f203 	mul.w	r2, r2, r3
 801cace:	687b      	ldr	r3, [r7, #4]
 801cad0:	fbb2 f3f3 	udiv	r3, r2, r3
 801cad4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801cad6:	4b0a      	ldr	r3, [pc, #40]	; (801cb00 <HAL_RCC_GetSysClockFreq+0x108>)
 801cad8:	68db      	ldr	r3, [r3, #12]
 801cada:	0e5b      	lsrs	r3, r3, #25
 801cadc:	f003 0303 	and.w	r3, r3, #3
 801cae0:	3301      	adds	r3, #1
 801cae2:	005b      	lsls	r3, r3, #1
 801cae4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 801cae6:	697a      	ldr	r2, [r7, #20]
 801cae8:	683b      	ldr	r3, [r7, #0]
 801caea:	fbb2 f3f3 	udiv	r3, r2, r3
 801caee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 801caf0:	69bb      	ldr	r3, [r7, #24]
}
 801caf2:	4618      	mov	r0, r3
 801caf4:	3724      	adds	r7, #36	; 0x24
 801caf6:	46bd      	mov	sp, r7
 801caf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cafc:	4770      	bx	lr
 801cafe:	bf00      	nop
 801cb00:	40021000 	.word	0x40021000
 801cb04:	08023f04 	.word	0x08023f04
 801cb08:	00f42400 	.word	0x00f42400
 801cb0c:	007a1200 	.word	0x007a1200

0801cb10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801cb10:	b480      	push	{r7}
 801cb12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801cb14:	4b03      	ldr	r3, [pc, #12]	; (801cb24 <HAL_RCC_GetHCLKFreq+0x14>)
 801cb16:	681b      	ldr	r3, [r3, #0]
}
 801cb18:	4618      	mov	r0, r3
 801cb1a:	46bd      	mov	sp, r7
 801cb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb20:	4770      	bx	lr
 801cb22:	bf00      	nop
 801cb24:	20000004 	.word	0x20000004

0801cb28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801cb28:	b580      	push	{r7, lr}
 801cb2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 801cb2c:	f7ff fff0 	bl	801cb10 <HAL_RCC_GetHCLKFreq>
 801cb30:	4602      	mov	r2, r0
 801cb32:	4b06      	ldr	r3, [pc, #24]	; (801cb4c <HAL_RCC_GetPCLK1Freq+0x24>)
 801cb34:	689b      	ldr	r3, [r3, #8]
 801cb36:	0a1b      	lsrs	r3, r3, #8
 801cb38:	f003 0307 	and.w	r3, r3, #7
 801cb3c:	4904      	ldr	r1, [pc, #16]	; (801cb50 <HAL_RCC_GetPCLK1Freq+0x28>)
 801cb3e:	5ccb      	ldrb	r3, [r1, r3]
 801cb40:	f003 031f 	and.w	r3, r3, #31
 801cb44:	fa22 f303 	lsr.w	r3, r2, r3
}
 801cb48:	4618      	mov	r0, r3
 801cb4a:	bd80      	pop	{r7, pc}
 801cb4c:	40021000 	.word	0x40021000
 801cb50:	08023efc 	.word	0x08023efc

0801cb54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801cb54:	b580      	push	{r7, lr}
 801cb56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 801cb58:	f7ff ffda 	bl	801cb10 <HAL_RCC_GetHCLKFreq>
 801cb5c:	4602      	mov	r2, r0
 801cb5e:	4b06      	ldr	r3, [pc, #24]	; (801cb78 <HAL_RCC_GetPCLK2Freq+0x24>)
 801cb60:	689b      	ldr	r3, [r3, #8]
 801cb62:	0adb      	lsrs	r3, r3, #11
 801cb64:	f003 0307 	and.w	r3, r3, #7
 801cb68:	4904      	ldr	r1, [pc, #16]	; (801cb7c <HAL_RCC_GetPCLK2Freq+0x28>)
 801cb6a:	5ccb      	ldrb	r3, [r1, r3]
 801cb6c:	f003 031f 	and.w	r3, r3, #31
 801cb70:	fa22 f303 	lsr.w	r3, r2, r3
}
 801cb74:	4618      	mov	r0, r3
 801cb76:	bd80      	pop	{r7, pc}
 801cb78:	40021000 	.word	0x40021000
 801cb7c:	08023efc 	.word	0x08023efc

0801cb80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 801cb80:	b580      	push	{r7, lr}
 801cb82:	b086      	sub	sp, #24
 801cb84:	af00      	add	r7, sp, #0
 801cb86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 801cb88:	2300      	movs	r3, #0
 801cb8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 801cb8c:	4b2a      	ldr	r3, [pc, #168]	; (801cc38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801cb8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cb90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801cb94:	2b00      	cmp	r3, #0
 801cb96:	d003      	beq.n	801cba0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 801cb98:	f7ff fa02 	bl	801bfa0 <HAL_PWREx_GetVoltageRange>
 801cb9c:	6178      	str	r0, [r7, #20]
 801cb9e:	e014      	b.n	801cbca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 801cba0:	4b25      	ldr	r3, [pc, #148]	; (801cc38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801cba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cba4:	4a24      	ldr	r2, [pc, #144]	; (801cc38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801cba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801cbaa:	6593      	str	r3, [r2, #88]	; 0x58
 801cbac:	4b22      	ldr	r3, [pc, #136]	; (801cc38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801cbae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cbb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801cbb4:	60fb      	str	r3, [r7, #12]
 801cbb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 801cbb8:	f7ff f9f2 	bl	801bfa0 <HAL_PWREx_GetVoltageRange>
 801cbbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 801cbbe:	4b1e      	ldr	r3, [pc, #120]	; (801cc38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801cbc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cbc2:	4a1d      	ldr	r2, [pc, #116]	; (801cc38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801cbc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801cbc8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 801cbca:	697b      	ldr	r3, [r7, #20]
 801cbcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cbd0:	d10b      	bne.n	801cbea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 801cbd2:	687b      	ldr	r3, [r7, #4]
 801cbd4:	2b80      	cmp	r3, #128	; 0x80
 801cbd6:	d919      	bls.n	801cc0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 801cbd8:	687b      	ldr	r3, [r7, #4]
 801cbda:	2ba0      	cmp	r3, #160	; 0xa0
 801cbdc:	d902      	bls.n	801cbe4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801cbde:	2302      	movs	r3, #2
 801cbe0:	613b      	str	r3, [r7, #16]
 801cbe2:	e013      	b.n	801cc0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 801cbe4:	2301      	movs	r3, #1
 801cbe6:	613b      	str	r3, [r7, #16]
 801cbe8:	e010      	b.n	801cc0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 801cbea:	687b      	ldr	r3, [r7, #4]
 801cbec:	2b80      	cmp	r3, #128	; 0x80
 801cbee:	d902      	bls.n	801cbf6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 801cbf0:	2303      	movs	r3, #3
 801cbf2:	613b      	str	r3, [r7, #16]
 801cbf4:	e00a      	b.n	801cc0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 801cbf6:	687b      	ldr	r3, [r7, #4]
 801cbf8:	2b80      	cmp	r3, #128	; 0x80
 801cbfa:	d102      	bne.n	801cc02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 801cbfc:	2302      	movs	r3, #2
 801cbfe:	613b      	str	r3, [r7, #16]
 801cc00:	e004      	b.n	801cc0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 801cc02:	687b      	ldr	r3, [r7, #4]
 801cc04:	2b70      	cmp	r3, #112	; 0x70
 801cc06:	d101      	bne.n	801cc0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 801cc08:	2301      	movs	r3, #1
 801cc0a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 801cc0c:	4b0b      	ldr	r3, [pc, #44]	; (801cc3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801cc0e:	681b      	ldr	r3, [r3, #0]
 801cc10:	f023 0207 	bic.w	r2, r3, #7
 801cc14:	4909      	ldr	r1, [pc, #36]	; (801cc3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801cc16:	693b      	ldr	r3, [r7, #16]
 801cc18:	4313      	orrs	r3, r2
 801cc1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 801cc1c:	4b07      	ldr	r3, [pc, #28]	; (801cc3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801cc1e:	681b      	ldr	r3, [r3, #0]
 801cc20:	f003 0307 	and.w	r3, r3, #7
 801cc24:	693a      	ldr	r2, [r7, #16]
 801cc26:	429a      	cmp	r2, r3
 801cc28:	d001      	beq.n	801cc2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 801cc2a:	2301      	movs	r3, #1
 801cc2c:	e000      	b.n	801cc30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 801cc2e:	2300      	movs	r3, #0
}
 801cc30:	4618      	mov	r0, r3
 801cc32:	3718      	adds	r7, #24
 801cc34:	46bd      	mov	sp, r7
 801cc36:	bd80      	pop	{r7, pc}
 801cc38:	40021000 	.word	0x40021000
 801cc3c:	40022000 	.word	0x40022000

0801cc40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801cc40:	b580      	push	{r7, lr}
 801cc42:	b086      	sub	sp, #24
 801cc44:	af00      	add	r7, sp, #0
 801cc46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801cc48:	2300      	movs	r3, #0
 801cc4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801cc4c:	2300      	movs	r3, #0
 801cc4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 801cc50:	687b      	ldr	r3, [r7, #4]
 801cc52:	681b      	ldr	r3, [r3, #0]
 801cc54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801cc58:	2b00      	cmp	r3, #0
 801cc5a:	d041      	beq.n	801cce0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 801cc5c:	687b      	ldr	r3, [r7, #4]
 801cc5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801cc60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 801cc64:	d02a      	beq.n	801ccbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 801cc66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 801cc6a:	d824      	bhi.n	801ccb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 801cc6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801cc70:	d008      	beq.n	801cc84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 801cc72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801cc76:	d81e      	bhi.n	801ccb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 801cc78:	2b00      	cmp	r3, #0
 801cc7a:	d00a      	beq.n	801cc92 <HAL_RCCEx_PeriphCLKConfig+0x52>
 801cc7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801cc80:	d010      	beq.n	801cca4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801cc82:	e018      	b.n	801ccb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 801cc84:	4b86      	ldr	r3, [pc, #536]	; (801cea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801cc86:	68db      	ldr	r3, [r3, #12]
 801cc88:	4a85      	ldr	r2, [pc, #532]	; (801cea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801cc8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801cc8e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 801cc90:	e015      	b.n	801ccbe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 801cc92:	687b      	ldr	r3, [r7, #4]
 801cc94:	3304      	adds	r3, #4
 801cc96:	2100      	movs	r1, #0
 801cc98:	4618      	mov	r0, r3
 801cc9a:	f000 fabb 	bl	801d214 <RCCEx_PLLSAI1_Config>
 801cc9e:	4603      	mov	r3, r0
 801cca0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 801cca2:	e00c      	b.n	801ccbe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 801cca4:	687b      	ldr	r3, [r7, #4]
 801cca6:	3320      	adds	r3, #32
 801cca8:	2100      	movs	r1, #0
 801ccaa:	4618      	mov	r0, r3
 801ccac:	f000 fba6 	bl	801d3fc <RCCEx_PLLSAI2_Config>
 801ccb0:	4603      	mov	r3, r0
 801ccb2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 801ccb4:	e003      	b.n	801ccbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801ccb6:	2301      	movs	r3, #1
 801ccb8:	74fb      	strb	r3, [r7, #19]
      break;
 801ccba:	e000      	b.n	801ccbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 801ccbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 801ccbe:	7cfb      	ldrb	r3, [r7, #19]
 801ccc0:	2b00      	cmp	r3, #0
 801ccc2:	d10b      	bne.n	801ccdc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801ccc4:	4b76      	ldr	r3, [pc, #472]	; (801cea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801ccc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ccca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801ccce:	687b      	ldr	r3, [r7, #4]
 801ccd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801ccd2:	4973      	ldr	r1, [pc, #460]	; (801cea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801ccd4:	4313      	orrs	r3, r2
 801ccd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 801ccda:	e001      	b.n	801cce0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ccdc:	7cfb      	ldrb	r3, [r7, #19]
 801ccde:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 801cce0:	687b      	ldr	r3, [r7, #4]
 801cce2:	681b      	ldr	r3, [r3, #0]
 801cce4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801cce8:	2b00      	cmp	r3, #0
 801ccea:	d041      	beq.n	801cd70 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 801ccec:	687b      	ldr	r3, [r7, #4]
 801ccee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801ccf0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801ccf4:	d02a      	beq.n	801cd4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 801ccf6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801ccfa:	d824      	bhi.n	801cd46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 801ccfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801cd00:	d008      	beq.n	801cd14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 801cd02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801cd06:	d81e      	bhi.n	801cd46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 801cd08:	2b00      	cmp	r3, #0
 801cd0a:	d00a      	beq.n	801cd22 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 801cd0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801cd10:	d010      	beq.n	801cd34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 801cd12:	e018      	b.n	801cd46 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 801cd14:	4b62      	ldr	r3, [pc, #392]	; (801cea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801cd16:	68db      	ldr	r3, [r3, #12]
 801cd18:	4a61      	ldr	r2, [pc, #388]	; (801cea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801cd1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801cd1e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 801cd20:	e015      	b.n	801cd4e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 801cd22:	687b      	ldr	r3, [r7, #4]
 801cd24:	3304      	adds	r3, #4
 801cd26:	2100      	movs	r1, #0
 801cd28:	4618      	mov	r0, r3
 801cd2a:	f000 fa73 	bl	801d214 <RCCEx_PLLSAI1_Config>
 801cd2e:	4603      	mov	r3, r0
 801cd30:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 801cd32:	e00c      	b.n	801cd4e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 801cd34:	687b      	ldr	r3, [r7, #4]
 801cd36:	3320      	adds	r3, #32
 801cd38:	2100      	movs	r1, #0
 801cd3a:	4618      	mov	r0, r3
 801cd3c:	f000 fb5e 	bl	801d3fc <RCCEx_PLLSAI2_Config>
 801cd40:	4603      	mov	r3, r0
 801cd42:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 801cd44:	e003      	b.n	801cd4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801cd46:	2301      	movs	r3, #1
 801cd48:	74fb      	strb	r3, [r7, #19]
      break;
 801cd4a:	e000      	b.n	801cd4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 801cd4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801cd4e:	7cfb      	ldrb	r3, [r7, #19]
 801cd50:	2b00      	cmp	r3, #0
 801cd52:	d10b      	bne.n	801cd6c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801cd54:	4b52      	ldr	r3, [pc, #328]	; (801cea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801cd56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cd5a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 801cd5e:	687b      	ldr	r3, [r7, #4]
 801cd60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801cd62:	494f      	ldr	r1, [pc, #316]	; (801cea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801cd64:	4313      	orrs	r3, r2
 801cd66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 801cd6a:	e001      	b.n	801cd70 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cd6c:	7cfb      	ldrb	r3, [r7, #19]
 801cd6e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801cd70:	687b      	ldr	r3, [r7, #4]
 801cd72:	681b      	ldr	r3, [r3, #0]
 801cd74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801cd78:	2b00      	cmp	r3, #0
 801cd7a:	f000 80a0 	beq.w	801cebe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 801cd7e:	2300      	movs	r3, #0
 801cd80:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801cd82:	4b47      	ldr	r3, [pc, #284]	; (801cea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801cd84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cd86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801cd8a:	2b00      	cmp	r3, #0
 801cd8c:	d101      	bne.n	801cd92 <HAL_RCCEx_PeriphCLKConfig+0x152>
 801cd8e:	2301      	movs	r3, #1
 801cd90:	e000      	b.n	801cd94 <HAL_RCCEx_PeriphCLKConfig+0x154>
 801cd92:	2300      	movs	r3, #0
 801cd94:	2b00      	cmp	r3, #0
 801cd96:	d00d      	beq.n	801cdb4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801cd98:	4b41      	ldr	r3, [pc, #260]	; (801cea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801cd9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cd9c:	4a40      	ldr	r2, [pc, #256]	; (801cea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801cd9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801cda2:	6593      	str	r3, [r2, #88]	; 0x58
 801cda4:	4b3e      	ldr	r3, [pc, #248]	; (801cea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801cda6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cda8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801cdac:	60bb      	str	r3, [r7, #8]
 801cdae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801cdb0:	2301      	movs	r3, #1
 801cdb2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801cdb4:	4b3b      	ldr	r3, [pc, #236]	; (801cea4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 801cdb6:	681b      	ldr	r3, [r3, #0]
 801cdb8:	4a3a      	ldr	r2, [pc, #232]	; (801cea4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 801cdba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801cdbe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801cdc0:	f7fe fa98 	bl	801b2f4 <HAL_GetTick>
 801cdc4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 801cdc6:	e009      	b.n	801cddc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801cdc8:	f7fe fa94 	bl	801b2f4 <HAL_GetTick>
 801cdcc:	4602      	mov	r2, r0
 801cdce:	68fb      	ldr	r3, [r7, #12]
 801cdd0:	1ad3      	subs	r3, r2, r3
 801cdd2:	2b02      	cmp	r3, #2
 801cdd4:	d902      	bls.n	801cddc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 801cdd6:	2303      	movs	r3, #3
 801cdd8:	74fb      	strb	r3, [r7, #19]
        break;
 801cdda:	e005      	b.n	801cde8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 801cddc:	4b31      	ldr	r3, [pc, #196]	; (801cea4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 801cdde:	681b      	ldr	r3, [r3, #0]
 801cde0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cde4:	2b00      	cmp	r3, #0
 801cde6:	d0ef      	beq.n	801cdc8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 801cde8:	7cfb      	ldrb	r3, [r7, #19]
 801cdea:	2b00      	cmp	r3, #0
 801cdec:	d15c      	bne.n	801cea8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801cdee:	4b2c      	ldr	r3, [pc, #176]	; (801cea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801cdf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cdf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801cdf8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801cdfa:	697b      	ldr	r3, [r7, #20]
 801cdfc:	2b00      	cmp	r3, #0
 801cdfe:	d01f      	beq.n	801ce40 <HAL_RCCEx_PeriphCLKConfig+0x200>
 801ce00:	687b      	ldr	r3, [r7, #4]
 801ce02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ce06:	697a      	ldr	r2, [r7, #20]
 801ce08:	429a      	cmp	r2, r3
 801ce0a:	d019      	beq.n	801ce40 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801ce0c:	4b24      	ldr	r3, [pc, #144]	; (801cea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801ce0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ce12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801ce16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801ce18:	4b21      	ldr	r3, [pc, #132]	; (801cea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801ce1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ce1e:	4a20      	ldr	r2, [pc, #128]	; (801cea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801ce20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801ce24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 801ce28:	4b1d      	ldr	r3, [pc, #116]	; (801cea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801ce2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ce2e:	4a1c      	ldr	r2, [pc, #112]	; (801cea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801ce30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801ce34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 801ce38:	4a19      	ldr	r2, [pc, #100]	; (801cea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801ce3a:	697b      	ldr	r3, [r7, #20]
 801ce3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801ce40:	697b      	ldr	r3, [r7, #20]
 801ce42:	f003 0301 	and.w	r3, r3, #1
 801ce46:	2b00      	cmp	r3, #0
 801ce48:	d016      	beq.n	801ce78 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ce4a:	f7fe fa53 	bl	801b2f4 <HAL_GetTick>
 801ce4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801ce50:	e00b      	b.n	801ce6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801ce52:	f7fe fa4f 	bl	801b2f4 <HAL_GetTick>
 801ce56:	4602      	mov	r2, r0
 801ce58:	68fb      	ldr	r3, [r7, #12]
 801ce5a:	1ad3      	subs	r3, r2, r3
 801ce5c:	f241 3288 	movw	r2, #5000	; 0x1388
 801ce60:	4293      	cmp	r3, r2
 801ce62:	d902      	bls.n	801ce6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 801ce64:	2303      	movs	r3, #3
 801ce66:	74fb      	strb	r3, [r7, #19]
            break;
 801ce68:	e006      	b.n	801ce78 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801ce6a:	4b0d      	ldr	r3, [pc, #52]	; (801cea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801ce6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ce70:	f003 0302 	and.w	r3, r3, #2
 801ce74:	2b00      	cmp	r3, #0
 801ce76:	d0ec      	beq.n	801ce52 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 801ce78:	7cfb      	ldrb	r3, [r7, #19]
 801ce7a:	2b00      	cmp	r3, #0
 801ce7c:	d10c      	bne.n	801ce98 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801ce7e:	4b08      	ldr	r3, [pc, #32]	; (801cea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801ce80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ce84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801ce88:	687b      	ldr	r3, [r7, #4]
 801ce8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ce8e:	4904      	ldr	r1, [pc, #16]	; (801cea0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801ce90:	4313      	orrs	r3, r2
 801ce92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801ce96:	e009      	b.n	801ceac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801ce98:	7cfb      	ldrb	r3, [r7, #19]
 801ce9a:	74bb      	strb	r3, [r7, #18]
 801ce9c:	e006      	b.n	801ceac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 801ce9e:	bf00      	nop
 801cea0:	40021000 	.word	0x40021000
 801cea4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cea8:	7cfb      	ldrb	r3, [r7, #19]
 801ceaa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801ceac:	7c7b      	ldrb	r3, [r7, #17]
 801ceae:	2b01      	cmp	r3, #1
 801ceb0:	d105      	bne.n	801cebe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801ceb2:	4b9e      	ldr	r3, [pc, #632]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801ceb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ceb6:	4a9d      	ldr	r2, [pc, #628]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801ceb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801cebc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801cebe:	687b      	ldr	r3, [r7, #4]
 801cec0:	681b      	ldr	r3, [r3, #0]
 801cec2:	f003 0301 	and.w	r3, r3, #1
 801cec6:	2b00      	cmp	r3, #0
 801cec8:	d00a      	beq.n	801cee0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801ceca:	4b98      	ldr	r3, [pc, #608]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ced0:	f023 0203 	bic.w	r2, r3, #3
 801ced4:	687b      	ldr	r3, [r7, #4]
 801ced6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ced8:	4994      	ldr	r1, [pc, #592]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801ceda:	4313      	orrs	r3, r2
 801cedc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801cee0:	687b      	ldr	r3, [r7, #4]
 801cee2:	681b      	ldr	r3, [r3, #0]
 801cee4:	f003 0302 	and.w	r3, r3, #2
 801cee8:	2b00      	cmp	r3, #0
 801ceea:	d00a      	beq.n	801cf02 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801ceec:	4b8f      	ldr	r3, [pc, #572]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801ceee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cef2:	f023 020c 	bic.w	r2, r3, #12
 801cef6:	687b      	ldr	r3, [r7, #4]
 801cef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cefa:	498c      	ldr	r1, [pc, #560]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cefc:	4313      	orrs	r3, r2
 801cefe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801cf02:	687b      	ldr	r3, [r7, #4]
 801cf04:	681b      	ldr	r3, [r3, #0]
 801cf06:	f003 0304 	and.w	r3, r3, #4
 801cf0a:	2b00      	cmp	r3, #0
 801cf0c:	d00a      	beq.n	801cf24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801cf0e:	4b87      	ldr	r3, [pc, #540]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cf10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cf14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801cf18:	687b      	ldr	r3, [r7, #4]
 801cf1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cf1c:	4983      	ldr	r1, [pc, #524]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cf1e:	4313      	orrs	r3, r2
 801cf20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801cf24:	687b      	ldr	r3, [r7, #4]
 801cf26:	681b      	ldr	r3, [r3, #0]
 801cf28:	f003 0308 	and.w	r3, r3, #8
 801cf2c:	2b00      	cmp	r3, #0
 801cf2e:	d00a      	beq.n	801cf46 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801cf30:	4b7e      	ldr	r3, [pc, #504]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cf32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cf36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801cf3a:	687b      	ldr	r3, [r7, #4]
 801cf3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cf3e:	497b      	ldr	r1, [pc, #492]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cf40:	4313      	orrs	r3, r2
 801cf42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801cf46:	687b      	ldr	r3, [r7, #4]
 801cf48:	681b      	ldr	r3, [r3, #0]
 801cf4a:	f003 0310 	and.w	r3, r3, #16
 801cf4e:	2b00      	cmp	r3, #0
 801cf50:	d00a      	beq.n	801cf68 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801cf52:	4b76      	ldr	r3, [pc, #472]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cf54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cf58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801cf5c:	687b      	ldr	r3, [r7, #4]
 801cf5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cf60:	4972      	ldr	r1, [pc, #456]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cf62:	4313      	orrs	r3, r2
 801cf64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801cf68:	687b      	ldr	r3, [r7, #4]
 801cf6a:	681b      	ldr	r3, [r3, #0]
 801cf6c:	f003 0320 	and.w	r3, r3, #32
 801cf70:	2b00      	cmp	r3, #0
 801cf72:	d00a      	beq.n	801cf8a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801cf74:	4b6d      	ldr	r3, [pc, #436]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cf76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cf7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801cf7e:	687b      	ldr	r3, [r7, #4]
 801cf80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cf82:	496a      	ldr	r1, [pc, #424]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cf84:	4313      	orrs	r3, r2
 801cf86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801cf8a:	687b      	ldr	r3, [r7, #4]
 801cf8c:	681b      	ldr	r3, [r3, #0]
 801cf8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801cf92:	2b00      	cmp	r3, #0
 801cf94:	d00a      	beq.n	801cfac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801cf96:	4b65      	ldr	r3, [pc, #404]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cf98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cf9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 801cfa0:	687b      	ldr	r3, [r7, #4]
 801cfa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cfa4:	4961      	ldr	r1, [pc, #388]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cfa6:	4313      	orrs	r3, r2
 801cfa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 801cfac:	687b      	ldr	r3, [r7, #4]
 801cfae:	681b      	ldr	r3, [r3, #0]
 801cfb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801cfb4:	2b00      	cmp	r3, #0
 801cfb6:	d00a      	beq.n	801cfce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801cfb8:	4b5c      	ldr	r3, [pc, #368]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cfba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cfbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801cfc2:	687b      	ldr	r3, [r7, #4]
 801cfc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801cfc6:	4959      	ldr	r1, [pc, #356]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cfc8:	4313      	orrs	r3, r2
 801cfca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801cfce:	687b      	ldr	r3, [r7, #4]
 801cfd0:	681b      	ldr	r3, [r3, #0]
 801cfd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801cfd6:	2b00      	cmp	r3, #0
 801cfd8:	d00a      	beq.n	801cff0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801cfda:	4b54      	ldr	r3, [pc, #336]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cfdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cfe0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801cfe4:	687b      	ldr	r3, [r7, #4]
 801cfe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cfe8:	4950      	ldr	r1, [pc, #320]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cfea:	4313      	orrs	r3, r2
 801cfec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801cff0:	687b      	ldr	r3, [r7, #4]
 801cff2:	681b      	ldr	r3, [r3, #0]
 801cff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801cff8:	2b00      	cmp	r3, #0
 801cffa:	d00a      	beq.n	801d012 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801cffc:	4b4b      	ldr	r3, [pc, #300]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801cffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d002:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801d006:	687b      	ldr	r3, [r7, #4]
 801d008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d00a:	4948      	ldr	r1, [pc, #288]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801d00c:	4313      	orrs	r3, r2
 801d00e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801d012:	687b      	ldr	r3, [r7, #4]
 801d014:	681b      	ldr	r3, [r3, #0]
 801d016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d01a:	2b00      	cmp	r3, #0
 801d01c:	d00a      	beq.n	801d034 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801d01e:	4b43      	ldr	r3, [pc, #268]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801d020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d024:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801d028:	687b      	ldr	r3, [r7, #4]
 801d02a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d02c:	493f      	ldr	r1, [pc, #252]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801d02e:	4313      	orrs	r3, r2
 801d030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801d034:	687b      	ldr	r3, [r7, #4]
 801d036:	681b      	ldr	r3, [r3, #0]
 801d038:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801d03c:	2b00      	cmp	r3, #0
 801d03e:	d028      	beq.n	801d092 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801d040:	4b3a      	ldr	r3, [pc, #232]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801d042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d046:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801d04a:	687b      	ldr	r3, [r7, #4]
 801d04c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d04e:	4937      	ldr	r1, [pc, #220]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801d050:	4313      	orrs	r3, r2
 801d052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801d056:	687b      	ldr	r3, [r7, #4]
 801d058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d05a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d05e:	d106      	bne.n	801d06e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d060:	4b32      	ldr	r3, [pc, #200]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801d062:	68db      	ldr	r3, [r3, #12]
 801d064:	4a31      	ldr	r2, [pc, #196]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801d066:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d06a:	60d3      	str	r3, [r2, #12]
 801d06c:	e011      	b.n	801d092 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 801d06e:	687b      	ldr	r3, [r7, #4]
 801d070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d072:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801d076:	d10c      	bne.n	801d092 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801d078:	687b      	ldr	r3, [r7, #4]
 801d07a:	3304      	adds	r3, #4
 801d07c:	2101      	movs	r1, #1
 801d07e:	4618      	mov	r0, r3
 801d080:	f000 f8c8 	bl	801d214 <RCCEx_PLLSAI1_Config>
 801d084:	4603      	mov	r3, r0
 801d086:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 801d088:	7cfb      	ldrb	r3, [r7, #19]
 801d08a:	2b00      	cmp	r3, #0
 801d08c:	d001      	beq.n	801d092 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 801d08e:	7cfb      	ldrb	r3, [r7, #19]
 801d090:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 801d092:	687b      	ldr	r3, [r7, #4]
 801d094:	681b      	ldr	r3, [r3, #0]
 801d096:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801d09a:	2b00      	cmp	r3, #0
 801d09c:	d028      	beq.n	801d0f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 801d09e:	4b23      	ldr	r3, [pc, #140]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801d0a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d0a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801d0a8:	687b      	ldr	r3, [r7, #4]
 801d0aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d0ac:	491f      	ldr	r1, [pc, #124]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801d0ae:	4313      	orrs	r3, r2
 801d0b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 801d0b4:	687b      	ldr	r3, [r7, #4]
 801d0b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d0b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d0bc:	d106      	bne.n	801d0cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d0be:	4b1b      	ldr	r3, [pc, #108]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801d0c0:	68db      	ldr	r3, [r3, #12]
 801d0c2:	4a1a      	ldr	r2, [pc, #104]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801d0c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d0c8:	60d3      	str	r3, [r2, #12]
 801d0ca:	e011      	b.n	801d0f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 801d0cc:	687b      	ldr	r3, [r7, #4]
 801d0ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d0d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801d0d4:	d10c      	bne.n	801d0f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801d0d6:	687b      	ldr	r3, [r7, #4]
 801d0d8:	3304      	adds	r3, #4
 801d0da:	2101      	movs	r1, #1
 801d0dc:	4618      	mov	r0, r3
 801d0de:	f000 f899 	bl	801d214 <RCCEx_PLLSAI1_Config>
 801d0e2:	4603      	mov	r3, r0
 801d0e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801d0e6:	7cfb      	ldrb	r3, [r7, #19]
 801d0e8:	2b00      	cmp	r3, #0
 801d0ea:	d001      	beq.n	801d0f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 801d0ec:	7cfb      	ldrb	r3, [r7, #19]
 801d0ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801d0f0:	687b      	ldr	r3, [r7, #4]
 801d0f2:	681b      	ldr	r3, [r3, #0]
 801d0f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801d0f8:	2b00      	cmp	r3, #0
 801d0fa:	d02b      	beq.n	801d154 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801d0fc:	4b0b      	ldr	r3, [pc, #44]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801d0fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d102:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801d106:	687b      	ldr	r3, [r7, #4]
 801d108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d10a:	4908      	ldr	r1, [pc, #32]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801d10c:	4313      	orrs	r3, r2
 801d10e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801d112:	687b      	ldr	r3, [r7, #4]
 801d114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d116:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d11a:	d109      	bne.n	801d130 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d11c:	4b03      	ldr	r3, [pc, #12]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801d11e:	68db      	ldr	r3, [r3, #12]
 801d120:	4a02      	ldr	r2, [pc, #8]	; (801d12c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801d122:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d126:	60d3      	str	r3, [r2, #12]
 801d128:	e014      	b.n	801d154 <HAL_RCCEx_PeriphCLKConfig+0x514>
 801d12a:	bf00      	nop
 801d12c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 801d130:	687b      	ldr	r3, [r7, #4]
 801d132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d134:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801d138:	d10c      	bne.n	801d154 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801d13a:	687b      	ldr	r3, [r7, #4]
 801d13c:	3304      	adds	r3, #4
 801d13e:	2101      	movs	r1, #1
 801d140:	4618      	mov	r0, r3
 801d142:	f000 f867 	bl	801d214 <RCCEx_PLLSAI1_Config>
 801d146:	4603      	mov	r3, r0
 801d148:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801d14a:	7cfb      	ldrb	r3, [r7, #19]
 801d14c:	2b00      	cmp	r3, #0
 801d14e:	d001      	beq.n	801d154 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 801d150:	7cfb      	ldrb	r3, [r7, #19]
 801d152:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801d154:	687b      	ldr	r3, [r7, #4]
 801d156:	681b      	ldr	r3, [r3, #0]
 801d158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801d15c:	2b00      	cmp	r3, #0
 801d15e:	d02f      	beq.n	801d1c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801d160:	4b2b      	ldr	r3, [pc, #172]	; (801d210 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 801d162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d166:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801d16a:	687b      	ldr	r3, [r7, #4]
 801d16c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d16e:	4928      	ldr	r1, [pc, #160]	; (801d210 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 801d170:	4313      	orrs	r3, r2
 801d172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 801d176:	687b      	ldr	r3, [r7, #4]
 801d178:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d17a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d17e:	d10d      	bne.n	801d19c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 801d180:	687b      	ldr	r3, [r7, #4]
 801d182:	3304      	adds	r3, #4
 801d184:	2102      	movs	r1, #2
 801d186:	4618      	mov	r0, r3
 801d188:	f000 f844 	bl	801d214 <RCCEx_PLLSAI1_Config>
 801d18c:	4603      	mov	r3, r0
 801d18e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801d190:	7cfb      	ldrb	r3, [r7, #19]
 801d192:	2b00      	cmp	r3, #0
 801d194:	d014      	beq.n	801d1c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 801d196:	7cfb      	ldrb	r3, [r7, #19]
 801d198:	74bb      	strb	r3, [r7, #18]
 801d19a:	e011      	b.n	801d1c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 801d19c:	687b      	ldr	r3, [r7, #4]
 801d19e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d1a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d1a4:	d10c      	bne.n	801d1c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 801d1a6:	687b      	ldr	r3, [r7, #4]
 801d1a8:	3320      	adds	r3, #32
 801d1aa:	2102      	movs	r1, #2
 801d1ac:	4618      	mov	r0, r3
 801d1ae:	f000 f925 	bl	801d3fc <RCCEx_PLLSAI2_Config>
 801d1b2:	4603      	mov	r3, r0
 801d1b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801d1b6:	7cfb      	ldrb	r3, [r7, #19]
 801d1b8:	2b00      	cmp	r3, #0
 801d1ba:	d001      	beq.n	801d1c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 801d1bc:	7cfb      	ldrb	r3, [r7, #19]
 801d1be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801d1c0:	687b      	ldr	r3, [r7, #4]
 801d1c2:	681b      	ldr	r3, [r3, #0]
 801d1c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801d1c8:	2b00      	cmp	r3, #0
 801d1ca:	d00a      	beq.n	801d1e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801d1cc:	4b10      	ldr	r3, [pc, #64]	; (801d210 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 801d1ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d1d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 801d1d6:	687b      	ldr	r3, [r7, #4]
 801d1d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801d1da:	490d      	ldr	r1, [pc, #52]	; (801d210 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 801d1dc:	4313      	orrs	r3, r2
 801d1de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801d1e2:	687b      	ldr	r3, [r7, #4]
 801d1e4:	681b      	ldr	r3, [r3, #0]
 801d1e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801d1ea:	2b00      	cmp	r3, #0
 801d1ec:	d00b      	beq.n	801d206 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801d1ee:	4b08      	ldr	r3, [pc, #32]	; (801d210 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 801d1f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d1f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801d1f8:	687b      	ldr	r3, [r7, #4]
 801d1fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801d1fe:	4904      	ldr	r1, [pc, #16]	; (801d210 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 801d200:	4313      	orrs	r3, r2
 801d202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 801d206:	7cbb      	ldrb	r3, [r7, #18]
}
 801d208:	4618      	mov	r0, r3
 801d20a:	3718      	adds	r7, #24
 801d20c:	46bd      	mov	sp, r7
 801d20e:	bd80      	pop	{r7, pc}
 801d210:	40021000 	.word	0x40021000

0801d214 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 801d214:	b580      	push	{r7, lr}
 801d216:	b084      	sub	sp, #16
 801d218:	af00      	add	r7, sp, #0
 801d21a:	6078      	str	r0, [r7, #4]
 801d21c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801d21e:	2300      	movs	r3, #0
 801d220:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 801d222:	4b75      	ldr	r3, [pc, #468]	; (801d3f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d224:	68db      	ldr	r3, [r3, #12]
 801d226:	f003 0303 	and.w	r3, r3, #3
 801d22a:	2b00      	cmp	r3, #0
 801d22c:	d018      	beq.n	801d260 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 801d22e:	4b72      	ldr	r3, [pc, #456]	; (801d3f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d230:	68db      	ldr	r3, [r3, #12]
 801d232:	f003 0203 	and.w	r2, r3, #3
 801d236:	687b      	ldr	r3, [r7, #4]
 801d238:	681b      	ldr	r3, [r3, #0]
 801d23a:	429a      	cmp	r2, r3
 801d23c:	d10d      	bne.n	801d25a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 801d23e:	687b      	ldr	r3, [r7, #4]
 801d240:	681b      	ldr	r3, [r3, #0]
       ||
 801d242:	2b00      	cmp	r3, #0
 801d244:	d009      	beq.n	801d25a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 801d246:	4b6c      	ldr	r3, [pc, #432]	; (801d3f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d248:	68db      	ldr	r3, [r3, #12]
 801d24a:	091b      	lsrs	r3, r3, #4
 801d24c:	f003 0307 	and.w	r3, r3, #7
 801d250:	1c5a      	adds	r2, r3, #1
 801d252:	687b      	ldr	r3, [r7, #4]
 801d254:	685b      	ldr	r3, [r3, #4]
       ||
 801d256:	429a      	cmp	r2, r3
 801d258:	d047      	beq.n	801d2ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 801d25a:	2301      	movs	r3, #1
 801d25c:	73fb      	strb	r3, [r7, #15]
 801d25e:	e044      	b.n	801d2ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 801d260:	687b      	ldr	r3, [r7, #4]
 801d262:	681b      	ldr	r3, [r3, #0]
 801d264:	2b03      	cmp	r3, #3
 801d266:	d018      	beq.n	801d29a <RCCEx_PLLSAI1_Config+0x86>
 801d268:	2b03      	cmp	r3, #3
 801d26a:	d825      	bhi.n	801d2b8 <RCCEx_PLLSAI1_Config+0xa4>
 801d26c:	2b01      	cmp	r3, #1
 801d26e:	d002      	beq.n	801d276 <RCCEx_PLLSAI1_Config+0x62>
 801d270:	2b02      	cmp	r3, #2
 801d272:	d009      	beq.n	801d288 <RCCEx_PLLSAI1_Config+0x74>
 801d274:	e020      	b.n	801d2b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 801d276:	4b60      	ldr	r3, [pc, #384]	; (801d3f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d278:	681b      	ldr	r3, [r3, #0]
 801d27a:	f003 0302 	and.w	r3, r3, #2
 801d27e:	2b00      	cmp	r3, #0
 801d280:	d11d      	bne.n	801d2be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 801d282:	2301      	movs	r3, #1
 801d284:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801d286:	e01a      	b.n	801d2be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 801d288:	4b5b      	ldr	r3, [pc, #364]	; (801d3f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d28a:	681b      	ldr	r3, [r3, #0]
 801d28c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801d290:	2b00      	cmp	r3, #0
 801d292:	d116      	bne.n	801d2c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 801d294:	2301      	movs	r3, #1
 801d296:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801d298:	e013      	b.n	801d2c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 801d29a:	4b57      	ldr	r3, [pc, #348]	; (801d3f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d29c:	681b      	ldr	r3, [r3, #0]
 801d29e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d2a2:	2b00      	cmp	r3, #0
 801d2a4:	d10f      	bne.n	801d2c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 801d2a6:	4b54      	ldr	r3, [pc, #336]	; (801d3f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d2a8:	681b      	ldr	r3, [r3, #0]
 801d2aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801d2ae:	2b00      	cmp	r3, #0
 801d2b0:	d109      	bne.n	801d2c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 801d2b2:	2301      	movs	r3, #1
 801d2b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801d2b6:	e006      	b.n	801d2c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 801d2b8:	2301      	movs	r3, #1
 801d2ba:	73fb      	strb	r3, [r7, #15]
      break;
 801d2bc:	e004      	b.n	801d2c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801d2be:	bf00      	nop
 801d2c0:	e002      	b.n	801d2c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801d2c2:	bf00      	nop
 801d2c4:	e000      	b.n	801d2c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801d2c6:	bf00      	nop
    }

    if(status == HAL_OK)
 801d2c8:	7bfb      	ldrb	r3, [r7, #15]
 801d2ca:	2b00      	cmp	r3, #0
 801d2cc:	d10d      	bne.n	801d2ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 801d2ce:	4b4a      	ldr	r3, [pc, #296]	; (801d3f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d2d0:	68db      	ldr	r3, [r3, #12]
 801d2d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 801d2d6:	687b      	ldr	r3, [r7, #4]
 801d2d8:	6819      	ldr	r1, [r3, #0]
 801d2da:	687b      	ldr	r3, [r7, #4]
 801d2dc:	685b      	ldr	r3, [r3, #4]
 801d2de:	3b01      	subs	r3, #1
 801d2e0:	011b      	lsls	r3, r3, #4
 801d2e2:	430b      	orrs	r3, r1
 801d2e4:	4944      	ldr	r1, [pc, #272]	; (801d3f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d2e6:	4313      	orrs	r3, r2
 801d2e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 801d2ea:	7bfb      	ldrb	r3, [r7, #15]
 801d2ec:	2b00      	cmp	r3, #0
 801d2ee:	d17d      	bne.n	801d3ec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 801d2f0:	4b41      	ldr	r3, [pc, #260]	; (801d3f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d2f2:	681b      	ldr	r3, [r3, #0]
 801d2f4:	4a40      	ldr	r2, [pc, #256]	; (801d3f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d2f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801d2fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d2fc:	f7fd fffa 	bl	801b2f4 <HAL_GetTick>
 801d300:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 801d302:	e009      	b.n	801d318 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801d304:	f7fd fff6 	bl	801b2f4 <HAL_GetTick>
 801d308:	4602      	mov	r2, r0
 801d30a:	68bb      	ldr	r3, [r7, #8]
 801d30c:	1ad3      	subs	r3, r2, r3
 801d30e:	2b02      	cmp	r3, #2
 801d310:	d902      	bls.n	801d318 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 801d312:	2303      	movs	r3, #3
 801d314:	73fb      	strb	r3, [r7, #15]
        break;
 801d316:	e005      	b.n	801d324 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 801d318:	4b37      	ldr	r3, [pc, #220]	; (801d3f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d31a:	681b      	ldr	r3, [r3, #0]
 801d31c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d320:	2b00      	cmp	r3, #0
 801d322:	d1ef      	bne.n	801d304 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 801d324:	7bfb      	ldrb	r3, [r7, #15]
 801d326:	2b00      	cmp	r3, #0
 801d328:	d160      	bne.n	801d3ec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 801d32a:	683b      	ldr	r3, [r7, #0]
 801d32c:	2b00      	cmp	r3, #0
 801d32e:	d111      	bne.n	801d354 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801d330:	4b31      	ldr	r3, [pc, #196]	; (801d3f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d332:	691b      	ldr	r3, [r3, #16]
 801d334:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 801d338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d33c:	687a      	ldr	r2, [r7, #4]
 801d33e:	6892      	ldr	r2, [r2, #8]
 801d340:	0211      	lsls	r1, r2, #8
 801d342:	687a      	ldr	r2, [r7, #4]
 801d344:	68d2      	ldr	r2, [r2, #12]
 801d346:	0912      	lsrs	r2, r2, #4
 801d348:	0452      	lsls	r2, r2, #17
 801d34a:	430a      	orrs	r2, r1
 801d34c:	492a      	ldr	r1, [pc, #168]	; (801d3f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d34e:	4313      	orrs	r3, r2
 801d350:	610b      	str	r3, [r1, #16]
 801d352:	e027      	b.n	801d3a4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 801d354:	683b      	ldr	r3, [r7, #0]
 801d356:	2b01      	cmp	r3, #1
 801d358:	d112      	bne.n	801d380 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801d35a:	4b27      	ldr	r3, [pc, #156]	; (801d3f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d35c:	691b      	ldr	r3, [r3, #16]
 801d35e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 801d362:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 801d366:	687a      	ldr	r2, [r7, #4]
 801d368:	6892      	ldr	r2, [r2, #8]
 801d36a:	0211      	lsls	r1, r2, #8
 801d36c:	687a      	ldr	r2, [r7, #4]
 801d36e:	6912      	ldr	r2, [r2, #16]
 801d370:	0852      	lsrs	r2, r2, #1
 801d372:	3a01      	subs	r2, #1
 801d374:	0552      	lsls	r2, r2, #21
 801d376:	430a      	orrs	r2, r1
 801d378:	491f      	ldr	r1, [pc, #124]	; (801d3f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d37a:	4313      	orrs	r3, r2
 801d37c:	610b      	str	r3, [r1, #16]
 801d37e:	e011      	b.n	801d3a4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801d380:	4b1d      	ldr	r3, [pc, #116]	; (801d3f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d382:	691b      	ldr	r3, [r3, #16]
 801d384:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 801d388:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 801d38c:	687a      	ldr	r2, [r7, #4]
 801d38e:	6892      	ldr	r2, [r2, #8]
 801d390:	0211      	lsls	r1, r2, #8
 801d392:	687a      	ldr	r2, [r7, #4]
 801d394:	6952      	ldr	r2, [r2, #20]
 801d396:	0852      	lsrs	r2, r2, #1
 801d398:	3a01      	subs	r2, #1
 801d39a:	0652      	lsls	r2, r2, #25
 801d39c:	430a      	orrs	r2, r1
 801d39e:	4916      	ldr	r1, [pc, #88]	; (801d3f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d3a0:	4313      	orrs	r3, r2
 801d3a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 801d3a4:	4b14      	ldr	r3, [pc, #80]	; (801d3f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d3a6:	681b      	ldr	r3, [r3, #0]
 801d3a8:	4a13      	ldr	r2, [pc, #76]	; (801d3f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d3aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801d3ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d3b0:	f7fd ffa0 	bl	801b2f4 <HAL_GetTick>
 801d3b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 801d3b6:	e009      	b.n	801d3cc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801d3b8:	f7fd ff9c 	bl	801b2f4 <HAL_GetTick>
 801d3bc:	4602      	mov	r2, r0
 801d3be:	68bb      	ldr	r3, [r7, #8]
 801d3c0:	1ad3      	subs	r3, r2, r3
 801d3c2:	2b02      	cmp	r3, #2
 801d3c4:	d902      	bls.n	801d3cc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 801d3c6:	2303      	movs	r3, #3
 801d3c8:	73fb      	strb	r3, [r7, #15]
          break;
 801d3ca:	e005      	b.n	801d3d8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 801d3cc:	4b0a      	ldr	r3, [pc, #40]	; (801d3f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d3ce:	681b      	ldr	r3, [r3, #0]
 801d3d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d3d4:	2b00      	cmp	r3, #0
 801d3d6:	d0ef      	beq.n	801d3b8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 801d3d8:	7bfb      	ldrb	r3, [r7, #15]
 801d3da:	2b00      	cmp	r3, #0
 801d3dc:	d106      	bne.n	801d3ec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 801d3de:	4b06      	ldr	r3, [pc, #24]	; (801d3f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d3e0:	691a      	ldr	r2, [r3, #16]
 801d3e2:	687b      	ldr	r3, [r7, #4]
 801d3e4:	699b      	ldr	r3, [r3, #24]
 801d3e6:	4904      	ldr	r1, [pc, #16]	; (801d3f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 801d3e8:	4313      	orrs	r3, r2
 801d3ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 801d3ec:	7bfb      	ldrb	r3, [r7, #15]
}
 801d3ee:	4618      	mov	r0, r3
 801d3f0:	3710      	adds	r7, #16
 801d3f2:	46bd      	mov	sp, r7
 801d3f4:	bd80      	pop	{r7, pc}
 801d3f6:	bf00      	nop
 801d3f8:	40021000 	.word	0x40021000

0801d3fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 801d3fc:	b580      	push	{r7, lr}
 801d3fe:	b084      	sub	sp, #16
 801d400:	af00      	add	r7, sp, #0
 801d402:	6078      	str	r0, [r7, #4]
 801d404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801d406:	2300      	movs	r3, #0
 801d408:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 801d40a:	4b6a      	ldr	r3, [pc, #424]	; (801d5b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 801d40c:	68db      	ldr	r3, [r3, #12]
 801d40e:	f003 0303 	and.w	r3, r3, #3
 801d412:	2b00      	cmp	r3, #0
 801d414:	d018      	beq.n	801d448 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 801d416:	4b67      	ldr	r3, [pc, #412]	; (801d5b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 801d418:	68db      	ldr	r3, [r3, #12]
 801d41a:	f003 0203 	and.w	r2, r3, #3
 801d41e:	687b      	ldr	r3, [r7, #4]
 801d420:	681b      	ldr	r3, [r3, #0]
 801d422:	429a      	cmp	r2, r3
 801d424:	d10d      	bne.n	801d442 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 801d426:	687b      	ldr	r3, [r7, #4]
 801d428:	681b      	ldr	r3, [r3, #0]
       ||
 801d42a:	2b00      	cmp	r3, #0
 801d42c:	d009      	beq.n	801d442 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 801d42e:	4b61      	ldr	r3, [pc, #388]	; (801d5b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 801d430:	68db      	ldr	r3, [r3, #12]
 801d432:	091b      	lsrs	r3, r3, #4
 801d434:	f003 0307 	and.w	r3, r3, #7
 801d438:	1c5a      	adds	r2, r3, #1
 801d43a:	687b      	ldr	r3, [r7, #4]
 801d43c:	685b      	ldr	r3, [r3, #4]
       ||
 801d43e:	429a      	cmp	r2, r3
 801d440:	d047      	beq.n	801d4d2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 801d442:	2301      	movs	r3, #1
 801d444:	73fb      	strb	r3, [r7, #15]
 801d446:	e044      	b.n	801d4d2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 801d448:	687b      	ldr	r3, [r7, #4]
 801d44a:	681b      	ldr	r3, [r3, #0]
 801d44c:	2b03      	cmp	r3, #3
 801d44e:	d018      	beq.n	801d482 <RCCEx_PLLSAI2_Config+0x86>
 801d450:	2b03      	cmp	r3, #3
 801d452:	d825      	bhi.n	801d4a0 <RCCEx_PLLSAI2_Config+0xa4>
 801d454:	2b01      	cmp	r3, #1
 801d456:	d002      	beq.n	801d45e <RCCEx_PLLSAI2_Config+0x62>
 801d458:	2b02      	cmp	r3, #2
 801d45a:	d009      	beq.n	801d470 <RCCEx_PLLSAI2_Config+0x74>
 801d45c:	e020      	b.n	801d4a0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 801d45e:	4b55      	ldr	r3, [pc, #340]	; (801d5b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 801d460:	681b      	ldr	r3, [r3, #0]
 801d462:	f003 0302 	and.w	r3, r3, #2
 801d466:	2b00      	cmp	r3, #0
 801d468:	d11d      	bne.n	801d4a6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 801d46a:	2301      	movs	r3, #1
 801d46c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801d46e:	e01a      	b.n	801d4a6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 801d470:	4b50      	ldr	r3, [pc, #320]	; (801d5b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 801d472:	681b      	ldr	r3, [r3, #0]
 801d474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801d478:	2b00      	cmp	r3, #0
 801d47a:	d116      	bne.n	801d4aa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 801d47c:	2301      	movs	r3, #1
 801d47e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801d480:	e013      	b.n	801d4aa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 801d482:	4b4c      	ldr	r3, [pc, #304]	; (801d5b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 801d484:	681b      	ldr	r3, [r3, #0]
 801d486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d48a:	2b00      	cmp	r3, #0
 801d48c:	d10f      	bne.n	801d4ae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 801d48e:	4b49      	ldr	r3, [pc, #292]	; (801d5b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 801d490:	681b      	ldr	r3, [r3, #0]
 801d492:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801d496:	2b00      	cmp	r3, #0
 801d498:	d109      	bne.n	801d4ae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 801d49a:	2301      	movs	r3, #1
 801d49c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801d49e:	e006      	b.n	801d4ae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 801d4a0:	2301      	movs	r3, #1
 801d4a2:	73fb      	strb	r3, [r7, #15]
      break;
 801d4a4:	e004      	b.n	801d4b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 801d4a6:	bf00      	nop
 801d4a8:	e002      	b.n	801d4b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 801d4aa:	bf00      	nop
 801d4ac:	e000      	b.n	801d4b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 801d4ae:	bf00      	nop
    }

    if(status == HAL_OK)
 801d4b0:	7bfb      	ldrb	r3, [r7, #15]
 801d4b2:	2b00      	cmp	r3, #0
 801d4b4:	d10d      	bne.n	801d4d2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 801d4b6:	4b3f      	ldr	r3, [pc, #252]	; (801d5b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 801d4b8:	68db      	ldr	r3, [r3, #12]
 801d4ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 801d4be:	687b      	ldr	r3, [r7, #4]
 801d4c0:	6819      	ldr	r1, [r3, #0]
 801d4c2:	687b      	ldr	r3, [r7, #4]
 801d4c4:	685b      	ldr	r3, [r3, #4]
 801d4c6:	3b01      	subs	r3, #1
 801d4c8:	011b      	lsls	r3, r3, #4
 801d4ca:	430b      	orrs	r3, r1
 801d4cc:	4939      	ldr	r1, [pc, #228]	; (801d5b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 801d4ce:	4313      	orrs	r3, r2
 801d4d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 801d4d2:	7bfb      	ldrb	r3, [r7, #15]
 801d4d4:	2b00      	cmp	r3, #0
 801d4d6:	d167      	bne.n	801d5a8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 801d4d8:	4b36      	ldr	r3, [pc, #216]	; (801d5b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 801d4da:	681b      	ldr	r3, [r3, #0]
 801d4dc:	4a35      	ldr	r2, [pc, #212]	; (801d5b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 801d4de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801d4e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d4e4:	f7fd ff06 	bl	801b2f4 <HAL_GetTick>
 801d4e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 801d4ea:	e009      	b.n	801d500 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 801d4ec:	f7fd ff02 	bl	801b2f4 <HAL_GetTick>
 801d4f0:	4602      	mov	r2, r0
 801d4f2:	68bb      	ldr	r3, [r7, #8]
 801d4f4:	1ad3      	subs	r3, r2, r3
 801d4f6:	2b02      	cmp	r3, #2
 801d4f8:	d902      	bls.n	801d500 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 801d4fa:	2303      	movs	r3, #3
 801d4fc:	73fb      	strb	r3, [r7, #15]
        break;
 801d4fe:	e005      	b.n	801d50c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 801d500:	4b2c      	ldr	r3, [pc, #176]	; (801d5b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 801d502:	681b      	ldr	r3, [r3, #0]
 801d504:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d508:	2b00      	cmp	r3, #0
 801d50a:	d1ef      	bne.n	801d4ec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 801d50c:	7bfb      	ldrb	r3, [r7, #15]
 801d50e:	2b00      	cmp	r3, #0
 801d510:	d14a      	bne.n	801d5a8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 801d512:	683b      	ldr	r3, [r7, #0]
 801d514:	2b00      	cmp	r3, #0
 801d516:	d111      	bne.n	801d53c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 801d518:	4b26      	ldr	r3, [pc, #152]	; (801d5b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 801d51a:	695b      	ldr	r3, [r3, #20]
 801d51c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 801d520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d524:	687a      	ldr	r2, [r7, #4]
 801d526:	6892      	ldr	r2, [r2, #8]
 801d528:	0211      	lsls	r1, r2, #8
 801d52a:	687a      	ldr	r2, [r7, #4]
 801d52c:	68d2      	ldr	r2, [r2, #12]
 801d52e:	0912      	lsrs	r2, r2, #4
 801d530:	0452      	lsls	r2, r2, #17
 801d532:	430a      	orrs	r2, r1
 801d534:	491f      	ldr	r1, [pc, #124]	; (801d5b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 801d536:	4313      	orrs	r3, r2
 801d538:	614b      	str	r3, [r1, #20]
 801d53a:	e011      	b.n	801d560 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 801d53c:	4b1d      	ldr	r3, [pc, #116]	; (801d5b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 801d53e:	695b      	ldr	r3, [r3, #20]
 801d540:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 801d544:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 801d548:	687a      	ldr	r2, [r7, #4]
 801d54a:	6892      	ldr	r2, [r2, #8]
 801d54c:	0211      	lsls	r1, r2, #8
 801d54e:	687a      	ldr	r2, [r7, #4]
 801d550:	6912      	ldr	r2, [r2, #16]
 801d552:	0852      	lsrs	r2, r2, #1
 801d554:	3a01      	subs	r2, #1
 801d556:	0652      	lsls	r2, r2, #25
 801d558:	430a      	orrs	r2, r1
 801d55a:	4916      	ldr	r1, [pc, #88]	; (801d5b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 801d55c:	4313      	orrs	r3, r2
 801d55e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 801d560:	4b14      	ldr	r3, [pc, #80]	; (801d5b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 801d562:	681b      	ldr	r3, [r3, #0]
 801d564:	4a13      	ldr	r2, [pc, #76]	; (801d5b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 801d566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801d56a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d56c:	f7fd fec2 	bl	801b2f4 <HAL_GetTick>
 801d570:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 801d572:	e009      	b.n	801d588 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 801d574:	f7fd febe 	bl	801b2f4 <HAL_GetTick>
 801d578:	4602      	mov	r2, r0
 801d57a:	68bb      	ldr	r3, [r7, #8]
 801d57c:	1ad3      	subs	r3, r2, r3
 801d57e:	2b02      	cmp	r3, #2
 801d580:	d902      	bls.n	801d588 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 801d582:	2303      	movs	r3, #3
 801d584:	73fb      	strb	r3, [r7, #15]
          break;
 801d586:	e005      	b.n	801d594 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 801d588:	4b0a      	ldr	r3, [pc, #40]	; (801d5b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 801d58a:	681b      	ldr	r3, [r3, #0]
 801d58c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d590:	2b00      	cmp	r3, #0
 801d592:	d0ef      	beq.n	801d574 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 801d594:	7bfb      	ldrb	r3, [r7, #15]
 801d596:	2b00      	cmp	r3, #0
 801d598:	d106      	bne.n	801d5a8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 801d59a:	4b06      	ldr	r3, [pc, #24]	; (801d5b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 801d59c:	695a      	ldr	r2, [r3, #20]
 801d59e:	687b      	ldr	r3, [r7, #4]
 801d5a0:	695b      	ldr	r3, [r3, #20]
 801d5a2:	4904      	ldr	r1, [pc, #16]	; (801d5b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 801d5a4:	4313      	orrs	r3, r2
 801d5a6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 801d5a8:	7bfb      	ldrb	r3, [r7, #15]
}
 801d5aa:	4618      	mov	r0, r3
 801d5ac:	3710      	adds	r7, #16
 801d5ae:	46bd      	mov	sp, r7
 801d5b0:	bd80      	pop	{r7, pc}
 801d5b2:	bf00      	nop
 801d5b4:	40021000 	.word	0x40021000

0801d5b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801d5b8:	b580      	push	{r7, lr}
 801d5ba:	b082      	sub	sp, #8
 801d5bc:	af00      	add	r7, sp, #0
 801d5be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801d5c0:	687b      	ldr	r3, [r7, #4]
 801d5c2:	2b00      	cmp	r3, #0
 801d5c4:	d101      	bne.n	801d5ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801d5c6:	2301      	movs	r3, #1
 801d5c8:	e040      	b.n	801d64c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801d5ca:	687b      	ldr	r3, [r7, #4]
 801d5cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d5ce:	2b00      	cmp	r3, #0
 801d5d0:	d106      	bne.n	801d5e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801d5d2:	687b      	ldr	r3, [r7, #4]
 801d5d4:	2200      	movs	r2, #0
 801d5d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801d5da:	6878      	ldr	r0, [r7, #4]
 801d5dc:	f7fd fd74 	bl	801b0c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801d5e0:	687b      	ldr	r3, [r7, #4]
 801d5e2:	2224      	movs	r2, #36	; 0x24
 801d5e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 801d5e6:	687b      	ldr	r3, [r7, #4]
 801d5e8:	681b      	ldr	r3, [r3, #0]
 801d5ea:	681a      	ldr	r2, [r3, #0]
 801d5ec:	687b      	ldr	r3, [r7, #4]
 801d5ee:	681b      	ldr	r3, [r3, #0]
 801d5f0:	f022 0201 	bic.w	r2, r2, #1
 801d5f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801d5f6:	6878      	ldr	r0, [r7, #4]
 801d5f8:	f000 fb26 	bl	801dc48 <UART_SetConfig>
 801d5fc:	4603      	mov	r3, r0
 801d5fe:	2b01      	cmp	r3, #1
 801d600:	d101      	bne.n	801d606 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 801d602:	2301      	movs	r3, #1
 801d604:	e022      	b.n	801d64c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801d606:	687b      	ldr	r3, [r7, #4]
 801d608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d60a:	2b00      	cmp	r3, #0
 801d60c:	d002      	beq.n	801d614 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 801d60e:	6878      	ldr	r0, [r7, #4]
 801d610:	f000 fda4 	bl	801e15c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801d614:	687b      	ldr	r3, [r7, #4]
 801d616:	681b      	ldr	r3, [r3, #0]
 801d618:	685a      	ldr	r2, [r3, #4]
 801d61a:	687b      	ldr	r3, [r7, #4]
 801d61c:	681b      	ldr	r3, [r3, #0]
 801d61e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801d622:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801d624:	687b      	ldr	r3, [r7, #4]
 801d626:	681b      	ldr	r3, [r3, #0]
 801d628:	689a      	ldr	r2, [r3, #8]
 801d62a:	687b      	ldr	r3, [r7, #4]
 801d62c:	681b      	ldr	r3, [r3, #0]
 801d62e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801d632:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801d634:	687b      	ldr	r3, [r7, #4]
 801d636:	681b      	ldr	r3, [r3, #0]
 801d638:	681a      	ldr	r2, [r3, #0]
 801d63a:	687b      	ldr	r3, [r7, #4]
 801d63c:	681b      	ldr	r3, [r3, #0]
 801d63e:	f042 0201 	orr.w	r2, r2, #1
 801d642:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801d644:	6878      	ldr	r0, [r7, #4]
 801d646:	f000 fe2b 	bl	801e2a0 <UART_CheckIdleState>
 801d64a:	4603      	mov	r3, r0
}
 801d64c:	4618      	mov	r0, r3
 801d64e:	3708      	adds	r7, #8
 801d650:	46bd      	mov	sp, r7
 801d652:	bd80      	pop	{r7, pc}

0801d654 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801d654:	b580      	push	{r7, lr}
 801d656:	b08a      	sub	sp, #40	; 0x28
 801d658:	af02      	add	r7, sp, #8
 801d65a:	60f8      	str	r0, [r7, #12]
 801d65c:	60b9      	str	r1, [r7, #8]
 801d65e:	603b      	str	r3, [r7, #0]
 801d660:	4613      	mov	r3, r2
 801d662:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801d664:	68fb      	ldr	r3, [r7, #12]
 801d666:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d668:	2b20      	cmp	r3, #32
 801d66a:	f040 8082 	bne.w	801d772 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 801d66e:	68bb      	ldr	r3, [r7, #8]
 801d670:	2b00      	cmp	r3, #0
 801d672:	d002      	beq.n	801d67a <HAL_UART_Transmit+0x26>
 801d674:	88fb      	ldrh	r3, [r7, #6]
 801d676:	2b00      	cmp	r3, #0
 801d678:	d101      	bne.n	801d67e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801d67a:	2301      	movs	r3, #1
 801d67c:	e07a      	b.n	801d774 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 801d67e:	68fb      	ldr	r3, [r7, #12]
 801d680:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801d684:	2b01      	cmp	r3, #1
 801d686:	d101      	bne.n	801d68c <HAL_UART_Transmit+0x38>
 801d688:	2302      	movs	r3, #2
 801d68a:	e073      	b.n	801d774 <HAL_UART_Transmit+0x120>
 801d68c:	68fb      	ldr	r3, [r7, #12]
 801d68e:	2201      	movs	r2, #1
 801d690:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d694:	68fb      	ldr	r3, [r7, #12]
 801d696:	2200      	movs	r2, #0
 801d698:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801d69c:	68fb      	ldr	r3, [r7, #12]
 801d69e:	2221      	movs	r2, #33	; 0x21
 801d6a0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801d6a2:	f7fd fe27 	bl	801b2f4 <HAL_GetTick>
 801d6a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801d6a8:	68fb      	ldr	r3, [r7, #12]
 801d6aa:	88fa      	ldrh	r2, [r7, #6]
 801d6ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 801d6b0:	68fb      	ldr	r3, [r7, #12]
 801d6b2:	88fa      	ldrh	r2, [r7, #6]
 801d6b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d6b8:	68fb      	ldr	r3, [r7, #12]
 801d6ba:	689b      	ldr	r3, [r3, #8]
 801d6bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d6c0:	d108      	bne.n	801d6d4 <HAL_UART_Transmit+0x80>
 801d6c2:	68fb      	ldr	r3, [r7, #12]
 801d6c4:	691b      	ldr	r3, [r3, #16]
 801d6c6:	2b00      	cmp	r3, #0
 801d6c8:	d104      	bne.n	801d6d4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 801d6ca:	2300      	movs	r3, #0
 801d6cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801d6ce:	68bb      	ldr	r3, [r7, #8]
 801d6d0:	61bb      	str	r3, [r7, #24]
 801d6d2:	e003      	b.n	801d6dc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 801d6d4:	68bb      	ldr	r3, [r7, #8]
 801d6d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801d6d8:	2300      	movs	r3, #0
 801d6da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 801d6dc:	68fb      	ldr	r3, [r7, #12]
 801d6de:	2200      	movs	r2, #0
 801d6e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 801d6e4:	e02d      	b.n	801d742 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801d6e6:	683b      	ldr	r3, [r7, #0]
 801d6e8:	9300      	str	r3, [sp, #0]
 801d6ea:	697b      	ldr	r3, [r7, #20]
 801d6ec:	2200      	movs	r2, #0
 801d6ee:	2180      	movs	r1, #128	; 0x80
 801d6f0:	68f8      	ldr	r0, [r7, #12]
 801d6f2:	f000 fe1e 	bl	801e332 <UART_WaitOnFlagUntilTimeout>
 801d6f6:	4603      	mov	r3, r0
 801d6f8:	2b00      	cmp	r3, #0
 801d6fa:	d001      	beq.n	801d700 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 801d6fc:	2303      	movs	r3, #3
 801d6fe:	e039      	b.n	801d774 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 801d700:	69fb      	ldr	r3, [r7, #28]
 801d702:	2b00      	cmp	r3, #0
 801d704:	d10b      	bne.n	801d71e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801d706:	69bb      	ldr	r3, [r7, #24]
 801d708:	881a      	ldrh	r2, [r3, #0]
 801d70a:	68fb      	ldr	r3, [r7, #12]
 801d70c:	681b      	ldr	r3, [r3, #0]
 801d70e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801d712:	b292      	uxth	r2, r2
 801d714:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801d716:	69bb      	ldr	r3, [r7, #24]
 801d718:	3302      	adds	r3, #2
 801d71a:	61bb      	str	r3, [r7, #24]
 801d71c:	e008      	b.n	801d730 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801d71e:	69fb      	ldr	r3, [r7, #28]
 801d720:	781a      	ldrb	r2, [r3, #0]
 801d722:	68fb      	ldr	r3, [r7, #12]
 801d724:	681b      	ldr	r3, [r3, #0]
 801d726:	b292      	uxth	r2, r2
 801d728:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801d72a:	69fb      	ldr	r3, [r7, #28]
 801d72c:	3301      	adds	r3, #1
 801d72e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801d730:	68fb      	ldr	r3, [r7, #12]
 801d732:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801d736:	b29b      	uxth	r3, r3
 801d738:	3b01      	subs	r3, #1
 801d73a:	b29a      	uxth	r2, r3
 801d73c:	68fb      	ldr	r3, [r7, #12]
 801d73e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 801d742:	68fb      	ldr	r3, [r7, #12]
 801d744:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801d748:	b29b      	uxth	r3, r3
 801d74a:	2b00      	cmp	r3, #0
 801d74c:	d1cb      	bne.n	801d6e6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801d74e:	683b      	ldr	r3, [r7, #0]
 801d750:	9300      	str	r3, [sp, #0]
 801d752:	697b      	ldr	r3, [r7, #20]
 801d754:	2200      	movs	r2, #0
 801d756:	2140      	movs	r1, #64	; 0x40
 801d758:	68f8      	ldr	r0, [r7, #12]
 801d75a:	f000 fdea 	bl	801e332 <UART_WaitOnFlagUntilTimeout>
 801d75e:	4603      	mov	r3, r0
 801d760:	2b00      	cmp	r3, #0
 801d762:	d001      	beq.n	801d768 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 801d764:	2303      	movs	r3, #3
 801d766:	e005      	b.n	801d774 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801d768:	68fb      	ldr	r3, [r7, #12]
 801d76a:	2220      	movs	r2, #32
 801d76c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 801d76e:	2300      	movs	r3, #0
 801d770:	e000      	b.n	801d774 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 801d772:	2302      	movs	r3, #2
  }
}
 801d774:	4618      	mov	r0, r3
 801d776:	3720      	adds	r7, #32
 801d778:	46bd      	mov	sp, r7
 801d77a:	bd80      	pop	{r7, pc}

0801d77c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801d77c:	b580      	push	{r7, lr}
 801d77e:	b084      	sub	sp, #16
 801d780:	af00      	add	r7, sp, #0
 801d782:	60f8      	str	r0, [r7, #12]
 801d784:	60b9      	str	r1, [r7, #8]
 801d786:	4613      	mov	r3, r2
 801d788:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801d78a:	68fb      	ldr	r3, [r7, #12]
 801d78c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801d78e:	2b20      	cmp	r3, #32
 801d790:	d131      	bne.n	801d7f6 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 801d792:	68bb      	ldr	r3, [r7, #8]
 801d794:	2b00      	cmp	r3, #0
 801d796:	d002      	beq.n	801d79e <HAL_UART_Receive_IT+0x22>
 801d798:	88fb      	ldrh	r3, [r7, #6]
 801d79a:	2b00      	cmp	r3, #0
 801d79c:	d101      	bne.n	801d7a2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 801d79e:	2301      	movs	r3, #1
 801d7a0:	e02a      	b.n	801d7f8 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 801d7a2:	68fb      	ldr	r3, [r7, #12]
 801d7a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801d7a8:	2b01      	cmp	r3, #1
 801d7aa:	d101      	bne.n	801d7b0 <HAL_UART_Receive_IT+0x34>
 801d7ac:	2302      	movs	r3, #2
 801d7ae:	e023      	b.n	801d7f8 <HAL_UART_Receive_IT+0x7c>
 801d7b0:	68fb      	ldr	r3, [r7, #12]
 801d7b2:	2201      	movs	r2, #1
 801d7b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d7b8:	68fb      	ldr	r3, [r7, #12]
 801d7ba:	2200      	movs	r2, #0
 801d7bc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801d7be:	68fb      	ldr	r3, [r7, #12]
 801d7c0:	681b      	ldr	r3, [r3, #0]
 801d7c2:	4a0f      	ldr	r2, [pc, #60]	; (801d800 <HAL_UART_Receive_IT+0x84>)
 801d7c4:	4293      	cmp	r3, r2
 801d7c6:	d00e      	beq.n	801d7e6 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801d7c8:	68fb      	ldr	r3, [r7, #12]
 801d7ca:	681b      	ldr	r3, [r3, #0]
 801d7cc:	685b      	ldr	r3, [r3, #4]
 801d7ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801d7d2:	2b00      	cmp	r3, #0
 801d7d4:	d007      	beq.n	801d7e6 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801d7d6:	68fb      	ldr	r3, [r7, #12]
 801d7d8:	681b      	ldr	r3, [r3, #0]
 801d7da:	681a      	ldr	r2, [r3, #0]
 801d7dc:	68fb      	ldr	r3, [r7, #12]
 801d7de:	681b      	ldr	r3, [r3, #0]
 801d7e0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801d7e4:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 801d7e6:	88fb      	ldrh	r3, [r7, #6]
 801d7e8:	461a      	mov	r2, r3
 801d7ea:	68b9      	ldr	r1, [r7, #8]
 801d7ec:	68f8      	ldr	r0, [r7, #12]
 801d7ee:	f000 fe1d 	bl	801e42c <UART_Start_Receive_IT>
 801d7f2:	4603      	mov	r3, r0
 801d7f4:	e000      	b.n	801d7f8 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 801d7f6:	2302      	movs	r3, #2
  }
}
 801d7f8:	4618      	mov	r0, r3
 801d7fa:	3710      	adds	r7, #16
 801d7fc:	46bd      	mov	sp, r7
 801d7fe:	bd80      	pop	{r7, pc}
 801d800:	40008000 	.word	0x40008000

0801d804 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801d804:	b580      	push	{r7, lr}
 801d806:	b088      	sub	sp, #32
 801d808:	af00      	add	r7, sp, #0
 801d80a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801d80c:	687b      	ldr	r3, [r7, #4]
 801d80e:	681b      	ldr	r3, [r3, #0]
 801d810:	69db      	ldr	r3, [r3, #28]
 801d812:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801d814:	687b      	ldr	r3, [r7, #4]
 801d816:	681b      	ldr	r3, [r3, #0]
 801d818:	681b      	ldr	r3, [r3, #0]
 801d81a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801d81c:	687b      	ldr	r3, [r7, #4]
 801d81e:	681b      	ldr	r3, [r3, #0]
 801d820:	689b      	ldr	r3, [r3, #8]
 801d822:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801d824:	69fa      	ldr	r2, [r7, #28]
 801d826:	f640 030f 	movw	r3, #2063	; 0x80f
 801d82a:	4013      	ands	r3, r2
 801d82c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 801d82e:	693b      	ldr	r3, [r7, #16]
 801d830:	2b00      	cmp	r3, #0
 801d832:	d113      	bne.n	801d85c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801d834:	69fb      	ldr	r3, [r7, #28]
 801d836:	f003 0320 	and.w	r3, r3, #32
 801d83a:	2b00      	cmp	r3, #0
 801d83c:	d00e      	beq.n	801d85c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801d83e:	69bb      	ldr	r3, [r7, #24]
 801d840:	f003 0320 	and.w	r3, r3, #32
 801d844:	2b00      	cmp	r3, #0
 801d846:	d009      	beq.n	801d85c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 801d848:	687b      	ldr	r3, [r7, #4]
 801d84a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d84c:	2b00      	cmp	r3, #0
 801d84e:	f000 81ce 	beq.w	801dbee <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 801d852:	687b      	ldr	r3, [r7, #4]
 801d854:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d856:	6878      	ldr	r0, [r7, #4]
 801d858:	4798      	blx	r3
      }
      return;
 801d85a:	e1c8      	b.n	801dbee <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 801d85c:	693b      	ldr	r3, [r7, #16]
 801d85e:	2b00      	cmp	r3, #0
 801d860:	f000 80e3 	beq.w	801da2a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801d864:	697b      	ldr	r3, [r7, #20]
 801d866:	f003 0301 	and.w	r3, r3, #1
 801d86a:	2b00      	cmp	r3, #0
 801d86c:	d105      	bne.n	801d87a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801d86e:	69ba      	ldr	r2, [r7, #24]
 801d870:	4ba6      	ldr	r3, [pc, #664]	; (801db0c <HAL_UART_IRQHandler+0x308>)
 801d872:	4013      	ands	r3, r2
 801d874:	2b00      	cmp	r3, #0
 801d876:	f000 80d8 	beq.w	801da2a <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801d87a:	69fb      	ldr	r3, [r7, #28]
 801d87c:	f003 0301 	and.w	r3, r3, #1
 801d880:	2b00      	cmp	r3, #0
 801d882:	d010      	beq.n	801d8a6 <HAL_UART_IRQHandler+0xa2>
 801d884:	69bb      	ldr	r3, [r7, #24]
 801d886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d88a:	2b00      	cmp	r3, #0
 801d88c:	d00b      	beq.n	801d8a6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801d88e:	687b      	ldr	r3, [r7, #4]
 801d890:	681b      	ldr	r3, [r3, #0]
 801d892:	2201      	movs	r2, #1
 801d894:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801d896:	687b      	ldr	r3, [r7, #4]
 801d898:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801d89c:	f043 0201 	orr.w	r2, r3, #1
 801d8a0:	687b      	ldr	r3, [r7, #4]
 801d8a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801d8a6:	69fb      	ldr	r3, [r7, #28]
 801d8a8:	f003 0302 	and.w	r3, r3, #2
 801d8ac:	2b00      	cmp	r3, #0
 801d8ae:	d010      	beq.n	801d8d2 <HAL_UART_IRQHandler+0xce>
 801d8b0:	697b      	ldr	r3, [r7, #20]
 801d8b2:	f003 0301 	and.w	r3, r3, #1
 801d8b6:	2b00      	cmp	r3, #0
 801d8b8:	d00b      	beq.n	801d8d2 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801d8ba:	687b      	ldr	r3, [r7, #4]
 801d8bc:	681b      	ldr	r3, [r3, #0]
 801d8be:	2202      	movs	r2, #2
 801d8c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801d8c2:	687b      	ldr	r3, [r7, #4]
 801d8c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801d8c8:	f043 0204 	orr.w	r2, r3, #4
 801d8cc:	687b      	ldr	r3, [r7, #4]
 801d8ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801d8d2:	69fb      	ldr	r3, [r7, #28]
 801d8d4:	f003 0304 	and.w	r3, r3, #4
 801d8d8:	2b00      	cmp	r3, #0
 801d8da:	d010      	beq.n	801d8fe <HAL_UART_IRQHandler+0xfa>
 801d8dc:	697b      	ldr	r3, [r7, #20]
 801d8de:	f003 0301 	and.w	r3, r3, #1
 801d8e2:	2b00      	cmp	r3, #0
 801d8e4:	d00b      	beq.n	801d8fe <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801d8e6:	687b      	ldr	r3, [r7, #4]
 801d8e8:	681b      	ldr	r3, [r3, #0]
 801d8ea:	2204      	movs	r2, #4
 801d8ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801d8ee:	687b      	ldr	r3, [r7, #4]
 801d8f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801d8f4:	f043 0202 	orr.w	r2, r3, #2
 801d8f8:	687b      	ldr	r3, [r7, #4]
 801d8fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 801d8fe:	69fb      	ldr	r3, [r7, #28]
 801d900:	f003 0308 	and.w	r3, r3, #8
 801d904:	2b00      	cmp	r3, #0
 801d906:	d015      	beq.n	801d934 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801d908:	69bb      	ldr	r3, [r7, #24]
 801d90a:	f003 0320 	and.w	r3, r3, #32
 801d90e:	2b00      	cmp	r3, #0
 801d910:	d104      	bne.n	801d91c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801d912:	697b      	ldr	r3, [r7, #20]
 801d914:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801d918:	2b00      	cmp	r3, #0
 801d91a:	d00b      	beq.n	801d934 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801d91c:	687b      	ldr	r3, [r7, #4]
 801d91e:	681b      	ldr	r3, [r3, #0]
 801d920:	2208      	movs	r2, #8
 801d922:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801d924:	687b      	ldr	r3, [r7, #4]
 801d926:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801d92a:	f043 0208 	orr.w	r2, r3, #8
 801d92e:	687b      	ldr	r3, [r7, #4]
 801d930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801d934:	69fb      	ldr	r3, [r7, #28]
 801d936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801d93a:	2b00      	cmp	r3, #0
 801d93c:	d011      	beq.n	801d962 <HAL_UART_IRQHandler+0x15e>
 801d93e:	69bb      	ldr	r3, [r7, #24]
 801d940:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801d944:	2b00      	cmp	r3, #0
 801d946:	d00c      	beq.n	801d962 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801d948:	687b      	ldr	r3, [r7, #4]
 801d94a:	681b      	ldr	r3, [r3, #0]
 801d94c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801d950:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801d952:	687b      	ldr	r3, [r7, #4]
 801d954:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801d958:	f043 0220 	orr.w	r2, r3, #32
 801d95c:	687b      	ldr	r3, [r7, #4]
 801d95e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801d962:	687b      	ldr	r3, [r7, #4]
 801d964:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801d968:	2b00      	cmp	r3, #0
 801d96a:	f000 8142 	beq.w	801dbf2 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801d96e:	69fb      	ldr	r3, [r7, #28]
 801d970:	f003 0320 	and.w	r3, r3, #32
 801d974:	2b00      	cmp	r3, #0
 801d976:	d00c      	beq.n	801d992 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801d978:	69bb      	ldr	r3, [r7, #24]
 801d97a:	f003 0320 	and.w	r3, r3, #32
 801d97e:	2b00      	cmp	r3, #0
 801d980:	d007      	beq.n	801d992 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 801d982:	687b      	ldr	r3, [r7, #4]
 801d984:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d986:	2b00      	cmp	r3, #0
 801d988:	d003      	beq.n	801d992 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 801d98a:	687b      	ldr	r3, [r7, #4]
 801d98c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d98e:	6878      	ldr	r0, [r7, #4]
 801d990:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801d992:	687b      	ldr	r3, [r7, #4]
 801d994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801d998:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801d99a:	687b      	ldr	r3, [r7, #4]
 801d99c:	681b      	ldr	r3, [r3, #0]
 801d99e:	689b      	ldr	r3, [r3, #8]
 801d9a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d9a4:	2b40      	cmp	r3, #64	; 0x40
 801d9a6:	d004      	beq.n	801d9b2 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801d9a8:	68fb      	ldr	r3, [r7, #12]
 801d9aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801d9ae:	2b00      	cmp	r3, #0
 801d9b0:	d031      	beq.n	801da16 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801d9b2:	6878      	ldr	r0, [r7, #4]
 801d9b4:	f000 fdc2 	bl	801e53c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801d9b8:	687b      	ldr	r3, [r7, #4]
 801d9ba:	681b      	ldr	r3, [r3, #0]
 801d9bc:	689b      	ldr	r3, [r3, #8]
 801d9be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d9c2:	2b40      	cmp	r3, #64	; 0x40
 801d9c4:	d123      	bne.n	801da0e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801d9c6:	687b      	ldr	r3, [r7, #4]
 801d9c8:	681b      	ldr	r3, [r3, #0]
 801d9ca:	689a      	ldr	r2, [r3, #8]
 801d9cc:	687b      	ldr	r3, [r7, #4]
 801d9ce:	681b      	ldr	r3, [r3, #0]
 801d9d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d9d4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801d9d6:	687b      	ldr	r3, [r7, #4]
 801d9d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d9da:	2b00      	cmp	r3, #0
 801d9dc:	d013      	beq.n	801da06 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801d9de:	687b      	ldr	r3, [r7, #4]
 801d9e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d9e2:	4a4b      	ldr	r2, [pc, #300]	; (801db10 <HAL_UART_IRQHandler+0x30c>)
 801d9e4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801d9e6:	687b      	ldr	r3, [r7, #4]
 801d9e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d9ea:	4618      	mov	r0, r3
 801d9ec:	f7fd fe1b 	bl	801b626 <HAL_DMA_Abort_IT>
 801d9f0:	4603      	mov	r3, r0
 801d9f2:	2b00      	cmp	r3, #0
 801d9f4:	d017      	beq.n	801da26 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801d9f6:	687b      	ldr	r3, [r7, #4]
 801d9f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d9fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d9fc:	687a      	ldr	r2, [r7, #4]
 801d9fe:	6f12      	ldr	r2, [r2, #112]	; 0x70
 801da00:	4610      	mov	r0, r2
 801da02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801da04:	e00f      	b.n	801da26 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801da06:	6878      	ldr	r0, [r7, #4]
 801da08:	f000 f908 	bl	801dc1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801da0c:	e00b      	b.n	801da26 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801da0e:	6878      	ldr	r0, [r7, #4]
 801da10:	f000 f904 	bl	801dc1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801da14:	e007      	b.n	801da26 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801da16:	6878      	ldr	r0, [r7, #4]
 801da18:	f000 f900 	bl	801dc1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801da1c:	687b      	ldr	r3, [r7, #4]
 801da1e:	2200      	movs	r2, #0
 801da20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 801da24:	e0e5      	b.n	801dbf2 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801da26:	bf00      	nop
    return;
 801da28:	e0e3      	b.n	801dbf2 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801da2a:	687b      	ldr	r3, [r7, #4]
 801da2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801da2e:	2b01      	cmp	r3, #1
 801da30:	f040 80a9 	bne.w	801db86 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 801da34:	69fb      	ldr	r3, [r7, #28]
 801da36:	f003 0310 	and.w	r3, r3, #16
 801da3a:	2b00      	cmp	r3, #0
 801da3c:	f000 80a3 	beq.w	801db86 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 801da40:	69bb      	ldr	r3, [r7, #24]
 801da42:	f003 0310 	and.w	r3, r3, #16
 801da46:	2b00      	cmp	r3, #0
 801da48:	f000 809d 	beq.w	801db86 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801da4c:	687b      	ldr	r3, [r7, #4]
 801da4e:	681b      	ldr	r3, [r3, #0]
 801da50:	2210      	movs	r2, #16
 801da52:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801da54:	687b      	ldr	r3, [r7, #4]
 801da56:	681b      	ldr	r3, [r3, #0]
 801da58:	689b      	ldr	r3, [r3, #8]
 801da5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801da5e:	2b40      	cmp	r3, #64	; 0x40
 801da60:	d158      	bne.n	801db14 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801da62:	687b      	ldr	r3, [r7, #4]
 801da64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801da66:	681b      	ldr	r3, [r3, #0]
 801da68:	685b      	ldr	r3, [r3, #4]
 801da6a:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 801da6c:	893b      	ldrh	r3, [r7, #8]
 801da6e:	2b00      	cmp	r3, #0
 801da70:	f000 80c1 	beq.w	801dbf6 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 801da74:	687b      	ldr	r3, [r7, #4]
 801da76:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801da7a:	893a      	ldrh	r2, [r7, #8]
 801da7c:	429a      	cmp	r2, r3
 801da7e:	f080 80ba 	bcs.w	801dbf6 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801da82:	687b      	ldr	r3, [r7, #4]
 801da84:	893a      	ldrh	r2, [r7, #8]
 801da86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801da8a:	687b      	ldr	r3, [r7, #4]
 801da8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801da8e:	681b      	ldr	r3, [r3, #0]
 801da90:	681b      	ldr	r3, [r3, #0]
 801da92:	f003 0320 	and.w	r3, r3, #32
 801da96:	2b00      	cmp	r3, #0
 801da98:	d12a      	bne.n	801daf0 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801da9a:	687b      	ldr	r3, [r7, #4]
 801da9c:	681b      	ldr	r3, [r3, #0]
 801da9e:	681a      	ldr	r2, [r3, #0]
 801daa0:	687b      	ldr	r3, [r7, #4]
 801daa2:	681b      	ldr	r3, [r3, #0]
 801daa4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801daa8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801daaa:	687b      	ldr	r3, [r7, #4]
 801daac:	681b      	ldr	r3, [r3, #0]
 801daae:	689a      	ldr	r2, [r3, #8]
 801dab0:	687b      	ldr	r3, [r7, #4]
 801dab2:	681b      	ldr	r3, [r3, #0]
 801dab4:	f022 0201 	bic.w	r2, r2, #1
 801dab8:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801daba:	687b      	ldr	r3, [r7, #4]
 801dabc:	681b      	ldr	r3, [r3, #0]
 801dabe:	689a      	ldr	r2, [r3, #8]
 801dac0:	687b      	ldr	r3, [r7, #4]
 801dac2:	681b      	ldr	r3, [r3, #0]
 801dac4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801dac8:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801daca:	687b      	ldr	r3, [r7, #4]
 801dacc:	2220      	movs	r2, #32
 801dace:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801dad0:	687b      	ldr	r3, [r7, #4]
 801dad2:	2200      	movs	r2, #0
 801dad4:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801dad6:	687b      	ldr	r3, [r7, #4]
 801dad8:	681b      	ldr	r3, [r3, #0]
 801dada:	681a      	ldr	r2, [r3, #0]
 801dadc:	687b      	ldr	r3, [r7, #4]
 801dade:	681b      	ldr	r3, [r3, #0]
 801dae0:	f022 0210 	bic.w	r2, r2, #16
 801dae4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801dae6:	687b      	ldr	r3, [r7, #4]
 801dae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801daea:	4618      	mov	r0, r3
 801daec:	f7fd fd5d 	bl	801b5aa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801daf0:	687b      	ldr	r3, [r7, #4]
 801daf2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801daf6:	687b      	ldr	r3, [r7, #4]
 801daf8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801dafc:	b29b      	uxth	r3, r3
 801dafe:	1ad3      	subs	r3, r2, r3
 801db00:	b29b      	uxth	r3, r3
 801db02:	4619      	mov	r1, r3
 801db04:	6878      	ldr	r0, [r7, #4]
 801db06:	f000 f893 	bl	801dc30 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 801db0a:	e074      	b.n	801dbf6 <HAL_UART_IRQHandler+0x3f2>
 801db0c:	04000120 	.word	0x04000120
 801db10:	0801e59b 	.word	0x0801e59b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801db14:	687b      	ldr	r3, [r7, #4]
 801db16:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801db1a:	687b      	ldr	r3, [r7, #4]
 801db1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801db20:	b29b      	uxth	r3, r3
 801db22:	1ad3      	subs	r3, r2, r3
 801db24:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 801db26:	687b      	ldr	r3, [r7, #4]
 801db28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801db2c:	b29b      	uxth	r3, r3
 801db2e:	2b00      	cmp	r3, #0
 801db30:	d063      	beq.n	801dbfa <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 801db32:	897b      	ldrh	r3, [r7, #10]
 801db34:	2b00      	cmp	r3, #0
 801db36:	d060      	beq.n	801dbfa <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801db38:	687b      	ldr	r3, [r7, #4]
 801db3a:	681b      	ldr	r3, [r3, #0]
 801db3c:	681a      	ldr	r2, [r3, #0]
 801db3e:	687b      	ldr	r3, [r7, #4]
 801db40:	681b      	ldr	r3, [r3, #0]
 801db42:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801db46:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801db48:	687b      	ldr	r3, [r7, #4]
 801db4a:	681b      	ldr	r3, [r3, #0]
 801db4c:	689a      	ldr	r2, [r3, #8]
 801db4e:	687b      	ldr	r3, [r7, #4]
 801db50:	681b      	ldr	r3, [r3, #0]
 801db52:	f022 0201 	bic.w	r2, r2, #1
 801db56:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801db58:	687b      	ldr	r3, [r7, #4]
 801db5a:	2220      	movs	r2, #32
 801db5c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801db5e:	687b      	ldr	r3, [r7, #4]
 801db60:	2200      	movs	r2, #0
 801db62:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801db64:	687b      	ldr	r3, [r7, #4]
 801db66:	2200      	movs	r2, #0
 801db68:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801db6a:	687b      	ldr	r3, [r7, #4]
 801db6c:	681b      	ldr	r3, [r3, #0]
 801db6e:	681a      	ldr	r2, [r3, #0]
 801db70:	687b      	ldr	r3, [r7, #4]
 801db72:	681b      	ldr	r3, [r3, #0]
 801db74:	f022 0210 	bic.w	r2, r2, #16
 801db78:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801db7a:	897b      	ldrh	r3, [r7, #10]
 801db7c:	4619      	mov	r1, r3
 801db7e:	6878      	ldr	r0, [r7, #4]
 801db80:	f000 f856 	bl	801dc30 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 801db84:	e039      	b.n	801dbfa <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801db86:	69fb      	ldr	r3, [r7, #28]
 801db88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801db8c:	2b00      	cmp	r3, #0
 801db8e:	d00d      	beq.n	801dbac <HAL_UART_IRQHandler+0x3a8>
 801db90:	697b      	ldr	r3, [r7, #20]
 801db92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801db96:	2b00      	cmp	r3, #0
 801db98:	d008      	beq.n	801dbac <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801db9a:	687b      	ldr	r3, [r7, #4]
 801db9c:	681b      	ldr	r3, [r3, #0]
 801db9e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801dba2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801dba4:	6878      	ldr	r0, [r7, #4]
 801dba6:	f000 fdff 	bl	801e7a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801dbaa:	e029      	b.n	801dc00 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 801dbac:	69fb      	ldr	r3, [r7, #28]
 801dbae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801dbb2:	2b00      	cmp	r3, #0
 801dbb4:	d00d      	beq.n	801dbd2 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801dbb6:	69bb      	ldr	r3, [r7, #24]
 801dbb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801dbbc:	2b00      	cmp	r3, #0
 801dbbe:	d008      	beq.n	801dbd2 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 801dbc0:	687b      	ldr	r3, [r7, #4]
 801dbc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801dbc4:	2b00      	cmp	r3, #0
 801dbc6:	d01a      	beq.n	801dbfe <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 801dbc8:	687b      	ldr	r3, [r7, #4]
 801dbca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801dbcc:	6878      	ldr	r0, [r7, #4]
 801dbce:	4798      	blx	r3
    }
    return;
 801dbd0:	e015      	b.n	801dbfe <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801dbd2:	69fb      	ldr	r3, [r7, #28]
 801dbd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801dbd8:	2b00      	cmp	r3, #0
 801dbda:	d011      	beq.n	801dc00 <HAL_UART_IRQHandler+0x3fc>
 801dbdc:	69bb      	ldr	r3, [r7, #24]
 801dbde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801dbe2:	2b00      	cmp	r3, #0
 801dbe4:	d00c      	beq.n	801dc00 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 801dbe6:	6878      	ldr	r0, [r7, #4]
 801dbe8:	f000 fced 	bl	801e5c6 <UART_EndTransmit_IT>
    return;
 801dbec:	e008      	b.n	801dc00 <HAL_UART_IRQHandler+0x3fc>
      return;
 801dbee:	bf00      	nop
 801dbf0:	e006      	b.n	801dc00 <HAL_UART_IRQHandler+0x3fc>
    return;
 801dbf2:	bf00      	nop
 801dbf4:	e004      	b.n	801dc00 <HAL_UART_IRQHandler+0x3fc>
      return;
 801dbf6:	bf00      	nop
 801dbf8:	e002      	b.n	801dc00 <HAL_UART_IRQHandler+0x3fc>
      return;
 801dbfa:	bf00      	nop
 801dbfc:	e000      	b.n	801dc00 <HAL_UART_IRQHandler+0x3fc>
    return;
 801dbfe:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 801dc00:	3720      	adds	r7, #32
 801dc02:	46bd      	mov	sp, r7
 801dc04:	bd80      	pop	{r7, pc}
 801dc06:	bf00      	nop

0801dc08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801dc08:	b480      	push	{r7}
 801dc0a:	b083      	sub	sp, #12
 801dc0c:	af00      	add	r7, sp, #0
 801dc0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801dc10:	bf00      	nop
 801dc12:	370c      	adds	r7, #12
 801dc14:	46bd      	mov	sp, r7
 801dc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc1a:	4770      	bx	lr

0801dc1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801dc1c:	b480      	push	{r7}
 801dc1e:	b083      	sub	sp, #12
 801dc20:	af00      	add	r7, sp, #0
 801dc22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801dc24:	bf00      	nop
 801dc26:	370c      	adds	r7, #12
 801dc28:	46bd      	mov	sp, r7
 801dc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc2e:	4770      	bx	lr

0801dc30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801dc30:	b480      	push	{r7}
 801dc32:	b083      	sub	sp, #12
 801dc34:	af00      	add	r7, sp, #0
 801dc36:	6078      	str	r0, [r7, #4]
 801dc38:	460b      	mov	r3, r1
 801dc3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801dc3c:	bf00      	nop
 801dc3e:	370c      	adds	r7, #12
 801dc40:	46bd      	mov	sp, r7
 801dc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc46:	4770      	bx	lr

0801dc48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801dc48:	b5b0      	push	{r4, r5, r7, lr}
 801dc4a:	b088      	sub	sp, #32
 801dc4c:	af00      	add	r7, sp, #0
 801dc4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801dc50:	2300      	movs	r3, #0
 801dc52:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801dc54:	687b      	ldr	r3, [r7, #4]
 801dc56:	689a      	ldr	r2, [r3, #8]
 801dc58:	687b      	ldr	r3, [r7, #4]
 801dc5a:	691b      	ldr	r3, [r3, #16]
 801dc5c:	431a      	orrs	r2, r3
 801dc5e:	687b      	ldr	r3, [r7, #4]
 801dc60:	695b      	ldr	r3, [r3, #20]
 801dc62:	431a      	orrs	r2, r3
 801dc64:	687b      	ldr	r3, [r7, #4]
 801dc66:	69db      	ldr	r3, [r3, #28]
 801dc68:	4313      	orrs	r3, r2
 801dc6a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801dc6c:	687b      	ldr	r3, [r7, #4]
 801dc6e:	681b      	ldr	r3, [r3, #0]
 801dc70:	681a      	ldr	r2, [r3, #0]
 801dc72:	4bad      	ldr	r3, [pc, #692]	; (801df28 <UART_SetConfig+0x2e0>)
 801dc74:	4013      	ands	r3, r2
 801dc76:	687a      	ldr	r2, [r7, #4]
 801dc78:	6812      	ldr	r2, [r2, #0]
 801dc7a:	69f9      	ldr	r1, [r7, #28]
 801dc7c:	430b      	orrs	r3, r1
 801dc7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801dc80:	687b      	ldr	r3, [r7, #4]
 801dc82:	681b      	ldr	r3, [r3, #0]
 801dc84:	685b      	ldr	r3, [r3, #4]
 801dc86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801dc8a:	687b      	ldr	r3, [r7, #4]
 801dc8c:	68da      	ldr	r2, [r3, #12]
 801dc8e:	687b      	ldr	r3, [r7, #4]
 801dc90:	681b      	ldr	r3, [r3, #0]
 801dc92:	430a      	orrs	r2, r1
 801dc94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801dc96:	687b      	ldr	r3, [r7, #4]
 801dc98:	699b      	ldr	r3, [r3, #24]
 801dc9a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801dc9c:	687b      	ldr	r3, [r7, #4]
 801dc9e:	681b      	ldr	r3, [r3, #0]
 801dca0:	4aa2      	ldr	r2, [pc, #648]	; (801df2c <UART_SetConfig+0x2e4>)
 801dca2:	4293      	cmp	r3, r2
 801dca4:	d004      	beq.n	801dcb0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801dca6:	687b      	ldr	r3, [r7, #4]
 801dca8:	6a1b      	ldr	r3, [r3, #32]
 801dcaa:	69fa      	ldr	r2, [r7, #28]
 801dcac:	4313      	orrs	r3, r2
 801dcae:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801dcb0:	687b      	ldr	r3, [r7, #4]
 801dcb2:	681b      	ldr	r3, [r3, #0]
 801dcb4:	689b      	ldr	r3, [r3, #8]
 801dcb6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 801dcba:	687b      	ldr	r3, [r7, #4]
 801dcbc:	681b      	ldr	r3, [r3, #0]
 801dcbe:	69fa      	ldr	r2, [r7, #28]
 801dcc0:	430a      	orrs	r2, r1
 801dcc2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801dcc4:	687b      	ldr	r3, [r7, #4]
 801dcc6:	681b      	ldr	r3, [r3, #0]
 801dcc8:	4a99      	ldr	r2, [pc, #612]	; (801df30 <UART_SetConfig+0x2e8>)
 801dcca:	4293      	cmp	r3, r2
 801dccc:	d121      	bne.n	801dd12 <UART_SetConfig+0xca>
 801dcce:	4b99      	ldr	r3, [pc, #612]	; (801df34 <UART_SetConfig+0x2ec>)
 801dcd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801dcd4:	f003 0303 	and.w	r3, r3, #3
 801dcd8:	2b03      	cmp	r3, #3
 801dcda:	d817      	bhi.n	801dd0c <UART_SetConfig+0xc4>
 801dcdc:	a201      	add	r2, pc, #4	; (adr r2, 801dce4 <UART_SetConfig+0x9c>)
 801dcde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dce2:	bf00      	nop
 801dce4:	0801dcf5 	.word	0x0801dcf5
 801dce8:	0801dd01 	.word	0x0801dd01
 801dcec:	0801dcfb 	.word	0x0801dcfb
 801dcf0:	0801dd07 	.word	0x0801dd07
 801dcf4:	2301      	movs	r3, #1
 801dcf6:	76fb      	strb	r3, [r7, #27]
 801dcf8:	e0e7      	b.n	801deca <UART_SetConfig+0x282>
 801dcfa:	2302      	movs	r3, #2
 801dcfc:	76fb      	strb	r3, [r7, #27]
 801dcfe:	e0e4      	b.n	801deca <UART_SetConfig+0x282>
 801dd00:	2304      	movs	r3, #4
 801dd02:	76fb      	strb	r3, [r7, #27]
 801dd04:	e0e1      	b.n	801deca <UART_SetConfig+0x282>
 801dd06:	2308      	movs	r3, #8
 801dd08:	76fb      	strb	r3, [r7, #27]
 801dd0a:	e0de      	b.n	801deca <UART_SetConfig+0x282>
 801dd0c:	2310      	movs	r3, #16
 801dd0e:	76fb      	strb	r3, [r7, #27]
 801dd10:	e0db      	b.n	801deca <UART_SetConfig+0x282>
 801dd12:	687b      	ldr	r3, [r7, #4]
 801dd14:	681b      	ldr	r3, [r3, #0]
 801dd16:	4a88      	ldr	r2, [pc, #544]	; (801df38 <UART_SetConfig+0x2f0>)
 801dd18:	4293      	cmp	r3, r2
 801dd1a:	d132      	bne.n	801dd82 <UART_SetConfig+0x13a>
 801dd1c:	4b85      	ldr	r3, [pc, #532]	; (801df34 <UART_SetConfig+0x2ec>)
 801dd1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801dd22:	f003 030c 	and.w	r3, r3, #12
 801dd26:	2b0c      	cmp	r3, #12
 801dd28:	d828      	bhi.n	801dd7c <UART_SetConfig+0x134>
 801dd2a:	a201      	add	r2, pc, #4	; (adr r2, 801dd30 <UART_SetConfig+0xe8>)
 801dd2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dd30:	0801dd65 	.word	0x0801dd65
 801dd34:	0801dd7d 	.word	0x0801dd7d
 801dd38:	0801dd7d 	.word	0x0801dd7d
 801dd3c:	0801dd7d 	.word	0x0801dd7d
 801dd40:	0801dd71 	.word	0x0801dd71
 801dd44:	0801dd7d 	.word	0x0801dd7d
 801dd48:	0801dd7d 	.word	0x0801dd7d
 801dd4c:	0801dd7d 	.word	0x0801dd7d
 801dd50:	0801dd6b 	.word	0x0801dd6b
 801dd54:	0801dd7d 	.word	0x0801dd7d
 801dd58:	0801dd7d 	.word	0x0801dd7d
 801dd5c:	0801dd7d 	.word	0x0801dd7d
 801dd60:	0801dd77 	.word	0x0801dd77
 801dd64:	2300      	movs	r3, #0
 801dd66:	76fb      	strb	r3, [r7, #27]
 801dd68:	e0af      	b.n	801deca <UART_SetConfig+0x282>
 801dd6a:	2302      	movs	r3, #2
 801dd6c:	76fb      	strb	r3, [r7, #27]
 801dd6e:	e0ac      	b.n	801deca <UART_SetConfig+0x282>
 801dd70:	2304      	movs	r3, #4
 801dd72:	76fb      	strb	r3, [r7, #27]
 801dd74:	e0a9      	b.n	801deca <UART_SetConfig+0x282>
 801dd76:	2308      	movs	r3, #8
 801dd78:	76fb      	strb	r3, [r7, #27]
 801dd7a:	e0a6      	b.n	801deca <UART_SetConfig+0x282>
 801dd7c:	2310      	movs	r3, #16
 801dd7e:	76fb      	strb	r3, [r7, #27]
 801dd80:	e0a3      	b.n	801deca <UART_SetConfig+0x282>
 801dd82:	687b      	ldr	r3, [r7, #4]
 801dd84:	681b      	ldr	r3, [r3, #0]
 801dd86:	4a6d      	ldr	r2, [pc, #436]	; (801df3c <UART_SetConfig+0x2f4>)
 801dd88:	4293      	cmp	r3, r2
 801dd8a:	d120      	bne.n	801ddce <UART_SetConfig+0x186>
 801dd8c:	4b69      	ldr	r3, [pc, #420]	; (801df34 <UART_SetConfig+0x2ec>)
 801dd8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801dd92:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801dd96:	2b30      	cmp	r3, #48	; 0x30
 801dd98:	d013      	beq.n	801ddc2 <UART_SetConfig+0x17a>
 801dd9a:	2b30      	cmp	r3, #48	; 0x30
 801dd9c:	d814      	bhi.n	801ddc8 <UART_SetConfig+0x180>
 801dd9e:	2b20      	cmp	r3, #32
 801dda0:	d009      	beq.n	801ddb6 <UART_SetConfig+0x16e>
 801dda2:	2b20      	cmp	r3, #32
 801dda4:	d810      	bhi.n	801ddc8 <UART_SetConfig+0x180>
 801dda6:	2b00      	cmp	r3, #0
 801dda8:	d002      	beq.n	801ddb0 <UART_SetConfig+0x168>
 801ddaa:	2b10      	cmp	r3, #16
 801ddac:	d006      	beq.n	801ddbc <UART_SetConfig+0x174>
 801ddae:	e00b      	b.n	801ddc8 <UART_SetConfig+0x180>
 801ddb0:	2300      	movs	r3, #0
 801ddb2:	76fb      	strb	r3, [r7, #27]
 801ddb4:	e089      	b.n	801deca <UART_SetConfig+0x282>
 801ddb6:	2302      	movs	r3, #2
 801ddb8:	76fb      	strb	r3, [r7, #27]
 801ddba:	e086      	b.n	801deca <UART_SetConfig+0x282>
 801ddbc:	2304      	movs	r3, #4
 801ddbe:	76fb      	strb	r3, [r7, #27]
 801ddc0:	e083      	b.n	801deca <UART_SetConfig+0x282>
 801ddc2:	2308      	movs	r3, #8
 801ddc4:	76fb      	strb	r3, [r7, #27]
 801ddc6:	e080      	b.n	801deca <UART_SetConfig+0x282>
 801ddc8:	2310      	movs	r3, #16
 801ddca:	76fb      	strb	r3, [r7, #27]
 801ddcc:	e07d      	b.n	801deca <UART_SetConfig+0x282>
 801ddce:	687b      	ldr	r3, [r7, #4]
 801ddd0:	681b      	ldr	r3, [r3, #0]
 801ddd2:	4a5b      	ldr	r2, [pc, #364]	; (801df40 <UART_SetConfig+0x2f8>)
 801ddd4:	4293      	cmp	r3, r2
 801ddd6:	d120      	bne.n	801de1a <UART_SetConfig+0x1d2>
 801ddd8:	4b56      	ldr	r3, [pc, #344]	; (801df34 <UART_SetConfig+0x2ec>)
 801ddda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ddde:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801dde2:	2bc0      	cmp	r3, #192	; 0xc0
 801dde4:	d013      	beq.n	801de0e <UART_SetConfig+0x1c6>
 801dde6:	2bc0      	cmp	r3, #192	; 0xc0
 801dde8:	d814      	bhi.n	801de14 <UART_SetConfig+0x1cc>
 801ddea:	2b80      	cmp	r3, #128	; 0x80
 801ddec:	d009      	beq.n	801de02 <UART_SetConfig+0x1ba>
 801ddee:	2b80      	cmp	r3, #128	; 0x80
 801ddf0:	d810      	bhi.n	801de14 <UART_SetConfig+0x1cc>
 801ddf2:	2b00      	cmp	r3, #0
 801ddf4:	d002      	beq.n	801ddfc <UART_SetConfig+0x1b4>
 801ddf6:	2b40      	cmp	r3, #64	; 0x40
 801ddf8:	d006      	beq.n	801de08 <UART_SetConfig+0x1c0>
 801ddfa:	e00b      	b.n	801de14 <UART_SetConfig+0x1cc>
 801ddfc:	2300      	movs	r3, #0
 801ddfe:	76fb      	strb	r3, [r7, #27]
 801de00:	e063      	b.n	801deca <UART_SetConfig+0x282>
 801de02:	2302      	movs	r3, #2
 801de04:	76fb      	strb	r3, [r7, #27]
 801de06:	e060      	b.n	801deca <UART_SetConfig+0x282>
 801de08:	2304      	movs	r3, #4
 801de0a:	76fb      	strb	r3, [r7, #27]
 801de0c:	e05d      	b.n	801deca <UART_SetConfig+0x282>
 801de0e:	2308      	movs	r3, #8
 801de10:	76fb      	strb	r3, [r7, #27]
 801de12:	e05a      	b.n	801deca <UART_SetConfig+0x282>
 801de14:	2310      	movs	r3, #16
 801de16:	76fb      	strb	r3, [r7, #27]
 801de18:	e057      	b.n	801deca <UART_SetConfig+0x282>
 801de1a:	687b      	ldr	r3, [r7, #4]
 801de1c:	681b      	ldr	r3, [r3, #0]
 801de1e:	4a49      	ldr	r2, [pc, #292]	; (801df44 <UART_SetConfig+0x2fc>)
 801de20:	4293      	cmp	r3, r2
 801de22:	d125      	bne.n	801de70 <UART_SetConfig+0x228>
 801de24:	4b43      	ldr	r3, [pc, #268]	; (801df34 <UART_SetConfig+0x2ec>)
 801de26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801de2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801de2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801de32:	d017      	beq.n	801de64 <UART_SetConfig+0x21c>
 801de34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801de38:	d817      	bhi.n	801de6a <UART_SetConfig+0x222>
 801de3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801de3e:	d00b      	beq.n	801de58 <UART_SetConfig+0x210>
 801de40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801de44:	d811      	bhi.n	801de6a <UART_SetConfig+0x222>
 801de46:	2b00      	cmp	r3, #0
 801de48:	d003      	beq.n	801de52 <UART_SetConfig+0x20a>
 801de4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801de4e:	d006      	beq.n	801de5e <UART_SetConfig+0x216>
 801de50:	e00b      	b.n	801de6a <UART_SetConfig+0x222>
 801de52:	2300      	movs	r3, #0
 801de54:	76fb      	strb	r3, [r7, #27]
 801de56:	e038      	b.n	801deca <UART_SetConfig+0x282>
 801de58:	2302      	movs	r3, #2
 801de5a:	76fb      	strb	r3, [r7, #27]
 801de5c:	e035      	b.n	801deca <UART_SetConfig+0x282>
 801de5e:	2304      	movs	r3, #4
 801de60:	76fb      	strb	r3, [r7, #27]
 801de62:	e032      	b.n	801deca <UART_SetConfig+0x282>
 801de64:	2308      	movs	r3, #8
 801de66:	76fb      	strb	r3, [r7, #27]
 801de68:	e02f      	b.n	801deca <UART_SetConfig+0x282>
 801de6a:	2310      	movs	r3, #16
 801de6c:	76fb      	strb	r3, [r7, #27]
 801de6e:	e02c      	b.n	801deca <UART_SetConfig+0x282>
 801de70:	687b      	ldr	r3, [r7, #4]
 801de72:	681b      	ldr	r3, [r3, #0]
 801de74:	4a2d      	ldr	r2, [pc, #180]	; (801df2c <UART_SetConfig+0x2e4>)
 801de76:	4293      	cmp	r3, r2
 801de78:	d125      	bne.n	801dec6 <UART_SetConfig+0x27e>
 801de7a:	4b2e      	ldr	r3, [pc, #184]	; (801df34 <UART_SetConfig+0x2ec>)
 801de7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801de80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801de84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801de88:	d017      	beq.n	801deba <UART_SetConfig+0x272>
 801de8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801de8e:	d817      	bhi.n	801dec0 <UART_SetConfig+0x278>
 801de90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801de94:	d00b      	beq.n	801deae <UART_SetConfig+0x266>
 801de96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801de9a:	d811      	bhi.n	801dec0 <UART_SetConfig+0x278>
 801de9c:	2b00      	cmp	r3, #0
 801de9e:	d003      	beq.n	801dea8 <UART_SetConfig+0x260>
 801dea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801dea4:	d006      	beq.n	801deb4 <UART_SetConfig+0x26c>
 801dea6:	e00b      	b.n	801dec0 <UART_SetConfig+0x278>
 801dea8:	2300      	movs	r3, #0
 801deaa:	76fb      	strb	r3, [r7, #27]
 801deac:	e00d      	b.n	801deca <UART_SetConfig+0x282>
 801deae:	2302      	movs	r3, #2
 801deb0:	76fb      	strb	r3, [r7, #27]
 801deb2:	e00a      	b.n	801deca <UART_SetConfig+0x282>
 801deb4:	2304      	movs	r3, #4
 801deb6:	76fb      	strb	r3, [r7, #27]
 801deb8:	e007      	b.n	801deca <UART_SetConfig+0x282>
 801deba:	2308      	movs	r3, #8
 801debc:	76fb      	strb	r3, [r7, #27]
 801debe:	e004      	b.n	801deca <UART_SetConfig+0x282>
 801dec0:	2310      	movs	r3, #16
 801dec2:	76fb      	strb	r3, [r7, #27]
 801dec4:	e001      	b.n	801deca <UART_SetConfig+0x282>
 801dec6:	2310      	movs	r3, #16
 801dec8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801deca:	687b      	ldr	r3, [r7, #4]
 801decc:	681b      	ldr	r3, [r3, #0]
 801dece:	4a17      	ldr	r2, [pc, #92]	; (801df2c <UART_SetConfig+0x2e4>)
 801ded0:	4293      	cmp	r3, r2
 801ded2:	f040 8087 	bne.w	801dfe4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801ded6:	7efb      	ldrb	r3, [r7, #27]
 801ded8:	2b08      	cmp	r3, #8
 801deda:	d837      	bhi.n	801df4c <UART_SetConfig+0x304>
 801dedc:	a201      	add	r2, pc, #4	; (adr r2, 801dee4 <UART_SetConfig+0x29c>)
 801dede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dee2:	bf00      	nop
 801dee4:	0801df09 	.word	0x0801df09
 801dee8:	0801df4d 	.word	0x0801df4d
 801deec:	0801df11 	.word	0x0801df11
 801def0:	0801df4d 	.word	0x0801df4d
 801def4:	0801df17 	.word	0x0801df17
 801def8:	0801df4d 	.word	0x0801df4d
 801defc:	0801df4d 	.word	0x0801df4d
 801df00:	0801df4d 	.word	0x0801df4d
 801df04:	0801df1f 	.word	0x0801df1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801df08:	f7fe fe0e 	bl	801cb28 <HAL_RCC_GetPCLK1Freq>
 801df0c:	6178      	str	r0, [r7, #20]
        break;
 801df0e:	e022      	b.n	801df56 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801df10:	4b0d      	ldr	r3, [pc, #52]	; (801df48 <UART_SetConfig+0x300>)
 801df12:	617b      	str	r3, [r7, #20]
        break;
 801df14:	e01f      	b.n	801df56 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801df16:	f7fe fd6f 	bl	801c9f8 <HAL_RCC_GetSysClockFreq>
 801df1a:	6178      	str	r0, [r7, #20]
        break;
 801df1c:	e01b      	b.n	801df56 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801df1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801df22:	617b      	str	r3, [r7, #20]
        break;
 801df24:	e017      	b.n	801df56 <UART_SetConfig+0x30e>
 801df26:	bf00      	nop
 801df28:	efff69f3 	.word	0xefff69f3
 801df2c:	40008000 	.word	0x40008000
 801df30:	40013800 	.word	0x40013800
 801df34:	40021000 	.word	0x40021000
 801df38:	40004400 	.word	0x40004400
 801df3c:	40004800 	.word	0x40004800
 801df40:	40004c00 	.word	0x40004c00
 801df44:	40005000 	.word	0x40005000
 801df48:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 801df4c:	2300      	movs	r3, #0
 801df4e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 801df50:	2301      	movs	r3, #1
 801df52:	76bb      	strb	r3, [r7, #26]
        break;
 801df54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801df56:	697b      	ldr	r3, [r7, #20]
 801df58:	2b00      	cmp	r3, #0
 801df5a:	f000 80f1 	beq.w	801e140 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801df5e:	687b      	ldr	r3, [r7, #4]
 801df60:	685a      	ldr	r2, [r3, #4]
 801df62:	4613      	mov	r3, r2
 801df64:	005b      	lsls	r3, r3, #1
 801df66:	4413      	add	r3, r2
 801df68:	697a      	ldr	r2, [r7, #20]
 801df6a:	429a      	cmp	r2, r3
 801df6c:	d305      	bcc.n	801df7a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 801df6e:	687b      	ldr	r3, [r7, #4]
 801df70:	685b      	ldr	r3, [r3, #4]
 801df72:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801df74:	697a      	ldr	r2, [r7, #20]
 801df76:	429a      	cmp	r2, r3
 801df78:	d902      	bls.n	801df80 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 801df7a:	2301      	movs	r3, #1
 801df7c:	76bb      	strb	r3, [r7, #26]
 801df7e:	e0df      	b.n	801e140 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801df80:	697b      	ldr	r3, [r7, #20]
 801df82:	4618      	mov	r0, r3
 801df84:	f04f 0100 	mov.w	r1, #0
 801df88:	f04f 0200 	mov.w	r2, #0
 801df8c:	f04f 0300 	mov.w	r3, #0
 801df90:	020b      	lsls	r3, r1, #8
 801df92:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801df96:	0202      	lsls	r2, r0, #8
 801df98:	6879      	ldr	r1, [r7, #4]
 801df9a:	6849      	ldr	r1, [r1, #4]
 801df9c:	0849      	lsrs	r1, r1, #1
 801df9e:	4608      	mov	r0, r1
 801dfa0:	f04f 0100 	mov.w	r1, #0
 801dfa4:	1814      	adds	r4, r2, r0
 801dfa6:	eb43 0501 	adc.w	r5, r3, r1
 801dfaa:	687b      	ldr	r3, [r7, #4]
 801dfac:	685b      	ldr	r3, [r3, #4]
 801dfae:	461a      	mov	r2, r3
 801dfb0:	f04f 0300 	mov.w	r3, #0
 801dfb4:	4620      	mov	r0, r4
 801dfb6:	4629      	mov	r1, r5
 801dfb8:	f7fb fe66 	bl	8019c88 <__aeabi_uldivmod>
 801dfbc:	4602      	mov	r2, r0
 801dfbe:	460b      	mov	r3, r1
 801dfc0:	4613      	mov	r3, r2
 801dfc2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801dfc4:	693b      	ldr	r3, [r7, #16]
 801dfc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801dfca:	d308      	bcc.n	801dfde <UART_SetConfig+0x396>
 801dfcc:	693b      	ldr	r3, [r7, #16]
 801dfce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801dfd2:	d204      	bcs.n	801dfde <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 801dfd4:	687b      	ldr	r3, [r7, #4]
 801dfd6:	681b      	ldr	r3, [r3, #0]
 801dfd8:	693a      	ldr	r2, [r7, #16]
 801dfda:	60da      	str	r2, [r3, #12]
 801dfdc:	e0b0      	b.n	801e140 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 801dfde:	2301      	movs	r3, #1
 801dfe0:	76bb      	strb	r3, [r7, #26]
 801dfe2:	e0ad      	b.n	801e140 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801dfe4:	687b      	ldr	r3, [r7, #4]
 801dfe6:	69db      	ldr	r3, [r3, #28]
 801dfe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801dfec:	d15c      	bne.n	801e0a8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 801dfee:	7efb      	ldrb	r3, [r7, #27]
 801dff0:	2b08      	cmp	r3, #8
 801dff2:	d828      	bhi.n	801e046 <UART_SetConfig+0x3fe>
 801dff4:	a201      	add	r2, pc, #4	; (adr r2, 801dffc <UART_SetConfig+0x3b4>)
 801dff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dffa:	bf00      	nop
 801dffc:	0801e021 	.word	0x0801e021
 801e000:	0801e029 	.word	0x0801e029
 801e004:	0801e031 	.word	0x0801e031
 801e008:	0801e047 	.word	0x0801e047
 801e00c:	0801e037 	.word	0x0801e037
 801e010:	0801e047 	.word	0x0801e047
 801e014:	0801e047 	.word	0x0801e047
 801e018:	0801e047 	.word	0x0801e047
 801e01c:	0801e03f 	.word	0x0801e03f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e020:	f7fe fd82 	bl	801cb28 <HAL_RCC_GetPCLK1Freq>
 801e024:	6178      	str	r0, [r7, #20]
        break;
 801e026:	e013      	b.n	801e050 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e028:	f7fe fd94 	bl	801cb54 <HAL_RCC_GetPCLK2Freq>
 801e02c:	6178      	str	r0, [r7, #20]
        break;
 801e02e:	e00f      	b.n	801e050 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801e030:	4b49      	ldr	r3, [pc, #292]	; (801e158 <UART_SetConfig+0x510>)
 801e032:	617b      	str	r3, [r7, #20]
        break;
 801e034:	e00c      	b.n	801e050 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e036:	f7fe fcdf 	bl	801c9f8 <HAL_RCC_GetSysClockFreq>
 801e03a:	6178      	str	r0, [r7, #20]
        break;
 801e03c:	e008      	b.n	801e050 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e03e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e042:	617b      	str	r3, [r7, #20]
        break;
 801e044:	e004      	b.n	801e050 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 801e046:	2300      	movs	r3, #0
 801e048:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 801e04a:	2301      	movs	r3, #1
 801e04c:	76bb      	strb	r3, [r7, #26]
        break;
 801e04e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801e050:	697b      	ldr	r3, [r7, #20]
 801e052:	2b00      	cmp	r3, #0
 801e054:	d074      	beq.n	801e140 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801e056:	697b      	ldr	r3, [r7, #20]
 801e058:	005a      	lsls	r2, r3, #1
 801e05a:	687b      	ldr	r3, [r7, #4]
 801e05c:	685b      	ldr	r3, [r3, #4]
 801e05e:	085b      	lsrs	r3, r3, #1
 801e060:	441a      	add	r2, r3
 801e062:	687b      	ldr	r3, [r7, #4]
 801e064:	685b      	ldr	r3, [r3, #4]
 801e066:	fbb2 f3f3 	udiv	r3, r2, r3
 801e06a:	b29b      	uxth	r3, r3
 801e06c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e06e:	693b      	ldr	r3, [r7, #16]
 801e070:	2b0f      	cmp	r3, #15
 801e072:	d916      	bls.n	801e0a2 <UART_SetConfig+0x45a>
 801e074:	693b      	ldr	r3, [r7, #16]
 801e076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e07a:	d212      	bcs.n	801e0a2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801e07c:	693b      	ldr	r3, [r7, #16]
 801e07e:	b29b      	uxth	r3, r3
 801e080:	f023 030f 	bic.w	r3, r3, #15
 801e084:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801e086:	693b      	ldr	r3, [r7, #16]
 801e088:	085b      	lsrs	r3, r3, #1
 801e08a:	b29b      	uxth	r3, r3
 801e08c:	f003 0307 	and.w	r3, r3, #7
 801e090:	b29a      	uxth	r2, r3
 801e092:	89fb      	ldrh	r3, [r7, #14]
 801e094:	4313      	orrs	r3, r2
 801e096:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 801e098:	687b      	ldr	r3, [r7, #4]
 801e09a:	681b      	ldr	r3, [r3, #0]
 801e09c:	89fa      	ldrh	r2, [r7, #14]
 801e09e:	60da      	str	r2, [r3, #12]
 801e0a0:	e04e      	b.n	801e140 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 801e0a2:	2301      	movs	r3, #1
 801e0a4:	76bb      	strb	r3, [r7, #26]
 801e0a6:	e04b      	b.n	801e140 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 801e0a8:	7efb      	ldrb	r3, [r7, #27]
 801e0aa:	2b08      	cmp	r3, #8
 801e0ac:	d827      	bhi.n	801e0fe <UART_SetConfig+0x4b6>
 801e0ae:	a201      	add	r2, pc, #4	; (adr r2, 801e0b4 <UART_SetConfig+0x46c>)
 801e0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e0b4:	0801e0d9 	.word	0x0801e0d9
 801e0b8:	0801e0e1 	.word	0x0801e0e1
 801e0bc:	0801e0e9 	.word	0x0801e0e9
 801e0c0:	0801e0ff 	.word	0x0801e0ff
 801e0c4:	0801e0ef 	.word	0x0801e0ef
 801e0c8:	0801e0ff 	.word	0x0801e0ff
 801e0cc:	0801e0ff 	.word	0x0801e0ff
 801e0d0:	0801e0ff 	.word	0x0801e0ff
 801e0d4:	0801e0f7 	.word	0x0801e0f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e0d8:	f7fe fd26 	bl	801cb28 <HAL_RCC_GetPCLK1Freq>
 801e0dc:	6178      	str	r0, [r7, #20]
        break;
 801e0de:	e013      	b.n	801e108 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e0e0:	f7fe fd38 	bl	801cb54 <HAL_RCC_GetPCLK2Freq>
 801e0e4:	6178      	str	r0, [r7, #20]
        break;
 801e0e6:	e00f      	b.n	801e108 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801e0e8:	4b1b      	ldr	r3, [pc, #108]	; (801e158 <UART_SetConfig+0x510>)
 801e0ea:	617b      	str	r3, [r7, #20]
        break;
 801e0ec:	e00c      	b.n	801e108 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e0ee:	f7fe fc83 	bl	801c9f8 <HAL_RCC_GetSysClockFreq>
 801e0f2:	6178      	str	r0, [r7, #20]
        break;
 801e0f4:	e008      	b.n	801e108 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e0f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e0fa:	617b      	str	r3, [r7, #20]
        break;
 801e0fc:	e004      	b.n	801e108 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 801e0fe:	2300      	movs	r3, #0
 801e100:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 801e102:	2301      	movs	r3, #1
 801e104:	76bb      	strb	r3, [r7, #26]
        break;
 801e106:	bf00      	nop
    }

    if (pclk != 0U)
 801e108:	697b      	ldr	r3, [r7, #20]
 801e10a:	2b00      	cmp	r3, #0
 801e10c:	d018      	beq.n	801e140 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801e10e:	687b      	ldr	r3, [r7, #4]
 801e110:	685b      	ldr	r3, [r3, #4]
 801e112:	085a      	lsrs	r2, r3, #1
 801e114:	697b      	ldr	r3, [r7, #20]
 801e116:	441a      	add	r2, r3
 801e118:	687b      	ldr	r3, [r7, #4]
 801e11a:	685b      	ldr	r3, [r3, #4]
 801e11c:	fbb2 f3f3 	udiv	r3, r2, r3
 801e120:	b29b      	uxth	r3, r3
 801e122:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e124:	693b      	ldr	r3, [r7, #16]
 801e126:	2b0f      	cmp	r3, #15
 801e128:	d908      	bls.n	801e13c <UART_SetConfig+0x4f4>
 801e12a:	693b      	ldr	r3, [r7, #16]
 801e12c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e130:	d204      	bcs.n	801e13c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 801e132:	687b      	ldr	r3, [r7, #4]
 801e134:	681b      	ldr	r3, [r3, #0]
 801e136:	693a      	ldr	r2, [r7, #16]
 801e138:	60da      	str	r2, [r3, #12]
 801e13a:	e001      	b.n	801e140 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 801e13c:	2301      	movs	r3, #1
 801e13e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801e140:	687b      	ldr	r3, [r7, #4]
 801e142:	2200      	movs	r2, #0
 801e144:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 801e146:	687b      	ldr	r3, [r7, #4]
 801e148:	2200      	movs	r2, #0
 801e14a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 801e14c:	7ebb      	ldrb	r3, [r7, #26]
}
 801e14e:	4618      	mov	r0, r3
 801e150:	3720      	adds	r7, #32
 801e152:	46bd      	mov	sp, r7
 801e154:	bdb0      	pop	{r4, r5, r7, pc}
 801e156:	bf00      	nop
 801e158:	00f42400 	.word	0x00f42400

0801e15c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801e15c:	b480      	push	{r7}
 801e15e:	b083      	sub	sp, #12
 801e160:	af00      	add	r7, sp, #0
 801e162:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801e164:	687b      	ldr	r3, [r7, #4]
 801e166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e168:	f003 0301 	and.w	r3, r3, #1
 801e16c:	2b00      	cmp	r3, #0
 801e16e:	d00a      	beq.n	801e186 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801e170:	687b      	ldr	r3, [r7, #4]
 801e172:	681b      	ldr	r3, [r3, #0]
 801e174:	685b      	ldr	r3, [r3, #4]
 801e176:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801e17a:	687b      	ldr	r3, [r7, #4]
 801e17c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801e17e:	687b      	ldr	r3, [r7, #4]
 801e180:	681b      	ldr	r3, [r3, #0]
 801e182:	430a      	orrs	r2, r1
 801e184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801e186:	687b      	ldr	r3, [r7, #4]
 801e188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e18a:	f003 0302 	and.w	r3, r3, #2
 801e18e:	2b00      	cmp	r3, #0
 801e190:	d00a      	beq.n	801e1a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801e192:	687b      	ldr	r3, [r7, #4]
 801e194:	681b      	ldr	r3, [r3, #0]
 801e196:	685b      	ldr	r3, [r3, #4]
 801e198:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801e19c:	687b      	ldr	r3, [r7, #4]
 801e19e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e1a0:	687b      	ldr	r3, [r7, #4]
 801e1a2:	681b      	ldr	r3, [r3, #0]
 801e1a4:	430a      	orrs	r2, r1
 801e1a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801e1a8:	687b      	ldr	r3, [r7, #4]
 801e1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e1ac:	f003 0304 	and.w	r3, r3, #4
 801e1b0:	2b00      	cmp	r3, #0
 801e1b2:	d00a      	beq.n	801e1ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801e1b4:	687b      	ldr	r3, [r7, #4]
 801e1b6:	681b      	ldr	r3, [r3, #0]
 801e1b8:	685b      	ldr	r3, [r3, #4]
 801e1ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801e1be:	687b      	ldr	r3, [r7, #4]
 801e1c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801e1c2:	687b      	ldr	r3, [r7, #4]
 801e1c4:	681b      	ldr	r3, [r3, #0]
 801e1c6:	430a      	orrs	r2, r1
 801e1c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801e1ca:	687b      	ldr	r3, [r7, #4]
 801e1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e1ce:	f003 0308 	and.w	r3, r3, #8
 801e1d2:	2b00      	cmp	r3, #0
 801e1d4:	d00a      	beq.n	801e1ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801e1d6:	687b      	ldr	r3, [r7, #4]
 801e1d8:	681b      	ldr	r3, [r3, #0]
 801e1da:	685b      	ldr	r3, [r3, #4]
 801e1dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801e1e0:	687b      	ldr	r3, [r7, #4]
 801e1e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801e1e4:	687b      	ldr	r3, [r7, #4]
 801e1e6:	681b      	ldr	r3, [r3, #0]
 801e1e8:	430a      	orrs	r2, r1
 801e1ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801e1ec:	687b      	ldr	r3, [r7, #4]
 801e1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e1f0:	f003 0310 	and.w	r3, r3, #16
 801e1f4:	2b00      	cmp	r3, #0
 801e1f6:	d00a      	beq.n	801e20e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801e1f8:	687b      	ldr	r3, [r7, #4]
 801e1fa:	681b      	ldr	r3, [r3, #0]
 801e1fc:	689b      	ldr	r3, [r3, #8]
 801e1fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801e202:	687b      	ldr	r3, [r7, #4]
 801e204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e206:	687b      	ldr	r3, [r7, #4]
 801e208:	681b      	ldr	r3, [r3, #0]
 801e20a:	430a      	orrs	r2, r1
 801e20c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801e20e:	687b      	ldr	r3, [r7, #4]
 801e210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e212:	f003 0320 	and.w	r3, r3, #32
 801e216:	2b00      	cmp	r3, #0
 801e218:	d00a      	beq.n	801e230 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801e21a:	687b      	ldr	r3, [r7, #4]
 801e21c:	681b      	ldr	r3, [r3, #0]
 801e21e:	689b      	ldr	r3, [r3, #8]
 801e220:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801e224:	687b      	ldr	r3, [r7, #4]
 801e226:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e228:	687b      	ldr	r3, [r7, #4]
 801e22a:	681b      	ldr	r3, [r3, #0]
 801e22c:	430a      	orrs	r2, r1
 801e22e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801e230:	687b      	ldr	r3, [r7, #4]
 801e232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e238:	2b00      	cmp	r3, #0
 801e23a:	d01a      	beq.n	801e272 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801e23c:	687b      	ldr	r3, [r7, #4]
 801e23e:	681b      	ldr	r3, [r3, #0]
 801e240:	685b      	ldr	r3, [r3, #4]
 801e242:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801e246:	687b      	ldr	r3, [r7, #4]
 801e248:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801e24a:	687b      	ldr	r3, [r7, #4]
 801e24c:	681b      	ldr	r3, [r3, #0]
 801e24e:	430a      	orrs	r2, r1
 801e250:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801e252:	687b      	ldr	r3, [r7, #4]
 801e254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e256:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801e25a:	d10a      	bne.n	801e272 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801e25c:	687b      	ldr	r3, [r7, #4]
 801e25e:	681b      	ldr	r3, [r3, #0]
 801e260:	685b      	ldr	r3, [r3, #4]
 801e262:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801e266:	687b      	ldr	r3, [r7, #4]
 801e268:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801e26a:	687b      	ldr	r3, [r7, #4]
 801e26c:	681b      	ldr	r3, [r3, #0]
 801e26e:	430a      	orrs	r2, r1
 801e270:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801e272:	687b      	ldr	r3, [r7, #4]
 801e274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e27a:	2b00      	cmp	r3, #0
 801e27c:	d00a      	beq.n	801e294 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801e27e:	687b      	ldr	r3, [r7, #4]
 801e280:	681b      	ldr	r3, [r3, #0]
 801e282:	685b      	ldr	r3, [r3, #4]
 801e284:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801e288:	687b      	ldr	r3, [r7, #4]
 801e28a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801e28c:	687b      	ldr	r3, [r7, #4]
 801e28e:	681b      	ldr	r3, [r3, #0]
 801e290:	430a      	orrs	r2, r1
 801e292:	605a      	str	r2, [r3, #4]
  }
}
 801e294:	bf00      	nop
 801e296:	370c      	adds	r7, #12
 801e298:	46bd      	mov	sp, r7
 801e29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e29e:	4770      	bx	lr

0801e2a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801e2a0:	b580      	push	{r7, lr}
 801e2a2:	b086      	sub	sp, #24
 801e2a4:	af02      	add	r7, sp, #8
 801e2a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e2a8:	687b      	ldr	r3, [r7, #4]
 801e2aa:	2200      	movs	r2, #0
 801e2ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801e2b0:	f7fd f820 	bl	801b2f4 <HAL_GetTick>
 801e2b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801e2b6:	687b      	ldr	r3, [r7, #4]
 801e2b8:	681b      	ldr	r3, [r3, #0]
 801e2ba:	681b      	ldr	r3, [r3, #0]
 801e2bc:	f003 0308 	and.w	r3, r3, #8
 801e2c0:	2b08      	cmp	r3, #8
 801e2c2:	d10e      	bne.n	801e2e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801e2c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801e2c8:	9300      	str	r3, [sp, #0]
 801e2ca:	68fb      	ldr	r3, [r7, #12]
 801e2cc:	2200      	movs	r2, #0
 801e2ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801e2d2:	6878      	ldr	r0, [r7, #4]
 801e2d4:	f000 f82d 	bl	801e332 <UART_WaitOnFlagUntilTimeout>
 801e2d8:	4603      	mov	r3, r0
 801e2da:	2b00      	cmp	r3, #0
 801e2dc:	d001      	beq.n	801e2e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801e2de:	2303      	movs	r3, #3
 801e2e0:	e023      	b.n	801e32a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801e2e2:	687b      	ldr	r3, [r7, #4]
 801e2e4:	681b      	ldr	r3, [r3, #0]
 801e2e6:	681b      	ldr	r3, [r3, #0]
 801e2e8:	f003 0304 	and.w	r3, r3, #4
 801e2ec:	2b04      	cmp	r3, #4
 801e2ee:	d10e      	bne.n	801e30e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801e2f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801e2f4:	9300      	str	r3, [sp, #0]
 801e2f6:	68fb      	ldr	r3, [r7, #12]
 801e2f8:	2200      	movs	r2, #0
 801e2fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801e2fe:	6878      	ldr	r0, [r7, #4]
 801e300:	f000 f817 	bl	801e332 <UART_WaitOnFlagUntilTimeout>
 801e304:	4603      	mov	r3, r0
 801e306:	2b00      	cmp	r3, #0
 801e308:	d001      	beq.n	801e30e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801e30a:	2303      	movs	r3, #3
 801e30c:	e00d      	b.n	801e32a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801e30e:	687b      	ldr	r3, [r7, #4]
 801e310:	2220      	movs	r2, #32
 801e312:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 801e314:	687b      	ldr	r3, [r7, #4]
 801e316:	2220      	movs	r2, #32
 801e318:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e31a:	687b      	ldr	r3, [r7, #4]
 801e31c:	2200      	movs	r2, #0
 801e31e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 801e320:	687b      	ldr	r3, [r7, #4]
 801e322:	2200      	movs	r2, #0
 801e324:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 801e328:	2300      	movs	r3, #0
}
 801e32a:	4618      	mov	r0, r3
 801e32c:	3710      	adds	r7, #16
 801e32e:	46bd      	mov	sp, r7
 801e330:	bd80      	pop	{r7, pc}

0801e332 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801e332:	b580      	push	{r7, lr}
 801e334:	b084      	sub	sp, #16
 801e336:	af00      	add	r7, sp, #0
 801e338:	60f8      	str	r0, [r7, #12]
 801e33a:	60b9      	str	r1, [r7, #8]
 801e33c:	603b      	str	r3, [r7, #0]
 801e33e:	4613      	mov	r3, r2
 801e340:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801e342:	e05e      	b.n	801e402 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801e344:	69bb      	ldr	r3, [r7, #24]
 801e346:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e34a:	d05a      	beq.n	801e402 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801e34c:	f7fc ffd2 	bl	801b2f4 <HAL_GetTick>
 801e350:	4602      	mov	r2, r0
 801e352:	683b      	ldr	r3, [r7, #0]
 801e354:	1ad3      	subs	r3, r2, r3
 801e356:	69ba      	ldr	r2, [r7, #24]
 801e358:	429a      	cmp	r2, r3
 801e35a:	d302      	bcc.n	801e362 <UART_WaitOnFlagUntilTimeout+0x30>
 801e35c:	69bb      	ldr	r3, [r7, #24]
 801e35e:	2b00      	cmp	r3, #0
 801e360:	d11b      	bne.n	801e39a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801e362:	68fb      	ldr	r3, [r7, #12]
 801e364:	681b      	ldr	r3, [r3, #0]
 801e366:	681a      	ldr	r2, [r3, #0]
 801e368:	68fb      	ldr	r3, [r7, #12]
 801e36a:	681b      	ldr	r3, [r3, #0]
 801e36c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801e370:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e372:	68fb      	ldr	r3, [r7, #12]
 801e374:	681b      	ldr	r3, [r3, #0]
 801e376:	689a      	ldr	r2, [r3, #8]
 801e378:	68fb      	ldr	r3, [r7, #12]
 801e37a:	681b      	ldr	r3, [r3, #0]
 801e37c:	f022 0201 	bic.w	r2, r2, #1
 801e380:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 801e382:	68fb      	ldr	r3, [r7, #12]
 801e384:	2220      	movs	r2, #32
 801e386:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 801e388:	68fb      	ldr	r3, [r7, #12]
 801e38a:	2220      	movs	r2, #32
 801e38c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 801e38e:	68fb      	ldr	r3, [r7, #12]
 801e390:	2200      	movs	r2, #0
 801e392:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 801e396:	2303      	movs	r3, #3
 801e398:	e043      	b.n	801e422 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801e39a:	68fb      	ldr	r3, [r7, #12]
 801e39c:	681b      	ldr	r3, [r3, #0]
 801e39e:	681b      	ldr	r3, [r3, #0]
 801e3a0:	f003 0304 	and.w	r3, r3, #4
 801e3a4:	2b00      	cmp	r3, #0
 801e3a6:	d02c      	beq.n	801e402 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801e3a8:	68fb      	ldr	r3, [r7, #12]
 801e3aa:	681b      	ldr	r3, [r3, #0]
 801e3ac:	69db      	ldr	r3, [r3, #28]
 801e3ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801e3b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e3b6:	d124      	bne.n	801e402 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801e3b8:	68fb      	ldr	r3, [r7, #12]
 801e3ba:	681b      	ldr	r3, [r3, #0]
 801e3bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801e3c0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801e3c2:	68fb      	ldr	r3, [r7, #12]
 801e3c4:	681b      	ldr	r3, [r3, #0]
 801e3c6:	681a      	ldr	r2, [r3, #0]
 801e3c8:	68fb      	ldr	r3, [r7, #12]
 801e3ca:	681b      	ldr	r3, [r3, #0]
 801e3cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801e3d0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e3d2:	68fb      	ldr	r3, [r7, #12]
 801e3d4:	681b      	ldr	r3, [r3, #0]
 801e3d6:	689a      	ldr	r2, [r3, #8]
 801e3d8:	68fb      	ldr	r3, [r7, #12]
 801e3da:	681b      	ldr	r3, [r3, #0]
 801e3dc:	f022 0201 	bic.w	r2, r2, #1
 801e3e0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 801e3e2:	68fb      	ldr	r3, [r7, #12]
 801e3e4:	2220      	movs	r2, #32
 801e3e6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 801e3e8:	68fb      	ldr	r3, [r7, #12]
 801e3ea:	2220      	movs	r2, #32
 801e3ec:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801e3ee:	68fb      	ldr	r3, [r7, #12]
 801e3f0:	2220      	movs	r2, #32
 801e3f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801e3f6:	68fb      	ldr	r3, [r7, #12]
 801e3f8:	2200      	movs	r2, #0
 801e3fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 801e3fe:	2303      	movs	r3, #3
 801e400:	e00f      	b.n	801e422 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801e402:	68fb      	ldr	r3, [r7, #12]
 801e404:	681b      	ldr	r3, [r3, #0]
 801e406:	69da      	ldr	r2, [r3, #28]
 801e408:	68bb      	ldr	r3, [r7, #8]
 801e40a:	4013      	ands	r3, r2
 801e40c:	68ba      	ldr	r2, [r7, #8]
 801e40e:	429a      	cmp	r2, r3
 801e410:	bf0c      	ite	eq
 801e412:	2301      	moveq	r3, #1
 801e414:	2300      	movne	r3, #0
 801e416:	b2db      	uxtb	r3, r3
 801e418:	461a      	mov	r2, r3
 801e41a:	79fb      	ldrb	r3, [r7, #7]
 801e41c:	429a      	cmp	r2, r3
 801e41e:	d091      	beq.n	801e344 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801e420:	2300      	movs	r3, #0
}
 801e422:	4618      	mov	r0, r3
 801e424:	3710      	adds	r7, #16
 801e426:	46bd      	mov	sp, r7
 801e428:	bd80      	pop	{r7, pc}
	...

0801e42c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801e42c:	b480      	push	{r7}
 801e42e:	b085      	sub	sp, #20
 801e430:	af00      	add	r7, sp, #0
 801e432:	60f8      	str	r0, [r7, #12]
 801e434:	60b9      	str	r1, [r7, #8]
 801e436:	4613      	mov	r3, r2
 801e438:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801e43a:	68fb      	ldr	r3, [r7, #12]
 801e43c:	68ba      	ldr	r2, [r7, #8]
 801e43e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 801e440:	68fb      	ldr	r3, [r7, #12]
 801e442:	88fa      	ldrh	r2, [r7, #6]
 801e444:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 801e448:	68fb      	ldr	r3, [r7, #12]
 801e44a:	88fa      	ldrh	r2, [r7, #6]
 801e44c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 801e450:	68fb      	ldr	r3, [r7, #12]
 801e452:	2200      	movs	r2, #0
 801e454:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801e456:	68fb      	ldr	r3, [r7, #12]
 801e458:	689b      	ldr	r3, [r3, #8]
 801e45a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801e45e:	d10e      	bne.n	801e47e <UART_Start_Receive_IT+0x52>
 801e460:	68fb      	ldr	r3, [r7, #12]
 801e462:	691b      	ldr	r3, [r3, #16]
 801e464:	2b00      	cmp	r3, #0
 801e466:	d105      	bne.n	801e474 <UART_Start_Receive_IT+0x48>
 801e468:	68fb      	ldr	r3, [r7, #12]
 801e46a:	f240 12ff 	movw	r2, #511	; 0x1ff
 801e46e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801e472:	e02d      	b.n	801e4d0 <UART_Start_Receive_IT+0xa4>
 801e474:	68fb      	ldr	r3, [r7, #12]
 801e476:	22ff      	movs	r2, #255	; 0xff
 801e478:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801e47c:	e028      	b.n	801e4d0 <UART_Start_Receive_IT+0xa4>
 801e47e:	68fb      	ldr	r3, [r7, #12]
 801e480:	689b      	ldr	r3, [r3, #8]
 801e482:	2b00      	cmp	r3, #0
 801e484:	d10d      	bne.n	801e4a2 <UART_Start_Receive_IT+0x76>
 801e486:	68fb      	ldr	r3, [r7, #12]
 801e488:	691b      	ldr	r3, [r3, #16]
 801e48a:	2b00      	cmp	r3, #0
 801e48c:	d104      	bne.n	801e498 <UART_Start_Receive_IT+0x6c>
 801e48e:	68fb      	ldr	r3, [r7, #12]
 801e490:	22ff      	movs	r2, #255	; 0xff
 801e492:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801e496:	e01b      	b.n	801e4d0 <UART_Start_Receive_IT+0xa4>
 801e498:	68fb      	ldr	r3, [r7, #12]
 801e49a:	227f      	movs	r2, #127	; 0x7f
 801e49c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801e4a0:	e016      	b.n	801e4d0 <UART_Start_Receive_IT+0xa4>
 801e4a2:	68fb      	ldr	r3, [r7, #12]
 801e4a4:	689b      	ldr	r3, [r3, #8]
 801e4a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801e4aa:	d10d      	bne.n	801e4c8 <UART_Start_Receive_IT+0x9c>
 801e4ac:	68fb      	ldr	r3, [r7, #12]
 801e4ae:	691b      	ldr	r3, [r3, #16]
 801e4b0:	2b00      	cmp	r3, #0
 801e4b2:	d104      	bne.n	801e4be <UART_Start_Receive_IT+0x92>
 801e4b4:	68fb      	ldr	r3, [r7, #12]
 801e4b6:	227f      	movs	r2, #127	; 0x7f
 801e4b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801e4bc:	e008      	b.n	801e4d0 <UART_Start_Receive_IT+0xa4>
 801e4be:	68fb      	ldr	r3, [r7, #12]
 801e4c0:	223f      	movs	r2, #63	; 0x3f
 801e4c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801e4c6:	e003      	b.n	801e4d0 <UART_Start_Receive_IT+0xa4>
 801e4c8:	68fb      	ldr	r3, [r7, #12]
 801e4ca:	2200      	movs	r2, #0
 801e4cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e4d0:	68fb      	ldr	r3, [r7, #12]
 801e4d2:	2200      	movs	r2, #0
 801e4d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801e4d8:	68fb      	ldr	r3, [r7, #12]
 801e4da:	2222      	movs	r2, #34	; 0x22
 801e4dc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e4de:	68fb      	ldr	r3, [r7, #12]
 801e4e0:	681b      	ldr	r3, [r3, #0]
 801e4e2:	689a      	ldr	r2, [r3, #8]
 801e4e4:	68fb      	ldr	r3, [r7, #12]
 801e4e6:	681b      	ldr	r3, [r3, #0]
 801e4e8:	f042 0201 	orr.w	r2, r2, #1
 801e4ec:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801e4ee:	68fb      	ldr	r3, [r7, #12]
 801e4f0:	689b      	ldr	r3, [r3, #8]
 801e4f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801e4f6:	d107      	bne.n	801e508 <UART_Start_Receive_IT+0xdc>
 801e4f8:	68fb      	ldr	r3, [r7, #12]
 801e4fa:	691b      	ldr	r3, [r3, #16]
 801e4fc:	2b00      	cmp	r3, #0
 801e4fe:	d103      	bne.n	801e508 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801e500:	68fb      	ldr	r3, [r7, #12]
 801e502:	4a0c      	ldr	r2, [pc, #48]	; (801e534 <UART_Start_Receive_IT+0x108>)
 801e504:	665a      	str	r2, [r3, #100]	; 0x64
 801e506:	e002      	b.n	801e50e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801e508:	68fb      	ldr	r3, [r7, #12]
 801e50a:	4a0b      	ldr	r2, [pc, #44]	; (801e538 <UART_Start_Receive_IT+0x10c>)
 801e50c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 801e50e:	68fb      	ldr	r3, [r7, #12]
 801e510:	2200      	movs	r2, #0
 801e512:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801e516:	68fb      	ldr	r3, [r7, #12]
 801e518:	681b      	ldr	r3, [r3, #0]
 801e51a:	681a      	ldr	r2, [r3, #0]
 801e51c:	68fb      	ldr	r3, [r7, #12]
 801e51e:	681b      	ldr	r3, [r3, #0]
 801e520:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 801e524:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 801e526:	2300      	movs	r3, #0
}
 801e528:	4618      	mov	r0, r3
 801e52a:	3714      	adds	r7, #20
 801e52c:	46bd      	mov	sp, r7
 801e52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e532:	4770      	bx	lr
 801e534:	0801e6d1 	.word	0x0801e6d1
 801e538:	0801e5f9 	.word	0x0801e5f9

0801e53c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801e53c:	b480      	push	{r7}
 801e53e:	b083      	sub	sp, #12
 801e540:	af00      	add	r7, sp, #0
 801e542:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801e544:	687b      	ldr	r3, [r7, #4]
 801e546:	681b      	ldr	r3, [r3, #0]
 801e548:	681a      	ldr	r2, [r3, #0]
 801e54a:	687b      	ldr	r3, [r7, #4]
 801e54c:	681b      	ldr	r3, [r3, #0]
 801e54e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801e552:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e554:	687b      	ldr	r3, [r7, #4]
 801e556:	681b      	ldr	r3, [r3, #0]
 801e558:	689a      	ldr	r2, [r3, #8]
 801e55a:	687b      	ldr	r3, [r7, #4]
 801e55c:	681b      	ldr	r3, [r3, #0]
 801e55e:	f022 0201 	bic.w	r2, r2, #1
 801e562:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e564:	687b      	ldr	r3, [r7, #4]
 801e566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e568:	2b01      	cmp	r3, #1
 801e56a:	d107      	bne.n	801e57c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801e56c:	687b      	ldr	r3, [r7, #4]
 801e56e:	681b      	ldr	r3, [r3, #0]
 801e570:	681a      	ldr	r2, [r3, #0]
 801e572:	687b      	ldr	r3, [r7, #4]
 801e574:	681b      	ldr	r3, [r3, #0]
 801e576:	f022 0210 	bic.w	r2, r2, #16
 801e57a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801e57c:	687b      	ldr	r3, [r7, #4]
 801e57e:	2220      	movs	r2, #32
 801e580:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e582:	687b      	ldr	r3, [r7, #4]
 801e584:	2200      	movs	r2, #0
 801e586:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801e588:	687b      	ldr	r3, [r7, #4]
 801e58a:	2200      	movs	r2, #0
 801e58c:	665a      	str	r2, [r3, #100]	; 0x64
}
 801e58e:	bf00      	nop
 801e590:	370c      	adds	r7, #12
 801e592:	46bd      	mov	sp, r7
 801e594:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e598:	4770      	bx	lr

0801e59a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801e59a:	b580      	push	{r7, lr}
 801e59c:	b084      	sub	sp, #16
 801e59e:	af00      	add	r7, sp, #0
 801e5a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801e5a2:	687b      	ldr	r3, [r7, #4]
 801e5a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e5a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801e5a8:	68fb      	ldr	r3, [r7, #12]
 801e5aa:	2200      	movs	r2, #0
 801e5ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 801e5b0:	68fb      	ldr	r3, [r7, #12]
 801e5b2:	2200      	movs	r2, #0
 801e5b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801e5b8:	68f8      	ldr	r0, [r7, #12]
 801e5ba:	f7ff fb2f 	bl	801dc1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801e5be:	bf00      	nop
 801e5c0:	3710      	adds	r7, #16
 801e5c2:	46bd      	mov	sp, r7
 801e5c4:	bd80      	pop	{r7, pc}

0801e5c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801e5c6:	b580      	push	{r7, lr}
 801e5c8:	b082      	sub	sp, #8
 801e5ca:	af00      	add	r7, sp, #0
 801e5cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801e5ce:	687b      	ldr	r3, [r7, #4]
 801e5d0:	681b      	ldr	r3, [r3, #0]
 801e5d2:	681a      	ldr	r2, [r3, #0]
 801e5d4:	687b      	ldr	r3, [r7, #4]
 801e5d6:	681b      	ldr	r3, [r3, #0]
 801e5d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e5dc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801e5de:	687b      	ldr	r3, [r7, #4]
 801e5e0:	2220      	movs	r2, #32
 801e5e2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801e5e4:	687b      	ldr	r3, [r7, #4]
 801e5e6:	2200      	movs	r2, #0
 801e5e8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801e5ea:	6878      	ldr	r0, [r7, #4]
 801e5ec:	f7ff fb0c 	bl	801dc08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801e5f0:	bf00      	nop
 801e5f2:	3708      	adds	r7, #8
 801e5f4:	46bd      	mov	sp, r7
 801e5f6:	bd80      	pop	{r7, pc}

0801e5f8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801e5f8:	b580      	push	{r7, lr}
 801e5fa:	b084      	sub	sp, #16
 801e5fc:	af00      	add	r7, sp, #0
 801e5fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801e600:	687b      	ldr	r3, [r7, #4]
 801e602:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801e606:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801e608:	687b      	ldr	r3, [r7, #4]
 801e60a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801e60c:	2b22      	cmp	r3, #34	; 0x22
 801e60e:	d151      	bne.n	801e6b4 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801e610:	687b      	ldr	r3, [r7, #4]
 801e612:	681b      	ldr	r3, [r3, #0]
 801e614:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801e616:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801e618:	89bb      	ldrh	r3, [r7, #12]
 801e61a:	b2d9      	uxtb	r1, r3
 801e61c:	89fb      	ldrh	r3, [r7, #14]
 801e61e:	b2da      	uxtb	r2, r3
 801e620:	687b      	ldr	r3, [r7, #4]
 801e622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e624:	400a      	ands	r2, r1
 801e626:	b2d2      	uxtb	r2, r2
 801e628:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801e62a:	687b      	ldr	r3, [r7, #4]
 801e62c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e62e:	1c5a      	adds	r2, r3, #1
 801e630:	687b      	ldr	r3, [r7, #4]
 801e632:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801e634:	687b      	ldr	r3, [r7, #4]
 801e636:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801e63a:	b29b      	uxth	r3, r3
 801e63c:	3b01      	subs	r3, #1
 801e63e:	b29a      	uxth	r2, r3
 801e640:	687b      	ldr	r3, [r7, #4]
 801e642:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801e646:	687b      	ldr	r3, [r7, #4]
 801e648:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801e64c:	b29b      	uxth	r3, r3
 801e64e:	2b00      	cmp	r3, #0
 801e650:	d13a      	bne.n	801e6c8 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801e652:	687b      	ldr	r3, [r7, #4]
 801e654:	681b      	ldr	r3, [r3, #0]
 801e656:	681a      	ldr	r2, [r3, #0]
 801e658:	687b      	ldr	r3, [r7, #4]
 801e65a:	681b      	ldr	r3, [r3, #0]
 801e65c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801e660:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e662:	687b      	ldr	r3, [r7, #4]
 801e664:	681b      	ldr	r3, [r3, #0]
 801e666:	689a      	ldr	r2, [r3, #8]
 801e668:	687b      	ldr	r3, [r7, #4]
 801e66a:	681b      	ldr	r3, [r3, #0]
 801e66c:	f022 0201 	bic.w	r2, r2, #1
 801e670:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801e672:	687b      	ldr	r3, [r7, #4]
 801e674:	2220      	movs	r2, #32
 801e676:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801e678:	687b      	ldr	r3, [r7, #4]
 801e67a:	2200      	movs	r2, #0
 801e67c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e67e:	687b      	ldr	r3, [r7, #4]
 801e680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e682:	2b01      	cmp	r3, #1
 801e684:	d10f      	bne.n	801e6a6 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801e686:	687b      	ldr	r3, [r7, #4]
 801e688:	681b      	ldr	r3, [r3, #0]
 801e68a:	681a      	ldr	r2, [r3, #0]
 801e68c:	687b      	ldr	r3, [r7, #4]
 801e68e:	681b      	ldr	r3, [r3, #0]
 801e690:	f022 0210 	bic.w	r2, r2, #16
 801e694:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801e696:	687b      	ldr	r3, [r7, #4]
 801e698:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801e69c:	4619      	mov	r1, r3
 801e69e:	6878      	ldr	r0, [r7, #4]
 801e6a0:	f7ff fac6 	bl	801dc30 <HAL_UARTEx_RxEventCallback>
 801e6a4:	e002      	b.n	801e6ac <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801e6a6:	6878      	ldr	r0, [r7, #4]
 801e6a8:	f7fb fedc 	bl	801a464 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e6ac:	687b      	ldr	r3, [r7, #4]
 801e6ae:	2200      	movs	r2, #0
 801e6b0:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801e6b2:	e009      	b.n	801e6c8 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801e6b4:	687b      	ldr	r3, [r7, #4]
 801e6b6:	681b      	ldr	r3, [r3, #0]
 801e6b8:	8b1b      	ldrh	r3, [r3, #24]
 801e6ba:	b29a      	uxth	r2, r3
 801e6bc:	687b      	ldr	r3, [r7, #4]
 801e6be:	681b      	ldr	r3, [r3, #0]
 801e6c0:	f042 0208 	orr.w	r2, r2, #8
 801e6c4:	b292      	uxth	r2, r2
 801e6c6:	831a      	strh	r2, [r3, #24]
}
 801e6c8:	bf00      	nop
 801e6ca:	3710      	adds	r7, #16
 801e6cc:	46bd      	mov	sp, r7
 801e6ce:	bd80      	pop	{r7, pc}

0801e6d0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801e6d0:	b580      	push	{r7, lr}
 801e6d2:	b084      	sub	sp, #16
 801e6d4:	af00      	add	r7, sp, #0
 801e6d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801e6d8:	687b      	ldr	r3, [r7, #4]
 801e6da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801e6de:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801e6e0:	687b      	ldr	r3, [r7, #4]
 801e6e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801e6e4:	2b22      	cmp	r3, #34	; 0x22
 801e6e6:	d151      	bne.n	801e78c <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801e6e8:	687b      	ldr	r3, [r7, #4]
 801e6ea:	681b      	ldr	r3, [r3, #0]
 801e6ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801e6ee:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801e6f0:	687b      	ldr	r3, [r7, #4]
 801e6f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e6f4:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 801e6f6:	89ba      	ldrh	r2, [r7, #12]
 801e6f8:	89fb      	ldrh	r3, [r7, #14]
 801e6fa:	4013      	ands	r3, r2
 801e6fc:	b29a      	uxth	r2, r3
 801e6fe:	68bb      	ldr	r3, [r7, #8]
 801e700:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801e702:	687b      	ldr	r3, [r7, #4]
 801e704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e706:	1c9a      	adds	r2, r3, #2
 801e708:	687b      	ldr	r3, [r7, #4]
 801e70a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801e70c:	687b      	ldr	r3, [r7, #4]
 801e70e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801e712:	b29b      	uxth	r3, r3
 801e714:	3b01      	subs	r3, #1
 801e716:	b29a      	uxth	r2, r3
 801e718:	687b      	ldr	r3, [r7, #4]
 801e71a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801e71e:	687b      	ldr	r3, [r7, #4]
 801e720:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801e724:	b29b      	uxth	r3, r3
 801e726:	2b00      	cmp	r3, #0
 801e728:	d13a      	bne.n	801e7a0 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801e72a:	687b      	ldr	r3, [r7, #4]
 801e72c:	681b      	ldr	r3, [r3, #0]
 801e72e:	681a      	ldr	r2, [r3, #0]
 801e730:	687b      	ldr	r3, [r7, #4]
 801e732:	681b      	ldr	r3, [r3, #0]
 801e734:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801e738:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e73a:	687b      	ldr	r3, [r7, #4]
 801e73c:	681b      	ldr	r3, [r3, #0]
 801e73e:	689a      	ldr	r2, [r3, #8]
 801e740:	687b      	ldr	r3, [r7, #4]
 801e742:	681b      	ldr	r3, [r3, #0]
 801e744:	f022 0201 	bic.w	r2, r2, #1
 801e748:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801e74a:	687b      	ldr	r3, [r7, #4]
 801e74c:	2220      	movs	r2, #32
 801e74e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801e750:	687b      	ldr	r3, [r7, #4]
 801e752:	2200      	movs	r2, #0
 801e754:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e756:	687b      	ldr	r3, [r7, #4]
 801e758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e75a:	2b01      	cmp	r3, #1
 801e75c:	d10f      	bne.n	801e77e <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801e75e:	687b      	ldr	r3, [r7, #4]
 801e760:	681b      	ldr	r3, [r3, #0]
 801e762:	681a      	ldr	r2, [r3, #0]
 801e764:	687b      	ldr	r3, [r7, #4]
 801e766:	681b      	ldr	r3, [r3, #0]
 801e768:	f022 0210 	bic.w	r2, r2, #16
 801e76c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801e76e:	687b      	ldr	r3, [r7, #4]
 801e770:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801e774:	4619      	mov	r1, r3
 801e776:	6878      	ldr	r0, [r7, #4]
 801e778:	f7ff fa5a 	bl	801dc30 <HAL_UARTEx_RxEventCallback>
 801e77c:	e002      	b.n	801e784 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801e77e:	6878      	ldr	r0, [r7, #4]
 801e780:	f7fb fe70 	bl	801a464 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e784:	687b      	ldr	r3, [r7, #4]
 801e786:	2200      	movs	r2, #0
 801e788:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801e78a:	e009      	b.n	801e7a0 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801e78c:	687b      	ldr	r3, [r7, #4]
 801e78e:	681b      	ldr	r3, [r3, #0]
 801e790:	8b1b      	ldrh	r3, [r3, #24]
 801e792:	b29a      	uxth	r2, r3
 801e794:	687b      	ldr	r3, [r7, #4]
 801e796:	681b      	ldr	r3, [r3, #0]
 801e798:	f042 0208 	orr.w	r2, r2, #8
 801e79c:	b292      	uxth	r2, r2
 801e79e:	831a      	strh	r2, [r3, #24]
}
 801e7a0:	bf00      	nop
 801e7a2:	3710      	adds	r7, #16
 801e7a4:	46bd      	mov	sp, r7
 801e7a6:	bd80      	pop	{r7, pc}

0801e7a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801e7a8:	b480      	push	{r7}
 801e7aa:	b083      	sub	sp, #12
 801e7ac:	af00      	add	r7, sp, #0
 801e7ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801e7b0:	bf00      	nop
 801e7b2:	370c      	adds	r7, #12
 801e7b4:	46bd      	mov	sp, r7
 801e7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7ba:	4770      	bx	lr

0801e7bc <_Z11Flash_erasem>:

#include <hw.h>


/*_________________________________________________________________________________________________________________________________*/
void Flash_erase( uint32_t _page ) {
 801e7bc:	b580      	push	{r7, lr}
 801e7be:	b086      	sub	sp, #24
 801e7c0:	af00      	add	r7, sp, #0
 801e7c2:	6078      	str	r0, [r7, #4]
	FLASH_EraseInitTypeDef EraseStruct ;
	static uint32_t PageEraseERROR_Addr  ;
	HAL_FLASH_Unlock() ;
 801e7c4:	f7fc ffdc 	bl	801b780 <HAL_FLASH_Unlock>

	if( (int)_page <= 255 )
 801e7c8:	687b      	ldr	r3, [r7, #4]
 801e7ca:	2bff      	cmp	r3, #255	; 0xff
 801e7cc:	dc02      	bgt.n	801e7d4 <_Z11Flash_erasem+0x18>
		EraseStruct.Banks = FLASH_BANK_1 ;
 801e7ce:	2301      	movs	r3, #1
 801e7d0:	60fb      	str	r3, [r7, #12]
 801e7d2:	e001      	b.n	801e7d8 <_Z11Flash_erasem+0x1c>
	else
		EraseStruct.Banks = FLASH_BANK_2 ;
 801e7d4:	2302      	movs	r3, #2
 801e7d6:	60fb      	str	r3, [r7, #12]
	EraseStruct.NbPages = 1 ;
 801e7d8:	2301      	movs	r3, #1
 801e7da:	617b      	str	r3, [r7, #20]
	EraseStruct.TypeErase = FLASH_TYPEERASE_PAGES ;
 801e7dc:	2300      	movs	r3, #0
 801e7de:	60bb      	str	r3, [r7, #8]
	EraseStruct.Page = _page ;
 801e7e0:	687b      	ldr	r3, [r7, #4]
 801e7e2:	613b      	str	r3, [r7, #16]

	if( HAL_FLASHEx_Erase( &EraseStruct, &PageEraseERROR_Addr ) != HAL_OK )
 801e7e4:	f107 0308 	add.w	r3, r7, #8
 801e7e8:	4909      	ldr	r1, [pc, #36]	; (801e810 <_Z11Flash_erasem+0x54>)
 801e7ea:	4618      	mov	r0, r3
 801e7ec:	f7fd f8b8 	bl	801b960 <HAL_FLASHEx_Erase>
 801e7f0:	4603      	mov	r3, r0
 801e7f2:	2b00      	cmp	r3, #0
 801e7f4:	bf14      	ite	ne
 801e7f6:	2301      	movne	r3, #1
 801e7f8:	2300      	moveq	r3, #0
 801e7fa:	b2db      	uxtb	r3, r3
 801e7fc:	2b00      	cmp	r3, #0
 801e7fe:	d002      	beq.n	801e806 <_Z11Flash_erasem+0x4a>
		return (void)HAL_FLASH_GetError() ;
 801e800:	f7fc fff0 	bl	801b7e4 <HAL_FLASH_GetError>
 801e804:	e001      	b.n	801e80a <_Z11Flash_erasem+0x4e>

	HAL_FLASH_Lock() ;
 801e806:	f7fc ffdd 	bl	801b7c4 <HAL_FLASH_Lock>
}
 801e80a:	3718      	adds	r7, #24
 801e80c:	46bd      	mov	sp, r7
 801e80e:	bd80      	pop	{r7, pc}
 801e810:	200002c4 	.word	0x200002c4

0801e814 <_Z11Flash_writemPKhi>:



/*_________________________________________________________________________________________________________________________________*/
void  Flash_write( uint32_t _address, const uint8_t* _data, int _dataLength ) {
 801e814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e818:	b097      	sub	sp, #92	; 0x5c
 801e81a:	af00      	add	r7, sp, #0
 801e81c:	6378      	str	r0, [r7, #52]	; 0x34
 801e81e:	6339      	str	r1, [r7, #48]	; 0x30
 801e820:	62fa      	str	r2, [r7, #44]	; 0x2c
		HAL_FLASH_Program( FLASH_TYPEPROGRAM_DOUBLEWORD, _address + i, data ) ;
		data = 0x0000000000000000 ;
	}


	HAL_FLASH_Lock() ;
 801e822:	466b      	mov	r3, sp
 801e824:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_FLASH_Unlock() ;
 801e826:	f7fc ffab 	bl	801b780 <HAL_FLASH_Unlock>
	unsigned int dwLen = 0 ;
 801e82a:	2300      	movs	r3, #0
 801e82c:	647b      	str	r3, [r7, #68]	; 0x44
	if( ( _dataLength % 8 == 0 ) && ( _dataLength >= 8 ) ) dwLen = _dataLength ;
 801e82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e830:	f003 0307 	and.w	r3, r3, #7
 801e834:	2b00      	cmp	r3, #0
 801e836:	d105      	bne.n	801e844 <_Z11Flash_writemPKhi+0x30>
 801e838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e83a:	2b07      	cmp	r3, #7
 801e83c:	dd02      	ble.n	801e844 <_Z11Flash_writemPKhi+0x30>
 801e83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e840:	647b      	str	r3, [r7, #68]	; 0x44
 801e842:	e02a      	b.n	801e89a <_Z11Flash_writemPKhi+0x86>
	else if( ( _dataLength % 8 > 0 ) && ( _dataLength > 8 ) ) dwLen = _dataLength + ( 8 - ( _dataLength % 8 ) ) ;
 801e844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e846:	4259      	negs	r1, r3
 801e848:	f003 0207 	and.w	r2, r3, #7
 801e84c:	f001 0307 	and.w	r3, r1, #7
 801e850:	bf58      	it	pl
 801e852:	425a      	negpl	r2, r3
 801e854:	2a00      	cmp	r2, #0
 801e856:	dd10      	ble.n	801e87a <_Z11Flash_writemPKhi+0x66>
 801e858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e85a:	2b08      	cmp	r3, #8
 801e85c:	dd0d      	ble.n	801e87a <_Z11Flash_writemPKhi+0x66>
 801e85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e860:	4259      	negs	r1, r3
 801e862:	f003 0207 	and.w	r2, r3, #7
 801e866:	f001 0307 	and.w	r3, r1, #7
 801e86a:	bf58      	it	pl
 801e86c:	425a      	negpl	r2, r3
 801e86e:	f1c2 0208 	rsb	r2, r2, #8
 801e872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e874:	4413      	add	r3, r2
 801e876:	647b      	str	r3, [r7, #68]	; 0x44
 801e878:	e00f      	b.n	801e89a <_Z11Flash_writemPKhi+0x86>
	else if( _dataLength < 8 ) dwLen = _dataLength + ( 8 - ( _dataLength % 8 ) ) ;
 801e87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e87c:	2b07      	cmp	r3, #7
 801e87e:	dc0c      	bgt.n	801e89a <_Z11Flash_writemPKhi+0x86>
 801e880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e882:	4259      	negs	r1, r3
 801e884:	f003 0207 	and.w	r2, r3, #7
 801e888:	f001 0307 	and.w	r3, r1, #7
 801e88c:	bf58      	it	pl
 801e88e:	425a      	negpl	r2, r3
 801e890:	f1c2 0208 	rsb	r2, r2, #8
 801e894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e896:	4413      	add	r3, r2
 801e898:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t dataArr[ dwLen + 1 ] ;
 801e89a:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801e89c:	643c      	str	r4, [r7, #64]	; 0x40
 801e89e:	4623      	mov	r3, r4
 801e8a0:	3301      	adds	r3, #1
 801e8a2:	461a      	mov	r2, r3
 801e8a4:	f04f 0300 	mov.w	r3, #0
 801e8a8:	f04f 0000 	mov.w	r0, #0
 801e8ac:	f04f 0100 	mov.w	r1, #0
 801e8b0:	00d9      	lsls	r1, r3, #3
 801e8b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801e8b6:	00d0      	lsls	r0, r2, #3
 801e8b8:	4623      	mov	r3, r4
 801e8ba:	3301      	adds	r3, #1
 801e8bc:	461a      	mov	r2, r3
 801e8be:	f04f 0300 	mov.w	r3, #0
 801e8c2:	f04f 0000 	mov.w	r0, #0
 801e8c6:	f04f 0100 	mov.w	r1, #0
 801e8ca:	00d9      	lsls	r1, r3, #3
 801e8cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801e8d0:	00d0      	lsls	r0, r2, #3
 801e8d2:	4623      	mov	r3, r4
 801e8d4:	3301      	adds	r3, #1
 801e8d6:	3307      	adds	r3, #7
 801e8d8:	08db      	lsrs	r3, r3, #3
 801e8da:	00db      	lsls	r3, r3, #3
 801e8dc:	ebad 0d03 	sub.w	sp, sp, r3
 801e8e0:	466b      	mov	r3, sp
 801e8e2:	3300      	adds	r3, #0
 801e8e4:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset( (char*)dataArr, 0xFF, _dataLength + 1 ) ;
 801e8e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801e8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e8ea:	3301      	adds	r3, #1
 801e8ec:	461a      	mov	r2, r3
 801e8ee:	21ff      	movs	r1, #255	; 0xff
 801e8f0:	f000 fd76 	bl	801f3e0 <memset>
	memcpy( (char*)dataArr, (char*)_data, _dataLength ) ;
 801e8f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801e8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e8f8:	461a      	mov	r2, r3
 801e8fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801e8fc:	f000 fd48 	bl	801f390 <memcpy>
	uint64_t data = 0x0000000000000000 ;
 801e900:	f04f 0200 	mov.w	r2, #0
 801e904:	f04f 0300 	mov.w	r3, #0
 801e908:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	for( unsigned int i = 0; i < dwLen; i += 8 ) {
 801e90c:	2300      	movs	r3, #0
 801e90e:	657b      	str	r3, [r7, #84]	; 0x54
 801e910:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801e912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e914:	429a      	cmp	r2, r3
 801e916:	f080 80ed 	bcs.w	801eaf4 <_Z11Flash_writemPKhi+0x2e0>
		data |= dataArr[ i + 7 ] ; data <<= 8 ;
 801e91a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e91c:	1dda      	adds	r2, r3, #7
 801e91e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e920:	5c9b      	ldrb	r3, [r3, r2]
 801e922:	b2d8      	uxtb	r0, r3
 801e924:	f04f 0100 	mov.w	r1, #0
 801e928:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801e92c:	ea42 0400 	orr.w	r4, r2, r0
 801e930:	623c      	str	r4, [r7, #32]
 801e932:	430b      	orrs	r3, r1
 801e934:	627b      	str	r3, [r7, #36]	; 0x24
 801e936:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801e93a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 801e93e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801e942:	f04f 0000 	mov.w	r0, #0
 801e946:	f04f 0100 	mov.w	r1, #0
 801e94a:	0219      	lsls	r1, r3, #8
 801e94c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 801e950:	0210      	lsls	r0, r2, #8
 801e952:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
		data |= dataArr[ i + 6 ] ; data <<= 8 ;
 801e956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e958:	1d9a      	adds	r2, r3, #6
 801e95a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e95c:	5c9b      	ldrb	r3, [r3, r2]
 801e95e:	b2d8      	uxtb	r0, r3
 801e960:	f04f 0100 	mov.w	r1, #0
 801e964:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801e968:	ea42 0400 	orr.w	r4, r2, r0
 801e96c:	61bc      	str	r4, [r7, #24]
 801e96e:	430b      	orrs	r3, r1
 801e970:	61fb      	str	r3, [r7, #28]
 801e972:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801e976:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 801e97a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801e97e:	f04f 0000 	mov.w	r0, #0
 801e982:	f04f 0100 	mov.w	r1, #0
 801e986:	0219      	lsls	r1, r3, #8
 801e988:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 801e98c:	0210      	lsls	r0, r2, #8
 801e98e:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
		data |= dataArr[ i + 5 ] ; data <<= 8 ;
 801e992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e994:	1d5a      	adds	r2, r3, #5
 801e996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e998:	5c9b      	ldrb	r3, [r3, r2]
 801e99a:	b2d8      	uxtb	r0, r3
 801e99c:	f04f 0100 	mov.w	r1, #0
 801e9a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801e9a4:	ea42 0400 	orr.w	r4, r2, r0
 801e9a8:	613c      	str	r4, [r7, #16]
 801e9aa:	430b      	orrs	r3, r1
 801e9ac:	617b      	str	r3, [r7, #20]
 801e9ae:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801e9b2:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 801e9b6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801e9ba:	f04f 0000 	mov.w	r0, #0
 801e9be:	f04f 0100 	mov.w	r1, #0
 801e9c2:	0219      	lsls	r1, r3, #8
 801e9c4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 801e9c8:	0210      	lsls	r0, r2, #8
 801e9ca:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
		data |= dataArr[ i + 4 ] ; data <<= 8 ;
 801e9ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e9d0:	1d1a      	adds	r2, r3, #4
 801e9d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e9d4:	5c9b      	ldrb	r3, [r3, r2]
 801e9d6:	b2d8      	uxtb	r0, r3
 801e9d8:	f04f 0100 	mov.w	r1, #0
 801e9dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801e9e0:	ea42 0400 	orr.w	r4, r2, r0
 801e9e4:	60bc      	str	r4, [r7, #8]
 801e9e6:	430b      	orrs	r3, r1
 801e9e8:	60fb      	str	r3, [r7, #12]
 801e9ea:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801e9ee:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 801e9f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801e9f6:	f04f 0000 	mov.w	r0, #0
 801e9fa:	f04f 0100 	mov.w	r1, #0
 801e9fe:	0219      	lsls	r1, r3, #8
 801ea00:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 801ea04:	0210      	lsls	r0, r2, #8
 801ea06:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
		data |= dataArr[ i + 3 ] ; data <<= 8 ;
 801ea0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ea0c:	1cda      	adds	r2, r3, #3
 801ea0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ea10:	5c9b      	ldrb	r3, [r3, r2]
 801ea12:	b2d8      	uxtb	r0, r3
 801ea14:	f04f 0100 	mov.w	r1, #0
 801ea18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801ea1c:	ea42 0400 	orr.w	r4, r2, r0
 801ea20:	603c      	str	r4, [r7, #0]
 801ea22:	430b      	orrs	r3, r1
 801ea24:	607b      	str	r3, [r7, #4]
 801ea26:	e9d7 3400 	ldrd	r3, r4, [r7]
 801ea2a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 801ea2e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801ea32:	f04f 0000 	mov.w	r0, #0
 801ea36:	f04f 0100 	mov.w	r1, #0
 801ea3a:	0219      	lsls	r1, r3, #8
 801ea3c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 801ea40:	0210      	lsls	r0, r2, #8
 801ea42:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
		data |= dataArr[ i + 2 ] ; data <<= 8 ;
 801ea46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ea48:	1c9a      	adds	r2, r3, #2
 801ea4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ea4c:	5c9b      	ldrb	r3, [r3, r2]
 801ea4e:	b2d8      	uxtb	r0, r3
 801ea50:	f04f 0100 	mov.w	r1, #0
 801ea54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801ea58:	ea42 0500 	orr.w	r5, r2, r0
 801ea5c:	ea43 0601 	orr.w	r6, r3, r1
 801ea60:	e9c7 5612 	strd	r5, r6, [r7, #72]	; 0x48
 801ea64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801ea68:	f04f 0000 	mov.w	r0, #0
 801ea6c:	f04f 0100 	mov.w	r1, #0
 801ea70:	0219      	lsls	r1, r3, #8
 801ea72:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 801ea76:	0210      	lsls	r0, r2, #8
 801ea78:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
		data |= dataArr[ i + 1 ] ; data <<= 8 ;
 801ea7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ea7e:	1c5a      	adds	r2, r3, #1
 801ea80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ea82:	5c9b      	ldrb	r3, [r3, r2]
 801ea84:	b2d8      	uxtb	r0, r3
 801ea86:	f04f 0100 	mov.w	r1, #0
 801ea8a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801ea8e:	ea42 0a00 	orr.w	sl, r2, r0
 801ea92:	ea43 0b01 	orr.w	fp, r3, r1
 801ea96:	e9c7 ab12 	strd	sl, fp, [r7, #72]	; 0x48
 801ea9a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801ea9e:	f04f 0000 	mov.w	r0, #0
 801eaa2:	f04f 0100 	mov.w	r1, #0
 801eaa6:	0219      	lsls	r1, r3, #8
 801eaa8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 801eaac:	0210      	lsls	r0, r2, #8
 801eaae:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
		data |= dataArr[ i + 0 ] ;
 801eab2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801eab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801eab6:	4413      	add	r3, r2
 801eab8:	781b      	ldrb	r3, [r3, #0]
 801eaba:	b2d8      	uxtb	r0, r3
 801eabc:	f04f 0100 	mov.w	r1, #0
 801eac0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801eac4:	ea42 0800 	orr.w	r8, r2, r0
 801eac8:	ea43 0901 	orr.w	r9, r3, r1
 801eacc:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
		HAL_FLASH_Program( FLASH_TYPEPROGRAM_DOUBLEWORD, _address + i, data ) ;
 801ead0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ead2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ead4:	18d1      	adds	r1, r2, r3
 801ead6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801eada:	2000      	movs	r0, #0
 801eadc:	f7fc fde4 	bl	801b6a8 <HAL_FLASH_Program>
		data = 0x0000000000000000 ;
 801eae0:	f04f 0200 	mov.w	r2, #0
 801eae4:	f04f 0300 	mov.w	r3, #0
 801eae8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	for( unsigned int i = 0; i < dwLen; i += 8 ) {
 801eaec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801eaee:	3308      	adds	r3, #8
 801eaf0:	657b      	str	r3, [r7, #84]	; 0x54
 801eaf2:	e70d      	b.n	801e910 <_Z11Flash_writemPKhi+0xfc>
	HAL_FLASH_Lock() ;
 801eaf4:	f7fc fe66 	bl	801b7c4 <HAL_FLASH_Lock>
 801eaf8:	f8d7 d028 	ldr.w	sp, [r7, #40]	; 0x28
}
 801eafc:	bf00      	nop
 801eafe:	375c      	adds	r7, #92	; 0x5c
 801eb00:	46bd      	mov	sp, r7
 801eb02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eb06 <_Z22Flash_write_doubleWordmPKh>:



/*_________________________________________________________________________________________________________________________________*/
void  Flash_write_doubleWord( uint32_t _address, const uint8_t* _data ) {
 801eb06:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801eb0a:	b092      	sub	sp, #72	; 0x48
 801eb0c:	af00      	add	r7, sp, #0
 801eb0e:	62f8      	str	r0, [r7, #44]	; 0x2c
 801eb10:	62b9      	str	r1, [r7, #40]	; 0x28
	HAL_FLASH_Unlock() ;
 801eb12:	f7fc fe35 	bl	801b780 <HAL_FLASH_Unlock>

	uint8_t dataArr[9] ;
	memset( (char*)dataArr, 0x00, 9 ) ;
 801eb16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801eb1a:	2209      	movs	r2, #9
 801eb1c:	2100      	movs	r1, #0
 801eb1e:	4618      	mov	r0, r3
 801eb20:	f000 fc5e 	bl	801f3e0 <memset>
	memcpy( (char*)dataArr, (char*)_data, 8 ) ;
 801eb24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801eb28:	2208      	movs	r2, #8
 801eb2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801eb2c:	4618      	mov	r0, r3
 801eb2e:	f000 fc2f 	bl	801f390 <memcpy>

	uint64_t data = 0x00 ;
 801eb32:	f04f 0200 	mov.w	r2, #0
 801eb36:	f04f 0300 	mov.w	r3, #0
 801eb3a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

	data |= dataArr[7] ; data <<= 8 ;
 801eb3e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801eb42:	b2d8      	uxtb	r0, r3
 801eb44:	f04f 0100 	mov.w	r1, #0
 801eb48:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801eb4c:	ea42 0400 	orr.w	r4, r2, r0
 801eb50:	ea43 0501 	orr.w	r5, r3, r1
 801eb54:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40
 801eb58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801eb5c:	f04f 0000 	mov.w	r0, #0
 801eb60:	f04f 0100 	mov.w	r1, #0
 801eb64:	0219      	lsls	r1, r3, #8
 801eb66:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 801eb6a:	0210      	lsls	r0, r2, #8
 801eb6c:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
	data |= dataArr[6] ; data <<= 8 ;
 801eb70:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 801eb74:	b2d8      	uxtb	r0, r3
 801eb76:	f04f 0100 	mov.w	r1, #0
 801eb7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801eb7e:	ea42 0800 	orr.w	r8, r2, r0
 801eb82:	ea43 0901 	orr.w	r9, r3, r1
 801eb86:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
 801eb8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801eb8e:	f04f 0000 	mov.w	r0, #0
 801eb92:	f04f 0100 	mov.w	r1, #0
 801eb96:	0219      	lsls	r1, r3, #8
 801eb98:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 801eb9c:	0210      	lsls	r0, r2, #8
 801eb9e:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
	data |= dataArr[5] ; data <<= 8 ;
 801eba2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 801eba6:	b2d8      	uxtb	r0, r3
 801eba8:	f04f 0100 	mov.w	r1, #0
 801ebac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801ebb0:	ea42 0a00 	orr.w	sl, r2, r0
 801ebb4:	ea43 0b01 	orr.w	fp, r3, r1
 801ebb8:	e9c7 ab10 	strd	sl, fp, [r7, #64]	; 0x40
 801ebbc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801ebc0:	f04f 0200 	mov.w	r2, #0
 801ebc4:	f04f 0300 	mov.w	r3, #0
 801ebc8:	020b      	lsls	r3, r1, #8
 801ebca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801ebce:	0202      	lsls	r2, r0, #8
 801ebd0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	data |= dataArr[4] ; data <<= 8 ;
 801ebd4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801ebd8:	b2da      	uxtb	r2, r3
 801ebda:	f04f 0300 	mov.w	r3, #0
 801ebde:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801ebe2:	ea40 0402 	orr.w	r4, r0, r2
 801ebe6:	623c      	str	r4, [r7, #32]
 801ebe8:	430b      	orrs	r3, r1
 801ebea:	627b      	str	r3, [r7, #36]	; 0x24
 801ebec:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801ebf0:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 801ebf4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801ebf8:	f04f 0200 	mov.w	r2, #0
 801ebfc:	f04f 0300 	mov.w	r3, #0
 801ec00:	020b      	lsls	r3, r1, #8
 801ec02:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801ec06:	0202      	lsls	r2, r0, #8
 801ec08:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	data |= dataArr[3] ; data <<= 8 ;
 801ec0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801ec10:	b2da      	uxtb	r2, r3
 801ec12:	f04f 0300 	mov.w	r3, #0
 801ec16:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801ec1a:	ea40 0402 	orr.w	r4, r0, r2
 801ec1e:	61bc      	str	r4, [r7, #24]
 801ec20:	430b      	orrs	r3, r1
 801ec22:	61fb      	str	r3, [r7, #28]
 801ec24:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801ec28:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 801ec2c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801ec30:	f04f 0200 	mov.w	r2, #0
 801ec34:	f04f 0300 	mov.w	r3, #0
 801ec38:	020b      	lsls	r3, r1, #8
 801ec3a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801ec3e:	0202      	lsls	r2, r0, #8
 801ec40:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	data |= dataArr[2] ; data <<= 8 ;
 801ec44:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801ec48:	b2da      	uxtb	r2, r3
 801ec4a:	f04f 0300 	mov.w	r3, #0
 801ec4e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801ec52:	ea40 0402 	orr.w	r4, r0, r2
 801ec56:	613c      	str	r4, [r7, #16]
 801ec58:	430b      	orrs	r3, r1
 801ec5a:	617b      	str	r3, [r7, #20]
 801ec5c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801ec60:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 801ec64:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801ec68:	f04f 0200 	mov.w	r2, #0
 801ec6c:	f04f 0300 	mov.w	r3, #0
 801ec70:	020b      	lsls	r3, r1, #8
 801ec72:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801ec76:	0202      	lsls	r2, r0, #8
 801ec78:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	data |= dataArr[1] ; data <<= 8 ;
 801ec7c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801ec80:	b2da      	uxtb	r2, r3
 801ec82:	f04f 0300 	mov.w	r3, #0
 801ec86:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801ec8a:	ea40 0402 	orr.w	r4, r0, r2
 801ec8e:	60bc      	str	r4, [r7, #8]
 801ec90:	430b      	orrs	r3, r1
 801ec92:	60fb      	str	r3, [r7, #12]
 801ec94:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801ec98:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 801ec9c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801eca0:	f04f 0200 	mov.w	r2, #0
 801eca4:	f04f 0300 	mov.w	r3, #0
 801eca8:	020b      	lsls	r3, r1, #8
 801ecaa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801ecae:	0202      	lsls	r2, r0, #8
 801ecb0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	data |= dataArr[0] ;
 801ecb4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801ecb8:	b2da      	uxtb	r2, r3
 801ecba:	f04f 0300 	mov.w	r3, #0
 801ecbe:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801ecc2:	ea40 0402 	orr.w	r4, r0, r2
 801ecc6:	603c      	str	r4, [r7, #0]
 801ecc8:	430b      	orrs	r3, r1
 801ecca:	607b      	str	r3, [r7, #4]
 801eccc:	e9d7 3400 	ldrd	r3, r4, [r7]
 801ecd0:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

	HAL_FLASH_Program( FLASH_TYPEPROGRAM_DOUBLEWORD, _address, data ) ;
 801ecd4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801ecd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ecda:	2000      	movs	r0, #0
 801ecdc:	f7fc fce4 	bl	801b6a8 <HAL_FLASH_Program>

	HAL_FLASH_Lock() ;
 801ece0:	f7fc fd70 	bl	801b7c4 <HAL_FLASH_Lock>
}
 801ece4:	bf00      	nop
 801ece6:	3748      	adds	r7, #72	; 0x48
 801ece8:	46bd      	mov	sp, r7
 801ecea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0801ecf0 <_Z21Flash_read_doubleWordy>:



/*_________________________________________________________________________________________________________________________________*/
char* Flash_read_doubleWord( uint64_t _Address ) {
 801ecf0:	b580      	push	{r7, lr}
 801ecf2:	b088      	sub	sp, #32
 801ecf4:	af00      	add	r7, sp, #0
 801ecf6:	e9c7 0100 	strd	r0, r1, [r7]
	static char result[ 8 + 1 ] ;
	char temp[8] = {0} ;
 801ecfa:	2300      	movs	r3, #0
 801ecfc:	617b      	str	r3, [r7, #20]
 801ecfe:	2300      	movs	r3, #0
 801ed00:	61bb      	str	r3, [r7, #24]
	memset( result, 0x00 , 8 + 1 ) ;
 801ed02:	2209      	movs	r2, #9
 801ed04:	2100      	movs	r1, #0
 801ed06:	481d      	ldr	r0, [pc, #116]	; (801ed7c <_Z21Flash_read_doubleWordy+0x8c>)
 801ed08:	f000 fb6a 	bl	801f3e0 <memset>
	memset( temp, 0xFF , 8 ) ;
 801ed0c:	f107 0314 	add.w	r3, r7, #20
 801ed10:	2208      	movs	r2, #8
 801ed12:	21ff      	movs	r1, #255	; 0xff
 801ed14:	4618      	mov	r0, r3
 801ed16:	f000 fb63 	bl	801f3e0 <memset>
	uint64_t data[1] ;
	*data = *(__IO uint64_t *)_Address ;
 801ed1a:	683b      	ldr	r3, [r7, #0]
 801ed1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed20:	e9c7 2302 	strd	r2, r3, [r7, #8]

	for( int i = 0; i < 8; i++ ){
 801ed24:	2300      	movs	r3, #0
 801ed26:	61fb      	str	r3, [r7, #28]
 801ed28:	69fb      	ldr	r3, [r7, #28]
 801ed2a:	2b07      	cmp	r3, #7
 801ed2c:	dc18      	bgt.n	801ed60 <_Z21Flash_read_doubleWordy+0x70>
		temp[i] = data[0] ;
 801ed2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801ed32:	b2d1      	uxtb	r1, r2
 801ed34:	f107 0214 	add.w	r2, r7, #20
 801ed38:	69fb      	ldr	r3, [r7, #28]
 801ed3a:	4413      	add	r3, r2
 801ed3c:	460a      	mov	r2, r1
 801ed3e:	701a      	strb	r2, [r3, #0]
		data[0] >>= 8 ;
 801ed40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801ed44:	f04f 0200 	mov.w	r2, #0
 801ed48:	f04f 0300 	mov.w	r3, #0
 801ed4c:	0a02      	lsrs	r2, r0, #8
 801ed4e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801ed52:	0a0b      	lsrs	r3, r1, #8
 801ed54:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for( int i = 0; i < 8; i++ ){
 801ed58:	69fb      	ldr	r3, [r7, #28]
 801ed5a:	3301      	adds	r3, #1
 801ed5c:	61fb      	str	r3, [r7, #28]
 801ed5e:	e7e3      	b.n	801ed28 <_Z21Flash_read_doubleWordy+0x38>
	}

	memcpy( result, temp, 8 ) ;
 801ed60:	4b06      	ldr	r3, [pc, #24]	; (801ed7c <_Z21Flash_read_doubleWordy+0x8c>)
 801ed62:	461a      	mov	r2, r3
 801ed64:	f107 0314 	add.w	r3, r7, #20
 801ed68:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ed6c:	e882 0003 	stmia.w	r2, {r0, r1}
	return result ;
 801ed70:	4b02      	ldr	r3, [pc, #8]	; (801ed7c <_Z21Flash_read_doubleWordy+0x8c>)
}
 801ed72:	4618      	mov	r0, r3
 801ed74:	3720      	adds	r7, #32
 801ed76:	46bd      	mov	sp, r7
 801ed78:	bd80      	pop	{r7, pc}
 801ed7a:	bf00      	nop
 801ed7c:	200002c8 	.word	0x200002c8

0801ed80 <_ZN7Sim7600C1EP20__UART_HandleTypeDef>:

#include "hw.h"
#include "define.h"

/*____________________________________________________________________________________________________________________________________________*/
Sim7600::Sim7600( UART_HandleTypeDef * _huartx ) {
 801ed80:	b580      	push	{r7, lr}
 801ed82:	b082      	sub	sp, #8
 801ed84:	af00      	add	r7, sp, #0
 801ed86:	6078      	str	r0, [r7, #4]
 801ed88:	6039      	str	r1, [r7, #0]
 801ed8a:	4a0b      	ldr	r2, [pc, #44]	; (801edb8 <_ZN7Sim7600C1EP20__UART_HandleTypeDef+0x38>)
 801ed8c:	687b      	ldr	r3, [r7, #4]
 801ed8e:	601a      	str	r2, [r3, #0]
 801ed90:	687b      	ldr	r3, [r7, #4]
 801ed92:	3304      	adds	r3, #4
 801ed94:	4618      	mov	r0, r3
 801ed96:	f000 fa5e 	bl	801f256 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 801ed9a:	687b      	ldr	r3, [r7, #4]
 801ed9c:	2200      	movs	r2, #0
 801ed9e:	771a      	strb	r2, [r3, #28]
 801eda0:	687b      	ldr	r3, [r7, #4]
 801eda2:	2200      	movs	r2, #0
 801eda4:	775a      	strb	r2, [r3, #29]
	huartx = &*_huartx ;
 801eda6:	687b      	ldr	r3, [r7, #4]
 801eda8:	683a      	ldr	r2, [r7, #0]
 801edaa:	621a      	str	r2, [r3, #32]
}
 801edac:	687b      	ldr	r3, [r7, #4]
 801edae:	4618      	mov	r0, r3
 801edb0:	3708      	adds	r7, #8
 801edb2:	46bd      	mov	sp, r7
 801edb4:	bd80      	pop	{r7, pc}
 801edb6:	bf00      	nop
 801edb8:	08023f3c 	.word	0x08023f3c

0801edbc <_ZN7Sim7600D1Ev>:



/*____________________________________________________________________________________________________________________________________________*/
Sim7600::~Sim7600() {
 801edbc:	b580      	push	{r7, lr}
 801edbe:	b082      	sub	sp, #8
 801edc0:	af00      	add	r7, sp, #0
 801edc2:	6078      	str	r0, [r7, #4]
 801edc4:	4a06      	ldr	r2, [pc, #24]	; (801ede0 <_ZN7Sim7600D1Ev+0x24>)
 801edc6:	687b      	ldr	r3, [r7, #4]
 801edc8:	601a      	str	r2, [r3, #0]
 801edca:	687b      	ldr	r3, [r7, #4]
 801edcc:	3304      	adds	r3, #4
 801edce:	4618      	mov	r0, r3
 801edd0:	f000 fa48 	bl	801f264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

}
 801edd4:	687b      	ldr	r3, [r7, #4]
 801edd6:	4618      	mov	r0, r3
 801edd8:	3708      	adds	r7, #8
 801edda:	46bd      	mov	sp, r7
 801eddc:	bd80      	pop	{r7, pc}
 801edde:	bf00      	nop
 801ede0:	08023f3c 	.word	0x08023f3c

0801ede4 <_ZN7Sim7600D0Ev>:
Sim7600::~Sim7600() {
 801ede4:	b580      	push	{r7, lr}
 801ede6:	b082      	sub	sp, #8
 801ede8:	af00      	add	r7, sp, #0
 801edea:	6078      	str	r0, [r7, #4]
}
 801edec:	6878      	ldr	r0, [r7, #4]
 801edee:	f7ff ffe5 	bl	801edbc <_ZN7Sim7600D1Ev>
 801edf2:	2124      	movs	r1, #36	; 0x24
 801edf4:	6878      	ldr	r0, [r7, #4]
 801edf6:	f000 f9b9 	bl	801f16c <_ZdlPvj>
 801edfa:	687b      	ldr	r3, [r7, #4]
 801edfc:	4618      	mov	r0, r3
 801edfe:	3708      	adds	r7, #8
 801ee00:	46bd      	mov	sp, r7
 801ee02:	bd80      	pop	{r7, pc}

0801ee04 <_ZN7Sim76004initEv>:



/*____________________________________________________________________________________________________________________________________________*/
void Sim7600::init() {
 801ee04:	b580      	push	{r7, lr}
 801ee06:	b082      	sub	sp, #8
 801ee08:	af00      	add	r7, sp, #0
 801ee0a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT( huartx, (uint8_t*)rxByte, 1 ) ;
 801ee0c:	687b      	ldr	r3, [r7, #4]
 801ee0e:	6a18      	ldr	r0, [r3, #32]
 801ee10:	687b      	ldr	r3, [r7, #4]
 801ee12:	331c      	adds	r3, #28
 801ee14:	2201      	movs	r2, #1
 801ee16:	4619      	mov	r1, r3
 801ee18:	f7fe fcb0 	bl	801d77c <HAL_UART_Receive_IT>
}
 801ee1c:	bf00      	nop
 801ee1e:	3708      	adds	r7, #8
 801ee20:	46bd      	mov	sp, r7
 801ee22:	bd80      	pop	{r7, pc}

0801ee24 <_ZN7Sim760010irqProcessEv>:



/*____________________________________________________________________________________________________________________________________________*/
void Sim7600::irqProcess() {
 801ee24:	b580      	push	{r7, lr}
 801ee26:	b082      	sub	sp, #8
 801ee28:	af00      	add	r7, sp, #0
 801ee2a:	6078      	str	r0, [r7, #4]
	if ( rxByte[0] == '\r' )
 801ee2c:	687b      	ldr	r3, [r7, #4]
 801ee2e:	7f1b      	ldrb	r3, [r3, #28]
 801ee30:	2b0d      	cmp	r3, #13
 801ee32:	d103      	bne.n	801ee3c <_ZN7Sim760010irqProcessEv+0x18>
		rxDone_Flag = true ;
 801ee34:	687b      	ldr	r3, [r7, #4]
 801ee36:	2201      	movs	r2, #1
 801ee38:	775a      	strb	r2, [r3, #29]
 801ee3a:	e007      	b.n	801ee4c <_ZN7Sim760010irqProcessEv+0x28>
	else
		rxData += rxByte[0] ;
 801ee3c:	687b      	ldr	r3, [r7, #4]
 801ee3e:	1d1a      	adds	r2, r3, #4
 801ee40:	687b      	ldr	r3, [r7, #4]
 801ee42:	7f1b      	ldrb	r3, [r3, #28]
 801ee44:	4619      	mov	r1, r3
 801ee46:	4610      	mov	r0, r2
 801ee48:	f000 fa36 	bl	801f2b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>

	HAL_UART_Receive_IT( huartx, (uint8_t*)rxByte, 1 ) ;
 801ee4c:	687b      	ldr	r3, [r7, #4]
 801ee4e:	6a18      	ldr	r0, [r3, #32]
 801ee50:	687b      	ldr	r3, [r7, #4]
 801ee52:	331c      	adds	r3, #28
 801ee54:	2201      	movs	r2, #1
 801ee56:	4619      	mov	r1, r3
 801ee58:	f7fe fc90 	bl	801d77c <HAL_UART_Receive_IT>
}
 801ee5c:	bf00      	nop
 801ee5e:	3708      	adds	r7, #8
 801ee60:	46bd      	mov	sp, r7
 801ee62:	bd80      	pop	{r7, pc}

0801ee64 <_ZN7Sim76008memresetEv>:



/*____________________________________________________________________________________________________________________________________________*/
void Sim7600::memreset() {
 801ee64:	b580      	push	{r7, lr}
 801ee66:	b082      	sub	sp, #8
 801ee68:	af00      	add	r7, sp, #0
 801ee6a:	6078      	str	r0, [r7, #4]
	rxDone_Flag = false ;
 801ee6c:	687b      	ldr	r3, [r7, #4]
 801ee6e:	2200      	movs	r2, #0
 801ee70:	775a      	strb	r2, [r3, #29]
	rxByte[0] = 0 ;
 801ee72:	687b      	ldr	r3, [r7, #4]
 801ee74:	2200      	movs	r2, #0
 801ee76:	771a      	strb	r2, [r3, #28]
	rxData.clear() ;
 801ee78:	687b      	ldr	r3, [r7, #4]
 801ee7a:	3304      	adds	r3, #4
 801ee7c:	4618      	mov	r0, r3
 801ee7e:	f000 f9f7 	bl	801f270 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
}
 801ee82:	bf00      	nop
 801ee84:	3708      	adds	r7, #8
 801ee86:	46bd      	mov	sp, r7
 801ee88:	bd80      	pop	{r7, pc}
	...

0801ee8c <_ZN7Sim76007sendCmdEPKcS1_j>:



/*____________________________________________________________________________________________________________________________________________*/
bool Sim7600::sendCmd( const char* _cmd, const char* _expectedAnswer, unsigned int _timeout ) {
 801ee8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ee8e:	b089      	sub	sp, #36	; 0x24
 801ee90:	af00      	add	r7, sp, #0
 801ee92:	60f8      	str	r0, [r7, #12]
 801ee94:	60b9      	str	r1, [r7, #8]
 801ee96:	607a      	str	r2, [r7, #4]
 801ee98:	603b      	str	r3, [r7, #0]
		if ( strstr( rxData.c_str(), _expectedAnswer) != NULL )
			answer = 1;
	}

    HAL_Delay(10) ;
    return answer;
 801ee9a:	466b      	mov	r3, sp
 801ee9c:	461e      	mov	r6, r3
    bool answer=0;
 801ee9e:	2300      	movs	r3, #0
 801eea0:	77fb      	strb	r3, [r7, #31]
    memreset() ;
 801eea2:	68f8      	ldr	r0, [r7, #12]
 801eea4:	f7ff ffde 	bl	801ee64 <_ZN7Sim76008memresetEv>
    char cmd[ strlen( _cmd ) + 2 ] = {0} ;
 801eea8:	68b8      	ldr	r0, [r7, #8]
 801eeaa:	f7fa f9e1 	bl	8019270 <strlen>
 801eeae:	4603      	mov	r3, r0
 801eeb0:	3301      	adds	r3, #1
 801eeb2:	461c      	mov	r4, r3
 801eeb4:	61bc      	str	r4, [r7, #24]
 801eeb6:	4623      	mov	r3, r4
 801eeb8:	3301      	adds	r3, #1
 801eeba:	4618      	mov	r0, r3
 801eebc:	f04f 0100 	mov.w	r1, #0
 801eec0:	f04f 0200 	mov.w	r2, #0
 801eec4:	f04f 0300 	mov.w	r3, #0
 801eec8:	00cb      	lsls	r3, r1, #3
 801eeca:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 801eece:	00c2      	lsls	r2, r0, #3
 801eed0:	4623      	mov	r3, r4
 801eed2:	3301      	adds	r3, #1
 801eed4:	4618      	mov	r0, r3
 801eed6:	f04f 0100 	mov.w	r1, #0
 801eeda:	f04f 0200 	mov.w	r2, #0
 801eede:	f04f 0300 	mov.w	r3, #0
 801eee2:	00cb      	lsls	r3, r1, #3
 801eee4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 801eee8:	00c2      	lsls	r2, r0, #3
 801eeea:	4623      	mov	r3, r4
 801eeec:	3301      	adds	r3, #1
 801eeee:	3307      	adds	r3, #7
 801eef0:	08db      	lsrs	r3, r3, #3
 801eef2:	00db      	lsls	r3, r3, #3
 801eef4:	ebad 0d03 	sub.w	sp, sp, r3
 801eef8:	466b      	mov	r3, sp
 801eefa:	3300      	adds	r3, #0
 801eefc:	617b      	str	r3, [r7, #20]
 801eefe:	697b      	ldr	r3, [r7, #20]
 801ef00:	2200      	movs	r2, #0
 801ef02:	701a      	strb	r2, [r3, #0]
 801ef04:	1c5a      	adds	r2, r3, #1
 801ef06:	1e63      	subs	r3, r4, #1
 801ef08:	2b00      	cmp	r3, #0
 801ef0a:	db04      	blt.n	801ef16 <_ZN7Sim76007sendCmdEPKcS1_j+0x8a>
 801ef0c:	2100      	movs	r1, #0
 801ef0e:	7011      	strb	r1, [r2, #0]
 801ef10:	3201      	adds	r2, #1
 801ef12:	3b01      	subs	r3, #1
 801ef14:	e7f8      	b.n	801ef08 <_ZN7Sim76007sendCmdEPKcS1_j+0x7c>
    sprintf( cmd, "%s\r\r", _cmd ) ;
 801ef16:	697b      	ldr	r3, [r7, #20]
 801ef18:	68ba      	ldr	r2, [r7, #8]
 801ef1a:	4922      	ldr	r1, [pc, #136]	; (801efa4 <_ZN7Sim76007sendCmdEPKcS1_j+0x118>)
 801ef1c:	4618      	mov	r0, r3
 801ef1e:	f001 f9e5 	bl	80202ec <siprintf>
    HAL_UART_Transmit( huartx, (uint8_t*)cmd, strlen (cmd), _timeout) ;
 801ef22:	68fb      	ldr	r3, [r7, #12]
 801ef24:	6a1c      	ldr	r4, [r3, #32]
 801ef26:	697d      	ldr	r5, [r7, #20]
 801ef28:	697b      	ldr	r3, [r7, #20]
 801ef2a:	4618      	mov	r0, r3
 801ef2c:	f7fa f9a0 	bl	8019270 <strlen>
 801ef30:	4603      	mov	r3, r0
 801ef32:	b29a      	uxth	r2, r3
 801ef34:	683b      	ldr	r3, [r7, #0]
 801ef36:	4629      	mov	r1, r5
 801ef38:	4620      	mov	r0, r4
 801ef3a:	f7fe fb8b 	bl	801d654 <HAL_UART_Transmit>
    uint32_t tickStart = HAL_GetTick() ;
 801ef3e:	f7fc f9d9 	bl	801b2f4 <HAL_GetTick>
 801ef42:	6138      	str	r0, [r7, #16]
    while( answer == 0 ) {
 801ef44:	7ffb      	ldrb	r3, [r7, #31]
 801ef46:	2b00      	cmp	r3, #0
 801ef48:	d122      	bne.n	801ef90 <_ZN7Sim76007sendCmdEPKcS1_j+0x104>
		if ( (unsigned long)( HAL_GetTick() - tickStart )  >=  _timeout )
 801ef4a:	f7fc f9d3 	bl	801b2f4 <HAL_GetTick>
 801ef4e:	4602      	mov	r2, r0
 801ef50:	693b      	ldr	r3, [r7, #16]
 801ef52:	1ad3      	subs	r3, r2, r3
 801ef54:	683a      	ldr	r2, [r7, #0]
 801ef56:	429a      	cmp	r2, r3
 801ef58:	bf94      	ite	ls
 801ef5a:	2301      	movls	r3, #1
 801ef5c:	2300      	movhi	r3, #0
 801ef5e:	b2db      	uxtb	r3, r3
 801ef60:	2b00      	cmp	r3, #0
 801ef62:	d114      	bne.n	801ef8e <_ZN7Sim76007sendCmdEPKcS1_j+0x102>
		if ( strstr( rxData.c_str(), _expectedAnswer) != NULL )
 801ef64:	68fb      	ldr	r3, [r7, #12]
 801ef66:	3304      	adds	r3, #4
 801ef68:	4618      	mov	r0, r3
 801ef6a:	f000 f9ab 	bl	801f2c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 801ef6e:	4603      	mov	r3, r0
 801ef70:	6879      	ldr	r1, [r7, #4]
 801ef72:	4618      	mov	r0, r3
 801ef74:	f001 f9da 	bl	802032c <strstr>
 801ef78:	4603      	mov	r3, r0
 801ef7a:	2b00      	cmp	r3, #0
 801ef7c:	bf14      	ite	ne
 801ef7e:	2301      	movne	r3, #1
 801ef80:	2300      	moveq	r3, #0
 801ef82:	b2db      	uxtb	r3, r3
 801ef84:	2b00      	cmp	r3, #0
 801ef86:	d0dd      	beq.n	801ef44 <_ZN7Sim76007sendCmdEPKcS1_j+0xb8>
			answer = 1;
 801ef88:	2301      	movs	r3, #1
 801ef8a:	77fb      	strb	r3, [r7, #31]
    while( answer == 0 ) {
 801ef8c:	e7da      	b.n	801ef44 <_ZN7Sim76007sendCmdEPKcS1_j+0xb8>
			break ;
 801ef8e:	bf00      	nop
    HAL_Delay(10) ;
 801ef90:	200a      	movs	r0, #10
 801ef92:	f7fc f9bb 	bl	801b30c <HAL_Delay>
    return answer;
 801ef96:	7ffb      	ldrb	r3, [r7, #31]
 801ef98:	46b5      	mov	sp, r6
}
 801ef9a:	4618      	mov	r0, r3
 801ef9c:	3724      	adds	r7, #36	; 0x24
 801ef9e:	46bd      	mov	sp, r7
 801efa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801efa2:	bf00      	nop
 801efa4:	08023ee0 	.word	0x08023ee0

0801efa8 <_ZN8TerminalC1EP20__UART_HandleTypeDef>:

#include "hw.h"


/*____________________________________________________________________________________________________________________________________________*/
Terminal::Terminal( UART_HandleTypeDef * _huartx ) {
 801efa8:	b580      	push	{r7, lr}
 801efaa:	b082      	sub	sp, #8
 801efac:	af00      	add	r7, sp, #0
 801efae:	6078      	str	r0, [r7, #4]
 801efb0:	6039      	str	r1, [r7, #0]
 801efb2:	4a0b      	ldr	r2, [pc, #44]	; (801efe0 <_ZN8TerminalC1EP20__UART_HandleTypeDef+0x38>)
 801efb4:	687b      	ldr	r3, [r7, #4]
 801efb6:	601a      	str	r2, [r3, #0]
 801efb8:	687b      	ldr	r3, [r7, #4]
 801efba:	3304      	adds	r3, #4
 801efbc:	4618      	mov	r0, r3
 801efbe:	f000 f94a 	bl	801f256 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 801efc2:	687b      	ldr	r3, [r7, #4]
 801efc4:	2200      	movs	r2, #0
 801efc6:	771a      	strb	r2, [r3, #28]
 801efc8:	687b      	ldr	r3, [r7, #4]
 801efca:	2200      	movs	r2, #0
 801efcc:	775a      	strb	r2, [r3, #29]
	huartx = &*_huartx ;
 801efce:	687b      	ldr	r3, [r7, #4]
 801efd0:	683a      	ldr	r2, [r7, #0]
 801efd2:	621a      	str	r2, [r3, #32]

}
 801efd4:	687b      	ldr	r3, [r7, #4]
 801efd6:	4618      	mov	r0, r3
 801efd8:	3708      	adds	r7, #8
 801efda:	46bd      	mov	sp, r7
 801efdc:	bd80      	pop	{r7, pc}
 801efde:	bf00      	nop
 801efe0:	08023f4c 	.word	0x08023f4c

0801efe4 <_ZN8TerminalD1Ev>:



/*____________________________________________________________________________________________________________________________________________*/
Terminal::~Terminal() {
 801efe4:	b580      	push	{r7, lr}
 801efe6:	b082      	sub	sp, #8
 801efe8:	af00      	add	r7, sp, #0
 801efea:	6078      	str	r0, [r7, #4]
 801efec:	4a06      	ldr	r2, [pc, #24]	; (801f008 <_ZN8TerminalD1Ev+0x24>)
 801efee:	687b      	ldr	r3, [r7, #4]
 801eff0:	601a      	str	r2, [r3, #0]
 801eff2:	687b      	ldr	r3, [r7, #4]
 801eff4:	3304      	adds	r3, #4
 801eff6:	4618      	mov	r0, r3
 801eff8:	f000 f934 	bl	801f264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

}
 801effc:	687b      	ldr	r3, [r7, #4]
 801effe:	4618      	mov	r0, r3
 801f000:	3708      	adds	r7, #8
 801f002:	46bd      	mov	sp, r7
 801f004:	bd80      	pop	{r7, pc}
 801f006:	bf00      	nop
 801f008:	08023f4c 	.word	0x08023f4c

0801f00c <_ZN8TerminalD0Ev>:
Terminal::~Terminal() {
 801f00c:	b580      	push	{r7, lr}
 801f00e:	b082      	sub	sp, #8
 801f010:	af00      	add	r7, sp, #0
 801f012:	6078      	str	r0, [r7, #4]
}
 801f014:	6878      	ldr	r0, [r7, #4]
 801f016:	f7ff ffe5 	bl	801efe4 <_ZN8TerminalD1Ev>
 801f01a:	2124      	movs	r1, #36	; 0x24
 801f01c:	6878      	ldr	r0, [r7, #4]
 801f01e:	f000 f8a5 	bl	801f16c <_ZdlPvj>
 801f022:	687b      	ldr	r3, [r7, #4]
 801f024:	4618      	mov	r0, r3
 801f026:	3708      	adds	r7, #8
 801f028:	46bd      	mov	sp, r7
 801f02a:	bd80      	pop	{r7, pc}

0801f02c <_ZN8Terminal4initEv>:



/*____________________________________________________________________________________________________________________________________________*/
void Terminal::init() {
 801f02c:	b580      	push	{r7, lr}
 801f02e:	b082      	sub	sp, #8
 801f030:	af00      	add	r7, sp, #0
 801f032:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT( huartx, (uint8_t*)rxByte, 1 ) ;
 801f034:	687b      	ldr	r3, [r7, #4]
 801f036:	6a18      	ldr	r0, [r3, #32]
 801f038:	687b      	ldr	r3, [r7, #4]
 801f03a:	331c      	adds	r3, #28
 801f03c:	2201      	movs	r2, #1
 801f03e:	4619      	mov	r1, r3
 801f040:	f7fe fb9c 	bl	801d77c <HAL_UART_Receive_IT>
}
 801f044:	bf00      	nop
 801f046:	3708      	adds	r7, #8
 801f048:	46bd      	mov	sp, r7
 801f04a:	bd80      	pop	{r7, pc}

0801f04c <_ZN8Terminal10irqProcessEv>:



/*____________________________________________________________________________________________________________________________________________*/
void Terminal::irqProcess() {
 801f04c:	b580      	push	{r7, lr}
 801f04e:	b082      	sub	sp, #8
 801f050:	af00      	add	r7, sp, #0
 801f052:	6078      	str	r0, [r7, #4]
	if ( rxByte[0] == '\r' )
 801f054:	687b      	ldr	r3, [r7, #4]
 801f056:	7f1b      	ldrb	r3, [r3, #28]
 801f058:	2b0d      	cmp	r3, #13
 801f05a:	d103      	bne.n	801f064 <_ZN8Terminal10irqProcessEv+0x18>
		rxDone_Flag = true ;
 801f05c:	687b      	ldr	r3, [r7, #4]
 801f05e:	2201      	movs	r2, #1
 801f060:	775a      	strb	r2, [r3, #29]
 801f062:	e007      	b.n	801f074 <_ZN8Terminal10irqProcessEv+0x28>
	else
		rxData += rxByte[0] ;
 801f064:	687b      	ldr	r3, [r7, #4]
 801f066:	1d1a      	adds	r2, r3, #4
 801f068:	687b      	ldr	r3, [r7, #4]
 801f06a:	7f1b      	ldrb	r3, [r3, #28]
 801f06c:	4619      	mov	r1, r3
 801f06e:	4610      	mov	r0, r2
 801f070:	f000 f922 	bl	801f2b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>

	HAL_UART_Receive_IT( huartx, (uint8_t*)rxByte, 1 ) ;
 801f074:	687b      	ldr	r3, [r7, #4]
 801f076:	6a18      	ldr	r0, [r3, #32]
 801f078:	687b      	ldr	r3, [r7, #4]
 801f07a:	331c      	adds	r3, #28
 801f07c:	2201      	movs	r2, #1
 801f07e:	4619      	mov	r1, r3
 801f080:	f7fe fb7c 	bl	801d77c <HAL_UART_Receive_IT>
}
 801f084:	bf00      	nop
 801f086:	3708      	adds	r7, #8
 801f088:	46bd      	mov	sp, r7
 801f08a:	bd80      	pop	{r7, pc}

0801f08c <_ZN8Terminal5printEPKc>:



/*____________________________________________________________________________________________________________________________________________*/
void Terminal::print( const char* _info ) {
 801f08c:	b590      	push	{r4, r7, lr}
 801f08e:	b083      	sub	sp, #12
 801f090:	af00      	add	r7, sp, #0
 801f092:	6078      	str	r0, [r7, #4]
 801f094:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit( huartx, (uint8_t*)_info, strlen( _info ), 2000 ) ;
 801f096:	687b      	ldr	r3, [r7, #4]
 801f098:	6a1c      	ldr	r4, [r3, #32]
 801f09a:	6838      	ldr	r0, [r7, #0]
 801f09c:	f7fa f8e8 	bl	8019270 <strlen>
 801f0a0:	4603      	mov	r3, r0
 801f0a2:	b29a      	uxth	r2, r3
 801f0a4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801f0a8:	6839      	ldr	r1, [r7, #0]
 801f0aa:	4620      	mov	r0, r4
 801f0ac:	f7fe fad2 	bl	801d654 <HAL_UART_Transmit>
}
 801f0b0:	bf00      	nop
 801f0b2:	370c      	adds	r7, #12
 801f0b4:	46bd      	mov	sp, r7
 801f0b6:	bd90      	pop	{r4, r7, pc}

0801f0b8 <_ZN8Terminal7printlnEPKc>:



/*____________________________________________________________________________________________________________________________________________*/
void Terminal::println( const char* _info ) {
 801f0b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f0ba:	b085      	sub	sp, #20
 801f0bc:	af00      	add	r7, sp, #0
 801f0be:	6078      	str	r0, [r7, #4]
 801f0c0:	6039      	str	r1, [r7, #0]
	char info [ strlen( _info ) + 2 ] = {0} ;
	sprintf( info, "\n%s", _info ) ;

	HAL_UART_Transmit( huartx, (uint8_t*)info, strlen( info ), 2000 ) ;
 801f0c2:	466b      	mov	r3, sp
 801f0c4:	461e      	mov	r6, r3
	char info [ strlen( _info ) + 2 ] = {0} ;
 801f0c6:	6838      	ldr	r0, [r7, #0]
 801f0c8:	f7fa f8d2 	bl	8019270 <strlen>
 801f0cc:	4603      	mov	r3, r0
 801f0ce:	3301      	adds	r3, #1
 801f0d0:	461c      	mov	r4, r3
 801f0d2:	60fc      	str	r4, [r7, #12]
 801f0d4:	4623      	mov	r3, r4
 801f0d6:	3301      	adds	r3, #1
 801f0d8:	4618      	mov	r0, r3
 801f0da:	f04f 0100 	mov.w	r1, #0
 801f0de:	f04f 0200 	mov.w	r2, #0
 801f0e2:	f04f 0300 	mov.w	r3, #0
 801f0e6:	00cb      	lsls	r3, r1, #3
 801f0e8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 801f0ec:	00c2      	lsls	r2, r0, #3
 801f0ee:	4623      	mov	r3, r4
 801f0f0:	3301      	adds	r3, #1
 801f0f2:	4618      	mov	r0, r3
 801f0f4:	f04f 0100 	mov.w	r1, #0
 801f0f8:	f04f 0200 	mov.w	r2, #0
 801f0fc:	f04f 0300 	mov.w	r3, #0
 801f100:	00cb      	lsls	r3, r1, #3
 801f102:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 801f106:	00c2      	lsls	r2, r0, #3
 801f108:	4623      	mov	r3, r4
 801f10a:	3301      	adds	r3, #1
 801f10c:	3307      	adds	r3, #7
 801f10e:	08db      	lsrs	r3, r3, #3
 801f110:	00db      	lsls	r3, r3, #3
 801f112:	ebad 0d03 	sub.w	sp, sp, r3
 801f116:	466b      	mov	r3, sp
 801f118:	3300      	adds	r3, #0
 801f11a:	60bb      	str	r3, [r7, #8]
 801f11c:	68bb      	ldr	r3, [r7, #8]
 801f11e:	2200      	movs	r2, #0
 801f120:	701a      	strb	r2, [r3, #0]
 801f122:	1c5a      	adds	r2, r3, #1
 801f124:	1e63      	subs	r3, r4, #1
 801f126:	2b00      	cmp	r3, #0
 801f128:	db04      	blt.n	801f134 <_ZN8Terminal7printlnEPKc+0x7c>
 801f12a:	2100      	movs	r1, #0
 801f12c:	7011      	strb	r1, [r2, #0]
 801f12e:	3201      	adds	r2, #1
 801f130:	3b01      	subs	r3, #1
 801f132:	e7f8      	b.n	801f126 <_ZN8Terminal7printlnEPKc+0x6e>
	sprintf( info, "\n%s", _info ) ;
 801f134:	68bb      	ldr	r3, [r7, #8]
 801f136:	683a      	ldr	r2, [r7, #0]
 801f138:	490b      	ldr	r1, [pc, #44]	; (801f168 <_ZN8Terminal7printlnEPKc+0xb0>)
 801f13a:	4618      	mov	r0, r3
 801f13c:	f001 f8d6 	bl	80202ec <siprintf>
	HAL_UART_Transmit( huartx, (uint8_t*)info, strlen( info ), 2000 ) ;
 801f140:	687b      	ldr	r3, [r7, #4]
 801f142:	6a1c      	ldr	r4, [r3, #32]
 801f144:	68bd      	ldr	r5, [r7, #8]
 801f146:	68bb      	ldr	r3, [r7, #8]
 801f148:	4618      	mov	r0, r3
 801f14a:	f7fa f891 	bl	8019270 <strlen>
 801f14e:	4603      	mov	r3, r0
 801f150:	b29a      	uxth	r2, r3
 801f152:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801f156:	4629      	mov	r1, r5
 801f158:	4620      	mov	r0, r4
 801f15a:	f7fe fa7b 	bl	801d654 <HAL_UART_Transmit>
 801f15e:	46b5      	mov	sp, r6
}
 801f160:	bf00      	nop
 801f162:	3714      	adds	r7, #20
 801f164:	46bd      	mov	sp, r7
 801f166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f168:	08023ee8 	.word	0x08023ee8

0801f16c <_ZdlPvj>:
 801f16c:	f000 b8ac 	b.w	801f2c8 <_ZdlPv>

0801f170 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 801f170:	b10a      	cbz	r2, 801f176 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 801f172:	f000 b90d 	b.w	801f390 <memcpy>
 801f176:	4770      	bx	lr

0801f178 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 801f178:	b508      	push	{r3, lr}
 801f17a:	680b      	ldr	r3, [r1, #0]
 801f17c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f180:	d302      	bcc.n	801f188 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 801f182:	480d      	ldr	r0, [pc, #52]	; (801f1b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 801f184:	f000 f8b6 	bl	801f2f4 <_ZSt20__throw_length_errorPKc>
 801f188:	4293      	cmp	r3, r2
 801f18a:	d90b      	bls.n	801f1a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801f18c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 801f190:	ea4f 0042 	mov.w	r0, r2, lsl #1
 801f194:	d206      	bcs.n	801f1a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801f196:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801f19a:	bf2a      	itet	cs
 801f19c:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 801f1a0:	6008      	strcc	r0, [r1, #0]
 801f1a2:	600b      	strcs	r3, [r1, #0]
 801f1a4:	6808      	ldr	r0, [r1, #0]
 801f1a6:	3001      	adds	r0, #1
 801f1a8:	d501      	bpl.n	801f1ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 801f1aa:	f000 f8a0 	bl	801f2ee <_ZSt17__throw_bad_allocv>
 801f1ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801f1b2:	f000 b88b 	b.w	801f2cc <_Znwj>
 801f1b6:	bf00      	nop
 801f1b8:	08023f54 	.word	0x08023f54

0801f1bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 801f1bc:	f850 3b08 	ldr.w	r3, [r0], #8
 801f1c0:	4283      	cmp	r3, r0
 801f1c2:	d002      	beq.n	801f1ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 801f1c4:	4618      	mov	r0, r3
 801f1c6:	f000 b87f 	b.w	801f2c8 <_ZdlPv>
 801f1ca:	4770      	bx	lr

0801f1cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 801f1cc:	2a01      	cmp	r2, #1
 801f1ce:	b510      	push	{r4, lr}
 801f1d0:	d102      	bne.n	801f1d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 801f1d2:	780a      	ldrb	r2, [r1, #0]
 801f1d4:	7002      	strb	r2, [r0, #0]
 801f1d6:	bd10      	pop	{r4, pc}
 801f1d8:	f7ff ffca 	bl	801f170 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 801f1dc:	e7fb      	b.n	801f1d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0801f1de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 801f1de:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801f1e2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801f1e4:	461f      	mov	r7, r3
 801f1e6:	6843      	ldr	r3, [r0, #4]
 801f1e8:	eb01 0802 	add.w	r8, r1, r2
 801f1ec:	1ab2      	subs	r2, r6, r2
 801f1ee:	441a      	add	r2, r3
 801f1f0:	eba3 0908 	sub.w	r9, r3, r8
 801f1f4:	4603      	mov	r3, r0
 801f1f6:	9201      	str	r2, [sp, #4]
 801f1f8:	f853 2b08 	ldr.w	r2, [r3], #8
 801f1fc:	429a      	cmp	r2, r3
 801f1fe:	bf18      	it	ne
 801f200:	6882      	ldrne	r2, [r0, #8]
 801f202:	460d      	mov	r5, r1
 801f204:	bf08      	it	eq
 801f206:	220f      	moveq	r2, #15
 801f208:	a901      	add	r1, sp, #4
 801f20a:	4604      	mov	r4, r0
 801f20c:	f7ff ffb4 	bl	801f178 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801f210:	4682      	mov	sl, r0
 801f212:	b11d      	cbz	r5, 801f21c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 801f214:	6821      	ldr	r1, [r4, #0]
 801f216:	462a      	mov	r2, r5
 801f218:	f7ff ffd8 	bl	801f1cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801f21c:	b137      	cbz	r7, 801f22c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 801f21e:	b12e      	cbz	r6, 801f22c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 801f220:	4632      	mov	r2, r6
 801f222:	4639      	mov	r1, r7
 801f224:	eb0a 0005 	add.w	r0, sl, r5
 801f228:	f7ff ffd0 	bl	801f1cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801f22c:	f1b9 0f00 	cmp.w	r9, #0
 801f230:	d007      	beq.n	801f242 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 801f232:	6821      	ldr	r1, [r4, #0]
 801f234:	4435      	add	r5, r6
 801f236:	464a      	mov	r2, r9
 801f238:	4441      	add	r1, r8
 801f23a:	eb0a 0005 	add.w	r0, sl, r5
 801f23e:	f7ff ffc5 	bl	801f1cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801f242:	4620      	mov	r0, r4
 801f244:	f7ff ffba 	bl	801f1bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801f248:	9b01      	ldr	r3, [sp, #4]
 801f24a:	f8c4 a000 	str.w	sl, [r4]
 801f24e:	60a3      	str	r3, [r4, #8]
 801f250:	b002      	add	sp, #8
 801f252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801f256 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 801f256:	f100 0208 	add.w	r2, r0, #8
 801f25a:	6002      	str	r2, [r0, #0]
 801f25c:	2200      	movs	r2, #0
 801f25e:	6042      	str	r2, [r0, #4]
 801f260:	7202      	strb	r2, [r0, #8]
 801f262:	4770      	bx	lr

0801f264 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 801f264:	b510      	push	{r4, lr}
 801f266:	4604      	mov	r4, r0
 801f268:	f7ff ffa8 	bl	801f1bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801f26c:	4620      	mov	r0, r4
 801f26e:	bd10      	pop	{r4, pc}

0801f270 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 801f270:	6802      	ldr	r2, [r0, #0]
 801f272:	2300      	movs	r3, #0
 801f274:	6043      	str	r3, [r0, #4]
 801f276:	7013      	strb	r3, [r2, #0]
 801f278:	4770      	bx	lr

0801f27a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 801f27a:	4603      	mov	r3, r0
 801f27c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f27e:	f853 2b08 	ldr.w	r2, [r3], #8
 801f282:	6846      	ldr	r6, [r0, #4]
 801f284:	429a      	cmp	r2, r3
 801f286:	bf18      	it	ne
 801f288:	6883      	ldrne	r3, [r0, #8]
 801f28a:	f106 0501 	add.w	r5, r6, #1
 801f28e:	bf08      	it	eq
 801f290:	230f      	moveq	r3, #15
 801f292:	429d      	cmp	r5, r3
 801f294:	4604      	mov	r4, r0
 801f296:	460f      	mov	r7, r1
 801f298:	d906      	bls.n	801f2a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2e>
 801f29a:	2301      	movs	r3, #1
 801f29c:	9300      	str	r3, [sp, #0]
 801f29e:	2300      	movs	r3, #0
 801f2a0:	461a      	mov	r2, r3
 801f2a2:	4631      	mov	r1, r6
 801f2a4:	f7ff ff9b 	bl	801f1de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 801f2a8:	6823      	ldr	r3, [r4, #0]
 801f2aa:	559f      	strb	r7, [r3, r6]
 801f2ac:	6823      	ldr	r3, [r4, #0]
 801f2ae:	6065      	str	r5, [r4, #4]
 801f2b0:	2200      	movs	r2, #0
 801f2b2:	555a      	strb	r2, [r3, r5]
 801f2b4:	b003      	add	sp, #12
 801f2b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801f2b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>:
 801f2b8:	b510      	push	{r4, lr}
 801f2ba:	4604      	mov	r4, r0
 801f2bc:	f7ff ffdd 	bl	801f27a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
 801f2c0:	4620      	mov	r0, r4
 801f2c2:	bd10      	pop	{r4, pc}

0801f2c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 801f2c4:	6800      	ldr	r0, [r0, #0]
 801f2c6:	4770      	bx	lr

0801f2c8 <_ZdlPv>:
 801f2c8:	f000 b85a 	b.w	801f380 <free>

0801f2cc <_Znwj>:
 801f2cc:	2801      	cmp	r0, #1
 801f2ce:	bf38      	it	cc
 801f2d0:	2001      	movcc	r0, #1
 801f2d2:	b510      	push	{r4, lr}
 801f2d4:	4604      	mov	r4, r0
 801f2d6:	4620      	mov	r0, r4
 801f2d8:	f000 f84a 	bl	801f370 <malloc>
 801f2dc:	b930      	cbnz	r0, 801f2ec <_Znwj+0x20>
 801f2de:	f000 f80d 	bl	801f2fc <_ZSt15get_new_handlerv>
 801f2e2:	b908      	cbnz	r0, 801f2e8 <_Znwj+0x1c>
 801f2e4:	f000 f812 	bl	801f30c <abort>
 801f2e8:	4780      	blx	r0
 801f2ea:	e7f4      	b.n	801f2d6 <_Znwj+0xa>
 801f2ec:	bd10      	pop	{r4, pc}

0801f2ee <_ZSt17__throw_bad_allocv>:
 801f2ee:	b508      	push	{r3, lr}
 801f2f0:	f000 f80c 	bl	801f30c <abort>

0801f2f4 <_ZSt20__throw_length_errorPKc>:
 801f2f4:	b508      	push	{r3, lr}
 801f2f6:	f000 f809 	bl	801f30c <abort>
	...

0801f2fc <_ZSt15get_new_handlerv>:
 801f2fc:	4b02      	ldr	r3, [pc, #8]	; (801f308 <_ZSt15get_new_handlerv+0xc>)
 801f2fe:	6818      	ldr	r0, [r3, #0]
 801f300:	f3bf 8f5b 	dmb	ish
 801f304:	4770      	bx	lr
 801f306:	bf00      	nop
 801f308:	200002d4 	.word	0x200002d4

0801f30c <abort>:
 801f30c:	b508      	push	{r3, lr}
 801f30e:	2006      	movs	r0, #6
 801f310:	f000 ffd0 	bl	80202b4 <raise>
 801f314:	2001      	movs	r0, #1
 801f316:	f7fb fd97 	bl	801ae48 <_exit>
	...

0801f31c <__errno>:
 801f31c:	4b01      	ldr	r3, [pc, #4]	; (801f324 <__errno+0x8>)
 801f31e:	6818      	ldr	r0, [r3, #0]
 801f320:	4770      	bx	lr
 801f322:	bf00      	nop
 801f324:	20000030 	.word	0x20000030

0801f328 <__libc_init_array>:
 801f328:	b570      	push	{r4, r5, r6, lr}
 801f32a:	4d0d      	ldr	r5, [pc, #52]	; (801f360 <__libc_init_array+0x38>)
 801f32c:	4c0d      	ldr	r4, [pc, #52]	; (801f364 <__libc_init_array+0x3c>)
 801f32e:	1b64      	subs	r4, r4, r5
 801f330:	10a4      	asrs	r4, r4, #2
 801f332:	2600      	movs	r6, #0
 801f334:	42a6      	cmp	r6, r4
 801f336:	d109      	bne.n	801f34c <__libc_init_array+0x24>
 801f338:	4d0b      	ldr	r5, [pc, #44]	; (801f368 <__libc_init_array+0x40>)
 801f33a:	4c0c      	ldr	r4, [pc, #48]	; (801f36c <__libc_init_array+0x44>)
 801f33c:	f004 fc5e 	bl	8023bfc <_init>
 801f340:	1b64      	subs	r4, r4, r5
 801f342:	10a4      	asrs	r4, r4, #2
 801f344:	2600      	movs	r6, #0
 801f346:	42a6      	cmp	r6, r4
 801f348:	d105      	bne.n	801f356 <__libc_init_array+0x2e>
 801f34a:	bd70      	pop	{r4, r5, r6, pc}
 801f34c:	f855 3b04 	ldr.w	r3, [r5], #4
 801f350:	4798      	blx	r3
 801f352:	3601      	adds	r6, #1
 801f354:	e7ee      	b.n	801f334 <__libc_init_array+0xc>
 801f356:	f855 3b04 	ldr.w	r3, [r5], #4
 801f35a:	4798      	blx	r3
 801f35c:	3601      	adds	r6, #1
 801f35e:	e7f2      	b.n	801f346 <__libc_init_array+0x1e>
 801f360:	0802442c 	.word	0x0802442c
 801f364:	0802442c 	.word	0x0802442c
 801f368:	0802442c 	.word	0x0802442c
 801f36c:	08024434 	.word	0x08024434

0801f370 <malloc>:
 801f370:	4b02      	ldr	r3, [pc, #8]	; (801f37c <malloc+0xc>)
 801f372:	4601      	mov	r1, r0
 801f374:	6818      	ldr	r0, [r3, #0]
 801f376:	f000 b88b 	b.w	801f490 <_malloc_r>
 801f37a:	bf00      	nop
 801f37c:	20000030 	.word	0x20000030

0801f380 <free>:
 801f380:	4b02      	ldr	r3, [pc, #8]	; (801f38c <free+0xc>)
 801f382:	4601      	mov	r1, r0
 801f384:	6818      	ldr	r0, [r3, #0]
 801f386:	f000 b833 	b.w	801f3f0 <_free_r>
 801f38a:	bf00      	nop
 801f38c:	20000030 	.word	0x20000030

0801f390 <memcpy>:
 801f390:	440a      	add	r2, r1
 801f392:	4291      	cmp	r1, r2
 801f394:	f100 33ff 	add.w	r3, r0, #4294967295
 801f398:	d100      	bne.n	801f39c <memcpy+0xc>
 801f39a:	4770      	bx	lr
 801f39c:	b510      	push	{r4, lr}
 801f39e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f3a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f3a6:	4291      	cmp	r1, r2
 801f3a8:	d1f9      	bne.n	801f39e <memcpy+0xe>
 801f3aa:	bd10      	pop	{r4, pc}

0801f3ac <memmove>:
 801f3ac:	4288      	cmp	r0, r1
 801f3ae:	b510      	push	{r4, lr}
 801f3b0:	eb01 0402 	add.w	r4, r1, r2
 801f3b4:	d902      	bls.n	801f3bc <memmove+0x10>
 801f3b6:	4284      	cmp	r4, r0
 801f3b8:	4623      	mov	r3, r4
 801f3ba:	d807      	bhi.n	801f3cc <memmove+0x20>
 801f3bc:	1e43      	subs	r3, r0, #1
 801f3be:	42a1      	cmp	r1, r4
 801f3c0:	d008      	beq.n	801f3d4 <memmove+0x28>
 801f3c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f3c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801f3ca:	e7f8      	b.n	801f3be <memmove+0x12>
 801f3cc:	4402      	add	r2, r0
 801f3ce:	4601      	mov	r1, r0
 801f3d0:	428a      	cmp	r2, r1
 801f3d2:	d100      	bne.n	801f3d6 <memmove+0x2a>
 801f3d4:	bd10      	pop	{r4, pc}
 801f3d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801f3da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801f3de:	e7f7      	b.n	801f3d0 <memmove+0x24>

0801f3e0 <memset>:
 801f3e0:	4402      	add	r2, r0
 801f3e2:	4603      	mov	r3, r0
 801f3e4:	4293      	cmp	r3, r2
 801f3e6:	d100      	bne.n	801f3ea <memset+0xa>
 801f3e8:	4770      	bx	lr
 801f3ea:	f803 1b01 	strb.w	r1, [r3], #1
 801f3ee:	e7f9      	b.n	801f3e4 <memset+0x4>

0801f3f0 <_free_r>:
 801f3f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f3f2:	2900      	cmp	r1, #0
 801f3f4:	d048      	beq.n	801f488 <_free_r+0x98>
 801f3f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f3fa:	9001      	str	r0, [sp, #4]
 801f3fc:	2b00      	cmp	r3, #0
 801f3fe:	f1a1 0404 	sub.w	r4, r1, #4
 801f402:	bfb8      	it	lt
 801f404:	18e4      	addlt	r4, r4, r3
 801f406:	f003 f85d 	bl	80224c4 <__malloc_lock>
 801f40a:	4a20      	ldr	r2, [pc, #128]	; (801f48c <_free_r+0x9c>)
 801f40c:	9801      	ldr	r0, [sp, #4]
 801f40e:	6813      	ldr	r3, [r2, #0]
 801f410:	4615      	mov	r5, r2
 801f412:	b933      	cbnz	r3, 801f422 <_free_r+0x32>
 801f414:	6063      	str	r3, [r4, #4]
 801f416:	6014      	str	r4, [r2, #0]
 801f418:	b003      	add	sp, #12
 801f41a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f41e:	f003 b857 	b.w	80224d0 <__malloc_unlock>
 801f422:	42a3      	cmp	r3, r4
 801f424:	d90b      	bls.n	801f43e <_free_r+0x4e>
 801f426:	6821      	ldr	r1, [r4, #0]
 801f428:	1862      	adds	r2, r4, r1
 801f42a:	4293      	cmp	r3, r2
 801f42c:	bf04      	itt	eq
 801f42e:	681a      	ldreq	r2, [r3, #0]
 801f430:	685b      	ldreq	r3, [r3, #4]
 801f432:	6063      	str	r3, [r4, #4]
 801f434:	bf04      	itt	eq
 801f436:	1852      	addeq	r2, r2, r1
 801f438:	6022      	streq	r2, [r4, #0]
 801f43a:	602c      	str	r4, [r5, #0]
 801f43c:	e7ec      	b.n	801f418 <_free_r+0x28>
 801f43e:	461a      	mov	r2, r3
 801f440:	685b      	ldr	r3, [r3, #4]
 801f442:	b10b      	cbz	r3, 801f448 <_free_r+0x58>
 801f444:	42a3      	cmp	r3, r4
 801f446:	d9fa      	bls.n	801f43e <_free_r+0x4e>
 801f448:	6811      	ldr	r1, [r2, #0]
 801f44a:	1855      	adds	r5, r2, r1
 801f44c:	42a5      	cmp	r5, r4
 801f44e:	d10b      	bne.n	801f468 <_free_r+0x78>
 801f450:	6824      	ldr	r4, [r4, #0]
 801f452:	4421      	add	r1, r4
 801f454:	1854      	adds	r4, r2, r1
 801f456:	42a3      	cmp	r3, r4
 801f458:	6011      	str	r1, [r2, #0]
 801f45a:	d1dd      	bne.n	801f418 <_free_r+0x28>
 801f45c:	681c      	ldr	r4, [r3, #0]
 801f45e:	685b      	ldr	r3, [r3, #4]
 801f460:	6053      	str	r3, [r2, #4]
 801f462:	4421      	add	r1, r4
 801f464:	6011      	str	r1, [r2, #0]
 801f466:	e7d7      	b.n	801f418 <_free_r+0x28>
 801f468:	d902      	bls.n	801f470 <_free_r+0x80>
 801f46a:	230c      	movs	r3, #12
 801f46c:	6003      	str	r3, [r0, #0]
 801f46e:	e7d3      	b.n	801f418 <_free_r+0x28>
 801f470:	6825      	ldr	r5, [r4, #0]
 801f472:	1961      	adds	r1, r4, r5
 801f474:	428b      	cmp	r3, r1
 801f476:	bf04      	itt	eq
 801f478:	6819      	ldreq	r1, [r3, #0]
 801f47a:	685b      	ldreq	r3, [r3, #4]
 801f47c:	6063      	str	r3, [r4, #4]
 801f47e:	bf04      	itt	eq
 801f480:	1949      	addeq	r1, r1, r5
 801f482:	6021      	streq	r1, [r4, #0]
 801f484:	6054      	str	r4, [r2, #4]
 801f486:	e7c7      	b.n	801f418 <_free_r+0x28>
 801f488:	b003      	add	sp, #12
 801f48a:	bd30      	pop	{r4, r5, pc}
 801f48c:	200002d8 	.word	0x200002d8

0801f490 <_malloc_r>:
 801f490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f492:	1ccd      	adds	r5, r1, #3
 801f494:	f025 0503 	bic.w	r5, r5, #3
 801f498:	3508      	adds	r5, #8
 801f49a:	2d0c      	cmp	r5, #12
 801f49c:	bf38      	it	cc
 801f49e:	250c      	movcc	r5, #12
 801f4a0:	2d00      	cmp	r5, #0
 801f4a2:	4606      	mov	r6, r0
 801f4a4:	db01      	blt.n	801f4aa <_malloc_r+0x1a>
 801f4a6:	42a9      	cmp	r1, r5
 801f4a8:	d903      	bls.n	801f4b2 <_malloc_r+0x22>
 801f4aa:	230c      	movs	r3, #12
 801f4ac:	6033      	str	r3, [r6, #0]
 801f4ae:	2000      	movs	r0, #0
 801f4b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f4b2:	f003 f807 	bl	80224c4 <__malloc_lock>
 801f4b6:	4921      	ldr	r1, [pc, #132]	; (801f53c <_malloc_r+0xac>)
 801f4b8:	680a      	ldr	r2, [r1, #0]
 801f4ba:	4614      	mov	r4, r2
 801f4bc:	b99c      	cbnz	r4, 801f4e6 <_malloc_r+0x56>
 801f4be:	4f20      	ldr	r7, [pc, #128]	; (801f540 <_malloc_r+0xb0>)
 801f4c0:	683b      	ldr	r3, [r7, #0]
 801f4c2:	b923      	cbnz	r3, 801f4ce <_malloc_r+0x3e>
 801f4c4:	4621      	mov	r1, r4
 801f4c6:	4630      	mov	r0, r6
 801f4c8:	f000 feb6 	bl	8020238 <_sbrk_r>
 801f4cc:	6038      	str	r0, [r7, #0]
 801f4ce:	4629      	mov	r1, r5
 801f4d0:	4630      	mov	r0, r6
 801f4d2:	f000 feb1 	bl	8020238 <_sbrk_r>
 801f4d6:	1c43      	adds	r3, r0, #1
 801f4d8:	d123      	bne.n	801f522 <_malloc_r+0x92>
 801f4da:	230c      	movs	r3, #12
 801f4dc:	6033      	str	r3, [r6, #0]
 801f4de:	4630      	mov	r0, r6
 801f4e0:	f002 fff6 	bl	80224d0 <__malloc_unlock>
 801f4e4:	e7e3      	b.n	801f4ae <_malloc_r+0x1e>
 801f4e6:	6823      	ldr	r3, [r4, #0]
 801f4e8:	1b5b      	subs	r3, r3, r5
 801f4ea:	d417      	bmi.n	801f51c <_malloc_r+0x8c>
 801f4ec:	2b0b      	cmp	r3, #11
 801f4ee:	d903      	bls.n	801f4f8 <_malloc_r+0x68>
 801f4f0:	6023      	str	r3, [r4, #0]
 801f4f2:	441c      	add	r4, r3
 801f4f4:	6025      	str	r5, [r4, #0]
 801f4f6:	e004      	b.n	801f502 <_malloc_r+0x72>
 801f4f8:	6863      	ldr	r3, [r4, #4]
 801f4fa:	42a2      	cmp	r2, r4
 801f4fc:	bf0c      	ite	eq
 801f4fe:	600b      	streq	r3, [r1, #0]
 801f500:	6053      	strne	r3, [r2, #4]
 801f502:	4630      	mov	r0, r6
 801f504:	f002 ffe4 	bl	80224d0 <__malloc_unlock>
 801f508:	f104 000b 	add.w	r0, r4, #11
 801f50c:	1d23      	adds	r3, r4, #4
 801f50e:	f020 0007 	bic.w	r0, r0, #7
 801f512:	1ac2      	subs	r2, r0, r3
 801f514:	d0cc      	beq.n	801f4b0 <_malloc_r+0x20>
 801f516:	1a1b      	subs	r3, r3, r0
 801f518:	50a3      	str	r3, [r4, r2]
 801f51a:	e7c9      	b.n	801f4b0 <_malloc_r+0x20>
 801f51c:	4622      	mov	r2, r4
 801f51e:	6864      	ldr	r4, [r4, #4]
 801f520:	e7cc      	b.n	801f4bc <_malloc_r+0x2c>
 801f522:	1cc4      	adds	r4, r0, #3
 801f524:	f024 0403 	bic.w	r4, r4, #3
 801f528:	42a0      	cmp	r0, r4
 801f52a:	d0e3      	beq.n	801f4f4 <_malloc_r+0x64>
 801f52c:	1a21      	subs	r1, r4, r0
 801f52e:	4630      	mov	r0, r6
 801f530:	f000 fe82 	bl	8020238 <_sbrk_r>
 801f534:	3001      	adds	r0, #1
 801f536:	d1dd      	bne.n	801f4f4 <_malloc_r+0x64>
 801f538:	e7cf      	b.n	801f4da <_malloc_r+0x4a>
 801f53a:	bf00      	nop
 801f53c:	200002d8 	.word	0x200002d8
 801f540:	200002dc 	.word	0x200002dc

0801f544 <__cvt>:
 801f544:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f548:	ec55 4b10 	vmov	r4, r5, d0
 801f54c:	2d00      	cmp	r5, #0
 801f54e:	460e      	mov	r6, r1
 801f550:	4619      	mov	r1, r3
 801f552:	462b      	mov	r3, r5
 801f554:	bfbb      	ittet	lt
 801f556:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801f55a:	461d      	movlt	r5, r3
 801f55c:	2300      	movge	r3, #0
 801f55e:	232d      	movlt	r3, #45	; 0x2d
 801f560:	700b      	strb	r3, [r1, #0]
 801f562:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f564:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801f568:	4691      	mov	r9, r2
 801f56a:	f023 0820 	bic.w	r8, r3, #32
 801f56e:	bfbc      	itt	lt
 801f570:	4622      	movlt	r2, r4
 801f572:	4614      	movlt	r4, r2
 801f574:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801f578:	d005      	beq.n	801f586 <__cvt+0x42>
 801f57a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801f57e:	d100      	bne.n	801f582 <__cvt+0x3e>
 801f580:	3601      	adds	r6, #1
 801f582:	2102      	movs	r1, #2
 801f584:	e000      	b.n	801f588 <__cvt+0x44>
 801f586:	2103      	movs	r1, #3
 801f588:	ab03      	add	r3, sp, #12
 801f58a:	9301      	str	r3, [sp, #4]
 801f58c:	ab02      	add	r3, sp, #8
 801f58e:	9300      	str	r3, [sp, #0]
 801f590:	ec45 4b10 	vmov	d0, r4, r5
 801f594:	4653      	mov	r3, sl
 801f596:	4632      	mov	r2, r6
 801f598:	f001 fe22 	bl	80211e0 <_dtoa_r>
 801f59c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801f5a0:	4607      	mov	r7, r0
 801f5a2:	d102      	bne.n	801f5aa <__cvt+0x66>
 801f5a4:	f019 0f01 	tst.w	r9, #1
 801f5a8:	d022      	beq.n	801f5f0 <__cvt+0xac>
 801f5aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801f5ae:	eb07 0906 	add.w	r9, r7, r6
 801f5b2:	d110      	bne.n	801f5d6 <__cvt+0x92>
 801f5b4:	783b      	ldrb	r3, [r7, #0]
 801f5b6:	2b30      	cmp	r3, #48	; 0x30
 801f5b8:	d10a      	bne.n	801f5d0 <__cvt+0x8c>
 801f5ba:	2200      	movs	r2, #0
 801f5bc:	2300      	movs	r3, #0
 801f5be:	4620      	mov	r0, r4
 801f5c0:	4629      	mov	r1, r5
 801f5c2:	f7fa fa81 	bl	8019ac8 <__aeabi_dcmpeq>
 801f5c6:	b918      	cbnz	r0, 801f5d0 <__cvt+0x8c>
 801f5c8:	f1c6 0601 	rsb	r6, r6, #1
 801f5cc:	f8ca 6000 	str.w	r6, [sl]
 801f5d0:	f8da 3000 	ldr.w	r3, [sl]
 801f5d4:	4499      	add	r9, r3
 801f5d6:	2200      	movs	r2, #0
 801f5d8:	2300      	movs	r3, #0
 801f5da:	4620      	mov	r0, r4
 801f5dc:	4629      	mov	r1, r5
 801f5de:	f7fa fa73 	bl	8019ac8 <__aeabi_dcmpeq>
 801f5e2:	b108      	cbz	r0, 801f5e8 <__cvt+0xa4>
 801f5e4:	f8cd 900c 	str.w	r9, [sp, #12]
 801f5e8:	2230      	movs	r2, #48	; 0x30
 801f5ea:	9b03      	ldr	r3, [sp, #12]
 801f5ec:	454b      	cmp	r3, r9
 801f5ee:	d307      	bcc.n	801f600 <__cvt+0xbc>
 801f5f0:	9b03      	ldr	r3, [sp, #12]
 801f5f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f5f4:	1bdb      	subs	r3, r3, r7
 801f5f6:	4638      	mov	r0, r7
 801f5f8:	6013      	str	r3, [r2, #0]
 801f5fa:	b004      	add	sp, #16
 801f5fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f600:	1c59      	adds	r1, r3, #1
 801f602:	9103      	str	r1, [sp, #12]
 801f604:	701a      	strb	r2, [r3, #0]
 801f606:	e7f0      	b.n	801f5ea <__cvt+0xa6>

0801f608 <__exponent>:
 801f608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f60a:	4603      	mov	r3, r0
 801f60c:	2900      	cmp	r1, #0
 801f60e:	bfb8      	it	lt
 801f610:	4249      	neglt	r1, r1
 801f612:	f803 2b02 	strb.w	r2, [r3], #2
 801f616:	bfb4      	ite	lt
 801f618:	222d      	movlt	r2, #45	; 0x2d
 801f61a:	222b      	movge	r2, #43	; 0x2b
 801f61c:	2909      	cmp	r1, #9
 801f61e:	7042      	strb	r2, [r0, #1]
 801f620:	dd2a      	ble.n	801f678 <__exponent+0x70>
 801f622:	f10d 0407 	add.w	r4, sp, #7
 801f626:	46a4      	mov	ip, r4
 801f628:	270a      	movs	r7, #10
 801f62a:	46a6      	mov	lr, r4
 801f62c:	460a      	mov	r2, r1
 801f62e:	fb91 f6f7 	sdiv	r6, r1, r7
 801f632:	fb07 1516 	mls	r5, r7, r6, r1
 801f636:	3530      	adds	r5, #48	; 0x30
 801f638:	2a63      	cmp	r2, #99	; 0x63
 801f63a:	f104 34ff 	add.w	r4, r4, #4294967295
 801f63e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801f642:	4631      	mov	r1, r6
 801f644:	dcf1      	bgt.n	801f62a <__exponent+0x22>
 801f646:	3130      	adds	r1, #48	; 0x30
 801f648:	f1ae 0502 	sub.w	r5, lr, #2
 801f64c:	f804 1c01 	strb.w	r1, [r4, #-1]
 801f650:	1c44      	adds	r4, r0, #1
 801f652:	4629      	mov	r1, r5
 801f654:	4561      	cmp	r1, ip
 801f656:	d30a      	bcc.n	801f66e <__exponent+0x66>
 801f658:	f10d 0209 	add.w	r2, sp, #9
 801f65c:	eba2 020e 	sub.w	r2, r2, lr
 801f660:	4565      	cmp	r5, ip
 801f662:	bf88      	it	hi
 801f664:	2200      	movhi	r2, #0
 801f666:	4413      	add	r3, r2
 801f668:	1a18      	subs	r0, r3, r0
 801f66a:	b003      	add	sp, #12
 801f66c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f66e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f672:	f804 2f01 	strb.w	r2, [r4, #1]!
 801f676:	e7ed      	b.n	801f654 <__exponent+0x4c>
 801f678:	2330      	movs	r3, #48	; 0x30
 801f67a:	3130      	adds	r1, #48	; 0x30
 801f67c:	7083      	strb	r3, [r0, #2]
 801f67e:	70c1      	strb	r1, [r0, #3]
 801f680:	1d03      	adds	r3, r0, #4
 801f682:	e7f1      	b.n	801f668 <__exponent+0x60>

0801f684 <_printf_float>:
 801f684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f688:	ed2d 8b02 	vpush	{d8}
 801f68c:	b08d      	sub	sp, #52	; 0x34
 801f68e:	460c      	mov	r4, r1
 801f690:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801f694:	4616      	mov	r6, r2
 801f696:	461f      	mov	r7, r3
 801f698:	4605      	mov	r5, r0
 801f69a:	f002 fefd 	bl	8022498 <_localeconv_r>
 801f69e:	f8d0 a000 	ldr.w	sl, [r0]
 801f6a2:	4650      	mov	r0, sl
 801f6a4:	f7f9 fde4 	bl	8019270 <strlen>
 801f6a8:	2300      	movs	r3, #0
 801f6aa:	930a      	str	r3, [sp, #40]	; 0x28
 801f6ac:	6823      	ldr	r3, [r4, #0]
 801f6ae:	9305      	str	r3, [sp, #20]
 801f6b0:	f8d8 3000 	ldr.w	r3, [r8]
 801f6b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 801f6b8:	3307      	adds	r3, #7
 801f6ba:	f023 0307 	bic.w	r3, r3, #7
 801f6be:	f103 0208 	add.w	r2, r3, #8
 801f6c2:	f8c8 2000 	str.w	r2, [r8]
 801f6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f6ca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801f6ce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801f6d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801f6d6:	9307      	str	r3, [sp, #28]
 801f6d8:	f8cd 8018 	str.w	r8, [sp, #24]
 801f6dc:	ee08 0a10 	vmov	s16, r0
 801f6e0:	4b9f      	ldr	r3, [pc, #636]	; (801f960 <_printf_float+0x2dc>)
 801f6e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f6e6:	f04f 32ff 	mov.w	r2, #4294967295
 801f6ea:	f7fa fa1f 	bl	8019b2c <__aeabi_dcmpun>
 801f6ee:	bb88      	cbnz	r0, 801f754 <_printf_float+0xd0>
 801f6f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f6f4:	4b9a      	ldr	r3, [pc, #616]	; (801f960 <_printf_float+0x2dc>)
 801f6f6:	f04f 32ff 	mov.w	r2, #4294967295
 801f6fa:	f7fa f9f9 	bl	8019af0 <__aeabi_dcmple>
 801f6fe:	bb48      	cbnz	r0, 801f754 <_printf_float+0xd0>
 801f700:	2200      	movs	r2, #0
 801f702:	2300      	movs	r3, #0
 801f704:	4640      	mov	r0, r8
 801f706:	4649      	mov	r1, r9
 801f708:	f7fa f9e8 	bl	8019adc <__aeabi_dcmplt>
 801f70c:	b110      	cbz	r0, 801f714 <_printf_float+0x90>
 801f70e:	232d      	movs	r3, #45	; 0x2d
 801f710:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f714:	4b93      	ldr	r3, [pc, #588]	; (801f964 <_printf_float+0x2e0>)
 801f716:	4894      	ldr	r0, [pc, #592]	; (801f968 <_printf_float+0x2e4>)
 801f718:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801f71c:	bf94      	ite	ls
 801f71e:	4698      	movls	r8, r3
 801f720:	4680      	movhi	r8, r0
 801f722:	2303      	movs	r3, #3
 801f724:	6123      	str	r3, [r4, #16]
 801f726:	9b05      	ldr	r3, [sp, #20]
 801f728:	f023 0204 	bic.w	r2, r3, #4
 801f72c:	6022      	str	r2, [r4, #0]
 801f72e:	f04f 0900 	mov.w	r9, #0
 801f732:	9700      	str	r7, [sp, #0]
 801f734:	4633      	mov	r3, r6
 801f736:	aa0b      	add	r2, sp, #44	; 0x2c
 801f738:	4621      	mov	r1, r4
 801f73a:	4628      	mov	r0, r5
 801f73c:	f000 f9d8 	bl	801faf0 <_printf_common>
 801f740:	3001      	adds	r0, #1
 801f742:	f040 8090 	bne.w	801f866 <_printf_float+0x1e2>
 801f746:	f04f 30ff 	mov.w	r0, #4294967295
 801f74a:	b00d      	add	sp, #52	; 0x34
 801f74c:	ecbd 8b02 	vpop	{d8}
 801f750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f754:	4642      	mov	r2, r8
 801f756:	464b      	mov	r3, r9
 801f758:	4640      	mov	r0, r8
 801f75a:	4649      	mov	r1, r9
 801f75c:	f7fa f9e6 	bl	8019b2c <__aeabi_dcmpun>
 801f760:	b140      	cbz	r0, 801f774 <_printf_float+0xf0>
 801f762:	464b      	mov	r3, r9
 801f764:	2b00      	cmp	r3, #0
 801f766:	bfbc      	itt	lt
 801f768:	232d      	movlt	r3, #45	; 0x2d
 801f76a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801f76e:	487f      	ldr	r0, [pc, #508]	; (801f96c <_printf_float+0x2e8>)
 801f770:	4b7f      	ldr	r3, [pc, #508]	; (801f970 <_printf_float+0x2ec>)
 801f772:	e7d1      	b.n	801f718 <_printf_float+0x94>
 801f774:	6863      	ldr	r3, [r4, #4]
 801f776:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801f77a:	9206      	str	r2, [sp, #24]
 801f77c:	1c5a      	adds	r2, r3, #1
 801f77e:	d13f      	bne.n	801f800 <_printf_float+0x17c>
 801f780:	2306      	movs	r3, #6
 801f782:	6063      	str	r3, [r4, #4]
 801f784:	9b05      	ldr	r3, [sp, #20]
 801f786:	6861      	ldr	r1, [r4, #4]
 801f788:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801f78c:	2300      	movs	r3, #0
 801f78e:	9303      	str	r3, [sp, #12]
 801f790:	ab0a      	add	r3, sp, #40	; 0x28
 801f792:	e9cd b301 	strd	fp, r3, [sp, #4]
 801f796:	ab09      	add	r3, sp, #36	; 0x24
 801f798:	ec49 8b10 	vmov	d0, r8, r9
 801f79c:	9300      	str	r3, [sp, #0]
 801f79e:	6022      	str	r2, [r4, #0]
 801f7a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801f7a4:	4628      	mov	r0, r5
 801f7a6:	f7ff fecd 	bl	801f544 <__cvt>
 801f7aa:	9b06      	ldr	r3, [sp, #24]
 801f7ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f7ae:	2b47      	cmp	r3, #71	; 0x47
 801f7b0:	4680      	mov	r8, r0
 801f7b2:	d108      	bne.n	801f7c6 <_printf_float+0x142>
 801f7b4:	1cc8      	adds	r0, r1, #3
 801f7b6:	db02      	blt.n	801f7be <_printf_float+0x13a>
 801f7b8:	6863      	ldr	r3, [r4, #4]
 801f7ba:	4299      	cmp	r1, r3
 801f7bc:	dd41      	ble.n	801f842 <_printf_float+0x1be>
 801f7be:	f1ab 0b02 	sub.w	fp, fp, #2
 801f7c2:	fa5f fb8b 	uxtb.w	fp, fp
 801f7c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801f7ca:	d820      	bhi.n	801f80e <_printf_float+0x18a>
 801f7cc:	3901      	subs	r1, #1
 801f7ce:	465a      	mov	r2, fp
 801f7d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801f7d4:	9109      	str	r1, [sp, #36]	; 0x24
 801f7d6:	f7ff ff17 	bl	801f608 <__exponent>
 801f7da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f7dc:	1813      	adds	r3, r2, r0
 801f7de:	2a01      	cmp	r2, #1
 801f7e0:	4681      	mov	r9, r0
 801f7e2:	6123      	str	r3, [r4, #16]
 801f7e4:	dc02      	bgt.n	801f7ec <_printf_float+0x168>
 801f7e6:	6822      	ldr	r2, [r4, #0]
 801f7e8:	07d2      	lsls	r2, r2, #31
 801f7ea:	d501      	bpl.n	801f7f0 <_printf_float+0x16c>
 801f7ec:	3301      	adds	r3, #1
 801f7ee:	6123      	str	r3, [r4, #16]
 801f7f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801f7f4:	2b00      	cmp	r3, #0
 801f7f6:	d09c      	beq.n	801f732 <_printf_float+0xae>
 801f7f8:	232d      	movs	r3, #45	; 0x2d
 801f7fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f7fe:	e798      	b.n	801f732 <_printf_float+0xae>
 801f800:	9a06      	ldr	r2, [sp, #24]
 801f802:	2a47      	cmp	r2, #71	; 0x47
 801f804:	d1be      	bne.n	801f784 <_printf_float+0x100>
 801f806:	2b00      	cmp	r3, #0
 801f808:	d1bc      	bne.n	801f784 <_printf_float+0x100>
 801f80a:	2301      	movs	r3, #1
 801f80c:	e7b9      	b.n	801f782 <_printf_float+0xfe>
 801f80e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801f812:	d118      	bne.n	801f846 <_printf_float+0x1c2>
 801f814:	2900      	cmp	r1, #0
 801f816:	6863      	ldr	r3, [r4, #4]
 801f818:	dd0b      	ble.n	801f832 <_printf_float+0x1ae>
 801f81a:	6121      	str	r1, [r4, #16]
 801f81c:	b913      	cbnz	r3, 801f824 <_printf_float+0x1a0>
 801f81e:	6822      	ldr	r2, [r4, #0]
 801f820:	07d0      	lsls	r0, r2, #31
 801f822:	d502      	bpl.n	801f82a <_printf_float+0x1a6>
 801f824:	3301      	adds	r3, #1
 801f826:	440b      	add	r3, r1
 801f828:	6123      	str	r3, [r4, #16]
 801f82a:	65a1      	str	r1, [r4, #88]	; 0x58
 801f82c:	f04f 0900 	mov.w	r9, #0
 801f830:	e7de      	b.n	801f7f0 <_printf_float+0x16c>
 801f832:	b913      	cbnz	r3, 801f83a <_printf_float+0x1b6>
 801f834:	6822      	ldr	r2, [r4, #0]
 801f836:	07d2      	lsls	r2, r2, #31
 801f838:	d501      	bpl.n	801f83e <_printf_float+0x1ba>
 801f83a:	3302      	adds	r3, #2
 801f83c:	e7f4      	b.n	801f828 <_printf_float+0x1a4>
 801f83e:	2301      	movs	r3, #1
 801f840:	e7f2      	b.n	801f828 <_printf_float+0x1a4>
 801f842:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801f846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f848:	4299      	cmp	r1, r3
 801f84a:	db05      	blt.n	801f858 <_printf_float+0x1d4>
 801f84c:	6823      	ldr	r3, [r4, #0]
 801f84e:	6121      	str	r1, [r4, #16]
 801f850:	07d8      	lsls	r0, r3, #31
 801f852:	d5ea      	bpl.n	801f82a <_printf_float+0x1a6>
 801f854:	1c4b      	adds	r3, r1, #1
 801f856:	e7e7      	b.n	801f828 <_printf_float+0x1a4>
 801f858:	2900      	cmp	r1, #0
 801f85a:	bfd4      	ite	le
 801f85c:	f1c1 0202 	rsble	r2, r1, #2
 801f860:	2201      	movgt	r2, #1
 801f862:	4413      	add	r3, r2
 801f864:	e7e0      	b.n	801f828 <_printf_float+0x1a4>
 801f866:	6823      	ldr	r3, [r4, #0]
 801f868:	055a      	lsls	r2, r3, #21
 801f86a:	d407      	bmi.n	801f87c <_printf_float+0x1f8>
 801f86c:	6923      	ldr	r3, [r4, #16]
 801f86e:	4642      	mov	r2, r8
 801f870:	4631      	mov	r1, r6
 801f872:	4628      	mov	r0, r5
 801f874:	47b8      	blx	r7
 801f876:	3001      	adds	r0, #1
 801f878:	d12c      	bne.n	801f8d4 <_printf_float+0x250>
 801f87a:	e764      	b.n	801f746 <_printf_float+0xc2>
 801f87c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801f880:	f240 80e0 	bls.w	801fa44 <_printf_float+0x3c0>
 801f884:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801f888:	2200      	movs	r2, #0
 801f88a:	2300      	movs	r3, #0
 801f88c:	f7fa f91c 	bl	8019ac8 <__aeabi_dcmpeq>
 801f890:	2800      	cmp	r0, #0
 801f892:	d034      	beq.n	801f8fe <_printf_float+0x27a>
 801f894:	4a37      	ldr	r2, [pc, #220]	; (801f974 <_printf_float+0x2f0>)
 801f896:	2301      	movs	r3, #1
 801f898:	4631      	mov	r1, r6
 801f89a:	4628      	mov	r0, r5
 801f89c:	47b8      	blx	r7
 801f89e:	3001      	adds	r0, #1
 801f8a0:	f43f af51 	beq.w	801f746 <_printf_float+0xc2>
 801f8a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f8a8:	429a      	cmp	r2, r3
 801f8aa:	db02      	blt.n	801f8b2 <_printf_float+0x22e>
 801f8ac:	6823      	ldr	r3, [r4, #0]
 801f8ae:	07d8      	lsls	r0, r3, #31
 801f8b0:	d510      	bpl.n	801f8d4 <_printf_float+0x250>
 801f8b2:	ee18 3a10 	vmov	r3, s16
 801f8b6:	4652      	mov	r2, sl
 801f8b8:	4631      	mov	r1, r6
 801f8ba:	4628      	mov	r0, r5
 801f8bc:	47b8      	blx	r7
 801f8be:	3001      	adds	r0, #1
 801f8c0:	f43f af41 	beq.w	801f746 <_printf_float+0xc2>
 801f8c4:	f04f 0800 	mov.w	r8, #0
 801f8c8:	f104 091a 	add.w	r9, r4, #26
 801f8cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f8ce:	3b01      	subs	r3, #1
 801f8d0:	4543      	cmp	r3, r8
 801f8d2:	dc09      	bgt.n	801f8e8 <_printf_float+0x264>
 801f8d4:	6823      	ldr	r3, [r4, #0]
 801f8d6:	079b      	lsls	r3, r3, #30
 801f8d8:	f100 8105 	bmi.w	801fae6 <_printf_float+0x462>
 801f8dc:	68e0      	ldr	r0, [r4, #12]
 801f8de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f8e0:	4298      	cmp	r0, r3
 801f8e2:	bfb8      	it	lt
 801f8e4:	4618      	movlt	r0, r3
 801f8e6:	e730      	b.n	801f74a <_printf_float+0xc6>
 801f8e8:	2301      	movs	r3, #1
 801f8ea:	464a      	mov	r2, r9
 801f8ec:	4631      	mov	r1, r6
 801f8ee:	4628      	mov	r0, r5
 801f8f0:	47b8      	blx	r7
 801f8f2:	3001      	adds	r0, #1
 801f8f4:	f43f af27 	beq.w	801f746 <_printf_float+0xc2>
 801f8f8:	f108 0801 	add.w	r8, r8, #1
 801f8fc:	e7e6      	b.n	801f8cc <_printf_float+0x248>
 801f8fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f900:	2b00      	cmp	r3, #0
 801f902:	dc39      	bgt.n	801f978 <_printf_float+0x2f4>
 801f904:	4a1b      	ldr	r2, [pc, #108]	; (801f974 <_printf_float+0x2f0>)
 801f906:	2301      	movs	r3, #1
 801f908:	4631      	mov	r1, r6
 801f90a:	4628      	mov	r0, r5
 801f90c:	47b8      	blx	r7
 801f90e:	3001      	adds	r0, #1
 801f910:	f43f af19 	beq.w	801f746 <_printf_float+0xc2>
 801f914:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f918:	4313      	orrs	r3, r2
 801f91a:	d102      	bne.n	801f922 <_printf_float+0x29e>
 801f91c:	6823      	ldr	r3, [r4, #0]
 801f91e:	07d9      	lsls	r1, r3, #31
 801f920:	d5d8      	bpl.n	801f8d4 <_printf_float+0x250>
 801f922:	ee18 3a10 	vmov	r3, s16
 801f926:	4652      	mov	r2, sl
 801f928:	4631      	mov	r1, r6
 801f92a:	4628      	mov	r0, r5
 801f92c:	47b8      	blx	r7
 801f92e:	3001      	adds	r0, #1
 801f930:	f43f af09 	beq.w	801f746 <_printf_float+0xc2>
 801f934:	f04f 0900 	mov.w	r9, #0
 801f938:	f104 0a1a 	add.w	sl, r4, #26
 801f93c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f93e:	425b      	negs	r3, r3
 801f940:	454b      	cmp	r3, r9
 801f942:	dc01      	bgt.n	801f948 <_printf_float+0x2c4>
 801f944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f946:	e792      	b.n	801f86e <_printf_float+0x1ea>
 801f948:	2301      	movs	r3, #1
 801f94a:	4652      	mov	r2, sl
 801f94c:	4631      	mov	r1, r6
 801f94e:	4628      	mov	r0, r5
 801f950:	47b8      	blx	r7
 801f952:	3001      	adds	r0, #1
 801f954:	f43f aef7 	beq.w	801f746 <_printf_float+0xc2>
 801f958:	f109 0901 	add.w	r9, r9, #1
 801f95c:	e7ee      	b.n	801f93c <_printf_float+0x2b8>
 801f95e:	bf00      	nop
 801f960:	7fefffff 	.word	0x7fefffff
 801f964:	08023f70 	.word	0x08023f70
 801f968:	08023f74 	.word	0x08023f74
 801f96c:	08023f7c 	.word	0x08023f7c
 801f970:	08023f78 	.word	0x08023f78
 801f974:	08023f80 	.word	0x08023f80
 801f978:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f97a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f97c:	429a      	cmp	r2, r3
 801f97e:	bfa8      	it	ge
 801f980:	461a      	movge	r2, r3
 801f982:	2a00      	cmp	r2, #0
 801f984:	4691      	mov	r9, r2
 801f986:	dc37      	bgt.n	801f9f8 <_printf_float+0x374>
 801f988:	f04f 0b00 	mov.w	fp, #0
 801f98c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f990:	f104 021a 	add.w	r2, r4, #26
 801f994:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f996:	9305      	str	r3, [sp, #20]
 801f998:	eba3 0309 	sub.w	r3, r3, r9
 801f99c:	455b      	cmp	r3, fp
 801f99e:	dc33      	bgt.n	801fa08 <_printf_float+0x384>
 801f9a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f9a4:	429a      	cmp	r2, r3
 801f9a6:	db3b      	blt.n	801fa20 <_printf_float+0x39c>
 801f9a8:	6823      	ldr	r3, [r4, #0]
 801f9aa:	07da      	lsls	r2, r3, #31
 801f9ac:	d438      	bmi.n	801fa20 <_printf_float+0x39c>
 801f9ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f9b0:	9b05      	ldr	r3, [sp, #20]
 801f9b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f9b4:	1ad3      	subs	r3, r2, r3
 801f9b6:	eba2 0901 	sub.w	r9, r2, r1
 801f9ba:	4599      	cmp	r9, r3
 801f9bc:	bfa8      	it	ge
 801f9be:	4699      	movge	r9, r3
 801f9c0:	f1b9 0f00 	cmp.w	r9, #0
 801f9c4:	dc35      	bgt.n	801fa32 <_printf_float+0x3ae>
 801f9c6:	f04f 0800 	mov.w	r8, #0
 801f9ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f9ce:	f104 0a1a 	add.w	sl, r4, #26
 801f9d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f9d6:	1a9b      	subs	r3, r3, r2
 801f9d8:	eba3 0309 	sub.w	r3, r3, r9
 801f9dc:	4543      	cmp	r3, r8
 801f9de:	f77f af79 	ble.w	801f8d4 <_printf_float+0x250>
 801f9e2:	2301      	movs	r3, #1
 801f9e4:	4652      	mov	r2, sl
 801f9e6:	4631      	mov	r1, r6
 801f9e8:	4628      	mov	r0, r5
 801f9ea:	47b8      	blx	r7
 801f9ec:	3001      	adds	r0, #1
 801f9ee:	f43f aeaa 	beq.w	801f746 <_printf_float+0xc2>
 801f9f2:	f108 0801 	add.w	r8, r8, #1
 801f9f6:	e7ec      	b.n	801f9d2 <_printf_float+0x34e>
 801f9f8:	4613      	mov	r3, r2
 801f9fa:	4631      	mov	r1, r6
 801f9fc:	4642      	mov	r2, r8
 801f9fe:	4628      	mov	r0, r5
 801fa00:	47b8      	blx	r7
 801fa02:	3001      	adds	r0, #1
 801fa04:	d1c0      	bne.n	801f988 <_printf_float+0x304>
 801fa06:	e69e      	b.n	801f746 <_printf_float+0xc2>
 801fa08:	2301      	movs	r3, #1
 801fa0a:	4631      	mov	r1, r6
 801fa0c:	4628      	mov	r0, r5
 801fa0e:	9205      	str	r2, [sp, #20]
 801fa10:	47b8      	blx	r7
 801fa12:	3001      	adds	r0, #1
 801fa14:	f43f ae97 	beq.w	801f746 <_printf_float+0xc2>
 801fa18:	9a05      	ldr	r2, [sp, #20]
 801fa1a:	f10b 0b01 	add.w	fp, fp, #1
 801fa1e:	e7b9      	b.n	801f994 <_printf_float+0x310>
 801fa20:	ee18 3a10 	vmov	r3, s16
 801fa24:	4652      	mov	r2, sl
 801fa26:	4631      	mov	r1, r6
 801fa28:	4628      	mov	r0, r5
 801fa2a:	47b8      	blx	r7
 801fa2c:	3001      	adds	r0, #1
 801fa2e:	d1be      	bne.n	801f9ae <_printf_float+0x32a>
 801fa30:	e689      	b.n	801f746 <_printf_float+0xc2>
 801fa32:	9a05      	ldr	r2, [sp, #20]
 801fa34:	464b      	mov	r3, r9
 801fa36:	4442      	add	r2, r8
 801fa38:	4631      	mov	r1, r6
 801fa3a:	4628      	mov	r0, r5
 801fa3c:	47b8      	blx	r7
 801fa3e:	3001      	adds	r0, #1
 801fa40:	d1c1      	bne.n	801f9c6 <_printf_float+0x342>
 801fa42:	e680      	b.n	801f746 <_printf_float+0xc2>
 801fa44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fa46:	2a01      	cmp	r2, #1
 801fa48:	dc01      	bgt.n	801fa4e <_printf_float+0x3ca>
 801fa4a:	07db      	lsls	r3, r3, #31
 801fa4c:	d538      	bpl.n	801fac0 <_printf_float+0x43c>
 801fa4e:	2301      	movs	r3, #1
 801fa50:	4642      	mov	r2, r8
 801fa52:	4631      	mov	r1, r6
 801fa54:	4628      	mov	r0, r5
 801fa56:	47b8      	blx	r7
 801fa58:	3001      	adds	r0, #1
 801fa5a:	f43f ae74 	beq.w	801f746 <_printf_float+0xc2>
 801fa5e:	ee18 3a10 	vmov	r3, s16
 801fa62:	4652      	mov	r2, sl
 801fa64:	4631      	mov	r1, r6
 801fa66:	4628      	mov	r0, r5
 801fa68:	47b8      	blx	r7
 801fa6a:	3001      	adds	r0, #1
 801fa6c:	f43f ae6b 	beq.w	801f746 <_printf_float+0xc2>
 801fa70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801fa74:	2200      	movs	r2, #0
 801fa76:	2300      	movs	r3, #0
 801fa78:	f7fa f826 	bl	8019ac8 <__aeabi_dcmpeq>
 801fa7c:	b9d8      	cbnz	r0, 801fab6 <_printf_float+0x432>
 801fa7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fa80:	f108 0201 	add.w	r2, r8, #1
 801fa84:	3b01      	subs	r3, #1
 801fa86:	4631      	mov	r1, r6
 801fa88:	4628      	mov	r0, r5
 801fa8a:	47b8      	blx	r7
 801fa8c:	3001      	adds	r0, #1
 801fa8e:	d10e      	bne.n	801faae <_printf_float+0x42a>
 801fa90:	e659      	b.n	801f746 <_printf_float+0xc2>
 801fa92:	2301      	movs	r3, #1
 801fa94:	4652      	mov	r2, sl
 801fa96:	4631      	mov	r1, r6
 801fa98:	4628      	mov	r0, r5
 801fa9a:	47b8      	blx	r7
 801fa9c:	3001      	adds	r0, #1
 801fa9e:	f43f ae52 	beq.w	801f746 <_printf_float+0xc2>
 801faa2:	f108 0801 	add.w	r8, r8, #1
 801faa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801faa8:	3b01      	subs	r3, #1
 801faaa:	4543      	cmp	r3, r8
 801faac:	dcf1      	bgt.n	801fa92 <_printf_float+0x40e>
 801faae:	464b      	mov	r3, r9
 801fab0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801fab4:	e6dc      	b.n	801f870 <_printf_float+0x1ec>
 801fab6:	f04f 0800 	mov.w	r8, #0
 801faba:	f104 0a1a 	add.w	sl, r4, #26
 801fabe:	e7f2      	b.n	801faa6 <_printf_float+0x422>
 801fac0:	2301      	movs	r3, #1
 801fac2:	4642      	mov	r2, r8
 801fac4:	e7df      	b.n	801fa86 <_printf_float+0x402>
 801fac6:	2301      	movs	r3, #1
 801fac8:	464a      	mov	r2, r9
 801faca:	4631      	mov	r1, r6
 801facc:	4628      	mov	r0, r5
 801face:	47b8      	blx	r7
 801fad0:	3001      	adds	r0, #1
 801fad2:	f43f ae38 	beq.w	801f746 <_printf_float+0xc2>
 801fad6:	f108 0801 	add.w	r8, r8, #1
 801fada:	68e3      	ldr	r3, [r4, #12]
 801fadc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801fade:	1a5b      	subs	r3, r3, r1
 801fae0:	4543      	cmp	r3, r8
 801fae2:	dcf0      	bgt.n	801fac6 <_printf_float+0x442>
 801fae4:	e6fa      	b.n	801f8dc <_printf_float+0x258>
 801fae6:	f04f 0800 	mov.w	r8, #0
 801faea:	f104 0919 	add.w	r9, r4, #25
 801faee:	e7f4      	b.n	801fada <_printf_float+0x456>

0801faf0 <_printf_common>:
 801faf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801faf4:	4616      	mov	r6, r2
 801faf6:	4699      	mov	r9, r3
 801faf8:	688a      	ldr	r2, [r1, #8]
 801fafa:	690b      	ldr	r3, [r1, #16]
 801fafc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801fb00:	4293      	cmp	r3, r2
 801fb02:	bfb8      	it	lt
 801fb04:	4613      	movlt	r3, r2
 801fb06:	6033      	str	r3, [r6, #0]
 801fb08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801fb0c:	4607      	mov	r7, r0
 801fb0e:	460c      	mov	r4, r1
 801fb10:	b10a      	cbz	r2, 801fb16 <_printf_common+0x26>
 801fb12:	3301      	adds	r3, #1
 801fb14:	6033      	str	r3, [r6, #0]
 801fb16:	6823      	ldr	r3, [r4, #0]
 801fb18:	0699      	lsls	r1, r3, #26
 801fb1a:	bf42      	ittt	mi
 801fb1c:	6833      	ldrmi	r3, [r6, #0]
 801fb1e:	3302      	addmi	r3, #2
 801fb20:	6033      	strmi	r3, [r6, #0]
 801fb22:	6825      	ldr	r5, [r4, #0]
 801fb24:	f015 0506 	ands.w	r5, r5, #6
 801fb28:	d106      	bne.n	801fb38 <_printf_common+0x48>
 801fb2a:	f104 0a19 	add.w	sl, r4, #25
 801fb2e:	68e3      	ldr	r3, [r4, #12]
 801fb30:	6832      	ldr	r2, [r6, #0]
 801fb32:	1a9b      	subs	r3, r3, r2
 801fb34:	42ab      	cmp	r3, r5
 801fb36:	dc26      	bgt.n	801fb86 <_printf_common+0x96>
 801fb38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801fb3c:	1e13      	subs	r3, r2, #0
 801fb3e:	6822      	ldr	r2, [r4, #0]
 801fb40:	bf18      	it	ne
 801fb42:	2301      	movne	r3, #1
 801fb44:	0692      	lsls	r2, r2, #26
 801fb46:	d42b      	bmi.n	801fba0 <_printf_common+0xb0>
 801fb48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801fb4c:	4649      	mov	r1, r9
 801fb4e:	4638      	mov	r0, r7
 801fb50:	47c0      	blx	r8
 801fb52:	3001      	adds	r0, #1
 801fb54:	d01e      	beq.n	801fb94 <_printf_common+0xa4>
 801fb56:	6823      	ldr	r3, [r4, #0]
 801fb58:	68e5      	ldr	r5, [r4, #12]
 801fb5a:	6832      	ldr	r2, [r6, #0]
 801fb5c:	f003 0306 	and.w	r3, r3, #6
 801fb60:	2b04      	cmp	r3, #4
 801fb62:	bf08      	it	eq
 801fb64:	1aad      	subeq	r5, r5, r2
 801fb66:	68a3      	ldr	r3, [r4, #8]
 801fb68:	6922      	ldr	r2, [r4, #16]
 801fb6a:	bf0c      	ite	eq
 801fb6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801fb70:	2500      	movne	r5, #0
 801fb72:	4293      	cmp	r3, r2
 801fb74:	bfc4      	itt	gt
 801fb76:	1a9b      	subgt	r3, r3, r2
 801fb78:	18ed      	addgt	r5, r5, r3
 801fb7a:	2600      	movs	r6, #0
 801fb7c:	341a      	adds	r4, #26
 801fb7e:	42b5      	cmp	r5, r6
 801fb80:	d11a      	bne.n	801fbb8 <_printf_common+0xc8>
 801fb82:	2000      	movs	r0, #0
 801fb84:	e008      	b.n	801fb98 <_printf_common+0xa8>
 801fb86:	2301      	movs	r3, #1
 801fb88:	4652      	mov	r2, sl
 801fb8a:	4649      	mov	r1, r9
 801fb8c:	4638      	mov	r0, r7
 801fb8e:	47c0      	blx	r8
 801fb90:	3001      	adds	r0, #1
 801fb92:	d103      	bne.n	801fb9c <_printf_common+0xac>
 801fb94:	f04f 30ff 	mov.w	r0, #4294967295
 801fb98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fb9c:	3501      	adds	r5, #1
 801fb9e:	e7c6      	b.n	801fb2e <_printf_common+0x3e>
 801fba0:	18e1      	adds	r1, r4, r3
 801fba2:	1c5a      	adds	r2, r3, #1
 801fba4:	2030      	movs	r0, #48	; 0x30
 801fba6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801fbaa:	4422      	add	r2, r4
 801fbac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801fbb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801fbb4:	3302      	adds	r3, #2
 801fbb6:	e7c7      	b.n	801fb48 <_printf_common+0x58>
 801fbb8:	2301      	movs	r3, #1
 801fbba:	4622      	mov	r2, r4
 801fbbc:	4649      	mov	r1, r9
 801fbbe:	4638      	mov	r0, r7
 801fbc0:	47c0      	blx	r8
 801fbc2:	3001      	adds	r0, #1
 801fbc4:	d0e6      	beq.n	801fb94 <_printf_common+0xa4>
 801fbc6:	3601      	adds	r6, #1
 801fbc8:	e7d9      	b.n	801fb7e <_printf_common+0x8e>
	...

0801fbcc <_printf_i>:
 801fbcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801fbd0:	460c      	mov	r4, r1
 801fbd2:	4691      	mov	r9, r2
 801fbd4:	7e27      	ldrb	r7, [r4, #24]
 801fbd6:	990c      	ldr	r1, [sp, #48]	; 0x30
 801fbd8:	2f78      	cmp	r7, #120	; 0x78
 801fbda:	4680      	mov	r8, r0
 801fbdc:	469a      	mov	sl, r3
 801fbde:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801fbe2:	d807      	bhi.n	801fbf4 <_printf_i+0x28>
 801fbe4:	2f62      	cmp	r7, #98	; 0x62
 801fbe6:	d80a      	bhi.n	801fbfe <_printf_i+0x32>
 801fbe8:	2f00      	cmp	r7, #0
 801fbea:	f000 80d8 	beq.w	801fd9e <_printf_i+0x1d2>
 801fbee:	2f58      	cmp	r7, #88	; 0x58
 801fbf0:	f000 80a3 	beq.w	801fd3a <_printf_i+0x16e>
 801fbf4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801fbf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801fbfc:	e03a      	b.n	801fc74 <_printf_i+0xa8>
 801fbfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801fc02:	2b15      	cmp	r3, #21
 801fc04:	d8f6      	bhi.n	801fbf4 <_printf_i+0x28>
 801fc06:	a001      	add	r0, pc, #4	; (adr r0, 801fc0c <_printf_i+0x40>)
 801fc08:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801fc0c:	0801fc65 	.word	0x0801fc65
 801fc10:	0801fc79 	.word	0x0801fc79
 801fc14:	0801fbf5 	.word	0x0801fbf5
 801fc18:	0801fbf5 	.word	0x0801fbf5
 801fc1c:	0801fbf5 	.word	0x0801fbf5
 801fc20:	0801fbf5 	.word	0x0801fbf5
 801fc24:	0801fc79 	.word	0x0801fc79
 801fc28:	0801fbf5 	.word	0x0801fbf5
 801fc2c:	0801fbf5 	.word	0x0801fbf5
 801fc30:	0801fbf5 	.word	0x0801fbf5
 801fc34:	0801fbf5 	.word	0x0801fbf5
 801fc38:	0801fd85 	.word	0x0801fd85
 801fc3c:	0801fca9 	.word	0x0801fca9
 801fc40:	0801fd67 	.word	0x0801fd67
 801fc44:	0801fbf5 	.word	0x0801fbf5
 801fc48:	0801fbf5 	.word	0x0801fbf5
 801fc4c:	0801fda7 	.word	0x0801fda7
 801fc50:	0801fbf5 	.word	0x0801fbf5
 801fc54:	0801fca9 	.word	0x0801fca9
 801fc58:	0801fbf5 	.word	0x0801fbf5
 801fc5c:	0801fbf5 	.word	0x0801fbf5
 801fc60:	0801fd6f 	.word	0x0801fd6f
 801fc64:	680b      	ldr	r3, [r1, #0]
 801fc66:	1d1a      	adds	r2, r3, #4
 801fc68:	681b      	ldr	r3, [r3, #0]
 801fc6a:	600a      	str	r2, [r1, #0]
 801fc6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801fc70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801fc74:	2301      	movs	r3, #1
 801fc76:	e0a3      	b.n	801fdc0 <_printf_i+0x1f4>
 801fc78:	6825      	ldr	r5, [r4, #0]
 801fc7a:	6808      	ldr	r0, [r1, #0]
 801fc7c:	062e      	lsls	r6, r5, #24
 801fc7e:	f100 0304 	add.w	r3, r0, #4
 801fc82:	d50a      	bpl.n	801fc9a <_printf_i+0xce>
 801fc84:	6805      	ldr	r5, [r0, #0]
 801fc86:	600b      	str	r3, [r1, #0]
 801fc88:	2d00      	cmp	r5, #0
 801fc8a:	da03      	bge.n	801fc94 <_printf_i+0xc8>
 801fc8c:	232d      	movs	r3, #45	; 0x2d
 801fc8e:	426d      	negs	r5, r5
 801fc90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fc94:	485e      	ldr	r0, [pc, #376]	; (801fe10 <_printf_i+0x244>)
 801fc96:	230a      	movs	r3, #10
 801fc98:	e019      	b.n	801fcce <_printf_i+0x102>
 801fc9a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801fc9e:	6805      	ldr	r5, [r0, #0]
 801fca0:	600b      	str	r3, [r1, #0]
 801fca2:	bf18      	it	ne
 801fca4:	b22d      	sxthne	r5, r5
 801fca6:	e7ef      	b.n	801fc88 <_printf_i+0xbc>
 801fca8:	680b      	ldr	r3, [r1, #0]
 801fcaa:	6825      	ldr	r5, [r4, #0]
 801fcac:	1d18      	adds	r0, r3, #4
 801fcae:	6008      	str	r0, [r1, #0]
 801fcb0:	0628      	lsls	r0, r5, #24
 801fcb2:	d501      	bpl.n	801fcb8 <_printf_i+0xec>
 801fcb4:	681d      	ldr	r5, [r3, #0]
 801fcb6:	e002      	b.n	801fcbe <_printf_i+0xf2>
 801fcb8:	0669      	lsls	r1, r5, #25
 801fcba:	d5fb      	bpl.n	801fcb4 <_printf_i+0xe8>
 801fcbc:	881d      	ldrh	r5, [r3, #0]
 801fcbe:	4854      	ldr	r0, [pc, #336]	; (801fe10 <_printf_i+0x244>)
 801fcc0:	2f6f      	cmp	r7, #111	; 0x6f
 801fcc2:	bf0c      	ite	eq
 801fcc4:	2308      	moveq	r3, #8
 801fcc6:	230a      	movne	r3, #10
 801fcc8:	2100      	movs	r1, #0
 801fcca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801fcce:	6866      	ldr	r6, [r4, #4]
 801fcd0:	60a6      	str	r6, [r4, #8]
 801fcd2:	2e00      	cmp	r6, #0
 801fcd4:	bfa2      	ittt	ge
 801fcd6:	6821      	ldrge	r1, [r4, #0]
 801fcd8:	f021 0104 	bicge.w	r1, r1, #4
 801fcdc:	6021      	strge	r1, [r4, #0]
 801fcde:	b90d      	cbnz	r5, 801fce4 <_printf_i+0x118>
 801fce0:	2e00      	cmp	r6, #0
 801fce2:	d04d      	beq.n	801fd80 <_printf_i+0x1b4>
 801fce4:	4616      	mov	r6, r2
 801fce6:	fbb5 f1f3 	udiv	r1, r5, r3
 801fcea:	fb03 5711 	mls	r7, r3, r1, r5
 801fcee:	5dc7      	ldrb	r7, [r0, r7]
 801fcf0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801fcf4:	462f      	mov	r7, r5
 801fcf6:	42bb      	cmp	r3, r7
 801fcf8:	460d      	mov	r5, r1
 801fcfa:	d9f4      	bls.n	801fce6 <_printf_i+0x11a>
 801fcfc:	2b08      	cmp	r3, #8
 801fcfe:	d10b      	bne.n	801fd18 <_printf_i+0x14c>
 801fd00:	6823      	ldr	r3, [r4, #0]
 801fd02:	07df      	lsls	r7, r3, #31
 801fd04:	d508      	bpl.n	801fd18 <_printf_i+0x14c>
 801fd06:	6923      	ldr	r3, [r4, #16]
 801fd08:	6861      	ldr	r1, [r4, #4]
 801fd0a:	4299      	cmp	r1, r3
 801fd0c:	bfde      	ittt	le
 801fd0e:	2330      	movle	r3, #48	; 0x30
 801fd10:	f806 3c01 	strble.w	r3, [r6, #-1]
 801fd14:	f106 36ff 	addle.w	r6, r6, #4294967295
 801fd18:	1b92      	subs	r2, r2, r6
 801fd1a:	6122      	str	r2, [r4, #16]
 801fd1c:	f8cd a000 	str.w	sl, [sp]
 801fd20:	464b      	mov	r3, r9
 801fd22:	aa03      	add	r2, sp, #12
 801fd24:	4621      	mov	r1, r4
 801fd26:	4640      	mov	r0, r8
 801fd28:	f7ff fee2 	bl	801faf0 <_printf_common>
 801fd2c:	3001      	adds	r0, #1
 801fd2e:	d14c      	bne.n	801fdca <_printf_i+0x1fe>
 801fd30:	f04f 30ff 	mov.w	r0, #4294967295
 801fd34:	b004      	add	sp, #16
 801fd36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fd3a:	4835      	ldr	r0, [pc, #212]	; (801fe10 <_printf_i+0x244>)
 801fd3c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801fd40:	6823      	ldr	r3, [r4, #0]
 801fd42:	680e      	ldr	r6, [r1, #0]
 801fd44:	061f      	lsls	r7, r3, #24
 801fd46:	f856 5b04 	ldr.w	r5, [r6], #4
 801fd4a:	600e      	str	r6, [r1, #0]
 801fd4c:	d514      	bpl.n	801fd78 <_printf_i+0x1ac>
 801fd4e:	07d9      	lsls	r1, r3, #31
 801fd50:	bf44      	itt	mi
 801fd52:	f043 0320 	orrmi.w	r3, r3, #32
 801fd56:	6023      	strmi	r3, [r4, #0]
 801fd58:	b91d      	cbnz	r5, 801fd62 <_printf_i+0x196>
 801fd5a:	6823      	ldr	r3, [r4, #0]
 801fd5c:	f023 0320 	bic.w	r3, r3, #32
 801fd60:	6023      	str	r3, [r4, #0]
 801fd62:	2310      	movs	r3, #16
 801fd64:	e7b0      	b.n	801fcc8 <_printf_i+0xfc>
 801fd66:	6823      	ldr	r3, [r4, #0]
 801fd68:	f043 0320 	orr.w	r3, r3, #32
 801fd6c:	6023      	str	r3, [r4, #0]
 801fd6e:	2378      	movs	r3, #120	; 0x78
 801fd70:	4828      	ldr	r0, [pc, #160]	; (801fe14 <_printf_i+0x248>)
 801fd72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801fd76:	e7e3      	b.n	801fd40 <_printf_i+0x174>
 801fd78:	065e      	lsls	r6, r3, #25
 801fd7a:	bf48      	it	mi
 801fd7c:	b2ad      	uxthmi	r5, r5
 801fd7e:	e7e6      	b.n	801fd4e <_printf_i+0x182>
 801fd80:	4616      	mov	r6, r2
 801fd82:	e7bb      	b.n	801fcfc <_printf_i+0x130>
 801fd84:	680b      	ldr	r3, [r1, #0]
 801fd86:	6826      	ldr	r6, [r4, #0]
 801fd88:	6960      	ldr	r0, [r4, #20]
 801fd8a:	1d1d      	adds	r5, r3, #4
 801fd8c:	600d      	str	r5, [r1, #0]
 801fd8e:	0635      	lsls	r5, r6, #24
 801fd90:	681b      	ldr	r3, [r3, #0]
 801fd92:	d501      	bpl.n	801fd98 <_printf_i+0x1cc>
 801fd94:	6018      	str	r0, [r3, #0]
 801fd96:	e002      	b.n	801fd9e <_printf_i+0x1d2>
 801fd98:	0671      	lsls	r1, r6, #25
 801fd9a:	d5fb      	bpl.n	801fd94 <_printf_i+0x1c8>
 801fd9c:	8018      	strh	r0, [r3, #0]
 801fd9e:	2300      	movs	r3, #0
 801fda0:	6123      	str	r3, [r4, #16]
 801fda2:	4616      	mov	r6, r2
 801fda4:	e7ba      	b.n	801fd1c <_printf_i+0x150>
 801fda6:	680b      	ldr	r3, [r1, #0]
 801fda8:	1d1a      	adds	r2, r3, #4
 801fdaa:	600a      	str	r2, [r1, #0]
 801fdac:	681e      	ldr	r6, [r3, #0]
 801fdae:	6862      	ldr	r2, [r4, #4]
 801fdb0:	2100      	movs	r1, #0
 801fdb2:	4630      	mov	r0, r6
 801fdb4:	f7f9 fa0c 	bl	80191d0 <memchr>
 801fdb8:	b108      	cbz	r0, 801fdbe <_printf_i+0x1f2>
 801fdba:	1b80      	subs	r0, r0, r6
 801fdbc:	6060      	str	r0, [r4, #4]
 801fdbe:	6863      	ldr	r3, [r4, #4]
 801fdc0:	6123      	str	r3, [r4, #16]
 801fdc2:	2300      	movs	r3, #0
 801fdc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fdc8:	e7a8      	b.n	801fd1c <_printf_i+0x150>
 801fdca:	6923      	ldr	r3, [r4, #16]
 801fdcc:	4632      	mov	r2, r6
 801fdce:	4649      	mov	r1, r9
 801fdd0:	4640      	mov	r0, r8
 801fdd2:	47d0      	blx	sl
 801fdd4:	3001      	adds	r0, #1
 801fdd6:	d0ab      	beq.n	801fd30 <_printf_i+0x164>
 801fdd8:	6823      	ldr	r3, [r4, #0]
 801fdda:	079b      	lsls	r3, r3, #30
 801fddc:	d413      	bmi.n	801fe06 <_printf_i+0x23a>
 801fdde:	68e0      	ldr	r0, [r4, #12]
 801fde0:	9b03      	ldr	r3, [sp, #12]
 801fde2:	4298      	cmp	r0, r3
 801fde4:	bfb8      	it	lt
 801fde6:	4618      	movlt	r0, r3
 801fde8:	e7a4      	b.n	801fd34 <_printf_i+0x168>
 801fdea:	2301      	movs	r3, #1
 801fdec:	4632      	mov	r2, r6
 801fdee:	4649      	mov	r1, r9
 801fdf0:	4640      	mov	r0, r8
 801fdf2:	47d0      	blx	sl
 801fdf4:	3001      	adds	r0, #1
 801fdf6:	d09b      	beq.n	801fd30 <_printf_i+0x164>
 801fdf8:	3501      	adds	r5, #1
 801fdfa:	68e3      	ldr	r3, [r4, #12]
 801fdfc:	9903      	ldr	r1, [sp, #12]
 801fdfe:	1a5b      	subs	r3, r3, r1
 801fe00:	42ab      	cmp	r3, r5
 801fe02:	dcf2      	bgt.n	801fdea <_printf_i+0x21e>
 801fe04:	e7eb      	b.n	801fdde <_printf_i+0x212>
 801fe06:	2500      	movs	r5, #0
 801fe08:	f104 0619 	add.w	r6, r4, #25
 801fe0c:	e7f5      	b.n	801fdfa <_printf_i+0x22e>
 801fe0e:	bf00      	nop
 801fe10:	08023f82 	.word	0x08023f82
 801fe14:	08023f93 	.word	0x08023f93

0801fe18 <_scanf_float>:
 801fe18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe1c:	b087      	sub	sp, #28
 801fe1e:	4617      	mov	r7, r2
 801fe20:	9303      	str	r3, [sp, #12]
 801fe22:	688b      	ldr	r3, [r1, #8]
 801fe24:	1e5a      	subs	r2, r3, #1
 801fe26:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801fe2a:	bf83      	ittte	hi
 801fe2c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801fe30:	195b      	addhi	r3, r3, r5
 801fe32:	9302      	strhi	r3, [sp, #8]
 801fe34:	2300      	movls	r3, #0
 801fe36:	bf86      	itte	hi
 801fe38:	f240 135d 	movwhi	r3, #349	; 0x15d
 801fe3c:	608b      	strhi	r3, [r1, #8]
 801fe3e:	9302      	strls	r3, [sp, #8]
 801fe40:	680b      	ldr	r3, [r1, #0]
 801fe42:	468b      	mov	fp, r1
 801fe44:	2500      	movs	r5, #0
 801fe46:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801fe4a:	f84b 3b1c 	str.w	r3, [fp], #28
 801fe4e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801fe52:	4680      	mov	r8, r0
 801fe54:	460c      	mov	r4, r1
 801fe56:	465e      	mov	r6, fp
 801fe58:	46aa      	mov	sl, r5
 801fe5a:	46a9      	mov	r9, r5
 801fe5c:	9501      	str	r5, [sp, #4]
 801fe5e:	68a2      	ldr	r2, [r4, #8]
 801fe60:	b152      	cbz	r2, 801fe78 <_scanf_float+0x60>
 801fe62:	683b      	ldr	r3, [r7, #0]
 801fe64:	781b      	ldrb	r3, [r3, #0]
 801fe66:	2b4e      	cmp	r3, #78	; 0x4e
 801fe68:	d864      	bhi.n	801ff34 <_scanf_float+0x11c>
 801fe6a:	2b40      	cmp	r3, #64	; 0x40
 801fe6c:	d83c      	bhi.n	801fee8 <_scanf_float+0xd0>
 801fe6e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801fe72:	b2c8      	uxtb	r0, r1
 801fe74:	280e      	cmp	r0, #14
 801fe76:	d93a      	bls.n	801feee <_scanf_float+0xd6>
 801fe78:	f1b9 0f00 	cmp.w	r9, #0
 801fe7c:	d003      	beq.n	801fe86 <_scanf_float+0x6e>
 801fe7e:	6823      	ldr	r3, [r4, #0]
 801fe80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801fe84:	6023      	str	r3, [r4, #0]
 801fe86:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fe8a:	f1ba 0f01 	cmp.w	sl, #1
 801fe8e:	f200 8113 	bhi.w	80200b8 <_scanf_float+0x2a0>
 801fe92:	455e      	cmp	r6, fp
 801fe94:	f200 8105 	bhi.w	80200a2 <_scanf_float+0x28a>
 801fe98:	2501      	movs	r5, #1
 801fe9a:	4628      	mov	r0, r5
 801fe9c:	b007      	add	sp, #28
 801fe9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fea2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801fea6:	2a0d      	cmp	r2, #13
 801fea8:	d8e6      	bhi.n	801fe78 <_scanf_float+0x60>
 801feaa:	a101      	add	r1, pc, #4	; (adr r1, 801feb0 <_scanf_float+0x98>)
 801feac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801feb0:	0801ffef 	.word	0x0801ffef
 801feb4:	0801fe79 	.word	0x0801fe79
 801feb8:	0801fe79 	.word	0x0801fe79
 801febc:	0801fe79 	.word	0x0801fe79
 801fec0:	0802004f 	.word	0x0802004f
 801fec4:	08020027 	.word	0x08020027
 801fec8:	0801fe79 	.word	0x0801fe79
 801fecc:	0801fe79 	.word	0x0801fe79
 801fed0:	0801fffd 	.word	0x0801fffd
 801fed4:	0801fe79 	.word	0x0801fe79
 801fed8:	0801fe79 	.word	0x0801fe79
 801fedc:	0801fe79 	.word	0x0801fe79
 801fee0:	0801fe79 	.word	0x0801fe79
 801fee4:	0801ffb5 	.word	0x0801ffb5
 801fee8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801feec:	e7db      	b.n	801fea6 <_scanf_float+0x8e>
 801feee:	290e      	cmp	r1, #14
 801fef0:	d8c2      	bhi.n	801fe78 <_scanf_float+0x60>
 801fef2:	a001      	add	r0, pc, #4	; (adr r0, 801fef8 <_scanf_float+0xe0>)
 801fef4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801fef8:	0801ffa7 	.word	0x0801ffa7
 801fefc:	0801fe79 	.word	0x0801fe79
 801ff00:	0801ffa7 	.word	0x0801ffa7
 801ff04:	0802003b 	.word	0x0802003b
 801ff08:	0801fe79 	.word	0x0801fe79
 801ff0c:	0801ff55 	.word	0x0801ff55
 801ff10:	0801ff91 	.word	0x0801ff91
 801ff14:	0801ff91 	.word	0x0801ff91
 801ff18:	0801ff91 	.word	0x0801ff91
 801ff1c:	0801ff91 	.word	0x0801ff91
 801ff20:	0801ff91 	.word	0x0801ff91
 801ff24:	0801ff91 	.word	0x0801ff91
 801ff28:	0801ff91 	.word	0x0801ff91
 801ff2c:	0801ff91 	.word	0x0801ff91
 801ff30:	0801ff91 	.word	0x0801ff91
 801ff34:	2b6e      	cmp	r3, #110	; 0x6e
 801ff36:	d809      	bhi.n	801ff4c <_scanf_float+0x134>
 801ff38:	2b60      	cmp	r3, #96	; 0x60
 801ff3a:	d8b2      	bhi.n	801fea2 <_scanf_float+0x8a>
 801ff3c:	2b54      	cmp	r3, #84	; 0x54
 801ff3e:	d077      	beq.n	8020030 <_scanf_float+0x218>
 801ff40:	2b59      	cmp	r3, #89	; 0x59
 801ff42:	d199      	bne.n	801fe78 <_scanf_float+0x60>
 801ff44:	2d07      	cmp	r5, #7
 801ff46:	d197      	bne.n	801fe78 <_scanf_float+0x60>
 801ff48:	2508      	movs	r5, #8
 801ff4a:	e029      	b.n	801ffa0 <_scanf_float+0x188>
 801ff4c:	2b74      	cmp	r3, #116	; 0x74
 801ff4e:	d06f      	beq.n	8020030 <_scanf_float+0x218>
 801ff50:	2b79      	cmp	r3, #121	; 0x79
 801ff52:	e7f6      	b.n	801ff42 <_scanf_float+0x12a>
 801ff54:	6821      	ldr	r1, [r4, #0]
 801ff56:	05c8      	lsls	r0, r1, #23
 801ff58:	d51a      	bpl.n	801ff90 <_scanf_float+0x178>
 801ff5a:	9b02      	ldr	r3, [sp, #8]
 801ff5c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801ff60:	6021      	str	r1, [r4, #0]
 801ff62:	f109 0901 	add.w	r9, r9, #1
 801ff66:	b11b      	cbz	r3, 801ff70 <_scanf_float+0x158>
 801ff68:	3b01      	subs	r3, #1
 801ff6a:	3201      	adds	r2, #1
 801ff6c:	9302      	str	r3, [sp, #8]
 801ff6e:	60a2      	str	r2, [r4, #8]
 801ff70:	68a3      	ldr	r3, [r4, #8]
 801ff72:	3b01      	subs	r3, #1
 801ff74:	60a3      	str	r3, [r4, #8]
 801ff76:	6923      	ldr	r3, [r4, #16]
 801ff78:	3301      	adds	r3, #1
 801ff7a:	6123      	str	r3, [r4, #16]
 801ff7c:	687b      	ldr	r3, [r7, #4]
 801ff7e:	3b01      	subs	r3, #1
 801ff80:	2b00      	cmp	r3, #0
 801ff82:	607b      	str	r3, [r7, #4]
 801ff84:	f340 8084 	ble.w	8020090 <_scanf_float+0x278>
 801ff88:	683b      	ldr	r3, [r7, #0]
 801ff8a:	3301      	adds	r3, #1
 801ff8c:	603b      	str	r3, [r7, #0]
 801ff8e:	e766      	b.n	801fe5e <_scanf_float+0x46>
 801ff90:	eb1a 0f05 	cmn.w	sl, r5
 801ff94:	f47f af70 	bne.w	801fe78 <_scanf_float+0x60>
 801ff98:	6822      	ldr	r2, [r4, #0]
 801ff9a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801ff9e:	6022      	str	r2, [r4, #0]
 801ffa0:	f806 3b01 	strb.w	r3, [r6], #1
 801ffa4:	e7e4      	b.n	801ff70 <_scanf_float+0x158>
 801ffa6:	6822      	ldr	r2, [r4, #0]
 801ffa8:	0610      	lsls	r0, r2, #24
 801ffaa:	f57f af65 	bpl.w	801fe78 <_scanf_float+0x60>
 801ffae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801ffb2:	e7f4      	b.n	801ff9e <_scanf_float+0x186>
 801ffb4:	f1ba 0f00 	cmp.w	sl, #0
 801ffb8:	d10e      	bne.n	801ffd8 <_scanf_float+0x1c0>
 801ffba:	f1b9 0f00 	cmp.w	r9, #0
 801ffbe:	d10e      	bne.n	801ffde <_scanf_float+0x1c6>
 801ffc0:	6822      	ldr	r2, [r4, #0]
 801ffc2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801ffc6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801ffca:	d108      	bne.n	801ffde <_scanf_float+0x1c6>
 801ffcc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801ffd0:	6022      	str	r2, [r4, #0]
 801ffd2:	f04f 0a01 	mov.w	sl, #1
 801ffd6:	e7e3      	b.n	801ffa0 <_scanf_float+0x188>
 801ffd8:	f1ba 0f02 	cmp.w	sl, #2
 801ffdc:	d055      	beq.n	802008a <_scanf_float+0x272>
 801ffde:	2d01      	cmp	r5, #1
 801ffe0:	d002      	beq.n	801ffe8 <_scanf_float+0x1d0>
 801ffe2:	2d04      	cmp	r5, #4
 801ffe4:	f47f af48 	bne.w	801fe78 <_scanf_float+0x60>
 801ffe8:	3501      	adds	r5, #1
 801ffea:	b2ed      	uxtb	r5, r5
 801ffec:	e7d8      	b.n	801ffa0 <_scanf_float+0x188>
 801ffee:	f1ba 0f01 	cmp.w	sl, #1
 801fff2:	f47f af41 	bne.w	801fe78 <_scanf_float+0x60>
 801fff6:	f04f 0a02 	mov.w	sl, #2
 801fffa:	e7d1      	b.n	801ffa0 <_scanf_float+0x188>
 801fffc:	b97d      	cbnz	r5, 802001e <_scanf_float+0x206>
 801fffe:	f1b9 0f00 	cmp.w	r9, #0
 8020002:	f47f af3c 	bne.w	801fe7e <_scanf_float+0x66>
 8020006:	6822      	ldr	r2, [r4, #0]
 8020008:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 802000c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8020010:	f47f af39 	bne.w	801fe86 <_scanf_float+0x6e>
 8020014:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8020018:	6022      	str	r2, [r4, #0]
 802001a:	2501      	movs	r5, #1
 802001c:	e7c0      	b.n	801ffa0 <_scanf_float+0x188>
 802001e:	2d03      	cmp	r5, #3
 8020020:	d0e2      	beq.n	801ffe8 <_scanf_float+0x1d0>
 8020022:	2d05      	cmp	r5, #5
 8020024:	e7de      	b.n	801ffe4 <_scanf_float+0x1cc>
 8020026:	2d02      	cmp	r5, #2
 8020028:	f47f af26 	bne.w	801fe78 <_scanf_float+0x60>
 802002c:	2503      	movs	r5, #3
 802002e:	e7b7      	b.n	801ffa0 <_scanf_float+0x188>
 8020030:	2d06      	cmp	r5, #6
 8020032:	f47f af21 	bne.w	801fe78 <_scanf_float+0x60>
 8020036:	2507      	movs	r5, #7
 8020038:	e7b2      	b.n	801ffa0 <_scanf_float+0x188>
 802003a:	6822      	ldr	r2, [r4, #0]
 802003c:	0591      	lsls	r1, r2, #22
 802003e:	f57f af1b 	bpl.w	801fe78 <_scanf_float+0x60>
 8020042:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8020046:	6022      	str	r2, [r4, #0]
 8020048:	f8cd 9004 	str.w	r9, [sp, #4]
 802004c:	e7a8      	b.n	801ffa0 <_scanf_float+0x188>
 802004e:	6822      	ldr	r2, [r4, #0]
 8020050:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8020054:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8020058:	d006      	beq.n	8020068 <_scanf_float+0x250>
 802005a:	0550      	lsls	r0, r2, #21
 802005c:	f57f af0c 	bpl.w	801fe78 <_scanf_float+0x60>
 8020060:	f1b9 0f00 	cmp.w	r9, #0
 8020064:	f43f af0f 	beq.w	801fe86 <_scanf_float+0x6e>
 8020068:	0591      	lsls	r1, r2, #22
 802006a:	bf58      	it	pl
 802006c:	9901      	ldrpl	r1, [sp, #4]
 802006e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8020072:	bf58      	it	pl
 8020074:	eba9 0101 	subpl.w	r1, r9, r1
 8020078:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 802007c:	bf58      	it	pl
 802007e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8020082:	6022      	str	r2, [r4, #0]
 8020084:	f04f 0900 	mov.w	r9, #0
 8020088:	e78a      	b.n	801ffa0 <_scanf_float+0x188>
 802008a:	f04f 0a03 	mov.w	sl, #3
 802008e:	e787      	b.n	801ffa0 <_scanf_float+0x188>
 8020090:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020094:	4639      	mov	r1, r7
 8020096:	4640      	mov	r0, r8
 8020098:	4798      	blx	r3
 802009a:	2800      	cmp	r0, #0
 802009c:	f43f aedf 	beq.w	801fe5e <_scanf_float+0x46>
 80200a0:	e6ea      	b.n	801fe78 <_scanf_float+0x60>
 80200a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80200a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80200aa:	463a      	mov	r2, r7
 80200ac:	4640      	mov	r0, r8
 80200ae:	4798      	blx	r3
 80200b0:	6923      	ldr	r3, [r4, #16]
 80200b2:	3b01      	subs	r3, #1
 80200b4:	6123      	str	r3, [r4, #16]
 80200b6:	e6ec      	b.n	801fe92 <_scanf_float+0x7a>
 80200b8:	1e6b      	subs	r3, r5, #1
 80200ba:	2b06      	cmp	r3, #6
 80200bc:	d825      	bhi.n	802010a <_scanf_float+0x2f2>
 80200be:	2d02      	cmp	r5, #2
 80200c0:	d836      	bhi.n	8020130 <_scanf_float+0x318>
 80200c2:	455e      	cmp	r6, fp
 80200c4:	f67f aee8 	bls.w	801fe98 <_scanf_float+0x80>
 80200c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80200cc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80200d0:	463a      	mov	r2, r7
 80200d2:	4640      	mov	r0, r8
 80200d4:	4798      	blx	r3
 80200d6:	6923      	ldr	r3, [r4, #16]
 80200d8:	3b01      	subs	r3, #1
 80200da:	6123      	str	r3, [r4, #16]
 80200dc:	e7f1      	b.n	80200c2 <_scanf_float+0x2aa>
 80200de:	9802      	ldr	r0, [sp, #8]
 80200e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80200e4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80200e8:	9002      	str	r0, [sp, #8]
 80200ea:	463a      	mov	r2, r7
 80200ec:	4640      	mov	r0, r8
 80200ee:	4798      	blx	r3
 80200f0:	6923      	ldr	r3, [r4, #16]
 80200f2:	3b01      	subs	r3, #1
 80200f4:	6123      	str	r3, [r4, #16]
 80200f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80200fa:	fa5f fa8a 	uxtb.w	sl, sl
 80200fe:	f1ba 0f02 	cmp.w	sl, #2
 8020102:	d1ec      	bne.n	80200de <_scanf_float+0x2c6>
 8020104:	3d03      	subs	r5, #3
 8020106:	b2ed      	uxtb	r5, r5
 8020108:	1b76      	subs	r6, r6, r5
 802010a:	6823      	ldr	r3, [r4, #0]
 802010c:	05da      	lsls	r2, r3, #23
 802010e:	d52f      	bpl.n	8020170 <_scanf_float+0x358>
 8020110:	055b      	lsls	r3, r3, #21
 8020112:	d510      	bpl.n	8020136 <_scanf_float+0x31e>
 8020114:	455e      	cmp	r6, fp
 8020116:	f67f aebf 	bls.w	801fe98 <_scanf_float+0x80>
 802011a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802011e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8020122:	463a      	mov	r2, r7
 8020124:	4640      	mov	r0, r8
 8020126:	4798      	blx	r3
 8020128:	6923      	ldr	r3, [r4, #16]
 802012a:	3b01      	subs	r3, #1
 802012c:	6123      	str	r3, [r4, #16]
 802012e:	e7f1      	b.n	8020114 <_scanf_float+0x2fc>
 8020130:	46aa      	mov	sl, r5
 8020132:	9602      	str	r6, [sp, #8]
 8020134:	e7df      	b.n	80200f6 <_scanf_float+0x2de>
 8020136:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 802013a:	6923      	ldr	r3, [r4, #16]
 802013c:	2965      	cmp	r1, #101	; 0x65
 802013e:	f103 33ff 	add.w	r3, r3, #4294967295
 8020142:	f106 35ff 	add.w	r5, r6, #4294967295
 8020146:	6123      	str	r3, [r4, #16]
 8020148:	d00c      	beq.n	8020164 <_scanf_float+0x34c>
 802014a:	2945      	cmp	r1, #69	; 0x45
 802014c:	d00a      	beq.n	8020164 <_scanf_float+0x34c>
 802014e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020152:	463a      	mov	r2, r7
 8020154:	4640      	mov	r0, r8
 8020156:	4798      	blx	r3
 8020158:	6923      	ldr	r3, [r4, #16]
 802015a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 802015e:	3b01      	subs	r3, #1
 8020160:	1eb5      	subs	r5, r6, #2
 8020162:	6123      	str	r3, [r4, #16]
 8020164:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020168:	463a      	mov	r2, r7
 802016a:	4640      	mov	r0, r8
 802016c:	4798      	blx	r3
 802016e:	462e      	mov	r6, r5
 8020170:	6825      	ldr	r5, [r4, #0]
 8020172:	f015 0510 	ands.w	r5, r5, #16
 8020176:	d158      	bne.n	802022a <_scanf_float+0x412>
 8020178:	7035      	strb	r5, [r6, #0]
 802017a:	6823      	ldr	r3, [r4, #0]
 802017c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8020180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8020184:	d11c      	bne.n	80201c0 <_scanf_float+0x3a8>
 8020186:	9b01      	ldr	r3, [sp, #4]
 8020188:	454b      	cmp	r3, r9
 802018a:	eba3 0209 	sub.w	r2, r3, r9
 802018e:	d124      	bne.n	80201da <_scanf_float+0x3c2>
 8020190:	2200      	movs	r2, #0
 8020192:	4659      	mov	r1, fp
 8020194:	4640      	mov	r0, r8
 8020196:	f000 ff09 	bl	8020fac <_strtod_r>
 802019a:	9b03      	ldr	r3, [sp, #12]
 802019c:	6821      	ldr	r1, [r4, #0]
 802019e:	681b      	ldr	r3, [r3, #0]
 80201a0:	f011 0f02 	tst.w	r1, #2
 80201a4:	ec57 6b10 	vmov	r6, r7, d0
 80201a8:	f103 0204 	add.w	r2, r3, #4
 80201ac:	d020      	beq.n	80201f0 <_scanf_float+0x3d8>
 80201ae:	9903      	ldr	r1, [sp, #12]
 80201b0:	600a      	str	r2, [r1, #0]
 80201b2:	681b      	ldr	r3, [r3, #0]
 80201b4:	e9c3 6700 	strd	r6, r7, [r3]
 80201b8:	68e3      	ldr	r3, [r4, #12]
 80201ba:	3301      	adds	r3, #1
 80201bc:	60e3      	str	r3, [r4, #12]
 80201be:	e66c      	b.n	801fe9a <_scanf_float+0x82>
 80201c0:	9b04      	ldr	r3, [sp, #16]
 80201c2:	2b00      	cmp	r3, #0
 80201c4:	d0e4      	beq.n	8020190 <_scanf_float+0x378>
 80201c6:	9905      	ldr	r1, [sp, #20]
 80201c8:	230a      	movs	r3, #10
 80201ca:	462a      	mov	r2, r5
 80201cc:	3101      	adds	r1, #1
 80201ce:	4640      	mov	r0, r8
 80201d0:	f000 ff76 	bl	80210c0 <_strtol_r>
 80201d4:	9b04      	ldr	r3, [sp, #16]
 80201d6:	9e05      	ldr	r6, [sp, #20]
 80201d8:	1ac2      	subs	r2, r0, r3
 80201da:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80201de:	429e      	cmp	r6, r3
 80201e0:	bf28      	it	cs
 80201e2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80201e6:	4912      	ldr	r1, [pc, #72]	; (8020230 <_scanf_float+0x418>)
 80201e8:	4630      	mov	r0, r6
 80201ea:	f000 f87f 	bl	80202ec <siprintf>
 80201ee:	e7cf      	b.n	8020190 <_scanf_float+0x378>
 80201f0:	f011 0f04 	tst.w	r1, #4
 80201f4:	9903      	ldr	r1, [sp, #12]
 80201f6:	600a      	str	r2, [r1, #0]
 80201f8:	d1db      	bne.n	80201b2 <_scanf_float+0x39a>
 80201fa:	f8d3 8000 	ldr.w	r8, [r3]
 80201fe:	ee10 2a10 	vmov	r2, s0
 8020202:	ee10 0a10 	vmov	r0, s0
 8020206:	463b      	mov	r3, r7
 8020208:	4639      	mov	r1, r7
 802020a:	f7f9 fc8f 	bl	8019b2c <__aeabi_dcmpun>
 802020e:	b128      	cbz	r0, 802021c <_scanf_float+0x404>
 8020210:	4808      	ldr	r0, [pc, #32]	; (8020234 <_scanf_float+0x41c>)
 8020212:	f000 f821 	bl	8020258 <nanf>
 8020216:	ed88 0a00 	vstr	s0, [r8]
 802021a:	e7cd      	b.n	80201b8 <_scanf_float+0x3a0>
 802021c:	4630      	mov	r0, r6
 802021e:	4639      	mov	r1, r7
 8020220:	f7f9 fce2 	bl	8019be8 <__aeabi_d2f>
 8020224:	f8c8 0000 	str.w	r0, [r8]
 8020228:	e7c6      	b.n	80201b8 <_scanf_float+0x3a0>
 802022a:	2500      	movs	r5, #0
 802022c:	e635      	b.n	801fe9a <_scanf_float+0x82>
 802022e:	bf00      	nop
 8020230:	08023fa4 	.word	0x08023fa4
 8020234:	080243c0 	.word	0x080243c0

08020238 <_sbrk_r>:
 8020238:	b538      	push	{r3, r4, r5, lr}
 802023a:	4d06      	ldr	r5, [pc, #24]	; (8020254 <_sbrk_r+0x1c>)
 802023c:	2300      	movs	r3, #0
 802023e:	4604      	mov	r4, r0
 8020240:	4608      	mov	r0, r1
 8020242:	602b      	str	r3, [r5, #0]
 8020244:	f7fa fe78 	bl	801af38 <_sbrk>
 8020248:	1c43      	adds	r3, r0, #1
 802024a:	d102      	bne.n	8020252 <_sbrk_r+0x1a>
 802024c:	682b      	ldr	r3, [r5, #0]
 802024e:	b103      	cbz	r3, 8020252 <_sbrk_r+0x1a>
 8020250:	6023      	str	r3, [r4, #0]
 8020252:	bd38      	pop	{r3, r4, r5, pc}
 8020254:	200003ec 	.word	0x200003ec

08020258 <nanf>:
 8020258:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8020260 <nanf+0x8>
 802025c:	4770      	bx	lr
 802025e:	bf00      	nop
 8020260:	7fc00000 	.word	0x7fc00000

08020264 <_raise_r>:
 8020264:	291f      	cmp	r1, #31
 8020266:	b538      	push	{r3, r4, r5, lr}
 8020268:	4604      	mov	r4, r0
 802026a:	460d      	mov	r5, r1
 802026c:	d904      	bls.n	8020278 <_raise_r+0x14>
 802026e:	2316      	movs	r3, #22
 8020270:	6003      	str	r3, [r0, #0]
 8020272:	f04f 30ff 	mov.w	r0, #4294967295
 8020276:	bd38      	pop	{r3, r4, r5, pc}
 8020278:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802027a:	b112      	cbz	r2, 8020282 <_raise_r+0x1e>
 802027c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020280:	b94b      	cbnz	r3, 8020296 <_raise_r+0x32>
 8020282:	4620      	mov	r0, r4
 8020284:	f000 f830 	bl	80202e8 <_getpid_r>
 8020288:	462a      	mov	r2, r5
 802028a:	4601      	mov	r1, r0
 802028c:	4620      	mov	r0, r4
 802028e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020292:	f000 b817 	b.w	80202c4 <_kill_r>
 8020296:	2b01      	cmp	r3, #1
 8020298:	d00a      	beq.n	80202b0 <_raise_r+0x4c>
 802029a:	1c59      	adds	r1, r3, #1
 802029c:	d103      	bne.n	80202a6 <_raise_r+0x42>
 802029e:	2316      	movs	r3, #22
 80202a0:	6003      	str	r3, [r0, #0]
 80202a2:	2001      	movs	r0, #1
 80202a4:	e7e7      	b.n	8020276 <_raise_r+0x12>
 80202a6:	2400      	movs	r4, #0
 80202a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80202ac:	4628      	mov	r0, r5
 80202ae:	4798      	blx	r3
 80202b0:	2000      	movs	r0, #0
 80202b2:	e7e0      	b.n	8020276 <_raise_r+0x12>

080202b4 <raise>:
 80202b4:	4b02      	ldr	r3, [pc, #8]	; (80202c0 <raise+0xc>)
 80202b6:	4601      	mov	r1, r0
 80202b8:	6818      	ldr	r0, [r3, #0]
 80202ba:	f7ff bfd3 	b.w	8020264 <_raise_r>
 80202be:	bf00      	nop
 80202c0:	20000030 	.word	0x20000030

080202c4 <_kill_r>:
 80202c4:	b538      	push	{r3, r4, r5, lr}
 80202c6:	4d07      	ldr	r5, [pc, #28]	; (80202e4 <_kill_r+0x20>)
 80202c8:	2300      	movs	r3, #0
 80202ca:	4604      	mov	r4, r0
 80202cc:	4608      	mov	r0, r1
 80202ce:	4611      	mov	r1, r2
 80202d0:	602b      	str	r3, [r5, #0]
 80202d2:	f7fa fda9 	bl	801ae28 <_kill>
 80202d6:	1c43      	adds	r3, r0, #1
 80202d8:	d102      	bne.n	80202e0 <_kill_r+0x1c>
 80202da:	682b      	ldr	r3, [r5, #0]
 80202dc:	b103      	cbz	r3, 80202e0 <_kill_r+0x1c>
 80202de:	6023      	str	r3, [r4, #0]
 80202e0:	bd38      	pop	{r3, r4, r5, pc}
 80202e2:	bf00      	nop
 80202e4:	200003ec 	.word	0x200003ec

080202e8 <_getpid_r>:
 80202e8:	f7fa bd96 	b.w	801ae18 <_getpid>

080202ec <siprintf>:
 80202ec:	b40e      	push	{r1, r2, r3}
 80202ee:	b500      	push	{lr}
 80202f0:	b09c      	sub	sp, #112	; 0x70
 80202f2:	ab1d      	add	r3, sp, #116	; 0x74
 80202f4:	9002      	str	r0, [sp, #8]
 80202f6:	9006      	str	r0, [sp, #24]
 80202f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80202fc:	4809      	ldr	r0, [pc, #36]	; (8020324 <siprintf+0x38>)
 80202fe:	9107      	str	r1, [sp, #28]
 8020300:	9104      	str	r1, [sp, #16]
 8020302:	4909      	ldr	r1, [pc, #36]	; (8020328 <siprintf+0x3c>)
 8020304:	f853 2b04 	ldr.w	r2, [r3], #4
 8020308:	9105      	str	r1, [sp, #20]
 802030a:	6800      	ldr	r0, [r0, #0]
 802030c:	9301      	str	r3, [sp, #4]
 802030e:	a902      	add	r1, sp, #8
 8020310:	f002 fe0a 	bl	8022f28 <_svfiprintf_r>
 8020314:	9b02      	ldr	r3, [sp, #8]
 8020316:	2200      	movs	r2, #0
 8020318:	701a      	strb	r2, [r3, #0]
 802031a:	b01c      	add	sp, #112	; 0x70
 802031c:	f85d eb04 	ldr.w	lr, [sp], #4
 8020320:	b003      	add	sp, #12
 8020322:	4770      	bx	lr
 8020324:	20000030 	.word	0x20000030
 8020328:	ffff0208 	.word	0xffff0208

0802032c <strstr>:
 802032c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802032e:	780c      	ldrb	r4, [r1, #0]
 8020330:	b164      	cbz	r4, 802034c <strstr+0x20>
 8020332:	4603      	mov	r3, r0
 8020334:	781a      	ldrb	r2, [r3, #0]
 8020336:	4618      	mov	r0, r3
 8020338:	1c5e      	adds	r6, r3, #1
 802033a:	b90a      	cbnz	r2, 8020340 <strstr+0x14>
 802033c:	4610      	mov	r0, r2
 802033e:	e005      	b.n	802034c <strstr+0x20>
 8020340:	4294      	cmp	r4, r2
 8020342:	d108      	bne.n	8020356 <strstr+0x2a>
 8020344:	460d      	mov	r5, r1
 8020346:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 802034a:	b902      	cbnz	r2, 802034e <strstr+0x22>
 802034c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802034e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8020352:	4297      	cmp	r7, r2
 8020354:	d0f7      	beq.n	8020346 <strstr+0x1a>
 8020356:	4633      	mov	r3, r6
 8020358:	e7ec      	b.n	8020334 <strstr+0x8>

0802035a <sulp>:
 802035a:	b570      	push	{r4, r5, r6, lr}
 802035c:	4604      	mov	r4, r0
 802035e:	460d      	mov	r5, r1
 8020360:	ec45 4b10 	vmov	d0, r4, r5
 8020364:	4616      	mov	r6, r2
 8020366:	f002 fc25 	bl	8022bb4 <__ulp>
 802036a:	ec51 0b10 	vmov	r0, r1, d0
 802036e:	b17e      	cbz	r6, 8020390 <sulp+0x36>
 8020370:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8020374:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8020378:	2b00      	cmp	r3, #0
 802037a:	dd09      	ble.n	8020390 <sulp+0x36>
 802037c:	051b      	lsls	r3, r3, #20
 802037e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8020382:	2400      	movs	r4, #0
 8020384:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8020388:	4622      	mov	r2, r4
 802038a:	462b      	mov	r3, r5
 802038c:	f7f9 f934 	bl	80195f8 <__aeabi_dmul>
 8020390:	bd70      	pop	{r4, r5, r6, pc}
 8020392:	0000      	movs	r0, r0
 8020394:	0000      	movs	r0, r0
	...

08020398 <_strtod_l>:
 8020398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802039c:	b0a3      	sub	sp, #140	; 0x8c
 802039e:	461f      	mov	r7, r3
 80203a0:	2300      	movs	r3, #0
 80203a2:	931e      	str	r3, [sp, #120]	; 0x78
 80203a4:	4ba4      	ldr	r3, [pc, #656]	; (8020638 <_strtod_l+0x2a0>)
 80203a6:	9219      	str	r2, [sp, #100]	; 0x64
 80203a8:	681b      	ldr	r3, [r3, #0]
 80203aa:	9307      	str	r3, [sp, #28]
 80203ac:	4604      	mov	r4, r0
 80203ae:	4618      	mov	r0, r3
 80203b0:	4688      	mov	r8, r1
 80203b2:	f7f8 ff5d 	bl	8019270 <strlen>
 80203b6:	f04f 0a00 	mov.w	sl, #0
 80203ba:	4605      	mov	r5, r0
 80203bc:	f04f 0b00 	mov.w	fp, #0
 80203c0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80203c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80203c6:	781a      	ldrb	r2, [r3, #0]
 80203c8:	2a2b      	cmp	r2, #43	; 0x2b
 80203ca:	d04c      	beq.n	8020466 <_strtod_l+0xce>
 80203cc:	d839      	bhi.n	8020442 <_strtod_l+0xaa>
 80203ce:	2a0d      	cmp	r2, #13
 80203d0:	d832      	bhi.n	8020438 <_strtod_l+0xa0>
 80203d2:	2a08      	cmp	r2, #8
 80203d4:	d832      	bhi.n	802043c <_strtod_l+0xa4>
 80203d6:	2a00      	cmp	r2, #0
 80203d8:	d03c      	beq.n	8020454 <_strtod_l+0xbc>
 80203da:	2300      	movs	r3, #0
 80203dc:	930e      	str	r3, [sp, #56]	; 0x38
 80203de:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80203e0:	7833      	ldrb	r3, [r6, #0]
 80203e2:	2b30      	cmp	r3, #48	; 0x30
 80203e4:	f040 80b4 	bne.w	8020550 <_strtod_l+0x1b8>
 80203e8:	7873      	ldrb	r3, [r6, #1]
 80203ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80203ee:	2b58      	cmp	r3, #88	; 0x58
 80203f0:	d16c      	bne.n	80204cc <_strtod_l+0x134>
 80203f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80203f4:	9301      	str	r3, [sp, #4]
 80203f6:	ab1e      	add	r3, sp, #120	; 0x78
 80203f8:	9702      	str	r7, [sp, #8]
 80203fa:	9300      	str	r3, [sp, #0]
 80203fc:	4a8f      	ldr	r2, [pc, #572]	; (802063c <_strtod_l+0x2a4>)
 80203fe:	ab1f      	add	r3, sp, #124	; 0x7c
 8020400:	a91d      	add	r1, sp, #116	; 0x74
 8020402:	4620      	mov	r0, r4
 8020404:	f001 fd40 	bl	8021e88 <__gethex>
 8020408:	f010 0707 	ands.w	r7, r0, #7
 802040c:	4605      	mov	r5, r0
 802040e:	d005      	beq.n	802041c <_strtod_l+0x84>
 8020410:	2f06      	cmp	r7, #6
 8020412:	d12a      	bne.n	802046a <_strtod_l+0xd2>
 8020414:	3601      	adds	r6, #1
 8020416:	2300      	movs	r3, #0
 8020418:	961d      	str	r6, [sp, #116]	; 0x74
 802041a:	930e      	str	r3, [sp, #56]	; 0x38
 802041c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802041e:	2b00      	cmp	r3, #0
 8020420:	f040 8596 	bne.w	8020f50 <_strtod_l+0xbb8>
 8020424:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020426:	b1db      	cbz	r3, 8020460 <_strtod_l+0xc8>
 8020428:	4652      	mov	r2, sl
 802042a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 802042e:	ec43 2b10 	vmov	d0, r2, r3
 8020432:	b023      	add	sp, #140	; 0x8c
 8020434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020438:	2a20      	cmp	r2, #32
 802043a:	d1ce      	bne.n	80203da <_strtod_l+0x42>
 802043c:	3301      	adds	r3, #1
 802043e:	931d      	str	r3, [sp, #116]	; 0x74
 8020440:	e7c0      	b.n	80203c4 <_strtod_l+0x2c>
 8020442:	2a2d      	cmp	r2, #45	; 0x2d
 8020444:	d1c9      	bne.n	80203da <_strtod_l+0x42>
 8020446:	2201      	movs	r2, #1
 8020448:	920e      	str	r2, [sp, #56]	; 0x38
 802044a:	1c5a      	adds	r2, r3, #1
 802044c:	921d      	str	r2, [sp, #116]	; 0x74
 802044e:	785b      	ldrb	r3, [r3, #1]
 8020450:	2b00      	cmp	r3, #0
 8020452:	d1c4      	bne.n	80203de <_strtod_l+0x46>
 8020454:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020456:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 802045a:	2b00      	cmp	r3, #0
 802045c:	f040 8576 	bne.w	8020f4c <_strtod_l+0xbb4>
 8020460:	4652      	mov	r2, sl
 8020462:	465b      	mov	r3, fp
 8020464:	e7e3      	b.n	802042e <_strtod_l+0x96>
 8020466:	2200      	movs	r2, #0
 8020468:	e7ee      	b.n	8020448 <_strtod_l+0xb0>
 802046a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 802046c:	b13a      	cbz	r2, 802047e <_strtod_l+0xe6>
 802046e:	2135      	movs	r1, #53	; 0x35
 8020470:	a820      	add	r0, sp, #128	; 0x80
 8020472:	f002 fcaa 	bl	8022dca <__copybits>
 8020476:	991e      	ldr	r1, [sp, #120]	; 0x78
 8020478:	4620      	mov	r0, r4
 802047a:	f002 f86f 	bl	802255c <_Bfree>
 802047e:	3f01      	subs	r7, #1
 8020480:	2f05      	cmp	r7, #5
 8020482:	d807      	bhi.n	8020494 <_strtod_l+0xfc>
 8020484:	e8df f007 	tbb	[pc, r7]
 8020488:	1d180b0e 	.word	0x1d180b0e
 802048c:	030e      	.short	0x030e
 802048e:	f04f 0b00 	mov.w	fp, #0
 8020492:	46da      	mov	sl, fp
 8020494:	0728      	lsls	r0, r5, #28
 8020496:	d5c1      	bpl.n	802041c <_strtod_l+0x84>
 8020498:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 802049c:	e7be      	b.n	802041c <_strtod_l+0x84>
 802049e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80204a2:	e7f7      	b.n	8020494 <_strtod_l+0xfc>
 80204a4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80204a8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80204aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80204ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80204b2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80204b6:	e7ed      	b.n	8020494 <_strtod_l+0xfc>
 80204b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8020640 <_strtod_l+0x2a8>
 80204bc:	f04f 0a00 	mov.w	sl, #0
 80204c0:	e7e8      	b.n	8020494 <_strtod_l+0xfc>
 80204c2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80204c6:	f04f 3aff 	mov.w	sl, #4294967295
 80204ca:	e7e3      	b.n	8020494 <_strtod_l+0xfc>
 80204cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80204ce:	1c5a      	adds	r2, r3, #1
 80204d0:	921d      	str	r2, [sp, #116]	; 0x74
 80204d2:	785b      	ldrb	r3, [r3, #1]
 80204d4:	2b30      	cmp	r3, #48	; 0x30
 80204d6:	d0f9      	beq.n	80204cc <_strtod_l+0x134>
 80204d8:	2b00      	cmp	r3, #0
 80204da:	d09f      	beq.n	802041c <_strtod_l+0x84>
 80204dc:	2301      	movs	r3, #1
 80204de:	f04f 0900 	mov.w	r9, #0
 80204e2:	9304      	str	r3, [sp, #16]
 80204e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80204e6:	930a      	str	r3, [sp, #40]	; 0x28
 80204e8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80204ec:	464f      	mov	r7, r9
 80204ee:	220a      	movs	r2, #10
 80204f0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80204f2:	7806      	ldrb	r6, [r0, #0]
 80204f4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80204f8:	b2d9      	uxtb	r1, r3
 80204fa:	2909      	cmp	r1, #9
 80204fc:	d92a      	bls.n	8020554 <_strtod_l+0x1bc>
 80204fe:	9907      	ldr	r1, [sp, #28]
 8020500:	462a      	mov	r2, r5
 8020502:	f002 fe19 	bl	8023138 <strncmp>
 8020506:	b398      	cbz	r0, 8020570 <_strtod_l+0x1d8>
 8020508:	2000      	movs	r0, #0
 802050a:	4633      	mov	r3, r6
 802050c:	463d      	mov	r5, r7
 802050e:	9007      	str	r0, [sp, #28]
 8020510:	4602      	mov	r2, r0
 8020512:	2b65      	cmp	r3, #101	; 0x65
 8020514:	d001      	beq.n	802051a <_strtod_l+0x182>
 8020516:	2b45      	cmp	r3, #69	; 0x45
 8020518:	d118      	bne.n	802054c <_strtod_l+0x1b4>
 802051a:	b91d      	cbnz	r5, 8020524 <_strtod_l+0x18c>
 802051c:	9b04      	ldr	r3, [sp, #16]
 802051e:	4303      	orrs	r3, r0
 8020520:	d098      	beq.n	8020454 <_strtod_l+0xbc>
 8020522:	2500      	movs	r5, #0
 8020524:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8020528:	f108 0301 	add.w	r3, r8, #1
 802052c:	931d      	str	r3, [sp, #116]	; 0x74
 802052e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8020532:	2b2b      	cmp	r3, #43	; 0x2b
 8020534:	d075      	beq.n	8020622 <_strtod_l+0x28a>
 8020536:	2b2d      	cmp	r3, #45	; 0x2d
 8020538:	d07b      	beq.n	8020632 <_strtod_l+0x29a>
 802053a:	f04f 0c00 	mov.w	ip, #0
 802053e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8020542:	2909      	cmp	r1, #9
 8020544:	f240 8082 	bls.w	802064c <_strtod_l+0x2b4>
 8020548:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 802054c:	2600      	movs	r6, #0
 802054e:	e09d      	b.n	802068c <_strtod_l+0x2f4>
 8020550:	2300      	movs	r3, #0
 8020552:	e7c4      	b.n	80204de <_strtod_l+0x146>
 8020554:	2f08      	cmp	r7, #8
 8020556:	bfd8      	it	le
 8020558:	9909      	ldrle	r1, [sp, #36]	; 0x24
 802055a:	f100 0001 	add.w	r0, r0, #1
 802055e:	bfda      	itte	le
 8020560:	fb02 3301 	mlale	r3, r2, r1, r3
 8020564:	9309      	strle	r3, [sp, #36]	; 0x24
 8020566:	fb02 3909 	mlagt	r9, r2, r9, r3
 802056a:	3701      	adds	r7, #1
 802056c:	901d      	str	r0, [sp, #116]	; 0x74
 802056e:	e7bf      	b.n	80204f0 <_strtod_l+0x158>
 8020570:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020572:	195a      	adds	r2, r3, r5
 8020574:	921d      	str	r2, [sp, #116]	; 0x74
 8020576:	5d5b      	ldrb	r3, [r3, r5]
 8020578:	2f00      	cmp	r7, #0
 802057a:	d037      	beq.n	80205ec <_strtod_l+0x254>
 802057c:	9007      	str	r0, [sp, #28]
 802057e:	463d      	mov	r5, r7
 8020580:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8020584:	2a09      	cmp	r2, #9
 8020586:	d912      	bls.n	80205ae <_strtod_l+0x216>
 8020588:	2201      	movs	r2, #1
 802058a:	e7c2      	b.n	8020512 <_strtod_l+0x17a>
 802058c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802058e:	1c5a      	adds	r2, r3, #1
 8020590:	921d      	str	r2, [sp, #116]	; 0x74
 8020592:	785b      	ldrb	r3, [r3, #1]
 8020594:	3001      	adds	r0, #1
 8020596:	2b30      	cmp	r3, #48	; 0x30
 8020598:	d0f8      	beq.n	802058c <_strtod_l+0x1f4>
 802059a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 802059e:	2a08      	cmp	r2, #8
 80205a0:	f200 84db 	bhi.w	8020f5a <_strtod_l+0xbc2>
 80205a4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80205a6:	9007      	str	r0, [sp, #28]
 80205a8:	2000      	movs	r0, #0
 80205aa:	920a      	str	r2, [sp, #40]	; 0x28
 80205ac:	4605      	mov	r5, r0
 80205ae:	3b30      	subs	r3, #48	; 0x30
 80205b0:	f100 0201 	add.w	r2, r0, #1
 80205b4:	d014      	beq.n	80205e0 <_strtod_l+0x248>
 80205b6:	9907      	ldr	r1, [sp, #28]
 80205b8:	4411      	add	r1, r2
 80205ba:	9107      	str	r1, [sp, #28]
 80205bc:	462a      	mov	r2, r5
 80205be:	eb00 0e05 	add.w	lr, r0, r5
 80205c2:	210a      	movs	r1, #10
 80205c4:	4572      	cmp	r2, lr
 80205c6:	d113      	bne.n	80205f0 <_strtod_l+0x258>
 80205c8:	182a      	adds	r2, r5, r0
 80205ca:	2a08      	cmp	r2, #8
 80205cc:	f105 0501 	add.w	r5, r5, #1
 80205d0:	4405      	add	r5, r0
 80205d2:	dc1c      	bgt.n	802060e <_strtod_l+0x276>
 80205d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80205d6:	220a      	movs	r2, #10
 80205d8:	fb02 3301 	mla	r3, r2, r1, r3
 80205dc:	9309      	str	r3, [sp, #36]	; 0x24
 80205de:	2200      	movs	r2, #0
 80205e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80205e2:	1c59      	adds	r1, r3, #1
 80205e4:	911d      	str	r1, [sp, #116]	; 0x74
 80205e6:	785b      	ldrb	r3, [r3, #1]
 80205e8:	4610      	mov	r0, r2
 80205ea:	e7c9      	b.n	8020580 <_strtod_l+0x1e8>
 80205ec:	4638      	mov	r0, r7
 80205ee:	e7d2      	b.n	8020596 <_strtod_l+0x1fe>
 80205f0:	2a08      	cmp	r2, #8
 80205f2:	dc04      	bgt.n	80205fe <_strtod_l+0x266>
 80205f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80205f6:	434e      	muls	r6, r1
 80205f8:	9609      	str	r6, [sp, #36]	; 0x24
 80205fa:	3201      	adds	r2, #1
 80205fc:	e7e2      	b.n	80205c4 <_strtod_l+0x22c>
 80205fe:	f102 0c01 	add.w	ip, r2, #1
 8020602:	f1bc 0f10 	cmp.w	ip, #16
 8020606:	bfd8      	it	le
 8020608:	fb01 f909 	mulle.w	r9, r1, r9
 802060c:	e7f5      	b.n	80205fa <_strtod_l+0x262>
 802060e:	2d10      	cmp	r5, #16
 8020610:	bfdc      	itt	le
 8020612:	220a      	movle	r2, #10
 8020614:	fb02 3909 	mlale	r9, r2, r9, r3
 8020618:	e7e1      	b.n	80205de <_strtod_l+0x246>
 802061a:	2300      	movs	r3, #0
 802061c:	9307      	str	r3, [sp, #28]
 802061e:	2201      	movs	r2, #1
 8020620:	e77c      	b.n	802051c <_strtod_l+0x184>
 8020622:	f04f 0c00 	mov.w	ip, #0
 8020626:	f108 0302 	add.w	r3, r8, #2
 802062a:	931d      	str	r3, [sp, #116]	; 0x74
 802062c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8020630:	e785      	b.n	802053e <_strtod_l+0x1a6>
 8020632:	f04f 0c01 	mov.w	ip, #1
 8020636:	e7f6      	b.n	8020626 <_strtod_l+0x28e>
 8020638:	08024200 	.word	0x08024200
 802063c:	08023fac 	.word	0x08023fac
 8020640:	7ff00000 	.word	0x7ff00000
 8020644:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020646:	1c59      	adds	r1, r3, #1
 8020648:	911d      	str	r1, [sp, #116]	; 0x74
 802064a:	785b      	ldrb	r3, [r3, #1]
 802064c:	2b30      	cmp	r3, #48	; 0x30
 802064e:	d0f9      	beq.n	8020644 <_strtod_l+0x2ac>
 8020650:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8020654:	2908      	cmp	r1, #8
 8020656:	f63f af79 	bhi.w	802054c <_strtod_l+0x1b4>
 802065a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 802065e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020660:	9308      	str	r3, [sp, #32]
 8020662:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020664:	1c59      	adds	r1, r3, #1
 8020666:	911d      	str	r1, [sp, #116]	; 0x74
 8020668:	785b      	ldrb	r3, [r3, #1]
 802066a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 802066e:	2e09      	cmp	r6, #9
 8020670:	d937      	bls.n	80206e2 <_strtod_l+0x34a>
 8020672:	9e08      	ldr	r6, [sp, #32]
 8020674:	1b89      	subs	r1, r1, r6
 8020676:	2908      	cmp	r1, #8
 8020678:	f644 661f 	movw	r6, #19999	; 0x4e1f
 802067c:	dc02      	bgt.n	8020684 <_strtod_l+0x2ec>
 802067e:	4576      	cmp	r6, lr
 8020680:	bfa8      	it	ge
 8020682:	4676      	movge	r6, lr
 8020684:	f1bc 0f00 	cmp.w	ip, #0
 8020688:	d000      	beq.n	802068c <_strtod_l+0x2f4>
 802068a:	4276      	negs	r6, r6
 802068c:	2d00      	cmp	r5, #0
 802068e:	d14f      	bne.n	8020730 <_strtod_l+0x398>
 8020690:	9904      	ldr	r1, [sp, #16]
 8020692:	4301      	orrs	r1, r0
 8020694:	f47f aec2 	bne.w	802041c <_strtod_l+0x84>
 8020698:	2a00      	cmp	r2, #0
 802069a:	f47f aedb 	bne.w	8020454 <_strtod_l+0xbc>
 802069e:	2b69      	cmp	r3, #105	; 0x69
 80206a0:	d027      	beq.n	80206f2 <_strtod_l+0x35a>
 80206a2:	dc24      	bgt.n	80206ee <_strtod_l+0x356>
 80206a4:	2b49      	cmp	r3, #73	; 0x49
 80206a6:	d024      	beq.n	80206f2 <_strtod_l+0x35a>
 80206a8:	2b4e      	cmp	r3, #78	; 0x4e
 80206aa:	f47f aed3 	bne.w	8020454 <_strtod_l+0xbc>
 80206ae:	499e      	ldr	r1, [pc, #632]	; (8020928 <_strtod_l+0x590>)
 80206b0:	a81d      	add	r0, sp, #116	; 0x74
 80206b2:	f001 fe41 	bl	8022338 <__match>
 80206b6:	2800      	cmp	r0, #0
 80206b8:	f43f aecc 	beq.w	8020454 <_strtod_l+0xbc>
 80206bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80206be:	781b      	ldrb	r3, [r3, #0]
 80206c0:	2b28      	cmp	r3, #40	; 0x28
 80206c2:	d12d      	bne.n	8020720 <_strtod_l+0x388>
 80206c4:	4999      	ldr	r1, [pc, #612]	; (802092c <_strtod_l+0x594>)
 80206c6:	aa20      	add	r2, sp, #128	; 0x80
 80206c8:	a81d      	add	r0, sp, #116	; 0x74
 80206ca:	f001 fe49 	bl	8022360 <__hexnan>
 80206ce:	2805      	cmp	r0, #5
 80206d0:	d126      	bne.n	8020720 <_strtod_l+0x388>
 80206d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80206d4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80206d8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80206dc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80206e0:	e69c      	b.n	802041c <_strtod_l+0x84>
 80206e2:	210a      	movs	r1, #10
 80206e4:	fb01 3e0e 	mla	lr, r1, lr, r3
 80206e8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80206ec:	e7b9      	b.n	8020662 <_strtod_l+0x2ca>
 80206ee:	2b6e      	cmp	r3, #110	; 0x6e
 80206f0:	e7db      	b.n	80206aa <_strtod_l+0x312>
 80206f2:	498f      	ldr	r1, [pc, #572]	; (8020930 <_strtod_l+0x598>)
 80206f4:	a81d      	add	r0, sp, #116	; 0x74
 80206f6:	f001 fe1f 	bl	8022338 <__match>
 80206fa:	2800      	cmp	r0, #0
 80206fc:	f43f aeaa 	beq.w	8020454 <_strtod_l+0xbc>
 8020700:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020702:	498c      	ldr	r1, [pc, #560]	; (8020934 <_strtod_l+0x59c>)
 8020704:	3b01      	subs	r3, #1
 8020706:	a81d      	add	r0, sp, #116	; 0x74
 8020708:	931d      	str	r3, [sp, #116]	; 0x74
 802070a:	f001 fe15 	bl	8022338 <__match>
 802070e:	b910      	cbnz	r0, 8020716 <_strtod_l+0x37e>
 8020710:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020712:	3301      	adds	r3, #1
 8020714:	931d      	str	r3, [sp, #116]	; 0x74
 8020716:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8020944 <_strtod_l+0x5ac>
 802071a:	f04f 0a00 	mov.w	sl, #0
 802071e:	e67d      	b.n	802041c <_strtod_l+0x84>
 8020720:	4885      	ldr	r0, [pc, #532]	; (8020938 <_strtod_l+0x5a0>)
 8020722:	f002 fd01 	bl	8023128 <nan>
 8020726:	ed8d 0b04 	vstr	d0, [sp, #16]
 802072a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 802072e:	e675      	b.n	802041c <_strtod_l+0x84>
 8020730:	9b07      	ldr	r3, [sp, #28]
 8020732:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020734:	1af3      	subs	r3, r6, r3
 8020736:	2f00      	cmp	r7, #0
 8020738:	bf08      	it	eq
 802073a:	462f      	moveq	r7, r5
 802073c:	2d10      	cmp	r5, #16
 802073e:	9308      	str	r3, [sp, #32]
 8020740:	46a8      	mov	r8, r5
 8020742:	bfa8      	it	ge
 8020744:	f04f 0810 	movge.w	r8, #16
 8020748:	f7f8 fedc 	bl	8019504 <__aeabi_ui2d>
 802074c:	2d09      	cmp	r5, #9
 802074e:	4682      	mov	sl, r0
 8020750:	468b      	mov	fp, r1
 8020752:	dd13      	ble.n	802077c <_strtod_l+0x3e4>
 8020754:	4b79      	ldr	r3, [pc, #484]	; (802093c <_strtod_l+0x5a4>)
 8020756:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 802075a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 802075e:	f7f8 ff4b 	bl	80195f8 <__aeabi_dmul>
 8020762:	4682      	mov	sl, r0
 8020764:	4648      	mov	r0, r9
 8020766:	468b      	mov	fp, r1
 8020768:	f7f8 fecc 	bl	8019504 <__aeabi_ui2d>
 802076c:	4602      	mov	r2, r0
 802076e:	460b      	mov	r3, r1
 8020770:	4650      	mov	r0, sl
 8020772:	4659      	mov	r1, fp
 8020774:	f7f8 fd8a 	bl	801928c <__adddf3>
 8020778:	4682      	mov	sl, r0
 802077a:	468b      	mov	fp, r1
 802077c:	2d0f      	cmp	r5, #15
 802077e:	dc38      	bgt.n	80207f2 <_strtod_l+0x45a>
 8020780:	9b08      	ldr	r3, [sp, #32]
 8020782:	2b00      	cmp	r3, #0
 8020784:	f43f ae4a 	beq.w	802041c <_strtod_l+0x84>
 8020788:	dd24      	ble.n	80207d4 <_strtod_l+0x43c>
 802078a:	2b16      	cmp	r3, #22
 802078c:	dc0b      	bgt.n	80207a6 <_strtod_l+0x40e>
 802078e:	4d6b      	ldr	r5, [pc, #428]	; (802093c <_strtod_l+0x5a4>)
 8020790:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8020794:	e9d5 0100 	ldrd	r0, r1, [r5]
 8020798:	4652      	mov	r2, sl
 802079a:	465b      	mov	r3, fp
 802079c:	f7f8 ff2c 	bl	80195f8 <__aeabi_dmul>
 80207a0:	4682      	mov	sl, r0
 80207a2:	468b      	mov	fp, r1
 80207a4:	e63a      	b.n	802041c <_strtod_l+0x84>
 80207a6:	9a08      	ldr	r2, [sp, #32]
 80207a8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80207ac:	4293      	cmp	r3, r2
 80207ae:	db20      	blt.n	80207f2 <_strtod_l+0x45a>
 80207b0:	4c62      	ldr	r4, [pc, #392]	; (802093c <_strtod_l+0x5a4>)
 80207b2:	f1c5 050f 	rsb	r5, r5, #15
 80207b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80207ba:	4652      	mov	r2, sl
 80207bc:	465b      	mov	r3, fp
 80207be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80207c2:	f7f8 ff19 	bl	80195f8 <__aeabi_dmul>
 80207c6:	9b08      	ldr	r3, [sp, #32]
 80207c8:	1b5d      	subs	r5, r3, r5
 80207ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80207ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80207d2:	e7e3      	b.n	802079c <_strtod_l+0x404>
 80207d4:	9b08      	ldr	r3, [sp, #32]
 80207d6:	3316      	adds	r3, #22
 80207d8:	db0b      	blt.n	80207f2 <_strtod_l+0x45a>
 80207da:	9b07      	ldr	r3, [sp, #28]
 80207dc:	4a57      	ldr	r2, [pc, #348]	; (802093c <_strtod_l+0x5a4>)
 80207de:	1b9e      	subs	r6, r3, r6
 80207e0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80207e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80207e8:	4650      	mov	r0, sl
 80207ea:	4659      	mov	r1, fp
 80207ec:	f7f9 f82e 	bl	801984c <__aeabi_ddiv>
 80207f0:	e7d6      	b.n	80207a0 <_strtod_l+0x408>
 80207f2:	9b08      	ldr	r3, [sp, #32]
 80207f4:	eba5 0808 	sub.w	r8, r5, r8
 80207f8:	4498      	add	r8, r3
 80207fa:	f1b8 0f00 	cmp.w	r8, #0
 80207fe:	dd71      	ble.n	80208e4 <_strtod_l+0x54c>
 8020800:	f018 030f 	ands.w	r3, r8, #15
 8020804:	d00a      	beq.n	802081c <_strtod_l+0x484>
 8020806:	494d      	ldr	r1, [pc, #308]	; (802093c <_strtod_l+0x5a4>)
 8020808:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802080c:	4652      	mov	r2, sl
 802080e:	465b      	mov	r3, fp
 8020810:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020814:	f7f8 fef0 	bl	80195f8 <__aeabi_dmul>
 8020818:	4682      	mov	sl, r0
 802081a:	468b      	mov	fp, r1
 802081c:	f038 080f 	bics.w	r8, r8, #15
 8020820:	d04d      	beq.n	80208be <_strtod_l+0x526>
 8020822:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8020826:	dd22      	ble.n	802086e <_strtod_l+0x4d6>
 8020828:	2500      	movs	r5, #0
 802082a:	462e      	mov	r6, r5
 802082c:	9509      	str	r5, [sp, #36]	; 0x24
 802082e:	9507      	str	r5, [sp, #28]
 8020830:	2322      	movs	r3, #34	; 0x22
 8020832:	f8df b110 	ldr.w	fp, [pc, #272]	; 8020944 <_strtod_l+0x5ac>
 8020836:	6023      	str	r3, [r4, #0]
 8020838:	f04f 0a00 	mov.w	sl, #0
 802083c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802083e:	2b00      	cmp	r3, #0
 8020840:	f43f adec 	beq.w	802041c <_strtod_l+0x84>
 8020844:	991e      	ldr	r1, [sp, #120]	; 0x78
 8020846:	4620      	mov	r0, r4
 8020848:	f001 fe88 	bl	802255c <_Bfree>
 802084c:	9907      	ldr	r1, [sp, #28]
 802084e:	4620      	mov	r0, r4
 8020850:	f001 fe84 	bl	802255c <_Bfree>
 8020854:	4631      	mov	r1, r6
 8020856:	4620      	mov	r0, r4
 8020858:	f001 fe80 	bl	802255c <_Bfree>
 802085c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802085e:	4620      	mov	r0, r4
 8020860:	f001 fe7c 	bl	802255c <_Bfree>
 8020864:	4629      	mov	r1, r5
 8020866:	4620      	mov	r0, r4
 8020868:	f001 fe78 	bl	802255c <_Bfree>
 802086c:	e5d6      	b.n	802041c <_strtod_l+0x84>
 802086e:	2300      	movs	r3, #0
 8020870:	ea4f 1828 	mov.w	r8, r8, asr #4
 8020874:	4650      	mov	r0, sl
 8020876:	4659      	mov	r1, fp
 8020878:	4699      	mov	r9, r3
 802087a:	f1b8 0f01 	cmp.w	r8, #1
 802087e:	dc21      	bgt.n	80208c4 <_strtod_l+0x52c>
 8020880:	b10b      	cbz	r3, 8020886 <_strtod_l+0x4ee>
 8020882:	4682      	mov	sl, r0
 8020884:	468b      	mov	fp, r1
 8020886:	4b2e      	ldr	r3, [pc, #184]	; (8020940 <_strtod_l+0x5a8>)
 8020888:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 802088c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8020890:	4652      	mov	r2, sl
 8020892:	465b      	mov	r3, fp
 8020894:	e9d9 0100 	ldrd	r0, r1, [r9]
 8020898:	f7f8 feae 	bl	80195f8 <__aeabi_dmul>
 802089c:	4b29      	ldr	r3, [pc, #164]	; (8020944 <_strtod_l+0x5ac>)
 802089e:	460a      	mov	r2, r1
 80208a0:	400b      	ands	r3, r1
 80208a2:	4929      	ldr	r1, [pc, #164]	; (8020948 <_strtod_l+0x5b0>)
 80208a4:	428b      	cmp	r3, r1
 80208a6:	4682      	mov	sl, r0
 80208a8:	d8be      	bhi.n	8020828 <_strtod_l+0x490>
 80208aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80208ae:	428b      	cmp	r3, r1
 80208b0:	bf86      	itte	hi
 80208b2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 802094c <_strtod_l+0x5b4>
 80208b6:	f04f 3aff 	movhi.w	sl, #4294967295
 80208ba:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80208be:	2300      	movs	r3, #0
 80208c0:	9304      	str	r3, [sp, #16]
 80208c2:	e081      	b.n	80209c8 <_strtod_l+0x630>
 80208c4:	f018 0f01 	tst.w	r8, #1
 80208c8:	d007      	beq.n	80208da <_strtod_l+0x542>
 80208ca:	4b1d      	ldr	r3, [pc, #116]	; (8020940 <_strtod_l+0x5a8>)
 80208cc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80208d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80208d4:	f7f8 fe90 	bl	80195f8 <__aeabi_dmul>
 80208d8:	2301      	movs	r3, #1
 80208da:	f109 0901 	add.w	r9, r9, #1
 80208de:	ea4f 0868 	mov.w	r8, r8, asr #1
 80208e2:	e7ca      	b.n	802087a <_strtod_l+0x4e2>
 80208e4:	d0eb      	beq.n	80208be <_strtod_l+0x526>
 80208e6:	f1c8 0800 	rsb	r8, r8, #0
 80208ea:	f018 020f 	ands.w	r2, r8, #15
 80208ee:	d00a      	beq.n	8020906 <_strtod_l+0x56e>
 80208f0:	4b12      	ldr	r3, [pc, #72]	; (802093c <_strtod_l+0x5a4>)
 80208f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80208f6:	4650      	mov	r0, sl
 80208f8:	4659      	mov	r1, fp
 80208fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80208fe:	f7f8 ffa5 	bl	801984c <__aeabi_ddiv>
 8020902:	4682      	mov	sl, r0
 8020904:	468b      	mov	fp, r1
 8020906:	ea5f 1828 	movs.w	r8, r8, asr #4
 802090a:	d0d8      	beq.n	80208be <_strtod_l+0x526>
 802090c:	f1b8 0f1f 	cmp.w	r8, #31
 8020910:	dd1e      	ble.n	8020950 <_strtod_l+0x5b8>
 8020912:	2500      	movs	r5, #0
 8020914:	462e      	mov	r6, r5
 8020916:	9509      	str	r5, [sp, #36]	; 0x24
 8020918:	9507      	str	r5, [sp, #28]
 802091a:	2322      	movs	r3, #34	; 0x22
 802091c:	f04f 0a00 	mov.w	sl, #0
 8020920:	f04f 0b00 	mov.w	fp, #0
 8020924:	6023      	str	r3, [r4, #0]
 8020926:	e789      	b.n	802083c <_strtod_l+0x4a4>
 8020928:	08023f7d 	.word	0x08023f7d
 802092c:	08023fc0 	.word	0x08023fc0
 8020930:	08023f75 	.word	0x08023f75
 8020934:	08024104 	.word	0x08024104
 8020938:	080243c0 	.word	0x080243c0
 802093c:	080242a0 	.word	0x080242a0
 8020940:	08024278 	.word	0x08024278
 8020944:	7ff00000 	.word	0x7ff00000
 8020948:	7ca00000 	.word	0x7ca00000
 802094c:	7fefffff 	.word	0x7fefffff
 8020950:	f018 0310 	ands.w	r3, r8, #16
 8020954:	bf18      	it	ne
 8020956:	236a      	movne	r3, #106	; 0x6a
 8020958:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8020d10 <_strtod_l+0x978>
 802095c:	9304      	str	r3, [sp, #16]
 802095e:	4650      	mov	r0, sl
 8020960:	4659      	mov	r1, fp
 8020962:	2300      	movs	r3, #0
 8020964:	f018 0f01 	tst.w	r8, #1
 8020968:	d004      	beq.n	8020974 <_strtod_l+0x5dc>
 802096a:	e9d9 2300 	ldrd	r2, r3, [r9]
 802096e:	f7f8 fe43 	bl	80195f8 <__aeabi_dmul>
 8020972:	2301      	movs	r3, #1
 8020974:	ea5f 0868 	movs.w	r8, r8, asr #1
 8020978:	f109 0908 	add.w	r9, r9, #8
 802097c:	d1f2      	bne.n	8020964 <_strtod_l+0x5cc>
 802097e:	b10b      	cbz	r3, 8020984 <_strtod_l+0x5ec>
 8020980:	4682      	mov	sl, r0
 8020982:	468b      	mov	fp, r1
 8020984:	9b04      	ldr	r3, [sp, #16]
 8020986:	b1bb      	cbz	r3, 80209b8 <_strtod_l+0x620>
 8020988:	f3cb 530a 	ubfx	r3, fp, #20, #11
 802098c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8020990:	2b00      	cmp	r3, #0
 8020992:	4659      	mov	r1, fp
 8020994:	dd10      	ble.n	80209b8 <_strtod_l+0x620>
 8020996:	2b1f      	cmp	r3, #31
 8020998:	f340 8128 	ble.w	8020bec <_strtod_l+0x854>
 802099c:	2b34      	cmp	r3, #52	; 0x34
 802099e:	bfde      	ittt	le
 80209a0:	3b20      	suble	r3, #32
 80209a2:	f04f 32ff 	movle.w	r2, #4294967295
 80209a6:	fa02 f303 	lslle.w	r3, r2, r3
 80209aa:	f04f 0a00 	mov.w	sl, #0
 80209ae:	bfcc      	ite	gt
 80209b0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80209b4:	ea03 0b01 	andle.w	fp, r3, r1
 80209b8:	2200      	movs	r2, #0
 80209ba:	2300      	movs	r3, #0
 80209bc:	4650      	mov	r0, sl
 80209be:	4659      	mov	r1, fp
 80209c0:	f7f9 f882 	bl	8019ac8 <__aeabi_dcmpeq>
 80209c4:	2800      	cmp	r0, #0
 80209c6:	d1a4      	bne.n	8020912 <_strtod_l+0x57a>
 80209c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80209ca:	9300      	str	r3, [sp, #0]
 80209cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80209ce:	462b      	mov	r3, r5
 80209d0:	463a      	mov	r2, r7
 80209d2:	4620      	mov	r0, r4
 80209d4:	f001 fe2e 	bl	8022634 <__s2b>
 80209d8:	9009      	str	r0, [sp, #36]	; 0x24
 80209da:	2800      	cmp	r0, #0
 80209dc:	f43f af24 	beq.w	8020828 <_strtod_l+0x490>
 80209e0:	9b07      	ldr	r3, [sp, #28]
 80209e2:	1b9e      	subs	r6, r3, r6
 80209e4:	9b08      	ldr	r3, [sp, #32]
 80209e6:	2b00      	cmp	r3, #0
 80209e8:	bfb4      	ite	lt
 80209ea:	4633      	movlt	r3, r6
 80209ec:	2300      	movge	r3, #0
 80209ee:	9310      	str	r3, [sp, #64]	; 0x40
 80209f0:	9b08      	ldr	r3, [sp, #32]
 80209f2:	2500      	movs	r5, #0
 80209f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80209f8:	9318      	str	r3, [sp, #96]	; 0x60
 80209fa:	462e      	mov	r6, r5
 80209fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80209fe:	4620      	mov	r0, r4
 8020a00:	6859      	ldr	r1, [r3, #4]
 8020a02:	f001 fd6b 	bl	80224dc <_Balloc>
 8020a06:	9007      	str	r0, [sp, #28]
 8020a08:	2800      	cmp	r0, #0
 8020a0a:	f43f af11 	beq.w	8020830 <_strtod_l+0x498>
 8020a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a10:	691a      	ldr	r2, [r3, #16]
 8020a12:	3202      	adds	r2, #2
 8020a14:	f103 010c 	add.w	r1, r3, #12
 8020a18:	0092      	lsls	r2, r2, #2
 8020a1a:	300c      	adds	r0, #12
 8020a1c:	f7fe fcb8 	bl	801f390 <memcpy>
 8020a20:	ec4b ab10 	vmov	d0, sl, fp
 8020a24:	aa20      	add	r2, sp, #128	; 0x80
 8020a26:	a91f      	add	r1, sp, #124	; 0x7c
 8020a28:	4620      	mov	r0, r4
 8020a2a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8020a2e:	f002 f93d 	bl	8022cac <__d2b>
 8020a32:	901e      	str	r0, [sp, #120]	; 0x78
 8020a34:	2800      	cmp	r0, #0
 8020a36:	f43f aefb 	beq.w	8020830 <_strtod_l+0x498>
 8020a3a:	2101      	movs	r1, #1
 8020a3c:	4620      	mov	r0, r4
 8020a3e:	f001 fe93 	bl	8022768 <__i2b>
 8020a42:	4606      	mov	r6, r0
 8020a44:	2800      	cmp	r0, #0
 8020a46:	f43f aef3 	beq.w	8020830 <_strtod_l+0x498>
 8020a4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020a4c:	9904      	ldr	r1, [sp, #16]
 8020a4e:	2b00      	cmp	r3, #0
 8020a50:	bfab      	itete	ge
 8020a52:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8020a54:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8020a56:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8020a58:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8020a5c:	bfac      	ite	ge
 8020a5e:	eb03 0902 	addge.w	r9, r3, r2
 8020a62:	1ad7      	sublt	r7, r2, r3
 8020a64:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020a66:	eba3 0801 	sub.w	r8, r3, r1
 8020a6a:	4490      	add	r8, r2
 8020a6c:	4ba3      	ldr	r3, [pc, #652]	; (8020cfc <_strtod_l+0x964>)
 8020a6e:	f108 38ff 	add.w	r8, r8, #4294967295
 8020a72:	4598      	cmp	r8, r3
 8020a74:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8020a78:	f280 80cc 	bge.w	8020c14 <_strtod_l+0x87c>
 8020a7c:	eba3 0308 	sub.w	r3, r3, r8
 8020a80:	2b1f      	cmp	r3, #31
 8020a82:	eba2 0203 	sub.w	r2, r2, r3
 8020a86:	f04f 0101 	mov.w	r1, #1
 8020a8a:	f300 80b6 	bgt.w	8020bfa <_strtod_l+0x862>
 8020a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8020a92:	9311      	str	r3, [sp, #68]	; 0x44
 8020a94:	2300      	movs	r3, #0
 8020a96:	930c      	str	r3, [sp, #48]	; 0x30
 8020a98:	eb09 0802 	add.w	r8, r9, r2
 8020a9c:	9b04      	ldr	r3, [sp, #16]
 8020a9e:	45c1      	cmp	r9, r8
 8020aa0:	4417      	add	r7, r2
 8020aa2:	441f      	add	r7, r3
 8020aa4:	464b      	mov	r3, r9
 8020aa6:	bfa8      	it	ge
 8020aa8:	4643      	movge	r3, r8
 8020aaa:	42bb      	cmp	r3, r7
 8020aac:	bfa8      	it	ge
 8020aae:	463b      	movge	r3, r7
 8020ab0:	2b00      	cmp	r3, #0
 8020ab2:	bfc2      	ittt	gt
 8020ab4:	eba8 0803 	subgt.w	r8, r8, r3
 8020ab8:	1aff      	subgt	r7, r7, r3
 8020aba:	eba9 0903 	subgt.w	r9, r9, r3
 8020abe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020ac0:	2b00      	cmp	r3, #0
 8020ac2:	dd17      	ble.n	8020af4 <_strtod_l+0x75c>
 8020ac4:	4631      	mov	r1, r6
 8020ac6:	461a      	mov	r2, r3
 8020ac8:	4620      	mov	r0, r4
 8020aca:	f001 ff09 	bl	80228e0 <__pow5mult>
 8020ace:	4606      	mov	r6, r0
 8020ad0:	2800      	cmp	r0, #0
 8020ad2:	f43f aead 	beq.w	8020830 <_strtod_l+0x498>
 8020ad6:	4601      	mov	r1, r0
 8020ad8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8020ada:	4620      	mov	r0, r4
 8020adc:	f001 fe5a 	bl	8022794 <__multiply>
 8020ae0:	900f      	str	r0, [sp, #60]	; 0x3c
 8020ae2:	2800      	cmp	r0, #0
 8020ae4:	f43f aea4 	beq.w	8020830 <_strtod_l+0x498>
 8020ae8:	991e      	ldr	r1, [sp, #120]	; 0x78
 8020aea:	4620      	mov	r0, r4
 8020aec:	f001 fd36 	bl	802255c <_Bfree>
 8020af0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020af2:	931e      	str	r3, [sp, #120]	; 0x78
 8020af4:	f1b8 0f00 	cmp.w	r8, #0
 8020af8:	f300 8091 	bgt.w	8020c1e <_strtod_l+0x886>
 8020afc:	9b08      	ldr	r3, [sp, #32]
 8020afe:	2b00      	cmp	r3, #0
 8020b00:	dd08      	ble.n	8020b14 <_strtod_l+0x77c>
 8020b02:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8020b04:	9907      	ldr	r1, [sp, #28]
 8020b06:	4620      	mov	r0, r4
 8020b08:	f001 feea 	bl	80228e0 <__pow5mult>
 8020b0c:	9007      	str	r0, [sp, #28]
 8020b0e:	2800      	cmp	r0, #0
 8020b10:	f43f ae8e 	beq.w	8020830 <_strtod_l+0x498>
 8020b14:	2f00      	cmp	r7, #0
 8020b16:	dd08      	ble.n	8020b2a <_strtod_l+0x792>
 8020b18:	9907      	ldr	r1, [sp, #28]
 8020b1a:	463a      	mov	r2, r7
 8020b1c:	4620      	mov	r0, r4
 8020b1e:	f001 ff39 	bl	8022994 <__lshift>
 8020b22:	9007      	str	r0, [sp, #28]
 8020b24:	2800      	cmp	r0, #0
 8020b26:	f43f ae83 	beq.w	8020830 <_strtod_l+0x498>
 8020b2a:	f1b9 0f00 	cmp.w	r9, #0
 8020b2e:	dd08      	ble.n	8020b42 <_strtod_l+0x7aa>
 8020b30:	4631      	mov	r1, r6
 8020b32:	464a      	mov	r2, r9
 8020b34:	4620      	mov	r0, r4
 8020b36:	f001 ff2d 	bl	8022994 <__lshift>
 8020b3a:	4606      	mov	r6, r0
 8020b3c:	2800      	cmp	r0, #0
 8020b3e:	f43f ae77 	beq.w	8020830 <_strtod_l+0x498>
 8020b42:	9a07      	ldr	r2, [sp, #28]
 8020b44:	991e      	ldr	r1, [sp, #120]	; 0x78
 8020b46:	4620      	mov	r0, r4
 8020b48:	f001 ffac 	bl	8022aa4 <__mdiff>
 8020b4c:	4605      	mov	r5, r0
 8020b4e:	2800      	cmp	r0, #0
 8020b50:	f43f ae6e 	beq.w	8020830 <_strtod_l+0x498>
 8020b54:	68c3      	ldr	r3, [r0, #12]
 8020b56:	930f      	str	r3, [sp, #60]	; 0x3c
 8020b58:	2300      	movs	r3, #0
 8020b5a:	60c3      	str	r3, [r0, #12]
 8020b5c:	4631      	mov	r1, r6
 8020b5e:	f001 ff85 	bl	8022a6c <__mcmp>
 8020b62:	2800      	cmp	r0, #0
 8020b64:	da65      	bge.n	8020c32 <_strtod_l+0x89a>
 8020b66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020b68:	ea53 030a 	orrs.w	r3, r3, sl
 8020b6c:	f040 8087 	bne.w	8020c7e <_strtod_l+0x8e6>
 8020b70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020b74:	2b00      	cmp	r3, #0
 8020b76:	f040 8082 	bne.w	8020c7e <_strtod_l+0x8e6>
 8020b7a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8020b7e:	0d1b      	lsrs	r3, r3, #20
 8020b80:	051b      	lsls	r3, r3, #20
 8020b82:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8020b86:	d97a      	bls.n	8020c7e <_strtod_l+0x8e6>
 8020b88:	696b      	ldr	r3, [r5, #20]
 8020b8a:	b913      	cbnz	r3, 8020b92 <_strtod_l+0x7fa>
 8020b8c:	692b      	ldr	r3, [r5, #16]
 8020b8e:	2b01      	cmp	r3, #1
 8020b90:	dd75      	ble.n	8020c7e <_strtod_l+0x8e6>
 8020b92:	4629      	mov	r1, r5
 8020b94:	2201      	movs	r2, #1
 8020b96:	4620      	mov	r0, r4
 8020b98:	f001 fefc 	bl	8022994 <__lshift>
 8020b9c:	4631      	mov	r1, r6
 8020b9e:	4605      	mov	r5, r0
 8020ba0:	f001 ff64 	bl	8022a6c <__mcmp>
 8020ba4:	2800      	cmp	r0, #0
 8020ba6:	dd6a      	ble.n	8020c7e <_strtod_l+0x8e6>
 8020ba8:	9904      	ldr	r1, [sp, #16]
 8020baa:	4a55      	ldr	r2, [pc, #340]	; (8020d00 <_strtod_l+0x968>)
 8020bac:	465b      	mov	r3, fp
 8020bae:	2900      	cmp	r1, #0
 8020bb0:	f000 8085 	beq.w	8020cbe <_strtod_l+0x926>
 8020bb4:	ea02 010b 	and.w	r1, r2, fp
 8020bb8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8020bbc:	dc7f      	bgt.n	8020cbe <_strtod_l+0x926>
 8020bbe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8020bc2:	f77f aeaa 	ble.w	802091a <_strtod_l+0x582>
 8020bc6:	4a4f      	ldr	r2, [pc, #316]	; (8020d04 <_strtod_l+0x96c>)
 8020bc8:	2300      	movs	r3, #0
 8020bca:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8020bce:	4650      	mov	r0, sl
 8020bd0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8020bd4:	4659      	mov	r1, fp
 8020bd6:	f7f8 fd0f 	bl	80195f8 <__aeabi_dmul>
 8020bda:	460b      	mov	r3, r1
 8020bdc:	4303      	orrs	r3, r0
 8020bde:	bf08      	it	eq
 8020be0:	2322      	moveq	r3, #34	; 0x22
 8020be2:	4682      	mov	sl, r0
 8020be4:	468b      	mov	fp, r1
 8020be6:	bf08      	it	eq
 8020be8:	6023      	streq	r3, [r4, #0]
 8020bea:	e62b      	b.n	8020844 <_strtod_l+0x4ac>
 8020bec:	f04f 32ff 	mov.w	r2, #4294967295
 8020bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8020bf4:	ea03 0a0a 	and.w	sl, r3, sl
 8020bf8:	e6de      	b.n	80209b8 <_strtod_l+0x620>
 8020bfa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8020bfe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8020c02:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8020c06:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8020c0a:	fa01 f308 	lsl.w	r3, r1, r8
 8020c0e:	930c      	str	r3, [sp, #48]	; 0x30
 8020c10:	9111      	str	r1, [sp, #68]	; 0x44
 8020c12:	e741      	b.n	8020a98 <_strtod_l+0x700>
 8020c14:	2300      	movs	r3, #0
 8020c16:	930c      	str	r3, [sp, #48]	; 0x30
 8020c18:	2301      	movs	r3, #1
 8020c1a:	9311      	str	r3, [sp, #68]	; 0x44
 8020c1c:	e73c      	b.n	8020a98 <_strtod_l+0x700>
 8020c1e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8020c20:	4642      	mov	r2, r8
 8020c22:	4620      	mov	r0, r4
 8020c24:	f001 feb6 	bl	8022994 <__lshift>
 8020c28:	901e      	str	r0, [sp, #120]	; 0x78
 8020c2a:	2800      	cmp	r0, #0
 8020c2c:	f47f af66 	bne.w	8020afc <_strtod_l+0x764>
 8020c30:	e5fe      	b.n	8020830 <_strtod_l+0x498>
 8020c32:	465f      	mov	r7, fp
 8020c34:	d16e      	bne.n	8020d14 <_strtod_l+0x97c>
 8020c36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020c38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020c3c:	b342      	cbz	r2, 8020c90 <_strtod_l+0x8f8>
 8020c3e:	4a32      	ldr	r2, [pc, #200]	; (8020d08 <_strtod_l+0x970>)
 8020c40:	4293      	cmp	r3, r2
 8020c42:	d128      	bne.n	8020c96 <_strtod_l+0x8fe>
 8020c44:	9b04      	ldr	r3, [sp, #16]
 8020c46:	4650      	mov	r0, sl
 8020c48:	b1eb      	cbz	r3, 8020c86 <_strtod_l+0x8ee>
 8020c4a:	4a2d      	ldr	r2, [pc, #180]	; (8020d00 <_strtod_l+0x968>)
 8020c4c:	403a      	ands	r2, r7
 8020c4e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8020c52:	f04f 31ff 	mov.w	r1, #4294967295
 8020c56:	d819      	bhi.n	8020c8c <_strtod_l+0x8f4>
 8020c58:	0d12      	lsrs	r2, r2, #20
 8020c5a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8020c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8020c62:	4298      	cmp	r0, r3
 8020c64:	d117      	bne.n	8020c96 <_strtod_l+0x8fe>
 8020c66:	4b29      	ldr	r3, [pc, #164]	; (8020d0c <_strtod_l+0x974>)
 8020c68:	429f      	cmp	r7, r3
 8020c6a:	d102      	bne.n	8020c72 <_strtod_l+0x8da>
 8020c6c:	3001      	adds	r0, #1
 8020c6e:	f43f addf 	beq.w	8020830 <_strtod_l+0x498>
 8020c72:	4b23      	ldr	r3, [pc, #140]	; (8020d00 <_strtod_l+0x968>)
 8020c74:	403b      	ands	r3, r7
 8020c76:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8020c7a:	f04f 0a00 	mov.w	sl, #0
 8020c7e:	9b04      	ldr	r3, [sp, #16]
 8020c80:	2b00      	cmp	r3, #0
 8020c82:	d1a0      	bne.n	8020bc6 <_strtod_l+0x82e>
 8020c84:	e5de      	b.n	8020844 <_strtod_l+0x4ac>
 8020c86:	f04f 33ff 	mov.w	r3, #4294967295
 8020c8a:	e7ea      	b.n	8020c62 <_strtod_l+0x8ca>
 8020c8c:	460b      	mov	r3, r1
 8020c8e:	e7e8      	b.n	8020c62 <_strtod_l+0x8ca>
 8020c90:	ea53 030a 	orrs.w	r3, r3, sl
 8020c94:	d088      	beq.n	8020ba8 <_strtod_l+0x810>
 8020c96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020c98:	b1db      	cbz	r3, 8020cd2 <_strtod_l+0x93a>
 8020c9a:	423b      	tst	r3, r7
 8020c9c:	d0ef      	beq.n	8020c7e <_strtod_l+0x8e6>
 8020c9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020ca0:	9a04      	ldr	r2, [sp, #16]
 8020ca2:	4650      	mov	r0, sl
 8020ca4:	4659      	mov	r1, fp
 8020ca6:	b1c3      	cbz	r3, 8020cda <_strtod_l+0x942>
 8020ca8:	f7ff fb57 	bl	802035a <sulp>
 8020cac:	4602      	mov	r2, r0
 8020cae:	460b      	mov	r3, r1
 8020cb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8020cb4:	f7f8 faea 	bl	801928c <__adddf3>
 8020cb8:	4682      	mov	sl, r0
 8020cba:	468b      	mov	fp, r1
 8020cbc:	e7df      	b.n	8020c7e <_strtod_l+0x8e6>
 8020cbe:	4013      	ands	r3, r2
 8020cc0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8020cc4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8020cc8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8020ccc:	f04f 3aff 	mov.w	sl, #4294967295
 8020cd0:	e7d5      	b.n	8020c7e <_strtod_l+0x8e6>
 8020cd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020cd4:	ea13 0f0a 	tst.w	r3, sl
 8020cd8:	e7e0      	b.n	8020c9c <_strtod_l+0x904>
 8020cda:	f7ff fb3e 	bl	802035a <sulp>
 8020cde:	4602      	mov	r2, r0
 8020ce0:	460b      	mov	r3, r1
 8020ce2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8020ce6:	f7f8 facf 	bl	8019288 <__aeabi_dsub>
 8020cea:	2200      	movs	r2, #0
 8020cec:	2300      	movs	r3, #0
 8020cee:	4682      	mov	sl, r0
 8020cf0:	468b      	mov	fp, r1
 8020cf2:	f7f8 fee9 	bl	8019ac8 <__aeabi_dcmpeq>
 8020cf6:	2800      	cmp	r0, #0
 8020cf8:	d0c1      	beq.n	8020c7e <_strtod_l+0x8e6>
 8020cfa:	e60e      	b.n	802091a <_strtod_l+0x582>
 8020cfc:	fffffc02 	.word	0xfffffc02
 8020d00:	7ff00000 	.word	0x7ff00000
 8020d04:	39500000 	.word	0x39500000
 8020d08:	000fffff 	.word	0x000fffff
 8020d0c:	7fefffff 	.word	0x7fefffff
 8020d10:	08023fd8 	.word	0x08023fd8
 8020d14:	4631      	mov	r1, r6
 8020d16:	4628      	mov	r0, r5
 8020d18:	f002 f824 	bl	8022d64 <__ratio>
 8020d1c:	ec59 8b10 	vmov	r8, r9, d0
 8020d20:	ee10 0a10 	vmov	r0, s0
 8020d24:	2200      	movs	r2, #0
 8020d26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8020d2a:	4649      	mov	r1, r9
 8020d2c:	f7f8 fee0 	bl	8019af0 <__aeabi_dcmple>
 8020d30:	2800      	cmp	r0, #0
 8020d32:	d07c      	beq.n	8020e2e <_strtod_l+0xa96>
 8020d34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020d36:	2b00      	cmp	r3, #0
 8020d38:	d04c      	beq.n	8020dd4 <_strtod_l+0xa3c>
 8020d3a:	4b95      	ldr	r3, [pc, #596]	; (8020f90 <_strtod_l+0xbf8>)
 8020d3c:	2200      	movs	r2, #0
 8020d3e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8020d42:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8020f90 <_strtod_l+0xbf8>
 8020d46:	f04f 0800 	mov.w	r8, #0
 8020d4a:	4b92      	ldr	r3, [pc, #584]	; (8020f94 <_strtod_l+0xbfc>)
 8020d4c:	403b      	ands	r3, r7
 8020d4e:	9311      	str	r3, [sp, #68]	; 0x44
 8020d50:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020d52:	4b91      	ldr	r3, [pc, #580]	; (8020f98 <_strtod_l+0xc00>)
 8020d54:	429a      	cmp	r2, r3
 8020d56:	f040 80b2 	bne.w	8020ebe <_strtod_l+0xb26>
 8020d5a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8020d5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8020d62:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8020d66:	ec4b ab10 	vmov	d0, sl, fp
 8020d6a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8020d6e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8020d72:	f001 ff1f 	bl	8022bb4 <__ulp>
 8020d76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8020d7a:	ec53 2b10 	vmov	r2, r3, d0
 8020d7e:	f7f8 fc3b 	bl	80195f8 <__aeabi_dmul>
 8020d82:	4652      	mov	r2, sl
 8020d84:	465b      	mov	r3, fp
 8020d86:	f7f8 fa81 	bl	801928c <__adddf3>
 8020d8a:	460b      	mov	r3, r1
 8020d8c:	4981      	ldr	r1, [pc, #516]	; (8020f94 <_strtod_l+0xbfc>)
 8020d8e:	4a83      	ldr	r2, [pc, #524]	; (8020f9c <_strtod_l+0xc04>)
 8020d90:	4019      	ands	r1, r3
 8020d92:	4291      	cmp	r1, r2
 8020d94:	4682      	mov	sl, r0
 8020d96:	d95e      	bls.n	8020e56 <_strtod_l+0xabe>
 8020d98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020d9a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8020d9e:	4293      	cmp	r3, r2
 8020da0:	d103      	bne.n	8020daa <_strtod_l+0xa12>
 8020da2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020da4:	3301      	adds	r3, #1
 8020da6:	f43f ad43 	beq.w	8020830 <_strtod_l+0x498>
 8020daa:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8020fa8 <_strtod_l+0xc10>
 8020dae:	f04f 3aff 	mov.w	sl, #4294967295
 8020db2:	991e      	ldr	r1, [sp, #120]	; 0x78
 8020db4:	4620      	mov	r0, r4
 8020db6:	f001 fbd1 	bl	802255c <_Bfree>
 8020dba:	9907      	ldr	r1, [sp, #28]
 8020dbc:	4620      	mov	r0, r4
 8020dbe:	f001 fbcd 	bl	802255c <_Bfree>
 8020dc2:	4631      	mov	r1, r6
 8020dc4:	4620      	mov	r0, r4
 8020dc6:	f001 fbc9 	bl	802255c <_Bfree>
 8020dca:	4629      	mov	r1, r5
 8020dcc:	4620      	mov	r0, r4
 8020dce:	f001 fbc5 	bl	802255c <_Bfree>
 8020dd2:	e613      	b.n	80209fc <_strtod_l+0x664>
 8020dd4:	f1ba 0f00 	cmp.w	sl, #0
 8020dd8:	d11b      	bne.n	8020e12 <_strtod_l+0xa7a>
 8020dda:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020dde:	b9f3      	cbnz	r3, 8020e1e <_strtod_l+0xa86>
 8020de0:	4b6b      	ldr	r3, [pc, #428]	; (8020f90 <_strtod_l+0xbf8>)
 8020de2:	2200      	movs	r2, #0
 8020de4:	4640      	mov	r0, r8
 8020de6:	4649      	mov	r1, r9
 8020de8:	f7f8 fe78 	bl	8019adc <__aeabi_dcmplt>
 8020dec:	b9d0      	cbnz	r0, 8020e24 <_strtod_l+0xa8c>
 8020dee:	4640      	mov	r0, r8
 8020df0:	4649      	mov	r1, r9
 8020df2:	4b6b      	ldr	r3, [pc, #428]	; (8020fa0 <_strtod_l+0xc08>)
 8020df4:	2200      	movs	r2, #0
 8020df6:	f7f8 fbff 	bl	80195f8 <__aeabi_dmul>
 8020dfa:	4680      	mov	r8, r0
 8020dfc:	4689      	mov	r9, r1
 8020dfe:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8020e02:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8020e06:	931b      	str	r3, [sp, #108]	; 0x6c
 8020e08:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8020e0c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8020e10:	e79b      	b.n	8020d4a <_strtod_l+0x9b2>
 8020e12:	f1ba 0f01 	cmp.w	sl, #1
 8020e16:	d102      	bne.n	8020e1e <_strtod_l+0xa86>
 8020e18:	2f00      	cmp	r7, #0
 8020e1a:	f43f ad7e 	beq.w	802091a <_strtod_l+0x582>
 8020e1e:	4b61      	ldr	r3, [pc, #388]	; (8020fa4 <_strtod_l+0xc0c>)
 8020e20:	2200      	movs	r2, #0
 8020e22:	e78c      	b.n	8020d3e <_strtod_l+0x9a6>
 8020e24:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8020fa0 <_strtod_l+0xc08>
 8020e28:	f04f 0800 	mov.w	r8, #0
 8020e2c:	e7e7      	b.n	8020dfe <_strtod_l+0xa66>
 8020e2e:	4b5c      	ldr	r3, [pc, #368]	; (8020fa0 <_strtod_l+0xc08>)
 8020e30:	4640      	mov	r0, r8
 8020e32:	4649      	mov	r1, r9
 8020e34:	2200      	movs	r2, #0
 8020e36:	f7f8 fbdf 	bl	80195f8 <__aeabi_dmul>
 8020e3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020e3c:	4680      	mov	r8, r0
 8020e3e:	4689      	mov	r9, r1
 8020e40:	b933      	cbnz	r3, 8020e50 <_strtod_l+0xab8>
 8020e42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020e46:	9012      	str	r0, [sp, #72]	; 0x48
 8020e48:	9313      	str	r3, [sp, #76]	; 0x4c
 8020e4a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8020e4e:	e7dd      	b.n	8020e0c <_strtod_l+0xa74>
 8020e50:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8020e54:	e7f9      	b.n	8020e4a <_strtod_l+0xab2>
 8020e56:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8020e5a:	9b04      	ldr	r3, [sp, #16]
 8020e5c:	2b00      	cmp	r3, #0
 8020e5e:	d1a8      	bne.n	8020db2 <_strtod_l+0xa1a>
 8020e60:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8020e64:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020e66:	0d1b      	lsrs	r3, r3, #20
 8020e68:	051b      	lsls	r3, r3, #20
 8020e6a:	429a      	cmp	r2, r3
 8020e6c:	d1a1      	bne.n	8020db2 <_strtod_l+0xa1a>
 8020e6e:	4640      	mov	r0, r8
 8020e70:	4649      	mov	r1, r9
 8020e72:	f7f8 ff21 	bl	8019cb8 <__aeabi_d2lz>
 8020e76:	f7f8 fb91 	bl	801959c <__aeabi_l2d>
 8020e7a:	4602      	mov	r2, r0
 8020e7c:	460b      	mov	r3, r1
 8020e7e:	4640      	mov	r0, r8
 8020e80:	4649      	mov	r1, r9
 8020e82:	f7f8 fa01 	bl	8019288 <__aeabi_dsub>
 8020e86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020e88:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020e8c:	ea43 030a 	orr.w	r3, r3, sl
 8020e90:	4313      	orrs	r3, r2
 8020e92:	4680      	mov	r8, r0
 8020e94:	4689      	mov	r9, r1
 8020e96:	d053      	beq.n	8020f40 <_strtod_l+0xba8>
 8020e98:	a335      	add	r3, pc, #212	; (adr r3, 8020f70 <_strtod_l+0xbd8>)
 8020e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e9e:	f7f8 fe1d 	bl	8019adc <__aeabi_dcmplt>
 8020ea2:	2800      	cmp	r0, #0
 8020ea4:	f47f acce 	bne.w	8020844 <_strtod_l+0x4ac>
 8020ea8:	a333      	add	r3, pc, #204	; (adr r3, 8020f78 <_strtod_l+0xbe0>)
 8020eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020eae:	4640      	mov	r0, r8
 8020eb0:	4649      	mov	r1, r9
 8020eb2:	f7f8 fe31 	bl	8019b18 <__aeabi_dcmpgt>
 8020eb6:	2800      	cmp	r0, #0
 8020eb8:	f43f af7b 	beq.w	8020db2 <_strtod_l+0xa1a>
 8020ebc:	e4c2      	b.n	8020844 <_strtod_l+0x4ac>
 8020ebe:	9b04      	ldr	r3, [sp, #16]
 8020ec0:	b333      	cbz	r3, 8020f10 <_strtod_l+0xb78>
 8020ec2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020ec4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8020ec8:	d822      	bhi.n	8020f10 <_strtod_l+0xb78>
 8020eca:	a32d      	add	r3, pc, #180	; (adr r3, 8020f80 <_strtod_l+0xbe8>)
 8020ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ed0:	4640      	mov	r0, r8
 8020ed2:	4649      	mov	r1, r9
 8020ed4:	f7f8 fe0c 	bl	8019af0 <__aeabi_dcmple>
 8020ed8:	b1a0      	cbz	r0, 8020f04 <_strtod_l+0xb6c>
 8020eda:	4649      	mov	r1, r9
 8020edc:	4640      	mov	r0, r8
 8020ede:	f7f8 fe63 	bl	8019ba8 <__aeabi_d2uiz>
 8020ee2:	2801      	cmp	r0, #1
 8020ee4:	bf38      	it	cc
 8020ee6:	2001      	movcc	r0, #1
 8020ee8:	f7f8 fb0c 	bl	8019504 <__aeabi_ui2d>
 8020eec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020eee:	4680      	mov	r8, r0
 8020ef0:	4689      	mov	r9, r1
 8020ef2:	bb13      	cbnz	r3, 8020f3a <_strtod_l+0xba2>
 8020ef4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020ef8:	9014      	str	r0, [sp, #80]	; 0x50
 8020efa:	9315      	str	r3, [sp, #84]	; 0x54
 8020efc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8020f00:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8020f04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020f06:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020f08:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8020f0c:	1a9b      	subs	r3, r3, r2
 8020f0e:	930d      	str	r3, [sp, #52]	; 0x34
 8020f10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8020f14:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8020f18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8020f1c:	f001 fe4a 	bl	8022bb4 <__ulp>
 8020f20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8020f24:	ec53 2b10 	vmov	r2, r3, d0
 8020f28:	f7f8 fb66 	bl	80195f8 <__aeabi_dmul>
 8020f2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8020f30:	f7f8 f9ac 	bl	801928c <__adddf3>
 8020f34:	4682      	mov	sl, r0
 8020f36:	468b      	mov	fp, r1
 8020f38:	e78f      	b.n	8020e5a <_strtod_l+0xac2>
 8020f3a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8020f3e:	e7dd      	b.n	8020efc <_strtod_l+0xb64>
 8020f40:	a311      	add	r3, pc, #68	; (adr r3, 8020f88 <_strtod_l+0xbf0>)
 8020f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f46:	f7f8 fdc9 	bl	8019adc <__aeabi_dcmplt>
 8020f4a:	e7b4      	b.n	8020eb6 <_strtod_l+0xb1e>
 8020f4c:	2300      	movs	r3, #0
 8020f4e:	930e      	str	r3, [sp, #56]	; 0x38
 8020f50:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8020f52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020f54:	6013      	str	r3, [r2, #0]
 8020f56:	f7ff ba65 	b.w	8020424 <_strtod_l+0x8c>
 8020f5a:	2b65      	cmp	r3, #101	; 0x65
 8020f5c:	f43f ab5d 	beq.w	802061a <_strtod_l+0x282>
 8020f60:	2b45      	cmp	r3, #69	; 0x45
 8020f62:	f43f ab5a 	beq.w	802061a <_strtod_l+0x282>
 8020f66:	2201      	movs	r2, #1
 8020f68:	f7ff bb92 	b.w	8020690 <_strtod_l+0x2f8>
 8020f6c:	f3af 8000 	nop.w
 8020f70:	94a03595 	.word	0x94a03595
 8020f74:	3fdfffff 	.word	0x3fdfffff
 8020f78:	35afe535 	.word	0x35afe535
 8020f7c:	3fe00000 	.word	0x3fe00000
 8020f80:	ffc00000 	.word	0xffc00000
 8020f84:	41dfffff 	.word	0x41dfffff
 8020f88:	94a03595 	.word	0x94a03595
 8020f8c:	3fcfffff 	.word	0x3fcfffff
 8020f90:	3ff00000 	.word	0x3ff00000
 8020f94:	7ff00000 	.word	0x7ff00000
 8020f98:	7fe00000 	.word	0x7fe00000
 8020f9c:	7c9fffff 	.word	0x7c9fffff
 8020fa0:	3fe00000 	.word	0x3fe00000
 8020fa4:	bff00000 	.word	0xbff00000
 8020fa8:	7fefffff 	.word	0x7fefffff

08020fac <_strtod_r>:
 8020fac:	4b01      	ldr	r3, [pc, #4]	; (8020fb4 <_strtod_r+0x8>)
 8020fae:	f7ff b9f3 	b.w	8020398 <_strtod_l>
 8020fb2:	bf00      	nop
 8020fb4:	20000098 	.word	0x20000098

08020fb8 <_strtol_l.isra.0>:
 8020fb8:	2b01      	cmp	r3, #1
 8020fba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020fbe:	d001      	beq.n	8020fc4 <_strtol_l.isra.0+0xc>
 8020fc0:	2b24      	cmp	r3, #36	; 0x24
 8020fc2:	d906      	bls.n	8020fd2 <_strtol_l.isra.0+0x1a>
 8020fc4:	f7fe f9aa 	bl	801f31c <__errno>
 8020fc8:	2316      	movs	r3, #22
 8020fca:	6003      	str	r3, [r0, #0]
 8020fcc:	2000      	movs	r0, #0
 8020fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020fd2:	4f3a      	ldr	r7, [pc, #232]	; (80210bc <_strtol_l.isra.0+0x104>)
 8020fd4:	468e      	mov	lr, r1
 8020fd6:	4676      	mov	r6, lr
 8020fd8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8020fdc:	5de5      	ldrb	r5, [r4, r7]
 8020fde:	f015 0508 	ands.w	r5, r5, #8
 8020fe2:	d1f8      	bne.n	8020fd6 <_strtol_l.isra.0+0x1e>
 8020fe4:	2c2d      	cmp	r4, #45	; 0x2d
 8020fe6:	d134      	bne.n	8021052 <_strtol_l.isra.0+0x9a>
 8020fe8:	f89e 4000 	ldrb.w	r4, [lr]
 8020fec:	f04f 0801 	mov.w	r8, #1
 8020ff0:	f106 0e02 	add.w	lr, r6, #2
 8020ff4:	2b00      	cmp	r3, #0
 8020ff6:	d05c      	beq.n	80210b2 <_strtol_l.isra.0+0xfa>
 8020ff8:	2b10      	cmp	r3, #16
 8020ffa:	d10c      	bne.n	8021016 <_strtol_l.isra.0+0x5e>
 8020ffc:	2c30      	cmp	r4, #48	; 0x30
 8020ffe:	d10a      	bne.n	8021016 <_strtol_l.isra.0+0x5e>
 8021000:	f89e 4000 	ldrb.w	r4, [lr]
 8021004:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8021008:	2c58      	cmp	r4, #88	; 0x58
 802100a:	d14d      	bne.n	80210a8 <_strtol_l.isra.0+0xf0>
 802100c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8021010:	2310      	movs	r3, #16
 8021012:	f10e 0e02 	add.w	lr, lr, #2
 8021016:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 802101a:	f10c 3cff 	add.w	ip, ip, #4294967295
 802101e:	2600      	movs	r6, #0
 8021020:	fbbc f9f3 	udiv	r9, ip, r3
 8021024:	4635      	mov	r5, r6
 8021026:	fb03 ca19 	mls	sl, r3, r9, ip
 802102a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 802102e:	2f09      	cmp	r7, #9
 8021030:	d818      	bhi.n	8021064 <_strtol_l.isra.0+0xac>
 8021032:	463c      	mov	r4, r7
 8021034:	42a3      	cmp	r3, r4
 8021036:	dd24      	ble.n	8021082 <_strtol_l.isra.0+0xca>
 8021038:	2e00      	cmp	r6, #0
 802103a:	db1f      	blt.n	802107c <_strtol_l.isra.0+0xc4>
 802103c:	45a9      	cmp	r9, r5
 802103e:	d31d      	bcc.n	802107c <_strtol_l.isra.0+0xc4>
 8021040:	d101      	bne.n	8021046 <_strtol_l.isra.0+0x8e>
 8021042:	45a2      	cmp	sl, r4
 8021044:	db1a      	blt.n	802107c <_strtol_l.isra.0+0xc4>
 8021046:	fb05 4503 	mla	r5, r5, r3, r4
 802104a:	2601      	movs	r6, #1
 802104c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8021050:	e7eb      	b.n	802102a <_strtol_l.isra.0+0x72>
 8021052:	2c2b      	cmp	r4, #43	; 0x2b
 8021054:	bf08      	it	eq
 8021056:	f89e 4000 	ldrbeq.w	r4, [lr]
 802105a:	46a8      	mov	r8, r5
 802105c:	bf08      	it	eq
 802105e:	f106 0e02 	addeq.w	lr, r6, #2
 8021062:	e7c7      	b.n	8020ff4 <_strtol_l.isra.0+0x3c>
 8021064:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8021068:	2f19      	cmp	r7, #25
 802106a:	d801      	bhi.n	8021070 <_strtol_l.isra.0+0xb8>
 802106c:	3c37      	subs	r4, #55	; 0x37
 802106e:	e7e1      	b.n	8021034 <_strtol_l.isra.0+0x7c>
 8021070:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8021074:	2f19      	cmp	r7, #25
 8021076:	d804      	bhi.n	8021082 <_strtol_l.isra.0+0xca>
 8021078:	3c57      	subs	r4, #87	; 0x57
 802107a:	e7db      	b.n	8021034 <_strtol_l.isra.0+0x7c>
 802107c:	f04f 36ff 	mov.w	r6, #4294967295
 8021080:	e7e4      	b.n	802104c <_strtol_l.isra.0+0x94>
 8021082:	2e00      	cmp	r6, #0
 8021084:	da05      	bge.n	8021092 <_strtol_l.isra.0+0xda>
 8021086:	2322      	movs	r3, #34	; 0x22
 8021088:	6003      	str	r3, [r0, #0]
 802108a:	4665      	mov	r5, ip
 802108c:	b942      	cbnz	r2, 80210a0 <_strtol_l.isra.0+0xe8>
 802108e:	4628      	mov	r0, r5
 8021090:	e79d      	b.n	8020fce <_strtol_l.isra.0+0x16>
 8021092:	f1b8 0f00 	cmp.w	r8, #0
 8021096:	d000      	beq.n	802109a <_strtol_l.isra.0+0xe2>
 8021098:	426d      	negs	r5, r5
 802109a:	2a00      	cmp	r2, #0
 802109c:	d0f7      	beq.n	802108e <_strtol_l.isra.0+0xd6>
 802109e:	b10e      	cbz	r6, 80210a4 <_strtol_l.isra.0+0xec>
 80210a0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80210a4:	6011      	str	r1, [r2, #0]
 80210a6:	e7f2      	b.n	802108e <_strtol_l.isra.0+0xd6>
 80210a8:	2430      	movs	r4, #48	; 0x30
 80210aa:	2b00      	cmp	r3, #0
 80210ac:	d1b3      	bne.n	8021016 <_strtol_l.isra.0+0x5e>
 80210ae:	2308      	movs	r3, #8
 80210b0:	e7b1      	b.n	8021016 <_strtol_l.isra.0+0x5e>
 80210b2:	2c30      	cmp	r4, #48	; 0x30
 80210b4:	d0a4      	beq.n	8021000 <_strtol_l.isra.0+0x48>
 80210b6:	230a      	movs	r3, #10
 80210b8:	e7ad      	b.n	8021016 <_strtol_l.isra.0+0x5e>
 80210ba:	bf00      	nop
 80210bc:	08024001 	.word	0x08024001

080210c0 <_strtol_r>:
 80210c0:	f7ff bf7a 	b.w	8020fb8 <_strtol_l.isra.0>

080210c4 <quorem>:
 80210c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210c8:	6903      	ldr	r3, [r0, #16]
 80210ca:	690c      	ldr	r4, [r1, #16]
 80210cc:	42a3      	cmp	r3, r4
 80210ce:	4607      	mov	r7, r0
 80210d0:	f2c0 8081 	blt.w	80211d6 <quorem+0x112>
 80210d4:	3c01      	subs	r4, #1
 80210d6:	f101 0814 	add.w	r8, r1, #20
 80210da:	f100 0514 	add.w	r5, r0, #20
 80210de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80210e2:	9301      	str	r3, [sp, #4]
 80210e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80210e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80210ec:	3301      	adds	r3, #1
 80210ee:	429a      	cmp	r2, r3
 80210f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80210f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80210f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80210fc:	d331      	bcc.n	8021162 <quorem+0x9e>
 80210fe:	f04f 0e00 	mov.w	lr, #0
 8021102:	4640      	mov	r0, r8
 8021104:	46ac      	mov	ip, r5
 8021106:	46f2      	mov	sl, lr
 8021108:	f850 2b04 	ldr.w	r2, [r0], #4
 802110c:	b293      	uxth	r3, r2
 802110e:	fb06 e303 	mla	r3, r6, r3, lr
 8021112:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8021116:	b29b      	uxth	r3, r3
 8021118:	ebaa 0303 	sub.w	r3, sl, r3
 802111c:	0c12      	lsrs	r2, r2, #16
 802111e:	f8dc a000 	ldr.w	sl, [ip]
 8021122:	fb06 e202 	mla	r2, r6, r2, lr
 8021126:	fa13 f38a 	uxtah	r3, r3, sl
 802112a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802112e:	fa1f fa82 	uxth.w	sl, r2
 8021132:	f8dc 2000 	ldr.w	r2, [ip]
 8021136:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 802113a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802113e:	b29b      	uxth	r3, r3
 8021140:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021144:	4581      	cmp	r9, r0
 8021146:	f84c 3b04 	str.w	r3, [ip], #4
 802114a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 802114e:	d2db      	bcs.n	8021108 <quorem+0x44>
 8021150:	f855 300b 	ldr.w	r3, [r5, fp]
 8021154:	b92b      	cbnz	r3, 8021162 <quorem+0x9e>
 8021156:	9b01      	ldr	r3, [sp, #4]
 8021158:	3b04      	subs	r3, #4
 802115a:	429d      	cmp	r5, r3
 802115c:	461a      	mov	r2, r3
 802115e:	d32e      	bcc.n	80211be <quorem+0xfa>
 8021160:	613c      	str	r4, [r7, #16]
 8021162:	4638      	mov	r0, r7
 8021164:	f001 fc82 	bl	8022a6c <__mcmp>
 8021168:	2800      	cmp	r0, #0
 802116a:	db24      	blt.n	80211b6 <quorem+0xf2>
 802116c:	3601      	adds	r6, #1
 802116e:	4628      	mov	r0, r5
 8021170:	f04f 0c00 	mov.w	ip, #0
 8021174:	f858 2b04 	ldr.w	r2, [r8], #4
 8021178:	f8d0 e000 	ldr.w	lr, [r0]
 802117c:	b293      	uxth	r3, r2
 802117e:	ebac 0303 	sub.w	r3, ip, r3
 8021182:	0c12      	lsrs	r2, r2, #16
 8021184:	fa13 f38e 	uxtah	r3, r3, lr
 8021188:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 802118c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8021190:	b29b      	uxth	r3, r3
 8021192:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021196:	45c1      	cmp	r9, r8
 8021198:	f840 3b04 	str.w	r3, [r0], #4
 802119c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80211a0:	d2e8      	bcs.n	8021174 <quorem+0xb0>
 80211a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80211a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80211aa:	b922      	cbnz	r2, 80211b6 <quorem+0xf2>
 80211ac:	3b04      	subs	r3, #4
 80211ae:	429d      	cmp	r5, r3
 80211b0:	461a      	mov	r2, r3
 80211b2:	d30a      	bcc.n	80211ca <quorem+0x106>
 80211b4:	613c      	str	r4, [r7, #16]
 80211b6:	4630      	mov	r0, r6
 80211b8:	b003      	add	sp, #12
 80211ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80211be:	6812      	ldr	r2, [r2, #0]
 80211c0:	3b04      	subs	r3, #4
 80211c2:	2a00      	cmp	r2, #0
 80211c4:	d1cc      	bne.n	8021160 <quorem+0x9c>
 80211c6:	3c01      	subs	r4, #1
 80211c8:	e7c7      	b.n	802115a <quorem+0x96>
 80211ca:	6812      	ldr	r2, [r2, #0]
 80211cc:	3b04      	subs	r3, #4
 80211ce:	2a00      	cmp	r2, #0
 80211d0:	d1f0      	bne.n	80211b4 <quorem+0xf0>
 80211d2:	3c01      	subs	r4, #1
 80211d4:	e7eb      	b.n	80211ae <quorem+0xea>
 80211d6:	2000      	movs	r0, #0
 80211d8:	e7ee      	b.n	80211b8 <quorem+0xf4>
 80211da:	0000      	movs	r0, r0
 80211dc:	0000      	movs	r0, r0
	...

080211e0 <_dtoa_r>:
 80211e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211e4:	ed2d 8b02 	vpush	{d8}
 80211e8:	ec57 6b10 	vmov	r6, r7, d0
 80211ec:	b095      	sub	sp, #84	; 0x54
 80211ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80211f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80211f4:	9105      	str	r1, [sp, #20]
 80211f6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80211fa:	4604      	mov	r4, r0
 80211fc:	9209      	str	r2, [sp, #36]	; 0x24
 80211fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8021200:	b975      	cbnz	r5, 8021220 <_dtoa_r+0x40>
 8021202:	2010      	movs	r0, #16
 8021204:	f7fe f8b4 	bl	801f370 <malloc>
 8021208:	4602      	mov	r2, r0
 802120a:	6260      	str	r0, [r4, #36]	; 0x24
 802120c:	b920      	cbnz	r0, 8021218 <_dtoa_r+0x38>
 802120e:	4bb2      	ldr	r3, [pc, #712]	; (80214d8 <_dtoa_r+0x2f8>)
 8021210:	21ea      	movs	r1, #234	; 0xea
 8021212:	48b2      	ldr	r0, [pc, #712]	; (80214dc <_dtoa_r+0x2fc>)
 8021214:	f001 ffb0 	bl	8023178 <__assert_func>
 8021218:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802121c:	6005      	str	r5, [r0, #0]
 802121e:	60c5      	str	r5, [r0, #12]
 8021220:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021222:	6819      	ldr	r1, [r3, #0]
 8021224:	b151      	cbz	r1, 802123c <_dtoa_r+0x5c>
 8021226:	685a      	ldr	r2, [r3, #4]
 8021228:	604a      	str	r2, [r1, #4]
 802122a:	2301      	movs	r3, #1
 802122c:	4093      	lsls	r3, r2
 802122e:	608b      	str	r3, [r1, #8]
 8021230:	4620      	mov	r0, r4
 8021232:	f001 f993 	bl	802255c <_Bfree>
 8021236:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021238:	2200      	movs	r2, #0
 802123a:	601a      	str	r2, [r3, #0]
 802123c:	1e3b      	subs	r3, r7, #0
 802123e:	bfb9      	ittee	lt
 8021240:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8021244:	9303      	strlt	r3, [sp, #12]
 8021246:	2300      	movge	r3, #0
 8021248:	f8c8 3000 	strge.w	r3, [r8]
 802124c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8021250:	4ba3      	ldr	r3, [pc, #652]	; (80214e0 <_dtoa_r+0x300>)
 8021252:	bfbc      	itt	lt
 8021254:	2201      	movlt	r2, #1
 8021256:	f8c8 2000 	strlt.w	r2, [r8]
 802125a:	ea33 0309 	bics.w	r3, r3, r9
 802125e:	d11b      	bne.n	8021298 <_dtoa_r+0xb8>
 8021260:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021262:	f242 730f 	movw	r3, #9999	; 0x270f
 8021266:	6013      	str	r3, [r2, #0]
 8021268:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802126c:	4333      	orrs	r3, r6
 802126e:	f000 857a 	beq.w	8021d66 <_dtoa_r+0xb86>
 8021272:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021274:	b963      	cbnz	r3, 8021290 <_dtoa_r+0xb0>
 8021276:	4b9b      	ldr	r3, [pc, #620]	; (80214e4 <_dtoa_r+0x304>)
 8021278:	e024      	b.n	80212c4 <_dtoa_r+0xe4>
 802127a:	4b9b      	ldr	r3, [pc, #620]	; (80214e8 <_dtoa_r+0x308>)
 802127c:	9300      	str	r3, [sp, #0]
 802127e:	3308      	adds	r3, #8
 8021280:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8021282:	6013      	str	r3, [r2, #0]
 8021284:	9800      	ldr	r0, [sp, #0]
 8021286:	b015      	add	sp, #84	; 0x54
 8021288:	ecbd 8b02 	vpop	{d8}
 802128c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021290:	4b94      	ldr	r3, [pc, #592]	; (80214e4 <_dtoa_r+0x304>)
 8021292:	9300      	str	r3, [sp, #0]
 8021294:	3303      	adds	r3, #3
 8021296:	e7f3      	b.n	8021280 <_dtoa_r+0xa0>
 8021298:	ed9d 7b02 	vldr	d7, [sp, #8]
 802129c:	2200      	movs	r2, #0
 802129e:	ec51 0b17 	vmov	r0, r1, d7
 80212a2:	2300      	movs	r3, #0
 80212a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80212a8:	f7f8 fc0e 	bl	8019ac8 <__aeabi_dcmpeq>
 80212ac:	4680      	mov	r8, r0
 80212ae:	b158      	cbz	r0, 80212c8 <_dtoa_r+0xe8>
 80212b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80212b2:	2301      	movs	r3, #1
 80212b4:	6013      	str	r3, [r2, #0]
 80212b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80212b8:	2b00      	cmp	r3, #0
 80212ba:	f000 8551 	beq.w	8021d60 <_dtoa_r+0xb80>
 80212be:	488b      	ldr	r0, [pc, #556]	; (80214ec <_dtoa_r+0x30c>)
 80212c0:	6018      	str	r0, [r3, #0]
 80212c2:	1e43      	subs	r3, r0, #1
 80212c4:	9300      	str	r3, [sp, #0]
 80212c6:	e7dd      	b.n	8021284 <_dtoa_r+0xa4>
 80212c8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80212cc:	aa12      	add	r2, sp, #72	; 0x48
 80212ce:	a913      	add	r1, sp, #76	; 0x4c
 80212d0:	4620      	mov	r0, r4
 80212d2:	f001 fceb 	bl	8022cac <__d2b>
 80212d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80212da:	4683      	mov	fp, r0
 80212dc:	2d00      	cmp	r5, #0
 80212de:	d07c      	beq.n	80213da <_dtoa_r+0x1fa>
 80212e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80212e2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80212e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80212ea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80212ee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80212f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80212f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80212fa:	4b7d      	ldr	r3, [pc, #500]	; (80214f0 <_dtoa_r+0x310>)
 80212fc:	2200      	movs	r2, #0
 80212fe:	4630      	mov	r0, r6
 8021300:	4639      	mov	r1, r7
 8021302:	f7f7 ffc1 	bl	8019288 <__aeabi_dsub>
 8021306:	a36e      	add	r3, pc, #440	; (adr r3, 80214c0 <_dtoa_r+0x2e0>)
 8021308:	e9d3 2300 	ldrd	r2, r3, [r3]
 802130c:	f7f8 f974 	bl	80195f8 <__aeabi_dmul>
 8021310:	a36d      	add	r3, pc, #436	; (adr r3, 80214c8 <_dtoa_r+0x2e8>)
 8021312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021316:	f7f7 ffb9 	bl	801928c <__adddf3>
 802131a:	4606      	mov	r6, r0
 802131c:	4628      	mov	r0, r5
 802131e:	460f      	mov	r7, r1
 8021320:	f7f8 f900 	bl	8019524 <__aeabi_i2d>
 8021324:	a36a      	add	r3, pc, #424	; (adr r3, 80214d0 <_dtoa_r+0x2f0>)
 8021326:	e9d3 2300 	ldrd	r2, r3, [r3]
 802132a:	f7f8 f965 	bl	80195f8 <__aeabi_dmul>
 802132e:	4602      	mov	r2, r0
 8021330:	460b      	mov	r3, r1
 8021332:	4630      	mov	r0, r6
 8021334:	4639      	mov	r1, r7
 8021336:	f7f7 ffa9 	bl	801928c <__adddf3>
 802133a:	4606      	mov	r6, r0
 802133c:	460f      	mov	r7, r1
 802133e:	f7f8 fc0b 	bl	8019b58 <__aeabi_d2iz>
 8021342:	2200      	movs	r2, #0
 8021344:	4682      	mov	sl, r0
 8021346:	2300      	movs	r3, #0
 8021348:	4630      	mov	r0, r6
 802134a:	4639      	mov	r1, r7
 802134c:	f7f8 fbc6 	bl	8019adc <__aeabi_dcmplt>
 8021350:	b148      	cbz	r0, 8021366 <_dtoa_r+0x186>
 8021352:	4650      	mov	r0, sl
 8021354:	f7f8 f8e6 	bl	8019524 <__aeabi_i2d>
 8021358:	4632      	mov	r2, r6
 802135a:	463b      	mov	r3, r7
 802135c:	f7f8 fbb4 	bl	8019ac8 <__aeabi_dcmpeq>
 8021360:	b908      	cbnz	r0, 8021366 <_dtoa_r+0x186>
 8021362:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021366:	f1ba 0f16 	cmp.w	sl, #22
 802136a:	d854      	bhi.n	8021416 <_dtoa_r+0x236>
 802136c:	4b61      	ldr	r3, [pc, #388]	; (80214f4 <_dtoa_r+0x314>)
 802136e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8021372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021376:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 802137a:	f7f8 fbaf 	bl	8019adc <__aeabi_dcmplt>
 802137e:	2800      	cmp	r0, #0
 8021380:	d04b      	beq.n	802141a <_dtoa_r+0x23a>
 8021382:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021386:	2300      	movs	r3, #0
 8021388:	930e      	str	r3, [sp, #56]	; 0x38
 802138a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802138c:	1b5d      	subs	r5, r3, r5
 802138e:	1e6b      	subs	r3, r5, #1
 8021390:	9304      	str	r3, [sp, #16]
 8021392:	bf43      	ittte	mi
 8021394:	2300      	movmi	r3, #0
 8021396:	f1c5 0801 	rsbmi	r8, r5, #1
 802139a:	9304      	strmi	r3, [sp, #16]
 802139c:	f04f 0800 	movpl.w	r8, #0
 80213a0:	f1ba 0f00 	cmp.w	sl, #0
 80213a4:	db3b      	blt.n	802141e <_dtoa_r+0x23e>
 80213a6:	9b04      	ldr	r3, [sp, #16]
 80213a8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80213ac:	4453      	add	r3, sl
 80213ae:	9304      	str	r3, [sp, #16]
 80213b0:	2300      	movs	r3, #0
 80213b2:	9306      	str	r3, [sp, #24]
 80213b4:	9b05      	ldr	r3, [sp, #20]
 80213b6:	2b09      	cmp	r3, #9
 80213b8:	d869      	bhi.n	802148e <_dtoa_r+0x2ae>
 80213ba:	2b05      	cmp	r3, #5
 80213bc:	bfc4      	itt	gt
 80213be:	3b04      	subgt	r3, #4
 80213c0:	9305      	strgt	r3, [sp, #20]
 80213c2:	9b05      	ldr	r3, [sp, #20]
 80213c4:	f1a3 0302 	sub.w	r3, r3, #2
 80213c8:	bfcc      	ite	gt
 80213ca:	2500      	movgt	r5, #0
 80213cc:	2501      	movle	r5, #1
 80213ce:	2b03      	cmp	r3, #3
 80213d0:	d869      	bhi.n	80214a6 <_dtoa_r+0x2c6>
 80213d2:	e8df f003 	tbb	[pc, r3]
 80213d6:	4e2c      	.short	0x4e2c
 80213d8:	5a4c      	.short	0x5a4c
 80213da:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80213de:	441d      	add	r5, r3
 80213e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80213e4:	2b20      	cmp	r3, #32
 80213e6:	bfc1      	itttt	gt
 80213e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80213ec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80213f0:	fa09 f303 	lslgt.w	r3, r9, r3
 80213f4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80213f8:	bfda      	itte	le
 80213fa:	f1c3 0320 	rsble	r3, r3, #32
 80213fe:	fa06 f003 	lslle.w	r0, r6, r3
 8021402:	4318      	orrgt	r0, r3
 8021404:	f7f8 f87e 	bl	8019504 <__aeabi_ui2d>
 8021408:	2301      	movs	r3, #1
 802140a:	4606      	mov	r6, r0
 802140c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8021410:	3d01      	subs	r5, #1
 8021412:	9310      	str	r3, [sp, #64]	; 0x40
 8021414:	e771      	b.n	80212fa <_dtoa_r+0x11a>
 8021416:	2301      	movs	r3, #1
 8021418:	e7b6      	b.n	8021388 <_dtoa_r+0x1a8>
 802141a:	900e      	str	r0, [sp, #56]	; 0x38
 802141c:	e7b5      	b.n	802138a <_dtoa_r+0x1aa>
 802141e:	f1ca 0300 	rsb	r3, sl, #0
 8021422:	9306      	str	r3, [sp, #24]
 8021424:	2300      	movs	r3, #0
 8021426:	eba8 080a 	sub.w	r8, r8, sl
 802142a:	930d      	str	r3, [sp, #52]	; 0x34
 802142c:	e7c2      	b.n	80213b4 <_dtoa_r+0x1d4>
 802142e:	2300      	movs	r3, #0
 8021430:	9308      	str	r3, [sp, #32]
 8021432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021434:	2b00      	cmp	r3, #0
 8021436:	dc39      	bgt.n	80214ac <_dtoa_r+0x2cc>
 8021438:	f04f 0901 	mov.w	r9, #1
 802143c:	f8cd 9004 	str.w	r9, [sp, #4]
 8021440:	464b      	mov	r3, r9
 8021442:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8021446:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8021448:	2200      	movs	r2, #0
 802144a:	6042      	str	r2, [r0, #4]
 802144c:	2204      	movs	r2, #4
 802144e:	f102 0614 	add.w	r6, r2, #20
 8021452:	429e      	cmp	r6, r3
 8021454:	6841      	ldr	r1, [r0, #4]
 8021456:	d92f      	bls.n	80214b8 <_dtoa_r+0x2d8>
 8021458:	4620      	mov	r0, r4
 802145a:	f001 f83f 	bl	80224dc <_Balloc>
 802145e:	9000      	str	r0, [sp, #0]
 8021460:	2800      	cmp	r0, #0
 8021462:	d14b      	bne.n	80214fc <_dtoa_r+0x31c>
 8021464:	4b24      	ldr	r3, [pc, #144]	; (80214f8 <_dtoa_r+0x318>)
 8021466:	4602      	mov	r2, r0
 8021468:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 802146c:	e6d1      	b.n	8021212 <_dtoa_r+0x32>
 802146e:	2301      	movs	r3, #1
 8021470:	e7de      	b.n	8021430 <_dtoa_r+0x250>
 8021472:	2300      	movs	r3, #0
 8021474:	9308      	str	r3, [sp, #32]
 8021476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021478:	eb0a 0903 	add.w	r9, sl, r3
 802147c:	f109 0301 	add.w	r3, r9, #1
 8021480:	2b01      	cmp	r3, #1
 8021482:	9301      	str	r3, [sp, #4]
 8021484:	bfb8      	it	lt
 8021486:	2301      	movlt	r3, #1
 8021488:	e7dd      	b.n	8021446 <_dtoa_r+0x266>
 802148a:	2301      	movs	r3, #1
 802148c:	e7f2      	b.n	8021474 <_dtoa_r+0x294>
 802148e:	2501      	movs	r5, #1
 8021490:	2300      	movs	r3, #0
 8021492:	9305      	str	r3, [sp, #20]
 8021494:	9508      	str	r5, [sp, #32]
 8021496:	f04f 39ff 	mov.w	r9, #4294967295
 802149a:	2200      	movs	r2, #0
 802149c:	f8cd 9004 	str.w	r9, [sp, #4]
 80214a0:	2312      	movs	r3, #18
 80214a2:	9209      	str	r2, [sp, #36]	; 0x24
 80214a4:	e7cf      	b.n	8021446 <_dtoa_r+0x266>
 80214a6:	2301      	movs	r3, #1
 80214a8:	9308      	str	r3, [sp, #32]
 80214aa:	e7f4      	b.n	8021496 <_dtoa_r+0x2b6>
 80214ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80214b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80214b4:	464b      	mov	r3, r9
 80214b6:	e7c6      	b.n	8021446 <_dtoa_r+0x266>
 80214b8:	3101      	adds	r1, #1
 80214ba:	6041      	str	r1, [r0, #4]
 80214bc:	0052      	lsls	r2, r2, #1
 80214be:	e7c6      	b.n	802144e <_dtoa_r+0x26e>
 80214c0:	636f4361 	.word	0x636f4361
 80214c4:	3fd287a7 	.word	0x3fd287a7
 80214c8:	8b60c8b3 	.word	0x8b60c8b3
 80214cc:	3fc68a28 	.word	0x3fc68a28
 80214d0:	509f79fb 	.word	0x509f79fb
 80214d4:	3fd34413 	.word	0x3fd34413
 80214d8:	0802410e 	.word	0x0802410e
 80214dc:	08024125 	.word	0x08024125
 80214e0:	7ff00000 	.word	0x7ff00000
 80214e4:	0802410a 	.word	0x0802410a
 80214e8:	08024101 	.word	0x08024101
 80214ec:	08023f81 	.word	0x08023f81
 80214f0:	3ff80000 	.word	0x3ff80000
 80214f4:	080242a0 	.word	0x080242a0
 80214f8:	08024184 	.word	0x08024184
 80214fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80214fe:	9a00      	ldr	r2, [sp, #0]
 8021500:	601a      	str	r2, [r3, #0]
 8021502:	9b01      	ldr	r3, [sp, #4]
 8021504:	2b0e      	cmp	r3, #14
 8021506:	f200 80ad 	bhi.w	8021664 <_dtoa_r+0x484>
 802150a:	2d00      	cmp	r5, #0
 802150c:	f000 80aa 	beq.w	8021664 <_dtoa_r+0x484>
 8021510:	f1ba 0f00 	cmp.w	sl, #0
 8021514:	dd36      	ble.n	8021584 <_dtoa_r+0x3a4>
 8021516:	4ac3      	ldr	r2, [pc, #780]	; (8021824 <_dtoa_r+0x644>)
 8021518:	f00a 030f 	and.w	r3, sl, #15
 802151c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8021520:	ed93 7b00 	vldr	d7, [r3]
 8021524:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8021528:	ea4f 172a 	mov.w	r7, sl, asr #4
 802152c:	eeb0 8a47 	vmov.f32	s16, s14
 8021530:	eef0 8a67 	vmov.f32	s17, s15
 8021534:	d016      	beq.n	8021564 <_dtoa_r+0x384>
 8021536:	4bbc      	ldr	r3, [pc, #752]	; (8021828 <_dtoa_r+0x648>)
 8021538:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 802153c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8021540:	f7f8 f984 	bl	801984c <__aeabi_ddiv>
 8021544:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021548:	f007 070f 	and.w	r7, r7, #15
 802154c:	2503      	movs	r5, #3
 802154e:	4eb6      	ldr	r6, [pc, #728]	; (8021828 <_dtoa_r+0x648>)
 8021550:	b957      	cbnz	r7, 8021568 <_dtoa_r+0x388>
 8021552:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8021556:	ec53 2b18 	vmov	r2, r3, d8
 802155a:	f7f8 f977 	bl	801984c <__aeabi_ddiv>
 802155e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021562:	e029      	b.n	80215b8 <_dtoa_r+0x3d8>
 8021564:	2502      	movs	r5, #2
 8021566:	e7f2      	b.n	802154e <_dtoa_r+0x36e>
 8021568:	07f9      	lsls	r1, r7, #31
 802156a:	d508      	bpl.n	802157e <_dtoa_r+0x39e>
 802156c:	ec51 0b18 	vmov	r0, r1, d8
 8021570:	e9d6 2300 	ldrd	r2, r3, [r6]
 8021574:	f7f8 f840 	bl	80195f8 <__aeabi_dmul>
 8021578:	ec41 0b18 	vmov	d8, r0, r1
 802157c:	3501      	adds	r5, #1
 802157e:	107f      	asrs	r7, r7, #1
 8021580:	3608      	adds	r6, #8
 8021582:	e7e5      	b.n	8021550 <_dtoa_r+0x370>
 8021584:	f000 80a6 	beq.w	80216d4 <_dtoa_r+0x4f4>
 8021588:	f1ca 0600 	rsb	r6, sl, #0
 802158c:	4ba5      	ldr	r3, [pc, #660]	; (8021824 <_dtoa_r+0x644>)
 802158e:	4fa6      	ldr	r7, [pc, #664]	; (8021828 <_dtoa_r+0x648>)
 8021590:	f006 020f 	and.w	r2, r6, #15
 8021594:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8021598:	e9d3 2300 	ldrd	r2, r3, [r3]
 802159c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80215a0:	f7f8 f82a 	bl	80195f8 <__aeabi_dmul>
 80215a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80215a8:	1136      	asrs	r6, r6, #4
 80215aa:	2300      	movs	r3, #0
 80215ac:	2502      	movs	r5, #2
 80215ae:	2e00      	cmp	r6, #0
 80215b0:	f040 8085 	bne.w	80216be <_dtoa_r+0x4de>
 80215b4:	2b00      	cmp	r3, #0
 80215b6:	d1d2      	bne.n	802155e <_dtoa_r+0x37e>
 80215b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80215ba:	2b00      	cmp	r3, #0
 80215bc:	f000 808c 	beq.w	80216d8 <_dtoa_r+0x4f8>
 80215c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80215c4:	4b99      	ldr	r3, [pc, #612]	; (802182c <_dtoa_r+0x64c>)
 80215c6:	2200      	movs	r2, #0
 80215c8:	4630      	mov	r0, r6
 80215ca:	4639      	mov	r1, r7
 80215cc:	f7f8 fa86 	bl	8019adc <__aeabi_dcmplt>
 80215d0:	2800      	cmp	r0, #0
 80215d2:	f000 8081 	beq.w	80216d8 <_dtoa_r+0x4f8>
 80215d6:	9b01      	ldr	r3, [sp, #4]
 80215d8:	2b00      	cmp	r3, #0
 80215da:	d07d      	beq.n	80216d8 <_dtoa_r+0x4f8>
 80215dc:	f1b9 0f00 	cmp.w	r9, #0
 80215e0:	dd3c      	ble.n	802165c <_dtoa_r+0x47c>
 80215e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80215e6:	9307      	str	r3, [sp, #28]
 80215e8:	2200      	movs	r2, #0
 80215ea:	4b91      	ldr	r3, [pc, #580]	; (8021830 <_dtoa_r+0x650>)
 80215ec:	4630      	mov	r0, r6
 80215ee:	4639      	mov	r1, r7
 80215f0:	f7f8 f802 	bl	80195f8 <__aeabi_dmul>
 80215f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80215f8:	3501      	adds	r5, #1
 80215fa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80215fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8021602:	4628      	mov	r0, r5
 8021604:	f7f7 ff8e 	bl	8019524 <__aeabi_i2d>
 8021608:	4632      	mov	r2, r6
 802160a:	463b      	mov	r3, r7
 802160c:	f7f7 fff4 	bl	80195f8 <__aeabi_dmul>
 8021610:	4b88      	ldr	r3, [pc, #544]	; (8021834 <_dtoa_r+0x654>)
 8021612:	2200      	movs	r2, #0
 8021614:	f7f7 fe3a 	bl	801928c <__adddf3>
 8021618:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 802161c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021620:	9303      	str	r3, [sp, #12]
 8021622:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021624:	2b00      	cmp	r3, #0
 8021626:	d15c      	bne.n	80216e2 <_dtoa_r+0x502>
 8021628:	4b83      	ldr	r3, [pc, #524]	; (8021838 <_dtoa_r+0x658>)
 802162a:	2200      	movs	r2, #0
 802162c:	4630      	mov	r0, r6
 802162e:	4639      	mov	r1, r7
 8021630:	f7f7 fe2a 	bl	8019288 <__aeabi_dsub>
 8021634:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8021638:	4606      	mov	r6, r0
 802163a:	460f      	mov	r7, r1
 802163c:	f7f8 fa6c 	bl	8019b18 <__aeabi_dcmpgt>
 8021640:	2800      	cmp	r0, #0
 8021642:	f040 8296 	bne.w	8021b72 <_dtoa_r+0x992>
 8021646:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 802164a:	4630      	mov	r0, r6
 802164c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8021650:	4639      	mov	r1, r7
 8021652:	f7f8 fa43 	bl	8019adc <__aeabi_dcmplt>
 8021656:	2800      	cmp	r0, #0
 8021658:	f040 8288 	bne.w	8021b6c <_dtoa_r+0x98c>
 802165c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8021660:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8021664:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021666:	2b00      	cmp	r3, #0
 8021668:	f2c0 8158 	blt.w	802191c <_dtoa_r+0x73c>
 802166c:	f1ba 0f0e 	cmp.w	sl, #14
 8021670:	f300 8154 	bgt.w	802191c <_dtoa_r+0x73c>
 8021674:	4b6b      	ldr	r3, [pc, #428]	; (8021824 <_dtoa_r+0x644>)
 8021676:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 802167a:	e9d3 8900 	ldrd	r8, r9, [r3]
 802167e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021680:	2b00      	cmp	r3, #0
 8021682:	f280 80e3 	bge.w	802184c <_dtoa_r+0x66c>
 8021686:	9b01      	ldr	r3, [sp, #4]
 8021688:	2b00      	cmp	r3, #0
 802168a:	f300 80df 	bgt.w	802184c <_dtoa_r+0x66c>
 802168e:	f040 826d 	bne.w	8021b6c <_dtoa_r+0x98c>
 8021692:	4b69      	ldr	r3, [pc, #420]	; (8021838 <_dtoa_r+0x658>)
 8021694:	2200      	movs	r2, #0
 8021696:	4640      	mov	r0, r8
 8021698:	4649      	mov	r1, r9
 802169a:	f7f7 ffad 	bl	80195f8 <__aeabi_dmul>
 802169e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80216a2:	f7f8 fa2f 	bl	8019b04 <__aeabi_dcmpge>
 80216a6:	9e01      	ldr	r6, [sp, #4]
 80216a8:	4637      	mov	r7, r6
 80216aa:	2800      	cmp	r0, #0
 80216ac:	f040 8243 	bne.w	8021b36 <_dtoa_r+0x956>
 80216b0:	9d00      	ldr	r5, [sp, #0]
 80216b2:	2331      	movs	r3, #49	; 0x31
 80216b4:	f805 3b01 	strb.w	r3, [r5], #1
 80216b8:	f10a 0a01 	add.w	sl, sl, #1
 80216bc:	e23f      	b.n	8021b3e <_dtoa_r+0x95e>
 80216be:	07f2      	lsls	r2, r6, #31
 80216c0:	d505      	bpl.n	80216ce <_dtoa_r+0x4ee>
 80216c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80216c6:	f7f7 ff97 	bl	80195f8 <__aeabi_dmul>
 80216ca:	3501      	adds	r5, #1
 80216cc:	2301      	movs	r3, #1
 80216ce:	1076      	asrs	r6, r6, #1
 80216d0:	3708      	adds	r7, #8
 80216d2:	e76c      	b.n	80215ae <_dtoa_r+0x3ce>
 80216d4:	2502      	movs	r5, #2
 80216d6:	e76f      	b.n	80215b8 <_dtoa_r+0x3d8>
 80216d8:	9b01      	ldr	r3, [sp, #4]
 80216da:	f8cd a01c 	str.w	sl, [sp, #28]
 80216de:	930c      	str	r3, [sp, #48]	; 0x30
 80216e0:	e78d      	b.n	80215fe <_dtoa_r+0x41e>
 80216e2:	9900      	ldr	r1, [sp, #0]
 80216e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80216e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80216e8:	4b4e      	ldr	r3, [pc, #312]	; (8021824 <_dtoa_r+0x644>)
 80216ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80216ee:	4401      	add	r1, r0
 80216f0:	9102      	str	r1, [sp, #8]
 80216f2:	9908      	ldr	r1, [sp, #32]
 80216f4:	eeb0 8a47 	vmov.f32	s16, s14
 80216f8:	eef0 8a67 	vmov.f32	s17, s15
 80216fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8021700:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8021704:	2900      	cmp	r1, #0
 8021706:	d045      	beq.n	8021794 <_dtoa_r+0x5b4>
 8021708:	494c      	ldr	r1, [pc, #304]	; (802183c <_dtoa_r+0x65c>)
 802170a:	2000      	movs	r0, #0
 802170c:	f7f8 f89e 	bl	801984c <__aeabi_ddiv>
 8021710:	ec53 2b18 	vmov	r2, r3, d8
 8021714:	f7f7 fdb8 	bl	8019288 <__aeabi_dsub>
 8021718:	9d00      	ldr	r5, [sp, #0]
 802171a:	ec41 0b18 	vmov	d8, r0, r1
 802171e:	4639      	mov	r1, r7
 8021720:	4630      	mov	r0, r6
 8021722:	f7f8 fa19 	bl	8019b58 <__aeabi_d2iz>
 8021726:	900c      	str	r0, [sp, #48]	; 0x30
 8021728:	f7f7 fefc 	bl	8019524 <__aeabi_i2d>
 802172c:	4602      	mov	r2, r0
 802172e:	460b      	mov	r3, r1
 8021730:	4630      	mov	r0, r6
 8021732:	4639      	mov	r1, r7
 8021734:	f7f7 fda8 	bl	8019288 <__aeabi_dsub>
 8021738:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802173a:	3330      	adds	r3, #48	; 0x30
 802173c:	f805 3b01 	strb.w	r3, [r5], #1
 8021740:	ec53 2b18 	vmov	r2, r3, d8
 8021744:	4606      	mov	r6, r0
 8021746:	460f      	mov	r7, r1
 8021748:	f7f8 f9c8 	bl	8019adc <__aeabi_dcmplt>
 802174c:	2800      	cmp	r0, #0
 802174e:	d165      	bne.n	802181c <_dtoa_r+0x63c>
 8021750:	4632      	mov	r2, r6
 8021752:	463b      	mov	r3, r7
 8021754:	4935      	ldr	r1, [pc, #212]	; (802182c <_dtoa_r+0x64c>)
 8021756:	2000      	movs	r0, #0
 8021758:	f7f7 fd96 	bl	8019288 <__aeabi_dsub>
 802175c:	ec53 2b18 	vmov	r2, r3, d8
 8021760:	f7f8 f9bc 	bl	8019adc <__aeabi_dcmplt>
 8021764:	2800      	cmp	r0, #0
 8021766:	f040 80b9 	bne.w	80218dc <_dtoa_r+0x6fc>
 802176a:	9b02      	ldr	r3, [sp, #8]
 802176c:	429d      	cmp	r5, r3
 802176e:	f43f af75 	beq.w	802165c <_dtoa_r+0x47c>
 8021772:	4b2f      	ldr	r3, [pc, #188]	; (8021830 <_dtoa_r+0x650>)
 8021774:	ec51 0b18 	vmov	r0, r1, d8
 8021778:	2200      	movs	r2, #0
 802177a:	f7f7 ff3d 	bl	80195f8 <__aeabi_dmul>
 802177e:	4b2c      	ldr	r3, [pc, #176]	; (8021830 <_dtoa_r+0x650>)
 8021780:	ec41 0b18 	vmov	d8, r0, r1
 8021784:	2200      	movs	r2, #0
 8021786:	4630      	mov	r0, r6
 8021788:	4639      	mov	r1, r7
 802178a:	f7f7 ff35 	bl	80195f8 <__aeabi_dmul>
 802178e:	4606      	mov	r6, r0
 8021790:	460f      	mov	r7, r1
 8021792:	e7c4      	b.n	802171e <_dtoa_r+0x53e>
 8021794:	ec51 0b17 	vmov	r0, r1, d7
 8021798:	f7f7 ff2e 	bl	80195f8 <__aeabi_dmul>
 802179c:	9b02      	ldr	r3, [sp, #8]
 802179e:	9d00      	ldr	r5, [sp, #0]
 80217a0:	930c      	str	r3, [sp, #48]	; 0x30
 80217a2:	ec41 0b18 	vmov	d8, r0, r1
 80217a6:	4639      	mov	r1, r7
 80217a8:	4630      	mov	r0, r6
 80217aa:	f7f8 f9d5 	bl	8019b58 <__aeabi_d2iz>
 80217ae:	9011      	str	r0, [sp, #68]	; 0x44
 80217b0:	f7f7 feb8 	bl	8019524 <__aeabi_i2d>
 80217b4:	4602      	mov	r2, r0
 80217b6:	460b      	mov	r3, r1
 80217b8:	4630      	mov	r0, r6
 80217ba:	4639      	mov	r1, r7
 80217bc:	f7f7 fd64 	bl	8019288 <__aeabi_dsub>
 80217c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80217c2:	3330      	adds	r3, #48	; 0x30
 80217c4:	f805 3b01 	strb.w	r3, [r5], #1
 80217c8:	9b02      	ldr	r3, [sp, #8]
 80217ca:	429d      	cmp	r5, r3
 80217cc:	4606      	mov	r6, r0
 80217ce:	460f      	mov	r7, r1
 80217d0:	f04f 0200 	mov.w	r2, #0
 80217d4:	d134      	bne.n	8021840 <_dtoa_r+0x660>
 80217d6:	4b19      	ldr	r3, [pc, #100]	; (802183c <_dtoa_r+0x65c>)
 80217d8:	ec51 0b18 	vmov	r0, r1, d8
 80217dc:	f7f7 fd56 	bl	801928c <__adddf3>
 80217e0:	4602      	mov	r2, r0
 80217e2:	460b      	mov	r3, r1
 80217e4:	4630      	mov	r0, r6
 80217e6:	4639      	mov	r1, r7
 80217e8:	f7f8 f996 	bl	8019b18 <__aeabi_dcmpgt>
 80217ec:	2800      	cmp	r0, #0
 80217ee:	d175      	bne.n	80218dc <_dtoa_r+0x6fc>
 80217f0:	ec53 2b18 	vmov	r2, r3, d8
 80217f4:	4911      	ldr	r1, [pc, #68]	; (802183c <_dtoa_r+0x65c>)
 80217f6:	2000      	movs	r0, #0
 80217f8:	f7f7 fd46 	bl	8019288 <__aeabi_dsub>
 80217fc:	4602      	mov	r2, r0
 80217fe:	460b      	mov	r3, r1
 8021800:	4630      	mov	r0, r6
 8021802:	4639      	mov	r1, r7
 8021804:	f7f8 f96a 	bl	8019adc <__aeabi_dcmplt>
 8021808:	2800      	cmp	r0, #0
 802180a:	f43f af27 	beq.w	802165c <_dtoa_r+0x47c>
 802180e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021810:	1e6b      	subs	r3, r5, #1
 8021812:	930c      	str	r3, [sp, #48]	; 0x30
 8021814:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8021818:	2b30      	cmp	r3, #48	; 0x30
 802181a:	d0f8      	beq.n	802180e <_dtoa_r+0x62e>
 802181c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8021820:	e04a      	b.n	80218b8 <_dtoa_r+0x6d8>
 8021822:	bf00      	nop
 8021824:	080242a0 	.word	0x080242a0
 8021828:	08024278 	.word	0x08024278
 802182c:	3ff00000 	.word	0x3ff00000
 8021830:	40240000 	.word	0x40240000
 8021834:	401c0000 	.word	0x401c0000
 8021838:	40140000 	.word	0x40140000
 802183c:	3fe00000 	.word	0x3fe00000
 8021840:	4baf      	ldr	r3, [pc, #700]	; (8021b00 <_dtoa_r+0x920>)
 8021842:	f7f7 fed9 	bl	80195f8 <__aeabi_dmul>
 8021846:	4606      	mov	r6, r0
 8021848:	460f      	mov	r7, r1
 802184a:	e7ac      	b.n	80217a6 <_dtoa_r+0x5c6>
 802184c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8021850:	9d00      	ldr	r5, [sp, #0]
 8021852:	4642      	mov	r2, r8
 8021854:	464b      	mov	r3, r9
 8021856:	4630      	mov	r0, r6
 8021858:	4639      	mov	r1, r7
 802185a:	f7f7 fff7 	bl	801984c <__aeabi_ddiv>
 802185e:	f7f8 f97b 	bl	8019b58 <__aeabi_d2iz>
 8021862:	9002      	str	r0, [sp, #8]
 8021864:	f7f7 fe5e 	bl	8019524 <__aeabi_i2d>
 8021868:	4642      	mov	r2, r8
 802186a:	464b      	mov	r3, r9
 802186c:	f7f7 fec4 	bl	80195f8 <__aeabi_dmul>
 8021870:	4602      	mov	r2, r0
 8021872:	460b      	mov	r3, r1
 8021874:	4630      	mov	r0, r6
 8021876:	4639      	mov	r1, r7
 8021878:	f7f7 fd06 	bl	8019288 <__aeabi_dsub>
 802187c:	9e02      	ldr	r6, [sp, #8]
 802187e:	9f01      	ldr	r7, [sp, #4]
 8021880:	3630      	adds	r6, #48	; 0x30
 8021882:	f805 6b01 	strb.w	r6, [r5], #1
 8021886:	9e00      	ldr	r6, [sp, #0]
 8021888:	1bae      	subs	r6, r5, r6
 802188a:	42b7      	cmp	r7, r6
 802188c:	4602      	mov	r2, r0
 802188e:	460b      	mov	r3, r1
 8021890:	d137      	bne.n	8021902 <_dtoa_r+0x722>
 8021892:	f7f7 fcfb 	bl	801928c <__adddf3>
 8021896:	4642      	mov	r2, r8
 8021898:	464b      	mov	r3, r9
 802189a:	4606      	mov	r6, r0
 802189c:	460f      	mov	r7, r1
 802189e:	f7f8 f93b 	bl	8019b18 <__aeabi_dcmpgt>
 80218a2:	b9c8      	cbnz	r0, 80218d8 <_dtoa_r+0x6f8>
 80218a4:	4642      	mov	r2, r8
 80218a6:	464b      	mov	r3, r9
 80218a8:	4630      	mov	r0, r6
 80218aa:	4639      	mov	r1, r7
 80218ac:	f7f8 f90c 	bl	8019ac8 <__aeabi_dcmpeq>
 80218b0:	b110      	cbz	r0, 80218b8 <_dtoa_r+0x6d8>
 80218b2:	9b02      	ldr	r3, [sp, #8]
 80218b4:	07d9      	lsls	r1, r3, #31
 80218b6:	d40f      	bmi.n	80218d8 <_dtoa_r+0x6f8>
 80218b8:	4620      	mov	r0, r4
 80218ba:	4659      	mov	r1, fp
 80218bc:	f000 fe4e 	bl	802255c <_Bfree>
 80218c0:	2300      	movs	r3, #0
 80218c2:	702b      	strb	r3, [r5, #0]
 80218c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80218c6:	f10a 0001 	add.w	r0, sl, #1
 80218ca:	6018      	str	r0, [r3, #0]
 80218cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80218ce:	2b00      	cmp	r3, #0
 80218d0:	f43f acd8 	beq.w	8021284 <_dtoa_r+0xa4>
 80218d4:	601d      	str	r5, [r3, #0]
 80218d6:	e4d5      	b.n	8021284 <_dtoa_r+0xa4>
 80218d8:	f8cd a01c 	str.w	sl, [sp, #28]
 80218dc:	462b      	mov	r3, r5
 80218de:	461d      	mov	r5, r3
 80218e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80218e4:	2a39      	cmp	r2, #57	; 0x39
 80218e6:	d108      	bne.n	80218fa <_dtoa_r+0x71a>
 80218e8:	9a00      	ldr	r2, [sp, #0]
 80218ea:	429a      	cmp	r2, r3
 80218ec:	d1f7      	bne.n	80218de <_dtoa_r+0x6fe>
 80218ee:	9a07      	ldr	r2, [sp, #28]
 80218f0:	9900      	ldr	r1, [sp, #0]
 80218f2:	3201      	adds	r2, #1
 80218f4:	9207      	str	r2, [sp, #28]
 80218f6:	2230      	movs	r2, #48	; 0x30
 80218f8:	700a      	strb	r2, [r1, #0]
 80218fa:	781a      	ldrb	r2, [r3, #0]
 80218fc:	3201      	adds	r2, #1
 80218fe:	701a      	strb	r2, [r3, #0]
 8021900:	e78c      	b.n	802181c <_dtoa_r+0x63c>
 8021902:	4b7f      	ldr	r3, [pc, #508]	; (8021b00 <_dtoa_r+0x920>)
 8021904:	2200      	movs	r2, #0
 8021906:	f7f7 fe77 	bl	80195f8 <__aeabi_dmul>
 802190a:	2200      	movs	r2, #0
 802190c:	2300      	movs	r3, #0
 802190e:	4606      	mov	r6, r0
 8021910:	460f      	mov	r7, r1
 8021912:	f7f8 f8d9 	bl	8019ac8 <__aeabi_dcmpeq>
 8021916:	2800      	cmp	r0, #0
 8021918:	d09b      	beq.n	8021852 <_dtoa_r+0x672>
 802191a:	e7cd      	b.n	80218b8 <_dtoa_r+0x6d8>
 802191c:	9a08      	ldr	r2, [sp, #32]
 802191e:	2a00      	cmp	r2, #0
 8021920:	f000 80c4 	beq.w	8021aac <_dtoa_r+0x8cc>
 8021924:	9a05      	ldr	r2, [sp, #20]
 8021926:	2a01      	cmp	r2, #1
 8021928:	f300 80a8 	bgt.w	8021a7c <_dtoa_r+0x89c>
 802192c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802192e:	2a00      	cmp	r2, #0
 8021930:	f000 80a0 	beq.w	8021a74 <_dtoa_r+0x894>
 8021934:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8021938:	9e06      	ldr	r6, [sp, #24]
 802193a:	4645      	mov	r5, r8
 802193c:	9a04      	ldr	r2, [sp, #16]
 802193e:	2101      	movs	r1, #1
 8021940:	441a      	add	r2, r3
 8021942:	4620      	mov	r0, r4
 8021944:	4498      	add	r8, r3
 8021946:	9204      	str	r2, [sp, #16]
 8021948:	f000 ff0e 	bl	8022768 <__i2b>
 802194c:	4607      	mov	r7, r0
 802194e:	2d00      	cmp	r5, #0
 8021950:	dd0b      	ble.n	802196a <_dtoa_r+0x78a>
 8021952:	9b04      	ldr	r3, [sp, #16]
 8021954:	2b00      	cmp	r3, #0
 8021956:	dd08      	ble.n	802196a <_dtoa_r+0x78a>
 8021958:	42ab      	cmp	r3, r5
 802195a:	9a04      	ldr	r2, [sp, #16]
 802195c:	bfa8      	it	ge
 802195e:	462b      	movge	r3, r5
 8021960:	eba8 0803 	sub.w	r8, r8, r3
 8021964:	1aed      	subs	r5, r5, r3
 8021966:	1ad3      	subs	r3, r2, r3
 8021968:	9304      	str	r3, [sp, #16]
 802196a:	9b06      	ldr	r3, [sp, #24]
 802196c:	b1fb      	cbz	r3, 80219ae <_dtoa_r+0x7ce>
 802196e:	9b08      	ldr	r3, [sp, #32]
 8021970:	2b00      	cmp	r3, #0
 8021972:	f000 809f 	beq.w	8021ab4 <_dtoa_r+0x8d4>
 8021976:	2e00      	cmp	r6, #0
 8021978:	dd11      	ble.n	802199e <_dtoa_r+0x7be>
 802197a:	4639      	mov	r1, r7
 802197c:	4632      	mov	r2, r6
 802197e:	4620      	mov	r0, r4
 8021980:	f000 ffae 	bl	80228e0 <__pow5mult>
 8021984:	465a      	mov	r2, fp
 8021986:	4601      	mov	r1, r0
 8021988:	4607      	mov	r7, r0
 802198a:	4620      	mov	r0, r4
 802198c:	f000 ff02 	bl	8022794 <__multiply>
 8021990:	4659      	mov	r1, fp
 8021992:	9007      	str	r0, [sp, #28]
 8021994:	4620      	mov	r0, r4
 8021996:	f000 fde1 	bl	802255c <_Bfree>
 802199a:	9b07      	ldr	r3, [sp, #28]
 802199c:	469b      	mov	fp, r3
 802199e:	9b06      	ldr	r3, [sp, #24]
 80219a0:	1b9a      	subs	r2, r3, r6
 80219a2:	d004      	beq.n	80219ae <_dtoa_r+0x7ce>
 80219a4:	4659      	mov	r1, fp
 80219a6:	4620      	mov	r0, r4
 80219a8:	f000 ff9a 	bl	80228e0 <__pow5mult>
 80219ac:	4683      	mov	fp, r0
 80219ae:	2101      	movs	r1, #1
 80219b0:	4620      	mov	r0, r4
 80219b2:	f000 fed9 	bl	8022768 <__i2b>
 80219b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80219b8:	2b00      	cmp	r3, #0
 80219ba:	4606      	mov	r6, r0
 80219bc:	dd7c      	ble.n	8021ab8 <_dtoa_r+0x8d8>
 80219be:	461a      	mov	r2, r3
 80219c0:	4601      	mov	r1, r0
 80219c2:	4620      	mov	r0, r4
 80219c4:	f000 ff8c 	bl	80228e0 <__pow5mult>
 80219c8:	9b05      	ldr	r3, [sp, #20]
 80219ca:	2b01      	cmp	r3, #1
 80219cc:	4606      	mov	r6, r0
 80219ce:	dd76      	ble.n	8021abe <_dtoa_r+0x8de>
 80219d0:	2300      	movs	r3, #0
 80219d2:	9306      	str	r3, [sp, #24]
 80219d4:	6933      	ldr	r3, [r6, #16]
 80219d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80219da:	6918      	ldr	r0, [r3, #16]
 80219dc:	f000 fe74 	bl	80226c8 <__hi0bits>
 80219e0:	f1c0 0020 	rsb	r0, r0, #32
 80219e4:	9b04      	ldr	r3, [sp, #16]
 80219e6:	4418      	add	r0, r3
 80219e8:	f010 001f 	ands.w	r0, r0, #31
 80219ec:	f000 8086 	beq.w	8021afc <_dtoa_r+0x91c>
 80219f0:	f1c0 0320 	rsb	r3, r0, #32
 80219f4:	2b04      	cmp	r3, #4
 80219f6:	dd7f      	ble.n	8021af8 <_dtoa_r+0x918>
 80219f8:	f1c0 001c 	rsb	r0, r0, #28
 80219fc:	9b04      	ldr	r3, [sp, #16]
 80219fe:	4403      	add	r3, r0
 8021a00:	4480      	add	r8, r0
 8021a02:	4405      	add	r5, r0
 8021a04:	9304      	str	r3, [sp, #16]
 8021a06:	f1b8 0f00 	cmp.w	r8, #0
 8021a0a:	dd05      	ble.n	8021a18 <_dtoa_r+0x838>
 8021a0c:	4659      	mov	r1, fp
 8021a0e:	4642      	mov	r2, r8
 8021a10:	4620      	mov	r0, r4
 8021a12:	f000 ffbf 	bl	8022994 <__lshift>
 8021a16:	4683      	mov	fp, r0
 8021a18:	9b04      	ldr	r3, [sp, #16]
 8021a1a:	2b00      	cmp	r3, #0
 8021a1c:	dd05      	ble.n	8021a2a <_dtoa_r+0x84a>
 8021a1e:	4631      	mov	r1, r6
 8021a20:	461a      	mov	r2, r3
 8021a22:	4620      	mov	r0, r4
 8021a24:	f000 ffb6 	bl	8022994 <__lshift>
 8021a28:	4606      	mov	r6, r0
 8021a2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021a2c:	2b00      	cmp	r3, #0
 8021a2e:	d069      	beq.n	8021b04 <_dtoa_r+0x924>
 8021a30:	4631      	mov	r1, r6
 8021a32:	4658      	mov	r0, fp
 8021a34:	f001 f81a 	bl	8022a6c <__mcmp>
 8021a38:	2800      	cmp	r0, #0
 8021a3a:	da63      	bge.n	8021b04 <_dtoa_r+0x924>
 8021a3c:	2300      	movs	r3, #0
 8021a3e:	4659      	mov	r1, fp
 8021a40:	220a      	movs	r2, #10
 8021a42:	4620      	mov	r0, r4
 8021a44:	f000 fdac 	bl	80225a0 <__multadd>
 8021a48:	9b08      	ldr	r3, [sp, #32]
 8021a4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021a4e:	4683      	mov	fp, r0
 8021a50:	2b00      	cmp	r3, #0
 8021a52:	f000 818f 	beq.w	8021d74 <_dtoa_r+0xb94>
 8021a56:	4639      	mov	r1, r7
 8021a58:	2300      	movs	r3, #0
 8021a5a:	220a      	movs	r2, #10
 8021a5c:	4620      	mov	r0, r4
 8021a5e:	f000 fd9f 	bl	80225a0 <__multadd>
 8021a62:	f1b9 0f00 	cmp.w	r9, #0
 8021a66:	4607      	mov	r7, r0
 8021a68:	f300 808e 	bgt.w	8021b88 <_dtoa_r+0x9a8>
 8021a6c:	9b05      	ldr	r3, [sp, #20]
 8021a6e:	2b02      	cmp	r3, #2
 8021a70:	dc50      	bgt.n	8021b14 <_dtoa_r+0x934>
 8021a72:	e089      	b.n	8021b88 <_dtoa_r+0x9a8>
 8021a74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021a76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8021a7a:	e75d      	b.n	8021938 <_dtoa_r+0x758>
 8021a7c:	9b01      	ldr	r3, [sp, #4]
 8021a7e:	1e5e      	subs	r6, r3, #1
 8021a80:	9b06      	ldr	r3, [sp, #24]
 8021a82:	42b3      	cmp	r3, r6
 8021a84:	bfbf      	itttt	lt
 8021a86:	9b06      	ldrlt	r3, [sp, #24]
 8021a88:	9606      	strlt	r6, [sp, #24]
 8021a8a:	1af2      	sublt	r2, r6, r3
 8021a8c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8021a8e:	bfb6      	itet	lt
 8021a90:	189b      	addlt	r3, r3, r2
 8021a92:	1b9e      	subge	r6, r3, r6
 8021a94:	930d      	strlt	r3, [sp, #52]	; 0x34
 8021a96:	9b01      	ldr	r3, [sp, #4]
 8021a98:	bfb8      	it	lt
 8021a9a:	2600      	movlt	r6, #0
 8021a9c:	2b00      	cmp	r3, #0
 8021a9e:	bfb5      	itete	lt
 8021aa0:	eba8 0503 	sublt.w	r5, r8, r3
 8021aa4:	9b01      	ldrge	r3, [sp, #4]
 8021aa6:	2300      	movlt	r3, #0
 8021aa8:	4645      	movge	r5, r8
 8021aaa:	e747      	b.n	802193c <_dtoa_r+0x75c>
 8021aac:	9e06      	ldr	r6, [sp, #24]
 8021aae:	9f08      	ldr	r7, [sp, #32]
 8021ab0:	4645      	mov	r5, r8
 8021ab2:	e74c      	b.n	802194e <_dtoa_r+0x76e>
 8021ab4:	9a06      	ldr	r2, [sp, #24]
 8021ab6:	e775      	b.n	80219a4 <_dtoa_r+0x7c4>
 8021ab8:	9b05      	ldr	r3, [sp, #20]
 8021aba:	2b01      	cmp	r3, #1
 8021abc:	dc18      	bgt.n	8021af0 <_dtoa_r+0x910>
 8021abe:	9b02      	ldr	r3, [sp, #8]
 8021ac0:	b9b3      	cbnz	r3, 8021af0 <_dtoa_r+0x910>
 8021ac2:	9b03      	ldr	r3, [sp, #12]
 8021ac4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8021ac8:	b9a3      	cbnz	r3, 8021af4 <_dtoa_r+0x914>
 8021aca:	9b03      	ldr	r3, [sp, #12]
 8021acc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8021ad0:	0d1b      	lsrs	r3, r3, #20
 8021ad2:	051b      	lsls	r3, r3, #20
 8021ad4:	b12b      	cbz	r3, 8021ae2 <_dtoa_r+0x902>
 8021ad6:	9b04      	ldr	r3, [sp, #16]
 8021ad8:	3301      	adds	r3, #1
 8021ada:	9304      	str	r3, [sp, #16]
 8021adc:	f108 0801 	add.w	r8, r8, #1
 8021ae0:	2301      	movs	r3, #1
 8021ae2:	9306      	str	r3, [sp, #24]
 8021ae4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021ae6:	2b00      	cmp	r3, #0
 8021ae8:	f47f af74 	bne.w	80219d4 <_dtoa_r+0x7f4>
 8021aec:	2001      	movs	r0, #1
 8021aee:	e779      	b.n	80219e4 <_dtoa_r+0x804>
 8021af0:	2300      	movs	r3, #0
 8021af2:	e7f6      	b.n	8021ae2 <_dtoa_r+0x902>
 8021af4:	9b02      	ldr	r3, [sp, #8]
 8021af6:	e7f4      	b.n	8021ae2 <_dtoa_r+0x902>
 8021af8:	d085      	beq.n	8021a06 <_dtoa_r+0x826>
 8021afa:	4618      	mov	r0, r3
 8021afc:	301c      	adds	r0, #28
 8021afe:	e77d      	b.n	80219fc <_dtoa_r+0x81c>
 8021b00:	40240000 	.word	0x40240000
 8021b04:	9b01      	ldr	r3, [sp, #4]
 8021b06:	2b00      	cmp	r3, #0
 8021b08:	dc38      	bgt.n	8021b7c <_dtoa_r+0x99c>
 8021b0a:	9b05      	ldr	r3, [sp, #20]
 8021b0c:	2b02      	cmp	r3, #2
 8021b0e:	dd35      	ble.n	8021b7c <_dtoa_r+0x99c>
 8021b10:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8021b14:	f1b9 0f00 	cmp.w	r9, #0
 8021b18:	d10d      	bne.n	8021b36 <_dtoa_r+0x956>
 8021b1a:	4631      	mov	r1, r6
 8021b1c:	464b      	mov	r3, r9
 8021b1e:	2205      	movs	r2, #5
 8021b20:	4620      	mov	r0, r4
 8021b22:	f000 fd3d 	bl	80225a0 <__multadd>
 8021b26:	4601      	mov	r1, r0
 8021b28:	4606      	mov	r6, r0
 8021b2a:	4658      	mov	r0, fp
 8021b2c:	f000 ff9e 	bl	8022a6c <__mcmp>
 8021b30:	2800      	cmp	r0, #0
 8021b32:	f73f adbd 	bgt.w	80216b0 <_dtoa_r+0x4d0>
 8021b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021b38:	9d00      	ldr	r5, [sp, #0]
 8021b3a:	ea6f 0a03 	mvn.w	sl, r3
 8021b3e:	f04f 0800 	mov.w	r8, #0
 8021b42:	4631      	mov	r1, r6
 8021b44:	4620      	mov	r0, r4
 8021b46:	f000 fd09 	bl	802255c <_Bfree>
 8021b4a:	2f00      	cmp	r7, #0
 8021b4c:	f43f aeb4 	beq.w	80218b8 <_dtoa_r+0x6d8>
 8021b50:	f1b8 0f00 	cmp.w	r8, #0
 8021b54:	d005      	beq.n	8021b62 <_dtoa_r+0x982>
 8021b56:	45b8      	cmp	r8, r7
 8021b58:	d003      	beq.n	8021b62 <_dtoa_r+0x982>
 8021b5a:	4641      	mov	r1, r8
 8021b5c:	4620      	mov	r0, r4
 8021b5e:	f000 fcfd 	bl	802255c <_Bfree>
 8021b62:	4639      	mov	r1, r7
 8021b64:	4620      	mov	r0, r4
 8021b66:	f000 fcf9 	bl	802255c <_Bfree>
 8021b6a:	e6a5      	b.n	80218b8 <_dtoa_r+0x6d8>
 8021b6c:	2600      	movs	r6, #0
 8021b6e:	4637      	mov	r7, r6
 8021b70:	e7e1      	b.n	8021b36 <_dtoa_r+0x956>
 8021b72:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8021b74:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8021b78:	4637      	mov	r7, r6
 8021b7a:	e599      	b.n	80216b0 <_dtoa_r+0x4d0>
 8021b7c:	9b08      	ldr	r3, [sp, #32]
 8021b7e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8021b82:	2b00      	cmp	r3, #0
 8021b84:	f000 80fd 	beq.w	8021d82 <_dtoa_r+0xba2>
 8021b88:	2d00      	cmp	r5, #0
 8021b8a:	dd05      	ble.n	8021b98 <_dtoa_r+0x9b8>
 8021b8c:	4639      	mov	r1, r7
 8021b8e:	462a      	mov	r2, r5
 8021b90:	4620      	mov	r0, r4
 8021b92:	f000 feff 	bl	8022994 <__lshift>
 8021b96:	4607      	mov	r7, r0
 8021b98:	9b06      	ldr	r3, [sp, #24]
 8021b9a:	2b00      	cmp	r3, #0
 8021b9c:	d05c      	beq.n	8021c58 <_dtoa_r+0xa78>
 8021b9e:	6879      	ldr	r1, [r7, #4]
 8021ba0:	4620      	mov	r0, r4
 8021ba2:	f000 fc9b 	bl	80224dc <_Balloc>
 8021ba6:	4605      	mov	r5, r0
 8021ba8:	b928      	cbnz	r0, 8021bb6 <_dtoa_r+0x9d6>
 8021baa:	4b80      	ldr	r3, [pc, #512]	; (8021dac <_dtoa_r+0xbcc>)
 8021bac:	4602      	mov	r2, r0
 8021bae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8021bb2:	f7ff bb2e 	b.w	8021212 <_dtoa_r+0x32>
 8021bb6:	693a      	ldr	r2, [r7, #16]
 8021bb8:	3202      	adds	r2, #2
 8021bba:	0092      	lsls	r2, r2, #2
 8021bbc:	f107 010c 	add.w	r1, r7, #12
 8021bc0:	300c      	adds	r0, #12
 8021bc2:	f7fd fbe5 	bl	801f390 <memcpy>
 8021bc6:	2201      	movs	r2, #1
 8021bc8:	4629      	mov	r1, r5
 8021bca:	4620      	mov	r0, r4
 8021bcc:	f000 fee2 	bl	8022994 <__lshift>
 8021bd0:	9b00      	ldr	r3, [sp, #0]
 8021bd2:	3301      	adds	r3, #1
 8021bd4:	9301      	str	r3, [sp, #4]
 8021bd6:	9b00      	ldr	r3, [sp, #0]
 8021bd8:	444b      	add	r3, r9
 8021bda:	9307      	str	r3, [sp, #28]
 8021bdc:	9b02      	ldr	r3, [sp, #8]
 8021bde:	f003 0301 	and.w	r3, r3, #1
 8021be2:	46b8      	mov	r8, r7
 8021be4:	9306      	str	r3, [sp, #24]
 8021be6:	4607      	mov	r7, r0
 8021be8:	9b01      	ldr	r3, [sp, #4]
 8021bea:	4631      	mov	r1, r6
 8021bec:	3b01      	subs	r3, #1
 8021bee:	4658      	mov	r0, fp
 8021bf0:	9302      	str	r3, [sp, #8]
 8021bf2:	f7ff fa67 	bl	80210c4 <quorem>
 8021bf6:	4603      	mov	r3, r0
 8021bf8:	3330      	adds	r3, #48	; 0x30
 8021bfa:	9004      	str	r0, [sp, #16]
 8021bfc:	4641      	mov	r1, r8
 8021bfe:	4658      	mov	r0, fp
 8021c00:	9308      	str	r3, [sp, #32]
 8021c02:	f000 ff33 	bl	8022a6c <__mcmp>
 8021c06:	463a      	mov	r2, r7
 8021c08:	4681      	mov	r9, r0
 8021c0a:	4631      	mov	r1, r6
 8021c0c:	4620      	mov	r0, r4
 8021c0e:	f000 ff49 	bl	8022aa4 <__mdiff>
 8021c12:	68c2      	ldr	r2, [r0, #12]
 8021c14:	9b08      	ldr	r3, [sp, #32]
 8021c16:	4605      	mov	r5, r0
 8021c18:	bb02      	cbnz	r2, 8021c5c <_dtoa_r+0xa7c>
 8021c1a:	4601      	mov	r1, r0
 8021c1c:	4658      	mov	r0, fp
 8021c1e:	f000 ff25 	bl	8022a6c <__mcmp>
 8021c22:	9b08      	ldr	r3, [sp, #32]
 8021c24:	4602      	mov	r2, r0
 8021c26:	4629      	mov	r1, r5
 8021c28:	4620      	mov	r0, r4
 8021c2a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8021c2e:	f000 fc95 	bl	802255c <_Bfree>
 8021c32:	9b05      	ldr	r3, [sp, #20]
 8021c34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021c36:	9d01      	ldr	r5, [sp, #4]
 8021c38:	ea43 0102 	orr.w	r1, r3, r2
 8021c3c:	9b06      	ldr	r3, [sp, #24]
 8021c3e:	430b      	orrs	r3, r1
 8021c40:	9b08      	ldr	r3, [sp, #32]
 8021c42:	d10d      	bne.n	8021c60 <_dtoa_r+0xa80>
 8021c44:	2b39      	cmp	r3, #57	; 0x39
 8021c46:	d029      	beq.n	8021c9c <_dtoa_r+0xabc>
 8021c48:	f1b9 0f00 	cmp.w	r9, #0
 8021c4c:	dd01      	ble.n	8021c52 <_dtoa_r+0xa72>
 8021c4e:	9b04      	ldr	r3, [sp, #16]
 8021c50:	3331      	adds	r3, #49	; 0x31
 8021c52:	9a02      	ldr	r2, [sp, #8]
 8021c54:	7013      	strb	r3, [r2, #0]
 8021c56:	e774      	b.n	8021b42 <_dtoa_r+0x962>
 8021c58:	4638      	mov	r0, r7
 8021c5a:	e7b9      	b.n	8021bd0 <_dtoa_r+0x9f0>
 8021c5c:	2201      	movs	r2, #1
 8021c5e:	e7e2      	b.n	8021c26 <_dtoa_r+0xa46>
 8021c60:	f1b9 0f00 	cmp.w	r9, #0
 8021c64:	db06      	blt.n	8021c74 <_dtoa_r+0xa94>
 8021c66:	9905      	ldr	r1, [sp, #20]
 8021c68:	ea41 0909 	orr.w	r9, r1, r9
 8021c6c:	9906      	ldr	r1, [sp, #24]
 8021c6e:	ea59 0101 	orrs.w	r1, r9, r1
 8021c72:	d120      	bne.n	8021cb6 <_dtoa_r+0xad6>
 8021c74:	2a00      	cmp	r2, #0
 8021c76:	ddec      	ble.n	8021c52 <_dtoa_r+0xa72>
 8021c78:	4659      	mov	r1, fp
 8021c7a:	2201      	movs	r2, #1
 8021c7c:	4620      	mov	r0, r4
 8021c7e:	9301      	str	r3, [sp, #4]
 8021c80:	f000 fe88 	bl	8022994 <__lshift>
 8021c84:	4631      	mov	r1, r6
 8021c86:	4683      	mov	fp, r0
 8021c88:	f000 fef0 	bl	8022a6c <__mcmp>
 8021c8c:	2800      	cmp	r0, #0
 8021c8e:	9b01      	ldr	r3, [sp, #4]
 8021c90:	dc02      	bgt.n	8021c98 <_dtoa_r+0xab8>
 8021c92:	d1de      	bne.n	8021c52 <_dtoa_r+0xa72>
 8021c94:	07da      	lsls	r2, r3, #31
 8021c96:	d5dc      	bpl.n	8021c52 <_dtoa_r+0xa72>
 8021c98:	2b39      	cmp	r3, #57	; 0x39
 8021c9a:	d1d8      	bne.n	8021c4e <_dtoa_r+0xa6e>
 8021c9c:	9a02      	ldr	r2, [sp, #8]
 8021c9e:	2339      	movs	r3, #57	; 0x39
 8021ca0:	7013      	strb	r3, [r2, #0]
 8021ca2:	462b      	mov	r3, r5
 8021ca4:	461d      	mov	r5, r3
 8021ca6:	3b01      	subs	r3, #1
 8021ca8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8021cac:	2a39      	cmp	r2, #57	; 0x39
 8021cae:	d050      	beq.n	8021d52 <_dtoa_r+0xb72>
 8021cb0:	3201      	adds	r2, #1
 8021cb2:	701a      	strb	r2, [r3, #0]
 8021cb4:	e745      	b.n	8021b42 <_dtoa_r+0x962>
 8021cb6:	2a00      	cmp	r2, #0
 8021cb8:	dd03      	ble.n	8021cc2 <_dtoa_r+0xae2>
 8021cba:	2b39      	cmp	r3, #57	; 0x39
 8021cbc:	d0ee      	beq.n	8021c9c <_dtoa_r+0xabc>
 8021cbe:	3301      	adds	r3, #1
 8021cc0:	e7c7      	b.n	8021c52 <_dtoa_r+0xa72>
 8021cc2:	9a01      	ldr	r2, [sp, #4]
 8021cc4:	9907      	ldr	r1, [sp, #28]
 8021cc6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8021cca:	428a      	cmp	r2, r1
 8021ccc:	d02a      	beq.n	8021d24 <_dtoa_r+0xb44>
 8021cce:	4659      	mov	r1, fp
 8021cd0:	2300      	movs	r3, #0
 8021cd2:	220a      	movs	r2, #10
 8021cd4:	4620      	mov	r0, r4
 8021cd6:	f000 fc63 	bl	80225a0 <__multadd>
 8021cda:	45b8      	cmp	r8, r7
 8021cdc:	4683      	mov	fp, r0
 8021cde:	f04f 0300 	mov.w	r3, #0
 8021ce2:	f04f 020a 	mov.w	r2, #10
 8021ce6:	4641      	mov	r1, r8
 8021ce8:	4620      	mov	r0, r4
 8021cea:	d107      	bne.n	8021cfc <_dtoa_r+0xb1c>
 8021cec:	f000 fc58 	bl	80225a0 <__multadd>
 8021cf0:	4680      	mov	r8, r0
 8021cf2:	4607      	mov	r7, r0
 8021cf4:	9b01      	ldr	r3, [sp, #4]
 8021cf6:	3301      	adds	r3, #1
 8021cf8:	9301      	str	r3, [sp, #4]
 8021cfa:	e775      	b.n	8021be8 <_dtoa_r+0xa08>
 8021cfc:	f000 fc50 	bl	80225a0 <__multadd>
 8021d00:	4639      	mov	r1, r7
 8021d02:	4680      	mov	r8, r0
 8021d04:	2300      	movs	r3, #0
 8021d06:	220a      	movs	r2, #10
 8021d08:	4620      	mov	r0, r4
 8021d0a:	f000 fc49 	bl	80225a0 <__multadd>
 8021d0e:	4607      	mov	r7, r0
 8021d10:	e7f0      	b.n	8021cf4 <_dtoa_r+0xb14>
 8021d12:	f1b9 0f00 	cmp.w	r9, #0
 8021d16:	9a00      	ldr	r2, [sp, #0]
 8021d18:	bfcc      	ite	gt
 8021d1a:	464d      	movgt	r5, r9
 8021d1c:	2501      	movle	r5, #1
 8021d1e:	4415      	add	r5, r2
 8021d20:	f04f 0800 	mov.w	r8, #0
 8021d24:	4659      	mov	r1, fp
 8021d26:	2201      	movs	r2, #1
 8021d28:	4620      	mov	r0, r4
 8021d2a:	9301      	str	r3, [sp, #4]
 8021d2c:	f000 fe32 	bl	8022994 <__lshift>
 8021d30:	4631      	mov	r1, r6
 8021d32:	4683      	mov	fp, r0
 8021d34:	f000 fe9a 	bl	8022a6c <__mcmp>
 8021d38:	2800      	cmp	r0, #0
 8021d3a:	dcb2      	bgt.n	8021ca2 <_dtoa_r+0xac2>
 8021d3c:	d102      	bne.n	8021d44 <_dtoa_r+0xb64>
 8021d3e:	9b01      	ldr	r3, [sp, #4]
 8021d40:	07db      	lsls	r3, r3, #31
 8021d42:	d4ae      	bmi.n	8021ca2 <_dtoa_r+0xac2>
 8021d44:	462b      	mov	r3, r5
 8021d46:	461d      	mov	r5, r3
 8021d48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021d4c:	2a30      	cmp	r2, #48	; 0x30
 8021d4e:	d0fa      	beq.n	8021d46 <_dtoa_r+0xb66>
 8021d50:	e6f7      	b.n	8021b42 <_dtoa_r+0x962>
 8021d52:	9a00      	ldr	r2, [sp, #0]
 8021d54:	429a      	cmp	r2, r3
 8021d56:	d1a5      	bne.n	8021ca4 <_dtoa_r+0xac4>
 8021d58:	f10a 0a01 	add.w	sl, sl, #1
 8021d5c:	2331      	movs	r3, #49	; 0x31
 8021d5e:	e779      	b.n	8021c54 <_dtoa_r+0xa74>
 8021d60:	4b13      	ldr	r3, [pc, #76]	; (8021db0 <_dtoa_r+0xbd0>)
 8021d62:	f7ff baaf 	b.w	80212c4 <_dtoa_r+0xe4>
 8021d66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021d68:	2b00      	cmp	r3, #0
 8021d6a:	f47f aa86 	bne.w	802127a <_dtoa_r+0x9a>
 8021d6e:	4b11      	ldr	r3, [pc, #68]	; (8021db4 <_dtoa_r+0xbd4>)
 8021d70:	f7ff baa8 	b.w	80212c4 <_dtoa_r+0xe4>
 8021d74:	f1b9 0f00 	cmp.w	r9, #0
 8021d78:	dc03      	bgt.n	8021d82 <_dtoa_r+0xba2>
 8021d7a:	9b05      	ldr	r3, [sp, #20]
 8021d7c:	2b02      	cmp	r3, #2
 8021d7e:	f73f aec9 	bgt.w	8021b14 <_dtoa_r+0x934>
 8021d82:	9d00      	ldr	r5, [sp, #0]
 8021d84:	4631      	mov	r1, r6
 8021d86:	4658      	mov	r0, fp
 8021d88:	f7ff f99c 	bl	80210c4 <quorem>
 8021d8c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8021d90:	f805 3b01 	strb.w	r3, [r5], #1
 8021d94:	9a00      	ldr	r2, [sp, #0]
 8021d96:	1aaa      	subs	r2, r5, r2
 8021d98:	4591      	cmp	r9, r2
 8021d9a:	ddba      	ble.n	8021d12 <_dtoa_r+0xb32>
 8021d9c:	4659      	mov	r1, fp
 8021d9e:	2300      	movs	r3, #0
 8021da0:	220a      	movs	r2, #10
 8021da2:	4620      	mov	r0, r4
 8021da4:	f000 fbfc 	bl	80225a0 <__multadd>
 8021da8:	4683      	mov	fp, r0
 8021daa:	e7eb      	b.n	8021d84 <_dtoa_r+0xba4>
 8021dac:	08024184 	.word	0x08024184
 8021db0:	08023f80 	.word	0x08023f80
 8021db4:	08024101 	.word	0x08024101

08021db8 <rshift>:
 8021db8:	6903      	ldr	r3, [r0, #16]
 8021dba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8021dbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021dc2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8021dc6:	f100 0414 	add.w	r4, r0, #20
 8021dca:	dd45      	ble.n	8021e58 <rshift+0xa0>
 8021dcc:	f011 011f 	ands.w	r1, r1, #31
 8021dd0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8021dd4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8021dd8:	d10c      	bne.n	8021df4 <rshift+0x3c>
 8021dda:	f100 0710 	add.w	r7, r0, #16
 8021dde:	4629      	mov	r1, r5
 8021de0:	42b1      	cmp	r1, r6
 8021de2:	d334      	bcc.n	8021e4e <rshift+0x96>
 8021de4:	1a9b      	subs	r3, r3, r2
 8021de6:	009b      	lsls	r3, r3, #2
 8021de8:	1eea      	subs	r2, r5, #3
 8021dea:	4296      	cmp	r6, r2
 8021dec:	bf38      	it	cc
 8021dee:	2300      	movcc	r3, #0
 8021df0:	4423      	add	r3, r4
 8021df2:	e015      	b.n	8021e20 <rshift+0x68>
 8021df4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8021df8:	f1c1 0820 	rsb	r8, r1, #32
 8021dfc:	40cf      	lsrs	r7, r1
 8021dfe:	f105 0e04 	add.w	lr, r5, #4
 8021e02:	46a1      	mov	r9, r4
 8021e04:	4576      	cmp	r6, lr
 8021e06:	46f4      	mov	ip, lr
 8021e08:	d815      	bhi.n	8021e36 <rshift+0x7e>
 8021e0a:	1a9b      	subs	r3, r3, r2
 8021e0c:	009a      	lsls	r2, r3, #2
 8021e0e:	3a04      	subs	r2, #4
 8021e10:	3501      	adds	r5, #1
 8021e12:	42ae      	cmp	r6, r5
 8021e14:	bf38      	it	cc
 8021e16:	2200      	movcc	r2, #0
 8021e18:	18a3      	adds	r3, r4, r2
 8021e1a:	50a7      	str	r7, [r4, r2]
 8021e1c:	b107      	cbz	r7, 8021e20 <rshift+0x68>
 8021e1e:	3304      	adds	r3, #4
 8021e20:	1b1a      	subs	r2, r3, r4
 8021e22:	42a3      	cmp	r3, r4
 8021e24:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8021e28:	bf08      	it	eq
 8021e2a:	2300      	moveq	r3, #0
 8021e2c:	6102      	str	r2, [r0, #16]
 8021e2e:	bf08      	it	eq
 8021e30:	6143      	streq	r3, [r0, #20]
 8021e32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021e36:	f8dc c000 	ldr.w	ip, [ip]
 8021e3a:	fa0c fc08 	lsl.w	ip, ip, r8
 8021e3e:	ea4c 0707 	orr.w	r7, ip, r7
 8021e42:	f849 7b04 	str.w	r7, [r9], #4
 8021e46:	f85e 7b04 	ldr.w	r7, [lr], #4
 8021e4a:	40cf      	lsrs	r7, r1
 8021e4c:	e7da      	b.n	8021e04 <rshift+0x4c>
 8021e4e:	f851 cb04 	ldr.w	ip, [r1], #4
 8021e52:	f847 cf04 	str.w	ip, [r7, #4]!
 8021e56:	e7c3      	b.n	8021de0 <rshift+0x28>
 8021e58:	4623      	mov	r3, r4
 8021e5a:	e7e1      	b.n	8021e20 <rshift+0x68>

08021e5c <__hexdig_fun>:
 8021e5c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8021e60:	2b09      	cmp	r3, #9
 8021e62:	d802      	bhi.n	8021e6a <__hexdig_fun+0xe>
 8021e64:	3820      	subs	r0, #32
 8021e66:	b2c0      	uxtb	r0, r0
 8021e68:	4770      	bx	lr
 8021e6a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8021e6e:	2b05      	cmp	r3, #5
 8021e70:	d801      	bhi.n	8021e76 <__hexdig_fun+0x1a>
 8021e72:	3847      	subs	r0, #71	; 0x47
 8021e74:	e7f7      	b.n	8021e66 <__hexdig_fun+0xa>
 8021e76:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8021e7a:	2b05      	cmp	r3, #5
 8021e7c:	d801      	bhi.n	8021e82 <__hexdig_fun+0x26>
 8021e7e:	3827      	subs	r0, #39	; 0x27
 8021e80:	e7f1      	b.n	8021e66 <__hexdig_fun+0xa>
 8021e82:	2000      	movs	r0, #0
 8021e84:	4770      	bx	lr
	...

08021e88 <__gethex>:
 8021e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e8c:	ed2d 8b02 	vpush	{d8}
 8021e90:	b089      	sub	sp, #36	; 0x24
 8021e92:	ee08 0a10 	vmov	s16, r0
 8021e96:	9304      	str	r3, [sp, #16]
 8021e98:	4bbc      	ldr	r3, [pc, #752]	; (802218c <__gethex+0x304>)
 8021e9a:	681b      	ldr	r3, [r3, #0]
 8021e9c:	9301      	str	r3, [sp, #4]
 8021e9e:	4618      	mov	r0, r3
 8021ea0:	468b      	mov	fp, r1
 8021ea2:	4690      	mov	r8, r2
 8021ea4:	f7f7 f9e4 	bl	8019270 <strlen>
 8021ea8:	9b01      	ldr	r3, [sp, #4]
 8021eaa:	f8db 2000 	ldr.w	r2, [fp]
 8021eae:	4403      	add	r3, r0
 8021eb0:	4682      	mov	sl, r0
 8021eb2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8021eb6:	9305      	str	r3, [sp, #20]
 8021eb8:	1c93      	adds	r3, r2, #2
 8021eba:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8021ebe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8021ec2:	32fe      	adds	r2, #254	; 0xfe
 8021ec4:	18d1      	adds	r1, r2, r3
 8021ec6:	461f      	mov	r7, r3
 8021ec8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8021ecc:	9100      	str	r1, [sp, #0]
 8021ece:	2830      	cmp	r0, #48	; 0x30
 8021ed0:	d0f8      	beq.n	8021ec4 <__gethex+0x3c>
 8021ed2:	f7ff ffc3 	bl	8021e5c <__hexdig_fun>
 8021ed6:	4604      	mov	r4, r0
 8021ed8:	2800      	cmp	r0, #0
 8021eda:	d13a      	bne.n	8021f52 <__gethex+0xca>
 8021edc:	9901      	ldr	r1, [sp, #4]
 8021ede:	4652      	mov	r2, sl
 8021ee0:	4638      	mov	r0, r7
 8021ee2:	f001 f929 	bl	8023138 <strncmp>
 8021ee6:	4605      	mov	r5, r0
 8021ee8:	2800      	cmp	r0, #0
 8021eea:	d168      	bne.n	8021fbe <__gethex+0x136>
 8021eec:	f817 000a 	ldrb.w	r0, [r7, sl]
 8021ef0:	eb07 060a 	add.w	r6, r7, sl
 8021ef4:	f7ff ffb2 	bl	8021e5c <__hexdig_fun>
 8021ef8:	2800      	cmp	r0, #0
 8021efa:	d062      	beq.n	8021fc2 <__gethex+0x13a>
 8021efc:	4633      	mov	r3, r6
 8021efe:	7818      	ldrb	r0, [r3, #0]
 8021f00:	2830      	cmp	r0, #48	; 0x30
 8021f02:	461f      	mov	r7, r3
 8021f04:	f103 0301 	add.w	r3, r3, #1
 8021f08:	d0f9      	beq.n	8021efe <__gethex+0x76>
 8021f0a:	f7ff ffa7 	bl	8021e5c <__hexdig_fun>
 8021f0e:	2301      	movs	r3, #1
 8021f10:	fab0 f480 	clz	r4, r0
 8021f14:	0964      	lsrs	r4, r4, #5
 8021f16:	4635      	mov	r5, r6
 8021f18:	9300      	str	r3, [sp, #0]
 8021f1a:	463a      	mov	r2, r7
 8021f1c:	4616      	mov	r6, r2
 8021f1e:	3201      	adds	r2, #1
 8021f20:	7830      	ldrb	r0, [r6, #0]
 8021f22:	f7ff ff9b 	bl	8021e5c <__hexdig_fun>
 8021f26:	2800      	cmp	r0, #0
 8021f28:	d1f8      	bne.n	8021f1c <__gethex+0x94>
 8021f2a:	9901      	ldr	r1, [sp, #4]
 8021f2c:	4652      	mov	r2, sl
 8021f2e:	4630      	mov	r0, r6
 8021f30:	f001 f902 	bl	8023138 <strncmp>
 8021f34:	b980      	cbnz	r0, 8021f58 <__gethex+0xd0>
 8021f36:	b94d      	cbnz	r5, 8021f4c <__gethex+0xc4>
 8021f38:	eb06 050a 	add.w	r5, r6, sl
 8021f3c:	462a      	mov	r2, r5
 8021f3e:	4616      	mov	r6, r2
 8021f40:	3201      	adds	r2, #1
 8021f42:	7830      	ldrb	r0, [r6, #0]
 8021f44:	f7ff ff8a 	bl	8021e5c <__hexdig_fun>
 8021f48:	2800      	cmp	r0, #0
 8021f4a:	d1f8      	bne.n	8021f3e <__gethex+0xb6>
 8021f4c:	1bad      	subs	r5, r5, r6
 8021f4e:	00ad      	lsls	r5, r5, #2
 8021f50:	e004      	b.n	8021f5c <__gethex+0xd4>
 8021f52:	2400      	movs	r4, #0
 8021f54:	4625      	mov	r5, r4
 8021f56:	e7e0      	b.n	8021f1a <__gethex+0x92>
 8021f58:	2d00      	cmp	r5, #0
 8021f5a:	d1f7      	bne.n	8021f4c <__gethex+0xc4>
 8021f5c:	7833      	ldrb	r3, [r6, #0]
 8021f5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8021f62:	2b50      	cmp	r3, #80	; 0x50
 8021f64:	d13b      	bne.n	8021fde <__gethex+0x156>
 8021f66:	7873      	ldrb	r3, [r6, #1]
 8021f68:	2b2b      	cmp	r3, #43	; 0x2b
 8021f6a:	d02c      	beq.n	8021fc6 <__gethex+0x13e>
 8021f6c:	2b2d      	cmp	r3, #45	; 0x2d
 8021f6e:	d02e      	beq.n	8021fce <__gethex+0x146>
 8021f70:	1c71      	adds	r1, r6, #1
 8021f72:	f04f 0900 	mov.w	r9, #0
 8021f76:	7808      	ldrb	r0, [r1, #0]
 8021f78:	f7ff ff70 	bl	8021e5c <__hexdig_fun>
 8021f7c:	1e43      	subs	r3, r0, #1
 8021f7e:	b2db      	uxtb	r3, r3
 8021f80:	2b18      	cmp	r3, #24
 8021f82:	d82c      	bhi.n	8021fde <__gethex+0x156>
 8021f84:	f1a0 0210 	sub.w	r2, r0, #16
 8021f88:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8021f8c:	f7ff ff66 	bl	8021e5c <__hexdig_fun>
 8021f90:	1e43      	subs	r3, r0, #1
 8021f92:	b2db      	uxtb	r3, r3
 8021f94:	2b18      	cmp	r3, #24
 8021f96:	d91d      	bls.n	8021fd4 <__gethex+0x14c>
 8021f98:	f1b9 0f00 	cmp.w	r9, #0
 8021f9c:	d000      	beq.n	8021fa0 <__gethex+0x118>
 8021f9e:	4252      	negs	r2, r2
 8021fa0:	4415      	add	r5, r2
 8021fa2:	f8cb 1000 	str.w	r1, [fp]
 8021fa6:	b1e4      	cbz	r4, 8021fe2 <__gethex+0x15a>
 8021fa8:	9b00      	ldr	r3, [sp, #0]
 8021faa:	2b00      	cmp	r3, #0
 8021fac:	bf14      	ite	ne
 8021fae:	2700      	movne	r7, #0
 8021fb0:	2706      	moveq	r7, #6
 8021fb2:	4638      	mov	r0, r7
 8021fb4:	b009      	add	sp, #36	; 0x24
 8021fb6:	ecbd 8b02 	vpop	{d8}
 8021fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021fbe:	463e      	mov	r6, r7
 8021fc0:	4625      	mov	r5, r4
 8021fc2:	2401      	movs	r4, #1
 8021fc4:	e7ca      	b.n	8021f5c <__gethex+0xd4>
 8021fc6:	f04f 0900 	mov.w	r9, #0
 8021fca:	1cb1      	adds	r1, r6, #2
 8021fcc:	e7d3      	b.n	8021f76 <__gethex+0xee>
 8021fce:	f04f 0901 	mov.w	r9, #1
 8021fd2:	e7fa      	b.n	8021fca <__gethex+0x142>
 8021fd4:	230a      	movs	r3, #10
 8021fd6:	fb03 0202 	mla	r2, r3, r2, r0
 8021fda:	3a10      	subs	r2, #16
 8021fdc:	e7d4      	b.n	8021f88 <__gethex+0x100>
 8021fde:	4631      	mov	r1, r6
 8021fe0:	e7df      	b.n	8021fa2 <__gethex+0x11a>
 8021fe2:	1bf3      	subs	r3, r6, r7
 8021fe4:	3b01      	subs	r3, #1
 8021fe6:	4621      	mov	r1, r4
 8021fe8:	2b07      	cmp	r3, #7
 8021fea:	dc0b      	bgt.n	8022004 <__gethex+0x17c>
 8021fec:	ee18 0a10 	vmov	r0, s16
 8021ff0:	f000 fa74 	bl	80224dc <_Balloc>
 8021ff4:	4604      	mov	r4, r0
 8021ff6:	b940      	cbnz	r0, 802200a <__gethex+0x182>
 8021ff8:	4b65      	ldr	r3, [pc, #404]	; (8022190 <__gethex+0x308>)
 8021ffa:	4602      	mov	r2, r0
 8021ffc:	21de      	movs	r1, #222	; 0xde
 8021ffe:	4865      	ldr	r0, [pc, #404]	; (8022194 <__gethex+0x30c>)
 8022000:	f001 f8ba 	bl	8023178 <__assert_func>
 8022004:	3101      	adds	r1, #1
 8022006:	105b      	asrs	r3, r3, #1
 8022008:	e7ee      	b.n	8021fe8 <__gethex+0x160>
 802200a:	f100 0914 	add.w	r9, r0, #20
 802200e:	f04f 0b00 	mov.w	fp, #0
 8022012:	f1ca 0301 	rsb	r3, sl, #1
 8022016:	f8cd 9008 	str.w	r9, [sp, #8]
 802201a:	f8cd b000 	str.w	fp, [sp]
 802201e:	9306      	str	r3, [sp, #24]
 8022020:	42b7      	cmp	r7, r6
 8022022:	d340      	bcc.n	80220a6 <__gethex+0x21e>
 8022024:	9802      	ldr	r0, [sp, #8]
 8022026:	9b00      	ldr	r3, [sp, #0]
 8022028:	f840 3b04 	str.w	r3, [r0], #4
 802202c:	eba0 0009 	sub.w	r0, r0, r9
 8022030:	1080      	asrs	r0, r0, #2
 8022032:	0146      	lsls	r6, r0, #5
 8022034:	6120      	str	r0, [r4, #16]
 8022036:	4618      	mov	r0, r3
 8022038:	f000 fb46 	bl	80226c8 <__hi0bits>
 802203c:	1a30      	subs	r0, r6, r0
 802203e:	f8d8 6000 	ldr.w	r6, [r8]
 8022042:	42b0      	cmp	r0, r6
 8022044:	dd63      	ble.n	802210e <__gethex+0x286>
 8022046:	1b87      	subs	r7, r0, r6
 8022048:	4639      	mov	r1, r7
 802204a:	4620      	mov	r0, r4
 802204c:	f000 fee0 	bl	8022e10 <__any_on>
 8022050:	4682      	mov	sl, r0
 8022052:	b1a8      	cbz	r0, 8022080 <__gethex+0x1f8>
 8022054:	1e7b      	subs	r3, r7, #1
 8022056:	1159      	asrs	r1, r3, #5
 8022058:	f003 021f 	and.w	r2, r3, #31
 802205c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8022060:	f04f 0a01 	mov.w	sl, #1
 8022064:	fa0a f202 	lsl.w	r2, sl, r2
 8022068:	420a      	tst	r2, r1
 802206a:	d009      	beq.n	8022080 <__gethex+0x1f8>
 802206c:	4553      	cmp	r3, sl
 802206e:	dd05      	ble.n	802207c <__gethex+0x1f4>
 8022070:	1eb9      	subs	r1, r7, #2
 8022072:	4620      	mov	r0, r4
 8022074:	f000 fecc 	bl	8022e10 <__any_on>
 8022078:	2800      	cmp	r0, #0
 802207a:	d145      	bne.n	8022108 <__gethex+0x280>
 802207c:	f04f 0a02 	mov.w	sl, #2
 8022080:	4639      	mov	r1, r7
 8022082:	4620      	mov	r0, r4
 8022084:	f7ff fe98 	bl	8021db8 <rshift>
 8022088:	443d      	add	r5, r7
 802208a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802208e:	42ab      	cmp	r3, r5
 8022090:	da4c      	bge.n	802212c <__gethex+0x2a4>
 8022092:	ee18 0a10 	vmov	r0, s16
 8022096:	4621      	mov	r1, r4
 8022098:	f000 fa60 	bl	802255c <_Bfree>
 802209c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802209e:	2300      	movs	r3, #0
 80220a0:	6013      	str	r3, [r2, #0]
 80220a2:	27a3      	movs	r7, #163	; 0xa3
 80220a4:	e785      	b.n	8021fb2 <__gethex+0x12a>
 80220a6:	1e73      	subs	r3, r6, #1
 80220a8:	9a05      	ldr	r2, [sp, #20]
 80220aa:	9303      	str	r3, [sp, #12]
 80220ac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80220b0:	4293      	cmp	r3, r2
 80220b2:	d019      	beq.n	80220e8 <__gethex+0x260>
 80220b4:	f1bb 0f20 	cmp.w	fp, #32
 80220b8:	d107      	bne.n	80220ca <__gethex+0x242>
 80220ba:	9b02      	ldr	r3, [sp, #8]
 80220bc:	9a00      	ldr	r2, [sp, #0]
 80220be:	f843 2b04 	str.w	r2, [r3], #4
 80220c2:	9302      	str	r3, [sp, #8]
 80220c4:	2300      	movs	r3, #0
 80220c6:	9300      	str	r3, [sp, #0]
 80220c8:	469b      	mov	fp, r3
 80220ca:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80220ce:	f7ff fec5 	bl	8021e5c <__hexdig_fun>
 80220d2:	9b00      	ldr	r3, [sp, #0]
 80220d4:	f000 000f 	and.w	r0, r0, #15
 80220d8:	fa00 f00b 	lsl.w	r0, r0, fp
 80220dc:	4303      	orrs	r3, r0
 80220de:	9300      	str	r3, [sp, #0]
 80220e0:	f10b 0b04 	add.w	fp, fp, #4
 80220e4:	9b03      	ldr	r3, [sp, #12]
 80220e6:	e00d      	b.n	8022104 <__gethex+0x27c>
 80220e8:	9b03      	ldr	r3, [sp, #12]
 80220ea:	9a06      	ldr	r2, [sp, #24]
 80220ec:	4413      	add	r3, r2
 80220ee:	42bb      	cmp	r3, r7
 80220f0:	d3e0      	bcc.n	80220b4 <__gethex+0x22c>
 80220f2:	4618      	mov	r0, r3
 80220f4:	9901      	ldr	r1, [sp, #4]
 80220f6:	9307      	str	r3, [sp, #28]
 80220f8:	4652      	mov	r2, sl
 80220fa:	f001 f81d 	bl	8023138 <strncmp>
 80220fe:	9b07      	ldr	r3, [sp, #28]
 8022100:	2800      	cmp	r0, #0
 8022102:	d1d7      	bne.n	80220b4 <__gethex+0x22c>
 8022104:	461e      	mov	r6, r3
 8022106:	e78b      	b.n	8022020 <__gethex+0x198>
 8022108:	f04f 0a03 	mov.w	sl, #3
 802210c:	e7b8      	b.n	8022080 <__gethex+0x1f8>
 802210e:	da0a      	bge.n	8022126 <__gethex+0x29e>
 8022110:	1a37      	subs	r7, r6, r0
 8022112:	4621      	mov	r1, r4
 8022114:	ee18 0a10 	vmov	r0, s16
 8022118:	463a      	mov	r2, r7
 802211a:	f000 fc3b 	bl	8022994 <__lshift>
 802211e:	1bed      	subs	r5, r5, r7
 8022120:	4604      	mov	r4, r0
 8022122:	f100 0914 	add.w	r9, r0, #20
 8022126:	f04f 0a00 	mov.w	sl, #0
 802212a:	e7ae      	b.n	802208a <__gethex+0x202>
 802212c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8022130:	42a8      	cmp	r0, r5
 8022132:	dd72      	ble.n	802221a <__gethex+0x392>
 8022134:	1b45      	subs	r5, r0, r5
 8022136:	42ae      	cmp	r6, r5
 8022138:	dc36      	bgt.n	80221a8 <__gethex+0x320>
 802213a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802213e:	2b02      	cmp	r3, #2
 8022140:	d02a      	beq.n	8022198 <__gethex+0x310>
 8022142:	2b03      	cmp	r3, #3
 8022144:	d02c      	beq.n	80221a0 <__gethex+0x318>
 8022146:	2b01      	cmp	r3, #1
 8022148:	d115      	bne.n	8022176 <__gethex+0x2ee>
 802214a:	42ae      	cmp	r6, r5
 802214c:	d113      	bne.n	8022176 <__gethex+0x2ee>
 802214e:	2e01      	cmp	r6, #1
 8022150:	d10b      	bne.n	802216a <__gethex+0x2e2>
 8022152:	9a04      	ldr	r2, [sp, #16]
 8022154:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8022158:	6013      	str	r3, [r2, #0]
 802215a:	2301      	movs	r3, #1
 802215c:	6123      	str	r3, [r4, #16]
 802215e:	f8c9 3000 	str.w	r3, [r9]
 8022162:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022164:	2762      	movs	r7, #98	; 0x62
 8022166:	601c      	str	r4, [r3, #0]
 8022168:	e723      	b.n	8021fb2 <__gethex+0x12a>
 802216a:	1e71      	subs	r1, r6, #1
 802216c:	4620      	mov	r0, r4
 802216e:	f000 fe4f 	bl	8022e10 <__any_on>
 8022172:	2800      	cmp	r0, #0
 8022174:	d1ed      	bne.n	8022152 <__gethex+0x2ca>
 8022176:	ee18 0a10 	vmov	r0, s16
 802217a:	4621      	mov	r1, r4
 802217c:	f000 f9ee 	bl	802255c <_Bfree>
 8022180:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022182:	2300      	movs	r3, #0
 8022184:	6013      	str	r3, [r2, #0]
 8022186:	2750      	movs	r7, #80	; 0x50
 8022188:	e713      	b.n	8021fb2 <__gethex+0x12a>
 802218a:	bf00      	nop
 802218c:	08024200 	.word	0x08024200
 8022190:	08024184 	.word	0x08024184
 8022194:	08024195 	.word	0x08024195
 8022198:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802219a:	2b00      	cmp	r3, #0
 802219c:	d1eb      	bne.n	8022176 <__gethex+0x2ee>
 802219e:	e7d8      	b.n	8022152 <__gethex+0x2ca>
 80221a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80221a2:	2b00      	cmp	r3, #0
 80221a4:	d1d5      	bne.n	8022152 <__gethex+0x2ca>
 80221a6:	e7e6      	b.n	8022176 <__gethex+0x2ee>
 80221a8:	1e6f      	subs	r7, r5, #1
 80221aa:	f1ba 0f00 	cmp.w	sl, #0
 80221ae:	d131      	bne.n	8022214 <__gethex+0x38c>
 80221b0:	b127      	cbz	r7, 80221bc <__gethex+0x334>
 80221b2:	4639      	mov	r1, r7
 80221b4:	4620      	mov	r0, r4
 80221b6:	f000 fe2b 	bl	8022e10 <__any_on>
 80221ba:	4682      	mov	sl, r0
 80221bc:	117b      	asrs	r3, r7, #5
 80221be:	2101      	movs	r1, #1
 80221c0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80221c4:	f007 071f 	and.w	r7, r7, #31
 80221c8:	fa01 f707 	lsl.w	r7, r1, r7
 80221cc:	421f      	tst	r7, r3
 80221ce:	4629      	mov	r1, r5
 80221d0:	4620      	mov	r0, r4
 80221d2:	bf18      	it	ne
 80221d4:	f04a 0a02 	orrne.w	sl, sl, #2
 80221d8:	1b76      	subs	r6, r6, r5
 80221da:	f7ff fded 	bl	8021db8 <rshift>
 80221de:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80221e2:	2702      	movs	r7, #2
 80221e4:	f1ba 0f00 	cmp.w	sl, #0
 80221e8:	d048      	beq.n	802227c <__gethex+0x3f4>
 80221ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80221ee:	2b02      	cmp	r3, #2
 80221f0:	d015      	beq.n	802221e <__gethex+0x396>
 80221f2:	2b03      	cmp	r3, #3
 80221f4:	d017      	beq.n	8022226 <__gethex+0x39e>
 80221f6:	2b01      	cmp	r3, #1
 80221f8:	d109      	bne.n	802220e <__gethex+0x386>
 80221fa:	f01a 0f02 	tst.w	sl, #2
 80221fe:	d006      	beq.n	802220e <__gethex+0x386>
 8022200:	f8d9 0000 	ldr.w	r0, [r9]
 8022204:	ea4a 0a00 	orr.w	sl, sl, r0
 8022208:	f01a 0f01 	tst.w	sl, #1
 802220c:	d10e      	bne.n	802222c <__gethex+0x3a4>
 802220e:	f047 0710 	orr.w	r7, r7, #16
 8022212:	e033      	b.n	802227c <__gethex+0x3f4>
 8022214:	f04f 0a01 	mov.w	sl, #1
 8022218:	e7d0      	b.n	80221bc <__gethex+0x334>
 802221a:	2701      	movs	r7, #1
 802221c:	e7e2      	b.n	80221e4 <__gethex+0x35c>
 802221e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022220:	f1c3 0301 	rsb	r3, r3, #1
 8022224:	9315      	str	r3, [sp, #84]	; 0x54
 8022226:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022228:	2b00      	cmp	r3, #0
 802222a:	d0f0      	beq.n	802220e <__gethex+0x386>
 802222c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8022230:	f104 0314 	add.w	r3, r4, #20
 8022234:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8022238:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 802223c:	f04f 0c00 	mov.w	ip, #0
 8022240:	4618      	mov	r0, r3
 8022242:	f853 2b04 	ldr.w	r2, [r3], #4
 8022246:	f1b2 3fff 	cmp.w	r2, #4294967295
 802224a:	d01c      	beq.n	8022286 <__gethex+0x3fe>
 802224c:	3201      	adds	r2, #1
 802224e:	6002      	str	r2, [r0, #0]
 8022250:	2f02      	cmp	r7, #2
 8022252:	f104 0314 	add.w	r3, r4, #20
 8022256:	d13f      	bne.n	80222d8 <__gethex+0x450>
 8022258:	f8d8 2000 	ldr.w	r2, [r8]
 802225c:	3a01      	subs	r2, #1
 802225e:	42b2      	cmp	r2, r6
 8022260:	d10a      	bne.n	8022278 <__gethex+0x3f0>
 8022262:	1171      	asrs	r1, r6, #5
 8022264:	2201      	movs	r2, #1
 8022266:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802226a:	f006 061f 	and.w	r6, r6, #31
 802226e:	fa02 f606 	lsl.w	r6, r2, r6
 8022272:	421e      	tst	r6, r3
 8022274:	bf18      	it	ne
 8022276:	4617      	movne	r7, r2
 8022278:	f047 0720 	orr.w	r7, r7, #32
 802227c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802227e:	601c      	str	r4, [r3, #0]
 8022280:	9b04      	ldr	r3, [sp, #16]
 8022282:	601d      	str	r5, [r3, #0]
 8022284:	e695      	b.n	8021fb2 <__gethex+0x12a>
 8022286:	4299      	cmp	r1, r3
 8022288:	f843 cc04 	str.w	ip, [r3, #-4]
 802228c:	d8d8      	bhi.n	8022240 <__gethex+0x3b8>
 802228e:	68a3      	ldr	r3, [r4, #8]
 8022290:	459b      	cmp	fp, r3
 8022292:	db19      	blt.n	80222c8 <__gethex+0x440>
 8022294:	6861      	ldr	r1, [r4, #4]
 8022296:	ee18 0a10 	vmov	r0, s16
 802229a:	3101      	adds	r1, #1
 802229c:	f000 f91e 	bl	80224dc <_Balloc>
 80222a0:	4681      	mov	r9, r0
 80222a2:	b918      	cbnz	r0, 80222ac <__gethex+0x424>
 80222a4:	4b1a      	ldr	r3, [pc, #104]	; (8022310 <__gethex+0x488>)
 80222a6:	4602      	mov	r2, r0
 80222a8:	2184      	movs	r1, #132	; 0x84
 80222aa:	e6a8      	b.n	8021ffe <__gethex+0x176>
 80222ac:	6922      	ldr	r2, [r4, #16]
 80222ae:	3202      	adds	r2, #2
 80222b0:	f104 010c 	add.w	r1, r4, #12
 80222b4:	0092      	lsls	r2, r2, #2
 80222b6:	300c      	adds	r0, #12
 80222b8:	f7fd f86a 	bl	801f390 <memcpy>
 80222bc:	4621      	mov	r1, r4
 80222be:	ee18 0a10 	vmov	r0, s16
 80222c2:	f000 f94b 	bl	802255c <_Bfree>
 80222c6:	464c      	mov	r4, r9
 80222c8:	6923      	ldr	r3, [r4, #16]
 80222ca:	1c5a      	adds	r2, r3, #1
 80222cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80222d0:	6122      	str	r2, [r4, #16]
 80222d2:	2201      	movs	r2, #1
 80222d4:	615a      	str	r2, [r3, #20]
 80222d6:	e7bb      	b.n	8022250 <__gethex+0x3c8>
 80222d8:	6922      	ldr	r2, [r4, #16]
 80222da:	455a      	cmp	r2, fp
 80222dc:	dd0b      	ble.n	80222f6 <__gethex+0x46e>
 80222de:	2101      	movs	r1, #1
 80222e0:	4620      	mov	r0, r4
 80222e2:	f7ff fd69 	bl	8021db8 <rshift>
 80222e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80222ea:	3501      	adds	r5, #1
 80222ec:	42ab      	cmp	r3, r5
 80222ee:	f6ff aed0 	blt.w	8022092 <__gethex+0x20a>
 80222f2:	2701      	movs	r7, #1
 80222f4:	e7c0      	b.n	8022278 <__gethex+0x3f0>
 80222f6:	f016 061f 	ands.w	r6, r6, #31
 80222fa:	d0fa      	beq.n	80222f2 <__gethex+0x46a>
 80222fc:	449a      	add	sl, r3
 80222fe:	f1c6 0620 	rsb	r6, r6, #32
 8022302:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8022306:	f000 f9df 	bl	80226c8 <__hi0bits>
 802230a:	42b0      	cmp	r0, r6
 802230c:	dbe7      	blt.n	80222de <__gethex+0x456>
 802230e:	e7f0      	b.n	80222f2 <__gethex+0x46a>
 8022310:	08024184 	.word	0x08024184

08022314 <L_shift>:
 8022314:	f1c2 0208 	rsb	r2, r2, #8
 8022318:	0092      	lsls	r2, r2, #2
 802231a:	b570      	push	{r4, r5, r6, lr}
 802231c:	f1c2 0620 	rsb	r6, r2, #32
 8022320:	6843      	ldr	r3, [r0, #4]
 8022322:	6804      	ldr	r4, [r0, #0]
 8022324:	fa03 f506 	lsl.w	r5, r3, r6
 8022328:	432c      	orrs	r4, r5
 802232a:	40d3      	lsrs	r3, r2
 802232c:	6004      	str	r4, [r0, #0]
 802232e:	f840 3f04 	str.w	r3, [r0, #4]!
 8022332:	4288      	cmp	r0, r1
 8022334:	d3f4      	bcc.n	8022320 <L_shift+0xc>
 8022336:	bd70      	pop	{r4, r5, r6, pc}

08022338 <__match>:
 8022338:	b530      	push	{r4, r5, lr}
 802233a:	6803      	ldr	r3, [r0, #0]
 802233c:	3301      	adds	r3, #1
 802233e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022342:	b914      	cbnz	r4, 802234a <__match+0x12>
 8022344:	6003      	str	r3, [r0, #0]
 8022346:	2001      	movs	r0, #1
 8022348:	bd30      	pop	{r4, r5, pc}
 802234a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802234e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8022352:	2d19      	cmp	r5, #25
 8022354:	bf98      	it	ls
 8022356:	3220      	addls	r2, #32
 8022358:	42a2      	cmp	r2, r4
 802235a:	d0f0      	beq.n	802233e <__match+0x6>
 802235c:	2000      	movs	r0, #0
 802235e:	e7f3      	b.n	8022348 <__match+0x10>

08022360 <__hexnan>:
 8022360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022364:	680b      	ldr	r3, [r1, #0]
 8022366:	6801      	ldr	r1, [r0, #0]
 8022368:	115e      	asrs	r6, r3, #5
 802236a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802236e:	f013 031f 	ands.w	r3, r3, #31
 8022372:	b087      	sub	sp, #28
 8022374:	bf18      	it	ne
 8022376:	3604      	addne	r6, #4
 8022378:	2500      	movs	r5, #0
 802237a:	1f37      	subs	r7, r6, #4
 802237c:	4682      	mov	sl, r0
 802237e:	4690      	mov	r8, r2
 8022380:	9301      	str	r3, [sp, #4]
 8022382:	f846 5c04 	str.w	r5, [r6, #-4]
 8022386:	46b9      	mov	r9, r7
 8022388:	463c      	mov	r4, r7
 802238a:	9502      	str	r5, [sp, #8]
 802238c:	46ab      	mov	fp, r5
 802238e:	784a      	ldrb	r2, [r1, #1]
 8022390:	1c4b      	adds	r3, r1, #1
 8022392:	9303      	str	r3, [sp, #12]
 8022394:	b342      	cbz	r2, 80223e8 <__hexnan+0x88>
 8022396:	4610      	mov	r0, r2
 8022398:	9105      	str	r1, [sp, #20]
 802239a:	9204      	str	r2, [sp, #16]
 802239c:	f7ff fd5e 	bl	8021e5c <__hexdig_fun>
 80223a0:	2800      	cmp	r0, #0
 80223a2:	d14f      	bne.n	8022444 <__hexnan+0xe4>
 80223a4:	9a04      	ldr	r2, [sp, #16]
 80223a6:	9905      	ldr	r1, [sp, #20]
 80223a8:	2a20      	cmp	r2, #32
 80223aa:	d818      	bhi.n	80223de <__hexnan+0x7e>
 80223ac:	9b02      	ldr	r3, [sp, #8]
 80223ae:	459b      	cmp	fp, r3
 80223b0:	dd13      	ble.n	80223da <__hexnan+0x7a>
 80223b2:	454c      	cmp	r4, r9
 80223b4:	d206      	bcs.n	80223c4 <__hexnan+0x64>
 80223b6:	2d07      	cmp	r5, #7
 80223b8:	dc04      	bgt.n	80223c4 <__hexnan+0x64>
 80223ba:	462a      	mov	r2, r5
 80223bc:	4649      	mov	r1, r9
 80223be:	4620      	mov	r0, r4
 80223c0:	f7ff ffa8 	bl	8022314 <L_shift>
 80223c4:	4544      	cmp	r4, r8
 80223c6:	d950      	bls.n	802246a <__hexnan+0x10a>
 80223c8:	2300      	movs	r3, #0
 80223ca:	f1a4 0904 	sub.w	r9, r4, #4
 80223ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80223d2:	f8cd b008 	str.w	fp, [sp, #8]
 80223d6:	464c      	mov	r4, r9
 80223d8:	461d      	mov	r5, r3
 80223da:	9903      	ldr	r1, [sp, #12]
 80223dc:	e7d7      	b.n	802238e <__hexnan+0x2e>
 80223de:	2a29      	cmp	r2, #41	; 0x29
 80223e0:	d156      	bne.n	8022490 <__hexnan+0x130>
 80223e2:	3102      	adds	r1, #2
 80223e4:	f8ca 1000 	str.w	r1, [sl]
 80223e8:	f1bb 0f00 	cmp.w	fp, #0
 80223ec:	d050      	beq.n	8022490 <__hexnan+0x130>
 80223ee:	454c      	cmp	r4, r9
 80223f0:	d206      	bcs.n	8022400 <__hexnan+0xa0>
 80223f2:	2d07      	cmp	r5, #7
 80223f4:	dc04      	bgt.n	8022400 <__hexnan+0xa0>
 80223f6:	462a      	mov	r2, r5
 80223f8:	4649      	mov	r1, r9
 80223fa:	4620      	mov	r0, r4
 80223fc:	f7ff ff8a 	bl	8022314 <L_shift>
 8022400:	4544      	cmp	r4, r8
 8022402:	d934      	bls.n	802246e <__hexnan+0x10e>
 8022404:	f1a8 0204 	sub.w	r2, r8, #4
 8022408:	4623      	mov	r3, r4
 802240a:	f853 1b04 	ldr.w	r1, [r3], #4
 802240e:	f842 1f04 	str.w	r1, [r2, #4]!
 8022412:	429f      	cmp	r7, r3
 8022414:	d2f9      	bcs.n	802240a <__hexnan+0xaa>
 8022416:	1b3b      	subs	r3, r7, r4
 8022418:	f023 0303 	bic.w	r3, r3, #3
 802241c:	3304      	adds	r3, #4
 802241e:	3401      	adds	r4, #1
 8022420:	3e03      	subs	r6, #3
 8022422:	42b4      	cmp	r4, r6
 8022424:	bf88      	it	hi
 8022426:	2304      	movhi	r3, #4
 8022428:	4443      	add	r3, r8
 802242a:	2200      	movs	r2, #0
 802242c:	f843 2b04 	str.w	r2, [r3], #4
 8022430:	429f      	cmp	r7, r3
 8022432:	d2fb      	bcs.n	802242c <__hexnan+0xcc>
 8022434:	683b      	ldr	r3, [r7, #0]
 8022436:	b91b      	cbnz	r3, 8022440 <__hexnan+0xe0>
 8022438:	4547      	cmp	r7, r8
 802243a:	d127      	bne.n	802248c <__hexnan+0x12c>
 802243c:	2301      	movs	r3, #1
 802243e:	603b      	str	r3, [r7, #0]
 8022440:	2005      	movs	r0, #5
 8022442:	e026      	b.n	8022492 <__hexnan+0x132>
 8022444:	3501      	adds	r5, #1
 8022446:	2d08      	cmp	r5, #8
 8022448:	f10b 0b01 	add.w	fp, fp, #1
 802244c:	dd06      	ble.n	802245c <__hexnan+0xfc>
 802244e:	4544      	cmp	r4, r8
 8022450:	d9c3      	bls.n	80223da <__hexnan+0x7a>
 8022452:	2300      	movs	r3, #0
 8022454:	f844 3c04 	str.w	r3, [r4, #-4]
 8022458:	2501      	movs	r5, #1
 802245a:	3c04      	subs	r4, #4
 802245c:	6822      	ldr	r2, [r4, #0]
 802245e:	f000 000f 	and.w	r0, r0, #15
 8022462:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8022466:	6022      	str	r2, [r4, #0]
 8022468:	e7b7      	b.n	80223da <__hexnan+0x7a>
 802246a:	2508      	movs	r5, #8
 802246c:	e7b5      	b.n	80223da <__hexnan+0x7a>
 802246e:	9b01      	ldr	r3, [sp, #4]
 8022470:	2b00      	cmp	r3, #0
 8022472:	d0df      	beq.n	8022434 <__hexnan+0xd4>
 8022474:	f04f 32ff 	mov.w	r2, #4294967295
 8022478:	f1c3 0320 	rsb	r3, r3, #32
 802247c:	fa22 f303 	lsr.w	r3, r2, r3
 8022480:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8022484:	401a      	ands	r2, r3
 8022486:	f846 2c04 	str.w	r2, [r6, #-4]
 802248a:	e7d3      	b.n	8022434 <__hexnan+0xd4>
 802248c:	3f04      	subs	r7, #4
 802248e:	e7d1      	b.n	8022434 <__hexnan+0xd4>
 8022490:	2004      	movs	r0, #4
 8022492:	b007      	add	sp, #28
 8022494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022498 <_localeconv_r>:
 8022498:	4800      	ldr	r0, [pc, #0]	; (802249c <_localeconv_r+0x4>)
 802249a:	4770      	bx	lr
 802249c:	20000188 	.word	0x20000188

080224a0 <__ascii_mbtowc>:
 80224a0:	b082      	sub	sp, #8
 80224a2:	b901      	cbnz	r1, 80224a6 <__ascii_mbtowc+0x6>
 80224a4:	a901      	add	r1, sp, #4
 80224a6:	b142      	cbz	r2, 80224ba <__ascii_mbtowc+0x1a>
 80224a8:	b14b      	cbz	r3, 80224be <__ascii_mbtowc+0x1e>
 80224aa:	7813      	ldrb	r3, [r2, #0]
 80224ac:	600b      	str	r3, [r1, #0]
 80224ae:	7812      	ldrb	r2, [r2, #0]
 80224b0:	1e10      	subs	r0, r2, #0
 80224b2:	bf18      	it	ne
 80224b4:	2001      	movne	r0, #1
 80224b6:	b002      	add	sp, #8
 80224b8:	4770      	bx	lr
 80224ba:	4610      	mov	r0, r2
 80224bc:	e7fb      	b.n	80224b6 <__ascii_mbtowc+0x16>
 80224be:	f06f 0001 	mvn.w	r0, #1
 80224c2:	e7f8      	b.n	80224b6 <__ascii_mbtowc+0x16>

080224c4 <__malloc_lock>:
 80224c4:	4801      	ldr	r0, [pc, #4]	; (80224cc <__malloc_lock+0x8>)
 80224c6:	f000 be88 	b.w	80231da <__retarget_lock_acquire_recursive>
 80224ca:	bf00      	nop
 80224cc:	200003f4 	.word	0x200003f4

080224d0 <__malloc_unlock>:
 80224d0:	4801      	ldr	r0, [pc, #4]	; (80224d8 <__malloc_unlock+0x8>)
 80224d2:	f000 be83 	b.w	80231dc <__retarget_lock_release_recursive>
 80224d6:	bf00      	nop
 80224d8:	200003f4 	.word	0x200003f4

080224dc <_Balloc>:
 80224dc:	b570      	push	{r4, r5, r6, lr}
 80224de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80224e0:	4604      	mov	r4, r0
 80224e2:	460d      	mov	r5, r1
 80224e4:	b976      	cbnz	r6, 8022504 <_Balloc+0x28>
 80224e6:	2010      	movs	r0, #16
 80224e8:	f7fc ff42 	bl	801f370 <malloc>
 80224ec:	4602      	mov	r2, r0
 80224ee:	6260      	str	r0, [r4, #36]	; 0x24
 80224f0:	b920      	cbnz	r0, 80224fc <_Balloc+0x20>
 80224f2:	4b18      	ldr	r3, [pc, #96]	; (8022554 <_Balloc+0x78>)
 80224f4:	4818      	ldr	r0, [pc, #96]	; (8022558 <_Balloc+0x7c>)
 80224f6:	2166      	movs	r1, #102	; 0x66
 80224f8:	f000 fe3e 	bl	8023178 <__assert_func>
 80224fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8022500:	6006      	str	r6, [r0, #0]
 8022502:	60c6      	str	r6, [r0, #12]
 8022504:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8022506:	68f3      	ldr	r3, [r6, #12]
 8022508:	b183      	cbz	r3, 802252c <_Balloc+0x50>
 802250a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802250c:	68db      	ldr	r3, [r3, #12]
 802250e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8022512:	b9b8      	cbnz	r0, 8022544 <_Balloc+0x68>
 8022514:	2101      	movs	r1, #1
 8022516:	fa01 f605 	lsl.w	r6, r1, r5
 802251a:	1d72      	adds	r2, r6, #5
 802251c:	0092      	lsls	r2, r2, #2
 802251e:	4620      	mov	r0, r4
 8022520:	f000 fc97 	bl	8022e52 <_calloc_r>
 8022524:	b160      	cbz	r0, 8022540 <_Balloc+0x64>
 8022526:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802252a:	e00e      	b.n	802254a <_Balloc+0x6e>
 802252c:	2221      	movs	r2, #33	; 0x21
 802252e:	2104      	movs	r1, #4
 8022530:	4620      	mov	r0, r4
 8022532:	f000 fc8e 	bl	8022e52 <_calloc_r>
 8022536:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022538:	60f0      	str	r0, [r6, #12]
 802253a:	68db      	ldr	r3, [r3, #12]
 802253c:	2b00      	cmp	r3, #0
 802253e:	d1e4      	bne.n	802250a <_Balloc+0x2e>
 8022540:	2000      	movs	r0, #0
 8022542:	bd70      	pop	{r4, r5, r6, pc}
 8022544:	6802      	ldr	r2, [r0, #0]
 8022546:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802254a:	2300      	movs	r3, #0
 802254c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8022550:	e7f7      	b.n	8022542 <_Balloc+0x66>
 8022552:	bf00      	nop
 8022554:	0802410e 	.word	0x0802410e
 8022558:	08024214 	.word	0x08024214

0802255c <_Bfree>:
 802255c:	b570      	push	{r4, r5, r6, lr}
 802255e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8022560:	4605      	mov	r5, r0
 8022562:	460c      	mov	r4, r1
 8022564:	b976      	cbnz	r6, 8022584 <_Bfree+0x28>
 8022566:	2010      	movs	r0, #16
 8022568:	f7fc ff02 	bl	801f370 <malloc>
 802256c:	4602      	mov	r2, r0
 802256e:	6268      	str	r0, [r5, #36]	; 0x24
 8022570:	b920      	cbnz	r0, 802257c <_Bfree+0x20>
 8022572:	4b09      	ldr	r3, [pc, #36]	; (8022598 <_Bfree+0x3c>)
 8022574:	4809      	ldr	r0, [pc, #36]	; (802259c <_Bfree+0x40>)
 8022576:	218a      	movs	r1, #138	; 0x8a
 8022578:	f000 fdfe 	bl	8023178 <__assert_func>
 802257c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8022580:	6006      	str	r6, [r0, #0]
 8022582:	60c6      	str	r6, [r0, #12]
 8022584:	b13c      	cbz	r4, 8022596 <_Bfree+0x3a>
 8022586:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8022588:	6862      	ldr	r2, [r4, #4]
 802258a:	68db      	ldr	r3, [r3, #12]
 802258c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8022590:	6021      	str	r1, [r4, #0]
 8022592:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8022596:	bd70      	pop	{r4, r5, r6, pc}
 8022598:	0802410e 	.word	0x0802410e
 802259c:	08024214 	.word	0x08024214

080225a0 <__multadd>:
 80225a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80225a4:	690e      	ldr	r6, [r1, #16]
 80225a6:	4607      	mov	r7, r0
 80225a8:	4698      	mov	r8, r3
 80225aa:	460c      	mov	r4, r1
 80225ac:	f101 0014 	add.w	r0, r1, #20
 80225b0:	2300      	movs	r3, #0
 80225b2:	6805      	ldr	r5, [r0, #0]
 80225b4:	b2a9      	uxth	r1, r5
 80225b6:	fb02 8101 	mla	r1, r2, r1, r8
 80225ba:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80225be:	0c2d      	lsrs	r5, r5, #16
 80225c0:	fb02 c505 	mla	r5, r2, r5, ip
 80225c4:	b289      	uxth	r1, r1
 80225c6:	3301      	adds	r3, #1
 80225c8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80225cc:	429e      	cmp	r6, r3
 80225ce:	f840 1b04 	str.w	r1, [r0], #4
 80225d2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80225d6:	dcec      	bgt.n	80225b2 <__multadd+0x12>
 80225d8:	f1b8 0f00 	cmp.w	r8, #0
 80225dc:	d022      	beq.n	8022624 <__multadd+0x84>
 80225de:	68a3      	ldr	r3, [r4, #8]
 80225e0:	42b3      	cmp	r3, r6
 80225e2:	dc19      	bgt.n	8022618 <__multadd+0x78>
 80225e4:	6861      	ldr	r1, [r4, #4]
 80225e6:	4638      	mov	r0, r7
 80225e8:	3101      	adds	r1, #1
 80225ea:	f7ff ff77 	bl	80224dc <_Balloc>
 80225ee:	4605      	mov	r5, r0
 80225f0:	b928      	cbnz	r0, 80225fe <__multadd+0x5e>
 80225f2:	4602      	mov	r2, r0
 80225f4:	4b0d      	ldr	r3, [pc, #52]	; (802262c <__multadd+0x8c>)
 80225f6:	480e      	ldr	r0, [pc, #56]	; (8022630 <__multadd+0x90>)
 80225f8:	21b5      	movs	r1, #181	; 0xb5
 80225fa:	f000 fdbd 	bl	8023178 <__assert_func>
 80225fe:	6922      	ldr	r2, [r4, #16]
 8022600:	3202      	adds	r2, #2
 8022602:	f104 010c 	add.w	r1, r4, #12
 8022606:	0092      	lsls	r2, r2, #2
 8022608:	300c      	adds	r0, #12
 802260a:	f7fc fec1 	bl	801f390 <memcpy>
 802260e:	4621      	mov	r1, r4
 8022610:	4638      	mov	r0, r7
 8022612:	f7ff ffa3 	bl	802255c <_Bfree>
 8022616:	462c      	mov	r4, r5
 8022618:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 802261c:	3601      	adds	r6, #1
 802261e:	f8c3 8014 	str.w	r8, [r3, #20]
 8022622:	6126      	str	r6, [r4, #16]
 8022624:	4620      	mov	r0, r4
 8022626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802262a:	bf00      	nop
 802262c:	08024184 	.word	0x08024184
 8022630:	08024214 	.word	0x08024214

08022634 <__s2b>:
 8022634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022638:	460c      	mov	r4, r1
 802263a:	4615      	mov	r5, r2
 802263c:	461f      	mov	r7, r3
 802263e:	2209      	movs	r2, #9
 8022640:	3308      	adds	r3, #8
 8022642:	4606      	mov	r6, r0
 8022644:	fb93 f3f2 	sdiv	r3, r3, r2
 8022648:	2100      	movs	r1, #0
 802264a:	2201      	movs	r2, #1
 802264c:	429a      	cmp	r2, r3
 802264e:	db09      	blt.n	8022664 <__s2b+0x30>
 8022650:	4630      	mov	r0, r6
 8022652:	f7ff ff43 	bl	80224dc <_Balloc>
 8022656:	b940      	cbnz	r0, 802266a <__s2b+0x36>
 8022658:	4602      	mov	r2, r0
 802265a:	4b19      	ldr	r3, [pc, #100]	; (80226c0 <__s2b+0x8c>)
 802265c:	4819      	ldr	r0, [pc, #100]	; (80226c4 <__s2b+0x90>)
 802265e:	21ce      	movs	r1, #206	; 0xce
 8022660:	f000 fd8a 	bl	8023178 <__assert_func>
 8022664:	0052      	lsls	r2, r2, #1
 8022666:	3101      	adds	r1, #1
 8022668:	e7f0      	b.n	802264c <__s2b+0x18>
 802266a:	9b08      	ldr	r3, [sp, #32]
 802266c:	6143      	str	r3, [r0, #20]
 802266e:	2d09      	cmp	r5, #9
 8022670:	f04f 0301 	mov.w	r3, #1
 8022674:	6103      	str	r3, [r0, #16]
 8022676:	dd16      	ble.n	80226a6 <__s2b+0x72>
 8022678:	f104 0909 	add.w	r9, r4, #9
 802267c:	46c8      	mov	r8, r9
 802267e:	442c      	add	r4, r5
 8022680:	f818 3b01 	ldrb.w	r3, [r8], #1
 8022684:	4601      	mov	r1, r0
 8022686:	3b30      	subs	r3, #48	; 0x30
 8022688:	220a      	movs	r2, #10
 802268a:	4630      	mov	r0, r6
 802268c:	f7ff ff88 	bl	80225a0 <__multadd>
 8022690:	45a0      	cmp	r8, r4
 8022692:	d1f5      	bne.n	8022680 <__s2b+0x4c>
 8022694:	f1a5 0408 	sub.w	r4, r5, #8
 8022698:	444c      	add	r4, r9
 802269a:	1b2d      	subs	r5, r5, r4
 802269c:	1963      	adds	r3, r4, r5
 802269e:	42bb      	cmp	r3, r7
 80226a0:	db04      	blt.n	80226ac <__s2b+0x78>
 80226a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80226a6:	340a      	adds	r4, #10
 80226a8:	2509      	movs	r5, #9
 80226aa:	e7f6      	b.n	802269a <__s2b+0x66>
 80226ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80226b0:	4601      	mov	r1, r0
 80226b2:	3b30      	subs	r3, #48	; 0x30
 80226b4:	220a      	movs	r2, #10
 80226b6:	4630      	mov	r0, r6
 80226b8:	f7ff ff72 	bl	80225a0 <__multadd>
 80226bc:	e7ee      	b.n	802269c <__s2b+0x68>
 80226be:	bf00      	nop
 80226c0:	08024184 	.word	0x08024184
 80226c4:	08024214 	.word	0x08024214

080226c8 <__hi0bits>:
 80226c8:	0c03      	lsrs	r3, r0, #16
 80226ca:	041b      	lsls	r3, r3, #16
 80226cc:	b9d3      	cbnz	r3, 8022704 <__hi0bits+0x3c>
 80226ce:	0400      	lsls	r0, r0, #16
 80226d0:	2310      	movs	r3, #16
 80226d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80226d6:	bf04      	itt	eq
 80226d8:	0200      	lsleq	r0, r0, #8
 80226da:	3308      	addeq	r3, #8
 80226dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80226e0:	bf04      	itt	eq
 80226e2:	0100      	lsleq	r0, r0, #4
 80226e4:	3304      	addeq	r3, #4
 80226e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80226ea:	bf04      	itt	eq
 80226ec:	0080      	lsleq	r0, r0, #2
 80226ee:	3302      	addeq	r3, #2
 80226f0:	2800      	cmp	r0, #0
 80226f2:	db05      	blt.n	8022700 <__hi0bits+0x38>
 80226f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80226f8:	f103 0301 	add.w	r3, r3, #1
 80226fc:	bf08      	it	eq
 80226fe:	2320      	moveq	r3, #32
 8022700:	4618      	mov	r0, r3
 8022702:	4770      	bx	lr
 8022704:	2300      	movs	r3, #0
 8022706:	e7e4      	b.n	80226d2 <__hi0bits+0xa>

08022708 <__lo0bits>:
 8022708:	6803      	ldr	r3, [r0, #0]
 802270a:	f013 0207 	ands.w	r2, r3, #7
 802270e:	4601      	mov	r1, r0
 8022710:	d00b      	beq.n	802272a <__lo0bits+0x22>
 8022712:	07da      	lsls	r2, r3, #31
 8022714:	d424      	bmi.n	8022760 <__lo0bits+0x58>
 8022716:	0798      	lsls	r0, r3, #30
 8022718:	bf49      	itett	mi
 802271a:	085b      	lsrmi	r3, r3, #1
 802271c:	089b      	lsrpl	r3, r3, #2
 802271e:	2001      	movmi	r0, #1
 8022720:	600b      	strmi	r3, [r1, #0]
 8022722:	bf5c      	itt	pl
 8022724:	600b      	strpl	r3, [r1, #0]
 8022726:	2002      	movpl	r0, #2
 8022728:	4770      	bx	lr
 802272a:	b298      	uxth	r0, r3
 802272c:	b9b0      	cbnz	r0, 802275c <__lo0bits+0x54>
 802272e:	0c1b      	lsrs	r3, r3, #16
 8022730:	2010      	movs	r0, #16
 8022732:	f013 0fff 	tst.w	r3, #255	; 0xff
 8022736:	bf04      	itt	eq
 8022738:	0a1b      	lsreq	r3, r3, #8
 802273a:	3008      	addeq	r0, #8
 802273c:	071a      	lsls	r2, r3, #28
 802273e:	bf04      	itt	eq
 8022740:	091b      	lsreq	r3, r3, #4
 8022742:	3004      	addeq	r0, #4
 8022744:	079a      	lsls	r2, r3, #30
 8022746:	bf04      	itt	eq
 8022748:	089b      	lsreq	r3, r3, #2
 802274a:	3002      	addeq	r0, #2
 802274c:	07da      	lsls	r2, r3, #31
 802274e:	d403      	bmi.n	8022758 <__lo0bits+0x50>
 8022750:	085b      	lsrs	r3, r3, #1
 8022752:	f100 0001 	add.w	r0, r0, #1
 8022756:	d005      	beq.n	8022764 <__lo0bits+0x5c>
 8022758:	600b      	str	r3, [r1, #0]
 802275a:	4770      	bx	lr
 802275c:	4610      	mov	r0, r2
 802275e:	e7e8      	b.n	8022732 <__lo0bits+0x2a>
 8022760:	2000      	movs	r0, #0
 8022762:	4770      	bx	lr
 8022764:	2020      	movs	r0, #32
 8022766:	4770      	bx	lr

08022768 <__i2b>:
 8022768:	b510      	push	{r4, lr}
 802276a:	460c      	mov	r4, r1
 802276c:	2101      	movs	r1, #1
 802276e:	f7ff feb5 	bl	80224dc <_Balloc>
 8022772:	4602      	mov	r2, r0
 8022774:	b928      	cbnz	r0, 8022782 <__i2b+0x1a>
 8022776:	4b05      	ldr	r3, [pc, #20]	; (802278c <__i2b+0x24>)
 8022778:	4805      	ldr	r0, [pc, #20]	; (8022790 <__i2b+0x28>)
 802277a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802277e:	f000 fcfb 	bl	8023178 <__assert_func>
 8022782:	2301      	movs	r3, #1
 8022784:	6144      	str	r4, [r0, #20]
 8022786:	6103      	str	r3, [r0, #16]
 8022788:	bd10      	pop	{r4, pc}
 802278a:	bf00      	nop
 802278c:	08024184 	.word	0x08024184
 8022790:	08024214 	.word	0x08024214

08022794 <__multiply>:
 8022794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022798:	4614      	mov	r4, r2
 802279a:	690a      	ldr	r2, [r1, #16]
 802279c:	6923      	ldr	r3, [r4, #16]
 802279e:	429a      	cmp	r2, r3
 80227a0:	bfb8      	it	lt
 80227a2:	460b      	movlt	r3, r1
 80227a4:	460d      	mov	r5, r1
 80227a6:	bfbc      	itt	lt
 80227a8:	4625      	movlt	r5, r4
 80227aa:	461c      	movlt	r4, r3
 80227ac:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80227b0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80227b4:	68ab      	ldr	r3, [r5, #8]
 80227b6:	6869      	ldr	r1, [r5, #4]
 80227b8:	eb0a 0709 	add.w	r7, sl, r9
 80227bc:	42bb      	cmp	r3, r7
 80227be:	b085      	sub	sp, #20
 80227c0:	bfb8      	it	lt
 80227c2:	3101      	addlt	r1, #1
 80227c4:	f7ff fe8a 	bl	80224dc <_Balloc>
 80227c8:	b930      	cbnz	r0, 80227d8 <__multiply+0x44>
 80227ca:	4602      	mov	r2, r0
 80227cc:	4b42      	ldr	r3, [pc, #264]	; (80228d8 <__multiply+0x144>)
 80227ce:	4843      	ldr	r0, [pc, #268]	; (80228dc <__multiply+0x148>)
 80227d0:	f240 115d 	movw	r1, #349	; 0x15d
 80227d4:	f000 fcd0 	bl	8023178 <__assert_func>
 80227d8:	f100 0614 	add.w	r6, r0, #20
 80227dc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80227e0:	4633      	mov	r3, r6
 80227e2:	2200      	movs	r2, #0
 80227e4:	4543      	cmp	r3, r8
 80227e6:	d31e      	bcc.n	8022826 <__multiply+0x92>
 80227e8:	f105 0c14 	add.w	ip, r5, #20
 80227ec:	f104 0314 	add.w	r3, r4, #20
 80227f0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80227f4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80227f8:	9202      	str	r2, [sp, #8]
 80227fa:	ebac 0205 	sub.w	r2, ip, r5
 80227fe:	3a15      	subs	r2, #21
 8022800:	f022 0203 	bic.w	r2, r2, #3
 8022804:	3204      	adds	r2, #4
 8022806:	f105 0115 	add.w	r1, r5, #21
 802280a:	458c      	cmp	ip, r1
 802280c:	bf38      	it	cc
 802280e:	2204      	movcc	r2, #4
 8022810:	9201      	str	r2, [sp, #4]
 8022812:	9a02      	ldr	r2, [sp, #8]
 8022814:	9303      	str	r3, [sp, #12]
 8022816:	429a      	cmp	r2, r3
 8022818:	d808      	bhi.n	802282c <__multiply+0x98>
 802281a:	2f00      	cmp	r7, #0
 802281c:	dc55      	bgt.n	80228ca <__multiply+0x136>
 802281e:	6107      	str	r7, [r0, #16]
 8022820:	b005      	add	sp, #20
 8022822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022826:	f843 2b04 	str.w	r2, [r3], #4
 802282a:	e7db      	b.n	80227e4 <__multiply+0x50>
 802282c:	f8b3 a000 	ldrh.w	sl, [r3]
 8022830:	f1ba 0f00 	cmp.w	sl, #0
 8022834:	d020      	beq.n	8022878 <__multiply+0xe4>
 8022836:	f105 0e14 	add.w	lr, r5, #20
 802283a:	46b1      	mov	r9, r6
 802283c:	2200      	movs	r2, #0
 802283e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8022842:	f8d9 b000 	ldr.w	fp, [r9]
 8022846:	b2a1      	uxth	r1, r4
 8022848:	fa1f fb8b 	uxth.w	fp, fp
 802284c:	fb0a b101 	mla	r1, sl, r1, fp
 8022850:	4411      	add	r1, r2
 8022852:	f8d9 2000 	ldr.w	r2, [r9]
 8022856:	0c24      	lsrs	r4, r4, #16
 8022858:	0c12      	lsrs	r2, r2, #16
 802285a:	fb0a 2404 	mla	r4, sl, r4, r2
 802285e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8022862:	b289      	uxth	r1, r1
 8022864:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8022868:	45f4      	cmp	ip, lr
 802286a:	f849 1b04 	str.w	r1, [r9], #4
 802286e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8022872:	d8e4      	bhi.n	802283e <__multiply+0xaa>
 8022874:	9901      	ldr	r1, [sp, #4]
 8022876:	5072      	str	r2, [r6, r1]
 8022878:	9a03      	ldr	r2, [sp, #12]
 802287a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802287e:	3304      	adds	r3, #4
 8022880:	f1b9 0f00 	cmp.w	r9, #0
 8022884:	d01f      	beq.n	80228c6 <__multiply+0x132>
 8022886:	6834      	ldr	r4, [r6, #0]
 8022888:	f105 0114 	add.w	r1, r5, #20
 802288c:	46b6      	mov	lr, r6
 802288e:	f04f 0a00 	mov.w	sl, #0
 8022892:	880a      	ldrh	r2, [r1, #0]
 8022894:	f8be b002 	ldrh.w	fp, [lr, #2]
 8022898:	fb09 b202 	mla	r2, r9, r2, fp
 802289c:	4492      	add	sl, r2
 802289e:	b2a4      	uxth	r4, r4
 80228a0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80228a4:	f84e 4b04 	str.w	r4, [lr], #4
 80228a8:	f851 4b04 	ldr.w	r4, [r1], #4
 80228ac:	f8be 2000 	ldrh.w	r2, [lr]
 80228b0:	0c24      	lsrs	r4, r4, #16
 80228b2:	fb09 2404 	mla	r4, r9, r4, r2
 80228b6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80228ba:	458c      	cmp	ip, r1
 80228bc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80228c0:	d8e7      	bhi.n	8022892 <__multiply+0xfe>
 80228c2:	9a01      	ldr	r2, [sp, #4]
 80228c4:	50b4      	str	r4, [r6, r2]
 80228c6:	3604      	adds	r6, #4
 80228c8:	e7a3      	b.n	8022812 <__multiply+0x7e>
 80228ca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80228ce:	2b00      	cmp	r3, #0
 80228d0:	d1a5      	bne.n	802281e <__multiply+0x8a>
 80228d2:	3f01      	subs	r7, #1
 80228d4:	e7a1      	b.n	802281a <__multiply+0x86>
 80228d6:	bf00      	nop
 80228d8:	08024184 	.word	0x08024184
 80228dc:	08024214 	.word	0x08024214

080228e0 <__pow5mult>:
 80228e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80228e4:	4615      	mov	r5, r2
 80228e6:	f012 0203 	ands.w	r2, r2, #3
 80228ea:	4606      	mov	r6, r0
 80228ec:	460f      	mov	r7, r1
 80228ee:	d007      	beq.n	8022900 <__pow5mult+0x20>
 80228f0:	4c25      	ldr	r4, [pc, #148]	; (8022988 <__pow5mult+0xa8>)
 80228f2:	3a01      	subs	r2, #1
 80228f4:	2300      	movs	r3, #0
 80228f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80228fa:	f7ff fe51 	bl	80225a0 <__multadd>
 80228fe:	4607      	mov	r7, r0
 8022900:	10ad      	asrs	r5, r5, #2
 8022902:	d03d      	beq.n	8022980 <__pow5mult+0xa0>
 8022904:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8022906:	b97c      	cbnz	r4, 8022928 <__pow5mult+0x48>
 8022908:	2010      	movs	r0, #16
 802290a:	f7fc fd31 	bl	801f370 <malloc>
 802290e:	4602      	mov	r2, r0
 8022910:	6270      	str	r0, [r6, #36]	; 0x24
 8022912:	b928      	cbnz	r0, 8022920 <__pow5mult+0x40>
 8022914:	4b1d      	ldr	r3, [pc, #116]	; (802298c <__pow5mult+0xac>)
 8022916:	481e      	ldr	r0, [pc, #120]	; (8022990 <__pow5mult+0xb0>)
 8022918:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 802291c:	f000 fc2c 	bl	8023178 <__assert_func>
 8022920:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8022924:	6004      	str	r4, [r0, #0]
 8022926:	60c4      	str	r4, [r0, #12]
 8022928:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 802292c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8022930:	b94c      	cbnz	r4, 8022946 <__pow5mult+0x66>
 8022932:	f240 2171 	movw	r1, #625	; 0x271
 8022936:	4630      	mov	r0, r6
 8022938:	f7ff ff16 	bl	8022768 <__i2b>
 802293c:	2300      	movs	r3, #0
 802293e:	f8c8 0008 	str.w	r0, [r8, #8]
 8022942:	4604      	mov	r4, r0
 8022944:	6003      	str	r3, [r0, #0]
 8022946:	f04f 0900 	mov.w	r9, #0
 802294a:	07eb      	lsls	r3, r5, #31
 802294c:	d50a      	bpl.n	8022964 <__pow5mult+0x84>
 802294e:	4639      	mov	r1, r7
 8022950:	4622      	mov	r2, r4
 8022952:	4630      	mov	r0, r6
 8022954:	f7ff ff1e 	bl	8022794 <__multiply>
 8022958:	4639      	mov	r1, r7
 802295a:	4680      	mov	r8, r0
 802295c:	4630      	mov	r0, r6
 802295e:	f7ff fdfd 	bl	802255c <_Bfree>
 8022962:	4647      	mov	r7, r8
 8022964:	106d      	asrs	r5, r5, #1
 8022966:	d00b      	beq.n	8022980 <__pow5mult+0xa0>
 8022968:	6820      	ldr	r0, [r4, #0]
 802296a:	b938      	cbnz	r0, 802297c <__pow5mult+0x9c>
 802296c:	4622      	mov	r2, r4
 802296e:	4621      	mov	r1, r4
 8022970:	4630      	mov	r0, r6
 8022972:	f7ff ff0f 	bl	8022794 <__multiply>
 8022976:	6020      	str	r0, [r4, #0]
 8022978:	f8c0 9000 	str.w	r9, [r0]
 802297c:	4604      	mov	r4, r0
 802297e:	e7e4      	b.n	802294a <__pow5mult+0x6a>
 8022980:	4638      	mov	r0, r7
 8022982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022986:	bf00      	nop
 8022988:	08024368 	.word	0x08024368
 802298c:	0802410e 	.word	0x0802410e
 8022990:	08024214 	.word	0x08024214

08022994 <__lshift>:
 8022994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022998:	460c      	mov	r4, r1
 802299a:	6849      	ldr	r1, [r1, #4]
 802299c:	6923      	ldr	r3, [r4, #16]
 802299e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80229a2:	68a3      	ldr	r3, [r4, #8]
 80229a4:	4607      	mov	r7, r0
 80229a6:	4691      	mov	r9, r2
 80229a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80229ac:	f108 0601 	add.w	r6, r8, #1
 80229b0:	42b3      	cmp	r3, r6
 80229b2:	db0b      	blt.n	80229cc <__lshift+0x38>
 80229b4:	4638      	mov	r0, r7
 80229b6:	f7ff fd91 	bl	80224dc <_Balloc>
 80229ba:	4605      	mov	r5, r0
 80229bc:	b948      	cbnz	r0, 80229d2 <__lshift+0x3e>
 80229be:	4602      	mov	r2, r0
 80229c0:	4b28      	ldr	r3, [pc, #160]	; (8022a64 <__lshift+0xd0>)
 80229c2:	4829      	ldr	r0, [pc, #164]	; (8022a68 <__lshift+0xd4>)
 80229c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80229c8:	f000 fbd6 	bl	8023178 <__assert_func>
 80229cc:	3101      	adds	r1, #1
 80229ce:	005b      	lsls	r3, r3, #1
 80229d0:	e7ee      	b.n	80229b0 <__lshift+0x1c>
 80229d2:	2300      	movs	r3, #0
 80229d4:	f100 0114 	add.w	r1, r0, #20
 80229d8:	f100 0210 	add.w	r2, r0, #16
 80229dc:	4618      	mov	r0, r3
 80229de:	4553      	cmp	r3, sl
 80229e0:	db33      	blt.n	8022a4a <__lshift+0xb6>
 80229e2:	6920      	ldr	r0, [r4, #16]
 80229e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80229e8:	f104 0314 	add.w	r3, r4, #20
 80229ec:	f019 091f 	ands.w	r9, r9, #31
 80229f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80229f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80229f8:	d02b      	beq.n	8022a52 <__lshift+0xbe>
 80229fa:	f1c9 0e20 	rsb	lr, r9, #32
 80229fe:	468a      	mov	sl, r1
 8022a00:	2200      	movs	r2, #0
 8022a02:	6818      	ldr	r0, [r3, #0]
 8022a04:	fa00 f009 	lsl.w	r0, r0, r9
 8022a08:	4302      	orrs	r2, r0
 8022a0a:	f84a 2b04 	str.w	r2, [sl], #4
 8022a0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8022a12:	459c      	cmp	ip, r3
 8022a14:	fa22 f20e 	lsr.w	r2, r2, lr
 8022a18:	d8f3      	bhi.n	8022a02 <__lshift+0x6e>
 8022a1a:	ebac 0304 	sub.w	r3, ip, r4
 8022a1e:	3b15      	subs	r3, #21
 8022a20:	f023 0303 	bic.w	r3, r3, #3
 8022a24:	3304      	adds	r3, #4
 8022a26:	f104 0015 	add.w	r0, r4, #21
 8022a2a:	4584      	cmp	ip, r0
 8022a2c:	bf38      	it	cc
 8022a2e:	2304      	movcc	r3, #4
 8022a30:	50ca      	str	r2, [r1, r3]
 8022a32:	b10a      	cbz	r2, 8022a38 <__lshift+0xa4>
 8022a34:	f108 0602 	add.w	r6, r8, #2
 8022a38:	3e01      	subs	r6, #1
 8022a3a:	4638      	mov	r0, r7
 8022a3c:	612e      	str	r6, [r5, #16]
 8022a3e:	4621      	mov	r1, r4
 8022a40:	f7ff fd8c 	bl	802255c <_Bfree>
 8022a44:	4628      	mov	r0, r5
 8022a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022a4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8022a4e:	3301      	adds	r3, #1
 8022a50:	e7c5      	b.n	80229de <__lshift+0x4a>
 8022a52:	3904      	subs	r1, #4
 8022a54:	f853 2b04 	ldr.w	r2, [r3], #4
 8022a58:	f841 2f04 	str.w	r2, [r1, #4]!
 8022a5c:	459c      	cmp	ip, r3
 8022a5e:	d8f9      	bhi.n	8022a54 <__lshift+0xc0>
 8022a60:	e7ea      	b.n	8022a38 <__lshift+0xa4>
 8022a62:	bf00      	nop
 8022a64:	08024184 	.word	0x08024184
 8022a68:	08024214 	.word	0x08024214

08022a6c <__mcmp>:
 8022a6c:	b530      	push	{r4, r5, lr}
 8022a6e:	6902      	ldr	r2, [r0, #16]
 8022a70:	690c      	ldr	r4, [r1, #16]
 8022a72:	1b12      	subs	r2, r2, r4
 8022a74:	d10e      	bne.n	8022a94 <__mcmp+0x28>
 8022a76:	f100 0314 	add.w	r3, r0, #20
 8022a7a:	3114      	adds	r1, #20
 8022a7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8022a80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8022a84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8022a88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8022a8c:	42a5      	cmp	r5, r4
 8022a8e:	d003      	beq.n	8022a98 <__mcmp+0x2c>
 8022a90:	d305      	bcc.n	8022a9e <__mcmp+0x32>
 8022a92:	2201      	movs	r2, #1
 8022a94:	4610      	mov	r0, r2
 8022a96:	bd30      	pop	{r4, r5, pc}
 8022a98:	4283      	cmp	r3, r0
 8022a9a:	d3f3      	bcc.n	8022a84 <__mcmp+0x18>
 8022a9c:	e7fa      	b.n	8022a94 <__mcmp+0x28>
 8022a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8022aa2:	e7f7      	b.n	8022a94 <__mcmp+0x28>

08022aa4 <__mdiff>:
 8022aa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022aa8:	460c      	mov	r4, r1
 8022aaa:	4606      	mov	r6, r0
 8022aac:	4611      	mov	r1, r2
 8022aae:	4620      	mov	r0, r4
 8022ab0:	4617      	mov	r7, r2
 8022ab2:	f7ff ffdb 	bl	8022a6c <__mcmp>
 8022ab6:	1e05      	subs	r5, r0, #0
 8022ab8:	d110      	bne.n	8022adc <__mdiff+0x38>
 8022aba:	4629      	mov	r1, r5
 8022abc:	4630      	mov	r0, r6
 8022abe:	f7ff fd0d 	bl	80224dc <_Balloc>
 8022ac2:	b930      	cbnz	r0, 8022ad2 <__mdiff+0x2e>
 8022ac4:	4b39      	ldr	r3, [pc, #228]	; (8022bac <__mdiff+0x108>)
 8022ac6:	4602      	mov	r2, r0
 8022ac8:	f240 2132 	movw	r1, #562	; 0x232
 8022acc:	4838      	ldr	r0, [pc, #224]	; (8022bb0 <__mdiff+0x10c>)
 8022ace:	f000 fb53 	bl	8023178 <__assert_func>
 8022ad2:	2301      	movs	r3, #1
 8022ad4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8022ad8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022adc:	bfa4      	itt	ge
 8022ade:	463b      	movge	r3, r7
 8022ae0:	4627      	movge	r7, r4
 8022ae2:	4630      	mov	r0, r6
 8022ae4:	6879      	ldr	r1, [r7, #4]
 8022ae6:	bfa6      	itte	ge
 8022ae8:	461c      	movge	r4, r3
 8022aea:	2500      	movge	r5, #0
 8022aec:	2501      	movlt	r5, #1
 8022aee:	f7ff fcf5 	bl	80224dc <_Balloc>
 8022af2:	b920      	cbnz	r0, 8022afe <__mdiff+0x5a>
 8022af4:	4b2d      	ldr	r3, [pc, #180]	; (8022bac <__mdiff+0x108>)
 8022af6:	4602      	mov	r2, r0
 8022af8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8022afc:	e7e6      	b.n	8022acc <__mdiff+0x28>
 8022afe:	693e      	ldr	r6, [r7, #16]
 8022b00:	60c5      	str	r5, [r0, #12]
 8022b02:	6925      	ldr	r5, [r4, #16]
 8022b04:	f107 0114 	add.w	r1, r7, #20
 8022b08:	f104 0914 	add.w	r9, r4, #20
 8022b0c:	f100 0e14 	add.w	lr, r0, #20
 8022b10:	f107 0210 	add.w	r2, r7, #16
 8022b14:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8022b18:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8022b1c:	46f2      	mov	sl, lr
 8022b1e:	2700      	movs	r7, #0
 8022b20:	f859 3b04 	ldr.w	r3, [r9], #4
 8022b24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8022b28:	fa1f f883 	uxth.w	r8, r3
 8022b2c:	fa17 f78b 	uxtah	r7, r7, fp
 8022b30:	0c1b      	lsrs	r3, r3, #16
 8022b32:	eba7 0808 	sub.w	r8, r7, r8
 8022b36:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8022b3a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8022b3e:	fa1f f888 	uxth.w	r8, r8
 8022b42:	141f      	asrs	r7, r3, #16
 8022b44:	454d      	cmp	r5, r9
 8022b46:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8022b4a:	f84a 3b04 	str.w	r3, [sl], #4
 8022b4e:	d8e7      	bhi.n	8022b20 <__mdiff+0x7c>
 8022b50:	1b2b      	subs	r3, r5, r4
 8022b52:	3b15      	subs	r3, #21
 8022b54:	f023 0303 	bic.w	r3, r3, #3
 8022b58:	3304      	adds	r3, #4
 8022b5a:	3415      	adds	r4, #21
 8022b5c:	42a5      	cmp	r5, r4
 8022b5e:	bf38      	it	cc
 8022b60:	2304      	movcc	r3, #4
 8022b62:	4419      	add	r1, r3
 8022b64:	4473      	add	r3, lr
 8022b66:	469e      	mov	lr, r3
 8022b68:	460d      	mov	r5, r1
 8022b6a:	4565      	cmp	r5, ip
 8022b6c:	d30e      	bcc.n	8022b8c <__mdiff+0xe8>
 8022b6e:	f10c 0203 	add.w	r2, ip, #3
 8022b72:	1a52      	subs	r2, r2, r1
 8022b74:	f022 0203 	bic.w	r2, r2, #3
 8022b78:	3903      	subs	r1, #3
 8022b7a:	458c      	cmp	ip, r1
 8022b7c:	bf38      	it	cc
 8022b7e:	2200      	movcc	r2, #0
 8022b80:	441a      	add	r2, r3
 8022b82:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8022b86:	b17b      	cbz	r3, 8022ba8 <__mdiff+0x104>
 8022b88:	6106      	str	r6, [r0, #16]
 8022b8a:	e7a5      	b.n	8022ad8 <__mdiff+0x34>
 8022b8c:	f855 8b04 	ldr.w	r8, [r5], #4
 8022b90:	fa17 f488 	uxtah	r4, r7, r8
 8022b94:	1422      	asrs	r2, r4, #16
 8022b96:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8022b9a:	b2a4      	uxth	r4, r4
 8022b9c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8022ba0:	f84e 4b04 	str.w	r4, [lr], #4
 8022ba4:	1417      	asrs	r7, r2, #16
 8022ba6:	e7e0      	b.n	8022b6a <__mdiff+0xc6>
 8022ba8:	3e01      	subs	r6, #1
 8022baa:	e7ea      	b.n	8022b82 <__mdiff+0xde>
 8022bac:	08024184 	.word	0x08024184
 8022bb0:	08024214 	.word	0x08024214

08022bb4 <__ulp>:
 8022bb4:	b082      	sub	sp, #8
 8022bb6:	ed8d 0b00 	vstr	d0, [sp]
 8022bba:	9b01      	ldr	r3, [sp, #4]
 8022bbc:	4912      	ldr	r1, [pc, #72]	; (8022c08 <__ulp+0x54>)
 8022bbe:	4019      	ands	r1, r3
 8022bc0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8022bc4:	2900      	cmp	r1, #0
 8022bc6:	dd05      	ble.n	8022bd4 <__ulp+0x20>
 8022bc8:	2200      	movs	r2, #0
 8022bca:	460b      	mov	r3, r1
 8022bcc:	ec43 2b10 	vmov	d0, r2, r3
 8022bd0:	b002      	add	sp, #8
 8022bd2:	4770      	bx	lr
 8022bd4:	4249      	negs	r1, r1
 8022bd6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8022bda:	ea4f 5021 	mov.w	r0, r1, asr #20
 8022bde:	f04f 0200 	mov.w	r2, #0
 8022be2:	f04f 0300 	mov.w	r3, #0
 8022be6:	da04      	bge.n	8022bf2 <__ulp+0x3e>
 8022be8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8022bec:	fa41 f300 	asr.w	r3, r1, r0
 8022bf0:	e7ec      	b.n	8022bcc <__ulp+0x18>
 8022bf2:	f1a0 0114 	sub.w	r1, r0, #20
 8022bf6:	291e      	cmp	r1, #30
 8022bf8:	bfda      	itte	le
 8022bfa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8022bfe:	fa20 f101 	lsrle.w	r1, r0, r1
 8022c02:	2101      	movgt	r1, #1
 8022c04:	460a      	mov	r2, r1
 8022c06:	e7e1      	b.n	8022bcc <__ulp+0x18>
 8022c08:	7ff00000 	.word	0x7ff00000

08022c0c <__b2d>:
 8022c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022c0e:	6905      	ldr	r5, [r0, #16]
 8022c10:	f100 0714 	add.w	r7, r0, #20
 8022c14:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8022c18:	1f2e      	subs	r6, r5, #4
 8022c1a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8022c1e:	4620      	mov	r0, r4
 8022c20:	f7ff fd52 	bl	80226c8 <__hi0bits>
 8022c24:	f1c0 0320 	rsb	r3, r0, #32
 8022c28:	280a      	cmp	r0, #10
 8022c2a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8022ca8 <__b2d+0x9c>
 8022c2e:	600b      	str	r3, [r1, #0]
 8022c30:	dc14      	bgt.n	8022c5c <__b2d+0x50>
 8022c32:	f1c0 0e0b 	rsb	lr, r0, #11
 8022c36:	fa24 f10e 	lsr.w	r1, r4, lr
 8022c3a:	42b7      	cmp	r7, r6
 8022c3c:	ea41 030c 	orr.w	r3, r1, ip
 8022c40:	bf34      	ite	cc
 8022c42:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8022c46:	2100      	movcs	r1, #0
 8022c48:	3015      	adds	r0, #21
 8022c4a:	fa04 f000 	lsl.w	r0, r4, r0
 8022c4e:	fa21 f10e 	lsr.w	r1, r1, lr
 8022c52:	ea40 0201 	orr.w	r2, r0, r1
 8022c56:	ec43 2b10 	vmov	d0, r2, r3
 8022c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022c5c:	42b7      	cmp	r7, r6
 8022c5e:	bf3a      	itte	cc
 8022c60:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8022c64:	f1a5 0608 	subcc.w	r6, r5, #8
 8022c68:	2100      	movcs	r1, #0
 8022c6a:	380b      	subs	r0, #11
 8022c6c:	d017      	beq.n	8022c9e <__b2d+0x92>
 8022c6e:	f1c0 0c20 	rsb	ip, r0, #32
 8022c72:	fa04 f500 	lsl.w	r5, r4, r0
 8022c76:	42be      	cmp	r6, r7
 8022c78:	fa21 f40c 	lsr.w	r4, r1, ip
 8022c7c:	ea45 0504 	orr.w	r5, r5, r4
 8022c80:	bf8c      	ite	hi
 8022c82:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8022c86:	2400      	movls	r4, #0
 8022c88:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8022c8c:	fa01 f000 	lsl.w	r0, r1, r0
 8022c90:	fa24 f40c 	lsr.w	r4, r4, ip
 8022c94:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8022c98:	ea40 0204 	orr.w	r2, r0, r4
 8022c9c:	e7db      	b.n	8022c56 <__b2d+0x4a>
 8022c9e:	ea44 030c 	orr.w	r3, r4, ip
 8022ca2:	460a      	mov	r2, r1
 8022ca4:	e7d7      	b.n	8022c56 <__b2d+0x4a>
 8022ca6:	bf00      	nop
 8022ca8:	3ff00000 	.word	0x3ff00000

08022cac <__d2b>:
 8022cac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8022cb0:	4689      	mov	r9, r1
 8022cb2:	2101      	movs	r1, #1
 8022cb4:	ec57 6b10 	vmov	r6, r7, d0
 8022cb8:	4690      	mov	r8, r2
 8022cba:	f7ff fc0f 	bl	80224dc <_Balloc>
 8022cbe:	4604      	mov	r4, r0
 8022cc0:	b930      	cbnz	r0, 8022cd0 <__d2b+0x24>
 8022cc2:	4602      	mov	r2, r0
 8022cc4:	4b25      	ldr	r3, [pc, #148]	; (8022d5c <__d2b+0xb0>)
 8022cc6:	4826      	ldr	r0, [pc, #152]	; (8022d60 <__d2b+0xb4>)
 8022cc8:	f240 310a 	movw	r1, #778	; 0x30a
 8022ccc:	f000 fa54 	bl	8023178 <__assert_func>
 8022cd0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8022cd4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8022cd8:	bb35      	cbnz	r5, 8022d28 <__d2b+0x7c>
 8022cda:	2e00      	cmp	r6, #0
 8022cdc:	9301      	str	r3, [sp, #4]
 8022cde:	d028      	beq.n	8022d32 <__d2b+0x86>
 8022ce0:	4668      	mov	r0, sp
 8022ce2:	9600      	str	r6, [sp, #0]
 8022ce4:	f7ff fd10 	bl	8022708 <__lo0bits>
 8022ce8:	9900      	ldr	r1, [sp, #0]
 8022cea:	b300      	cbz	r0, 8022d2e <__d2b+0x82>
 8022cec:	9a01      	ldr	r2, [sp, #4]
 8022cee:	f1c0 0320 	rsb	r3, r0, #32
 8022cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8022cf6:	430b      	orrs	r3, r1
 8022cf8:	40c2      	lsrs	r2, r0
 8022cfa:	6163      	str	r3, [r4, #20]
 8022cfc:	9201      	str	r2, [sp, #4]
 8022cfe:	9b01      	ldr	r3, [sp, #4]
 8022d00:	61a3      	str	r3, [r4, #24]
 8022d02:	2b00      	cmp	r3, #0
 8022d04:	bf14      	ite	ne
 8022d06:	2202      	movne	r2, #2
 8022d08:	2201      	moveq	r2, #1
 8022d0a:	6122      	str	r2, [r4, #16]
 8022d0c:	b1d5      	cbz	r5, 8022d44 <__d2b+0x98>
 8022d0e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8022d12:	4405      	add	r5, r0
 8022d14:	f8c9 5000 	str.w	r5, [r9]
 8022d18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8022d1c:	f8c8 0000 	str.w	r0, [r8]
 8022d20:	4620      	mov	r0, r4
 8022d22:	b003      	add	sp, #12
 8022d24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022d28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8022d2c:	e7d5      	b.n	8022cda <__d2b+0x2e>
 8022d2e:	6161      	str	r1, [r4, #20]
 8022d30:	e7e5      	b.n	8022cfe <__d2b+0x52>
 8022d32:	a801      	add	r0, sp, #4
 8022d34:	f7ff fce8 	bl	8022708 <__lo0bits>
 8022d38:	9b01      	ldr	r3, [sp, #4]
 8022d3a:	6163      	str	r3, [r4, #20]
 8022d3c:	2201      	movs	r2, #1
 8022d3e:	6122      	str	r2, [r4, #16]
 8022d40:	3020      	adds	r0, #32
 8022d42:	e7e3      	b.n	8022d0c <__d2b+0x60>
 8022d44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8022d48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8022d4c:	f8c9 0000 	str.w	r0, [r9]
 8022d50:	6918      	ldr	r0, [r3, #16]
 8022d52:	f7ff fcb9 	bl	80226c8 <__hi0bits>
 8022d56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8022d5a:	e7df      	b.n	8022d1c <__d2b+0x70>
 8022d5c:	08024184 	.word	0x08024184
 8022d60:	08024214 	.word	0x08024214

08022d64 <__ratio>:
 8022d64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d68:	4688      	mov	r8, r1
 8022d6a:	4669      	mov	r1, sp
 8022d6c:	4681      	mov	r9, r0
 8022d6e:	f7ff ff4d 	bl	8022c0c <__b2d>
 8022d72:	a901      	add	r1, sp, #4
 8022d74:	4640      	mov	r0, r8
 8022d76:	ec55 4b10 	vmov	r4, r5, d0
 8022d7a:	f7ff ff47 	bl	8022c0c <__b2d>
 8022d7e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8022d82:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8022d86:	eba3 0c02 	sub.w	ip, r3, r2
 8022d8a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8022d8e:	1a9b      	subs	r3, r3, r2
 8022d90:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8022d94:	ec51 0b10 	vmov	r0, r1, d0
 8022d98:	2b00      	cmp	r3, #0
 8022d9a:	bfd6      	itet	le
 8022d9c:	460a      	movle	r2, r1
 8022d9e:	462a      	movgt	r2, r5
 8022da0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8022da4:	468b      	mov	fp, r1
 8022da6:	462f      	mov	r7, r5
 8022da8:	bfd4      	ite	le
 8022daa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8022dae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8022db2:	4620      	mov	r0, r4
 8022db4:	ee10 2a10 	vmov	r2, s0
 8022db8:	465b      	mov	r3, fp
 8022dba:	4639      	mov	r1, r7
 8022dbc:	f7f6 fd46 	bl	801984c <__aeabi_ddiv>
 8022dc0:	ec41 0b10 	vmov	d0, r0, r1
 8022dc4:	b003      	add	sp, #12
 8022dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022dca <__copybits>:
 8022dca:	3901      	subs	r1, #1
 8022dcc:	b570      	push	{r4, r5, r6, lr}
 8022dce:	1149      	asrs	r1, r1, #5
 8022dd0:	6914      	ldr	r4, [r2, #16]
 8022dd2:	3101      	adds	r1, #1
 8022dd4:	f102 0314 	add.w	r3, r2, #20
 8022dd8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8022ddc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8022de0:	1f05      	subs	r5, r0, #4
 8022de2:	42a3      	cmp	r3, r4
 8022de4:	d30c      	bcc.n	8022e00 <__copybits+0x36>
 8022de6:	1aa3      	subs	r3, r4, r2
 8022de8:	3b11      	subs	r3, #17
 8022dea:	f023 0303 	bic.w	r3, r3, #3
 8022dee:	3211      	adds	r2, #17
 8022df0:	42a2      	cmp	r2, r4
 8022df2:	bf88      	it	hi
 8022df4:	2300      	movhi	r3, #0
 8022df6:	4418      	add	r0, r3
 8022df8:	2300      	movs	r3, #0
 8022dfa:	4288      	cmp	r0, r1
 8022dfc:	d305      	bcc.n	8022e0a <__copybits+0x40>
 8022dfe:	bd70      	pop	{r4, r5, r6, pc}
 8022e00:	f853 6b04 	ldr.w	r6, [r3], #4
 8022e04:	f845 6f04 	str.w	r6, [r5, #4]!
 8022e08:	e7eb      	b.n	8022de2 <__copybits+0x18>
 8022e0a:	f840 3b04 	str.w	r3, [r0], #4
 8022e0e:	e7f4      	b.n	8022dfa <__copybits+0x30>

08022e10 <__any_on>:
 8022e10:	f100 0214 	add.w	r2, r0, #20
 8022e14:	6900      	ldr	r0, [r0, #16]
 8022e16:	114b      	asrs	r3, r1, #5
 8022e18:	4298      	cmp	r0, r3
 8022e1a:	b510      	push	{r4, lr}
 8022e1c:	db11      	blt.n	8022e42 <__any_on+0x32>
 8022e1e:	dd0a      	ble.n	8022e36 <__any_on+0x26>
 8022e20:	f011 011f 	ands.w	r1, r1, #31
 8022e24:	d007      	beq.n	8022e36 <__any_on+0x26>
 8022e26:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8022e2a:	fa24 f001 	lsr.w	r0, r4, r1
 8022e2e:	fa00 f101 	lsl.w	r1, r0, r1
 8022e32:	428c      	cmp	r4, r1
 8022e34:	d10b      	bne.n	8022e4e <__any_on+0x3e>
 8022e36:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8022e3a:	4293      	cmp	r3, r2
 8022e3c:	d803      	bhi.n	8022e46 <__any_on+0x36>
 8022e3e:	2000      	movs	r0, #0
 8022e40:	bd10      	pop	{r4, pc}
 8022e42:	4603      	mov	r3, r0
 8022e44:	e7f7      	b.n	8022e36 <__any_on+0x26>
 8022e46:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8022e4a:	2900      	cmp	r1, #0
 8022e4c:	d0f5      	beq.n	8022e3a <__any_on+0x2a>
 8022e4e:	2001      	movs	r0, #1
 8022e50:	e7f6      	b.n	8022e40 <__any_on+0x30>

08022e52 <_calloc_r>:
 8022e52:	b513      	push	{r0, r1, r4, lr}
 8022e54:	434a      	muls	r2, r1
 8022e56:	4611      	mov	r1, r2
 8022e58:	9201      	str	r2, [sp, #4]
 8022e5a:	f7fc fb19 	bl	801f490 <_malloc_r>
 8022e5e:	4604      	mov	r4, r0
 8022e60:	b118      	cbz	r0, 8022e6a <_calloc_r+0x18>
 8022e62:	9a01      	ldr	r2, [sp, #4]
 8022e64:	2100      	movs	r1, #0
 8022e66:	f7fc fabb 	bl	801f3e0 <memset>
 8022e6a:	4620      	mov	r0, r4
 8022e6c:	b002      	add	sp, #8
 8022e6e:	bd10      	pop	{r4, pc}

08022e70 <__ssputs_r>:
 8022e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022e74:	688e      	ldr	r6, [r1, #8]
 8022e76:	429e      	cmp	r6, r3
 8022e78:	4682      	mov	sl, r0
 8022e7a:	460c      	mov	r4, r1
 8022e7c:	4690      	mov	r8, r2
 8022e7e:	461f      	mov	r7, r3
 8022e80:	d838      	bhi.n	8022ef4 <__ssputs_r+0x84>
 8022e82:	898a      	ldrh	r2, [r1, #12]
 8022e84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8022e88:	d032      	beq.n	8022ef0 <__ssputs_r+0x80>
 8022e8a:	6825      	ldr	r5, [r4, #0]
 8022e8c:	6909      	ldr	r1, [r1, #16]
 8022e8e:	eba5 0901 	sub.w	r9, r5, r1
 8022e92:	6965      	ldr	r5, [r4, #20]
 8022e94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022e98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022e9c:	3301      	adds	r3, #1
 8022e9e:	444b      	add	r3, r9
 8022ea0:	106d      	asrs	r5, r5, #1
 8022ea2:	429d      	cmp	r5, r3
 8022ea4:	bf38      	it	cc
 8022ea6:	461d      	movcc	r5, r3
 8022ea8:	0553      	lsls	r3, r2, #21
 8022eaa:	d531      	bpl.n	8022f10 <__ssputs_r+0xa0>
 8022eac:	4629      	mov	r1, r5
 8022eae:	f7fc faef 	bl	801f490 <_malloc_r>
 8022eb2:	4606      	mov	r6, r0
 8022eb4:	b950      	cbnz	r0, 8022ecc <__ssputs_r+0x5c>
 8022eb6:	230c      	movs	r3, #12
 8022eb8:	f8ca 3000 	str.w	r3, [sl]
 8022ebc:	89a3      	ldrh	r3, [r4, #12]
 8022ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022ec2:	81a3      	strh	r3, [r4, #12]
 8022ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8022ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022ecc:	6921      	ldr	r1, [r4, #16]
 8022ece:	464a      	mov	r2, r9
 8022ed0:	f7fc fa5e 	bl	801f390 <memcpy>
 8022ed4:	89a3      	ldrh	r3, [r4, #12]
 8022ed6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8022eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022ede:	81a3      	strh	r3, [r4, #12]
 8022ee0:	6126      	str	r6, [r4, #16]
 8022ee2:	6165      	str	r5, [r4, #20]
 8022ee4:	444e      	add	r6, r9
 8022ee6:	eba5 0509 	sub.w	r5, r5, r9
 8022eea:	6026      	str	r6, [r4, #0]
 8022eec:	60a5      	str	r5, [r4, #8]
 8022eee:	463e      	mov	r6, r7
 8022ef0:	42be      	cmp	r6, r7
 8022ef2:	d900      	bls.n	8022ef6 <__ssputs_r+0x86>
 8022ef4:	463e      	mov	r6, r7
 8022ef6:	4632      	mov	r2, r6
 8022ef8:	6820      	ldr	r0, [r4, #0]
 8022efa:	4641      	mov	r1, r8
 8022efc:	f7fc fa56 	bl	801f3ac <memmove>
 8022f00:	68a3      	ldr	r3, [r4, #8]
 8022f02:	6822      	ldr	r2, [r4, #0]
 8022f04:	1b9b      	subs	r3, r3, r6
 8022f06:	4432      	add	r2, r6
 8022f08:	60a3      	str	r3, [r4, #8]
 8022f0a:	6022      	str	r2, [r4, #0]
 8022f0c:	2000      	movs	r0, #0
 8022f0e:	e7db      	b.n	8022ec8 <__ssputs_r+0x58>
 8022f10:	462a      	mov	r2, r5
 8022f12:	f000 f964 	bl	80231de <_realloc_r>
 8022f16:	4606      	mov	r6, r0
 8022f18:	2800      	cmp	r0, #0
 8022f1a:	d1e1      	bne.n	8022ee0 <__ssputs_r+0x70>
 8022f1c:	6921      	ldr	r1, [r4, #16]
 8022f1e:	4650      	mov	r0, sl
 8022f20:	f7fc fa66 	bl	801f3f0 <_free_r>
 8022f24:	e7c7      	b.n	8022eb6 <__ssputs_r+0x46>
	...

08022f28 <_svfiprintf_r>:
 8022f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f2c:	4698      	mov	r8, r3
 8022f2e:	898b      	ldrh	r3, [r1, #12]
 8022f30:	061b      	lsls	r3, r3, #24
 8022f32:	b09d      	sub	sp, #116	; 0x74
 8022f34:	4607      	mov	r7, r0
 8022f36:	460d      	mov	r5, r1
 8022f38:	4614      	mov	r4, r2
 8022f3a:	d50e      	bpl.n	8022f5a <_svfiprintf_r+0x32>
 8022f3c:	690b      	ldr	r3, [r1, #16]
 8022f3e:	b963      	cbnz	r3, 8022f5a <_svfiprintf_r+0x32>
 8022f40:	2140      	movs	r1, #64	; 0x40
 8022f42:	f7fc faa5 	bl	801f490 <_malloc_r>
 8022f46:	6028      	str	r0, [r5, #0]
 8022f48:	6128      	str	r0, [r5, #16]
 8022f4a:	b920      	cbnz	r0, 8022f56 <_svfiprintf_r+0x2e>
 8022f4c:	230c      	movs	r3, #12
 8022f4e:	603b      	str	r3, [r7, #0]
 8022f50:	f04f 30ff 	mov.w	r0, #4294967295
 8022f54:	e0d1      	b.n	80230fa <_svfiprintf_r+0x1d2>
 8022f56:	2340      	movs	r3, #64	; 0x40
 8022f58:	616b      	str	r3, [r5, #20]
 8022f5a:	2300      	movs	r3, #0
 8022f5c:	9309      	str	r3, [sp, #36]	; 0x24
 8022f5e:	2320      	movs	r3, #32
 8022f60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022f64:	f8cd 800c 	str.w	r8, [sp, #12]
 8022f68:	2330      	movs	r3, #48	; 0x30
 8022f6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8023114 <_svfiprintf_r+0x1ec>
 8022f6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022f72:	f04f 0901 	mov.w	r9, #1
 8022f76:	4623      	mov	r3, r4
 8022f78:	469a      	mov	sl, r3
 8022f7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022f7e:	b10a      	cbz	r2, 8022f84 <_svfiprintf_r+0x5c>
 8022f80:	2a25      	cmp	r2, #37	; 0x25
 8022f82:	d1f9      	bne.n	8022f78 <_svfiprintf_r+0x50>
 8022f84:	ebba 0b04 	subs.w	fp, sl, r4
 8022f88:	d00b      	beq.n	8022fa2 <_svfiprintf_r+0x7a>
 8022f8a:	465b      	mov	r3, fp
 8022f8c:	4622      	mov	r2, r4
 8022f8e:	4629      	mov	r1, r5
 8022f90:	4638      	mov	r0, r7
 8022f92:	f7ff ff6d 	bl	8022e70 <__ssputs_r>
 8022f96:	3001      	adds	r0, #1
 8022f98:	f000 80aa 	beq.w	80230f0 <_svfiprintf_r+0x1c8>
 8022f9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022f9e:	445a      	add	r2, fp
 8022fa0:	9209      	str	r2, [sp, #36]	; 0x24
 8022fa2:	f89a 3000 	ldrb.w	r3, [sl]
 8022fa6:	2b00      	cmp	r3, #0
 8022fa8:	f000 80a2 	beq.w	80230f0 <_svfiprintf_r+0x1c8>
 8022fac:	2300      	movs	r3, #0
 8022fae:	f04f 32ff 	mov.w	r2, #4294967295
 8022fb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022fb6:	f10a 0a01 	add.w	sl, sl, #1
 8022fba:	9304      	str	r3, [sp, #16]
 8022fbc:	9307      	str	r3, [sp, #28]
 8022fbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022fc2:	931a      	str	r3, [sp, #104]	; 0x68
 8022fc4:	4654      	mov	r4, sl
 8022fc6:	2205      	movs	r2, #5
 8022fc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022fcc:	4851      	ldr	r0, [pc, #324]	; (8023114 <_svfiprintf_r+0x1ec>)
 8022fce:	f7f6 f8ff 	bl	80191d0 <memchr>
 8022fd2:	9a04      	ldr	r2, [sp, #16]
 8022fd4:	b9d8      	cbnz	r0, 802300e <_svfiprintf_r+0xe6>
 8022fd6:	06d0      	lsls	r0, r2, #27
 8022fd8:	bf44      	itt	mi
 8022fda:	2320      	movmi	r3, #32
 8022fdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022fe0:	0711      	lsls	r1, r2, #28
 8022fe2:	bf44      	itt	mi
 8022fe4:	232b      	movmi	r3, #43	; 0x2b
 8022fe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022fea:	f89a 3000 	ldrb.w	r3, [sl]
 8022fee:	2b2a      	cmp	r3, #42	; 0x2a
 8022ff0:	d015      	beq.n	802301e <_svfiprintf_r+0xf6>
 8022ff2:	9a07      	ldr	r2, [sp, #28]
 8022ff4:	4654      	mov	r4, sl
 8022ff6:	2000      	movs	r0, #0
 8022ff8:	f04f 0c0a 	mov.w	ip, #10
 8022ffc:	4621      	mov	r1, r4
 8022ffe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023002:	3b30      	subs	r3, #48	; 0x30
 8023004:	2b09      	cmp	r3, #9
 8023006:	d94e      	bls.n	80230a6 <_svfiprintf_r+0x17e>
 8023008:	b1b0      	cbz	r0, 8023038 <_svfiprintf_r+0x110>
 802300a:	9207      	str	r2, [sp, #28]
 802300c:	e014      	b.n	8023038 <_svfiprintf_r+0x110>
 802300e:	eba0 0308 	sub.w	r3, r0, r8
 8023012:	fa09 f303 	lsl.w	r3, r9, r3
 8023016:	4313      	orrs	r3, r2
 8023018:	9304      	str	r3, [sp, #16]
 802301a:	46a2      	mov	sl, r4
 802301c:	e7d2      	b.n	8022fc4 <_svfiprintf_r+0x9c>
 802301e:	9b03      	ldr	r3, [sp, #12]
 8023020:	1d19      	adds	r1, r3, #4
 8023022:	681b      	ldr	r3, [r3, #0]
 8023024:	9103      	str	r1, [sp, #12]
 8023026:	2b00      	cmp	r3, #0
 8023028:	bfbb      	ittet	lt
 802302a:	425b      	neglt	r3, r3
 802302c:	f042 0202 	orrlt.w	r2, r2, #2
 8023030:	9307      	strge	r3, [sp, #28]
 8023032:	9307      	strlt	r3, [sp, #28]
 8023034:	bfb8      	it	lt
 8023036:	9204      	strlt	r2, [sp, #16]
 8023038:	7823      	ldrb	r3, [r4, #0]
 802303a:	2b2e      	cmp	r3, #46	; 0x2e
 802303c:	d10c      	bne.n	8023058 <_svfiprintf_r+0x130>
 802303e:	7863      	ldrb	r3, [r4, #1]
 8023040:	2b2a      	cmp	r3, #42	; 0x2a
 8023042:	d135      	bne.n	80230b0 <_svfiprintf_r+0x188>
 8023044:	9b03      	ldr	r3, [sp, #12]
 8023046:	1d1a      	adds	r2, r3, #4
 8023048:	681b      	ldr	r3, [r3, #0]
 802304a:	9203      	str	r2, [sp, #12]
 802304c:	2b00      	cmp	r3, #0
 802304e:	bfb8      	it	lt
 8023050:	f04f 33ff 	movlt.w	r3, #4294967295
 8023054:	3402      	adds	r4, #2
 8023056:	9305      	str	r3, [sp, #20]
 8023058:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8023124 <_svfiprintf_r+0x1fc>
 802305c:	7821      	ldrb	r1, [r4, #0]
 802305e:	2203      	movs	r2, #3
 8023060:	4650      	mov	r0, sl
 8023062:	f7f6 f8b5 	bl	80191d0 <memchr>
 8023066:	b140      	cbz	r0, 802307a <_svfiprintf_r+0x152>
 8023068:	2340      	movs	r3, #64	; 0x40
 802306a:	eba0 000a 	sub.w	r0, r0, sl
 802306e:	fa03 f000 	lsl.w	r0, r3, r0
 8023072:	9b04      	ldr	r3, [sp, #16]
 8023074:	4303      	orrs	r3, r0
 8023076:	3401      	adds	r4, #1
 8023078:	9304      	str	r3, [sp, #16]
 802307a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802307e:	4826      	ldr	r0, [pc, #152]	; (8023118 <_svfiprintf_r+0x1f0>)
 8023080:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023084:	2206      	movs	r2, #6
 8023086:	f7f6 f8a3 	bl	80191d0 <memchr>
 802308a:	2800      	cmp	r0, #0
 802308c:	d038      	beq.n	8023100 <_svfiprintf_r+0x1d8>
 802308e:	4b23      	ldr	r3, [pc, #140]	; (802311c <_svfiprintf_r+0x1f4>)
 8023090:	bb1b      	cbnz	r3, 80230da <_svfiprintf_r+0x1b2>
 8023092:	9b03      	ldr	r3, [sp, #12]
 8023094:	3307      	adds	r3, #7
 8023096:	f023 0307 	bic.w	r3, r3, #7
 802309a:	3308      	adds	r3, #8
 802309c:	9303      	str	r3, [sp, #12]
 802309e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80230a0:	4433      	add	r3, r6
 80230a2:	9309      	str	r3, [sp, #36]	; 0x24
 80230a4:	e767      	b.n	8022f76 <_svfiprintf_r+0x4e>
 80230a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80230aa:	460c      	mov	r4, r1
 80230ac:	2001      	movs	r0, #1
 80230ae:	e7a5      	b.n	8022ffc <_svfiprintf_r+0xd4>
 80230b0:	2300      	movs	r3, #0
 80230b2:	3401      	adds	r4, #1
 80230b4:	9305      	str	r3, [sp, #20]
 80230b6:	4619      	mov	r1, r3
 80230b8:	f04f 0c0a 	mov.w	ip, #10
 80230bc:	4620      	mov	r0, r4
 80230be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80230c2:	3a30      	subs	r2, #48	; 0x30
 80230c4:	2a09      	cmp	r2, #9
 80230c6:	d903      	bls.n	80230d0 <_svfiprintf_r+0x1a8>
 80230c8:	2b00      	cmp	r3, #0
 80230ca:	d0c5      	beq.n	8023058 <_svfiprintf_r+0x130>
 80230cc:	9105      	str	r1, [sp, #20]
 80230ce:	e7c3      	b.n	8023058 <_svfiprintf_r+0x130>
 80230d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80230d4:	4604      	mov	r4, r0
 80230d6:	2301      	movs	r3, #1
 80230d8:	e7f0      	b.n	80230bc <_svfiprintf_r+0x194>
 80230da:	ab03      	add	r3, sp, #12
 80230dc:	9300      	str	r3, [sp, #0]
 80230de:	462a      	mov	r2, r5
 80230e0:	4b0f      	ldr	r3, [pc, #60]	; (8023120 <_svfiprintf_r+0x1f8>)
 80230e2:	a904      	add	r1, sp, #16
 80230e4:	4638      	mov	r0, r7
 80230e6:	f7fc facd 	bl	801f684 <_printf_float>
 80230ea:	1c42      	adds	r2, r0, #1
 80230ec:	4606      	mov	r6, r0
 80230ee:	d1d6      	bne.n	802309e <_svfiprintf_r+0x176>
 80230f0:	89ab      	ldrh	r3, [r5, #12]
 80230f2:	065b      	lsls	r3, r3, #25
 80230f4:	f53f af2c 	bmi.w	8022f50 <_svfiprintf_r+0x28>
 80230f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80230fa:	b01d      	add	sp, #116	; 0x74
 80230fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023100:	ab03      	add	r3, sp, #12
 8023102:	9300      	str	r3, [sp, #0]
 8023104:	462a      	mov	r2, r5
 8023106:	4b06      	ldr	r3, [pc, #24]	; (8023120 <_svfiprintf_r+0x1f8>)
 8023108:	a904      	add	r1, sp, #16
 802310a:	4638      	mov	r0, r7
 802310c:	f7fc fd5e 	bl	801fbcc <_printf_i>
 8023110:	e7eb      	b.n	80230ea <_svfiprintf_r+0x1c2>
 8023112:	bf00      	nop
 8023114:	08024374 	.word	0x08024374
 8023118:	0802437e 	.word	0x0802437e
 802311c:	0801f685 	.word	0x0801f685
 8023120:	08022e71 	.word	0x08022e71
 8023124:	0802437a 	.word	0x0802437a

08023128 <nan>:
 8023128:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8023130 <nan+0x8>
 802312c:	4770      	bx	lr
 802312e:	bf00      	nop
 8023130:	00000000 	.word	0x00000000
 8023134:	7ff80000 	.word	0x7ff80000

08023138 <strncmp>:
 8023138:	b510      	push	{r4, lr}
 802313a:	b16a      	cbz	r2, 8023158 <strncmp+0x20>
 802313c:	3901      	subs	r1, #1
 802313e:	1884      	adds	r4, r0, r2
 8023140:	f810 3b01 	ldrb.w	r3, [r0], #1
 8023144:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8023148:	4293      	cmp	r3, r2
 802314a:	d103      	bne.n	8023154 <strncmp+0x1c>
 802314c:	42a0      	cmp	r0, r4
 802314e:	d001      	beq.n	8023154 <strncmp+0x1c>
 8023150:	2b00      	cmp	r3, #0
 8023152:	d1f5      	bne.n	8023140 <strncmp+0x8>
 8023154:	1a98      	subs	r0, r3, r2
 8023156:	bd10      	pop	{r4, pc}
 8023158:	4610      	mov	r0, r2
 802315a:	e7fc      	b.n	8023156 <strncmp+0x1e>

0802315c <__ascii_wctomb>:
 802315c:	b149      	cbz	r1, 8023172 <__ascii_wctomb+0x16>
 802315e:	2aff      	cmp	r2, #255	; 0xff
 8023160:	bf85      	ittet	hi
 8023162:	238a      	movhi	r3, #138	; 0x8a
 8023164:	6003      	strhi	r3, [r0, #0]
 8023166:	700a      	strbls	r2, [r1, #0]
 8023168:	f04f 30ff 	movhi.w	r0, #4294967295
 802316c:	bf98      	it	ls
 802316e:	2001      	movls	r0, #1
 8023170:	4770      	bx	lr
 8023172:	4608      	mov	r0, r1
 8023174:	4770      	bx	lr
	...

08023178 <__assert_func>:
 8023178:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802317a:	4614      	mov	r4, r2
 802317c:	461a      	mov	r2, r3
 802317e:	4b09      	ldr	r3, [pc, #36]	; (80231a4 <__assert_func+0x2c>)
 8023180:	681b      	ldr	r3, [r3, #0]
 8023182:	4605      	mov	r5, r0
 8023184:	68d8      	ldr	r0, [r3, #12]
 8023186:	b14c      	cbz	r4, 802319c <__assert_func+0x24>
 8023188:	4b07      	ldr	r3, [pc, #28]	; (80231a8 <__assert_func+0x30>)
 802318a:	9100      	str	r1, [sp, #0]
 802318c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8023190:	4906      	ldr	r1, [pc, #24]	; (80231ac <__assert_func+0x34>)
 8023192:	462b      	mov	r3, r5
 8023194:	f000 f80e 	bl	80231b4 <fiprintf>
 8023198:	f7fc f8b8 	bl	801f30c <abort>
 802319c:	4b04      	ldr	r3, [pc, #16]	; (80231b0 <__assert_func+0x38>)
 802319e:	461c      	mov	r4, r3
 80231a0:	e7f3      	b.n	802318a <__assert_func+0x12>
 80231a2:	bf00      	nop
 80231a4:	20000030 	.word	0x20000030
 80231a8:	08024385 	.word	0x08024385
 80231ac:	08024392 	.word	0x08024392
 80231b0:	080243c0 	.word	0x080243c0

080231b4 <fiprintf>:
 80231b4:	b40e      	push	{r1, r2, r3}
 80231b6:	b503      	push	{r0, r1, lr}
 80231b8:	4601      	mov	r1, r0
 80231ba:	ab03      	add	r3, sp, #12
 80231bc:	4805      	ldr	r0, [pc, #20]	; (80231d4 <fiprintf+0x20>)
 80231be:	f853 2b04 	ldr.w	r2, [r3], #4
 80231c2:	6800      	ldr	r0, [r0, #0]
 80231c4:	9301      	str	r3, [sp, #4]
 80231c6:	f000 f859 	bl	802327c <_vfiprintf_r>
 80231ca:	b002      	add	sp, #8
 80231cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80231d0:	b003      	add	sp, #12
 80231d2:	4770      	bx	lr
 80231d4:	20000030 	.word	0x20000030

080231d8 <__retarget_lock_init_recursive>:
 80231d8:	4770      	bx	lr

080231da <__retarget_lock_acquire_recursive>:
 80231da:	4770      	bx	lr

080231dc <__retarget_lock_release_recursive>:
 80231dc:	4770      	bx	lr

080231de <_realloc_r>:
 80231de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80231e0:	4607      	mov	r7, r0
 80231e2:	4614      	mov	r4, r2
 80231e4:	460e      	mov	r6, r1
 80231e6:	b921      	cbnz	r1, 80231f2 <_realloc_r+0x14>
 80231e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80231ec:	4611      	mov	r1, r2
 80231ee:	f7fc b94f 	b.w	801f490 <_malloc_r>
 80231f2:	b922      	cbnz	r2, 80231fe <_realloc_r+0x20>
 80231f4:	f7fc f8fc 	bl	801f3f0 <_free_r>
 80231f8:	4625      	mov	r5, r4
 80231fa:	4628      	mov	r0, r5
 80231fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80231fe:	f000 fc49 	bl	8023a94 <_malloc_usable_size_r>
 8023202:	42a0      	cmp	r0, r4
 8023204:	d20f      	bcs.n	8023226 <_realloc_r+0x48>
 8023206:	4621      	mov	r1, r4
 8023208:	4638      	mov	r0, r7
 802320a:	f7fc f941 	bl	801f490 <_malloc_r>
 802320e:	4605      	mov	r5, r0
 8023210:	2800      	cmp	r0, #0
 8023212:	d0f2      	beq.n	80231fa <_realloc_r+0x1c>
 8023214:	4631      	mov	r1, r6
 8023216:	4622      	mov	r2, r4
 8023218:	f7fc f8ba 	bl	801f390 <memcpy>
 802321c:	4631      	mov	r1, r6
 802321e:	4638      	mov	r0, r7
 8023220:	f7fc f8e6 	bl	801f3f0 <_free_r>
 8023224:	e7e9      	b.n	80231fa <_realloc_r+0x1c>
 8023226:	4635      	mov	r5, r6
 8023228:	e7e7      	b.n	80231fa <_realloc_r+0x1c>

0802322a <__sfputc_r>:
 802322a:	6893      	ldr	r3, [r2, #8]
 802322c:	3b01      	subs	r3, #1
 802322e:	2b00      	cmp	r3, #0
 8023230:	b410      	push	{r4}
 8023232:	6093      	str	r3, [r2, #8]
 8023234:	da08      	bge.n	8023248 <__sfputc_r+0x1e>
 8023236:	6994      	ldr	r4, [r2, #24]
 8023238:	42a3      	cmp	r3, r4
 802323a:	db01      	blt.n	8023240 <__sfputc_r+0x16>
 802323c:	290a      	cmp	r1, #10
 802323e:	d103      	bne.n	8023248 <__sfputc_r+0x1e>
 8023240:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023244:	f000 b94a 	b.w	80234dc <__swbuf_r>
 8023248:	6813      	ldr	r3, [r2, #0]
 802324a:	1c58      	adds	r0, r3, #1
 802324c:	6010      	str	r0, [r2, #0]
 802324e:	7019      	strb	r1, [r3, #0]
 8023250:	4608      	mov	r0, r1
 8023252:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023256:	4770      	bx	lr

08023258 <__sfputs_r>:
 8023258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802325a:	4606      	mov	r6, r0
 802325c:	460f      	mov	r7, r1
 802325e:	4614      	mov	r4, r2
 8023260:	18d5      	adds	r5, r2, r3
 8023262:	42ac      	cmp	r4, r5
 8023264:	d101      	bne.n	802326a <__sfputs_r+0x12>
 8023266:	2000      	movs	r0, #0
 8023268:	e007      	b.n	802327a <__sfputs_r+0x22>
 802326a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802326e:	463a      	mov	r2, r7
 8023270:	4630      	mov	r0, r6
 8023272:	f7ff ffda 	bl	802322a <__sfputc_r>
 8023276:	1c43      	adds	r3, r0, #1
 8023278:	d1f3      	bne.n	8023262 <__sfputs_r+0xa>
 802327a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802327c <_vfiprintf_r>:
 802327c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023280:	460d      	mov	r5, r1
 8023282:	b09d      	sub	sp, #116	; 0x74
 8023284:	4614      	mov	r4, r2
 8023286:	4698      	mov	r8, r3
 8023288:	4606      	mov	r6, r0
 802328a:	b118      	cbz	r0, 8023294 <_vfiprintf_r+0x18>
 802328c:	6983      	ldr	r3, [r0, #24]
 802328e:	b90b      	cbnz	r3, 8023294 <_vfiprintf_r+0x18>
 8023290:	f000 fafe 	bl	8023890 <__sinit>
 8023294:	4b89      	ldr	r3, [pc, #548]	; (80234bc <_vfiprintf_r+0x240>)
 8023296:	429d      	cmp	r5, r3
 8023298:	d11b      	bne.n	80232d2 <_vfiprintf_r+0x56>
 802329a:	6875      	ldr	r5, [r6, #4]
 802329c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802329e:	07d9      	lsls	r1, r3, #31
 80232a0:	d405      	bmi.n	80232ae <_vfiprintf_r+0x32>
 80232a2:	89ab      	ldrh	r3, [r5, #12]
 80232a4:	059a      	lsls	r2, r3, #22
 80232a6:	d402      	bmi.n	80232ae <_vfiprintf_r+0x32>
 80232a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80232aa:	f7ff ff96 	bl	80231da <__retarget_lock_acquire_recursive>
 80232ae:	89ab      	ldrh	r3, [r5, #12]
 80232b0:	071b      	lsls	r3, r3, #28
 80232b2:	d501      	bpl.n	80232b8 <_vfiprintf_r+0x3c>
 80232b4:	692b      	ldr	r3, [r5, #16]
 80232b6:	b9eb      	cbnz	r3, 80232f4 <_vfiprintf_r+0x78>
 80232b8:	4629      	mov	r1, r5
 80232ba:	4630      	mov	r0, r6
 80232bc:	f000 f960 	bl	8023580 <__swsetup_r>
 80232c0:	b1c0      	cbz	r0, 80232f4 <_vfiprintf_r+0x78>
 80232c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80232c4:	07dc      	lsls	r4, r3, #31
 80232c6:	d50e      	bpl.n	80232e6 <_vfiprintf_r+0x6a>
 80232c8:	f04f 30ff 	mov.w	r0, #4294967295
 80232cc:	b01d      	add	sp, #116	; 0x74
 80232ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232d2:	4b7b      	ldr	r3, [pc, #492]	; (80234c0 <_vfiprintf_r+0x244>)
 80232d4:	429d      	cmp	r5, r3
 80232d6:	d101      	bne.n	80232dc <_vfiprintf_r+0x60>
 80232d8:	68b5      	ldr	r5, [r6, #8]
 80232da:	e7df      	b.n	802329c <_vfiprintf_r+0x20>
 80232dc:	4b79      	ldr	r3, [pc, #484]	; (80234c4 <_vfiprintf_r+0x248>)
 80232de:	429d      	cmp	r5, r3
 80232e0:	bf08      	it	eq
 80232e2:	68f5      	ldreq	r5, [r6, #12]
 80232e4:	e7da      	b.n	802329c <_vfiprintf_r+0x20>
 80232e6:	89ab      	ldrh	r3, [r5, #12]
 80232e8:	0598      	lsls	r0, r3, #22
 80232ea:	d4ed      	bmi.n	80232c8 <_vfiprintf_r+0x4c>
 80232ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80232ee:	f7ff ff75 	bl	80231dc <__retarget_lock_release_recursive>
 80232f2:	e7e9      	b.n	80232c8 <_vfiprintf_r+0x4c>
 80232f4:	2300      	movs	r3, #0
 80232f6:	9309      	str	r3, [sp, #36]	; 0x24
 80232f8:	2320      	movs	r3, #32
 80232fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80232fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8023302:	2330      	movs	r3, #48	; 0x30
 8023304:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80234c8 <_vfiprintf_r+0x24c>
 8023308:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802330c:	f04f 0901 	mov.w	r9, #1
 8023310:	4623      	mov	r3, r4
 8023312:	469a      	mov	sl, r3
 8023314:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023318:	b10a      	cbz	r2, 802331e <_vfiprintf_r+0xa2>
 802331a:	2a25      	cmp	r2, #37	; 0x25
 802331c:	d1f9      	bne.n	8023312 <_vfiprintf_r+0x96>
 802331e:	ebba 0b04 	subs.w	fp, sl, r4
 8023322:	d00b      	beq.n	802333c <_vfiprintf_r+0xc0>
 8023324:	465b      	mov	r3, fp
 8023326:	4622      	mov	r2, r4
 8023328:	4629      	mov	r1, r5
 802332a:	4630      	mov	r0, r6
 802332c:	f7ff ff94 	bl	8023258 <__sfputs_r>
 8023330:	3001      	adds	r0, #1
 8023332:	f000 80aa 	beq.w	802348a <_vfiprintf_r+0x20e>
 8023336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023338:	445a      	add	r2, fp
 802333a:	9209      	str	r2, [sp, #36]	; 0x24
 802333c:	f89a 3000 	ldrb.w	r3, [sl]
 8023340:	2b00      	cmp	r3, #0
 8023342:	f000 80a2 	beq.w	802348a <_vfiprintf_r+0x20e>
 8023346:	2300      	movs	r3, #0
 8023348:	f04f 32ff 	mov.w	r2, #4294967295
 802334c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023350:	f10a 0a01 	add.w	sl, sl, #1
 8023354:	9304      	str	r3, [sp, #16]
 8023356:	9307      	str	r3, [sp, #28]
 8023358:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802335c:	931a      	str	r3, [sp, #104]	; 0x68
 802335e:	4654      	mov	r4, sl
 8023360:	2205      	movs	r2, #5
 8023362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023366:	4858      	ldr	r0, [pc, #352]	; (80234c8 <_vfiprintf_r+0x24c>)
 8023368:	f7f5 ff32 	bl	80191d0 <memchr>
 802336c:	9a04      	ldr	r2, [sp, #16]
 802336e:	b9d8      	cbnz	r0, 80233a8 <_vfiprintf_r+0x12c>
 8023370:	06d1      	lsls	r1, r2, #27
 8023372:	bf44      	itt	mi
 8023374:	2320      	movmi	r3, #32
 8023376:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802337a:	0713      	lsls	r3, r2, #28
 802337c:	bf44      	itt	mi
 802337e:	232b      	movmi	r3, #43	; 0x2b
 8023380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023384:	f89a 3000 	ldrb.w	r3, [sl]
 8023388:	2b2a      	cmp	r3, #42	; 0x2a
 802338a:	d015      	beq.n	80233b8 <_vfiprintf_r+0x13c>
 802338c:	9a07      	ldr	r2, [sp, #28]
 802338e:	4654      	mov	r4, sl
 8023390:	2000      	movs	r0, #0
 8023392:	f04f 0c0a 	mov.w	ip, #10
 8023396:	4621      	mov	r1, r4
 8023398:	f811 3b01 	ldrb.w	r3, [r1], #1
 802339c:	3b30      	subs	r3, #48	; 0x30
 802339e:	2b09      	cmp	r3, #9
 80233a0:	d94e      	bls.n	8023440 <_vfiprintf_r+0x1c4>
 80233a2:	b1b0      	cbz	r0, 80233d2 <_vfiprintf_r+0x156>
 80233a4:	9207      	str	r2, [sp, #28]
 80233a6:	e014      	b.n	80233d2 <_vfiprintf_r+0x156>
 80233a8:	eba0 0308 	sub.w	r3, r0, r8
 80233ac:	fa09 f303 	lsl.w	r3, r9, r3
 80233b0:	4313      	orrs	r3, r2
 80233b2:	9304      	str	r3, [sp, #16]
 80233b4:	46a2      	mov	sl, r4
 80233b6:	e7d2      	b.n	802335e <_vfiprintf_r+0xe2>
 80233b8:	9b03      	ldr	r3, [sp, #12]
 80233ba:	1d19      	adds	r1, r3, #4
 80233bc:	681b      	ldr	r3, [r3, #0]
 80233be:	9103      	str	r1, [sp, #12]
 80233c0:	2b00      	cmp	r3, #0
 80233c2:	bfbb      	ittet	lt
 80233c4:	425b      	neglt	r3, r3
 80233c6:	f042 0202 	orrlt.w	r2, r2, #2
 80233ca:	9307      	strge	r3, [sp, #28]
 80233cc:	9307      	strlt	r3, [sp, #28]
 80233ce:	bfb8      	it	lt
 80233d0:	9204      	strlt	r2, [sp, #16]
 80233d2:	7823      	ldrb	r3, [r4, #0]
 80233d4:	2b2e      	cmp	r3, #46	; 0x2e
 80233d6:	d10c      	bne.n	80233f2 <_vfiprintf_r+0x176>
 80233d8:	7863      	ldrb	r3, [r4, #1]
 80233da:	2b2a      	cmp	r3, #42	; 0x2a
 80233dc:	d135      	bne.n	802344a <_vfiprintf_r+0x1ce>
 80233de:	9b03      	ldr	r3, [sp, #12]
 80233e0:	1d1a      	adds	r2, r3, #4
 80233e2:	681b      	ldr	r3, [r3, #0]
 80233e4:	9203      	str	r2, [sp, #12]
 80233e6:	2b00      	cmp	r3, #0
 80233e8:	bfb8      	it	lt
 80233ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80233ee:	3402      	adds	r4, #2
 80233f0:	9305      	str	r3, [sp, #20]
 80233f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80234d8 <_vfiprintf_r+0x25c>
 80233f6:	7821      	ldrb	r1, [r4, #0]
 80233f8:	2203      	movs	r2, #3
 80233fa:	4650      	mov	r0, sl
 80233fc:	f7f5 fee8 	bl	80191d0 <memchr>
 8023400:	b140      	cbz	r0, 8023414 <_vfiprintf_r+0x198>
 8023402:	2340      	movs	r3, #64	; 0x40
 8023404:	eba0 000a 	sub.w	r0, r0, sl
 8023408:	fa03 f000 	lsl.w	r0, r3, r0
 802340c:	9b04      	ldr	r3, [sp, #16]
 802340e:	4303      	orrs	r3, r0
 8023410:	3401      	adds	r4, #1
 8023412:	9304      	str	r3, [sp, #16]
 8023414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023418:	482c      	ldr	r0, [pc, #176]	; (80234cc <_vfiprintf_r+0x250>)
 802341a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802341e:	2206      	movs	r2, #6
 8023420:	f7f5 fed6 	bl	80191d0 <memchr>
 8023424:	2800      	cmp	r0, #0
 8023426:	d03f      	beq.n	80234a8 <_vfiprintf_r+0x22c>
 8023428:	4b29      	ldr	r3, [pc, #164]	; (80234d0 <_vfiprintf_r+0x254>)
 802342a:	bb1b      	cbnz	r3, 8023474 <_vfiprintf_r+0x1f8>
 802342c:	9b03      	ldr	r3, [sp, #12]
 802342e:	3307      	adds	r3, #7
 8023430:	f023 0307 	bic.w	r3, r3, #7
 8023434:	3308      	adds	r3, #8
 8023436:	9303      	str	r3, [sp, #12]
 8023438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802343a:	443b      	add	r3, r7
 802343c:	9309      	str	r3, [sp, #36]	; 0x24
 802343e:	e767      	b.n	8023310 <_vfiprintf_r+0x94>
 8023440:	fb0c 3202 	mla	r2, ip, r2, r3
 8023444:	460c      	mov	r4, r1
 8023446:	2001      	movs	r0, #1
 8023448:	e7a5      	b.n	8023396 <_vfiprintf_r+0x11a>
 802344a:	2300      	movs	r3, #0
 802344c:	3401      	adds	r4, #1
 802344e:	9305      	str	r3, [sp, #20]
 8023450:	4619      	mov	r1, r3
 8023452:	f04f 0c0a 	mov.w	ip, #10
 8023456:	4620      	mov	r0, r4
 8023458:	f810 2b01 	ldrb.w	r2, [r0], #1
 802345c:	3a30      	subs	r2, #48	; 0x30
 802345e:	2a09      	cmp	r2, #9
 8023460:	d903      	bls.n	802346a <_vfiprintf_r+0x1ee>
 8023462:	2b00      	cmp	r3, #0
 8023464:	d0c5      	beq.n	80233f2 <_vfiprintf_r+0x176>
 8023466:	9105      	str	r1, [sp, #20]
 8023468:	e7c3      	b.n	80233f2 <_vfiprintf_r+0x176>
 802346a:	fb0c 2101 	mla	r1, ip, r1, r2
 802346e:	4604      	mov	r4, r0
 8023470:	2301      	movs	r3, #1
 8023472:	e7f0      	b.n	8023456 <_vfiprintf_r+0x1da>
 8023474:	ab03      	add	r3, sp, #12
 8023476:	9300      	str	r3, [sp, #0]
 8023478:	462a      	mov	r2, r5
 802347a:	4b16      	ldr	r3, [pc, #88]	; (80234d4 <_vfiprintf_r+0x258>)
 802347c:	a904      	add	r1, sp, #16
 802347e:	4630      	mov	r0, r6
 8023480:	f7fc f900 	bl	801f684 <_printf_float>
 8023484:	4607      	mov	r7, r0
 8023486:	1c78      	adds	r0, r7, #1
 8023488:	d1d6      	bne.n	8023438 <_vfiprintf_r+0x1bc>
 802348a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802348c:	07d9      	lsls	r1, r3, #31
 802348e:	d405      	bmi.n	802349c <_vfiprintf_r+0x220>
 8023490:	89ab      	ldrh	r3, [r5, #12]
 8023492:	059a      	lsls	r2, r3, #22
 8023494:	d402      	bmi.n	802349c <_vfiprintf_r+0x220>
 8023496:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023498:	f7ff fea0 	bl	80231dc <__retarget_lock_release_recursive>
 802349c:	89ab      	ldrh	r3, [r5, #12]
 802349e:	065b      	lsls	r3, r3, #25
 80234a0:	f53f af12 	bmi.w	80232c8 <_vfiprintf_r+0x4c>
 80234a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80234a6:	e711      	b.n	80232cc <_vfiprintf_r+0x50>
 80234a8:	ab03      	add	r3, sp, #12
 80234aa:	9300      	str	r3, [sp, #0]
 80234ac:	462a      	mov	r2, r5
 80234ae:	4b09      	ldr	r3, [pc, #36]	; (80234d4 <_vfiprintf_r+0x258>)
 80234b0:	a904      	add	r1, sp, #16
 80234b2:	4630      	mov	r0, r6
 80234b4:	f7fc fb8a 	bl	801fbcc <_printf_i>
 80234b8:	e7e4      	b.n	8023484 <_vfiprintf_r+0x208>
 80234ba:	bf00      	nop
 80234bc:	080243e4 	.word	0x080243e4
 80234c0:	08024404 	.word	0x08024404
 80234c4:	080243c4 	.word	0x080243c4
 80234c8:	08024374 	.word	0x08024374
 80234cc:	0802437e 	.word	0x0802437e
 80234d0:	0801f685 	.word	0x0801f685
 80234d4:	08023259 	.word	0x08023259
 80234d8:	0802437a 	.word	0x0802437a

080234dc <__swbuf_r>:
 80234dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80234de:	460e      	mov	r6, r1
 80234e0:	4614      	mov	r4, r2
 80234e2:	4605      	mov	r5, r0
 80234e4:	b118      	cbz	r0, 80234ee <__swbuf_r+0x12>
 80234e6:	6983      	ldr	r3, [r0, #24]
 80234e8:	b90b      	cbnz	r3, 80234ee <__swbuf_r+0x12>
 80234ea:	f000 f9d1 	bl	8023890 <__sinit>
 80234ee:	4b21      	ldr	r3, [pc, #132]	; (8023574 <__swbuf_r+0x98>)
 80234f0:	429c      	cmp	r4, r3
 80234f2:	d12b      	bne.n	802354c <__swbuf_r+0x70>
 80234f4:	686c      	ldr	r4, [r5, #4]
 80234f6:	69a3      	ldr	r3, [r4, #24]
 80234f8:	60a3      	str	r3, [r4, #8]
 80234fa:	89a3      	ldrh	r3, [r4, #12]
 80234fc:	071a      	lsls	r2, r3, #28
 80234fe:	d52f      	bpl.n	8023560 <__swbuf_r+0x84>
 8023500:	6923      	ldr	r3, [r4, #16]
 8023502:	b36b      	cbz	r3, 8023560 <__swbuf_r+0x84>
 8023504:	6923      	ldr	r3, [r4, #16]
 8023506:	6820      	ldr	r0, [r4, #0]
 8023508:	1ac0      	subs	r0, r0, r3
 802350a:	6963      	ldr	r3, [r4, #20]
 802350c:	b2f6      	uxtb	r6, r6
 802350e:	4283      	cmp	r3, r0
 8023510:	4637      	mov	r7, r6
 8023512:	dc04      	bgt.n	802351e <__swbuf_r+0x42>
 8023514:	4621      	mov	r1, r4
 8023516:	4628      	mov	r0, r5
 8023518:	f000 f926 	bl	8023768 <_fflush_r>
 802351c:	bb30      	cbnz	r0, 802356c <__swbuf_r+0x90>
 802351e:	68a3      	ldr	r3, [r4, #8]
 8023520:	3b01      	subs	r3, #1
 8023522:	60a3      	str	r3, [r4, #8]
 8023524:	6823      	ldr	r3, [r4, #0]
 8023526:	1c5a      	adds	r2, r3, #1
 8023528:	6022      	str	r2, [r4, #0]
 802352a:	701e      	strb	r6, [r3, #0]
 802352c:	6963      	ldr	r3, [r4, #20]
 802352e:	3001      	adds	r0, #1
 8023530:	4283      	cmp	r3, r0
 8023532:	d004      	beq.n	802353e <__swbuf_r+0x62>
 8023534:	89a3      	ldrh	r3, [r4, #12]
 8023536:	07db      	lsls	r3, r3, #31
 8023538:	d506      	bpl.n	8023548 <__swbuf_r+0x6c>
 802353a:	2e0a      	cmp	r6, #10
 802353c:	d104      	bne.n	8023548 <__swbuf_r+0x6c>
 802353e:	4621      	mov	r1, r4
 8023540:	4628      	mov	r0, r5
 8023542:	f000 f911 	bl	8023768 <_fflush_r>
 8023546:	b988      	cbnz	r0, 802356c <__swbuf_r+0x90>
 8023548:	4638      	mov	r0, r7
 802354a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802354c:	4b0a      	ldr	r3, [pc, #40]	; (8023578 <__swbuf_r+0x9c>)
 802354e:	429c      	cmp	r4, r3
 8023550:	d101      	bne.n	8023556 <__swbuf_r+0x7a>
 8023552:	68ac      	ldr	r4, [r5, #8]
 8023554:	e7cf      	b.n	80234f6 <__swbuf_r+0x1a>
 8023556:	4b09      	ldr	r3, [pc, #36]	; (802357c <__swbuf_r+0xa0>)
 8023558:	429c      	cmp	r4, r3
 802355a:	bf08      	it	eq
 802355c:	68ec      	ldreq	r4, [r5, #12]
 802355e:	e7ca      	b.n	80234f6 <__swbuf_r+0x1a>
 8023560:	4621      	mov	r1, r4
 8023562:	4628      	mov	r0, r5
 8023564:	f000 f80c 	bl	8023580 <__swsetup_r>
 8023568:	2800      	cmp	r0, #0
 802356a:	d0cb      	beq.n	8023504 <__swbuf_r+0x28>
 802356c:	f04f 37ff 	mov.w	r7, #4294967295
 8023570:	e7ea      	b.n	8023548 <__swbuf_r+0x6c>
 8023572:	bf00      	nop
 8023574:	080243e4 	.word	0x080243e4
 8023578:	08024404 	.word	0x08024404
 802357c:	080243c4 	.word	0x080243c4

08023580 <__swsetup_r>:
 8023580:	4b32      	ldr	r3, [pc, #200]	; (802364c <__swsetup_r+0xcc>)
 8023582:	b570      	push	{r4, r5, r6, lr}
 8023584:	681d      	ldr	r5, [r3, #0]
 8023586:	4606      	mov	r6, r0
 8023588:	460c      	mov	r4, r1
 802358a:	b125      	cbz	r5, 8023596 <__swsetup_r+0x16>
 802358c:	69ab      	ldr	r3, [r5, #24]
 802358e:	b913      	cbnz	r3, 8023596 <__swsetup_r+0x16>
 8023590:	4628      	mov	r0, r5
 8023592:	f000 f97d 	bl	8023890 <__sinit>
 8023596:	4b2e      	ldr	r3, [pc, #184]	; (8023650 <__swsetup_r+0xd0>)
 8023598:	429c      	cmp	r4, r3
 802359a:	d10f      	bne.n	80235bc <__swsetup_r+0x3c>
 802359c:	686c      	ldr	r4, [r5, #4]
 802359e:	89a3      	ldrh	r3, [r4, #12]
 80235a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80235a4:	0719      	lsls	r1, r3, #28
 80235a6:	d42c      	bmi.n	8023602 <__swsetup_r+0x82>
 80235a8:	06dd      	lsls	r5, r3, #27
 80235aa:	d411      	bmi.n	80235d0 <__swsetup_r+0x50>
 80235ac:	2309      	movs	r3, #9
 80235ae:	6033      	str	r3, [r6, #0]
 80235b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80235b4:	81a3      	strh	r3, [r4, #12]
 80235b6:	f04f 30ff 	mov.w	r0, #4294967295
 80235ba:	e03e      	b.n	802363a <__swsetup_r+0xba>
 80235bc:	4b25      	ldr	r3, [pc, #148]	; (8023654 <__swsetup_r+0xd4>)
 80235be:	429c      	cmp	r4, r3
 80235c0:	d101      	bne.n	80235c6 <__swsetup_r+0x46>
 80235c2:	68ac      	ldr	r4, [r5, #8]
 80235c4:	e7eb      	b.n	802359e <__swsetup_r+0x1e>
 80235c6:	4b24      	ldr	r3, [pc, #144]	; (8023658 <__swsetup_r+0xd8>)
 80235c8:	429c      	cmp	r4, r3
 80235ca:	bf08      	it	eq
 80235cc:	68ec      	ldreq	r4, [r5, #12]
 80235ce:	e7e6      	b.n	802359e <__swsetup_r+0x1e>
 80235d0:	0758      	lsls	r0, r3, #29
 80235d2:	d512      	bpl.n	80235fa <__swsetup_r+0x7a>
 80235d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80235d6:	b141      	cbz	r1, 80235ea <__swsetup_r+0x6a>
 80235d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80235dc:	4299      	cmp	r1, r3
 80235de:	d002      	beq.n	80235e6 <__swsetup_r+0x66>
 80235e0:	4630      	mov	r0, r6
 80235e2:	f7fb ff05 	bl	801f3f0 <_free_r>
 80235e6:	2300      	movs	r3, #0
 80235e8:	6363      	str	r3, [r4, #52]	; 0x34
 80235ea:	89a3      	ldrh	r3, [r4, #12]
 80235ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80235f0:	81a3      	strh	r3, [r4, #12]
 80235f2:	2300      	movs	r3, #0
 80235f4:	6063      	str	r3, [r4, #4]
 80235f6:	6923      	ldr	r3, [r4, #16]
 80235f8:	6023      	str	r3, [r4, #0]
 80235fa:	89a3      	ldrh	r3, [r4, #12]
 80235fc:	f043 0308 	orr.w	r3, r3, #8
 8023600:	81a3      	strh	r3, [r4, #12]
 8023602:	6923      	ldr	r3, [r4, #16]
 8023604:	b94b      	cbnz	r3, 802361a <__swsetup_r+0x9a>
 8023606:	89a3      	ldrh	r3, [r4, #12]
 8023608:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802360c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023610:	d003      	beq.n	802361a <__swsetup_r+0x9a>
 8023612:	4621      	mov	r1, r4
 8023614:	4630      	mov	r0, r6
 8023616:	f000 f9fd 	bl	8023a14 <__smakebuf_r>
 802361a:	89a0      	ldrh	r0, [r4, #12]
 802361c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023620:	f010 0301 	ands.w	r3, r0, #1
 8023624:	d00a      	beq.n	802363c <__swsetup_r+0xbc>
 8023626:	2300      	movs	r3, #0
 8023628:	60a3      	str	r3, [r4, #8]
 802362a:	6963      	ldr	r3, [r4, #20]
 802362c:	425b      	negs	r3, r3
 802362e:	61a3      	str	r3, [r4, #24]
 8023630:	6923      	ldr	r3, [r4, #16]
 8023632:	b943      	cbnz	r3, 8023646 <__swsetup_r+0xc6>
 8023634:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8023638:	d1ba      	bne.n	80235b0 <__swsetup_r+0x30>
 802363a:	bd70      	pop	{r4, r5, r6, pc}
 802363c:	0781      	lsls	r1, r0, #30
 802363e:	bf58      	it	pl
 8023640:	6963      	ldrpl	r3, [r4, #20]
 8023642:	60a3      	str	r3, [r4, #8]
 8023644:	e7f4      	b.n	8023630 <__swsetup_r+0xb0>
 8023646:	2000      	movs	r0, #0
 8023648:	e7f7      	b.n	802363a <__swsetup_r+0xba>
 802364a:	bf00      	nop
 802364c:	20000030 	.word	0x20000030
 8023650:	080243e4 	.word	0x080243e4
 8023654:	08024404 	.word	0x08024404
 8023658:	080243c4 	.word	0x080243c4

0802365c <__sflush_r>:
 802365c:	898a      	ldrh	r2, [r1, #12]
 802365e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023662:	4605      	mov	r5, r0
 8023664:	0710      	lsls	r0, r2, #28
 8023666:	460c      	mov	r4, r1
 8023668:	d458      	bmi.n	802371c <__sflush_r+0xc0>
 802366a:	684b      	ldr	r3, [r1, #4]
 802366c:	2b00      	cmp	r3, #0
 802366e:	dc05      	bgt.n	802367c <__sflush_r+0x20>
 8023670:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8023672:	2b00      	cmp	r3, #0
 8023674:	dc02      	bgt.n	802367c <__sflush_r+0x20>
 8023676:	2000      	movs	r0, #0
 8023678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802367c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802367e:	2e00      	cmp	r6, #0
 8023680:	d0f9      	beq.n	8023676 <__sflush_r+0x1a>
 8023682:	2300      	movs	r3, #0
 8023684:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8023688:	682f      	ldr	r7, [r5, #0]
 802368a:	602b      	str	r3, [r5, #0]
 802368c:	d032      	beq.n	80236f4 <__sflush_r+0x98>
 802368e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8023690:	89a3      	ldrh	r3, [r4, #12]
 8023692:	075a      	lsls	r2, r3, #29
 8023694:	d505      	bpl.n	80236a2 <__sflush_r+0x46>
 8023696:	6863      	ldr	r3, [r4, #4]
 8023698:	1ac0      	subs	r0, r0, r3
 802369a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802369c:	b10b      	cbz	r3, 80236a2 <__sflush_r+0x46>
 802369e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80236a0:	1ac0      	subs	r0, r0, r3
 80236a2:	2300      	movs	r3, #0
 80236a4:	4602      	mov	r2, r0
 80236a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80236a8:	6a21      	ldr	r1, [r4, #32]
 80236aa:	4628      	mov	r0, r5
 80236ac:	47b0      	blx	r6
 80236ae:	1c43      	adds	r3, r0, #1
 80236b0:	89a3      	ldrh	r3, [r4, #12]
 80236b2:	d106      	bne.n	80236c2 <__sflush_r+0x66>
 80236b4:	6829      	ldr	r1, [r5, #0]
 80236b6:	291d      	cmp	r1, #29
 80236b8:	d82c      	bhi.n	8023714 <__sflush_r+0xb8>
 80236ba:	4a2a      	ldr	r2, [pc, #168]	; (8023764 <__sflush_r+0x108>)
 80236bc:	40ca      	lsrs	r2, r1
 80236be:	07d6      	lsls	r6, r2, #31
 80236c0:	d528      	bpl.n	8023714 <__sflush_r+0xb8>
 80236c2:	2200      	movs	r2, #0
 80236c4:	6062      	str	r2, [r4, #4]
 80236c6:	04d9      	lsls	r1, r3, #19
 80236c8:	6922      	ldr	r2, [r4, #16]
 80236ca:	6022      	str	r2, [r4, #0]
 80236cc:	d504      	bpl.n	80236d8 <__sflush_r+0x7c>
 80236ce:	1c42      	adds	r2, r0, #1
 80236d0:	d101      	bne.n	80236d6 <__sflush_r+0x7a>
 80236d2:	682b      	ldr	r3, [r5, #0]
 80236d4:	b903      	cbnz	r3, 80236d8 <__sflush_r+0x7c>
 80236d6:	6560      	str	r0, [r4, #84]	; 0x54
 80236d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80236da:	602f      	str	r7, [r5, #0]
 80236dc:	2900      	cmp	r1, #0
 80236de:	d0ca      	beq.n	8023676 <__sflush_r+0x1a>
 80236e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80236e4:	4299      	cmp	r1, r3
 80236e6:	d002      	beq.n	80236ee <__sflush_r+0x92>
 80236e8:	4628      	mov	r0, r5
 80236ea:	f7fb fe81 	bl	801f3f0 <_free_r>
 80236ee:	2000      	movs	r0, #0
 80236f0:	6360      	str	r0, [r4, #52]	; 0x34
 80236f2:	e7c1      	b.n	8023678 <__sflush_r+0x1c>
 80236f4:	6a21      	ldr	r1, [r4, #32]
 80236f6:	2301      	movs	r3, #1
 80236f8:	4628      	mov	r0, r5
 80236fa:	47b0      	blx	r6
 80236fc:	1c41      	adds	r1, r0, #1
 80236fe:	d1c7      	bne.n	8023690 <__sflush_r+0x34>
 8023700:	682b      	ldr	r3, [r5, #0]
 8023702:	2b00      	cmp	r3, #0
 8023704:	d0c4      	beq.n	8023690 <__sflush_r+0x34>
 8023706:	2b1d      	cmp	r3, #29
 8023708:	d001      	beq.n	802370e <__sflush_r+0xb2>
 802370a:	2b16      	cmp	r3, #22
 802370c:	d101      	bne.n	8023712 <__sflush_r+0xb6>
 802370e:	602f      	str	r7, [r5, #0]
 8023710:	e7b1      	b.n	8023676 <__sflush_r+0x1a>
 8023712:	89a3      	ldrh	r3, [r4, #12]
 8023714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023718:	81a3      	strh	r3, [r4, #12]
 802371a:	e7ad      	b.n	8023678 <__sflush_r+0x1c>
 802371c:	690f      	ldr	r7, [r1, #16]
 802371e:	2f00      	cmp	r7, #0
 8023720:	d0a9      	beq.n	8023676 <__sflush_r+0x1a>
 8023722:	0793      	lsls	r3, r2, #30
 8023724:	680e      	ldr	r6, [r1, #0]
 8023726:	bf08      	it	eq
 8023728:	694b      	ldreq	r3, [r1, #20]
 802372a:	600f      	str	r7, [r1, #0]
 802372c:	bf18      	it	ne
 802372e:	2300      	movne	r3, #0
 8023730:	eba6 0807 	sub.w	r8, r6, r7
 8023734:	608b      	str	r3, [r1, #8]
 8023736:	f1b8 0f00 	cmp.w	r8, #0
 802373a:	dd9c      	ble.n	8023676 <__sflush_r+0x1a>
 802373c:	6a21      	ldr	r1, [r4, #32]
 802373e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8023740:	4643      	mov	r3, r8
 8023742:	463a      	mov	r2, r7
 8023744:	4628      	mov	r0, r5
 8023746:	47b0      	blx	r6
 8023748:	2800      	cmp	r0, #0
 802374a:	dc06      	bgt.n	802375a <__sflush_r+0xfe>
 802374c:	89a3      	ldrh	r3, [r4, #12]
 802374e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023752:	81a3      	strh	r3, [r4, #12]
 8023754:	f04f 30ff 	mov.w	r0, #4294967295
 8023758:	e78e      	b.n	8023678 <__sflush_r+0x1c>
 802375a:	4407      	add	r7, r0
 802375c:	eba8 0800 	sub.w	r8, r8, r0
 8023760:	e7e9      	b.n	8023736 <__sflush_r+0xda>
 8023762:	bf00      	nop
 8023764:	20400001 	.word	0x20400001

08023768 <_fflush_r>:
 8023768:	b538      	push	{r3, r4, r5, lr}
 802376a:	690b      	ldr	r3, [r1, #16]
 802376c:	4605      	mov	r5, r0
 802376e:	460c      	mov	r4, r1
 8023770:	b913      	cbnz	r3, 8023778 <_fflush_r+0x10>
 8023772:	2500      	movs	r5, #0
 8023774:	4628      	mov	r0, r5
 8023776:	bd38      	pop	{r3, r4, r5, pc}
 8023778:	b118      	cbz	r0, 8023782 <_fflush_r+0x1a>
 802377a:	6983      	ldr	r3, [r0, #24]
 802377c:	b90b      	cbnz	r3, 8023782 <_fflush_r+0x1a>
 802377e:	f000 f887 	bl	8023890 <__sinit>
 8023782:	4b14      	ldr	r3, [pc, #80]	; (80237d4 <_fflush_r+0x6c>)
 8023784:	429c      	cmp	r4, r3
 8023786:	d11b      	bne.n	80237c0 <_fflush_r+0x58>
 8023788:	686c      	ldr	r4, [r5, #4]
 802378a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802378e:	2b00      	cmp	r3, #0
 8023790:	d0ef      	beq.n	8023772 <_fflush_r+0xa>
 8023792:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8023794:	07d0      	lsls	r0, r2, #31
 8023796:	d404      	bmi.n	80237a2 <_fflush_r+0x3a>
 8023798:	0599      	lsls	r1, r3, #22
 802379a:	d402      	bmi.n	80237a2 <_fflush_r+0x3a>
 802379c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802379e:	f7ff fd1c 	bl	80231da <__retarget_lock_acquire_recursive>
 80237a2:	4628      	mov	r0, r5
 80237a4:	4621      	mov	r1, r4
 80237a6:	f7ff ff59 	bl	802365c <__sflush_r>
 80237aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80237ac:	07da      	lsls	r2, r3, #31
 80237ae:	4605      	mov	r5, r0
 80237b0:	d4e0      	bmi.n	8023774 <_fflush_r+0xc>
 80237b2:	89a3      	ldrh	r3, [r4, #12]
 80237b4:	059b      	lsls	r3, r3, #22
 80237b6:	d4dd      	bmi.n	8023774 <_fflush_r+0xc>
 80237b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80237ba:	f7ff fd0f 	bl	80231dc <__retarget_lock_release_recursive>
 80237be:	e7d9      	b.n	8023774 <_fflush_r+0xc>
 80237c0:	4b05      	ldr	r3, [pc, #20]	; (80237d8 <_fflush_r+0x70>)
 80237c2:	429c      	cmp	r4, r3
 80237c4:	d101      	bne.n	80237ca <_fflush_r+0x62>
 80237c6:	68ac      	ldr	r4, [r5, #8]
 80237c8:	e7df      	b.n	802378a <_fflush_r+0x22>
 80237ca:	4b04      	ldr	r3, [pc, #16]	; (80237dc <_fflush_r+0x74>)
 80237cc:	429c      	cmp	r4, r3
 80237ce:	bf08      	it	eq
 80237d0:	68ec      	ldreq	r4, [r5, #12]
 80237d2:	e7da      	b.n	802378a <_fflush_r+0x22>
 80237d4:	080243e4 	.word	0x080243e4
 80237d8:	08024404 	.word	0x08024404
 80237dc:	080243c4 	.word	0x080243c4

080237e0 <std>:
 80237e0:	2300      	movs	r3, #0
 80237e2:	b510      	push	{r4, lr}
 80237e4:	4604      	mov	r4, r0
 80237e6:	e9c0 3300 	strd	r3, r3, [r0]
 80237ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80237ee:	6083      	str	r3, [r0, #8]
 80237f0:	8181      	strh	r1, [r0, #12]
 80237f2:	6643      	str	r3, [r0, #100]	; 0x64
 80237f4:	81c2      	strh	r2, [r0, #14]
 80237f6:	6183      	str	r3, [r0, #24]
 80237f8:	4619      	mov	r1, r3
 80237fa:	2208      	movs	r2, #8
 80237fc:	305c      	adds	r0, #92	; 0x5c
 80237fe:	f7fb fdef 	bl	801f3e0 <memset>
 8023802:	4b05      	ldr	r3, [pc, #20]	; (8023818 <std+0x38>)
 8023804:	6263      	str	r3, [r4, #36]	; 0x24
 8023806:	4b05      	ldr	r3, [pc, #20]	; (802381c <std+0x3c>)
 8023808:	62a3      	str	r3, [r4, #40]	; 0x28
 802380a:	4b05      	ldr	r3, [pc, #20]	; (8023820 <std+0x40>)
 802380c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802380e:	4b05      	ldr	r3, [pc, #20]	; (8023824 <std+0x44>)
 8023810:	6224      	str	r4, [r4, #32]
 8023812:	6323      	str	r3, [r4, #48]	; 0x30
 8023814:	bd10      	pop	{r4, pc}
 8023816:	bf00      	nop
 8023818:	08023aa5 	.word	0x08023aa5
 802381c:	08023ac7 	.word	0x08023ac7
 8023820:	08023aff 	.word	0x08023aff
 8023824:	08023b23 	.word	0x08023b23

08023828 <_cleanup_r>:
 8023828:	4901      	ldr	r1, [pc, #4]	; (8023830 <_cleanup_r+0x8>)
 802382a:	f000 b8af 	b.w	802398c <_fwalk_reent>
 802382e:	bf00      	nop
 8023830:	08023769 	.word	0x08023769

08023834 <__sfmoreglue>:
 8023834:	b570      	push	{r4, r5, r6, lr}
 8023836:	1e4a      	subs	r2, r1, #1
 8023838:	2568      	movs	r5, #104	; 0x68
 802383a:	4355      	muls	r5, r2
 802383c:	460e      	mov	r6, r1
 802383e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8023842:	f7fb fe25 	bl	801f490 <_malloc_r>
 8023846:	4604      	mov	r4, r0
 8023848:	b140      	cbz	r0, 802385c <__sfmoreglue+0x28>
 802384a:	2100      	movs	r1, #0
 802384c:	e9c0 1600 	strd	r1, r6, [r0]
 8023850:	300c      	adds	r0, #12
 8023852:	60a0      	str	r0, [r4, #8]
 8023854:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8023858:	f7fb fdc2 	bl	801f3e0 <memset>
 802385c:	4620      	mov	r0, r4
 802385e:	bd70      	pop	{r4, r5, r6, pc}

08023860 <__sfp_lock_acquire>:
 8023860:	4801      	ldr	r0, [pc, #4]	; (8023868 <__sfp_lock_acquire+0x8>)
 8023862:	f7ff bcba 	b.w	80231da <__retarget_lock_acquire_recursive>
 8023866:	bf00      	nop
 8023868:	200003f8 	.word	0x200003f8

0802386c <__sfp_lock_release>:
 802386c:	4801      	ldr	r0, [pc, #4]	; (8023874 <__sfp_lock_release+0x8>)
 802386e:	f7ff bcb5 	b.w	80231dc <__retarget_lock_release_recursive>
 8023872:	bf00      	nop
 8023874:	200003f8 	.word	0x200003f8

08023878 <__sinit_lock_acquire>:
 8023878:	4801      	ldr	r0, [pc, #4]	; (8023880 <__sinit_lock_acquire+0x8>)
 802387a:	f7ff bcae 	b.w	80231da <__retarget_lock_acquire_recursive>
 802387e:	bf00      	nop
 8023880:	200003f3 	.word	0x200003f3

08023884 <__sinit_lock_release>:
 8023884:	4801      	ldr	r0, [pc, #4]	; (802388c <__sinit_lock_release+0x8>)
 8023886:	f7ff bca9 	b.w	80231dc <__retarget_lock_release_recursive>
 802388a:	bf00      	nop
 802388c:	200003f3 	.word	0x200003f3

08023890 <__sinit>:
 8023890:	b510      	push	{r4, lr}
 8023892:	4604      	mov	r4, r0
 8023894:	f7ff fff0 	bl	8023878 <__sinit_lock_acquire>
 8023898:	69a3      	ldr	r3, [r4, #24]
 802389a:	b11b      	cbz	r3, 80238a4 <__sinit+0x14>
 802389c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80238a0:	f7ff bff0 	b.w	8023884 <__sinit_lock_release>
 80238a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80238a8:	6523      	str	r3, [r4, #80]	; 0x50
 80238aa:	4b13      	ldr	r3, [pc, #76]	; (80238f8 <__sinit+0x68>)
 80238ac:	4a13      	ldr	r2, [pc, #76]	; (80238fc <__sinit+0x6c>)
 80238ae:	681b      	ldr	r3, [r3, #0]
 80238b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80238b2:	42a3      	cmp	r3, r4
 80238b4:	bf04      	itt	eq
 80238b6:	2301      	moveq	r3, #1
 80238b8:	61a3      	streq	r3, [r4, #24]
 80238ba:	4620      	mov	r0, r4
 80238bc:	f000 f820 	bl	8023900 <__sfp>
 80238c0:	6060      	str	r0, [r4, #4]
 80238c2:	4620      	mov	r0, r4
 80238c4:	f000 f81c 	bl	8023900 <__sfp>
 80238c8:	60a0      	str	r0, [r4, #8]
 80238ca:	4620      	mov	r0, r4
 80238cc:	f000 f818 	bl	8023900 <__sfp>
 80238d0:	2200      	movs	r2, #0
 80238d2:	60e0      	str	r0, [r4, #12]
 80238d4:	2104      	movs	r1, #4
 80238d6:	6860      	ldr	r0, [r4, #4]
 80238d8:	f7ff ff82 	bl	80237e0 <std>
 80238dc:	68a0      	ldr	r0, [r4, #8]
 80238de:	2201      	movs	r2, #1
 80238e0:	2109      	movs	r1, #9
 80238e2:	f7ff ff7d 	bl	80237e0 <std>
 80238e6:	68e0      	ldr	r0, [r4, #12]
 80238e8:	2202      	movs	r2, #2
 80238ea:	2112      	movs	r1, #18
 80238ec:	f7ff ff78 	bl	80237e0 <std>
 80238f0:	2301      	movs	r3, #1
 80238f2:	61a3      	str	r3, [r4, #24]
 80238f4:	e7d2      	b.n	802389c <__sinit+0xc>
 80238f6:	bf00      	nop
 80238f8:	08023f6c 	.word	0x08023f6c
 80238fc:	08023829 	.word	0x08023829

08023900 <__sfp>:
 8023900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023902:	4607      	mov	r7, r0
 8023904:	f7ff ffac 	bl	8023860 <__sfp_lock_acquire>
 8023908:	4b1e      	ldr	r3, [pc, #120]	; (8023984 <__sfp+0x84>)
 802390a:	681e      	ldr	r6, [r3, #0]
 802390c:	69b3      	ldr	r3, [r6, #24]
 802390e:	b913      	cbnz	r3, 8023916 <__sfp+0x16>
 8023910:	4630      	mov	r0, r6
 8023912:	f7ff ffbd 	bl	8023890 <__sinit>
 8023916:	3648      	adds	r6, #72	; 0x48
 8023918:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802391c:	3b01      	subs	r3, #1
 802391e:	d503      	bpl.n	8023928 <__sfp+0x28>
 8023920:	6833      	ldr	r3, [r6, #0]
 8023922:	b30b      	cbz	r3, 8023968 <__sfp+0x68>
 8023924:	6836      	ldr	r6, [r6, #0]
 8023926:	e7f7      	b.n	8023918 <__sfp+0x18>
 8023928:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802392c:	b9d5      	cbnz	r5, 8023964 <__sfp+0x64>
 802392e:	4b16      	ldr	r3, [pc, #88]	; (8023988 <__sfp+0x88>)
 8023930:	60e3      	str	r3, [r4, #12]
 8023932:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8023936:	6665      	str	r5, [r4, #100]	; 0x64
 8023938:	f7ff fc4e 	bl	80231d8 <__retarget_lock_init_recursive>
 802393c:	f7ff ff96 	bl	802386c <__sfp_lock_release>
 8023940:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8023944:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8023948:	6025      	str	r5, [r4, #0]
 802394a:	61a5      	str	r5, [r4, #24]
 802394c:	2208      	movs	r2, #8
 802394e:	4629      	mov	r1, r5
 8023950:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8023954:	f7fb fd44 	bl	801f3e0 <memset>
 8023958:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802395c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8023960:	4620      	mov	r0, r4
 8023962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023964:	3468      	adds	r4, #104	; 0x68
 8023966:	e7d9      	b.n	802391c <__sfp+0x1c>
 8023968:	2104      	movs	r1, #4
 802396a:	4638      	mov	r0, r7
 802396c:	f7ff ff62 	bl	8023834 <__sfmoreglue>
 8023970:	4604      	mov	r4, r0
 8023972:	6030      	str	r0, [r6, #0]
 8023974:	2800      	cmp	r0, #0
 8023976:	d1d5      	bne.n	8023924 <__sfp+0x24>
 8023978:	f7ff ff78 	bl	802386c <__sfp_lock_release>
 802397c:	230c      	movs	r3, #12
 802397e:	603b      	str	r3, [r7, #0]
 8023980:	e7ee      	b.n	8023960 <__sfp+0x60>
 8023982:	bf00      	nop
 8023984:	08023f6c 	.word	0x08023f6c
 8023988:	ffff0001 	.word	0xffff0001

0802398c <_fwalk_reent>:
 802398c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023990:	4606      	mov	r6, r0
 8023992:	4688      	mov	r8, r1
 8023994:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8023998:	2700      	movs	r7, #0
 802399a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802399e:	f1b9 0901 	subs.w	r9, r9, #1
 80239a2:	d505      	bpl.n	80239b0 <_fwalk_reent+0x24>
 80239a4:	6824      	ldr	r4, [r4, #0]
 80239a6:	2c00      	cmp	r4, #0
 80239a8:	d1f7      	bne.n	802399a <_fwalk_reent+0xe>
 80239aa:	4638      	mov	r0, r7
 80239ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80239b0:	89ab      	ldrh	r3, [r5, #12]
 80239b2:	2b01      	cmp	r3, #1
 80239b4:	d907      	bls.n	80239c6 <_fwalk_reent+0x3a>
 80239b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80239ba:	3301      	adds	r3, #1
 80239bc:	d003      	beq.n	80239c6 <_fwalk_reent+0x3a>
 80239be:	4629      	mov	r1, r5
 80239c0:	4630      	mov	r0, r6
 80239c2:	47c0      	blx	r8
 80239c4:	4307      	orrs	r7, r0
 80239c6:	3568      	adds	r5, #104	; 0x68
 80239c8:	e7e9      	b.n	802399e <_fwalk_reent+0x12>

080239ca <__swhatbuf_r>:
 80239ca:	b570      	push	{r4, r5, r6, lr}
 80239cc:	460e      	mov	r6, r1
 80239ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80239d2:	2900      	cmp	r1, #0
 80239d4:	b096      	sub	sp, #88	; 0x58
 80239d6:	4614      	mov	r4, r2
 80239d8:	461d      	mov	r5, r3
 80239da:	da07      	bge.n	80239ec <__swhatbuf_r+0x22>
 80239dc:	2300      	movs	r3, #0
 80239de:	602b      	str	r3, [r5, #0]
 80239e0:	89b3      	ldrh	r3, [r6, #12]
 80239e2:	061a      	lsls	r2, r3, #24
 80239e4:	d410      	bmi.n	8023a08 <__swhatbuf_r+0x3e>
 80239e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80239ea:	e00e      	b.n	8023a0a <__swhatbuf_r+0x40>
 80239ec:	466a      	mov	r2, sp
 80239ee:	f000 f8bf 	bl	8023b70 <_fstat_r>
 80239f2:	2800      	cmp	r0, #0
 80239f4:	dbf2      	blt.n	80239dc <__swhatbuf_r+0x12>
 80239f6:	9a01      	ldr	r2, [sp, #4]
 80239f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80239fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8023a00:	425a      	negs	r2, r3
 8023a02:	415a      	adcs	r2, r3
 8023a04:	602a      	str	r2, [r5, #0]
 8023a06:	e7ee      	b.n	80239e6 <__swhatbuf_r+0x1c>
 8023a08:	2340      	movs	r3, #64	; 0x40
 8023a0a:	2000      	movs	r0, #0
 8023a0c:	6023      	str	r3, [r4, #0]
 8023a0e:	b016      	add	sp, #88	; 0x58
 8023a10:	bd70      	pop	{r4, r5, r6, pc}
	...

08023a14 <__smakebuf_r>:
 8023a14:	898b      	ldrh	r3, [r1, #12]
 8023a16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023a18:	079d      	lsls	r5, r3, #30
 8023a1a:	4606      	mov	r6, r0
 8023a1c:	460c      	mov	r4, r1
 8023a1e:	d507      	bpl.n	8023a30 <__smakebuf_r+0x1c>
 8023a20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8023a24:	6023      	str	r3, [r4, #0]
 8023a26:	6123      	str	r3, [r4, #16]
 8023a28:	2301      	movs	r3, #1
 8023a2a:	6163      	str	r3, [r4, #20]
 8023a2c:	b002      	add	sp, #8
 8023a2e:	bd70      	pop	{r4, r5, r6, pc}
 8023a30:	ab01      	add	r3, sp, #4
 8023a32:	466a      	mov	r2, sp
 8023a34:	f7ff ffc9 	bl	80239ca <__swhatbuf_r>
 8023a38:	9900      	ldr	r1, [sp, #0]
 8023a3a:	4605      	mov	r5, r0
 8023a3c:	4630      	mov	r0, r6
 8023a3e:	f7fb fd27 	bl	801f490 <_malloc_r>
 8023a42:	b948      	cbnz	r0, 8023a58 <__smakebuf_r+0x44>
 8023a44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023a48:	059a      	lsls	r2, r3, #22
 8023a4a:	d4ef      	bmi.n	8023a2c <__smakebuf_r+0x18>
 8023a4c:	f023 0303 	bic.w	r3, r3, #3
 8023a50:	f043 0302 	orr.w	r3, r3, #2
 8023a54:	81a3      	strh	r3, [r4, #12]
 8023a56:	e7e3      	b.n	8023a20 <__smakebuf_r+0xc>
 8023a58:	4b0d      	ldr	r3, [pc, #52]	; (8023a90 <__smakebuf_r+0x7c>)
 8023a5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8023a5c:	89a3      	ldrh	r3, [r4, #12]
 8023a5e:	6020      	str	r0, [r4, #0]
 8023a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023a64:	81a3      	strh	r3, [r4, #12]
 8023a66:	9b00      	ldr	r3, [sp, #0]
 8023a68:	6163      	str	r3, [r4, #20]
 8023a6a:	9b01      	ldr	r3, [sp, #4]
 8023a6c:	6120      	str	r0, [r4, #16]
 8023a6e:	b15b      	cbz	r3, 8023a88 <__smakebuf_r+0x74>
 8023a70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023a74:	4630      	mov	r0, r6
 8023a76:	f000 f88d 	bl	8023b94 <_isatty_r>
 8023a7a:	b128      	cbz	r0, 8023a88 <__smakebuf_r+0x74>
 8023a7c:	89a3      	ldrh	r3, [r4, #12]
 8023a7e:	f023 0303 	bic.w	r3, r3, #3
 8023a82:	f043 0301 	orr.w	r3, r3, #1
 8023a86:	81a3      	strh	r3, [r4, #12]
 8023a88:	89a0      	ldrh	r0, [r4, #12]
 8023a8a:	4305      	orrs	r5, r0
 8023a8c:	81a5      	strh	r5, [r4, #12]
 8023a8e:	e7cd      	b.n	8023a2c <__smakebuf_r+0x18>
 8023a90:	08023829 	.word	0x08023829

08023a94 <_malloc_usable_size_r>:
 8023a94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023a98:	1f18      	subs	r0, r3, #4
 8023a9a:	2b00      	cmp	r3, #0
 8023a9c:	bfbc      	itt	lt
 8023a9e:	580b      	ldrlt	r3, [r1, r0]
 8023aa0:	18c0      	addlt	r0, r0, r3
 8023aa2:	4770      	bx	lr

08023aa4 <__sread>:
 8023aa4:	b510      	push	{r4, lr}
 8023aa6:	460c      	mov	r4, r1
 8023aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023aac:	f000 f894 	bl	8023bd8 <_read_r>
 8023ab0:	2800      	cmp	r0, #0
 8023ab2:	bfab      	itete	ge
 8023ab4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8023ab6:	89a3      	ldrhlt	r3, [r4, #12]
 8023ab8:	181b      	addge	r3, r3, r0
 8023aba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8023abe:	bfac      	ite	ge
 8023ac0:	6563      	strge	r3, [r4, #84]	; 0x54
 8023ac2:	81a3      	strhlt	r3, [r4, #12]
 8023ac4:	bd10      	pop	{r4, pc}

08023ac6 <__swrite>:
 8023ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023aca:	461f      	mov	r7, r3
 8023acc:	898b      	ldrh	r3, [r1, #12]
 8023ace:	05db      	lsls	r3, r3, #23
 8023ad0:	4605      	mov	r5, r0
 8023ad2:	460c      	mov	r4, r1
 8023ad4:	4616      	mov	r6, r2
 8023ad6:	d505      	bpl.n	8023ae4 <__swrite+0x1e>
 8023ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023adc:	2302      	movs	r3, #2
 8023ade:	2200      	movs	r2, #0
 8023ae0:	f000 f868 	bl	8023bb4 <_lseek_r>
 8023ae4:	89a3      	ldrh	r3, [r4, #12]
 8023ae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023aea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8023aee:	81a3      	strh	r3, [r4, #12]
 8023af0:	4632      	mov	r2, r6
 8023af2:	463b      	mov	r3, r7
 8023af4:	4628      	mov	r0, r5
 8023af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023afa:	f000 b817 	b.w	8023b2c <_write_r>

08023afe <__sseek>:
 8023afe:	b510      	push	{r4, lr}
 8023b00:	460c      	mov	r4, r1
 8023b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023b06:	f000 f855 	bl	8023bb4 <_lseek_r>
 8023b0a:	1c43      	adds	r3, r0, #1
 8023b0c:	89a3      	ldrh	r3, [r4, #12]
 8023b0e:	bf15      	itete	ne
 8023b10:	6560      	strne	r0, [r4, #84]	; 0x54
 8023b12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8023b16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8023b1a:	81a3      	strheq	r3, [r4, #12]
 8023b1c:	bf18      	it	ne
 8023b1e:	81a3      	strhne	r3, [r4, #12]
 8023b20:	bd10      	pop	{r4, pc}

08023b22 <__sclose>:
 8023b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023b26:	f000 b813 	b.w	8023b50 <_close_r>
	...

08023b2c <_write_r>:
 8023b2c:	b538      	push	{r3, r4, r5, lr}
 8023b2e:	4d07      	ldr	r5, [pc, #28]	; (8023b4c <_write_r+0x20>)
 8023b30:	4604      	mov	r4, r0
 8023b32:	4608      	mov	r0, r1
 8023b34:	4611      	mov	r1, r2
 8023b36:	2200      	movs	r2, #0
 8023b38:	602a      	str	r2, [r5, #0]
 8023b3a:	461a      	mov	r2, r3
 8023b3c:	f7f7 f9ab 	bl	801ae96 <_write>
 8023b40:	1c43      	adds	r3, r0, #1
 8023b42:	d102      	bne.n	8023b4a <_write_r+0x1e>
 8023b44:	682b      	ldr	r3, [r5, #0]
 8023b46:	b103      	cbz	r3, 8023b4a <_write_r+0x1e>
 8023b48:	6023      	str	r3, [r4, #0]
 8023b4a:	bd38      	pop	{r3, r4, r5, pc}
 8023b4c:	200003ec 	.word	0x200003ec

08023b50 <_close_r>:
 8023b50:	b538      	push	{r3, r4, r5, lr}
 8023b52:	4d06      	ldr	r5, [pc, #24]	; (8023b6c <_close_r+0x1c>)
 8023b54:	2300      	movs	r3, #0
 8023b56:	4604      	mov	r4, r0
 8023b58:	4608      	mov	r0, r1
 8023b5a:	602b      	str	r3, [r5, #0]
 8023b5c:	f7f7 f9b7 	bl	801aece <_close>
 8023b60:	1c43      	adds	r3, r0, #1
 8023b62:	d102      	bne.n	8023b6a <_close_r+0x1a>
 8023b64:	682b      	ldr	r3, [r5, #0]
 8023b66:	b103      	cbz	r3, 8023b6a <_close_r+0x1a>
 8023b68:	6023      	str	r3, [r4, #0]
 8023b6a:	bd38      	pop	{r3, r4, r5, pc}
 8023b6c:	200003ec 	.word	0x200003ec

08023b70 <_fstat_r>:
 8023b70:	b538      	push	{r3, r4, r5, lr}
 8023b72:	4d07      	ldr	r5, [pc, #28]	; (8023b90 <_fstat_r+0x20>)
 8023b74:	2300      	movs	r3, #0
 8023b76:	4604      	mov	r4, r0
 8023b78:	4608      	mov	r0, r1
 8023b7a:	4611      	mov	r1, r2
 8023b7c:	602b      	str	r3, [r5, #0]
 8023b7e:	f7f7 f9b2 	bl	801aee6 <_fstat>
 8023b82:	1c43      	adds	r3, r0, #1
 8023b84:	d102      	bne.n	8023b8c <_fstat_r+0x1c>
 8023b86:	682b      	ldr	r3, [r5, #0]
 8023b88:	b103      	cbz	r3, 8023b8c <_fstat_r+0x1c>
 8023b8a:	6023      	str	r3, [r4, #0]
 8023b8c:	bd38      	pop	{r3, r4, r5, pc}
 8023b8e:	bf00      	nop
 8023b90:	200003ec 	.word	0x200003ec

08023b94 <_isatty_r>:
 8023b94:	b538      	push	{r3, r4, r5, lr}
 8023b96:	4d06      	ldr	r5, [pc, #24]	; (8023bb0 <_isatty_r+0x1c>)
 8023b98:	2300      	movs	r3, #0
 8023b9a:	4604      	mov	r4, r0
 8023b9c:	4608      	mov	r0, r1
 8023b9e:	602b      	str	r3, [r5, #0]
 8023ba0:	f7f7 f9b1 	bl	801af06 <_isatty>
 8023ba4:	1c43      	adds	r3, r0, #1
 8023ba6:	d102      	bne.n	8023bae <_isatty_r+0x1a>
 8023ba8:	682b      	ldr	r3, [r5, #0]
 8023baa:	b103      	cbz	r3, 8023bae <_isatty_r+0x1a>
 8023bac:	6023      	str	r3, [r4, #0]
 8023bae:	bd38      	pop	{r3, r4, r5, pc}
 8023bb0:	200003ec 	.word	0x200003ec

08023bb4 <_lseek_r>:
 8023bb4:	b538      	push	{r3, r4, r5, lr}
 8023bb6:	4d07      	ldr	r5, [pc, #28]	; (8023bd4 <_lseek_r+0x20>)
 8023bb8:	4604      	mov	r4, r0
 8023bba:	4608      	mov	r0, r1
 8023bbc:	4611      	mov	r1, r2
 8023bbe:	2200      	movs	r2, #0
 8023bc0:	602a      	str	r2, [r5, #0]
 8023bc2:	461a      	mov	r2, r3
 8023bc4:	f7f7 f9aa 	bl	801af1c <_lseek>
 8023bc8:	1c43      	adds	r3, r0, #1
 8023bca:	d102      	bne.n	8023bd2 <_lseek_r+0x1e>
 8023bcc:	682b      	ldr	r3, [r5, #0]
 8023bce:	b103      	cbz	r3, 8023bd2 <_lseek_r+0x1e>
 8023bd0:	6023      	str	r3, [r4, #0]
 8023bd2:	bd38      	pop	{r3, r4, r5, pc}
 8023bd4:	200003ec 	.word	0x200003ec

08023bd8 <_read_r>:
 8023bd8:	b538      	push	{r3, r4, r5, lr}
 8023bda:	4d07      	ldr	r5, [pc, #28]	; (8023bf8 <_read_r+0x20>)
 8023bdc:	4604      	mov	r4, r0
 8023bde:	4608      	mov	r0, r1
 8023be0:	4611      	mov	r1, r2
 8023be2:	2200      	movs	r2, #0
 8023be4:	602a      	str	r2, [r5, #0]
 8023be6:	461a      	mov	r2, r3
 8023be8:	f7f7 f938 	bl	801ae5c <_read>
 8023bec:	1c43      	adds	r3, r0, #1
 8023bee:	d102      	bne.n	8023bf6 <_read_r+0x1e>
 8023bf0:	682b      	ldr	r3, [r5, #0]
 8023bf2:	b103      	cbz	r3, 8023bf6 <_read_r+0x1e>
 8023bf4:	6023      	str	r3, [r4, #0]
 8023bf6:	bd38      	pop	{r3, r4, r5, pc}
 8023bf8:	200003ec 	.word	0x200003ec

08023bfc <_init>:
 8023bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023bfe:	bf00      	nop
 8023c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023c02:	bc08      	pop	{r3}
 8023c04:	469e      	mov	lr, r3
 8023c06:	4770      	bx	lr

08023c08 <_fini>:
 8023c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023c0a:	bf00      	nop
 8023c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023c0e:	bc08      	pop	{r3}
 8023c10:	469e      	mov	lr, r3
 8023c12:	4770      	bx	lr
