
FOTA_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000069c  0800a290  0800a290  0001a290  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a92c  0800a92c  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800a92c  0800a92c  0001a92c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a934  0800a934  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a934  0800a934  0001a934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800a93c  0800a93c  0001a93c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800a944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000204  0800ab48  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  0800ab48  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024a62  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043e4  00000000  00000000  00044c96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  00049080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb8  00000000  00000000  00049d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bde1  00000000  00000000  0004a928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a8d  00000000  00000000  00076709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f906e  00000000  00000000  00089196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00182204  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bc8  00000000  00000000  00182258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000204 	.word	0x20000204
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a274 	.word	0x0800a274

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000208 	.word	0x20000208
 80001cc:	0800a274 	.word	0x0800a274

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001002:	4b25      	ldr	r3, [pc, #148]	; (8001098 <MX_GPIO_Init+0xac>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	4a24      	ldr	r2, [pc, #144]	; (8001098 <MX_GPIO_Init+0xac>)
 8001008:	f043 0304 	orr.w	r3, r3, #4
 800100c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100e:	4b22      	ldr	r3, [pc, #136]	; (8001098 <MX_GPIO_Init+0xac>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	f003 0304 	and.w	r3, r3, #4
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <MX_GPIO_Init+0xac>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	4a1e      	ldr	r2, [pc, #120]	; (8001098 <MX_GPIO_Init+0xac>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001026:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <MX_GPIO_Init+0xac>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001032:	4b19      	ldr	r3, [pc, #100]	; (8001098 <MX_GPIO_Init+0xac>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	4a18      	ldr	r2, [pc, #96]	; (8001098 <MX_GPIO_Init+0xac>)
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103e:	4b16      	ldr	r3, [pc, #88]	; (8001098 <MX_GPIO_Init+0xac>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(user_led_GPIO_Port, user_led_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	2120      	movs	r1, #32
 800104e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001052:	f001 fc73 	bl	800293c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = user_btn_Pin;
 8001056:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800105a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105c:	2300      	movs	r3, #0
 800105e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001060:	2301      	movs	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(user_btn_GPIO_Port, &GPIO_InitStruct);
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	4619      	mov	r1, r3
 800106a:	480c      	ldr	r0, [pc, #48]	; (800109c <MX_GPIO_Init+0xb0>)
 800106c:	f001 faa4 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = user_led_Pin;
 8001070:	2320      	movs	r3, #32
 8001072:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001074:	2301      	movs	r3, #1
 8001076:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107c:	2303      	movs	r3, #3
 800107e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(user_led_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	4619      	mov	r1, r3
 8001086:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108a:	f001 fa95 	bl	80025b8 <HAL_GPIO_Init>

}
 800108e:	bf00      	nop
 8001090:	3720      	adds	r7, #32
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40021000 	.word	0x40021000
 800109c:	48000800 	.word	0x48000800

080010a0 <_ZSt6strstrPcPKc>:
  strrchr(char* __s, int __n)
  { return __builtin_strrchr(__s, __n); }

  inline char*
  strstr(char* __s1, const char* __s2)
  { return __builtin_strstr(__s1, __s2); }
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	6839      	ldr	r1, [r7, #0]
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f005 fc7b 	bl	80069a8 <strstr>
 80010b2:	4603      	mov	r3, r0
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c2:	f000 fdb0 	bl	8001c26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c6:	f000 f88d 	bl	80011e4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ca:	f7ff ff8f 	bl	8000fec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010ce:	f000 fccd 	bl	8001a6c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80010d2:	f000 fc9b 	bl	8001a0c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Sim7600.init() ;
 80010d6:	4838      	ldr	r0, [pc, #224]	; (80011b8 <main+0xfc>)
 80010d8:	f004 f9d6 	bl	8005488 <_ZN7Sim76004initEv>
  Terminal.init() ;
 80010dc:	4837      	ldr	r0, [pc, #220]	; (80011bc <main+0x100>)
 80010de:	f004 fae3 	bl	80056a8 <_ZN8Terminal4initEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	// First config
  Sim7600.sendCmd( "AT", "OK", 200 ) ;
 80010e2:	23c8      	movs	r3, #200	; 0xc8
 80010e4:	4a36      	ldr	r2, [pc, #216]	; (80011c0 <main+0x104>)
 80010e6:	4937      	ldr	r1, [pc, #220]	; (80011c4 <main+0x108>)
 80010e8:	4833      	ldr	r0, [pc, #204]	; (80011b8 <main+0xfc>)
 80010ea:	f004 fa11 	bl	8005510 <_ZN7Sim76007sendCmdEPKcS1_j>
  Sim7600.sendCmd( "AT+FSCD=E:", "OK", 200 ) ;
 80010ee:	23c8      	movs	r3, #200	; 0xc8
 80010f0:	4a33      	ldr	r2, [pc, #204]	; (80011c0 <main+0x104>)
 80010f2:	4935      	ldr	r1, [pc, #212]	; (80011c8 <main+0x10c>)
 80010f4:	4830      	ldr	r0, [pc, #192]	; (80011b8 <main+0xfc>)
 80010f6:	f004 fa0b 	bl	8005510 <_ZN7Sim76007sendCmdEPKcS1_j>
  Sim7600.sendCmd( "AT+CATR=1", "OK", 200 ) ;
 80010fa:	23c8      	movs	r3, #200	; 0xc8
 80010fc:	4a30      	ldr	r2, [pc, #192]	; (80011c0 <main+0x104>)
 80010fe:	4933      	ldr	r1, [pc, #204]	; (80011cc <main+0x110>)
 8001100:	482d      	ldr	r0, [pc, #180]	; (80011b8 <main+0xfc>)
 8001102:	f004 fa05 	bl	8005510 <_ZN7Sim76007sendCmdEPKcS1_j>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if( Sim7600.rxDone_Flag == true ) {
 8001106:	4b2c      	ldr	r3, [pc, #176]	; (80011b8 <main+0xfc>)
 8001108:	7f5b      	ldrb	r3, [r3, #29]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d102      	bne.n	8001114 <main+0x58>
//		  Terminal.println( Sim7600.rxData.c_str() ) ;
		  Sim7600.memreset() ;
 800110e:	482a      	ldr	r0, [pc, #168]	; (80011b8 <main+0xfc>)
 8001110:	f004 f9ea 	bl	80054e8 <_ZN7Sim76008memresetEv>
	  }

	  if( HAL_GPIO_ReadPin( user_btn_GPIO_Port, user_btn_Pin ) == 0 ) {
 8001114:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001118:	482d      	ldr	r0, [pc, #180]	; (80011d0 <main+0x114>)
 800111a:	f001 fbf7 	bl	800290c <HAL_GPIO_ReadPin>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	bf0c      	ite	eq
 8001124:	2301      	moveq	r3, #1
 8001126:	2300      	movne	r3, #0
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d0eb      	beq.n	8001106 <main+0x4a>
		  HAL_Delay( 200 ) ;
 800112e:	20c8      	movs	r0, #200	; 0xc8
 8001130:	f000 fdee 	bl	8001d10 <HAL_Delay>
		  Terminal.println( "(*)(*)(*) Requested write new firmware to flash !" ) ;
 8001134:	4927      	ldr	r1, [pc, #156]	; (80011d4 <main+0x118>)
 8001136:	4821      	ldr	r0, [pc, #132]	; (80011bc <main+0x100>)
 8001138:	f004 fafc 	bl	8005734 <_ZN8Terminal7printlnEPKc>
		  Terminal.println( "Erasing... " ) ;
 800113c:	4926      	ldr	r1, [pc, #152]	; (80011d8 <main+0x11c>)
 800113e:	481f      	ldr	r0, [pc, #124]	; (80011bc <main+0x100>)
 8001140:	f004 faf8 	bl	8005734 <_ZN8Terminal7printlnEPKc>
		  for( int i = 0; i <= 222; i++ ) {
 8001144:	2300      	movs	r3, #0
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2bde      	cmp	r3, #222	; 0xde
 800114c:	dc08      	bgt.n	8001160 <main+0xa4>
			  Flash_erase( 31 + i ) ;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	331f      	adds	r3, #31
 8001152:	4618      	mov	r0, r3
 8001154:	f004 f832 	bl	80051bc <_Z11Flash_erasem>
		  for( int i = 0; i <= 222; i++ ) {
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3301      	adds	r3, #1
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	e7f3      	b.n	8001148 <main+0x8c>
		  }
		  Terminal.print( "Done.\nNow flashing... " ) ;
 8001160:	491e      	ldr	r1, [pc, #120]	; (80011dc <main+0x120>)
 8001162:	4816      	ldr	r0, [pc, #88]	; (80011bc <main+0x100>)
 8001164:	f004 fad0 	bl	8005708 <_ZN8Terminal5printEPKc>
		  if( CF_writeBFFWtoFlash() == true )
 8001168:	f000 f9ee 	bl	8001548 <_Z19CF_writeBFFWtoFlashv>
 800116c:	4603      	mov	r3, r0
 800116e:	2b01      	cmp	r3, #1
 8001170:	bf0c      	ite	eq
 8001172:	2301      	moveq	r3, #1
 8001174:	2300      	movne	r3, #0
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <main+0xc8>
			  Terminal.println( "...Flash successful!" ) ;
 800117c:	4918      	ldr	r1, [pc, #96]	; (80011e0 <main+0x124>)
 800117e:	480f      	ldr	r0, [pc, #60]	; (80011bc <main+0x100>)
 8001180:	f004 fad8 	bl	8005734 <_ZN8Terminal7printlnEPKc>

		  for( int i = 0 ; i < 6 ; i++ ) {
 8001184:	2300      	movs	r3, #0
 8001186:	603b      	str	r3, [r7, #0]
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	2b05      	cmp	r3, #5
 800118c:	dc0c      	bgt.n	80011a8 <main+0xec>
			  HAL_GPIO_TogglePin( user_led_GPIO_Port,  user_led_Pin ) ;
 800118e:	2120      	movs	r1, #32
 8001190:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001194:	f001 fbea 	bl	800296c <HAL_GPIO_TogglePin>
			  HAL_Delay(500) ;
 8001198:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800119c:	f000 fdb8 	bl	8001d10 <HAL_Delay>
		  for( int i = 0 ; i < 6 ; i++ ) {
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	3301      	adds	r3, #1
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	e7ef      	b.n	8001188 <main+0xcc>
		  }
		  HAL_GPIO_WritePin( user_led_GPIO_Port,  user_led_Pin, (GPIO_PinState)0 ) ;
 80011a8:	2200      	movs	r2, #0
 80011aa:	2120      	movs	r1, #32
 80011ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b0:	f001 fbc4 	bl	800293c <HAL_GPIO_WritePin>

	  }
  }
 80011b4:	e7a7      	b.n	8001106 <main+0x4a>
 80011b6:	bf00      	nop
 80011b8:	20000220 	.word	0x20000220
 80011bc:	20000244 	.word	0x20000244
 80011c0:	0800a290 	.word	0x0800a290
 80011c4:	0800a294 	.word	0x0800a294
 80011c8:	0800a298 	.word	0x0800a298
 80011cc:	0800a2a4 	.word	0x0800a2a4
 80011d0:	48000800 	.word	0x48000800
 80011d4:	0800a2b0 	.word	0x0800a2b0
 80011d8:	0800a2e4 	.word	0x0800a2e4
 80011dc:	0800a2f0 	.word	0x0800a2f0
 80011e0:	0800a308 	.word	0x0800a308

080011e4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b0b8      	sub	sp, #224	; 0xe0
 80011e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011ee:	2244      	movs	r2, #68	; 0x44
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f004 fc32 	bl	8005a5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001208:	463b      	mov	r3, r7
 800120a:	2288      	movs	r2, #136	; 0x88
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f004 fc24 	bl	8005a5c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001214:	2302      	movs	r3, #2
 8001216:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800121a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800121e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001222:	2310      	movs	r3, #16
 8001224:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001228:	2300      	movs	r3, #0
 800122a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800122e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001232:	4618      	mov	r0, r3
 8001234:	f001 fc18 	bl	8002a68 <HAL_RCC_OscConfig>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	bf14      	ite	ne
 800123e:	2301      	movne	r3, #1
 8001240:	2300      	moveq	r3, #0
 8001242:	b2db      	uxtb	r3, r3
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <_Z18SystemClock_Configv+0x68>
  {
    Error_Handler();
 8001248:	f000 fa40 	bl	80016cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124c:	230f      	movs	r3, #15
 800124e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001252:	2301      	movs	r3, #1
 8001254:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800126a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f001 ffdf 	bl	8003234 <HAL_RCC_ClockConfig>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	bf14      	ite	ne
 800127c:	2301      	movne	r3, #1
 800127e:	2300      	moveq	r3, #0
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8001286:	f000 fa21 	bl	80016cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 800128a:	2303      	movs	r3, #3
 800128c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800128e:	2300      	movs	r3, #0
 8001290:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001292:	2300      	movs	r3, #0
 8001294:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001296:	463b      	mov	r3, r7
 8001298:	4618      	mov	r0, r3
 800129a:	f002 f9d1 	bl	8003640 <HAL_RCCEx_PeriphCLKConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	bf14      	ite	ne
 80012a4:	2301      	movne	r3, #1
 80012a6:	2300      	moveq	r3, #0
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 80012ae:	f000 fa0d 	bl	80016cc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012b6:	f001 fb81 	bl	80029bc <HAL_PWREx_ControlVoltageScaling>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	bf14      	ite	ne
 80012c0:	2301      	movne	r3, #1
 80012c2:	2300      	moveq	r3, #0
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <_Z18SystemClock_Configv+0xea>
  {
    Error_Handler();
 80012ca:	f000 f9ff 	bl	80016cc <Error_Handler>
  }
}
 80012ce:	bf00      	nop
 80012d0:	37e0      	adds	r7, #224	; 0xe0
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */



/*____________________________________________________________________________________________________________________________________________*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	if( huart->Instance == USART1 )
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a09      	ldr	r2, [pc, #36]	; (800130c <HAL_UART_RxCpltCallback+0x34>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d103      	bne.n	80012f2 <HAL_UART_RxCpltCallback+0x1a>
		Sim7600.irqProcess() ;
 80012ea:	4809      	ldr	r0, [pc, #36]	; (8001310 <HAL_UART_RxCpltCallback+0x38>)
 80012ec:	f004 f8dc 	bl	80054a8 <_ZN7Sim760010irqProcessEv>
	else if( huart->Instance == USART2 )
		Terminal.irqProcess() ;
}
 80012f0:	e007      	b.n	8001302 <HAL_UART_RxCpltCallback+0x2a>
	else if( huart->Instance == USART2 )
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a07      	ldr	r2, [pc, #28]	; (8001314 <HAL_UART_RxCpltCallback+0x3c>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d102      	bne.n	8001302 <HAL_UART_RxCpltCallback+0x2a>
		Terminal.irqProcess() ;
 80012fc:	4806      	ldr	r0, [pc, #24]	; (8001318 <HAL_UART_RxCpltCallback+0x40>)
 80012fe:	f004 f9e3 	bl	80056c8 <_ZN8Terminal10irqProcessEv>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40013800 	.word	0x40013800
 8001310:	20000220 	.word	0x20000220
 8001314:	40004400 	.word	0x40004400
 8001318:	20000244 	.word	0x20000244

0800131c <_Z10parseToHexcc>:

/*____________________________________________________________________________________________________________________________________________*/
/*
 * parse from 2 character type 'A' and 'B' to 0xAB
 */
uint8_t parseToHex( char c0, char c1 ){
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	460a      	mov	r2, r1
 8001326:	71fb      	strb	r3, [r7, #7]
 8001328:	4613      	mov	r3, r2
 800132a:	71bb      	strb	r3, [r7, #6]
	uint8_t result = 0x00 ;
 800132c:	2300      	movs	r3, #0
 800132e:	73fb      	strb	r3, [r7, #15]
    if ('0' <= c0 && c0 <= '9') result = c0 - '0';
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	2b2f      	cmp	r3, #47	; 0x2f
 8001334:	d905      	bls.n	8001342 <_Z10parseToHexcc+0x26>
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	2b39      	cmp	r3, #57	; 0x39
 800133a:	d802      	bhi.n	8001342 <_Z10parseToHexcc+0x26>
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	3b30      	subs	r3, #48	; 0x30
 8001340:	73fb      	strb	r3, [r7, #15]
    if ('a' <= c0 && c0 <= 'f') result = 10 + c0 - 'a';
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	2b60      	cmp	r3, #96	; 0x60
 8001346:	d905      	bls.n	8001354 <_Z10parseToHexcc+0x38>
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	2b66      	cmp	r3, #102	; 0x66
 800134c:	d802      	bhi.n	8001354 <_Z10parseToHexcc+0x38>
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	3b57      	subs	r3, #87	; 0x57
 8001352:	73fb      	strb	r3, [r7, #15]
    if ('A' <= c0 && c0 <= 'F') result = 10 + c0 - 'A';
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	2b40      	cmp	r3, #64	; 0x40
 8001358:	d905      	bls.n	8001366 <_Z10parseToHexcc+0x4a>
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	2b46      	cmp	r3, #70	; 0x46
 800135e:	d802      	bhi.n	8001366 <_Z10parseToHexcc+0x4a>
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	3b37      	subs	r3, #55	; 0x37
 8001364:	73fb      	strb	r3, [r7, #15]

    result <<= 4 ;
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	011b      	lsls	r3, r3, #4
 800136a:	73fb      	strb	r3, [r7, #15]

    if ('0' <= c1 && c1 <= '9') result |= c1 - '0';
 800136c:	79bb      	ldrb	r3, [r7, #6]
 800136e:	2b2f      	cmp	r3, #47	; 0x2f
 8001370:	d90b      	bls.n	800138a <_Z10parseToHexcc+0x6e>
 8001372:	79bb      	ldrb	r3, [r7, #6]
 8001374:	2b39      	cmp	r3, #57	; 0x39
 8001376:	d808      	bhi.n	800138a <_Z10parseToHexcc+0x6e>
 8001378:	79bb      	ldrb	r3, [r7, #6]
 800137a:	3b30      	subs	r3, #48	; 0x30
 800137c:	b2db      	uxtb	r3, r3
 800137e:	b25a      	sxtb	r2, r3
 8001380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001384:	4313      	orrs	r3, r2
 8001386:	b25b      	sxtb	r3, r3
 8001388:	73fb      	strb	r3, [r7, #15]
    if ('a' <= c1 && c1 <= 'f') result |= 10 + c1 - 'a';
 800138a:	79bb      	ldrb	r3, [r7, #6]
 800138c:	2b60      	cmp	r3, #96	; 0x60
 800138e:	d90b      	bls.n	80013a8 <_Z10parseToHexcc+0x8c>
 8001390:	79bb      	ldrb	r3, [r7, #6]
 8001392:	2b66      	cmp	r3, #102	; 0x66
 8001394:	d808      	bhi.n	80013a8 <_Z10parseToHexcc+0x8c>
 8001396:	79bb      	ldrb	r3, [r7, #6]
 8001398:	3b57      	subs	r3, #87	; 0x57
 800139a:	b2db      	uxtb	r3, r3
 800139c:	b25a      	sxtb	r2, r3
 800139e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	b25b      	sxtb	r3, r3
 80013a6:	73fb      	strb	r3, [r7, #15]
    if ('A' <= c1 && c1 <= 'F') result |= 10 + c1 - 'A';
 80013a8:	79bb      	ldrb	r3, [r7, #6]
 80013aa:	2b40      	cmp	r3, #64	; 0x40
 80013ac:	d90b      	bls.n	80013c6 <_Z10parseToHexcc+0xaa>
 80013ae:	79bb      	ldrb	r3, [r7, #6]
 80013b0:	2b46      	cmp	r3, #70	; 0x46
 80013b2:	d808      	bhi.n	80013c6 <_Z10parseToHexcc+0xaa>
 80013b4:	79bb      	ldrb	r3, [r7, #6]
 80013b6:	3b37      	subs	r3, #55	; 0x37
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	b25a      	sxtb	r2, r3
 80013bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	b25b      	sxtb	r3, r3
 80013c4:	73fb      	strb	r3, [r7, #15]

    return result ;
 80013c6:	7bfb      	ldrb	r3, [r7, #15]

}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <_Z16CS_getDoubleWordm>:



/*____________________________________________________________________________________________________________________________________________*/
BF_dWordHArrTypeDef CS_getDoubleWord( uint32_t _address ) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b0aa      	sub	sp, #168	; 0xa8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
	static BF_dWordHArrTypeDef result = { 0, 0 } ;

	result.isLastDWord = false ;
 80013de:	4b52      	ldr	r3, [pc, #328]	; (8001528 <_Z16CS_getDoubleWordm+0x154>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
	memset( result.data, 0x00, 8 ) ;
 80013e4:	2208      	movs	r2, #8
 80013e6:	2100      	movs	r1, #0
 80013e8:	4850      	ldr	r0, [pc, #320]	; (800152c <_Z16CS_getDoubleWordm+0x158>)
 80013ea:	f004 fb37 	bl	8005a5c <memset>

	// Tạo câu lệnh CMD để lấy dữ liệu recode thứ location
	char cmd[ strlen( FIRMWARE_PATH ) + 30 ] = {0} ;
 80013ee:	2300      	movs	r3, #0
 80013f0:	673b      	str	r3, [r7, #112]	; 0x70
 80013f2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013f6:	222b      	movs	r2, #43	; 0x2b
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f004 fb2e 	bl	8005a5c <memset>
	sprintf( cmd, "AT+CFTRANTX=\"%s\",%lu,8", FIRMWARE_PATH, _address ) ;
 8001400:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	4a4a      	ldr	r2, [pc, #296]	; (8001530 <_Z16CS_getDoubleWordm+0x15c>)
 8001408:	494a      	ldr	r1, [pc, #296]	; (8001534 <_Z16CS_getDoubleWordm+0x160>)
 800140a:	f005 faad 	bl	8006968 <siprintf>

//	if( Sim7600.sendCmd( cmd, "+CFTRANTX: 0", 5000 ) == false ) {
//		Terminal.println( "Get SIM7600E data failed!" ) ;
//		while(1) {} ;
//	}
	Sim7600.sendCmd( cmd, "+CFTRANTX: DATA", 5000 ) ;
 800140e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001412:	f241 3388 	movw	r3, #5000	; 0x1388
 8001416:	4a48      	ldr	r2, [pc, #288]	; (8001538 <_Z16CS_getDoubleWordm+0x164>)
 8001418:	4848      	ldr	r0, [pc, #288]	; (800153c <_Z16CS_getDoubleWordm+0x168>)
 800141a:	f004 f879 	bl	8005510 <_ZN7Sim76007sendCmdEPKcS1_j>
	HAL_Delay(3) ;
 800141e:	2003      	movs	r0, #3
 8001420:	f000 fc76 	bl	8001d10 <HAL_Delay>

	char dataZone[100] = {0} ;
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	2260      	movs	r2, #96	; 0x60
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f004 fb13 	bl	8005a5c <memset>
	memcpy( dataZone, strstr( Sim7600.rxData.c_str(), "DATA" ), 100 ) ;
 8001436:	4842      	ldr	r0, [pc, #264]	; (8001540 <_Z16CS_getDoubleWordm+0x16c>)
 8001438:	f004 fa82 	bl	8005940 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800143c:	4603      	mov	r3, r0
 800143e:	4941      	ldr	r1, [pc, #260]	; (8001544 <_Z16CS_getDoubleWordm+0x170>)
 8001440:	4618      	mov	r0, r3
 8001442:	f005 fab1 	bl	80069a8 <strstr>
 8001446:	4602      	mov	r2, r0
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	4611      	mov	r1, r2
 800144e:	2264      	movs	r2, #100	; 0x64
 8001450:	4618      	mov	r0, r3
 8001452:	f004 fadb 	bl	8005a0c <memcpy>

	// Check if is last double word of .bin file
	uint8_t restNbData = parseToHex( dataZone[6], dataZone[7] ) ;
 8001456:	7cbb      	ldrb	r3, [r7, #18]
 8001458:	7cfa      	ldrb	r2, [r7, #19]
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff5d 	bl	800131c <_Z10parseToHexcc>
 8001462:	4603      	mov	r3, r0
 8001464:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	if( strstr( dataZone, "DATA" ) == NULL )
 8001468:	f107 030c 	add.w	r3, r7, #12
 800146c:	4935      	ldr	r1, [pc, #212]	; (8001544 <_Z16CS_getDoubleWordm+0x170>)
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fe16 	bl	80010a0 <_ZSt6strstrPcPKc>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	bf0c      	ite	eq
 800147a:	2301      	moveq	r3, #1
 800147c:	2300      	movne	r3, #0
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <_Z16CS_getDoubleWordm+0xb8>
		result.isLastDWord = true ;
 8001484:	4b28      	ldr	r3, [pc, #160]	; (8001528 <_Z16CS_getDoubleWordm+0x154>)
 8001486:	2201      	movs	r2, #1
 8001488:	701a      	strb	r2, [r3, #0]
 800148a:	e040      	b.n	800150e <_Z16CS_getDoubleWordm+0x13a>

	else if( restNbData < 0x08  ) {
 800148c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001490:	2b07      	cmp	r3, #7
 8001492:	d820      	bhi.n	80014d6 <_Z16CS_getDoubleWordm+0x102>
		result.isLastDWord = true ;
 8001494:	4b24      	ldr	r3, [pc, #144]	; (8001528 <_Z16CS_getDoubleWordm+0x154>)
 8001496:	2201      	movs	r2, #1
 8001498:	701a      	strb	r2, [r3, #0]
		for( int i = 0 ; i < restNbData ; i++ )
 800149a:	2300      	movs	r3, #0
 800149c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80014a0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80014a4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80014a8:	429a      	cmp	r2, r3
 80014aa:	da30      	bge.n	800150e <_Z16CS_getDoubleWordm+0x13a>
			result.data[i] = dataZone[ i + 9 ] ;
 80014ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80014b0:	3309      	adds	r3, #9
 80014b2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80014b6:	4413      	add	r3, r2
 80014b8:	f813 1c9c 	ldrb.w	r1, [r3, #-156]
 80014bc:	4a1a      	ldr	r2, [pc, #104]	; (8001528 <_Z16CS_getDoubleWordm+0x154>)
 80014be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80014c2:	4413      	add	r3, r2
 80014c4:	3301      	adds	r3, #1
 80014c6:	460a      	mov	r2, r1
 80014c8:	701a      	strb	r2, [r3, #0]
		for( int i = 0 ; i < restNbData ; i++ )
 80014ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80014ce:	3301      	adds	r3, #1
 80014d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80014d4:	e7e4      	b.n	80014a0 <_Z16CS_getDoubleWordm+0xcc>

	// nếu không thì cứ trả về bình thường
	}else {
		for( int i = 0 ; i < 8 ; i++ )
 80014d6:	2300      	movs	r3, #0
 80014d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80014dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80014e0:	2b07      	cmp	r3, #7
 80014e2:	dc14      	bgt.n	800150e <_Z16CS_getDoubleWordm+0x13a>
			result.data[i] = dataZone[ i + 9 ] ;
 80014e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80014e8:	3309      	adds	r3, #9
 80014ea:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80014ee:	4413      	add	r3, r2
 80014f0:	f813 1c9c 	ldrb.w	r1, [r3, #-156]
 80014f4:	4a0c      	ldr	r2, [pc, #48]	; (8001528 <_Z16CS_getDoubleWordm+0x154>)
 80014f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80014fa:	4413      	add	r3, r2
 80014fc:	3301      	adds	r3, #1
 80014fe:	460a      	mov	r2, r1
 8001500:	701a      	strb	r2, [r3, #0]
		for( int i = 0 ; i < 8 ; i++ )
 8001502:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001506:	3301      	adds	r3, #1
 8001508:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800150c:	e7e6      	b.n	80014dc <_Z16CS_getDoubleWordm+0x108>
	}


	return result ;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4905      	ldr	r1, [pc, #20]	; (8001528 <_Z16CS_getDoubleWordm+0x154>)
 8001512:	461a      	mov	r2, r3
 8001514:	460b      	mov	r3, r1
 8001516:	cb03      	ldmia	r3!, {r0, r1}
 8001518:	6010      	str	r0, [r2, #0]
 800151a:	6051      	str	r1, [r2, #4]
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	7213      	strb	r3, [r2, #8]
}
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	37a8      	adds	r7, #168	; 0xa8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000268 	.word	0x20000268
 800152c:	20000269 	.word	0x20000269
 8001530:	0800a320 	.word	0x0800a320
 8001534:	0800a334 	.word	0x0800a334
 8001538:	0800a34c 	.word	0x0800a34c
 800153c:	20000220 	.word	0x20000220
 8001540:	20000224 	.word	0x20000224
 8001544:	0800a35c 	.word	0x0800a35c

08001548 <_Z19CF_writeBFFWtoFlashv>:



/*____________________________________________________________________________________________________________________________________________*/
bool CF_writeBFFWtoFlash() {
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
	bool result = false ;
 800154e:	2300      	movs	r3, #0
 8001550:	76fb      	strb	r3, [r7, #27]
	uint32_t address = 0x00 ;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
	BF_dWordHArrTypeDef wDWord = { 0, 0 } ;
 8001556:	2300      	movs	r3, #0
 8001558:	743b      	strb	r3, [r7, #16]
 800155a:	4b4f      	ldr	r3, [pc, #316]	; (8001698 <_Z19CF_writeBFFWtoFlashv+0x150>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	747b      	strb	r3, [r7, #17]
 8001560:	f107 0312 	add.w	r3, r7, #18
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	f8c3 2003 	str.w	r2, [r3, #3]
	while(1) {
		// Lấy double word
		wDWord = CS_getDoubleWord( address ) ;
 800156c:	463b      	mov	r3, r7
 800156e:	69f9      	ldr	r1, [r7, #28]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff2f 	bl	80013d4 <_Z16CS_getDoubleWordm>
 8001576:	f107 0310 	add.w	r3, r7, #16
 800157a:	463a      	mov	r2, r7
 800157c:	6810      	ldr	r0, [r2, #0]
 800157e:	6851      	ldr	r1, [r2, #4]
 8001580:	c303      	stmia	r3!, {r0, r1}
 8001582:	7a12      	ldrb	r2, [r2, #8]
 8001584:	701a      	strb	r2, [r3, #0]
//		Terminal.println( "Get double word done!" ) ;

		// Kiểm tra có phải đã đến data cuối cùng chưa ?
		if( wDWord.isLastDWord == true ) {
 8001586:	7c3b      	ldrb	r3, [r7, #16]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d111      	bne.n	80015b0 <_Z19CF_writeBFFWtoFlashv+0x68>
			Flash_write_doubleWord( address + firmwareBaseAddress, (const uint8_t*)wDWord.data ) ;
 800158c:	4b43      	ldr	r3, [pc, #268]	; (800169c <_Z19CF_writeBFFWtoFlashv+0x154>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	441a      	add	r2, r3
 8001594:	f107 0310 	add.w	r3, r7, #16
 8001598:	3301      	adds	r3, #1
 800159a:	4619      	mov	r1, r3
 800159c:	4610      	mov	r0, r2
 800159e:	f003 fe3d 	bl	800521c <_Z22Flash_write_doubleWordmPKh>
			result = true ;
 80015a2:	2301      	movs	r3, #1
 80015a4:	76fb      	strb	r3, [r7, #27]
			break ;
 80015a6:	bf00      	nop
		HAL_GPIO_TogglePin( user_led_GPIO_Port, user_led_Pin ) ;


	}

	if( result == true )
 80015a8:	7efb      	ldrb	r3, [r7, #27]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d16f      	bne.n	800168e <_Z19CF_writeBFFWtoFlashv+0x146>
 80015ae:	e06a      	b.n	8001686 <_Z19CF_writeBFFWtoFlashv+0x13e>
			Flash_write_doubleWord( address + firmwareBaseAddress, (const uint8_t*)wDWord.data ) ;
 80015b0:	4b3a      	ldr	r3, [pc, #232]	; (800169c <_Z19CF_writeBFFWtoFlashv+0x154>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	441a      	add	r2, r3
 80015b8:	f107 0310 	add.w	r3, r7, #16
 80015bc:	3301      	adds	r3, #1
 80015be:	4619      	mov	r1, r3
 80015c0:	4610      	mov	r0, r2
 80015c2:	f003 fe2b 	bl	800521c <_Z22Flash_write_doubleWordmPKh>
			address += 0x08 ;
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3308      	adds	r3, #8
 80015ca:	61fb      	str	r3, [r7, #28]
		if( address == 0x0C60 )
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f5b3 6f46 	cmp.w	r3, #3168	; 0xc60
 80015d2:	d104      	bne.n	80015de <_Z19CF_writeBFFWtoFlashv+0x96>
			Terminal.println( "...10%..." ) ;
 80015d4:	4932      	ldr	r1, [pc, #200]	; (80016a0 <_Z19CF_writeBFFWtoFlashv+0x158>)
 80015d6:	4833      	ldr	r0, [pc, #204]	; (80016a4 <_Z19CF_writeBFFWtoFlashv+0x15c>)
 80015d8:	f004 f8ac 	bl	8005734 <_ZN8Terminal7printlnEPKc>
 80015dc:	e04d      	b.n	800167a <_Z19CF_writeBFFWtoFlashv+0x132>
		else if( address == 0x18E0 )
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	f5b3 5fc7 	cmp.w	r3, #6368	; 0x18e0
 80015e4:	d104      	bne.n	80015f0 <_Z19CF_writeBFFWtoFlashv+0xa8>
			Terminal.println( "...20%..." ) ;
 80015e6:	4930      	ldr	r1, [pc, #192]	; (80016a8 <_Z19CF_writeBFFWtoFlashv+0x160>)
 80015e8:	482e      	ldr	r0, [pc, #184]	; (80016a4 <_Z19CF_writeBFFWtoFlashv+0x15c>)
 80015ea:	f004 f8a3 	bl	8005734 <_ZN8Terminal7printlnEPKc>
 80015ee:	e044      	b.n	800167a <_Z19CF_writeBFFWtoFlashv+0x132>
		else if( address == 0x2560 )
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f242 5260 	movw	r2, #9568	; 0x2560
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d104      	bne.n	8001604 <_Z19CF_writeBFFWtoFlashv+0xbc>
			Terminal.println( "...30%..." ) ;
 80015fa:	492c      	ldr	r1, [pc, #176]	; (80016ac <_Z19CF_writeBFFWtoFlashv+0x164>)
 80015fc:	4829      	ldr	r0, [pc, #164]	; (80016a4 <_Z19CF_writeBFFWtoFlashv+0x15c>)
 80015fe:	f004 f899 	bl	8005734 <_ZN8Terminal7printlnEPKc>
 8001602:	e03a      	b.n	800167a <_Z19CF_writeBFFWtoFlashv+0x132>
		else if( address == 0x31E0 )
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f243 12e0 	movw	r2, #12768	; 0x31e0
 800160a:	4293      	cmp	r3, r2
 800160c:	d104      	bne.n	8001618 <_Z19CF_writeBFFWtoFlashv+0xd0>
			Terminal.println( "...40%..." ) ;
 800160e:	4928      	ldr	r1, [pc, #160]	; (80016b0 <_Z19CF_writeBFFWtoFlashv+0x168>)
 8001610:	4824      	ldr	r0, [pc, #144]	; (80016a4 <_Z19CF_writeBFFWtoFlashv+0x15c>)
 8001612:	f004 f88f 	bl	8005734 <_ZN8Terminal7printlnEPKc>
 8001616:	e030      	b.n	800167a <_Z19CF_writeBFFWtoFlashv+0x132>
		else if( address == 0x3E60 )
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f643 6260 	movw	r2, #15968	; 0x3e60
 800161e:	4293      	cmp	r3, r2
 8001620:	d104      	bne.n	800162c <_Z19CF_writeBFFWtoFlashv+0xe4>
			Terminal.println( "...50%..." ) ;
 8001622:	4924      	ldr	r1, [pc, #144]	; (80016b4 <_Z19CF_writeBFFWtoFlashv+0x16c>)
 8001624:	481f      	ldr	r0, [pc, #124]	; (80016a4 <_Z19CF_writeBFFWtoFlashv+0x15c>)
 8001626:	f004 f885 	bl	8005734 <_ZN8Terminal7printlnEPKc>
 800162a:	e026      	b.n	800167a <_Z19CF_writeBFFWtoFlashv+0x132>
		else if( address == 0x4AE0 )
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f644 22e0 	movw	r2, #19168	; 0x4ae0
 8001632:	4293      	cmp	r3, r2
 8001634:	d104      	bne.n	8001640 <_Z19CF_writeBFFWtoFlashv+0xf8>
			Terminal.println( "...60%..." ) ;
 8001636:	4920      	ldr	r1, [pc, #128]	; (80016b8 <_Z19CF_writeBFFWtoFlashv+0x170>)
 8001638:	481a      	ldr	r0, [pc, #104]	; (80016a4 <_Z19CF_writeBFFWtoFlashv+0x15c>)
 800163a:	f004 f87b 	bl	8005734 <_ZN8Terminal7printlnEPKc>
 800163e:	e01c      	b.n	800167a <_Z19CF_writeBFFWtoFlashv+0x132>
		else if( address == 0x5760 )
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f245 7260 	movw	r2, #22368	; 0x5760
 8001646:	4293      	cmp	r3, r2
 8001648:	d104      	bne.n	8001654 <_Z19CF_writeBFFWtoFlashv+0x10c>
			Terminal.println( "...70%..." ) ;
 800164a:	491c      	ldr	r1, [pc, #112]	; (80016bc <_Z19CF_writeBFFWtoFlashv+0x174>)
 800164c:	4815      	ldr	r0, [pc, #84]	; (80016a4 <_Z19CF_writeBFFWtoFlashv+0x15c>)
 800164e:	f004 f871 	bl	8005734 <_ZN8Terminal7printlnEPKc>
 8001652:	e012      	b.n	800167a <_Z19CF_writeBFFWtoFlashv+0x132>
		else if( address == 0x63E0 )
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f246 32e0 	movw	r2, #25568	; 0x63e0
 800165a:	4293      	cmp	r3, r2
 800165c:	d104      	bne.n	8001668 <_Z19CF_writeBFFWtoFlashv+0x120>
			Terminal.println( "...80%..." ) ;
 800165e:	4918      	ldr	r1, [pc, #96]	; (80016c0 <_Z19CF_writeBFFWtoFlashv+0x178>)
 8001660:	4810      	ldr	r0, [pc, #64]	; (80016a4 <_Z19CF_writeBFFWtoFlashv+0x15c>)
 8001662:	f004 f867 	bl	8005734 <_ZN8Terminal7printlnEPKc>
 8001666:	e008      	b.n	800167a <_Z19CF_writeBFFWtoFlashv+0x132>
		else if( address == 0x76A0 )
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f247 62a0 	movw	r2, #30368	; 0x76a0
 800166e:	4293      	cmp	r3, r2
 8001670:	d103      	bne.n	800167a <_Z19CF_writeBFFWtoFlashv+0x132>
			Terminal.println( "...90%..." ) ;
 8001672:	4914      	ldr	r1, [pc, #80]	; (80016c4 <_Z19CF_writeBFFWtoFlashv+0x17c>)
 8001674:	480b      	ldr	r0, [pc, #44]	; (80016a4 <_Z19CF_writeBFFWtoFlashv+0x15c>)
 8001676:	f004 f85d 	bl	8005734 <_ZN8Terminal7printlnEPKc>
		HAL_GPIO_TogglePin( user_led_GPIO_Port, user_led_Pin ) ;
 800167a:	2120      	movs	r1, #32
 800167c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001680:	f001 f974 	bl	800296c <HAL_GPIO_TogglePin>
		wDWord = CS_getDoubleWord( address ) ;
 8001684:	e772      	b.n	800156c <_Z19CF_writeBFFWtoFlashv+0x24>
		Terminal.println( "...100%... Done." ) ;
 8001686:	4910      	ldr	r1, [pc, #64]	; (80016c8 <_Z19CF_writeBFFWtoFlashv+0x180>)
 8001688:	4806      	ldr	r0, [pc, #24]	; (80016a4 <_Z19CF_writeBFFWtoFlashv+0x15c>)
 800168a:	f004 f853 	bl	8005734 <_ZN8Terminal7printlnEPKc>

	return result ;
 800168e:	7efb      	ldrb	r3, [r7, #27]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3720      	adds	r7, #32
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	0800a3e4 	.word	0x0800a3e4
 800169c:	20000000 	.word	0x20000000
 80016a0:	0800a364 	.word	0x0800a364
 80016a4:	20000244 	.word	0x20000244
 80016a8:	0800a370 	.word	0x0800a370
 80016ac:	0800a37c 	.word	0x0800a37c
 80016b0:	0800a388 	.word	0x0800a388
 80016b4:	0800a394 	.word	0x0800a394
 80016b8:	0800a3a0 	.word	0x0800a3a0
 80016bc:	0800a3ac 	.word	0x0800a3ac
 80016c0:	0800a3b8 	.word	0x0800a3b8
 80016c4:	0800a3c4 	.word	0x0800a3c4
 80016c8:	0800a3d0 	.word	0x0800a3d0

080016cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d0:	b672      	cpsid	i
}
 80016d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <Error_Handler+0x8>
	...

080016d8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d10c      	bne.n	8001702 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d107      	bne.n	8001702 <_Z41__static_initialization_and_destruction_0ii+0x2a>
Sim7600 Sim7600( &huart1 ) ;
 80016f2:	490d      	ldr	r1, [pc, #52]	; (8001728 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80016f4:	480d      	ldr	r0, [pc, #52]	; (800172c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80016f6:	f003 fe85 	bl	8005404 <_ZN7Sim7600C1EP20__UART_HandleTypeDef>
Terminal Terminal( &huart2 ) ;
 80016fa:	490d      	ldr	r1, [pc, #52]	; (8001730 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80016fc:	480d      	ldr	r0, [pc, #52]	; (8001734 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80016fe:	f003 ff91 	bl	8005624 <_ZN8TerminalC1EP20__UART_HandleTypeDef>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d10a      	bne.n	800171e <_Z41__static_initialization_and_destruction_0ii+0x46>
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800170e:	4293      	cmp	r3, r2
 8001710:	d105      	bne.n	800171e <_Z41__static_initialization_and_destruction_0ii+0x46>
 8001712:	4808      	ldr	r0, [pc, #32]	; (8001734 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001714:	f003 ffa4 	bl	8005660 <_ZN8TerminalD1Ev>
Sim7600 Sim7600( &huart1 ) ;
 8001718:	4804      	ldr	r0, [pc, #16]	; (800172c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800171a:	f003 fe91 	bl	8005440 <_ZN7Sim7600D1Ev>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000288 	.word	0x20000288
 800172c:	20000220 	.word	0x20000220
 8001730:	2000030c 	.word	0x2000030c
 8001734:	20000244 	.word	0x20000244

08001738 <_GLOBAL__sub_I_Sim7600>:
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
 800173c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001740:	2001      	movs	r0, #1
 8001742:	f7ff ffc9 	bl	80016d8 <_Z41__static_initialization_and_destruction_0ii>
 8001746:	bd80      	pop	{r7, pc}

08001748 <_GLOBAL__sub_D_Sim7600>:
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
 800174c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001750:	2000      	movs	r0, #0
 8001752:	f7ff ffc1 	bl	80016d8 <_Z41__static_initialization_and_destruction_0ii>
 8001756:	bd80      	pop	{r7, pc}

08001758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175e:	4b0f      	ldr	r3, [pc, #60]	; (800179c <HAL_MspInit+0x44>)
 8001760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001762:	4a0e      	ldr	r2, [pc, #56]	; (800179c <HAL_MspInit+0x44>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6613      	str	r3, [r2, #96]	; 0x60
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <HAL_MspInit+0x44>)
 800176c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <HAL_MspInit+0x44>)
 8001778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177a:	4a08      	ldr	r2, [pc, #32]	; (800179c <HAL_MspInit+0x44>)
 800177c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001780:	6593      	str	r3, [r2, #88]	; 0x58
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_MspInit+0x44>)
 8001784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178a:	603b      	str	r3, [r7, #0]
 800178c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40021000 	.word	0x40021000

080017a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <NMI_Handler+0x4>

080017a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017aa:	e7fe      	b.n	80017aa <HardFault_Handler+0x4>

080017ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <MemManage_Handler+0x4>

080017b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b6:	e7fe      	b.n	80017b6 <BusFault_Handler+0x4>

080017b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017bc:	e7fe      	b.n	80017bc <UsageFault_Handler+0x4>

080017be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ec:	f000 fa70 	bl	8001cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017f8:	4802      	ldr	r0, [pc, #8]	; (8001804 <USART1_IRQHandler+0x10>)
 80017fa:	f002 fd03 	bl	8004204 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000288 	.word	0x20000288

08001808 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800180c:	4802      	ldr	r0, [pc, #8]	; (8001818 <USART2_IRQHandler+0x10>)
 800180e:	f002 fcf9 	bl	8004204 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	2000030c 	.word	0x2000030c

0800181c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
	return 1;
 8001820:	2301      	movs	r3, #1
}
 8001822:	4618      	mov	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <_kill>:

int _kill(int pid, int sig)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001836:	f004 f8af 	bl	8005998 <__errno>
 800183a:	4603      	mov	r3, r0
 800183c:	2216      	movs	r2, #22
 800183e:	601a      	str	r2, [r3, #0]
	return -1;
 8001840:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <_exit>:

void _exit (int status)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001854:	f04f 31ff 	mov.w	r1, #4294967295
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff ffe7 	bl	800182c <_kill>
	while (1) {}		/* Make sure we hang here */
 800185e:	e7fe      	b.n	800185e <_exit+0x12>

08001860 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	e00a      	b.n	8001888 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001872:	f3af 8000 	nop.w
 8001876:	4601      	mov	r1, r0
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	1c5a      	adds	r2, r3, #1
 800187c:	60ba      	str	r2, [r7, #8]
 800187e:	b2ca      	uxtb	r2, r1
 8001880:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	3301      	adds	r3, #1
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	429a      	cmp	r2, r3
 800188e:	dbf0      	blt.n	8001872 <_read+0x12>
	}

return len;
 8001890:	687b      	ldr	r3, [r7, #4]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b086      	sub	sp, #24
 800189e:	af00      	add	r7, sp, #0
 80018a0:	60f8      	str	r0, [r7, #12]
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	e009      	b.n	80018c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	60ba      	str	r2, [r7, #8]
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	3301      	adds	r3, #1
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	dbf1      	blt.n	80018ac <_write+0x12>
	}
	return len;
 80018c8:	687b      	ldr	r3, [r7, #4]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <_close>:

int _close(int file)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
	return -1;
 80018da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018de:	4618      	mov	r0, r3
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018fa:	605a      	str	r2, [r3, #4]
	return 0;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <_isatty>:

int _isatty(int file)
{
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
	return 1;
 8001912:	2301      	movs	r3, #1
}
 8001914:	4618      	mov	r0, r3
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
	return 0;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
	...

0800193c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001944:	4a14      	ldr	r2, [pc, #80]	; (8001998 <_sbrk+0x5c>)
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <_sbrk+0x60>)
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001950:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d102      	bne.n	800195e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <_sbrk+0x64>)
 800195a:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <_sbrk+0x68>)
 800195c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <_sbrk+0x64>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	429a      	cmp	r2, r3
 800196a:	d207      	bcs.n	800197c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800196c:	f004 f814 	bl	8005998 <__errno>
 8001970:	4603      	mov	r3, r0
 8001972:	220c      	movs	r2, #12
 8001974:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001976:	f04f 33ff 	mov.w	r3, #4294967295
 800197a:	e009      	b.n	8001990 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <_sbrk+0x64>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001982:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <_sbrk+0x64>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	4a05      	ldr	r2, [pc, #20]	; (80019a0 <_sbrk+0x64>)
 800198c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800198e:	68fb      	ldr	r3, [r7, #12]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20018000 	.word	0x20018000
 800199c:	00000400 	.word	0x00000400
 80019a0:	20000274 	.word	0x20000274
 80019a4:	200003a8 	.word	0x200003a8

080019a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019ac:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <SystemInit+0x5c>)
 80019ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019b2:	4a14      	ldr	r2, [pc, #80]	; (8001a04 <SystemInit+0x5c>)
 80019b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80019bc:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <SystemInit+0x60>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a11      	ldr	r2, [pc, #68]	; (8001a08 <SystemInit+0x60>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80019c8:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <SystemInit+0x60>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80019ce:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <SystemInit+0x60>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a0d      	ldr	r2, [pc, #52]	; (8001a08 <SystemInit+0x60>)
 80019d4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80019d8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80019dc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80019de:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <SystemInit+0x60>)
 80019e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019e4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019e6:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <SystemInit+0x60>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a07      	ldr	r2, [pc, #28]	; (8001a08 <SystemInit+0x60>)
 80019ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80019f2:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <SystemInit+0x60>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000ed00 	.word	0xe000ed00
 8001a08:	40021000 	.word	0x40021000

08001a0c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a10:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <MX_USART1_UART_Init+0x58>)
 8001a12:	4a15      	ldr	r2, [pc, #84]	; (8001a68 <MX_USART1_UART_Init+0x5c>)
 8001a14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a16:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <MX_USART1_UART_Init+0x58>)
 8001a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <MX_USART1_UART_Init+0x58>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a24:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <MX_USART1_UART_Init+0x58>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <MX_USART1_UART_Init+0x58>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <MX_USART1_UART_Init+0x58>)
 8001a32:	220c      	movs	r2, #12
 8001a34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a36:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <MX_USART1_UART_Init+0x58>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <MX_USART1_UART_Init+0x58>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a42:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <MX_USART1_UART_Init+0x58>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <MX_USART1_UART_Init+0x58>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a4e:	4805      	ldr	r0, [pc, #20]	; (8001a64 <MX_USART1_UART_Init+0x58>)
 8001a50:	f002 fab2 	bl	8003fb8 <HAL_UART_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a5a:	f7ff fe37 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000288 	.word	0x20000288
 8001a68:	40013800 	.word	0x40013800

08001a6c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a70:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <MX_USART2_UART_Init+0x58>)
 8001a72:	4a15      	ldr	r2, [pc, #84]	; (8001ac8 <MX_USART2_UART_Init+0x5c>)
 8001a74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a76:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <MX_USART2_UART_Init+0x58>)
 8001a78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <MX_USART2_UART_Init+0x58>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a84:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <MX_USART2_UART_Init+0x58>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <MX_USART2_UART_Init+0x58>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <MX_USART2_UART_Init+0x58>)
 8001a92:	220c      	movs	r2, #12
 8001a94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a96:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <MX_USART2_UART_Init+0x58>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a9c:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <MX_USART2_UART_Init+0x58>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <MX_USART2_UART_Init+0x58>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <MX_USART2_UART_Init+0x58>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aae:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <MX_USART2_UART_Init+0x58>)
 8001ab0:	f002 fa82 	bl	8003fb8 <HAL_UART_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001aba:	f7ff fe07 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	2000030c 	.word	0x2000030c
 8001ac8:	40004400 	.word	0x40004400

08001acc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08c      	sub	sp, #48	; 0x30
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 031c 	add.w	r3, r7, #28
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a36      	ldr	r2, [pc, #216]	; (8001bc4 <HAL_UART_MspInit+0xf8>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d130      	bne.n	8001b50 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aee:	4b36      	ldr	r3, [pc, #216]	; (8001bc8 <HAL_UART_MspInit+0xfc>)
 8001af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af2:	4a35      	ldr	r2, [pc, #212]	; (8001bc8 <HAL_UART_MspInit+0xfc>)
 8001af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af8:	6613      	str	r3, [r2, #96]	; 0x60
 8001afa:	4b33      	ldr	r3, [pc, #204]	; (8001bc8 <HAL_UART_MspInit+0xfc>)
 8001afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b02:	61bb      	str	r3, [r7, #24]
 8001b04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b06:	4b30      	ldr	r3, [pc, #192]	; (8001bc8 <HAL_UART_MspInit+0xfc>)
 8001b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0a:	4a2f      	ldr	r2, [pc, #188]	; (8001bc8 <HAL_UART_MspInit+0xfc>)
 8001b0c:	f043 0302 	orr.w	r3, r3, #2
 8001b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b12:	4b2d      	ldr	r3, [pc, #180]	; (8001bc8 <HAL_UART_MspInit+0xfc>)
 8001b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SIM7600_TX_Pin|SIM7600_RX_Pin;
 8001b1e:	23c0      	movs	r3, #192	; 0xc0
 8001b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b2e:	2307      	movs	r3, #7
 8001b30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b32:	f107 031c 	add.w	r3, r7, #28
 8001b36:	4619      	mov	r1, r3
 8001b38:	4824      	ldr	r0, [pc, #144]	; (8001bcc <HAL_UART_MspInit+0x100>)
 8001b3a:	f000 fd3d 	bl	80025b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2100      	movs	r1, #0
 8001b42:	2025      	movs	r0, #37	; 0x25
 8001b44:	f000 f9e3 	bl	8001f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b48:	2025      	movs	r0, #37	; 0x25
 8001b4a:	f000 f9fc 	bl	8001f46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b4e:	e035      	b.n	8001bbc <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a1e      	ldr	r2, [pc, #120]	; (8001bd0 <HAL_UART_MspInit+0x104>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d130      	bne.n	8001bbc <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b5a:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <HAL_UART_MspInit+0xfc>)
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5e:	4a1a      	ldr	r2, [pc, #104]	; (8001bc8 <HAL_UART_MspInit+0xfc>)
 8001b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b64:	6593      	str	r3, [r2, #88]	; 0x58
 8001b66:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <HAL_UART_MspInit+0xfc>)
 8001b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b72:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <HAL_UART_MspInit+0xfc>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b76:	4a14      	ldr	r2, [pc, #80]	; (8001bc8 <HAL_UART_MspInit+0xfc>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_UART_MspInit+0xfc>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TERMINAL_TX_Pin|TERMINAL_RX_Pin;
 8001b8a:	230c      	movs	r3, #12
 8001b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b96:	2303      	movs	r3, #3
 8001b98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b9a:	2307      	movs	r3, #7
 8001b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9e:	f107 031c 	add.w	r3, r7, #28
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba8:	f000 fd06 	bl	80025b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001bac:	2200      	movs	r2, #0
 8001bae:	2100      	movs	r1, #0
 8001bb0:	2026      	movs	r0, #38	; 0x26
 8001bb2:	f000 f9ac 	bl	8001f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bb6:	2026      	movs	r0, #38	; 0x26
 8001bb8:	f000 f9c5 	bl	8001f46 <HAL_NVIC_EnableIRQ>
}
 8001bbc:	bf00      	nop
 8001bbe:	3730      	adds	r7, #48	; 0x30
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40013800 	.word	0x40013800
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	48000400 	.word	0x48000400
 8001bd0:	40004400 	.word	0x40004400

08001bd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bd8:	f7ff fee6 	bl	80019a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001bdc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001bde:	e003      	b.n	8001be8 <LoopCopyDataInit>

08001be0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001be2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001be4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001be6:	3104      	adds	r1, #4

08001be8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001be8:	480a      	ldr	r0, [pc, #40]	; (8001c14 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001bec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001bee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001bf0:	d3f6      	bcc.n	8001be0 <CopyDataInit>
	ldr	r2, =_sbss
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001bf4:	e002      	b.n	8001bfc <LoopFillZerobss>

08001bf6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001bf6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001bf8:	f842 3b04 	str.w	r3, [r2], #4

08001bfc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <LoopForever+0x16>)
	cmp	r2, r3
 8001bfe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001c00:	d3f9      	bcc.n	8001bf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c02:	f003 fecf 	bl	80059a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c06:	f7ff fa59 	bl	80010bc <main>

08001c0a <LoopForever>:

LoopForever:
    b LoopForever
 8001c0a:	e7fe      	b.n	8001c0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c0c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001c10:	0800a944 	.word	0x0800a944
	ldr	r0, =_sdata
 8001c14:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001c18:	20000204 	.word	0x20000204
	ldr	r2, =_sbss
 8001c1c:	20000204 	.word	0x20000204
	ldr	r3, = _ebss
 8001c20:	200003a4 	.word	0x200003a4

08001c24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c24:	e7fe      	b.n	8001c24 <ADC1_2_IRQHandler>

08001c26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c30:	2003      	movs	r0, #3
 8001c32:	f000 f961 	bl	8001ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c36:	2000      	movs	r0, #0
 8001c38:	f000 f80e 	bl	8001c58 <HAL_InitTick>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d002      	beq.n	8001c48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	71fb      	strb	r3, [r7, #7]
 8001c46:	e001      	b.n	8001c4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c48:	f7ff fd86 	bl	8001758 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c60:	2300      	movs	r3, #0
 8001c62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c64:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <HAL_InitTick+0x6c>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d023      	beq.n	8001cb4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c6c:	4b16      	ldr	r3, [pc, #88]	; (8001cc8 <HAL_InitTick+0x70>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <HAL_InitTick+0x6c>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 f96d 	bl	8001f62 <HAL_SYSTICK_Config>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10f      	bne.n	8001cae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b0f      	cmp	r3, #15
 8001c92:	d809      	bhi.n	8001ca8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c94:	2200      	movs	r2, #0
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9c:	f000 f937 	bl	8001f0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ca0:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <HAL_InitTick+0x74>)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	e007      	b.n	8001cb8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	73fb      	strb	r3, [r7, #15]
 8001cac:	e004      	b.n	8001cb8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	73fb      	strb	r3, [r7, #15]
 8001cb2:	e001      	b.n	8001cb8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	2000000c 	.word	0x2000000c
 8001cc8:	20000004 	.word	0x20000004
 8001ccc:	20000008 	.word	0x20000008

08001cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_IncTick+0x20>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <HAL_IncTick+0x24>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4413      	add	r3, r2
 8001ce0:	4a04      	ldr	r2, [pc, #16]	; (8001cf4 <HAL_IncTick+0x24>)
 8001ce2:	6013      	str	r3, [r2, #0]
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	2000000c 	.word	0x2000000c
 8001cf4:	20000390 	.word	0x20000390

08001cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8001cfc:	4b03      	ldr	r3, [pc, #12]	; (8001d0c <HAL_GetTick+0x14>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20000390 	.word	0x20000390

08001d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d18:	f7ff ffee 	bl	8001cf8 <HAL_GetTick>
 8001d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d28:	d005      	beq.n	8001d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <HAL_Delay+0x44>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4413      	add	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d36:	bf00      	nop
 8001d38:	f7ff ffde 	bl	8001cf8 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d8f7      	bhi.n	8001d38 <HAL_Delay+0x28>
  {
  }
}
 8001d48:	bf00      	nop
 8001d4a:	bf00      	nop
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	2000000c 	.word	0x2000000c

08001d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <__NVIC_SetPriorityGrouping+0x44>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d74:	4013      	ands	r3, r2
 8001d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d8a:	4a04      	ldr	r2, [pc, #16]	; (8001d9c <__NVIC_SetPriorityGrouping+0x44>)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	60d3      	str	r3, [r2, #12]
}
 8001d90:	bf00      	nop
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001da4:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <__NVIC_GetPriorityGrouping+0x18>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	0a1b      	lsrs	r3, r3, #8
 8001daa:	f003 0307 	and.w	r3, r3, #7
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	db0b      	blt.n	8001de6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	f003 021f 	and.w	r2, r3, #31
 8001dd4:	4907      	ldr	r1, [pc, #28]	; (8001df4 <__NVIC_EnableIRQ+0x38>)
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	095b      	lsrs	r3, r3, #5
 8001ddc:	2001      	movs	r0, #1
 8001dde:	fa00 f202 	lsl.w	r2, r0, r2
 8001de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000e100 	.word	0xe000e100

08001df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	6039      	str	r1, [r7, #0]
 8001e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	db0a      	blt.n	8001e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	490c      	ldr	r1, [pc, #48]	; (8001e44 <__NVIC_SetPriority+0x4c>)
 8001e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e16:	0112      	lsls	r2, r2, #4
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e20:	e00a      	b.n	8001e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	4908      	ldr	r1, [pc, #32]	; (8001e48 <__NVIC_SetPriority+0x50>)
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	3b04      	subs	r3, #4
 8001e30:	0112      	lsls	r2, r2, #4
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	440b      	add	r3, r1
 8001e36:	761a      	strb	r2, [r3, #24]
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000e100 	.word	0xe000e100
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b089      	sub	sp, #36	; 0x24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f1c3 0307 	rsb	r3, r3, #7
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	bf28      	it	cs
 8001e6a:	2304      	movcs	r3, #4
 8001e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3304      	adds	r3, #4
 8001e72:	2b06      	cmp	r3, #6
 8001e74:	d902      	bls.n	8001e7c <NVIC_EncodePriority+0x30>
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	3b03      	subs	r3, #3
 8001e7a:	e000      	b.n	8001e7e <NVIC_EncodePriority+0x32>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e80:	f04f 32ff 	mov.w	r2, #4294967295
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43da      	mvns	r2, r3
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	401a      	ands	r2, r3
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e94:	f04f 31ff 	mov.w	r1, #4294967295
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9e:	43d9      	mvns	r1, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea4:	4313      	orrs	r3, r2
         );
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3724      	adds	r7, #36	; 0x24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ec4:	d301      	bcc.n	8001eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e00f      	b.n	8001eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eca:	4a0a      	ldr	r2, [pc, #40]	; (8001ef4 <SysTick_Config+0x40>)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ed2:	210f      	movs	r1, #15
 8001ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed8:	f7ff ff8e 	bl	8001df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <SysTick_Config+0x40>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ee2:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <SysTick_Config+0x40>)
 8001ee4:	2207      	movs	r2, #7
 8001ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	e000e010 	.word	0xe000e010

08001ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff ff29 	bl	8001d58 <__NVIC_SetPriorityGrouping>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b086      	sub	sp, #24
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	4603      	mov	r3, r0
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	607a      	str	r2, [r7, #4]
 8001f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f20:	f7ff ff3e 	bl	8001da0 <__NVIC_GetPriorityGrouping>
 8001f24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	68b9      	ldr	r1, [r7, #8]
 8001f2a:	6978      	ldr	r0, [r7, #20]
 8001f2c:	f7ff ff8e 	bl	8001e4c <NVIC_EncodePriority>
 8001f30:	4602      	mov	r2, r0
 8001f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f36:	4611      	mov	r1, r2
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff5d 	bl	8001df8 <__NVIC_SetPriority>
}
 8001f3e:	bf00      	nop
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff ff31 	bl	8001dbc <__NVIC_EnableIRQ>
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff ffa2 	bl	8001eb4 <SysTick_Config>
 8001f70:	4603      	mov	r3, r0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b085      	sub	sp, #20
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d008      	beq.n	8001fa4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2204      	movs	r2, #4
 8001f96:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e022      	b.n	8001fea <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 020e 	bic.w	r2, r2, #14
 8001fb2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0201 	bic.w	r2, r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc8:	f003 021c 	and.w	r2, r3, #28
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b084      	sub	sp, #16
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ffe:	2300      	movs	r3, #0
 8002000:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d005      	beq.n	800201a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2204      	movs	r2, #4
 8002012:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	73fb      	strb	r3, [r7, #15]
 8002018:	e029      	b.n	800206e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 020e 	bic.w	r2, r2, #14
 8002028:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0201 	bic.w	r2, r2, #1
 8002038:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	f003 021c 	and.w	r2, r3, #28
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	2101      	movs	r1, #1
 8002048:	fa01 f202 	lsl.w	r2, r1, r2
 800204c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	4798      	blx	r3
    }
  }
  return status;
 800206e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800208a:	4b2f      	ldr	r3, [pc, #188]	; (8002148 <HAL_FLASH_Program+0xd0>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d101      	bne.n	8002096 <HAL_FLASH_Program+0x1e>
 8002092:	2302      	movs	r3, #2
 8002094:	e053      	b.n	800213e <HAL_FLASH_Program+0xc6>
 8002096:	4b2c      	ldr	r3, [pc, #176]	; (8002148 <HAL_FLASH_Program+0xd0>)
 8002098:	2201      	movs	r2, #1
 800209a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800209c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80020a0:	f000 f894 	bl	80021cc <FLASH_WaitForLastOperation>
 80020a4:	4603      	mov	r3, r0
 80020a6:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80020a8:	7dfb      	ldrb	r3, [r7, #23]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d143      	bne.n	8002136 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80020ae:	4b26      	ldr	r3, [pc, #152]	; (8002148 <HAL_FLASH_Program+0xd0>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80020b4:	4b25      	ldr	r3, [pc, #148]	; (800214c <HAL_FLASH_Program+0xd4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d009      	beq.n	80020d4 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80020c0:	4b22      	ldr	r3, [pc, #136]	; (800214c <HAL_FLASH_Program+0xd4>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a21      	ldr	r2, [pc, #132]	; (800214c <HAL_FLASH_Program+0xd4>)
 80020c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020ca:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80020cc:	4b1e      	ldr	r3, [pc, #120]	; (8002148 <HAL_FLASH_Program+0xd0>)
 80020ce:	2202      	movs	r2, #2
 80020d0:	771a      	strb	r2, [r3, #28]
 80020d2:	e002      	b.n	80020da <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80020d4:	4b1c      	ldr	r3, [pc, #112]	; (8002148 <HAL_FLASH_Program+0xd0>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d107      	bne.n	80020f0 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80020e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020e4:	68b8      	ldr	r0, [r7, #8]
 80020e6:	f000 f8c7 	bl	8002278 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80020ea:	2301      	movs	r3, #1
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	e010      	b.n	8002112 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d002      	beq.n	80020fc <HAL_FLASH_Program+0x84>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d10a      	bne.n	8002112 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	4619      	mov	r1, r3
 8002100:	68b8      	ldr	r0, [r7, #8]
 8002102:	f000 f8df 	bl	80022c4 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2b02      	cmp	r3, #2
 800210a:	d102      	bne.n	8002112 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 800210c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002110:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002112:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002116:	f000 f859 	bl	80021cc <FLASH_WaitForLastOperation>
 800211a:	4603      	mov	r3, r0
 800211c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d006      	beq.n	8002132 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8002124:	4b09      	ldr	r3, [pc, #36]	; (800214c <HAL_FLASH_Program+0xd4>)
 8002126:	695a      	ldr	r2, [r3, #20]
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	43db      	mvns	r3, r3
 800212c:	4907      	ldr	r1, [pc, #28]	; (800214c <HAL_FLASH_Program+0xd4>)
 800212e:	4013      	ands	r3, r2
 8002130:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002132:	f000 f9fd 	bl	8002530 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002136:	4b04      	ldr	r3, [pc, #16]	; (8002148 <HAL_FLASH_Program+0xd0>)
 8002138:	2200      	movs	r2, #0
 800213a:	701a      	strb	r2, [r3, #0]

  return status;
 800213c:	7dfb      	ldrb	r3, [r7, #23]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000010 	.word	0x20000010
 800214c:	40022000 	.word	0x40022000

08002150 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002156:	2300      	movs	r3, #0
 8002158:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800215a:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <HAL_FLASH_Unlock+0x38>)
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	2b00      	cmp	r3, #0
 8002160:	da0b      	bge.n	800217a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002162:	4b09      	ldr	r3, [pc, #36]	; (8002188 <HAL_FLASH_Unlock+0x38>)
 8002164:	4a09      	ldr	r2, [pc, #36]	; (800218c <HAL_FLASH_Unlock+0x3c>)
 8002166:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002168:	4b07      	ldr	r3, [pc, #28]	; (8002188 <HAL_FLASH_Unlock+0x38>)
 800216a:	4a09      	ldr	r2, [pc, #36]	; (8002190 <HAL_FLASH_Unlock+0x40>)
 800216c:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800216e:	4b06      	ldr	r3, [pc, #24]	; (8002188 <HAL_FLASH_Unlock+0x38>)
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	2b00      	cmp	r3, #0
 8002174:	da01      	bge.n	800217a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800217a:	79fb      	ldrb	r3, [r7, #7]
}
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	40022000 	.word	0x40022000
 800218c:	45670123 	.word	0x45670123
 8002190:	cdef89ab 	.word	0xcdef89ab

08002194 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002198:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <HAL_FLASH_Lock+0x1c>)
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	4a04      	ldr	r2, [pc, #16]	; (80021b0 <HAL_FLASH_Lock+0x1c>)
 800219e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021a2:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	40022000 	.word	0x40022000

080021b4 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  *            @arg FLASH_FLAG_PEMPTY : FLASH Boot from not programmed flash (apply only for STM32L43x/STM32L44x devices)
  */
uint32_t HAL_FLASH_GetError(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80021b8:	4b03      	ldr	r3, [pc, #12]	; (80021c8 <HAL_FLASH_GetError+0x14>)
 80021ba:	685b      	ldr	r3, [r3, #4]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	20000010 	.word	0x20000010

080021cc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80021d4:	f7ff fd90 	bl	8001cf8 <HAL_GetTick>
 80021d8:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80021da:	e00d      	b.n	80021f8 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e2:	d009      	beq.n	80021f8 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80021e4:	f7ff fd88 	bl	8001cf8 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d801      	bhi.n	80021f8 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e037      	b.n	8002268 <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80021f8:	4b1d      	ldr	r3, [pc, #116]	; (8002270 <FLASH_WaitForLastOperation+0xa4>)
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1eb      	bne.n	80021dc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8002204:	4b1a      	ldr	r3, [pc, #104]	; (8002270 <FLASH_WaitForLastOperation+0xa4>)
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800220c:	4013      	ands	r3, r2
 800220e:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d01e      	beq.n	8002254 <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8002216:	4b17      	ldr	r3, [pc, #92]	; (8002274 <FLASH_WaitForLastOperation+0xa8>)
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	4313      	orrs	r3, r2
 800221e:	4a15      	ldr	r2, [pc, #84]	; (8002274 <FLASH_WaitForLastOperation+0xa8>)
 8002220:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d007      	beq.n	800223c <FLASH_WaitForLastOperation+0x70>
 800222c:	4b10      	ldr	r3, [pc, #64]	; (8002270 <FLASH_WaitForLastOperation+0xa4>)
 800222e:	699a      	ldr	r2, [r3, #24]
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002236:	490e      	ldr	r1, [pc, #56]	; (8002270 <FLASH_WaitForLastOperation+0xa4>)
 8002238:	4313      	orrs	r3, r2
 800223a:	618b      	str	r3, [r1, #24]
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d004      	beq.n	8002250 <FLASH_WaitForLastOperation+0x84>
 8002246:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <FLASH_WaitForLastOperation+0xa4>)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800224e:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e009      	b.n	8002268 <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <FLASH_WaitForLastOperation+0xa4>)
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d002      	beq.n	8002266 <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002260:	4b03      	ldr	r3, [pc, #12]	; (8002270 <FLASH_WaitForLastOperation+0xa4>)
 8002262:	2201      	movs	r2, #1
 8002264:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40022000 	.word	0x40022000
 8002274:	20000010 	.word	0x20000010

08002278 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002284:	4b0e      	ldr	r3, [pc, #56]	; (80022c0 <FLASH_Program_DoubleWord+0x48>)
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	4a0d      	ldr	r2, [pc, #52]	; (80022c0 <FLASH_Program_DoubleWord+0x48>)
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002296:	f3bf 8f6f 	isb	sy
}
 800229a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800229c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	000a      	movs	r2, r1
 80022aa:	2300      	movs	r3, #0
 80022ac:	68f9      	ldr	r1, [r7, #12]
 80022ae:	3104      	adds	r1, #4
 80022b0:	4613      	mov	r3, r2
 80022b2:	600b      	str	r3, [r1, #0]
}
 80022b4:	bf00      	nop
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	40022000 	.word	0x40022000

080022c4 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b089      	sub	sp, #36	; 0x24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80022ce:	2340      	movs	r3, #64	; 0x40
 80022d0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80022da:	4b14      	ldr	r3, [pc, #80]	; (800232c <FLASH_Program_Fast+0x68>)
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	4a13      	ldr	r2, [pc, #76]	; (800232c <FLASH_Program_Fast+0x68>)
 80022e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022e6:	f3ef 8310 	mrs	r3, PRIMASK
 80022ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80022ec:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80022ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80022f0:	b672      	cpsid	i
}
 80022f2:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	3304      	adds	r3, #4
 8002300:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	3304      	adds	r3, #4
 8002306:	617b      	str	r3, [r7, #20]
    row_index--;
 8002308:	7ffb      	ldrb	r3, [r7, #31]
 800230a:	3b01      	subs	r3, #1
 800230c:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800230e:	7ffb      	ldrb	r3, [r7, #31]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1ef      	bne.n	80022f4 <FLASH_Program_Fast+0x30>
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	f383 8810 	msr	PRIMASK, r3
}
 800231e:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8002320:	bf00      	nop
 8002322:	3724      	adds	r7, #36	; 0x24
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	40022000 	.word	0x40022000

08002330 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800233a:	4b4c      	ldr	r3, [pc, #304]	; (800246c <HAL_FLASHEx_Erase+0x13c>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_FLASHEx_Erase+0x16>
 8002342:	2302      	movs	r3, #2
 8002344:	e08d      	b.n	8002462 <HAL_FLASHEx_Erase+0x132>
 8002346:	4b49      	ldr	r3, [pc, #292]	; (800246c <HAL_FLASHEx_Erase+0x13c>)
 8002348:	2201      	movs	r2, #1
 800234a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800234c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002350:	f7ff ff3c 	bl	80021cc <FLASH_WaitForLastOperation>
 8002354:	4603      	mov	r3, r0
 8002356:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d17d      	bne.n	800245a <HAL_FLASHEx_Erase+0x12a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800235e:	4b43      	ldr	r3, [pc, #268]	; (800246c <HAL_FLASHEx_Erase+0x13c>)
 8002360:	2200      	movs	r2, #0
 8002362:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002364:	4b42      	ldr	r3, [pc, #264]	; (8002470 <HAL_FLASHEx_Erase+0x140>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800236c:	2b00      	cmp	r3, #0
 800236e:	d019      	beq.n	80023a4 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002370:	4b3f      	ldr	r3, [pc, #252]	; (8002470 <HAL_FLASHEx_Erase+0x140>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a3e      	ldr	r2, [pc, #248]	; (8002470 <HAL_FLASHEx_Erase+0x140>)
 8002376:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800237a:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800237c:	4b3c      	ldr	r3, [pc, #240]	; (8002470 <HAL_FLASHEx_Erase+0x140>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002384:	2b00      	cmp	r3, #0
 8002386:	d009      	beq.n	800239c <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8002388:	4b39      	ldr	r3, [pc, #228]	; (8002470 <HAL_FLASHEx_Erase+0x140>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a38      	ldr	r2, [pc, #224]	; (8002470 <HAL_FLASHEx_Erase+0x140>)
 800238e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002392:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8002394:	4b35      	ldr	r3, [pc, #212]	; (800246c <HAL_FLASHEx_Erase+0x13c>)
 8002396:	2203      	movs	r2, #3
 8002398:	771a      	strb	r2, [r3, #28]
 800239a:	e016      	b.n	80023ca <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800239c:	4b33      	ldr	r3, [pc, #204]	; (800246c <HAL_FLASHEx_Erase+0x13c>)
 800239e:	2201      	movs	r2, #1
 80023a0:	771a      	strb	r2, [r3, #28]
 80023a2:	e012      	b.n	80023ca <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80023a4:	4b32      	ldr	r3, [pc, #200]	; (8002470 <HAL_FLASHEx_Erase+0x140>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d009      	beq.n	80023c4 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80023b0:	4b2f      	ldr	r3, [pc, #188]	; (8002470 <HAL_FLASHEx_Erase+0x140>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a2e      	ldr	r2, [pc, #184]	; (8002470 <HAL_FLASHEx_Erase+0x140>)
 80023b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023ba:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80023bc:	4b2b      	ldr	r3, [pc, #172]	; (800246c <HAL_FLASHEx_Erase+0x13c>)
 80023be:	2202      	movs	r2, #2
 80023c0:	771a      	strb	r2, [r3, #28]
 80023c2:	e002      	b.n	80023ca <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80023c4:	4b29      	ldr	r3, [pc, #164]	; (800246c <HAL_FLASHEx_Erase+0x13c>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d113      	bne.n	80023fa <HAL_FLASHEx_Erase+0xca>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 f84c 	bl	8002474 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023e0:	f7ff fef4 	bl	80021cc <FLASH_WaitForLastOperation>
 80023e4:	4603      	mov	r3, r0
 80023e6:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80023e8:	4b21      	ldr	r3, [pc, #132]	; (8002470 <HAL_FLASHEx_Erase+0x140>)
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	4a20      	ldr	r2, [pc, #128]	; (8002470 <HAL_FLASHEx_Erase+0x140>)
 80023ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80023f2:	f023 0304 	bic.w	r3, r3, #4
 80023f6:	6153      	str	r3, [r2, #20]
 80023f8:	e02d      	b.n	8002456 <HAL_FLASHEx_Erase+0x126>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002400:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	60bb      	str	r3, [r7, #8]
 8002408:	e01d      	b.n	8002446 <HAL_FLASHEx_Erase+0x116>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	4619      	mov	r1, r3
 8002410:	68b8      	ldr	r0, [r7, #8]
 8002412:	f000 f857 	bl	80024c4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002416:	f24c 3050 	movw	r0, #50000	; 0xc350
 800241a:	f7ff fed7 	bl	80021cc <FLASH_WaitForLastOperation>
 800241e:	4603      	mov	r3, r0
 8002420:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8002422:	4b13      	ldr	r3, [pc, #76]	; (8002470 <HAL_FLASHEx_Erase+0x140>)
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	4a12      	ldr	r2, [pc, #72]	; (8002470 <HAL_FLASHEx_Erase+0x140>)
 8002428:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800242c:	f023 0302 	bic.w	r3, r3, #2
 8002430:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_FLASHEx_Erase+0x110>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	601a      	str	r2, [r3, #0]
          break;
 800243e:	e00a      	b.n	8002456 <HAL_FLASHEx_Erase+0x126>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	3301      	adds	r3, #1
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	4413      	add	r3, r2
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	429a      	cmp	r2, r3
 8002454:	d3d9      	bcc.n	800240a <HAL_FLASHEx_Erase+0xda>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002456:	f000 f86b 	bl	8002530 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800245a:	4b04      	ldr	r3, [pc, #16]	; (800246c <HAL_FLASHEx_Erase+0x13c>)
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]

  return status;
 8002460:	7bfb      	ldrb	r3, [r7, #15]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000010 	.word	0x20000010
 8002470:	40022000 	.word	0x40022000

08002474 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d005      	beq.n	8002492 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8002486:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <FLASH_MassErase+0x4c>)
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	4a0d      	ldr	r2, [pc, #52]	; (80024c0 <FLASH_MassErase+0x4c>)
 800248c:	f043 0304 	orr.w	r3, r3, #4
 8002490:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 800249c:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <FLASH_MassErase+0x4c>)
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	4a07      	ldr	r2, [pc, #28]	; (80024c0 <FLASH_MassErase+0x4c>)
 80024a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024a6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80024a8:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <FLASH_MassErase+0x4c>)
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	4a04      	ldr	r2, [pc, #16]	; (80024c0 <FLASH_MassErase+0x4c>)
 80024ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b2:	6153      	str	r3, [r2, #20]
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	40022000 	.word	0x40022000

080024c4 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d006      	beq.n	80024e6 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 80024d8:	4b14      	ldr	r3, [pc, #80]	; (800252c <FLASH_PageErase+0x68>)
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	4a13      	ldr	r2, [pc, #76]	; (800252c <FLASH_PageErase+0x68>)
 80024de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024e2:	6153      	str	r3, [r2, #20]
 80024e4:	e005      	b.n	80024f2 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 80024e6:	4b11      	ldr	r3, [pc, #68]	; (800252c <FLASH_PageErase+0x68>)
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	4a10      	ldr	r2, [pc, #64]	; (800252c <FLASH_PageErase+0x68>)
 80024ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024f0:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80024f2:	4b0e      	ldr	r3, [pc, #56]	; (800252c <FLASH_PageErase+0x68>)
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8002502:	490a      	ldr	r1, [pc, #40]	; (800252c <FLASH_PageErase+0x68>)
 8002504:	4313      	orrs	r3, r2
 8002506:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002508:	4b08      	ldr	r3, [pc, #32]	; (800252c <FLASH_PageErase+0x68>)
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	4a07      	ldr	r2, [pc, #28]	; (800252c <FLASH_PageErase+0x68>)
 800250e:	f043 0302 	orr.w	r3, r3, #2
 8002512:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <FLASH_PageErase+0x68>)
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	4a04      	ldr	r2, [pc, #16]	; (800252c <FLASH_PageErase+0x68>)
 800251a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251e:	6153      	str	r3, [r2, #20]
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	40022000 	.word	0x40022000

08002530 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8002536:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <FLASH_FlushCaches+0x80>)
 8002538:	7f1b      	ldrb	r3, [r3, #28]
 800253a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d002      	beq.n	8002548 <FLASH_FlushCaches+0x18>
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	2b03      	cmp	r3, #3
 8002546:	d111      	bne.n	800256c <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002548:	4b1a      	ldr	r3, [pc, #104]	; (80025b4 <FLASH_FlushCaches+0x84>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a19      	ldr	r2, [pc, #100]	; (80025b4 <FLASH_FlushCaches+0x84>)
 800254e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	4b17      	ldr	r3, [pc, #92]	; (80025b4 <FLASH_FlushCaches+0x84>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a16      	ldr	r2, [pc, #88]	; (80025b4 <FLASH_FlushCaches+0x84>)
 800255a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800255e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002560:	4b14      	ldr	r3, [pc, #80]	; (80025b4 <FLASH_FlushCaches+0x84>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a13      	ldr	r2, [pc, #76]	; (80025b4 <FLASH_FlushCaches+0x84>)
 8002566:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800256a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	2b02      	cmp	r3, #2
 8002570:	d002      	beq.n	8002578 <FLASH_FlushCaches+0x48>
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	2b03      	cmp	r3, #3
 8002576:	d111      	bne.n	800259c <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002578:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <FLASH_FlushCaches+0x84>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a0d      	ldr	r2, [pc, #52]	; (80025b4 <FLASH_FlushCaches+0x84>)
 800257e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002582:	6013      	str	r3, [r2, #0]
 8002584:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <FLASH_FlushCaches+0x84>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a0a      	ldr	r2, [pc, #40]	; (80025b4 <FLASH_FlushCaches+0x84>)
 800258a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800258e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002590:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <FLASH_FlushCaches+0x84>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a07      	ldr	r2, [pc, #28]	; (80025b4 <FLASH_FlushCaches+0x84>)
 8002596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800259a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800259c:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <FLASH_FlushCaches+0x80>)
 800259e:	2200      	movs	r2, #0
 80025a0:	771a      	strb	r2, [r3, #28]
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	20000010 	.word	0x20000010
 80025b4:	40022000 	.word	0x40022000

080025b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b087      	sub	sp, #28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025c2:	2300      	movs	r3, #0
 80025c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025c6:	e17f      	b.n	80028c8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	2101      	movs	r1, #1
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	fa01 f303 	lsl.w	r3, r1, r3
 80025d4:	4013      	ands	r3, r2
 80025d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 8171 	beq.w	80028c2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d00b      	beq.n	8002600 <HAL_GPIO_Init+0x48>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d007      	beq.n	8002600 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025f4:	2b11      	cmp	r3, #17
 80025f6:	d003      	beq.n	8002600 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	2b12      	cmp	r3, #18
 80025fe:	d130      	bne.n	8002662 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	2203      	movs	r2, #3
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4013      	ands	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002636:	2201      	movs	r2, #1
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43db      	mvns	r3, r3
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	4013      	ands	r3, r2
 8002644:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	091b      	lsrs	r3, r3, #4
 800264c:	f003 0201 	and.w	r2, r3, #1
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	2b03      	cmp	r3, #3
 800266c:	d118      	bne.n	80026a0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002672:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002674:	2201      	movs	r2, #1
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	4013      	ands	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	08db      	lsrs	r3, r3, #3
 800268a:	f003 0201 	and.w	r2, r3, #1
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	2203      	movs	r2, #3
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	4013      	ands	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d003      	beq.n	80026e0 <HAL_GPIO_Init+0x128>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b12      	cmp	r3, #18
 80026de:	d123      	bne.n	8002728 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	08da      	lsrs	r2, r3, #3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3208      	adds	r2, #8
 80026e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	220f      	movs	r2, #15
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	08da      	lsrs	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3208      	adds	r2, #8
 8002722:	6939      	ldr	r1, [r7, #16]
 8002724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	2203      	movs	r2, #3
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	4013      	ands	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 0203 	and.w	r2, r3, #3
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	4313      	orrs	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 80ac 	beq.w	80028c2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276a:	4b5f      	ldr	r3, [pc, #380]	; (80028e8 <HAL_GPIO_Init+0x330>)
 800276c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800276e:	4a5e      	ldr	r2, [pc, #376]	; (80028e8 <HAL_GPIO_Init+0x330>)
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	6613      	str	r3, [r2, #96]	; 0x60
 8002776:	4b5c      	ldr	r3, [pc, #368]	; (80028e8 <HAL_GPIO_Init+0x330>)
 8002778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	60bb      	str	r3, [r7, #8]
 8002780:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002782:	4a5a      	ldr	r2, [pc, #360]	; (80028ec <HAL_GPIO_Init+0x334>)
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	089b      	lsrs	r3, r3, #2
 8002788:	3302      	adds	r3, #2
 800278a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800278e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	220f      	movs	r2, #15
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	4013      	ands	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027ac:	d025      	beq.n	80027fa <HAL_GPIO_Init+0x242>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a4f      	ldr	r2, [pc, #316]	; (80028f0 <HAL_GPIO_Init+0x338>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d01f      	beq.n	80027f6 <HAL_GPIO_Init+0x23e>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a4e      	ldr	r2, [pc, #312]	; (80028f4 <HAL_GPIO_Init+0x33c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d019      	beq.n	80027f2 <HAL_GPIO_Init+0x23a>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a4d      	ldr	r2, [pc, #308]	; (80028f8 <HAL_GPIO_Init+0x340>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d013      	beq.n	80027ee <HAL_GPIO_Init+0x236>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a4c      	ldr	r2, [pc, #304]	; (80028fc <HAL_GPIO_Init+0x344>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d00d      	beq.n	80027ea <HAL_GPIO_Init+0x232>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a4b      	ldr	r2, [pc, #300]	; (8002900 <HAL_GPIO_Init+0x348>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d007      	beq.n	80027e6 <HAL_GPIO_Init+0x22e>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a4a      	ldr	r2, [pc, #296]	; (8002904 <HAL_GPIO_Init+0x34c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d101      	bne.n	80027e2 <HAL_GPIO_Init+0x22a>
 80027de:	2306      	movs	r3, #6
 80027e0:	e00c      	b.n	80027fc <HAL_GPIO_Init+0x244>
 80027e2:	2307      	movs	r3, #7
 80027e4:	e00a      	b.n	80027fc <HAL_GPIO_Init+0x244>
 80027e6:	2305      	movs	r3, #5
 80027e8:	e008      	b.n	80027fc <HAL_GPIO_Init+0x244>
 80027ea:	2304      	movs	r3, #4
 80027ec:	e006      	b.n	80027fc <HAL_GPIO_Init+0x244>
 80027ee:	2303      	movs	r3, #3
 80027f0:	e004      	b.n	80027fc <HAL_GPIO_Init+0x244>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e002      	b.n	80027fc <HAL_GPIO_Init+0x244>
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <HAL_GPIO_Init+0x244>
 80027fa:	2300      	movs	r3, #0
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	f002 0203 	and.w	r2, r2, #3
 8002802:	0092      	lsls	r2, r2, #2
 8002804:	4093      	lsls	r3, r2
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	4313      	orrs	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800280c:	4937      	ldr	r1, [pc, #220]	; (80028ec <HAL_GPIO_Init+0x334>)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	089b      	lsrs	r3, r3, #2
 8002812:	3302      	adds	r3, #2
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800281a:	4b3b      	ldr	r3, [pc, #236]	; (8002908 <HAL_GPIO_Init+0x350>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	43db      	mvns	r3, r3
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	4013      	ands	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4313      	orrs	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800283e:	4a32      	ldr	r2, [pc, #200]	; (8002908 <HAL_GPIO_Init+0x350>)
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002844:	4b30      	ldr	r3, [pc, #192]	; (8002908 <HAL_GPIO_Init+0x350>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	43db      	mvns	r3, r3
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	4013      	ands	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4313      	orrs	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002868:	4a27      	ldr	r2, [pc, #156]	; (8002908 <HAL_GPIO_Init+0x350>)
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800286e:	4b26      	ldr	r3, [pc, #152]	; (8002908 <HAL_GPIO_Init+0x350>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	43db      	mvns	r3, r3
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	4013      	ands	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4313      	orrs	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002892:	4a1d      	ldr	r2, [pc, #116]	; (8002908 <HAL_GPIO_Init+0x350>)
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002898:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <HAL_GPIO_Init+0x350>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	43db      	mvns	r3, r3
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	4013      	ands	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028bc:	4a12      	ldr	r2, [pc, #72]	; (8002908 <HAL_GPIO_Init+0x350>)
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	3301      	adds	r3, #1
 80028c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	fa22 f303 	lsr.w	r3, r2, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f47f ae78 	bne.w	80025c8 <HAL_GPIO_Init+0x10>
  }
}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	371c      	adds	r7, #28
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	40021000 	.word	0x40021000
 80028ec:	40010000 	.word	0x40010000
 80028f0:	48000400 	.word	0x48000400
 80028f4:	48000800 	.word	0x48000800
 80028f8:	48000c00 	.word	0x48000c00
 80028fc:	48001000 	.word	0x48001000
 8002900:	48001400 	.word	0x48001400
 8002904:	48001800 	.word	0x48001800
 8002908:	40010400 	.word	0x40010400

0800290c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691a      	ldr	r2, [r3, #16]
 800291c:	887b      	ldrh	r3, [r7, #2]
 800291e:	4013      	ands	r3, r2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d002      	beq.n	800292a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002924:	2301      	movs	r3, #1
 8002926:	73fb      	strb	r3, [r7, #15]
 8002928:	e001      	b.n	800292e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800292a:	2300      	movs	r3, #0
 800292c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800292e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	460b      	mov	r3, r1
 8002946:	807b      	strh	r3, [r7, #2]
 8002948:	4613      	mov	r3, r2
 800294a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800294c:	787b      	ldrb	r3, [r7, #1]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002952:	887a      	ldrh	r2, [r7, #2]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002958:	e002      	b.n	8002960 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800295a:	887a      	ldrh	r2, [r7, #2]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800297e:	887a      	ldrh	r2, [r7, #2]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4013      	ands	r3, r2
 8002984:	041a      	lsls	r2, r3, #16
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	43d9      	mvns	r1, r3
 800298a:	887b      	ldrh	r3, [r7, #2]
 800298c:	400b      	ands	r3, r1
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	619a      	str	r2, [r3, #24]
}
 8002994:	bf00      	nop
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80029a4:	4b04      	ldr	r3, [pc, #16]	; (80029b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40007000 	.word	0x40007000

080029bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029ca:	d130      	bne.n	8002a2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80029cc:	4b23      	ldr	r3, [pc, #140]	; (8002a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029d8:	d038      	beq.n	8002a4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029da:	4b20      	ldr	r3, [pc, #128]	; (8002a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029e2:	4a1e      	ldr	r2, [pc, #120]	; (8002a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029ea:	4b1d      	ldr	r3, [pc, #116]	; (8002a60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2232      	movs	r2, #50	; 0x32
 80029f0:	fb02 f303 	mul.w	r3, r2, r3
 80029f4:	4a1b      	ldr	r2, [pc, #108]	; (8002a64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029f6:	fba2 2303 	umull	r2, r3, r2, r3
 80029fa:	0c9b      	lsrs	r3, r3, #18
 80029fc:	3301      	adds	r3, #1
 80029fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a00:	e002      	b.n	8002a08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	3b01      	subs	r3, #1
 8002a06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a08:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a14:	d102      	bne.n	8002a1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1f2      	bne.n	8002a02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a1c:	4b0f      	ldr	r3, [pc, #60]	; (8002a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a28:	d110      	bne.n	8002a4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e00f      	b.n	8002a4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a2e:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a3a:	d007      	beq.n	8002a4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a3c:	4b07      	ldr	r3, [pc, #28]	; (8002a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a44:	4a05      	ldr	r2, [pc, #20]	; (8002a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	40007000 	.word	0x40007000
 8002a60:	20000004 	.word	0x20000004
 8002a64:	431bde83 	.word	0x431bde83

08002a68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e3d4      	b.n	8003224 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a7a:	4ba1      	ldr	r3, [pc, #644]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
 8002a82:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a84:	4b9e      	ldr	r3, [pc, #632]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f003 0303 	and.w	r3, r3, #3
 8002a8c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0310 	and.w	r3, r3, #16
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 80e4 	beq.w	8002c64 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d007      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x4a>
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	2b0c      	cmp	r3, #12
 8002aa6:	f040 808b 	bne.w	8002bc0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	f040 8087 	bne.w	8002bc0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ab2:	4b93      	ldr	r3, [pc, #588]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d005      	beq.n	8002aca <HAL_RCC_OscConfig+0x62>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e3ac      	b.n	8003224 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a1a      	ldr	r2, [r3, #32]
 8002ace:	4b8c      	ldr	r3, [pc, #560]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d004      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x7c>
 8002ada:	4b89      	ldr	r3, [pc, #548]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ae2:	e005      	b.n	8002af0 <HAL_RCC_OscConfig+0x88>
 8002ae4:	4b86      	ldr	r3, [pc, #536]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aea:	091b      	lsrs	r3, r3, #4
 8002aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d223      	bcs.n	8002b3c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f000 fd41 	bl	8003580 <RCC_SetFlashLatencyFromMSIRange>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e38d      	b.n	8003224 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b08:	4b7d      	ldr	r3, [pc, #500]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a7c      	ldr	r2, [pc, #496]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002b0e:	f043 0308 	orr.w	r3, r3, #8
 8002b12:	6013      	str	r3, [r2, #0]
 8002b14:	4b7a      	ldr	r3, [pc, #488]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	4977      	ldr	r1, [pc, #476]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b26:	4b76      	ldr	r3, [pc, #472]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	021b      	lsls	r3, r3, #8
 8002b34:	4972      	ldr	r1, [pc, #456]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	604b      	str	r3, [r1, #4]
 8002b3a:	e025      	b.n	8002b88 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b3c:	4b70      	ldr	r3, [pc, #448]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a6f      	ldr	r2, [pc, #444]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002b42:	f043 0308 	orr.w	r3, r3, #8
 8002b46:	6013      	str	r3, [r2, #0]
 8002b48:	4b6d      	ldr	r3, [pc, #436]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	496a      	ldr	r1, [pc, #424]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b5a:	4b69      	ldr	r3, [pc, #420]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	021b      	lsls	r3, r3, #8
 8002b68:	4965      	ldr	r1, [pc, #404]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d109      	bne.n	8002b88 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f000 fd01 	bl	8003580 <RCC_SetFlashLatencyFromMSIRange>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e34d      	b.n	8003224 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b88:	f000 fc36 	bl	80033f8 <HAL_RCC_GetSysClockFreq>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	4b5c      	ldr	r3, [pc, #368]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	091b      	lsrs	r3, r3, #4
 8002b94:	f003 030f 	and.w	r3, r3, #15
 8002b98:	495a      	ldr	r1, [pc, #360]	; (8002d04 <HAL_RCC_OscConfig+0x29c>)
 8002b9a:	5ccb      	ldrb	r3, [r1, r3]
 8002b9c:	f003 031f 	and.w	r3, r3, #31
 8002ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba4:	4a58      	ldr	r2, [pc, #352]	; (8002d08 <HAL_RCC_OscConfig+0x2a0>)
 8002ba6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ba8:	4b58      	ldr	r3, [pc, #352]	; (8002d0c <HAL_RCC_OscConfig+0x2a4>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff f853 	bl	8001c58 <HAL_InitTick>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d052      	beq.n	8002c62 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
 8002bbe:	e331      	b.n	8003224 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d032      	beq.n	8002c2e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bc8:	4b4d      	ldr	r3, [pc, #308]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a4c      	ldr	r2, [pc, #304]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bd4:	f7ff f890 	bl	8001cf8 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bdc:	f7ff f88c 	bl	8001cf8 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e31a      	b.n	8003224 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bee:	4b44      	ldr	r3, [pc, #272]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0f0      	beq.n	8002bdc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bfa:	4b41      	ldr	r3, [pc, #260]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a40      	ldr	r2, [pc, #256]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002c00:	f043 0308 	orr.w	r3, r3, #8
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	4b3e      	ldr	r3, [pc, #248]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	493b      	ldr	r1, [pc, #236]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c18:	4b39      	ldr	r3, [pc, #228]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	021b      	lsls	r3, r3, #8
 8002c26:	4936      	ldr	r1, [pc, #216]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	604b      	str	r3, [r1, #4]
 8002c2c:	e01a      	b.n	8002c64 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c2e:	4b34      	ldr	r3, [pc, #208]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a33      	ldr	r2, [pc, #204]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002c34:	f023 0301 	bic.w	r3, r3, #1
 8002c38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c3a:	f7ff f85d 	bl	8001cf8 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c42:	f7ff f859 	bl	8001cf8 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e2e7      	b.n	8003224 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c54:	4b2a      	ldr	r3, [pc, #168]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1f0      	bne.n	8002c42 <HAL_RCC_OscConfig+0x1da>
 8002c60:	e000      	b.n	8002c64 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c62:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d074      	beq.n	8002d5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	2b08      	cmp	r3, #8
 8002c74:	d005      	beq.n	8002c82 <HAL_RCC_OscConfig+0x21a>
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	2b0c      	cmp	r3, #12
 8002c7a:	d10e      	bne.n	8002c9a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d10b      	bne.n	8002c9a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c82:	4b1f      	ldr	r3, [pc, #124]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d064      	beq.n	8002d58 <HAL_RCC_OscConfig+0x2f0>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d160      	bne.n	8002d58 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e2c4      	b.n	8003224 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ca2:	d106      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x24a>
 8002ca4:	4b16      	ldr	r3, [pc, #88]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a15      	ldr	r2, [pc, #84]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002caa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cae:	6013      	str	r3, [r2, #0]
 8002cb0:	e01d      	b.n	8002cee <HAL_RCC_OscConfig+0x286>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cba:	d10c      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x26e>
 8002cbc:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a0f      	ldr	r2, [pc, #60]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002cc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cc6:	6013      	str	r3, [r2, #0]
 8002cc8:	4b0d      	ldr	r3, [pc, #52]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a0c      	ldr	r2, [pc, #48]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd2:	6013      	str	r3, [r2, #0]
 8002cd4:	e00b      	b.n	8002cee <HAL_RCC_OscConfig+0x286>
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a09      	ldr	r2, [pc, #36]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a06      	ldr	r2, [pc, #24]	; (8002d00 <HAL_RCC_OscConfig+0x298>)
 8002ce8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d01c      	beq.n	8002d30 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf6:	f7fe ffff 	bl	8001cf8 <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cfc:	e011      	b.n	8002d22 <HAL_RCC_OscConfig+0x2ba>
 8002cfe:	bf00      	nop
 8002d00:	40021000 	.word	0x40021000
 8002d04:	0800a3f8 	.word	0x0800a3f8
 8002d08:	20000004 	.word	0x20000004
 8002d0c:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d10:	f7fe fff2 	bl	8001cf8 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b64      	cmp	r3, #100	; 0x64
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e280      	b.n	8003224 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d22:	4baf      	ldr	r3, [pc, #700]	; (8002fe0 <HAL_RCC_OscConfig+0x578>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0f0      	beq.n	8002d10 <HAL_RCC_OscConfig+0x2a8>
 8002d2e:	e014      	b.n	8002d5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d30:	f7fe ffe2 	bl	8001cf8 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d38:	f7fe ffde 	bl	8001cf8 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b64      	cmp	r3, #100	; 0x64
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e26c      	b.n	8003224 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d4a:	4ba5      	ldr	r3, [pc, #660]	; (8002fe0 <HAL_RCC_OscConfig+0x578>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f0      	bne.n	8002d38 <HAL_RCC_OscConfig+0x2d0>
 8002d56:	e000      	b.n	8002d5a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d060      	beq.n	8002e28 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d005      	beq.n	8002d78 <HAL_RCC_OscConfig+0x310>
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	2b0c      	cmp	r3, #12
 8002d70:	d119      	bne.n	8002da6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d116      	bne.n	8002da6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d78:	4b99      	ldr	r3, [pc, #612]	; (8002fe0 <HAL_RCC_OscConfig+0x578>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <HAL_RCC_OscConfig+0x328>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e249      	b.n	8003224 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d90:	4b93      	ldr	r3, [pc, #588]	; (8002fe0 <HAL_RCC_OscConfig+0x578>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	061b      	lsls	r3, r3, #24
 8002d9e:	4990      	ldr	r1, [pc, #576]	; (8002fe0 <HAL_RCC_OscConfig+0x578>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002da4:	e040      	b.n	8002e28 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d023      	beq.n	8002df6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dae:	4b8c      	ldr	r3, [pc, #560]	; (8002fe0 <HAL_RCC_OscConfig+0x578>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a8b      	ldr	r2, [pc, #556]	; (8002fe0 <HAL_RCC_OscConfig+0x578>)
 8002db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dba:	f7fe ff9d 	bl	8001cf8 <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc2:	f7fe ff99 	bl	8001cf8 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e227      	b.n	8003224 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dd4:	4b82      	ldr	r3, [pc, #520]	; (8002fe0 <HAL_RCC_OscConfig+0x578>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f0      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de0:	4b7f      	ldr	r3, [pc, #508]	; (8002fe0 <HAL_RCC_OscConfig+0x578>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	061b      	lsls	r3, r3, #24
 8002dee:	497c      	ldr	r1, [pc, #496]	; (8002fe0 <HAL_RCC_OscConfig+0x578>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	604b      	str	r3, [r1, #4]
 8002df4:	e018      	b.n	8002e28 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002df6:	4b7a      	ldr	r3, [pc, #488]	; (8002fe0 <HAL_RCC_OscConfig+0x578>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a79      	ldr	r2, [pc, #484]	; (8002fe0 <HAL_RCC_OscConfig+0x578>)
 8002dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e02:	f7fe ff79 	bl	8001cf8 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e0a:	f7fe ff75 	bl	8001cf8 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e203      	b.n	8003224 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e1c:	4b70      	ldr	r3, [pc, #448]	; (8002fe0 <HAL_RCC_OscConfig+0x578>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1f0      	bne.n	8002e0a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0308 	and.w	r3, r3, #8
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d03c      	beq.n	8002eae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d01c      	beq.n	8002e76 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e3c:	4b68      	ldr	r3, [pc, #416]	; (8002fe0 <HAL_RCC_OscConfig+0x578>)
 8002e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e42:	4a67      	ldr	r2, [pc, #412]	; (8002fe0 <HAL_RCC_OscConfig+0x578>)
 8002e44:	f043 0301 	orr.w	r3, r3, #1
 8002e48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4c:	f7fe ff54 	bl	8001cf8 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e54:	f7fe ff50 	bl	8001cf8 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e1de      	b.n	8003224 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e66:	4b5e      	ldr	r3, [pc, #376]	; (8002fe0 <HAL_RCC_OscConfig+0x578>)
 8002e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d0ef      	beq.n	8002e54 <HAL_RCC_OscConfig+0x3ec>
 8002e74:	e01b      	b.n	8002eae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e76:	4b5a      	ldr	r3, [pc, #360]	; (8002fe0 <HAL_RCC_OscConfig+0x578>)
 8002e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e7c:	4a58      	ldr	r2, [pc, #352]	; (8002fe0 <HAL_RCC_OscConfig+0x578>)
 8002e7e:	f023 0301 	bic.w	r3, r3, #1
 8002e82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e86:	f7fe ff37 	bl	8001cf8 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e8e:	f7fe ff33 	bl	8001cf8 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e1c1      	b.n	8003224 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ea0:	4b4f      	ldr	r3, [pc, #316]	; (8002fe0 <HAL_RCC_OscConfig+0x578>)
 8002ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1ef      	bne.n	8002e8e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0304 	and.w	r3, r3, #4
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 80a6 	beq.w	8003008 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ec0:	4b47      	ldr	r3, [pc, #284]	; (8002fe0 <HAL_RCC_OscConfig+0x578>)
 8002ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10d      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ecc:	4b44      	ldr	r3, [pc, #272]	; (8002fe0 <HAL_RCC_OscConfig+0x578>)
 8002ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed0:	4a43      	ldr	r2, [pc, #268]	; (8002fe0 <HAL_RCC_OscConfig+0x578>)
 8002ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ed8:	4b41      	ldr	r3, [pc, #260]	; (8002fe0 <HAL_RCC_OscConfig+0x578>)
 8002eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee0:	60bb      	str	r3, [r7, #8]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ee8:	4b3e      	ldr	r3, [pc, #248]	; (8002fe4 <HAL_RCC_OscConfig+0x57c>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d118      	bne.n	8002f26 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ef4:	4b3b      	ldr	r3, [pc, #236]	; (8002fe4 <HAL_RCC_OscConfig+0x57c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a3a      	ldr	r2, [pc, #232]	; (8002fe4 <HAL_RCC_OscConfig+0x57c>)
 8002efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002efe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f00:	f7fe fefa 	bl	8001cf8 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f08:	f7fe fef6 	bl	8001cf8 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e184      	b.n	8003224 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f1a:	4b32      	ldr	r3, [pc, #200]	; (8002fe4 <HAL_RCC_OscConfig+0x57c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d108      	bne.n	8002f40 <HAL_RCC_OscConfig+0x4d8>
 8002f2e:	4b2c      	ldr	r3, [pc, #176]	; (8002fe0 <HAL_RCC_OscConfig+0x578>)
 8002f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f34:	4a2a      	ldr	r2, [pc, #168]	; (8002fe0 <HAL_RCC_OscConfig+0x578>)
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f3e:	e024      	b.n	8002f8a <HAL_RCC_OscConfig+0x522>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	2b05      	cmp	r3, #5
 8002f46:	d110      	bne.n	8002f6a <HAL_RCC_OscConfig+0x502>
 8002f48:	4b25      	ldr	r3, [pc, #148]	; (8002fe0 <HAL_RCC_OscConfig+0x578>)
 8002f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4e:	4a24      	ldr	r2, [pc, #144]	; (8002fe0 <HAL_RCC_OscConfig+0x578>)
 8002f50:	f043 0304 	orr.w	r3, r3, #4
 8002f54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f58:	4b21      	ldr	r3, [pc, #132]	; (8002fe0 <HAL_RCC_OscConfig+0x578>)
 8002f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5e:	4a20      	ldr	r2, [pc, #128]	; (8002fe0 <HAL_RCC_OscConfig+0x578>)
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f68:	e00f      	b.n	8002f8a <HAL_RCC_OscConfig+0x522>
 8002f6a:	4b1d      	ldr	r3, [pc, #116]	; (8002fe0 <HAL_RCC_OscConfig+0x578>)
 8002f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f70:	4a1b      	ldr	r2, [pc, #108]	; (8002fe0 <HAL_RCC_OscConfig+0x578>)
 8002f72:	f023 0301 	bic.w	r3, r3, #1
 8002f76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f7a:	4b19      	ldr	r3, [pc, #100]	; (8002fe0 <HAL_RCC_OscConfig+0x578>)
 8002f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f80:	4a17      	ldr	r2, [pc, #92]	; (8002fe0 <HAL_RCC_OscConfig+0x578>)
 8002f82:	f023 0304 	bic.w	r3, r3, #4
 8002f86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d016      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f92:	f7fe feb1 	bl	8001cf8 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f98:	e00a      	b.n	8002fb0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9a:	f7fe fead 	bl	8001cf8 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e139      	b.n	8003224 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <HAL_RCC_OscConfig+0x578>)
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0ed      	beq.n	8002f9a <HAL_RCC_OscConfig+0x532>
 8002fbe:	e01a      	b.n	8002ff6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc0:	f7fe fe9a 	bl	8001cf8 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fc6:	e00f      	b.n	8002fe8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc8:	f7fe fe96 	bl	8001cf8 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d906      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e122      	b.n	8003224 <HAL_RCC_OscConfig+0x7bc>
 8002fde:	bf00      	nop
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fe8:	4b90      	ldr	r3, [pc, #576]	; (800322c <HAL_RCC_OscConfig+0x7c4>)
 8002fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1e8      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ff6:	7ffb      	ldrb	r3, [r7, #31]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d105      	bne.n	8003008 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ffc:	4b8b      	ldr	r3, [pc, #556]	; (800322c <HAL_RCC_OscConfig+0x7c4>)
 8002ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003000:	4a8a      	ldr	r2, [pc, #552]	; (800322c <HAL_RCC_OscConfig+0x7c4>)
 8003002:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003006:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 8108 	beq.w	8003222 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003016:	2b02      	cmp	r3, #2
 8003018:	f040 80d0 	bne.w	80031bc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800301c:	4b83      	ldr	r3, [pc, #524]	; (800322c <HAL_RCC_OscConfig+0x7c4>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f003 0203 	and.w	r2, r3, #3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302c:	429a      	cmp	r2, r3
 800302e:	d130      	bne.n	8003092 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	3b01      	subs	r3, #1
 800303c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800303e:	429a      	cmp	r2, r3
 8003040:	d127      	bne.n	8003092 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800304e:	429a      	cmp	r2, r3
 8003050:	d11f      	bne.n	8003092 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800305c:	2a07      	cmp	r2, #7
 800305e:	bf14      	ite	ne
 8003060:	2201      	movne	r2, #1
 8003062:	2200      	moveq	r2, #0
 8003064:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003066:	4293      	cmp	r3, r2
 8003068:	d113      	bne.n	8003092 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003074:	085b      	lsrs	r3, r3, #1
 8003076:	3b01      	subs	r3, #1
 8003078:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800307a:	429a      	cmp	r2, r3
 800307c:	d109      	bne.n	8003092 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	085b      	lsrs	r3, r3, #1
 800308a:	3b01      	subs	r3, #1
 800308c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800308e:	429a      	cmp	r2, r3
 8003090:	d06e      	beq.n	8003170 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	2b0c      	cmp	r3, #12
 8003096:	d069      	beq.n	800316c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003098:	4b64      	ldr	r3, [pc, #400]	; (800322c <HAL_RCC_OscConfig+0x7c4>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d105      	bne.n	80030b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80030a4:	4b61      	ldr	r3, [pc, #388]	; (800322c <HAL_RCC_OscConfig+0x7c4>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0b7      	b.n	8003224 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030b4:	4b5d      	ldr	r3, [pc, #372]	; (800322c <HAL_RCC_OscConfig+0x7c4>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a5c      	ldr	r2, [pc, #368]	; (800322c <HAL_RCC_OscConfig+0x7c4>)
 80030ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030c0:	f7fe fe1a 	bl	8001cf8 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c8:	f7fe fe16 	bl	8001cf8 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e0a4      	b.n	8003224 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030da:	4b54      	ldr	r3, [pc, #336]	; (800322c <HAL_RCC_OscConfig+0x7c4>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030e6:	4b51      	ldr	r3, [pc, #324]	; (800322c <HAL_RCC_OscConfig+0x7c4>)
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	4b51      	ldr	r3, [pc, #324]	; (8003230 <HAL_RCC_OscConfig+0x7c8>)
 80030ec:	4013      	ands	r3, r2
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030f6:	3a01      	subs	r2, #1
 80030f8:	0112      	lsls	r2, r2, #4
 80030fa:	4311      	orrs	r1, r2
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003100:	0212      	lsls	r2, r2, #8
 8003102:	4311      	orrs	r1, r2
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003108:	0852      	lsrs	r2, r2, #1
 800310a:	3a01      	subs	r2, #1
 800310c:	0552      	lsls	r2, r2, #21
 800310e:	4311      	orrs	r1, r2
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003114:	0852      	lsrs	r2, r2, #1
 8003116:	3a01      	subs	r2, #1
 8003118:	0652      	lsls	r2, r2, #25
 800311a:	4311      	orrs	r1, r2
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003120:	0912      	lsrs	r2, r2, #4
 8003122:	0452      	lsls	r2, r2, #17
 8003124:	430a      	orrs	r2, r1
 8003126:	4941      	ldr	r1, [pc, #260]	; (800322c <HAL_RCC_OscConfig+0x7c4>)
 8003128:	4313      	orrs	r3, r2
 800312a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800312c:	4b3f      	ldr	r3, [pc, #252]	; (800322c <HAL_RCC_OscConfig+0x7c4>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a3e      	ldr	r2, [pc, #248]	; (800322c <HAL_RCC_OscConfig+0x7c4>)
 8003132:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003136:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003138:	4b3c      	ldr	r3, [pc, #240]	; (800322c <HAL_RCC_OscConfig+0x7c4>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	4a3b      	ldr	r2, [pc, #236]	; (800322c <HAL_RCC_OscConfig+0x7c4>)
 800313e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003142:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003144:	f7fe fdd8 	bl	8001cf8 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800314c:	f7fe fdd4 	bl	8001cf8 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e062      	b.n	8003224 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800315e:	4b33      	ldr	r3, [pc, #204]	; (800322c <HAL_RCC_OscConfig+0x7c4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0f0      	beq.n	800314c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800316a:	e05a      	b.n	8003222 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e059      	b.n	8003224 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003170:	4b2e      	ldr	r3, [pc, #184]	; (800322c <HAL_RCC_OscConfig+0x7c4>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d152      	bne.n	8003222 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800317c:	4b2b      	ldr	r3, [pc, #172]	; (800322c <HAL_RCC_OscConfig+0x7c4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a2a      	ldr	r2, [pc, #168]	; (800322c <HAL_RCC_OscConfig+0x7c4>)
 8003182:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003186:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003188:	4b28      	ldr	r3, [pc, #160]	; (800322c <HAL_RCC_OscConfig+0x7c4>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	4a27      	ldr	r2, [pc, #156]	; (800322c <HAL_RCC_OscConfig+0x7c4>)
 800318e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003192:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003194:	f7fe fdb0 	bl	8001cf8 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800319c:	f7fe fdac 	bl	8001cf8 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e03a      	b.n	8003224 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ae:	4b1f      	ldr	r3, [pc, #124]	; (800322c <HAL_RCC_OscConfig+0x7c4>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0f0      	beq.n	800319c <HAL_RCC_OscConfig+0x734>
 80031ba:	e032      	b.n	8003222 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	2b0c      	cmp	r3, #12
 80031c0:	d02d      	beq.n	800321e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c2:	4b1a      	ldr	r3, [pc, #104]	; (800322c <HAL_RCC_OscConfig+0x7c4>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a19      	ldr	r2, [pc, #100]	; (800322c <HAL_RCC_OscConfig+0x7c4>)
 80031c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031cc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80031ce:	4b17      	ldr	r3, [pc, #92]	; (800322c <HAL_RCC_OscConfig+0x7c4>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d105      	bne.n	80031e6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80031da:	4b14      	ldr	r3, [pc, #80]	; (800322c <HAL_RCC_OscConfig+0x7c4>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	4a13      	ldr	r2, [pc, #76]	; (800322c <HAL_RCC_OscConfig+0x7c4>)
 80031e0:	f023 0303 	bic.w	r3, r3, #3
 80031e4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80031e6:	4b11      	ldr	r3, [pc, #68]	; (800322c <HAL_RCC_OscConfig+0x7c4>)
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	4a10      	ldr	r2, [pc, #64]	; (800322c <HAL_RCC_OscConfig+0x7c4>)
 80031ec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80031f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031f4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f6:	f7fe fd7f 	bl	8001cf8 <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031fe:	f7fe fd7b 	bl	8001cf8 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e009      	b.n	8003224 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003210:	4b06      	ldr	r3, [pc, #24]	; (800322c <HAL_RCC_OscConfig+0x7c4>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1f0      	bne.n	80031fe <HAL_RCC_OscConfig+0x796>
 800321c:	e001      	b.n	8003222 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e000      	b.n	8003224 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3720      	adds	r7, #32
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40021000 	.word	0x40021000
 8003230:	f99d808c 	.word	0xf99d808c

08003234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e0c8      	b.n	80033da <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003248:	4b66      	ldr	r3, [pc, #408]	; (80033e4 <HAL_RCC_ClockConfig+0x1b0>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	429a      	cmp	r2, r3
 8003254:	d910      	bls.n	8003278 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003256:	4b63      	ldr	r3, [pc, #396]	; (80033e4 <HAL_RCC_ClockConfig+0x1b0>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f023 0207 	bic.w	r2, r3, #7
 800325e:	4961      	ldr	r1, [pc, #388]	; (80033e4 <HAL_RCC_ClockConfig+0x1b0>)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	4313      	orrs	r3, r2
 8003264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003266:	4b5f      	ldr	r3, [pc, #380]	; (80033e4 <HAL_RCC_ClockConfig+0x1b0>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	429a      	cmp	r2, r3
 8003272:	d001      	beq.n	8003278 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e0b0      	b.n	80033da <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b00      	cmp	r3, #0
 8003282:	d04c      	beq.n	800331e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2b03      	cmp	r3, #3
 800328a:	d107      	bne.n	800329c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800328c:	4b56      	ldr	r3, [pc, #344]	; (80033e8 <HAL_RCC_ClockConfig+0x1b4>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d121      	bne.n	80032dc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e09e      	b.n	80033da <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d107      	bne.n	80032b4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032a4:	4b50      	ldr	r3, [pc, #320]	; (80033e8 <HAL_RCC_ClockConfig+0x1b4>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d115      	bne.n	80032dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e092      	b.n	80033da <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d107      	bne.n	80032cc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032bc:	4b4a      	ldr	r3, [pc, #296]	; (80033e8 <HAL_RCC_ClockConfig+0x1b4>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d109      	bne.n	80032dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e086      	b.n	80033da <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032cc:	4b46      	ldr	r3, [pc, #280]	; (80033e8 <HAL_RCC_ClockConfig+0x1b4>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e07e      	b.n	80033da <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032dc:	4b42      	ldr	r3, [pc, #264]	; (80033e8 <HAL_RCC_ClockConfig+0x1b4>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f023 0203 	bic.w	r2, r3, #3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	493f      	ldr	r1, [pc, #252]	; (80033e8 <HAL_RCC_ClockConfig+0x1b4>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032ee:	f7fe fd03 	bl	8001cf8 <HAL_GetTick>
 80032f2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032f4:	e00a      	b.n	800330c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f6:	f7fe fcff 	bl	8001cf8 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	f241 3288 	movw	r2, #5000	; 0x1388
 8003304:	4293      	cmp	r3, r2
 8003306:	d901      	bls.n	800330c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e066      	b.n	80033da <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330c:	4b36      	ldr	r3, [pc, #216]	; (80033e8 <HAL_RCC_ClockConfig+0x1b4>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 020c 	and.w	r2, r3, #12
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	429a      	cmp	r2, r3
 800331c:	d1eb      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d008      	beq.n	800333c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800332a:	4b2f      	ldr	r3, [pc, #188]	; (80033e8 <HAL_RCC_ClockConfig+0x1b4>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	492c      	ldr	r1, [pc, #176]	; (80033e8 <HAL_RCC_ClockConfig+0x1b4>)
 8003338:	4313      	orrs	r3, r2
 800333a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800333c:	4b29      	ldr	r3, [pc, #164]	; (80033e4 <HAL_RCC_ClockConfig+0x1b0>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d210      	bcs.n	800336c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334a:	4b26      	ldr	r3, [pc, #152]	; (80033e4 <HAL_RCC_ClockConfig+0x1b0>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f023 0207 	bic.w	r2, r3, #7
 8003352:	4924      	ldr	r1, [pc, #144]	; (80033e4 <HAL_RCC_ClockConfig+0x1b0>)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	4313      	orrs	r3, r2
 8003358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800335a:	4b22      	ldr	r3, [pc, #136]	; (80033e4 <HAL_RCC_ClockConfig+0x1b0>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d001      	beq.n	800336c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e036      	b.n	80033da <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d008      	beq.n	800338a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003378:	4b1b      	ldr	r3, [pc, #108]	; (80033e8 <HAL_RCC_ClockConfig+0x1b4>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	4918      	ldr	r1, [pc, #96]	; (80033e8 <HAL_RCC_ClockConfig+0x1b4>)
 8003386:	4313      	orrs	r3, r2
 8003388:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	2b00      	cmp	r3, #0
 8003394:	d009      	beq.n	80033aa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003396:	4b14      	ldr	r3, [pc, #80]	; (80033e8 <HAL_RCC_ClockConfig+0x1b4>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	4910      	ldr	r1, [pc, #64]	; (80033e8 <HAL_RCC_ClockConfig+0x1b4>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033aa:	f000 f825 	bl	80033f8 <HAL_RCC_GetSysClockFreq>
 80033ae:	4602      	mov	r2, r0
 80033b0:	4b0d      	ldr	r3, [pc, #52]	; (80033e8 <HAL_RCC_ClockConfig+0x1b4>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	091b      	lsrs	r3, r3, #4
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	490c      	ldr	r1, [pc, #48]	; (80033ec <HAL_RCC_ClockConfig+0x1b8>)
 80033bc:	5ccb      	ldrb	r3, [r1, r3]
 80033be:	f003 031f 	and.w	r3, r3, #31
 80033c2:	fa22 f303 	lsr.w	r3, r2, r3
 80033c6:	4a0a      	ldr	r2, [pc, #40]	; (80033f0 <HAL_RCC_ClockConfig+0x1bc>)
 80033c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033ca:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <HAL_RCC_ClockConfig+0x1c0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fe fc42 	bl	8001c58 <HAL_InitTick>
 80033d4:	4603      	mov	r3, r0
 80033d6:	72fb      	strb	r3, [r7, #11]

  return status;
 80033d8:	7afb      	ldrb	r3, [r7, #11]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40022000 	.word	0x40022000
 80033e8:	40021000 	.word	0x40021000
 80033ec:	0800a3f8 	.word	0x0800a3f8
 80033f0:	20000004 	.word	0x20000004
 80033f4:	20000008 	.word	0x20000008

080033f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b089      	sub	sp, #36	; 0x24
 80033fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033fe:	2300      	movs	r3, #0
 8003400:	61fb      	str	r3, [r7, #28]
 8003402:	2300      	movs	r3, #0
 8003404:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003406:	4b3e      	ldr	r3, [pc, #248]	; (8003500 <HAL_RCC_GetSysClockFreq+0x108>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
 800340e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003410:	4b3b      	ldr	r3, [pc, #236]	; (8003500 <HAL_RCC_GetSysClockFreq+0x108>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f003 0303 	and.w	r3, r3, #3
 8003418:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <HAL_RCC_GetSysClockFreq+0x34>
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	2b0c      	cmp	r3, #12
 8003424:	d121      	bne.n	800346a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d11e      	bne.n	800346a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800342c:	4b34      	ldr	r3, [pc, #208]	; (8003500 <HAL_RCC_GetSysClockFreq+0x108>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b00      	cmp	r3, #0
 8003436:	d107      	bne.n	8003448 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003438:	4b31      	ldr	r3, [pc, #196]	; (8003500 <HAL_RCC_GetSysClockFreq+0x108>)
 800343a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800343e:	0a1b      	lsrs	r3, r3, #8
 8003440:	f003 030f 	and.w	r3, r3, #15
 8003444:	61fb      	str	r3, [r7, #28]
 8003446:	e005      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003448:	4b2d      	ldr	r3, [pc, #180]	; (8003500 <HAL_RCC_GetSysClockFreq+0x108>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	091b      	lsrs	r3, r3, #4
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003454:	4a2b      	ldr	r2, [pc, #172]	; (8003504 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800345c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10d      	bne.n	8003480 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003468:	e00a      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	2b04      	cmp	r3, #4
 800346e:	d102      	bne.n	8003476 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003470:	4b25      	ldr	r3, [pc, #148]	; (8003508 <HAL_RCC_GetSysClockFreq+0x110>)
 8003472:	61bb      	str	r3, [r7, #24]
 8003474:	e004      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	2b08      	cmp	r3, #8
 800347a:	d101      	bne.n	8003480 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800347c:	4b23      	ldr	r3, [pc, #140]	; (800350c <HAL_RCC_GetSysClockFreq+0x114>)
 800347e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	2b0c      	cmp	r3, #12
 8003484:	d134      	bne.n	80034f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003486:	4b1e      	ldr	r3, [pc, #120]	; (8003500 <HAL_RCC_GetSysClockFreq+0x108>)
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2b02      	cmp	r3, #2
 8003494:	d003      	beq.n	800349e <HAL_RCC_GetSysClockFreq+0xa6>
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2b03      	cmp	r3, #3
 800349a:	d003      	beq.n	80034a4 <HAL_RCC_GetSysClockFreq+0xac>
 800349c:	e005      	b.n	80034aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800349e:	4b1a      	ldr	r3, [pc, #104]	; (8003508 <HAL_RCC_GetSysClockFreq+0x110>)
 80034a0:	617b      	str	r3, [r7, #20]
      break;
 80034a2:	e005      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034a4:	4b19      	ldr	r3, [pc, #100]	; (800350c <HAL_RCC_GetSysClockFreq+0x114>)
 80034a6:	617b      	str	r3, [r7, #20]
      break;
 80034a8:	e002      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	617b      	str	r3, [r7, #20]
      break;
 80034ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034b0:	4b13      	ldr	r3, [pc, #76]	; (8003500 <HAL_RCC_GetSysClockFreq+0x108>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	091b      	lsrs	r3, r3, #4
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	3301      	adds	r3, #1
 80034bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034be:	4b10      	ldr	r3, [pc, #64]	; (8003500 <HAL_RCC_GetSysClockFreq+0x108>)
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	0a1b      	lsrs	r3, r3, #8
 80034c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	fb02 f203 	mul.w	r2, r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034d6:	4b0a      	ldr	r3, [pc, #40]	; (8003500 <HAL_RCC_GetSysClockFreq+0x108>)
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	0e5b      	lsrs	r3, r3, #25
 80034dc:	f003 0303 	and.w	r3, r3, #3
 80034e0:	3301      	adds	r3, #1
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80034f0:	69bb      	ldr	r3, [r7, #24]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3724      	adds	r7, #36	; 0x24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	40021000 	.word	0x40021000
 8003504:	0800a410 	.word	0x0800a410
 8003508:	00f42400 	.word	0x00f42400
 800350c:	007a1200 	.word	0x007a1200

08003510 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003514:	4b03      	ldr	r3, [pc, #12]	; (8003524 <HAL_RCC_GetHCLKFreq+0x14>)
 8003516:	681b      	ldr	r3, [r3, #0]
}
 8003518:	4618      	mov	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	20000004 	.word	0x20000004

08003528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800352c:	f7ff fff0 	bl	8003510 <HAL_RCC_GetHCLKFreq>
 8003530:	4602      	mov	r2, r0
 8003532:	4b06      	ldr	r3, [pc, #24]	; (800354c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	0a1b      	lsrs	r3, r3, #8
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	4904      	ldr	r1, [pc, #16]	; (8003550 <HAL_RCC_GetPCLK1Freq+0x28>)
 800353e:	5ccb      	ldrb	r3, [r1, r3]
 8003540:	f003 031f 	and.w	r3, r3, #31
 8003544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003548:	4618      	mov	r0, r3
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40021000 	.word	0x40021000
 8003550:	0800a408 	.word	0x0800a408

08003554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003558:	f7ff ffda 	bl	8003510 <HAL_RCC_GetHCLKFreq>
 800355c:	4602      	mov	r2, r0
 800355e:	4b06      	ldr	r3, [pc, #24]	; (8003578 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	0adb      	lsrs	r3, r3, #11
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	4904      	ldr	r1, [pc, #16]	; (800357c <HAL_RCC_GetPCLK2Freq+0x28>)
 800356a:	5ccb      	ldrb	r3, [r1, r3]
 800356c:	f003 031f 	and.w	r3, r3, #31
 8003570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003574:	4618      	mov	r0, r3
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40021000 	.word	0x40021000
 800357c:	0800a408 	.word	0x0800a408

08003580 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003588:	2300      	movs	r3, #0
 800358a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800358c:	4b2a      	ldr	r3, [pc, #168]	; (8003638 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800358e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003598:	f7ff fa02 	bl	80029a0 <HAL_PWREx_GetVoltageRange>
 800359c:	6178      	str	r0, [r7, #20]
 800359e:	e014      	b.n	80035ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035a0:	4b25      	ldr	r3, [pc, #148]	; (8003638 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a4:	4a24      	ldr	r2, [pc, #144]	; (8003638 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035aa:	6593      	str	r3, [r2, #88]	; 0x58
 80035ac:	4b22      	ldr	r3, [pc, #136]	; (8003638 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b4:	60fb      	str	r3, [r7, #12]
 80035b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035b8:	f7ff f9f2 	bl	80029a0 <HAL_PWREx_GetVoltageRange>
 80035bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035be:	4b1e      	ldr	r3, [pc, #120]	; (8003638 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c2:	4a1d      	ldr	r2, [pc, #116]	; (8003638 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035d0:	d10b      	bne.n	80035ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b80      	cmp	r3, #128	; 0x80
 80035d6:	d919      	bls.n	800360c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2ba0      	cmp	r3, #160	; 0xa0
 80035dc:	d902      	bls.n	80035e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035de:	2302      	movs	r3, #2
 80035e0:	613b      	str	r3, [r7, #16]
 80035e2:	e013      	b.n	800360c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035e4:	2301      	movs	r3, #1
 80035e6:	613b      	str	r3, [r7, #16]
 80035e8:	e010      	b.n	800360c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b80      	cmp	r3, #128	; 0x80
 80035ee:	d902      	bls.n	80035f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035f0:	2303      	movs	r3, #3
 80035f2:	613b      	str	r3, [r7, #16]
 80035f4:	e00a      	b.n	800360c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b80      	cmp	r3, #128	; 0x80
 80035fa:	d102      	bne.n	8003602 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035fc:	2302      	movs	r3, #2
 80035fe:	613b      	str	r3, [r7, #16]
 8003600:	e004      	b.n	800360c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b70      	cmp	r3, #112	; 0x70
 8003606:	d101      	bne.n	800360c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003608:	2301      	movs	r3, #1
 800360a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800360c:	4b0b      	ldr	r3, [pc, #44]	; (800363c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f023 0207 	bic.w	r2, r3, #7
 8003614:	4909      	ldr	r1, [pc, #36]	; (800363c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800361c:	4b07      	ldr	r3, [pc, #28]	; (800363c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	429a      	cmp	r2, r3
 8003628:	d001      	beq.n	800362e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3718      	adds	r7, #24
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40021000 	.word	0x40021000
 800363c:	40022000 	.word	0x40022000

08003640 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003648:	2300      	movs	r3, #0
 800364a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800364c:	2300      	movs	r3, #0
 800364e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003658:	2b00      	cmp	r3, #0
 800365a:	d041      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003660:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003664:	d02a      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003666:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800366a:	d824      	bhi.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800366c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003670:	d008      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003672:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003676:	d81e      	bhi.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00a      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800367c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003680:	d010      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003682:	e018      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003684:	4b86      	ldr	r3, [pc, #536]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	4a85      	ldr	r2, [pc, #532]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800368a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800368e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003690:	e015      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3304      	adds	r3, #4
 8003696:	2100      	movs	r1, #0
 8003698:	4618      	mov	r0, r3
 800369a:	f000 fabb 	bl	8003c14 <RCCEx_PLLSAI1_Config>
 800369e:	4603      	mov	r3, r0
 80036a0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036a2:	e00c      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3320      	adds	r3, #32
 80036a8:	2100      	movs	r1, #0
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 fba6 	bl	8003dfc <RCCEx_PLLSAI2_Config>
 80036b0:	4603      	mov	r3, r0
 80036b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036b4:	e003      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	74fb      	strb	r3, [r7, #19]
      break;
 80036ba:	e000      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80036bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036be:	7cfb      	ldrb	r3, [r7, #19]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10b      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036c4:	4b76      	ldr	r3, [pc, #472]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036d2:	4973      	ldr	r1, [pc, #460]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036da:	e001      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036dc:	7cfb      	ldrb	r3, [r7, #19]
 80036de:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d041      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036f4:	d02a      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80036f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036fa:	d824      	bhi.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003700:	d008      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003702:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003706:	d81e      	bhi.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00a      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800370c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003710:	d010      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003712:	e018      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003714:	4b62      	ldr	r3, [pc, #392]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	4a61      	ldr	r2, [pc, #388]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800371a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800371e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003720:	e015      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	3304      	adds	r3, #4
 8003726:	2100      	movs	r1, #0
 8003728:	4618      	mov	r0, r3
 800372a:	f000 fa73 	bl	8003c14 <RCCEx_PLLSAI1_Config>
 800372e:	4603      	mov	r3, r0
 8003730:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003732:	e00c      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3320      	adds	r3, #32
 8003738:	2100      	movs	r1, #0
 800373a:	4618      	mov	r0, r3
 800373c:	f000 fb5e 	bl	8003dfc <RCCEx_PLLSAI2_Config>
 8003740:	4603      	mov	r3, r0
 8003742:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003744:	e003      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	74fb      	strb	r3, [r7, #19]
      break;
 800374a:	e000      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800374c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800374e:	7cfb      	ldrb	r3, [r7, #19]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10b      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003754:	4b52      	ldr	r3, [pc, #328]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003762:	494f      	ldr	r1, [pc, #316]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003764:	4313      	orrs	r3, r2
 8003766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800376a:	e001      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800376c:	7cfb      	ldrb	r3, [r7, #19]
 800376e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 80a0 	beq.w	80038be <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800377e:	2300      	movs	r3, #0
 8003780:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003782:	4b47      	ldr	r3, [pc, #284]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800378e:	2301      	movs	r3, #1
 8003790:	e000      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003792:	2300      	movs	r3, #0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00d      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003798:	4b41      	ldr	r3, [pc, #260]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800379a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379c:	4a40      	ldr	r2, [pc, #256]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800379e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a2:	6593      	str	r3, [r2, #88]	; 0x58
 80037a4:	4b3e      	ldr	r3, [pc, #248]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ac:	60bb      	str	r3, [r7, #8]
 80037ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037b0:	2301      	movs	r3, #1
 80037b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037b4:	4b3b      	ldr	r3, [pc, #236]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a3a      	ldr	r2, [pc, #232]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037c0:	f7fe fa9a 	bl	8001cf8 <HAL_GetTick>
 80037c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037c6:	e009      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c8:	f7fe fa96 	bl	8001cf8 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d902      	bls.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	74fb      	strb	r3, [r7, #19]
        break;
 80037da:	e005      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037dc:	4b31      	ldr	r3, [pc, #196]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0ef      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80037e8:	7cfb      	ldrb	r3, [r7, #19]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d15c      	bne.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037ee:	4b2c      	ldr	r3, [pc, #176]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d01f      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	429a      	cmp	r2, r3
 800380a:	d019      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800380c:	4b24      	ldr	r3, [pc, #144]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800380e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003816:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003818:	4b21      	ldr	r3, [pc, #132]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800381a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381e:	4a20      	ldr	r2, [pc, #128]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003828:	4b1d      	ldr	r3, [pc, #116]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800382a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382e:	4a1c      	ldr	r2, [pc, #112]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003830:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003834:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003838:	4a19      	ldr	r2, [pc, #100]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d016      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384a:	f7fe fa55 	bl	8001cf8 <HAL_GetTick>
 800384e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003850:	e00b      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003852:	f7fe fa51 	bl	8001cf8 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003860:	4293      	cmp	r3, r2
 8003862:	d902      	bls.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	74fb      	strb	r3, [r7, #19]
            break;
 8003868:	e006      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800386a:	4b0d      	ldr	r3, [pc, #52]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800386c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0ec      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003878:	7cfb      	ldrb	r3, [r7, #19]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10c      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800387e:	4b08      	ldr	r3, [pc, #32]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003884:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800388e:	4904      	ldr	r1, [pc, #16]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003890:	4313      	orrs	r3, r2
 8003892:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003896:	e009      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003898:	7cfb      	ldrb	r3, [r7, #19]
 800389a:	74bb      	strb	r3, [r7, #18]
 800389c:	e006      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800389e:	bf00      	nop
 80038a0:	40021000 	.word	0x40021000
 80038a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a8:	7cfb      	ldrb	r3, [r7, #19]
 80038aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038ac:	7c7b      	ldrb	r3, [r7, #17]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d105      	bne.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038b2:	4b9e      	ldr	r3, [pc, #632]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b6:	4a9d      	ldr	r2, [pc, #628]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00a      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038ca:	4b98      	ldr	r3, [pc, #608]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d0:	f023 0203 	bic.w	r2, r3, #3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d8:	4994      	ldr	r1, [pc, #592]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00a      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038ec:	4b8f      	ldr	r3, [pc, #572]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f2:	f023 020c 	bic.w	r2, r3, #12
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fa:	498c      	ldr	r1, [pc, #560]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0304 	and.w	r3, r3, #4
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800390e:	4b87      	ldr	r3, [pc, #540]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003914:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	4983      	ldr	r1, [pc, #524]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0308 	and.w	r3, r3, #8
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00a      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003930:	4b7e      	ldr	r3, [pc, #504]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003936:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393e:	497b      	ldr	r1, [pc, #492]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003940:	4313      	orrs	r3, r2
 8003942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0310 	and.w	r3, r3, #16
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003952:	4b76      	ldr	r3, [pc, #472]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003958:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003960:	4972      	ldr	r1, [pc, #456]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003962:	4313      	orrs	r3, r2
 8003964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0320 	and.w	r3, r3, #32
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00a      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003974:	4b6d      	ldr	r3, [pc, #436]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003982:	496a      	ldr	r1, [pc, #424]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003984:	4313      	orrs	r3, r2
 8003986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00a      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003996:	4b65      	ldr	r3, [pc, #404]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a4:	4961      	ldr	r1, [pc, #388]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00a      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039b8:	4b5c      	ldr	r3, [pc, #368]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c6:	4959      	ldr	r1, [pc, #356]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00a      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039da:	4b54      	ldr	r3, [pc, #336]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e8:	4950      	ldr	r1, [pc, #320]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00a      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039fc:	4b4b      	ldr	r3, [pc, #300]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a02:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0a:	4948      	ldr	r1, [pc, #288]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00a      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a1e:	4b43      	ldr	r3, [pc, #268]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2c:	493f      	ldr	r1, [pc, #252]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d028      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a40:	4b3a      	ldr	r3, [pc, #232]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a4e:	4937      	ldr	r1, [pc, #220]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a5e:	d106      	bne.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a60:	4b32      	ldr	r3, [pc, #200]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	4a31      	ldr	r2, [pc, #196]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a6a:	60d3      	str	r3, [r2, #12]
 8003a6c:	e011      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a76:	d10c      	bne.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 f8c8 	bl	8003c14 <RCCEx_PLLSAI1_Config>
 8003a84:	4603      	mov	r3, r0
 8003a86:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a88:	7cfb      	ldrb	r3, [r7, #19]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003a8e:	7cfb      	ldrb	r3, [r7, #19]
 8003a90:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d028      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a9e:	4b23      	ldr	r3, [pc, #140]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aac:	491f      	ldr	r1, [pc, #124]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003abc:	d106      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003abe:	4b1b      	ldr	r3, [pc, #108]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	4a1a      	ldr	r2, [pc, #104]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ac8:	60d3      	str	r3, [r2, #12]
 8003aca:	e011      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ad4:	d10c      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	3304      	adds	r3, #4
 8003ada:	2101      	movs	r1, #1
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 f899 	bl	8003c14 <RCCEx_PLLSAI1_Config>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ae6:	7cfb      	ldrb	r3, [r7, #19]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003aec:	7cfb      	ldrb	r3, [r7, #19]
 8003aee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d02b      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003afc:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0a:	4908      	ldr	r1, [pc, #32]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b1a:	d109      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b1c:	4b03      	ldr	r3, [pc, #12]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	4a02      	ldr	r2, [pc, #8]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b26:	60d3      	str	r3, [r2, #12]
 8003b28:	e014      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003b2a:	bf00      	nop
 8003b2c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b38:	d10c      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	2101      	movs	r1, #1
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 f867 	bl	8003c14 <RCCEx_PLLSAI1_Config>
 8003b46:	4603      	mov	r3, r0
 8003b48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b4a:	7cfb      	ldrb	r3, [r7, #19]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003b50:	7cfb      	ldrb	r3, [r7, #19]
 8003b52:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d02f      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b60:	4b2b      	ldr	r3, [pc, #172]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b6e:	4928      	ldr	r1, [pc, #160]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b7e:	d10d      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3304      	adds	r3, #4
 8003b84:	2102      	movs	r1, #2
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 f844 	bl	8003c14 <RCCEx_PLLSAI1_Config>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b90:	7cfb      	ldrb	r3, [r7, #19]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d014      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b96:	7cfb      	ldrb	r3, [r7, #19]
 8003b98:	74bb      	strb	r3, [r7, #18]
 8003b9a:	e011      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ba0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	3320      	adds	r3, #32
 8003baa:	2102      	movs	r1, #2
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 f925 	bl	8003dfc <RCCEx_PLLSAI2_Config>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bb6:	7cfb      	ldrb	r3, [r7, #19]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003bbc:	7cfb      	ldrb	r3, [r7, #19]
 8003bbe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00a      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003bcc:	4b10      	ldr	r3, [pc, #64]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bda:	490d      	ldr	r1, [pc, #52]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00b      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003bee:	4b08      	ldr	r3, [pc, #32]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bfe:	4904      	ldr	r1, [pc, #16]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c06:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3718      	adds	r7, #24
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40021000 	.word	0x40021000

08003c14 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c22:	4b75      	ldr	r3, [pc, #468]	; (8003df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f003 0303 	and.w	r3, r3, #3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d018      	beq.n	8003c60 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c2e:	4b72      	ldr	r3, [pc, #456]	; (8003df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	f003 0203 	and.w	r2, r3, #3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d10d      	bne.n	8003c5a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
       ||
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d009      	beq.n	8003c5a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c46:	4b6c      	ldr	r3, [pc, #432]	; (8003df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	091b      	lsrs	r3, r3, #4
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
       ||
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d047      	beq.n	8003cea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	73fb      	strb	r3, [r7, #15]
 8003c5e:	e044      	b.n	8003cea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	d018      	beq.n	8003c9a <RCCEx_PLLSAI1_Config+0x86>
 8003c68:	2b03      	cmp	r3, #3
 8003c6a:	d825      	bhi.n	8003cb8 <RCCEx_PLLSAI1_Config+0xa4>
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d002      	beq.n	8003c76 <RCCEx_PLLSAI1_Config+0x62>
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d009      	beq.n	8003c88 <RCCEx_PLLSAI1_Config+0x74>
 8003c74:	e020      	b.n	8003cb8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c76:	4b60      	ldr	r3, [pc, #384]	; (8003df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d11d      	bne.n	8003cbe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c86:	e01a      	b.n	8003cbe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c88:	4b5b      	ldr	r3, [pc, #364]	; (8003df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d116      	bne.n	8003cc2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c98:	e013      	b.n	8003cc2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c9a:	4b57      	ldr	r3, [pc, #348]	; (8003df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10f      	bne.n	8003cc6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ca6:	4b54      	ldr	r3, [pc, #336]	; (8003df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d109      	bne.n	8003cc6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003cb6:	e006      	b.n	8003cc6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	73fb      	strb	r3, [r7, #15]
      break;
 8003cbc:	e004      	b.n	8003cc8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cbe:	bf00      	nop
 8003cc0:	e002      	b.n	8003cc8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cc2:	bf00      	nop
 8003cc4:	e000      	b.n	8003cc8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cc6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003cc8:	7bfb      	ldrb	r3, [r7, #15]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10d      	bne.n	8003cea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003cce:	4b4a      	ldr	r3, [pc, #296]	; (8003df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6819      	ldr	r1, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	430b      	orrs	r3, r1
 8003ce4:	4944      	ldr	r1, [pc, #272]	; (8003df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cea:	7bfb      	ldrb	r3, [r7, #15]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d17d      	bne.n	8003dec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003cf0:	4b41      	ldr	r3, [pc, #260]	; (8003df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a40      	ldr	r2, [pc, #256]	; (8003df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cf6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cfc:	f7fd fffc 	bl	8001cf8 <HAL_GetTick>
 8003d00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d02:	e009      	b.n	8003d18 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d04:	f7fd fff8 	bl	8001cf8 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d902      	bls.n	8003d18 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	73fb      	strb	r3, [r7, #15]
        break;
 8003d16:	e005      	b.n	8003d24 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d18:	4b37      	ldr	r3, [pc, #220]	; (8003df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1ef      	bne.n	8003d04 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d160      	bne.n	8003dec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d111      	bne.n	8003d54 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d30:	4b31      	ldr	r3, [pc, #196]	; (8003df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6892      	ldr	r2, [r2, #8]
 8003d40:	0211      	lsls	r1, r2, #8
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	68d2      	ldr	r2, [r2, #12]
 8003d46:	0912      	lsrs	r2, r2, #4
 8003d48:	0452      	lsls	r2, r2, #17
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	492a      	ldr	r1, [pc, #168]	; (8003df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	610b      	str	r3, [r1, #16]
 8003d52:	e027      	b.n	8003da4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d112      	bne.n	8003d80 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d5a:	4b27      	ldr	r3, [pc, #156]	; (8003df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d62:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	6892      	ldr	r2, [r2, #8]
 8003d6a:	0211      	lsls	r1, r2, #8
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	6912      	ldr	r2, [r2, #16]
 8003d70:	0852      	lsrs	r2, r2, #1
 8003d72:	3a01      	subs	r2, #1
 8003d74:	0552      	lsls	r2, r2, #21
 8003d76:	430a      	orrs	r2, r1
 8003d78:	491f      	ldr	r1, [pc, #124]	; (8003df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	610b      	str	r3, [r1, #16]
 8003d7e:	e011      	b.n	8003da4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d80:	4b1d      	ldr	r3, [pc, #116]	; (8003df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	6892      	ldr	r2, [r2, #8]
 8003d90:	0211      	lsls	r1, r2, #8
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	6952      	ldr	r2, [r2, #20]
 8003d96:	0852      	lsrs	r2, r2, #1
 8003d98:	3a01      	subs	r2, #1
 8003d9a:	0652      	lsls	r2, r2, #25
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	4916      	ldr	r1, [pc, #88]	; (8003df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003da4:	4b14      	ldr	r3, [pc, #80]	; (8003df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a13      	ldr	r2, [pc, #76]	; (8003df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003daa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003dae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db0:	f7fd ffa2 	bl	8001cf8 <HAL_GetTick>
 8003db4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003db6:	e009      	b.n	8003dcc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003db8:	f7fd ff9e 	bl	8001cf8 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d902      	bls.n	8003dcc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	73fb      	strb	r3, [r7, #15]
          break;
 8003dca:	e005      	b.n	8003dd8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003dcc:	4b0a      	ldr	r3, [pc, #40]	; (8003df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0ef      	beq.n	8003db8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d106      	bne.n	8003dec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003dde:	4b06      	ldr	r3, [pc, #24]	; (8003df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003de0:	691a      	ldr	r2, [r3, #16]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	4904      	ldr	r1, [pc, #16]	; (8003df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	40021000 	.word	0x40021000

08003dfc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e06:	2300      	movs	r3, #0
 8003e08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e0a:	4b6a      	ldr	r3, [pc, #424]	; (8003fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f003 0303 	and.w	r3, r3, #3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d018      	beq.n	8003e48 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003e16:	4b67      	ldr	r3, [pc, #412]	; (8003fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f003 0203 	and.w	r2, r3, #3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d10d      	bne.n	8003e42 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
       ||
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d009      	beq.n	8003e42 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003e2e:	4b61      	ldr	r3, [pc, #388]	; (8003fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	091b      	lsrs	r3, r3, #4
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
       ||
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d047      	beq.n	8003ed2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	73fb      	strb	r3, [r7, #15]
 8003e46:	e044      	b.n	8003ed2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b03      	cmp	r3, #3
 8003e4e:	d018      	beq.n	8003e82 <RCCEx_PLLSAI2_Config+0x86>
 8003e50:	2b03      	cmp	r3, #3
 8003e52:	d825      	bhi.n	8003ea0 <RCCEx_PLLSAI2_Config+0xa4>
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d002      	beq.n	8003e5e <RCCEx_PLLSAI2_Config+0x62>
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d009      	beq.n	8003e70 <RCCEx_PLLSAI2_Config+0x74>
 8003e5c:	e020      	b.n	8003ea0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e5e:	4b55      	ldr	r3, [pc, #340]	; (8003fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d11d      	bne.n	8003ea6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e6e:	e01a      	b.n	8003ea6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e70:	4b50      	ldr	r3, [pc, #320]	; (8003fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d116      	bne.n	8003eaa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e80:	e013      	b.n	8003eaa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e82:	4b4c      	ldr	r3, [pc, #304]	; (8003fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10f      	bne.n	8003eae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e8e:	4b49      	ldr	r3, [pc, #292]	; (8003fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d109      	bne.n	8003eae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e9e:	e006      	b.n	8003eae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ea4:	e004      	b.n	8003eb0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ea6:	bf00      	nop
 8003ea8:	e002      	b.n	8003eb0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003eaa:	bf00      	nop
 8003eac:	e000      	b.n	8003eb0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003eae:	bf00      	nop
    }

    if(status == HAL_OK)
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10d      	bne.n	8003ed2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003eb6:	4b3f      	ldr	r3, [pc, #252]	; (8003fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6819      	ldr	r1, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	430b      	orrs	r3, r1
 8003ecc:	4939      	ldr	r1, [pc, #228]	; (8003fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ed2:	7bfb      	ldrb	r3, [r7, #15]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d167      	bne.n	8003fa8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ed8:	4b36      	ldr	r3, [pc, #216]	; (8003fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a35      	ldr	r2, [pc, #212]	; (8003fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ede:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ee2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ee4:	f7fd ff08 	bl	8001cf8 <HAL_GetTick>
 8003ee8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003eea:	e009      	b.n	8003f00 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003eec:	f7fd ff04 	bl	8001cf8 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d902      	bls.n	8003f00 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	73fb      	strb	r3, [r7, #15]
        break;
 8003efe:	e005      	b.n	8003f0c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f00:	4b2c      	ldr	r3, [pc, #176]	; (8003fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1ef      	bne.n	8003eec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d14a      	bne.n	8003fa8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d111      	bne.n	8003f3c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f18:	4b26      	ldr	r3, [pc, #152]	; (8003fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6892      	ldr	r2, [r2, #8]
 8003f28:	0211      	lsls	r1, r2, #8
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	68d2      	ldr	r2, [r2, #12]
 8003f2e:	0912      	lsrs	r2, r2, #4
 8003f30:	0452      	lsls	r2, r2, #17
 8003f32:	430a      	orrs	r2, r1
 8003f34:	491f      	ldr	r1, [pc, #124]	; (8003fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	614b      	str	r3, [r1, #20]
 8003f3a:	e011      	b.n	8003f60 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f3c:	4b1d      	ldr	r3, [pc, #116]	; (8003fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f44:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	6892      	ldr	r2, [r2, #8]
 8003f4c:	0211      	lsls	r1, r2, #8
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	6912      	ldr	r2, [r2, #16]
 8003f52:	0852      	lsrs	r2, r2, #1
 8003f54:	3a01      	subs	r2, #1
 8003f56:	0652      	lsls	r2, r2, #25
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	4916      	ldr	r1, [pc, #88]	; (8003fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003f60:	4b14      	ldr	r3, [pc, #80]	; (8003fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a13      	ldr	r2, [pc, #76]	; (8003fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f6c:	f7fd fec4 	bl	8001cf8 <HAL_GetTick>
 8003f70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f72:	e009      	b.n	8003f88 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f74:	f7fd fec0 	bl	8001cf8 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d902      	bls.n	8003f88 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	73fb      	strb	r3, [r7, #15]
          break;
 8003f86:	e005      	b.n	8003f94 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f88:	4b0a      	ldr	r3, [pc, #40]	; (8003fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0ef      	beq.n	8003f74 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f9a:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f9c:	695a      	ldr	r2, [r3, #20]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	4904      	ldr	r1, [pc, #16]	; (8003fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	40021000 	.word	0x40021000

08003fb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e040      	b.n	800404c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d106      	bne.n	8003fe0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fd fd76 	bl	8001acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2224      	movs	r2, #36	; 0x24
 8003fe4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0201 	bic.w	r2, r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 fb26 	bl	8004648 <UART_SetConfig>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e022      	b.n	800404c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 fda4 	bl	8004b5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004022:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689a      	ldr	r2, [r3, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004032:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0201 	orr.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 fe2b 	bl	8004ca0 <UART_CheckIdleState>
 800404a:	4603      	mov	r3, r0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b08a      	sub	sp, #40	; 0x28
 8004058:	af02      	add	r7, sp, #8
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	603b      	str	r3, [r7, #0]
 8004060:	4613      	mov	r3, r2
 8004062:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004068:	2b20      	cmp	r3, #32
 800406a:	f040 8082 	bne.w	8004172 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <HAL_UART_Transmit+0x26>
 8004074:	88fb      	ldrh	r3, [r7, #6]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e07a      	b.n	8004174 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_UART_Transmit+0x38>
 8004088:	2302      	movs	r3, #2
 800408a:	e073      	b.n	8004174 <HAL_UART_Transmit+0x120>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2221      	movs	r2, #33	; 0x21
 80040a0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040a2:	f7fd fe29 	bl	8001cf8 <HAL_GetTick>
 80040a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	88fa      	ldrh	r2, [r7, #6]
 80040ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	88fa      	ldrh	r2, [r7, #6]
 80040b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c0:	d108      	bne.n	80040d4 <HAL_UART_Transmit+0x80>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d104      	bne.n	80040d4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80040ca:	2300      	movs	r3, #0
 80040cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	61bb      	str	r3, [r7, #24]
 80040d2:	e003      	b.n	80040dc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040d8:	2300      	movs	r3, #0
 80040da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80040e4:	e02d      	b.n	8004142 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	2200      	movs	r2, #0
 80040ee:	2180      	movs	r1, #128	; 0x80
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 fe1e 	bl	8004d32 <UART_WaitOnFlagUntilTimeout>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e039      	b.n	8004174 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10b      	bne.n	800411e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	881a      	ldrh	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004112:	b292      	uxth	r2, r2
 8004114:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	3302      	adds	r3, #2
 800411a:	61bb      	str	r3, [r7, #24]
 800411c:	e008      	b.n	8004130 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	781a      	ldrb	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	b292      	uxth	r2, r2
 8004128:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	3301      	adds	r3, #1
 800412e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004136:	b29b      	uxth	r3, r3
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1cb      	bne.n	80040e6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2200      	movs	r2, #0
 8004156:	2140      	movs	r1, #64	; 0x40
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 fdea 	bl	8004d32 <UART_WaitOnFlagUntilTimeout>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e005      	b.n	8004174 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2220      	movs	r2, #32
 800416c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	e000      	b.n	8004174 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004172:	2302      	movs	r3, #2
  }
}
 8004174:	4618      	mov	r0, r3
 8004176:	3720      	adds	r7, #32
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	4613      	mov	r3, r2
 8004188:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800418e:	2b20      	cmp	r3, #32
 8004190:	d131      	bne.n	80041f6 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <HAL_UART_Receive_IT+0x22>
 8004198:	88fb      	ldrh	r3, [r7, #6]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e02a      	b.n	80041f8 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d101      	bne.n	80041b0 <HAL_UART_Receive_IT+0x34>
 80041ac:	2302      	movs	r3, #2
 80041ae:	e023      	b.n	80041f8 <HAL_UART_Receive_IT+0x7c>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a0f      	ldr	r2, [pc, #60]	; (8004200 <HAL_UART_Receive_IT+0x84>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d00e      	beq.n	80041e6 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d007      	beq.n	80041e6 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80041e4:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80041e6:	88fb      	ldrh	r3, [r7, #6]
 80041e8:	461a      	mov	r2, r3
 80041ea:	68b9      	ldr	r1, [r7, #8]
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 fe1d 	bl	8004e2c <UART_Start_Receive_IT>
 80041f2:	4603      	mov	r3, r0
 80041f4:	e000      	b.n	80041f8 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 80041f6:	2302      	movs	r3, #2
  }
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40008000 	.word	0x40008000

08004204 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004224:	69fa      	ldr	r2, [r7, #28]
 8004226:	f640 030f 	movw	r3, #2063	; 0x80f
 800422a:	4013      	ands	r3, r2
 800422c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d113      	bne.n	800425c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	f003 0320 	and.w	r3, r3, #32
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00e      	beq.n	800425c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	f003 0320 	and.w	r3, r3, #32
 8004244:	2b00      	cmp	r3, #0
 8004246:	d009      	beq.n	800425c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 81ce 	beq.w	80045ee <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	4798      	blx	r3
      }
      return;
 800425a:	e1c8      	b.n	80045ee <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 80e3 	beq.w	800442a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d105      	bne.n	800427a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	4ba6      	ldr	r3, [pc, #664]	; (800450c <HAL_UART_IRQHandler+0x308>)
 8004272:	4013      	ands	r3, r2
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 80d8 	beq.w	800442a <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	d010      	beq.n	80042a6 <HAL_UART_IRQHandler+0xa2>
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00b      	beq.n	80042a6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2201      	movs	r2, #1
 8004294:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800429c:	f043 0201 	orr.w	r2, r3, #1
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d010      	beq.n	80042d2 <HAL_UART_IRQHandler+0xce>
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00b      	beq.n	80042d2 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2202      	movs	r2, #2
 80042c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042c8:	f043 0204 	orr.w	r2, r3, #4
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d010      	beq.n	80042fe <HAL_UART_IRQHandler+0xfa>
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00b      	beq.n	80042fe <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2204      	movs	r2, #4
 80042ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042f4:	f043 0202 	orr.w	r2, r3, #2
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	f003 0308 	and.w	r3, r3, #8
 8004304:	2b00      	cmp	r3, #0
 8004306:	d015      	beq.n	8004334 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	f003 0320 	and.w	r3, r3, #32
 800430e:	2b00      	cmp	r3, #0
 8004310:	d104      	bne.n	800431c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00b      	beq.n	8004334 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2208      	movs	r2, #8
 8004322:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800432a:	f043 0208 	orr.w	r2, r3, #8
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800433a:	2b00      	cmp	r3, #0
 800433c:	d011      	beq.n	8004362 <HAL_UART_IRQHandler+0x15e>
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00c      	beq.n	8004362 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004350:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004358:	f043 0220 	orr.w	r2, r3, #32
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 8142 	beq.w	80045f2 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	f003 0320 	and.w	r3, r3, #32
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00c      	beq.n	8004392 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	f003 0320 	and.w	r3, r3, #32
 800437e:	2b00      	cmp	r3, #0
 8004380:	d007      	beq.n	8004392 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004398:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a4:	2b40      	cmp	r3, #64	; 0x40
 80043a6:	d004      	beq.n	80043b2 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d031      	beq.n	8004416 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 fdc2 	bl	8004f3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c2:	2b40      	cmp	r3, #64	; 0x40
 80043c4:	d123      	bne.n	800440e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043d4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d013      	beq.n	8004406 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e2:	4a4b      	ldr	r2, [pc, #300]	; (8004510 <HAL_UART_IRQHandler+0x30c>)
 80043e4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fd fe03 	bl	8001ff6 <HAL_DMA_Abort_IT>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d017      	beq.n	8004426 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004400:	4610      	mov	r0, r2
 8004402:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004404:	e00f      	b.n	8004426 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f908 	bl	800461c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800440c:	e00b      	b.n	8004426 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f904 	bl	800461c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004414:	e007      	b.n	8004426 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f900 	bl	800461c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004424:	e0e5      	b.n	80045f2 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004426:	bf00      	nop
    return;
 8004428:	e0e3      	b.n	80045f2 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800442e:	2b01      	cmp	r3, #1
 8004430:	f040 80a9 	bne.w	8004586 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	f003 0310 	and.w	r3, r3, #16
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 80a3 	beq.w	8004586 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	f003 0310 	and.w	r3, r3, #16
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 809d 	beq.w	8004586 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2210      	movs	r2, #16
 8004452:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445e:	2b40      	cmp	r3, #64	; 0x40
 8004460:	d158      	bne.n	8004514 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800446c:	893b      	ldrh	r3, [r7, #8]
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 80c1 	beq.w	80045f6 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800447a:	893a      	ldrh	r2, [r7, #8]
 800447c:	429a      	cmp	r2, r3
 800447e:	f080 80ba 	bcs.w	80045f6 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	893a      	ldrh	r2, [r7, #8]
 8004486:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0320 	and.w	r3, r3, #32
 8004496:	2b00      	cmp	r3, #0
 8004498:	d12a      	bne.n	80044f0 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044a8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0201 	bic.w	r2, r2, #1
 80044b8:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044c8:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2220      	movs	r2, #32
 80044ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 0210 	bic.w	r2, r2, #16
 80044e4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fd fd45 	bl	8001f7a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	b29b      	uxth	r3, r3
 8004502:	4619      	mov	r1, r3
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f893 	bl	8004630 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800450a:	e074      	b.n	80045f6 <HAL_UART_IRQHandler+0x3f2>
 800450c:	04000120 	.word	0x04000120
 8004510:	08004f9b 	.word	0x08004f9b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004520:	b29b      	uxth	r3, r3
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800452c:	b29b      	uxth	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d063      	beq.n	80045fa <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8004532:	897b      	ldrh	r3, [r7, #10]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d060      	beq.n	80045fa <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004546:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 0201 	bic.w	r2, r2, #1
 8004556:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2220      	movs	r2, #32
 800455c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0210 	bic.w	r2, r2, #16
 8004578:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800457a:	897b      	ldrh	r3, [r7, #10]
 800457c:	4619      	mov	r1, r3
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f856 	bl	8004630 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004584:	e039      	b.n	80045fa <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00d      	beq.n	80045ac <HAL_UART_IRQHandler+0x3a8>
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d008      	beq.n	80045ac <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80045a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 fdff 	bl	80051a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045aa:	e029      	b.n	8004600 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00d      	beq.n	80045d2 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d008      	beq.n	80045d2 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d01a      	beq.n	80045fe <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	4798      	blx	r3
    }
    return;
 80045d0:	e015      	b.n	80045fe <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d011      	beq.n	8004600 <HAL_UART_IRQHandler+0x3fc>
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00c      	beq.n	8004600 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 fced 	bl	8004fc6 <UART_EndTransmit_IT>
    return;
 80045ec:	e008      	b.n	8004600 <HAL_UART_IRQHandler+0x3fc>
      return;
 80045ee:	bf00      	nop
 80045f0:	e006      	b.n	8004600 <HAL_UART_IRQHandler+0x3fc>
    return;
 80045f2:	bf00      	nop
 80045f4:	e004      	b.n	8004600 <HAL_UART_IRQHandler+0x3fc>
      return;
 80045f6:	bf00      	nop
 80045f8:	e002      	b.n	8004600 <HAL_UART_IRQHandler+0x3fc>
      return;
 80045fa:	bf00      	nop
 80045fc:	e000      	b.n	8004600 <HAL_UART_IRQHandler+0x3fc>
    return;
 80045fe:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004600:	3720      	adds	r7, #32
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop

08004608 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	460b      	mov	r3, r1
 800463a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004648:	b5b0      	push	{r4, r5, r7, lr}
 800464a:	b088      	sub	sp, #32
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004650:	2300      	movs	r3, #0
 8004652:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	431a      	orrs	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	4313      	orrs	r3, r2
 800466a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	4bad      	ldr	r3, [pc, #692]	; (8004928 <UART_SetConfig+0x2e0>)
 8004674:	4013      	ands	r3, r2
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6812      	ldr	r2, [r2, #0]
 800467a:	69f9      	ldr	r1, [r7, #28]
 800467c:	430b      	orrs	r3, r1
 800467e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68da      	ldr	r2, [r3, #12]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4aa2      	ldr	r2, [pc, #648]	; (800492c <UART_SetConfig+0x2e4>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d004      	beq.n	80046b0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	69fa      	ldr	r2, [r7, #28]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	69fa      	ldr	r2, [r7, #28]
 80046c0:	430a      	orrs	r2, r1
 80046c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a99      	ldr	r2, [pc, #612]	; (8004930 <UART_SetConfig+0x2e8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d121      	bne.n	8004712 <UART_SetConfig+0xca>
 80046ce:	4b99      	ldr	r3, [pc, #612]	; (8004934 <UART_SetConfig+0x2ec>)
 80046d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d4:	f003 0303 	and.w	r3, r3, #3
 80046d8:	2b03      	cmp	r3, #3
 80046da:	d817      	bhi.n	800470c <UART_SetConfig+0xc4>
 80046dc:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <UART_SetConfig+0x9c>)
 80046de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e2:	bf00      	nop
 80046e4:	080046f5 	.word	0x080046f5
 80046e8:	08004701 	.word	0x08004701
 80046ec:	080046fb 	.word	0x080046fb
 80046f0:	08004707 	.word	0x08004707
 80046f4:	2301      	movs	r3, #1
 80046f6:	76fb      	strb	r3, [r7, #27]
 80046f8:	e0e7      	b.n	80048ca <UART_SetConfig+0x282>
 80046fa:	2302      	movs	r3, #2
 80046fc:	76fb      	strb	r3, [r7, #27]
 80046fe:	e0e4      	b.n	80048ca <UART_SetConfig+0x282>
 8004700:	2304      	movs	r3, #4
 8004702:	76fb      	strb	r3, [r7, #27]
 8004704:	e0e1      	b.n	80048ca <UART_SetConfig+0x282>
 8004706:	2308      	movs	r3, #8
 8004708:	76fb      	strb	r3, [r7, #27]
 800470a:	e0de      	b.n	80048ca <UART_SetConfig+0x282>
 800470c:	2310      	movs	r3, #16
 800470e:	76fb      	strb	r3, [r7, #27]
 8004710:	e0db      	b.n	80048ca <UART_SetConfig+0x282>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a88      	ldr	r2, [pc, #544]	; (8004938 <UART_SetConfig+0x2f0>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d132      	bne.n	8004782 <UART_SetConfig+0x13a>
 800471c:	4b85      	ldr	r3, [pc, #532]	; (8004934 <UART_SetConfig+0x2ec>)
 800471e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004722:	f003 030c 	and.w	r3, r3, #12
 8004726:	2b0c      	cmp	r3, #12
 8004728:	d828      	bhi.n	800477c <UART_SetConfig+0x134>
 800472a:	a201      	add	r2, pc, #4	; (adr r2, 8004730 <UART_SetConfig+0xe8>)
 800472c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004730:	08004765 	.word	0x08004765
 8004734:	0800477d 	.word	0x0800477d
 8004738:	0800477d 	.word	0x0800477d
 800473c:	0800477d 	.word	0x0800477d
 8004740:	08004771 	.word	0x08004771
 8004744:	0800477d 	.word	0x0800477d
 8004748:	0800477d 	.word	0x0800477d
 800474c:	0800477d 	.word	0x0800477d
 8004750:	0800476b 	.word	0x0800476b
 8004754:	0800477d 	.word	0x0800477d
 8004758:	0800477d 	.word	0x0800477d
 800475c:	0800477d 	.word	0x0800477d
 8004760:	08004777 	.word	0x08004777
 8004764:	2300      	movs	r3, #0
 8004766:	76fb      	strb	r3, [r7, #27]
 8004768:	e0af      	b.n	80048ca <UART_SetConfig+0x282>
 800476a:	2302      	movs	r3, #2
 800476c:	76fb      	strb	r3, [r7, #27]
 800476e:	e0ac      	b.n	80048ca <UART_SetConfig+0x282>
 8004770:	2304      	movs	r3, #4
 8004772:	76fb      	strb	r3, [r7, #27]
 8004774:	e0a9      	b.n	80048ca <UART_SetConfig+0x282>
 8004776:	2308      	movs	r3, #8
 8004778:	76fb      	strb	r3, [r7, #27]
 800477a:	e0a6      	b.n	80048ca <UART_SetConfig+0x282>
 800477c:	2310      	movs	r3, #16
 800477e:	76fb      	strb	r3, [r7, #27]
 8004780:	e0a3      	b.n	80048ca <UART_SetConfig+0x282>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a6d      	ldr	r2, [pc, #436]	; (800493c <UART_SetConfig+0x2f4>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d120      	bne.n	80047ce <UART_SetConfig+0x186>
 800478c:	4b69      	ldr	r3, [pc, #420]	; (8004934 <UART_SetConfig+0x2ec>)
 800478e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004792:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004796:	2b30      	cmp	r3, #48	; 0x30
 8004798:	d013      	beq.n	80047c2 <UART_SetConfig+0x17a>
 800479a:	2b30      	cmp	r3, #48	; 0x30
 800479c:	d814      	bhi.n	80047c8 <UART_SetConfig+0x180>
 800479e:	2b20      	cmp	r3, #32
 80047a0:	d009      	beq.n	80047b6 <UART_SetConfig+0x16e>
 80047a2:	2b20      	cmp	r3, #32
 80047a4:	d810      	bhi.n	80047c8 <UART_SetConfig+0x180>
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d002      	beq.n	80047b0 <UART_SetConfig+0x168>
 80047aa:	2b10      	cmp	r3, #16
 80047ac:	d006      	beq.n	80047bc <UART_SetConfig+0x174>
 80047ae:	e00b      	b.n	80047c8 <UART_SetConfig+0x180>
 80047b0:	2300      	movs	r3, #0
 80047b2:	76fb      	strb	r3, [r7, #27]
 80047b4:	e089      	b.n	80048ca <UART_SetConfig+0x282>
 80047b6:	2302      	movs	r3, #2
 80047b8:	76fb      	strb	r3, [r7, #27]
 80047ba:	e086      	b.n	80048ca <UART_SetConfig+0x282>
 80047bc:	2304      	movs	r3, #4
 80047be:	76fb      	strb	r3, [r7, #27]
 80047c0:	e083      	b.n	80048ca <UART_SetConfig+0x282>
 80047c2:	2308      	movs	r3, #8
 80047c4:	76fb      	strb	r3, [r7, #27]
 80047c6:	e080      	b.n	80048ca <UART_SetConfig+0x282>
 80047c8:	2310      	movs	r3, #16
 80047ca:	76fb      	strb	r3, [r7, #27]
 80047cc:	e07d      	b.n	80048ca <UART_SetConfig+0x282>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a5b      	ldr	r2, [pc, #364]	; (8004940 <UART_SetConfig+0x2f8>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d120      	bne.n	800481a <UART_SetConfig+0x1d2>
 80047d8:	4b56      	ldr	r3, [pc, #344]	; (8004934 <UART_SetConfig+0x2ec>)
 80047da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80047e2:	2bc0      	cmp	r3, #192	; 0xc0
 80047e4:	d013      	beq.n	800480e <UART_SetConfig+0x1c6>
 80047e6:	2bc0      	cmp	r3, #192	; 0xc0
 80047e8:	d814      	bhi.n	8004814 <UART_SetConfig+0x1cc>
 80047ea:	2b80      	cmp	r3, #128	; 0x80
 80047ec:	d009      	beq.n	8004802 <UART_SetConfig+0x1ba>
 80047ee:	2b80      	cmp	r3, #128	; 0x80
 80047f0:	d810      	bhi.n	8004814 <UART_SetConfig+0x1cc>
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d002      	beq.n	80047fc <UART_SetConfig+0x1b4>
 80047f6:	2b40      	cmp	r3, #64	; 0x40
 80047f8:	d006      	beq.n	8004808 <UART_SetConfig+0x1c0>
 80047fa:	e00b      	b.n	8004814 <UART_SetConfig+0x1cc>
 80047fc:	2300      	movs	r3, #0
 80047fe:	76fb      	strb	r3, [r7, #27]
 8004800:	e063      	b.n	80048ca <UART_SetConfig+0x282>
 8004802:	2302      	movs	r3, #2
 8004804:	76fb      	strb	r3, [r7, #27]
 8004806:	e060      	b.n	80048ca <UART_SetConfig+0x282>
 8004808:	2304      	movs	r3, #4
 800480a:	76fb      	strb	r3, [r7, #27]
 800480c:	e05d      	b.n	80048ca <UART_SetConfig+0x282>
 800480e:	2308      	movs	r3, #8
 8004810:	76fb      	strb	r3, [r7, #27]
 8004812:	e05a      	b.n	80048ca <UART_SetConfig+0x282>
 8004814:	2310      	movs	r3, #16
 8004816:	76fb      	strb	r3, [r7, #27]
 8004818:	e057      	b.n	80048ca <UART_SetConfig+0x282>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a49      	ldr	r2, [pc, #292]	; (8004944 <UART_SetConfig+0x2fc>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d125      	bne.n	8004870 <UART_SetConfig+0x228>
 8004824:	4b43      	ldr	r3, [pc, #268]	; (8004934 <UART_SetConfig+0x2ec>)
 8004826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800482e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004832:	d017      	beq.n	8004864 <UART_SetConfig+0x21c>
 8004834:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004838:	d817      	bhi.n	800486a <UART_SetConfig+0x222>
 800483a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800483e:	d00b      	beq.n	8004858 <UART_SetConfig+0x210>
 8004840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004844:	d811      	bhi.n	800486a <UART_SetConfig+0x222>
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <UART_SetConfig+0x20a>
 800484a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800484e:	d006      	beq.n	800485e <UART_SetConfig+0x216>
 8004850:	e00b      	b.n	800486a <UART_SetConfig+0x222>
 8004852:	2300      	movs	r3, #0
 8004854:	76fb      	strb	r3, [r7, #27]
 8004856:	e038      	b.n	80048ca <UART_SetConfig+0x282>
 8004858:	2302      	movs	r3, #2
 800485a:	76fb      	strb	r3, [r7, #27]
 800485c:	e035      	b.n	80048ca <UART_SetConfig+0x282>
 800485e:	2304      	movs	r3, #4
 8004860:	76fb      	strb	r3, [r7, #27]
 8004862:	e032      	b.n	80048ca <UART_SetConfig+0x282>
 8004864:	2308      	movs	r3, #8
 8004866:	76fb      	strb	r3, [r7, #27]
 8004868:	e02f      	b.n	80048ca <UART_SetConfig+0x282>
 800486a:	2310      	movs	r3, #16
 800486c:	76fb      	strb	r3, [r7, #27]
 800486e:	e02c      	b.n	80048ca <UART_SetConfig+0x282>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a2d      	ldr	r2, [pc, #180]	; (800492c <UART_SetConfig+0x2e4>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d125      	bne.n	80048c6 <UART_SetConfig+0x27e>
 800487a:	4b2e      	ldr	r3, [pc, #184]	; (8004934 <UART_SetConfig+0x2ec>)
 800487c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004880:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004884:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004888:	d017      	beq.n	80048ba <UART_SetConfig+0x272>
 800488a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800488e:	d817      	bhi.n	80048c0 <UART_SetConfig+0x278>
 8004890:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004894:	d00b      	beq.n	80048ae <UART_SetConfig+0x266>
 8004896:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800489a:	d811      	bhi.n	80048c0 <UART_SetConfig+0x278>
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <UART_SetConfig+0x260>
 80048a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048a4:	d006      	beq.n	80048b4 <UART_SetConfig+0x26c>
 80048a6:	e00b      	b.n	80048c0 <UART_SetConfig+0x278>
 80048a8:	2300      	movs	r3, #0
 80048aa:	76fb      	strb	r3, [r7, #27]
 80048ac:	e00d      	b.n	80048ca <UART_SetConfig+0x282>
 80048ae:	2302      	movs	r3, #2
 80048b0:	76fb      	strb	r3, [r7, #27]
 80048b2:	e00a      	b.n	80048ca <UART_SetConfig+0x282>
 80048b4:	2304      	movs	r3, #4
 80048b6:	76fb      	strb	r3, [r7, #27]
 80048b8:	e007      	b.n	80048ca <UART_SetConfig+0x282>
 80048ba:	2308      	movs	r3, #8
 80048bc:	76fb      	strb	r3, [r7, #27]
 80048be:	e004      	b.n	80048ca <UART_SetConfig+0x282>
 80048c0:	2310      	movs	r3, #16
 80048c2:	76fb      	strb	r3, [r7, #27]
 80048c4:	e001      	b.n	80048ca <UART_SetConfig+0x282>
 80048c6:	2310      	movs	r3, #16
 80048c8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a17      	ldr	r2, [pc, #92]	; (800492c <UART_SetConfig+0x2e4>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	f040 8087 	bne.w	80049e4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048d6:	7efb      	ldrb	r3, [r7, #27]
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d837      	bhi.n	800494c <UART_SetConfig+0x304>
 80048dc:	a201      	add	r2, pc, #4	; (adr r2, 80048e4 <UART_SetConfig+0x29c>)
 80048de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e2:	bf00      	nop
 80048e4:	08004909 	.word	0x08004909
 80048e8:	0800494d 	.word	0x0800494d
 80048ec:	08004911 	.word	0x08004911
 80048f0:	0800494d 	.word	0x0800494d
 80048f4:	08004917 	.word	0x08004917
 80048f8:	0800494d 	.word	0x0800494d
 80048fc:	0800494d 	.word	0x0800494d
 8004900:	0800494d 	.word	0x0800494d
 8004904:	0800491f 	.word	0x0800491f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004908:	f7fe fe0e 	bl	8003528 <HAL_RCC_GetPCLK1Freq>
 800490c:	6178      	str	r0, [r7, #20]
        break;
 800490e:	e022      	b.n	8004956 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004910:	4b0d      	ldr	r3, [pc, #52]	; (8004948 <UART_SetConfig+0x300>)
 8004912:	617b      	str	r3, [r7, #20]
        break;
 8004914:	e01f      	b.n	8004956 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004916:	f7fe fd6f 	bl	80033f8 <HAL_RCC_GetSysClockFreq>
 800491a:	6178      	str	r0, [r7, #20]
        break;
 800491c:	e01b      	b.n	8004956 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800491e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004922:	617b      	str	r3, [r7, #20]
        break;
 8004924:	e017      	b.n	8004956 <UART_SetConfig+0x30e>
 8004926:	bf00      	nop
 8004928:	efff69f3 	.word	0xefff69f3
 800492c:	40008000 	.word	0x40008000
 8004930:	40013800 	.word	0x40013800
 8004934:	40021000 	.word	0x40021000
 8004938:	40004400 	.word	0x40004400
 800493c:	40004800 	.word	0x40004800
 8004940:	40004c00 	.word	0x40004c00
 8004944:	40005000 	.word	0x40005000
 8004948:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	76bb      	strb	r3, [r7, #26]
        break;
 8004954:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 80f1 	beq.w	8004b40 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	4613      	mov	r3, r2
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	4413      	add	r3, r2
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	429a      	cmp	r2, r3
 800496c:	d305      	bcc.n	800497a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	429a      	cmp	r2, r3
 8004978:	d902      	bls.n	8004980 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	76bb      	strb	r3, [r7, #26]
 800497e:	e0df      	b.n	8004b40 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	4618      	mov	r0, r3
 8004984:	f04f 0100 	mov.w	r1, #0
 8004988:	f04f 0200 	mov.w	r2, #0
 800498c:	f04f 0300 	mov.w	r3, #0
 8004990:	020b      	lsls	r3, r1, #8
 8004992:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004996:	0202      	lsls	r2, r0, #8
 8004998:	6879      	ldr	r1, [r7, #4]
 800499a:	6849      	ldr	r1, [r1, #4]
 800499c:	0849      	lsrs	r1, r1, #1
 800499e:	4608      	mov	r0, r1
 80049a0:	f04f 0100 	mov.w	r1, #0
 80049a4:	1814      	adds	r4, r2, r0
 80049a6:	eb43 0501 	adc.w	r5, r3, r1
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	461a      	mov	r2, r3
 80049b0:	f04f 0300 	mov.w	r3, #0
 80049b4:	4620      	mov	r0, r4
 80049b6:	4629      	mov	r1, r5
 80049b8:	f7fc f966 	bl	8000c88 <__aeabi_uldivmod>
 80049bc:	4602      	mov	r2, r0
 80049be:	460b      	mov	r3, r1
 80049c0:	4613      	mov	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049ca:	d308      	bcc.n	80049de <UART_SetConfig+0x396>
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049d2:	d204      	bcs.n	80049de <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	60da      	str	r2, [r3, #12]
 80049dc:	e0b0      	b.n	8004b40 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	76bb      	strb	r3, [r7, #26]
 80049e2:	e0ad      	b.n	8004b40 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ec:	d15c      	bne.n	8004aa8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80049ee:	7efb      	ldrb	r3, [r7, #27]
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d828      	bhi.n	8004a46 <UART_SetConfig+0x3fe>
 80049f4:	a201      	add	r2, pc, #4	; (adr r2, 80049fc <UART_SetConfig+0x3b4>)
 80049f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fa:	bf00      	nop
 80049fc:	08004a21 	.word	0x08004a21
 8004a00:	08004a29 	.word	0x08004a29
 8004a04:	08004a31 	.word	0x08004a31
 8004a08:	08004a47 	.word	0x08004a47
 8004a0c:	08004a37 	.word	0x08004a37
 8004a10:	08004a47 	.word	0x08004a47
 8004a14:	08004a47 	.word	0x08004a47
 8004a18:	08004a47 	.word	0x08004a47
 8004a1c:	08004a3f 	.word	0x08004a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a20:	f7fe fd82 	bl	8003528 <HAL_RCC_GetPCLK1Freq>
 8004a24:	6178      	str	r0, [r7, #20]
        break;
 8004a26:	e013      	b.n	8004a50 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a28:	f7fe fd94 	bl	8003554 <HAL_RCC_GetPCLK2Freq>
 8004a2c:	6178      	str	r0, [r7, #20]
        break;
 8004a2e:	e00f      	b.n	8004a50 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a30:	4b49      	ldr	r3, [pc, #292]	; (8004b58 <UART_SetConfig+0x510>)
 8004a32:	617b      	str	r3, [r7, #20]
        break;
 8004a34:	e00c      	b.n	8004a50 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a36:	f7fe fcdf 	bl	80033f8 <HAL_RCC_GetSysClockFreq>
 8004a3a:	6178      	str	r0, [r7, #20]
        break;
 8004a3c:	e008      	b.n	8004a50 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a42:	617b      	str	r3, [r7, #20]
        break;
 8004a44:	e004      	b.n	8004a50 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004a46:	2300      	movs	r3, #0
 8004a48:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	76bb      	strb	r3, [r7, #26]
        break;
 8004a4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d074      	beq.n	8004b40 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	005a      	lsls	r2, r3, #1
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	085b      	lsrs	r3, r3, #1
 8004a60:	441a      	add	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	2b0f      	cmp	r3, #15
 8004a72:	d916      	bls.n	8004aa2 <UART_SetConfig+0x45a>
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a7a:	d212      	bcs.n	8004aa2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	f023 030f 	bic.w	r3, r3, #15
 8004a84:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	085b      	lsrs	r3, r3, #1
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	89fb      	ldrh	r3, [r7, #14]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	89fa      	ldrh	r2, [r7, #14]
 8004a9e:	60da      	str	r2, [r3, #12]
 8004aa0:	e04e      	b.n	8004b40 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	76bb      	strb	r3, [r7, #26]
 8004aa6:	e04b      	b.n	8004b40 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004aa8:	7efb      	ldrb	r3, [r7, #27]
 8004aaa:	2b08      	cmp	r3, #8
 8004aac:	d827      	bhi.n	8004afe <UART_SetConfig+0x4b6>
 8004aae:	a201      	add	r2, pc, #4	; (adr r2, 8004ab4 <UART_SetConfig+0x46c>)
 8004ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab4:	08004ad9 	.word	0x08004ad9
 8004ab8:	08004ae1 	.word	0x08004ae1
 8004abc:	08004ae9 	.word	0x08004ae9
 8004ac0:	08004aff 	.word	0x08004aff
 8004ac4:	08004aef 	.word	0x08004aef
 8004ac8:	08004aff 	.word	0x08004aff
 8004acc:	08004aff 	.word	0x08004aff
 8004ad0:	08004aff 	.word	0x08004aff
 8004ad4:	08004af7 	.word	0x08004af7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ad8:	f7fe fd26 	bl	8003528 <HAL_RCC_GetPCLK1Freq>
 8004adc:	6178      	str	r0, [r7, #20]
        break;
 8004ade:	e013      	b.n	8004b08 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ae0:	f7fe fd38 	bl	8003554 <HAL_RCC_GetPCLK2Freq>
 8004ae4:	6178      	str	r0, [r7, #20]
        break;
 8004ae6:	e00f      	b.n	8004b08 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ae8:	4b1b      	ldr	r3, [pc, #108]	; (8004b58 <UART_SetConfig+0x510>)
 8004aea:	617b      	str	r3, [r7, #20]
        break;
 8004aec:	e00c      	b.n	8004b08 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aee:	f7fe fc83 	bl	80033f8 <HAL_RCC_GetSysClockFreq>
 8004af2:	6178      	str	r0, [r7, #20]
        break;
 8004af4:	e008      	b.n	8004b08 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004afa:	617b      	str	r3, [r7, #20]
        break;
 8004afc:	e004      	b.n	8004b08 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004afe:	2300      	movs	r3, #0
 8004b00:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	76bb      	strb	r3, [r7, #26]
        break;
 8004b06:	bf00      	nop
    }

    if (pclk != 0U)
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d018      	beq.n	8004b40 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	085a      	lsrs	r2, r3, #1
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	441a      	add	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	2b0f      	cmp	r3, #15
 8004b28:	d908      	bls.n	8004b3c <UART_SetConfig+0x4f4>
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b30:	d204      	bcs.n	8004b3c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	60da      	str	r2, [r3, #12]
 8004b3a:	e001      	b.n	8004b40 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004b4c:	7ebb      	ldrb	r3, [r7, #26]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3720      	adds	r7, #32
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bdb0      	pop	{r4, r5, r7, pc}
 8004b56:	bf00      	nop
 8004b58:	00f42400 	.word	0x00f42400

08004b5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00a      	beq.n	8004b86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00a      	beq.n	8004ba8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00a      	beq.n	8004bca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	f003 0308 	and.w	r3, r3, #8
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00a      	beq.n	8004bec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	f003 0310 	and.w	r3, r3, #16
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00a      	beq.n	8004c0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	f003 0320 	and.w	r3, r3, #32
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00a      	beq.n	8004c30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d01a      	beq.n	8004c72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c5a:	d10a      	bne.n	8004c72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00a      	beq.n	8004c94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	605a      	str	r2, [r3, #4]
  }
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af02      	add	r7, sp, #8
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cb0:	f7fd f822 	bl	8001cf8 <HAL_GetTick>
 8004cb4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0308 	and.w	r3, r3, #8
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	d10e      	bne.n	8004ce2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f82d 	bl	8004d32 <UART_WaitOnFlagUntilTimeout>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e023      	b.n	8004d2a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	2b04      	cmp	r3, #4
 8004cee:	d10e      	bne.n	8004d0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f817 	bl	8004d32 <UART_WaitOnFlagUntilTimeout>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d001      	beq.n	8004d0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e00d      	b.n	8004d2a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2220      	movs	r2, #32
 8004d12:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2220      	movs	r2, #32
 8004d18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b084      	sub	sp, #16
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	603b      	str	r3, [r7, #0]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d42:	e05e      	b.n	8004e02 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4a:	d05a      	beq.n	8004e02 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d4c:	f7fc ffd4 	bl	8001cf8 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	69ba      	ldr	r2, [r7, #24]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d302      	bcc.n	8004d62 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d11b      	bne.n	8004d9a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d70:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 0201 	bic.w	r2, r2, #1
 8004d80:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2220      	movs	r2, #32
 8004d86:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e043      	b.n	8004e22 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0304 	and.w	r3, r3, #4
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d02c      	beq.n	8004e02 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004db2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004db6:	d124      	bne.n	8004e02 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dc0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004dd0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 0201 	bic.w	r2, r2, #1
 8004de0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2220      	movs	r2, #32
 8004de6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2220      	movs	r2, #32
 8004dec:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2220      	movs	r2, #32
 8004df2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e00f      	b.n	8004e22 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	69da      	ldr	r2, [r3, #28]
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	bf0c      	ite	eq
 8004e12:	2301      	moveq	r3, #1
 8004e14:	2300      	movne	r3, #0
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	461a      	mov	r2, r3
 8004e1a:	79fb      	ldrb	r3, [r7, #7]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d091      	beq.n	8004d44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
	...

08004e2c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	4613      	mov	r3, r2
 8004e38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	88fa      	ldrh	r2, [r7, #6]
 8004e44:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	88fa      	ldrh	r2, [r7, #6]
 8004e4c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e5e:	d10e      	bne.n	8004e7e <UART_Start_Receive_IT+0x52>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d105      	bne.n	8004e74 <UART_Start_Receive_IT+0x48>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004e6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e72:	e02d      	b.n	8004ed0 <UART_Start_Receive_IT+0xa4>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	22ff      	movs	r2, #255	; 0xff
 8004e78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e7c:	e028      	b.n	8004ed0 <UART_Start_Receive_IT+0xa4>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10d      	bne.n	8004ea2 <UART_Start_Receive_IT+0x76>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d104      	bne.n	8004e98 <UART_Start_Receive_IT+0x6c>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	22ff      	movs	r2, #255	; 0xff
 8004e92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e96:	e01b      	b.n	8004ed0 <UART_Start_Receive_IT+0xa4>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	227f      	movs	r2, #127	; 0x7f
 8004e9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ea0:	e016      	b.n	8004ed0 <UART_Start_Receive_IT+0xa4>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004eaa:	d10d      	bne.n	8004ec8 <UART_Start_Receive_IT+0x9c>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d104      	bne.n	8004ebe <UART_Start_Receive_IT+0x92>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	227f      	movs	r2, #127	; 0x7f
 8004eb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ebc:	e008      	b.n	8004ed0 <UART_Start_Receive_IT+0xa4>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	223f      	movs	r2, #63	; 0x3f
 8004ec2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ec6:	e003      	b.n	8004ed0 <UART_Start_Receive_IT+0xa4>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2222      	movs	r2, #34	; 0x22
 8004edc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f042 0201 	orr.w	r2, r2, #1
 8004eec:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ef6:	d107      	bne.n	8004f08 <UART_Start_Receive_IT+0xdc>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d103      	bne.n	8004f08 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4a0c      	ldr	r2, [pc, #48]	; (8004f34 <UART_Start_Receive_IT+0x108>)
 8004f04:	665a      	str	r2, [r3, #100]	; 0x64
 8004f06:	e002      	b.n	8004f0e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4a0b      	ldr	r2, [pc, #44]	; (8004f38 <UART_Start_Receive_IT+0x10c>)
 8004f0c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004f24:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3714      	adds	r7, #20
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	080050d1 	.word	0x080050d1
 8004f38:	08004ff9 	.word	0x08004ff9

08004f3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f52:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689a      	ldr	r2, [r3, #8]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 0201 	bic.w	r2, r2, #1
 8004f62:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d107      	bne.n	8004f7c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 0210 	bic.w	r2, r2, #16
 8004f7a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b084      	sub	sp, #16
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f7ff fb2f 	bl	800461c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fbe:	bf00      	nop
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b082      	sub	sp, #8
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fdc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7ff fb0c 	bl	8004608 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ff0:	bf00      	nop
 8004ff2:	3708      	adds	r7, #8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005006:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800500c:	2b22      	cmp	r3, #34	; 0x22
 800500e:	d151      	bne.n	80050b4 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005016:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005018:	89bb      	ldrh	r3, [r7, #12]
 800501a:	b2d9      	uxtb	r1, r3
 800501c:	89fb      	ldrh	r3, [r7, #14]
 800501e:	b2da      	uxtb	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005024:	400a      	ands	r2, r1
 8005026:	b2d2      	uxtb	r2, r2
 8005028:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502e:	1c5a      	adds	r2, r3, #1
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800503a:	b29b      	uxth	r3, r3
 800503c:	3b01      	subs	r3, #1
 800503e:	b29a      	uxth	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800504c:	b29b      	uxth	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d13a      	bne.n	80050c8 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005060:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	689a      	ldr	r2, [r3, #8]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0201 	bic.w	r2, r2, #1
 8005070:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2220      	movs	r2, #32
 8005076:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005082:	2b01      	cmp	r3, #1
 8005084:	d10f      	bne.n	80050a6 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 0210 	bic.w	r2, r2, #16
 8005094:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800509c:	4619      	mov	r1, r3
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7ff fac6 	bl	8004630 <HAL_UARTEx_RxEventCallback>
 80050a4:	e002      	b.n	80050ac <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7fc f916 	bl	80012d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80050b2:	e009      	b.n	80050c8 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	8b1b      	ldrh	r3, [r3, #24]
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f042 0208 	orr.w	r2, r2, #8
 80050c4:	b292      	uxth	r2, r2
 80050c6:	831a      	strh	r2, [r3, #24]
}
 80050c8:	bf00      	nop
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80050de:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050e4:	2b22      	cmp	r3, #34	; 0x22
 80050e6:	d151      	bne.n	800518c <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80050ee:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f4:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80050f6:	89ba      	ldrh	r2, [r7, #12]
 80050f8:	89fb      	ldrh	r3, [r7, #14]
 80050fa:	4013      	ands	r3, r2
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005106:	1c9a      	adds	r2, r3, #2
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005112:	b29b      	uxth	r3, r3
 8005114:	3b01      	subs	r3, #1
 8005116:	b29a      	uxth	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005124:	b29b      	uxth	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d13a      	bne.n	80051a0 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005138:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0201 	bic.w	r2, r2, #1
 8005148:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2220      	movs	r2, #32
 800514e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800515a:	2b01      	cmp	r3, #1
 800515c:	d10f      	bne.n	800517e <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 0210 	bic.w	r2, r2, #16
 800516c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005174:	4619      	mov	r1, r3
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7ff fa5a 	bl	8004630 <HAL_UARTEx_RxEventCallback>
 800517c:	e002      	b.n	8005184 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7fc f8aa 	bl	80012d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800518a:	e009      	b.n	80051a0 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	8b1b      	ldrh	r3, [r3, #24]
 8005192:	b29a      	uxth	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f042 0208 	orr.w	r2, r2, #8
 800519c:	b292      	uxth	r2, r2
 800519e:	831a      	strh	r2, [r3, #24]
}
 80051a0:	bf00      	nop
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <_Z11Flash_erasem>:
}



/*_________________________________________________________________________________________________________________________________*/
void Flash_erase( uint32_t _page ) {
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
	FLASH_EraseInitTypeDef EraseStruct ;
	static uint32_t PageEraseERROR_Addr  ;
	HAL_FLASH_Unlock() ;
 80051c4:	f7fc ffc4 	bl	8002150 <HAL_FLASH_Unlock>
	if( _page <= LAST_PAGE_ADDR_BANK1)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a12      	ldr	r2, [pc, #72]	; (8005214 <_Z11Flash_erasem+0x58>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d802      	bhi.n	80051d6 <_Z11Flash_erasem+0x1a>
		EraseStruct.Banks = FLASH_BANK_1 ;
 80051d0:	2301      	movs	r3, #1
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	e001      	b.n	80051da <_Z11Flash_erasem+0x1e>
	else
		EraseStruct.Banks = FLASH_BANK_2 ;
 80051d6:	2302      	movs	r3, #2
 80051d8:	60fb      	str	r3, [r7, #12]
	EraseStruct.NbPages = 1 ;
 80051da:	2301      	movs	r3, #1
 80051dc:	617b      	str	r3, [r7, #20]
	EraseStruct.TypeErase = FLASH_TYPEERASE_PAGES ;
 80051de:	2300      	movs	r3, #0
 80051e0:	60bb      	str	r3, [r7, #8]
	EraseStruct.Page = _page ;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	613b      	str	r3, [r7, #16]

	if( HAL_FLASHEx_Erase( &EraseStruct, &PageEraseERROR_Addr ) != HAL_OK )
 80051e6:	f107 0308 	add.w	r3, r7, #8
 80051ea:	490b      	ldr	r1, [pc, #44]	; (8005218 <_Z11Flash_erasem+0x5c>)
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7fd f89f 	bl	8002330 <HAL_FLASHEx_Erase>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	bf14      	ite	ne
 80051f8:	2301      	movne	r3, #1
 80051fa:	2300      	moveq	r3, #0
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d002      	beq.n	8005208 <_Z11Flash_erasem+0x4c>
		return (void)HAL_FLASH_GetError() ;
 8005202:	f7fc ffd7 	bl	80021b4 <HAL_FLASH_GetError>
 8005206:	e001      	b.n	800520c <_Z11Flash_erasem+0x50>

	HAL_FLASH_Lock() ;
 8005208:	f7fc ffc4 	bl	8002194 <HAL_FLASH_Lock>
}
 800520c:	3718      	adds	r7, #24
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	0807f800 	.word	0x0807f800
 8005218:	20000278 	.word	0x20000278

0800521c <_Z22Flash_write_doubleWordmPKh>:
}



/*_________________________________________________________________________________________________________________________________*/
void  Flash_write_doubleWord( uint32_t _address, const uint8_t* _data ) {
 800521c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005220:	b092      	sub	sp, #72	; 0x48
 8005222:	af00      	add	r7, sp, #0
 8005224:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005226:	62b9      	str	r1, [r7, #40]	; 0x28
	HAL_FLASH_Unlock() ;
 8005228:	f7fc ff92 	bl	8002150 <HAL_FLASH_Unlock>

	uint8_t dataArr[9] ;
	memset( (char*)dataArr, 0x00, 9 ) ;
 800522c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005230:	2209      	movs	r2, #9
 8005232:	2100      	movs	r1, #0
 8005234:	4618      	mov	r0, r3
 8005236:	f000 fc11 	bl	8005a5c <memset>
	memcpy( (char*)dataArr, (char*)_data, 8 ) ;
 800523a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800523e:	2208      	movs	r2, #8
 8005240:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005242:	4618      	mov	r0, r3
 8005244:	f000 fbe2 	bl	8005a0c <memcpy>

	uint64_t data = 0x00 ;
 8005248:	f04f 0200 	mov.w	r2, #0
 800524c:	f04f 0300 	mov.w	r3, #0
 8005250:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

	data |= dataArr[7] ; data <<= 8 ;
 8005254:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005258:	b2d8      	uxtb	r0, r3
 800525a:	f04f 0100 	mov.w	r1, #0
 800525e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005262:	ea42 0400 	orr.w	r4, r2, r0
 8005266:	ea43 0501 	orr.w	r5, r3, r1
 800526a:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40
 800526e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005272:	f04f 0000 	mov.w	r0, #0
 8005276:	f04f 0100 	mov.w	r1, #0
 800527a:	0219      	lsls	r1, r3, #8
 800527c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8005280:	0210      	lsls	r0, r2, #8
 8005282:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
	data |= dataArr[6] ; data <<= 8 ;
 8005286:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800528a:	b2d8      	uxtb	r0, r3
 800528c:	f04f 0100 	mov.w	r1, #0
 8005290:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005294:	ea42 0800 	orr.w	r8, r2, r0
 8005298:	ea43 0901 	orr.w	r9, r3, r1
 800529c:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
 80052a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052a4:	f04f 0000 	mov.w	r0, #0
 80052a8:	f04f 0100 	mov.w	r1, #0
 80052ac:	0219      	lsls	r1, r3, #8
 80052ae:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80052b2:	0210      	lsls	r0, r2, #8
 80052b4:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
	data |= dataArr[5] ; data <<= 8 ;
 80052b8:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80052bc:	b2d8      	uxtb	r0, r3
 80052be:	f04f 0100 	mov.w	r1, #0
 80052c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052c6:	ea42 0a00 	orr.w	sl, r2, r0
 80052ca:	ea43 0b01 	orr.w	fp, r3, r1
 80052ce:	e9c7 ab10 	strd	sl, fp, [r7, #64]	; 0x40
 80052d2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80052d6:	f04f 0200 	mov.w	r2, #0
 80052da:	f04f 0300 	mov.w	r3, #0
 80052de:	020b      	lsls	r3, r1, #8
 80052e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80052e4:	0202      	lsls	r2, r0, #8
 80052e6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	data |= dataArr[4] ; data <<= 8 ;
 80052ea:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	f04f 0300 	mov.w	r3, #0
 80052f4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80052f8:	ea40 0402 	orr.w	r4, r0, r2
 80052fc:	623c      	str	r4, [r7, #32]
 80052fe:	430b      	orrs	r3, r1
 8005300:	627b      	str	r3, [r7, #36]	; 0x24
 8005302:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005306:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 800530a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800530e:	f04f 0200 	mov.w	r2, #0
 8005312:	f04f 0300 	mov.w	r3, #0
 8005316:	020b      	lsls	r3, r1, #8
 8005318:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800531c:	0202      	lsls	r2, r0, #8
 800531e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	data |= dataArr[3] ; data <<= 8 ;
 8005322:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005326:	b2da      	uxtb	r2, r3
 8005328:	f04f 0300 	mov.w	r3, #0
 800532c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005330:	ea40 0402 	orr.w	r4, r0, r2
 8005334:	61bc      	str	r4, [r7, #24]
 8005336:	430b      	orrs	r3, r1
 8005338:	61fb      	str	r3, [r7, #28]
 800533a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800533e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 8005342:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005346:	f04f 0200 	mov.w	r2, #0
 800534a:	f04f 0300 	mov.w	r3, #0
 800534e:	020b      	lsls	r3, r1, #8
 8005350:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005354:	0202      	lsls	r2, r0, #8
 8005356:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	data |= dataArr[2] ; data <<= 8 ;
 800535a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800535e:	b2da      	uxtb	r2, r3
 8005360:	f04f 0300 	mov.w	r3, #0
 8005364:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005368:	ea40 0402 	orr.w	r4, r0, r2
 800536c:	613c      	str	r4, [r7, #16]
 800536e:	430b      	orrs	r3, r1
 8005370:	617b      	str	r3, [r7, #20]
 8005372:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005376:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 800537a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800537e:	f04f 0200 	mov.w	r2, #0
 8005382:	f04f 0300 	mov.w	r3, #0
 8005386:	020b      	lsls	r3, r1, #8
 8005388:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800538c:	0202      	lsls	r2, r0, #8
 800538e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	data |= dataArr[1] ; data <<= 8 ;
 8005392:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005396:	b2da      	uxtb	r2, r3
 8005398:	f04f 0300 	mov.w	r3, #0
 800539c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80053a0:	ea40 0402 	orr.w	r4, r0, r2
 80053a4:	60bc      	str	r4, [r7, #8]
 80053a6:	430b      	orrs	r3, r1
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80053ae:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
 80053b2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80053b6:	f04f 0200 	mov.w	r2, #0
 80053ba:	f04f 0300 	mov.w	r3, #0
 80053be:	020b      	lsls	r3, r1, #8
 80053c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80053c4:	0202      	lsls	r2, r0, #8
 80053c6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	data |= dataArr[0] ;
 80053ca:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	f04f 0300 	mov.w	r3, #0
 80053d4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80053d8:	ea40 0402 	orr.w	r4, r0, r2
 80053dc:	603c      	str	r4, [r7, #0]
 80053de:	430b      	orrs	r3, r1
 80053e0:	607b      	str	r3, [r7, #4]
 80053e2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80053e6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

	HAL_FLASH_Program( FLASH_TYPEPROGRAM_DOUBLEWORD, _address, data ) ;
 80053ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053f0:	2000      	movs	r0, #0
 80053f2:	f7fc fe41 	bl	8002078 <HAL_FLASH_Program>

	HAL_FLASH_Lock() ;
 80053f6:	f7fc fecd 	bl	8002194 <HAL_FLASH_Lock>
}
 80053fa:	bf00      	nop
 80053fc:	3748      	adds	r7, #72	; 0x48
 80053fe:	46bd      	mov	sp, r7
 8005400:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005404 <_ZN7Sim7600C1EP20__UART_HandleTypeDef>:

#include "hw.h"
#include "define.h"

/*____________________________________________________________________________________________________________________________________________*/
Sim7600::Sim7600( UART_HandleTypeDef * _huartx ) {
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
 800540e:	4a0b      	ldr	r2, [pc, #44]	; (800543c <_ZN7Sim7600C1EP20__UART_HandleTypeDef+0x38>)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	3304      	adds	r3, #4
 8005418:	4618      	mov	r0, r3
 800541a:	f000 fa5a 	bl	80058d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	771a      	strb	r2, [r3, #28]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	775a      	strb	r2, [r3, #29]
	huartx = &*_huartx ;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	621a      	str	r2, [r3, #32]
}
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4618      	mov	r0, r3
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	0800a448 	.word	0x0800a448

08005440 <_ZN7Sim7600D1Ev>:



/*____________________________________________________________________________________________________________________________________________*/
Sim7600::~Sim7600() {
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	4a06      	ldr	r2, [pc, #24]	; (8005464 <_ZN7Sim7600D1Ev+0x24>)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	3304      	adds	r3, #4
 8005452:	4618      	mov	r0, r3
 8005454:	f000 fa44 	bl	80058e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

}
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4618      	mov	r0, r3
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	0800a448 	.word	0x0800a448

08005468 <_ZN7Sim7600D0Ev>:
Sim7600::~Sim7600() {
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
}
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f7ff ffe5 	bl	8005440 <_ZN7Sim7600D1Ev>
 8005476:	2124      	movs	r1, #36	; 0x24
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f9b5 	bl	80057e8 <_ZdlPvj>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4618      	mov	r0, r3
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <_ZN7Sim76004initEv>:



/*____________________________________________________________________________________________________________________________________________*/
void Sim7600::init() {
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT( huartx, (uint8_t*)rxByte, 1 ) ;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a18      	ldr	r0, [r3, #32]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	331c      	adds	r3, #28
 8005498:	2201      	movs	r2, #1
 800549a:	4619      	mov	r1, r3
 800549c:	f7fe fe6e 	bl	800417c <HAL_UART_Receive_IT>
}
 80054a0:	bf00      	nop
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <_ZN7Sim760010irqProcessEv>:



/*____________________________________________________________________________________________________________________________________________*/
void Sim7600::irqProcess() {
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
	if ( rxByte[0] == '\r' )
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	7f1b      	ldrb	r3, [r3, #28]
 80054b4:	2b0d      	cmp	r3, #13
 80054b6:	d103      	bne.n	80054c0 <_ZN7Sim760010irqProcessEv+0x18>
		rxDone_Flag = true ;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	775a      	strb	r2, [r3, #29]
 80054be:	e007      	b.n	80054d0 <_ZN7Sim760010irqProcessEv+0x28>
	else
		rxData += rxByte[0] ;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	1d1a      	adds	r2, r3, #4
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	7f1b      	ldrb	r3, [r3, #28]
 80054c8:	4619      	mov	r1, r3
 80054ca:	4610      	mov	r0, r2
 80054cc:	f000 fa32 	bl	8005934 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>

	HAL_UART_Receive_IT( huartx, (uint8_t*)rxByte, 1 ) ;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a18      	ldr	r0, [r3, #32]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	331c      	adds	r3, #28
 80054d8:	2201      	movs	r2, #1
 80054da:	4619      	mov	r1, r3
 80054dc:	f7fe fe4e 	bl	800417c <HAL_UART_Receive_IT>
}
 80054e0:	bf00      	nop
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <_ZN7Sim76008memresetEv>:



/*____________________________________________________________________________________________________________________________________________*/
void Sim7600::memreset() {
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
	rxDone_Flag = false ;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	775a      	strb	r2, [r3, #29]
	rxByte[0] = 0 ;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	771a      	strb	r2, [r3, #28]
	rxData.clear() ;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	3304      	adds	r3, #4
 8005500:	4618      	mov	r0, r3
 8005502:	f000 f9f3 	bl	80058ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
}
 8005506:	bf00      	nop
 8005508:	3708      	adds	r7, #8
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
	...

08005510 <_ZN7Sim76007sendCmdEPKcS1_j>:



/*____________________________________________________________________________________________________________________________________________*/
bool Sim7600::sendCmd( const char* _cmd, const char* _expectedAnswer, unsigned int _timeout ) {
 8005510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005512:	b089      	sub	sp, #36	; 0x24
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
 800551c:	603b      	str	r3, [r7, #0]
		// Nếu có thi la OK, answer == 1, thoát khỏi vòng while
		if ( strstr( rxData.c_str(), _expectedAnswer) != NULL )
			answer = 1;
	}

    return answer;
 800551e:	466b      	mov	r3, sp
 8005520:	461e      	mov	r6, r3
    bool answer=0;
 8005522:	2300      	movs	r3, #0
 8005524:	77fb      	strb	r3, [r7, #31]
    memreset() ;
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f7ff ffde 	bl	80054e8 <_ZN7Sim76008memresetEv>
    char cmd[ strlen( _cmd ) + 4 ] = {0} ;
 800552c:	68b8      	ldr	r0, [r7, #8]
 800552e:	f7fa fe9f 	bl	8000270 <strlen>
 8005532:	4603      	mov	r3, r0
 8005534:	3303      	adds	r3, #3
 8005536:	461c      	mov	r4, r3
 8005538:	61bc      	str	r4, [r7, #24]
 800553a:	4623      	mov	r3, r4
 800553c:	3301      	adds	r3, #1
 800553e:	4618      	mov	r0, r3
 8005540:	f04f 0100 	mov.w	r1, #0
 8005544:	f04f 0200 	mov.w	r2, #0
 8005548:	f04f 0300 	mov.w	r3, #0
 800554c:	00cb      	lsls	r3, r1, #3
 800554e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8005552:	00c2      	lsls	r2, r0, #3
 8005554:	4623      	mov	r3, r4
 8005556:	3301      	adds	r3, #1
 8005558:	4618      	mov	r0, r3
 800555a:	f04f 0100 	mov.w	r1, #0
 800555e:	f04f 0200 	mov.w	r2, #0
 8005562:	f04f 0300 	mov.w	r3, #0
 8005566:	00cb      	lsls	r3, r1, #3
 8005568:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800556c:	00c2      	lsls	r2, r0, #3
 800556e:	4623      	mov	r3, r4
 8005570:	3301      	adds	r3, #1
 8005572:	3307      	adds	r3, #7
 8005574:	08db      	lsrs	r3, r3, #3
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	ebad 0d03 	sub.w	sp, sp, r3
 800557c:	466b      	mov	r3, sp
 800557e:	3300      	adds	r3, #0
 8005580:	617b      	str	r3, [r7, #20]
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2200      	movs	r2, #0
 8005586:	701a      	strb	r2, [r3, #0]
 8005588:	1c5a      	adds	r2, r3, #1
 800558a:	1e63      	subs	r3, r4, #1
 800558c:	2b00      	cmp	r3, #0
 800558e:	db04      	blt.n	800559a <_ZN7Sim76007sendCmdEPKcS1_j+0x8a>
 8005590:	2100      	movs	r1, #0
 8005592:	7011      	strb	r1, [r2, #0]
 8005594:	3201      	adds	r2, #1
 8005596:	3b01      	subs	r3, #1
 8005598:	e7f8      	b.n	800558c <_ZN7Sim76007sendCmdEPKcS1_j+0x7c>
    sprintf( cmd, "%s\r\n", _cmd ) ;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	4920      	ldr	r1, [pc, #128]	; (8005620 <_ZN7Sim76007sendCmdEPKcS1_j+0x110>)
 80055a0:	4618      	mov	r0, r3
 80055a2:	f001 f9e1 	bl	8006968 <siprintf>
    HAL_UART_Transmit( huartx, (uint8_t*)cmd, strlen (cmd), _timeout) ;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6a1c      	ldr	r4, [r3, #32]
 80055aa:	697d      	ldr	r5, [r7, #20]
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7fa fe5e 	bl	8000270 <strlen>
 80055b4:	4603      	mov	r3, r0
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	4629      	mov	r1, r5
 80055bc:	4620      	mov	r0, r4
 80055be:	f7fe fd49 	bl	8004054 <HAL_UART_Transmit>
    uint32_t tickStart = HAL_GetTick() ;
 80055c2:	f7fc fb99 	bl	8001cf8 <HAL_GetTick>
 80055c6:	6138      	str	r0, [r7, #16]
    while( answer == 0 ) {
 80055c8:	7ffb      	ldrb	r3, [r7, #31]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d122      	bne.n	8005614 <_ZN7Sim76007sendCmdEPKcS1_j+0x104>
		if ( (unsigned long)( HAL_GetTick() - tickStart )  >=  _timeout )
 80055ce:	f7fc fb93 	bl	8001cf8 <HAL_GetTick>
 80055d2:	4602      	mov	r2, r0
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	429a      	cmp	r2, r3
 80055dc:	bf94      	ite	ls
 80055de:	2301      	movls	r3, #1
 80055e0:	2300      	movhi	r3, #0
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d114      	bne.n	8005612 <_ZN7Sim76007sendCmdEPKcS1_j+0x102>
		if ( strstr( rxData.c_str(), _expectedAnswer) != NULL )
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	3304      	adds	r3, #4
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 f9a7 	bl	8005940 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80055f2:	4603      	mov	r3, r0
 80055f4:	6879      	ldr	r1, [r7, #4]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f001 f9d6 	bl	80069a8 <strstr>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	bf14      	ite	ne
 8005602:	2301      	movne	r3, #1
 8005604:	2300      	moveq	r3, #0
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0dd      	beq.n	80055c8 <_ZN7Sim76007sendCmdEPKcS1_j+0xb8>
			answer = 1;
 800560c:	2301      	movs	r3, #1
 800560e:	77fb      	strb	r3, [r7, #31]
    while( answer == 0 ) {
 8005610:	e7da      	b.n	80055c8 <_ZN7Sim76007sendCmdEPKcS1_j+0xb8>
			break ;
 8005612:	bf00      	nop
    return answer;
 8005614:	7ffb      	ldrb	r3, [r7, #31]
 8005616:	46b5      	mov	sp, r6
}
 8005618:	4618      	mov	r0, r3
 800561a:	3724      	adds	r7, #36	; 0x24
 800561c:	46bd      	mov	sp, r7
 800561e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005620:	0800a3ec 	.word	0x0800a3ec

08005624 <_ZN8TerminalC1EP20__UART_HandleTypeDef>:

#include "hw.h"


/*____________________________________________________________________________________________________________________________________________*/
Terminal::Terminal( UART_HandleTypeDef * _huartx ) {
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
 800562e:	4a0b      	ldr	r2, [pc, #44]	; (800565c <_ZN8TerminalC1EP20__UART_HandleTypeDef+0x38>)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	3304      	adds	r3, #4
 8005638:	4618      	mov	r0, r3
 800563a:	f000 f94a 	bl	80058d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	771a      	strb	r2, [r3, #28]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	775a      	strb	r2, [r3, #29]
	huartx = &*_huartx ;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	621a      	str	r2, [r3, #32]

}
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4618      	mov	r0, r3
 8005654:	3708      	adds	r7, #8
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	0800a458 	.word	0x0800a458

08005660 <_ZN8TerminalD1Ev>:



/*____________________________________________________________________________________________________________________________________________*/
Terminal::~Terminal() {
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	4a06      	ldr	r2, [pc, #24]	; (8005684 <_ZN8TerminalD1Ev+0x24>)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	601a      	str	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	3304      	adds	r3, #4
 8005672:	4618      	mov	r0, r3
 8005674:	f000 f934 	bl	80058e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

}
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4618      	mov	r0, r3
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	0800a458 	.word	0x0800a458

08005688 <_ZN8TerminalD0Ev>:
Terminal::~Terminal() {
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
}
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7ff ffe5 	bl	8005660 <_ZN8TerminalD1Ev>
 8005696:	2124      	movs	r1, #36	; 0x24
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 f8a5 	bl	80057e8 <_ZdlPvj>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4618      	mov	r0, r3
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <_ZN8Terminal4initEv>:



/*____________________________________________________________________________________________________________________________________________*/
void Terminal::init() {
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT( huartx, (uint8_t*)rxByte, 1 ) ;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a18      	ldr	r0, [r3, #32]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	331c      	adds	r3, #28
 80056b8:	2201      	movs	r2, #1
 80056ba:	4619      	mov	r1, r3
 80056bc:	f7fe fd5e 	bl	800417c <HAL_UART_Receive_IT>
}
 80056c0:	bf00      	nop
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <_ZN8Terminal10irqProcessEv>:



/*____________________________________________________________________________________________________________________________________________*/
void Terminal::irqProcess() {
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
	if ( rxByte[0] == '\r' )
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	7f1b      	ldrb	r3, [r3, #28]
 80056d4:	2b0d      	cmp	r3, #13
 80056d6:	d103      	bne.n	80056e0 <_ZN8Terminal10irqProcessEv+0x18>
		rxDone_Flag = true ;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	775a      	strb	r2, [r3, #29]
 80056de:	e007      	b.n	80056f0 <_ZN8Terminal10irqProcessEv+0x28>
	else
		rxData += rxByte[0] ;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	1d1a      	adds	r2, r3, #4
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	7f1b      	ldrb	r3, [r3, #28]
 80056e8:	4619      	mov	r1, r3
 80056ea:	4610      	mov	r0, r2
 80056ec:	f000 f922 	bl	8005934 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>

	HAL_UART_Receive_IT( huartx, (uint8_t*)rxByte, 1 ) ;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a18      	ldr	r0, [r3, #32]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	331c      	adds	r3, #28
 80056f8:	2201      	movs	r2, #1
 80056fa:	4619      	mov	r1, r3
 80056fc:	f7fe fd3e 	bl	800417c <HAL_UART_Receive_IT>
}
 8005700:	bf00      	nop
 8005702:	3708      	adds	r7, #8
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <_ZN8Terminal5printEPKc>:



/*____________________________________________________________________________________________________________________________________________*/
void Terminal::print( const char* _info ) {
 8005708:	b590      	push	{r4, r7, lr}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit( huartx, (uint8_t*)_info, strlen( _info ), 2000 ) ;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a1c      	ldr	r4, [r3, #32]
 8005716:	6838      	ldr	r0, [r7, #0]
 8005718:	f7fa fdaa 	bl	8000270 <strlen>
 800571c:	4603      	mov	r3, r0
 800571e:	b29a      	uxth	r2, r3
 8005720:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005724:	6839      	ldr	r1, [r7, #0]
 8005726:	4620      	mov	r0, r4
 8005728:	f7fe fc94 	bl	8004054 <HAL_UART_Transmit>
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	bd90      	pop	{r4, r7, pc}

08005734 <_ZN8Terminal7printlnEPKc>:



/*____________________________________________________________________________________________________________________________________________*/
void Terminal::println( const char* _info ) {
 8005734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
	char info [ strlen( _info ) + 2 ] = {0} ;
	sprintf( info, "\n%s", _info ) ;

	HAL_UART_Transmit( huartx, (uint8_t*)info, strlen( info ), 2000 ) ;
 800573e:	466b      	mov	r3, sp
 8005740:	461e      	mov	r6, r3
	char info [ strlen( _info ) + 2 ] = {0} ;
 8005742:	6838      	ldr	r0, [r7, #0]
 8005744:	f7fa fd94 	bl	8000270 <strlen>
 8005748:	4603      	mov	r3, r0
 800574a:	3301      	adds	r3, #1
 800574c:	461c      	mov	r4, r3
 800574e:	60fc      	str	r4, [r7, #12]
 8005750:	4623      	mov	r3, r4
 8005752:	3301      	adds	r3, #1
 8005754:	4618      	mov	r0, r3
 8005756:	f04f 0100 	mov.w	r1, #0
 800575a:	f04f 0200 	mov.w	r2, #0
 800575e:	f04f 0300 	mov.w	r3, #0
 8005762:	00cb      	lsls	r3, r1, #3
 8005764:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8005768:	00c2      	lsls	r2, r0, #3
 800576a:	4623      	mov	r3, r4
 800576c:	3301      	adds	r3, #1
 800576e:	4618      	mov	r0, r3
 8005770:	f04f 0100 	mov.w	r1, #0
 8005774:	f04f 0200 	mov.w	r2, #0
 8005778:	f04f 0300 	mov.w	r3, #0
 800577c:	00cb      	lsls	r3, r1, #3
 800577e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8005782:	00c2      	lsls	r2, r0, #3
 8005784:	4623      	mov	r3, r4
 8005786:	3301      	adds	r3, #1
 8005788:	3307      	adds	r3, #7
 800578a:	08db      	lsrs	r3, r3, #3
 800578c:	00db      	lsls	r3, r3, #3
 800578e:	ebad 0d03 	sub.w	sp, sp, r3
 8005792:	466b      	mov	r3, sp
 8005794:	3300      	adds	r3, #0
 8005796:	60bb      	str	r3, [r7, #8]
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	2200      	movs	r2, #0
 800579c:	701a      	strb	r2, [r3, #0]
 800579e:	1c5a      	adds	r2, r3, #1
 80057a0:	1e63      	subs	r3, r4, #1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	db04      	blt.n	80057b0 <_ZN8Terminal7printlnEPKc+0x7c>
 80057a6:	2100      	movs	r1, #0
 80057a8:	7011      	strb	r1, [r2, #0]
 80057aa:	3201      	adds	r2, #1
 80057ac:	3b01      	subs	r3, #1
 80057ae:	e7f8      	b.n	80057a2 <_ZN8Terminal7printlnEPKc+0x6e>
	sprintf( info, "\n%s", _info ) ;
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	490b      	ldr	r1, [pc, #44]	; (80057e4 <_ZN8Terminal7printlnEPKc+0xb0>)
 80057b6:	4618      	mov	r0, r3
 80057b8:	f001 f8d6 	bl	8006968 <siprintf>
	HAL_UART_Transmit( huartx, (uint8_t*)info, strlen( info ), 2000 ) ;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a1c      	ldr	r4, [r3, #32]
 80057c0:	68bd      	ldr	r5, [r7, #8]
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7fa fd53 	bl	8000270 <strlen>
 80057ca:	4603      	mov	r3, r0
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80057d2:	4629      	mov	r1, r5
 80057d4:	4620      	mov	r0, r4
 80057d6:	f7fe fc3d 	bl	8004054 <HAL_UART_Transmit>
 80057da:	46b5      	mov	sp, r6
}
 80057dc:	bf00      	nop
 80057de:	3714      	adds	r7, #20
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057e4:	0800a3f4 	.word	0x0800a3f4

080057e8 <_ZdlPvj>:
 80057e8:	f000 b8ac 	b.w	8005944 <_ZdlPv>

080057ec <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 80057ec:	b10a      	cbz	r2, 80057f2 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 80057ee:	f000 b90d 	b.w	8005a0c <memcpy>
 80057f2:	4770      	bx	lr

080057f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80057f4:	b508      	push	{r3, lr}
 80057f6:	680b      	ldr	r3, [r1, #0]
 80057f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057fc:	d302      	bcc.n	8005804 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80057fe:	480d      	ldr	r0, [pc, #52]	; (8005834 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8005800:	f000 f8b6 	bl	8005970 <_ZSt20__throw_length_errorPKc>
 8005804:	4293      	cmp	r3, r2
 8005806:	d90b      	bls.n	8005820 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8005808:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800580c:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8005810:	d206      	bcs.n	8005820 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8005812:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005816:	bf2a      	itet	cs
 8005818:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800581c:	6008      	strcc	r0, [r1, #0]
 800581e:	600b      	strcs	r3, [r1, #0]
 8005820:	6808      	ldr	r0, [r1, #0]
 8005822:	3001      	adds	r0, #1
 8005824:	d501      	bpl.n	800582a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8005826:	f000 f8a0 	bl	800596a <_ZSt17__throw_bad_allocv>
 800582a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800582e:	f000 b88b 	b.w	8005948 <_Znwj>
 8005832:	bf00      	nop
 8005834:	0800a460 	.word	0x0800a460

08005838 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8005838:	f850 3b08 	ldr.w	r3, [r0], #8
 800583c:	4283      	cmp	r3, r0
 800583e:	d002      	beq.n	8005846 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8005840:	4618      	mov	r0, r3
 8005842:	f000 b87f 	b.w	8005944 <_ZdlPv>
 8005846:	4770      	bx	lr

08005848 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8005848:	2a01      	cmp	r2, #1
 800584a:	b510      	push	{r4, lr}
 800584c:	d102      	bne.n	8005854 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 800584e:	780a      	ldrb	r2, [r1, #0]
 8005850:	7002      	strb	r2, [r0, #0]
 8005852:	bd10      	pop	{r4, pc}
 8005854:	f7ff ffca 	bl	80057ec <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8005858:	e7fb      	b.n	8005852 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0800585a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800585a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800585e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005860:	461f      	mov	r7, r3
 8005862:	6843      	ldr	r3, [r0, #4]
 8005864:	eb01 0802 	add.w	r8, r1, r2
 8005868:	1ab2      	subs	r2, r6, r2
 800586a:	441a      	add	r2, r3
 800586c:	eba3 0908 	sub.w	r9, r3, r8
 8005870:	4603      	mov	r3, r0
 8005872:	9201      	str	r2, [sp, #4]
 8005874:	f853 2b08 	ldr.w	r2, [r3], #8
 8005878:	429a      	cmp	r2, r3
 800587a:	bf18      	it	ne
 800587c:	6882      	ldrne	r2, [r0, #8]
 800587e:	460d      	mov	r5, r1
 8005880:	bf08      	it	eq
 8005882:	220f      	moveq	r2, #15
 8005884:	a901      	add	r1, sp, #4
 8005886:	4604      	mov	r4, r0
 8005888:	f7ff ffb4 	bl	80057f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800588c:	4682      	mov	sl, r0
 800588e:	b11d      	cbz	r5, 8005898 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8005890:	6821      	ldr	r1, [r4, #0]
 8005892:	462a      	mov	r2, r5
 8005894:	f7ff ffd8 	bl	8005848 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005898:	b137      	cbz	r7, 80058a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800589a:	b12e      	cbz	r6, 80058a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800589c:	4632      	mov	r2, r6
 800589e:	4639      	mov	r1, r7
 80058a0:	eb0a 0005 	add.w	r0, sl, r5
 80058a4:	f7ff ffd0 	bl	8005848 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80058a8:	f1b9 0f00 	cmp.w	r9, #0
 80058ac:	d007      	beq.n	80058be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 80058ae:	6821      	ldr	r1, [r4, #0]
 80058b0:	4435      	add	r5, r6
 80058b2:	464a      	mov	r2, r9
 80058b4:	4441      	add	r1, r8
 80058b6:	eb0a 0005 	add.w	r0, sl, r5
 80058ba:	f7ff ffc5 	bl	8005848 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80058be:	4620      	mov	r0, r4
 80058c0:	f7ff ffba 	bl	8005838 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80058c4:	9b01      	ldr	r3, [sp, #4]
 80058c6:	f8c4 a000 	str.w	sl, [r4]
 80058ca:	60a3      	str	r3, [r4, #8]
 80058cc:	b002      	add	sp, #8
 80058ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080058d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 80058d2:	f100 0208 	add.w	r2, r0, #8
 80058d6:	6002      	str	r2, [r0, #0]
 80058d8:	2200      	movs	r2, #0
 80058da:	6042      	str	r2, [r0, #4]
 80058dc:	7202      	strb	r2, [r0, #8]
 80058de:	4770      	bx	lr

080058e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80058e0:	b510      	push	{r4, lr}
 80058e2:	4604      	mov	r4, r0
 80058e4:	f7ff ffa8 	bl	8005838 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80058e8:	4620      	mov	r0, r4
 80058ea:	bd10      	pop	{r4, pc}

080058ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 80058ec:	6802      	ldr	r2, [r0, #0]
 80058ee:	2300      	movs	r3, #0
 80058f0:	6043      	str	r3, [r0, #4]
 80058f2:	7013      	strb	r3, [r2, #0]
 80058f4:	4770      	bx	lr

080058f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 80058f6:	4603      	mov	r3, r0
 80058f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058fa:	f853 2b08 	ldr.w	r2, [r3], #8
 80058fe:	6846      	ldr	r6, [r0, #4]
 8005900:	429a      	cmp	r2, r3
 8005902:	bf18      	it	ne
 8005904:	6883      	ldrne	r3, [r0, #8]
 8005906:	f106 0501 	add.w	r5, r6, #1
 800590a:	bf08      	it	eq
 800590c:	230f      	moveq	r3, #15
 800590e:	429d      	cmp	r5, r3
 8005910:	4604      	mov	r4, r0
 8005912:	460f      	mov	r7, r1
 8005914:	d906      	bls.n	8005924 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2e>
 8005916:	2301      	movs	r3, #1
 8005918:	9300      	str	r3, [sp, #0]
 800591a:	2300      	movs	r3, #0
 800591c:	461a      	mov	r2, r3
 800591e:	4631      	mov	r1, r6
 8005920:	f7ff ff9b 	bl	800585a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8005924:	6823      	ldr	r3, [r4, #0]
 8005926:	559f      	strb	r7, [r3, r6]
 8005928:	6823      	ldr	r3, [r4, #0]
 800592a:	6065      	str	r5, [r4, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	555a      	strb	r2, [r3, r5]
 8005930:	b003      	add	sp, #12
 8005932:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005934 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc>:
 8005934:	b510      	push	{r4, lr}
 8005936:	4604      	mov	r4, r0
 8005938:	f7ff ffdd 	bl	80058f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
 800593c:	4620      	mov	r0, r4
 800593e:	bd10      	pop	{r4, pc}

08005940 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8005940:	6800      	ldr	r0, [r0, #0]
 8005942:	4770      	bx	lr

08005944 <_ZdlPv>:
 8005944:	f000 b85a 	b.w	80059fc <free>

08005948 <_Znwj>:
 8005948:	2801      	cmp	r0, #1
 800594a:	bf38      	it	cc
 800594c:	2001      	movcc	r0, #1
 800594e:	b510      	push	{r4, lr}
 8005950:	4604      	mov	r4, r0
 8005952:	4620      	mov	r0, r4
 8005954:	f000 f84a 	bl	80059ec <malloc>
 8005958:	b930      	cbnz	r0, 8005968 <_Znwj+0x20>
 800595a:	f000 f80d 	bl	8005978 <_ZSt15get_new_handlerv>
 800595e:	b908      	cbnz	r0, 8005964 <_Znwj+0x1c>
 8005960:	f000 f812 	bl	8005988 <abort>
 8005964:	4780      	blx	r0
 8005966:	e7f4      	b.n	8005952 <_Znwj+0xa>
 8005968:	bd10      	pop	{r4, pc}

0800596a <_ZSt17__throw_bad_allocv>:
 800596a:	b508      	push	{r3, lr}
 800596c:	f000 f80c 	bl	8005988 <abort>

08005970 <_ZSt20__throw_length_errorPKc>:
 8005970:	b508      	push	{r3, lr}
 8005972:	f000 f809 	bl	8005988 <abort>
	...

08005978 <_ZSt15get_new_handlerv>:
 8005978:	4b02      	ldr	r3, [pc, #8]	; (8005984 <_ZSt15get_new_handlerv+0xc>)
 800597a:	6818      	ldr	r0, [r3, #0]
 800597c:	f3bf 8f5b 	dmb	ish
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	2000027c 	.word	0x2000027c

08005988 <abort>:
 8005988:	b508      	push	{r3, lr}
 800598a:	2006      	movs	r0, #6
 800598c:	f000 ffd0 	bl	8006930 <raise>
 8005990:	2001      	movs	r0, #1
 8005992:	f7fb ff5b 	bl	800184c <_exit>
	...

08005998 <__errno>:
 8005998:	4b01      	ldr	r3, [pc, #4]	; (80059a0 <__errno+0x8>)
 800599a:	6818      	ldr	r0, [r3, #0]
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	20000030 	.word	0x20000030

080059a4 <__libc_init_array>:
 80059a4:	b570      	push	{r4, r5, r6, lr}
 80059a6:	4d0d      	ldr	r5, [pc, #52]	; (80059dc <__libc_init_array+0x38>)
 80059a8:	4c0d      	ldr	r4, [pc, #52]	; (80059e0 <__libc_init_array+0x3c>)
 80059aa:	1b64      	subs	r4, r4, r5
 80059ac:	10a4      	asrs	r4, r4, #2
 80059ae:	2600      	movs	r6, #0
 80059b0:	42a6      	cmp	r6, r4
 80059b2:	d109      	bne.n	80059c8 <__libc_init_array+0x24>
 80059b4:	4d0b      	ldr	r5, [pc, #44]	; (80059e4 <__libc_init_array+0x40>)
 80059b6:	4c0c      	ldr	r4, [pc, #48]	; (80059e8 <__libc_init_array+0x44>)
 80059b8:	f004 fc5c 	bl	800a274 <_init>
 80059bc:	1b64      	subs	r4, r4, r5
 80059be:	10a4      	asrs	r4, r4, #2
 80059c0:	2600      	movs	r6, #0
 80059c2:	42a6      	cmp	r6, r4
 80059c4:	d105      	bne.n	80059d2 <__libc_init_array+0x2e>
 80059c6:	bd70      	pop	{r4, r5, r6, pc}
 80059c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059cc:	4798      	blx	r3
 80059ce:	3601      	adds	r6, #1
 80059d0:	e7ee      	b.n	80059b0 <__libc_init_array+0xc>
 80059d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059d6:	4798      	blx	r3
 80059d8:	3601      	adds	r6, #1
 80059da:	e7f2      	b.n	80059c2 <__libc_init_array+0x1e>
 80059dc:	0800a934 	.word	0x0800a934
 80059e0:	0800a934 	.word	0x0800a934
 80059e4:	0800a934 	.word	0x0800a934
 80059e8:	0800a93c 	.word	0x0800a93c

080059ec <malloc>:
 80059ec:	4b02      	ldr	r3, [pc, #8]	; (80059f8 <malloc+0xc>)
 80059ee:	4601      	mov	r1, r0
 80059f0:	6818      	ldr	r0, [r3, #0]
 80059f2:	f000 b88b 	b.w	8005b0c <_malloc_r>
 80059f6:	bf00      	nop
 80059f8:	20000030 	.word	0x20000030

080059fc <free>:
 80059fc:	4b02      	ldr	r3, [pc, #8]	; (8005a08 <free+0xc>)
 80059fe:	4601      	mov	r1, r0
 8005a00:	6818      	ldr	r0, [r3, #0]
 8005a02:	f000 b833 	b.w	8005a6c <_free_r>
 8005a06:	bf00      	nop
 8005a08:	20000030 	.word	0x20000030

08005a0c <memcpy>:
 8005a0c:	440a      	add	r2, r1
 8005a0e:	4291      	cmp	r1, r2
 8005a10:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a14:	d100      	bne.n	8005a18 <memcpy+0xc>
 8005a16:	4770      	bx	lr
 8005a18:	b510      	push	{r4, lr}
 8005a1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a22:	4291      	cmp	r1, r2
 8005a24:	d1f9      	bne.n	8005a1a <memcpy+0xe>
 8005a26:	bd10      	pop	{r4, pc}

08005a28 <memmove>:
 8005a28:	4288      	cmp	r0, r1
 8005a2a:	b510      	push	{r4, lr}
 8005a2c:	eb01 0402 	add.w	r4, r1, r2
 8005a30:	d902      	bls.n	8005a38 <memmove+0x10>
 8005a32:	4284      	cmp	r4, r0
 8005a34:	4623      	mov	r3, r4
 8005a36:	d807      	bhi.n	8005a48 <memmove+0x20>
 8005a38:	1e43      	subs	r3, r0, #1
 8005a3a:	42a1      	cmp	r1, r4
 8005a3c:	d008      	beq.n	8005a50 <memmove+0x28>
 8005a3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a46:	e7f8      	b.n	8005a3a <memmove+0x12>
 8005a48:	4402      	add	r2, r0
 8005a4a:	4601      	mov	r1, r0
 8005a4c:	428a      	cmp	r2, r1
 8005a4e:	d100      	bne.n	8005a52 <memmove+0x2a>
 8005a50:	bd10      	pop	{r4, pc}
 8005a52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a5a:	e7f7      	b.n	8005a4c <memmove+0x24>

08005a5c <memset>:
 8005a5c:	4402      	add	r2, r0
 8005a5e:	4603      	mov	r3, r0
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d100      	bne.n	8005a66 <memset+0xa>
 8005a64:	4770      	bx	lr
 8005a66:	f803 1b01 	strb.w	r1, [r3], #1
 8005a6a:	e7f9      	b.n	8005a60 <memset+0x4>

08005a6c <_free_r>:
 8005a6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a6e:	2900      	cmp	r1, #0
 8005a70:	d048      	beq.n	8005b04 <_free_r+0x98>
 8005a72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a76:	9001      	str	r0, [sp, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f1a1 0404 	sub.w	r4, r1, #4
 8005a7e:	bfb8      	it	lt
 8005a80:	18e4      	addlt	r4, r4, r3
 8005a82:	f003 f85b 	bl	8008b3c <__malloc_lock>
 8005a86:	4a20      	ldr	r2, [pc, #128]	; (8005b08 <_free_r+0x9c>)
 8005a88:	9801      	ldr	r0, [sp, #4]
 8005a8a:	6813      	ldr	r3, [r2, #0]
 8005a8c:	4615      	mov	r5, r2
 8005a8e:	b933      	cbnz	r3, 8005a9e <_free_r+0x32>
 8005a90:	6063      	str	r3, [r4, #4]
 8005a92:	6014      	str	r4, [r2, #0]
 8005a94:	b003      	add	sp, #12
 8005a96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a9a:	f003 b855 	b.w	8008b48 <__malloc_unlock>
 8005a9e:	42a3      	cmp	r3, r4
 8005aa0:	d90b      	bls.n	8005aba <_free_r+0x4e>
 8005aa2:	6821      	ldr	r1, [r4, #0]
 8005aa4:	1862      	adds	r2, r4, r1
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	bf04      	itt	eq
 8005aaa:	681a      	ldreq	r2, [r3, #0]
 8005aac:	685b      	ldreq	r3, [r3, #4]
 8005aae:	6063      	str	r3, [r4, #4]
 8005ab0:	bf04      	itt	eq
 8005ab2:	1852      	addeq	r2, r2, r1
 8005ab4:	6022      	streq	r2, [r4, #0]
 8005ab6:	602c      	str	r4, [r5, #0]
 8005ab8:	e7ec      	b.n	8005a94 <_free_r+0x28>
 8005aba:	461a      	mov	r2, r3
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	b10b      	cbz	r3, 8005ac4 <_free_r+0x58>
 8005ac0:	42a3      	cmp	r3, r4
 8005ac2:	d9fa      	bls.n	8005aba <_free_r+0x4e>
 8005ac4:	6811      	ldr	r1, [r2, #0]
 8005ac6:	1855      	adds	r5, r2, r1
 8005ac8:	42a5      	cmp	r5, r4
 8005aca:	d10b      	bne.n	8005ae4 <_free_r+0x78>
 8005acc:	6824      	ldr	r4, [r4, #0]
 8005ace:	4421      	add	r1, r4
 8005ad0:	1854      	adds	r4, r2, r1
 8005ad2:	42a3      	cmp	r3, r4
 8005ad4:	6011      	str	r1, [r2, #0]
 8005ad6:	d1dd      	bne.n	8005a94 <_free_r+0x28>
 8005ad8:	681c      	ldr	r4, [r3, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	6053      	str	r3, [r2, #4]
 8005ade:	4421      	add	r1, r4
 8005ae0:	6011      	str	r1, [r2, #0]
 8005ae2:	e7d7      	b.n	8005a94 <_free_r+0x28>
 8005ae4:	d902      	bls.n	8005aec <_free_r+0x80>
 8005ae6:	230c      	movs	r3, #12
 8005ae8:	6003      	str	r3, [r0, #0]
 8005aea:	e7d3      	b.n	8005a94 <_free_r+0x28>
 8005aec:	6825      	ldr	r5, [r4, #0]
 8005aee:	1961      	adds	r1, r4, r5
 8005af0:	428b      	cmp	r3, r1
 8005af2:	bf04      	itt	eq
 8005af4:	6819      	ldreq	r1, [r3, #0]
 8005af6:	685b      	ldreq	r3, [r3, #4]
 8005af8:	6063      	str	r3, [r4, #4]
 8005afa:	bf04      	itt	eq
 8005afc:	1949      	addeq	r1, r1, r5
 8005afe:	6021      	streq	r1, [r4, #0]
 8005b00:	6054      	str	r4, [r2, #4]
 8005b02:	e7c7      	b.n	8005a94 <_free_r+0x28>
 8005b04:	b003      	add	sp, #12
 8005b06:	bd30      	pop	{r4, r5, pc}
 8005b08:	20000280 	.word	0x20000280

08005b0c <_malloc_r>:
 8005b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b0e:	1ccd      	adds	r5, r1, #3
 8005b10:	f025 0503 	bic.w	r5, r5, #3
 8005b14:	3508      	adds	r5, #8
 8005b16:	2d0c      	cmp	r5, #12
 8005b18:	bf38      	it	cc
 8005b1a:	250c      	movcc	r5, #12
 8005b1c:	2d00      	cmp	r5, #0
 8005b1e:	4606      	mov	r6, r0
 8005b20:	db01      	blt.n	8005b26 <_malloc_r+0x1a>
 8005b22:	42a9      	cmp	r1, r5
 8005b24:	d903      	bls.n	8005b2e <_malloc_r+0x22>
 8005b26:	230c      	movs	r3, #12
 8005b28:	6033      	str	r3, [r6, #0]
 8005b2a:	2000      	movs	r0, #0
 8005b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b2e:	f003 f805 	bl	8008b3c <__malloc_lock>
 8005b32:	4921      	ldr	r1, [pc, #132]	; (8005bb8 <_malloc_r+0xac>)
 8005b34:	680a      	ldr	r2, [r1, #0]
 8005b36:	4614      	mov	r4, r2
 8005b38:	b99c      	cbnz	r4, 8005b62 <_malloc_r+0x56>
 8005b3a:	4f20      	ldr	r7, [pc, #128]	; (8005bbc <_malloc_r+0xb0>)
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	b923      	cbnz	r3, 8005b4a <_malloc_r+0x3e>
 8005b40:	4621      	mov	r1, r4
 8005b42:	4630      	mov	r0, r6
 8005b44:	f000 feb6 	bl	80068b4 <_sbrk_r>
 8005b48:	6038      	str	r0, [r7, #0]
 8005b4a:	4629      	mov	r1, r5
 8005b4c:	4630      	mov	r0, r6
 8005b4e:	f000 feb1 	bl	80068b4 <_sbrk_r>
 8005b52:	1c43      	adds	r3, r0, #1
 8005b54:	d123      	bne.n	8005b9e <_malloc_r+0x92>
 8005b56:	230c      	movs	r3, #12
 8005b58:	6033      	str	r3, [r6, #0]
 8005b5a:	4630      	mov	r0, r6
 8005b5c:	f002 fff4 	bl	8008b48 <__malloc_unlock>
 8005b60:	e7e3      	b.n	8005b2a <_malloc_r+0x1e>
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	1b5b      	subs	r3, r3, r5
 8005b66:	d417      	bmi.n	8005b98 <_malloc_r+0x8c>
 8005b68:	2b0b      	cmp	r3, #11
 8005b6a:	d903      	bls.n	8005b74 <_malloc_r+0x68>
 8005b6c:	6023      	str	r3, [r4, #0]
 8005b6e:	441c      	add	r4, r3
 8005b70:	6025      	str	r5, [r4, #0]
 8005b72:	e004      	b.n	8005b7e <_malloc_r+0x72>
 8005b74:	6863      	ldr	r3, [r4, #4]
 8005b76:	42a2      	cmp	r2, r4
 8005b78:	bf0c      	ite	eq
 8005b7a:	600b      	streq	r3, [r1, #0]
 8005b7c:	6053      	strne	r3, [r2, #4]
 8005b7e:	4630      	mov	r0, r6
 8005b80:	f002 ffe2 	bl	8008b48 <__malloc_unlock>
 8005b84:	f104 000b 	add.w	r0, r4, #11
 8005b88:	1d23      	adds	r3, r4, #4
 8005b8a:	f020 0007 	bic.w	r0, r0, #7
 8005b8e:	1ac2      	subs	r2, r0, r3
 8005b90:	d0cc      	beq.n	8005b2c <_malloc_r+0x20>
 8005b92:	1a1b      	subs	r3, r3, r0
 8005b94:	50a3      	str	r3, [r4, r2]
 8005b96:	e7c9      	b.n	8005b2c <_malloc_r+0x20>
 8005b98:	4622      	mov	r2, r4
 8005b9a:	6864      	ldr	r4, [r4, #4]
 8005b9c:	e7cc      	b.n	8005b38 <_malloc_r+0x2c>
 8005b9e:	1cc4      	adds	r4, r0, #3
 8005ba0:	f024 0403 	bic.w	r4, r4, #3
 8005ba4:	42a0      	cmp	r0, r4
 8005ba6:	d0e3      	beq.n	8005b70 <_malloc_r+0x64>
 8005ba8:	1a21      	subs	r1, r4, r0
 8005baa:	4630      	mov	r0, r6
 8005bac:	f000 fe82 	bl	80068b4 <_sbrk_r>
 8005bb0:	3001      	adds	r0, #1
 8005bb2:	d1dd      	bne.n	8005b70 <_malloc_r+0x64>
 8005bb4:	e7cf      	b.n	8005b56 <_malloc_r+0x4a>
 8005bb6:	bf00      	nop
 8005bb8:	20000280 	.word	0x20000280
 8005bbc:	20000284 	.word	0x20000284

08005bc0 <__cvt>:
 8005bc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bc4:	ec55 4b10 	vmov	r4, r5, d0
 8005bc8:	2d00      	cmp	r5, #0
 8005bca:	460e      	mov	r6, r1
 8005bcc:	4619      	mov	r1, r3
 8005bce:	462b      	mov	r3, r5
 8005bd0:	bfbb      	ittet	lt
 8005bd2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005bd6:	461d      	movlt	r5, r3
 8005bd8:	2300      	movge	r3, #0
 8005bda:	232d      	movlt	r3, #45	; 0x2d
 8005bdc:	700b      	strb	r3, [r1, #0]
 8005bde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005be0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005be4:	4691      	mov	r9, r2
 8005be6:	f023 0820 	bic.w	r8, r3, #32
 8005bea:	bfbc      	itt	lt
 8005bec:	4622      	movlt	r2, r4
 8005bee:	4614      	movlt	r4, r2
 8005bf0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005bf4:	d005      	beq.n	8005c02 <__cvt+0x42>
 8005bf6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005bfa:	d100      	bne.n	8005bfe <__cvt+0x3e>
 8005bfc:	3601      	adds	r6, #1
 8005bfe:	2102      	movs	r1, #2
 8005c00:	e000      	b.n	8005c04 <__cvt+0x44>
 8005c02:	2103      	movs	r1, #3
 8005c04:	ab03      	add	r3, sp, #12
 8005c06:	9301      	str	r3, [sp, #4]
 8005c08:	ab02      	add	r3, sp, #8
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	ec45 4b10 	vmov	d0, r4, r5
 8005c10:	4653      	mov	r3, sl
 8005c12:	4632      	mov	r2, r6
 8005c14:	f001 fe20 	bl	8007858 <_dtoa_r>
 8005c18:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005c1c:	4607      	mov	r7, r0
 8005c1e:	d102      	bne.n	8005c26 <__cvt+0x66>
 8005c20:	f019 0f01 	tst.w	r9, #1
 8005c24:	d022      	beq.n	8005c6c <__cvt+0xac>
 8005c26:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c2a:	eb07 0906 	add.w	r9, r7, r6
 8005c2e:	d110      	bne.n	8005c52 <__cvt+0x92>
 8005c30:	783b      	ldrb	r3, [r7, #0]
 8005c32:	2b30      	cmp	r3, #48	; 0x30
 8005c34:	d10a      	bne.n	8005c4c <__cvt+0x8c>
 8005c36:	2200      	movs	r2, #0
 8005c38:	2300      	movs	r3, #0
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	4629      	mov	r1, r5
 8005c3e:	f7fa ff43 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c42:	b918      	cbnz	r0, 8005c4c <__cvt+0x8c>
 8005c44:	f1c6 0601 	rsb	r6, r6, #1
 8005c48:	f8ca 6000 	str.w	r6, [sl]
 8005c4c:	f8da 3000 	ldr.w	r3, [sl]
 8005c50:	4499      	add	r9, r3
 8005c52:	2200      	movs	r2, #0
 8005c54:	2300      	movs	r3, #0
 8005c56:	4620      	mov	r0, r4
 8005c58:	4629      	mov	r1, r5
 8005c5a:	f7fa ff35 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c5e:	b108      	cbz	r0, 8005c64 <__cvt+0xa4>
 8005c60:	f8cd 900c 	str.w	r9, [sp, #12]
 8005c64:	2230      	movs	r2, #48	; 0x30
 8005c66:	9b03      	ldr	r3, [sp, #12]
 8005c68:	454b      	cmp	r3, r9
 8005c6a:	d307      	bcc.n	8005c7c <__cvt+0xbc>
 8005c6c:	9b03      	ldr	r3, [sp, #12]
 8005c6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c70:	1bdb      	subs	r3, r3, r7
 8005c72:	4638      	mov	r0, r7
 8005c74:	6013      	str	r3, [r2, #0]
 8005c76:	b004      	add	sp, #16
 8005c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c7c:	1c59      	adds	r1, r3, #1
 8005c7e:	9103      	str	r1, [sp, #12]
 8005c80:	701a      	strb	r2, [r3, #0]
 8005c82:	e7f0      	b.n	8005c66 <__cvt+0xa6>

08005c84 <__exponent>:
 8005c84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c86:	4603      	mov	r3, r0
 8005c88:	2900      	cmp	r1, #0
 8005c8a:	bfb8      	it	lt
 8005c8c:	4249      	neglt	r1, r1
 8005c8e:	f803 2b02 	strb.w	r2, [r3], #2
 8005c92:	bfb4      	ite	lt
 8005c94:	222d      	movlt	r2, #45	; 0x2d
 8005c96:	222b      	movge	r2, #43	; 0x2b
 8005c98:	2909      	cmp	r1, #9
 8005c9a:	7042      	strb	r2, [r0, #1]
 8005c9c:	dd2a      	ble.n	8005cf4 <__exponent+0x70>
 8005c9e:	f10d 0407 	add.w	r4, sp, #7
 8005ca2:	46a4      	mov	ip, r4
 8005ca4:	270a      	movs	r7, #10
 8005ca6:	46a6      	mov	lr, r4
 8005ca8:	460a      	mov	r2, r1
 8005caa:	fb91 f6f7 	sdiv	r6, r1, r7
 8005cae:	fb07 1516 	mls	r5, r7, r6, r1
 8005cb2:	3530      	adds	r5, #48	; 0x30
 8005cb4:	2a63      	cmp	r2, #99	; 0x63
 8005cb6:	f104 34ff 	add.w	r4, r4, #4294967295
 8005cba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005cbe:	4631      	mov	r1, r6
 8005cc0:	dcf1      	bgt.n	8005ca6 <__exponent+0x22>
 8005cc2:	3130      	adds	r1, #48	; 0x30
 8005cc4:	f1ae 0502 	sub.w	r5, lr, #2
 8005cc8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005ccc:	1c44      	adds	r4, r0, #1
 8005cce:	4629      	mov	r1, r5
 8005cd0:	4561      	cmp	r1, ip
 8005cd2:	d30a      	bcc.n	8005cea <__exponent+0x66>
 8005cd4:	f10d 0209 	add.w	r2, sp, #9
 8005cd8:	eba2 020e 	sub.w	r2, r2, lr
 8005cdc:	4565      	cmp	r5, ip
 8005cde:	bf88      	it	hi
 8005ce0:	2200      	movhi	r2, #0
 8005ce2:	4413      	add	r3, r2
 8005ce4:	1a18      	subs	r0, r3, r0
 8005ce6:	b003      	add	sp, #12
 8005ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005cee:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005cf2:	e7ed      	b.n	8005cd0 <__exponent+0x4c>
 8005cf4:	2330      	movs	r3, #48	; 0x30
 8005cf6:	3130      	adds	r1, #48	; 0x30
 8005cf8:	7083      	strb	r3, [r0, #2]
 8005cfa:	70c1      	strb	r1, [r0, #3]
 8005cfc:	1d03      	adds	r3, r0, #4
 8005cfe:	e7f1      	b.n	8005ce4 <__exponent+0x60>

08005d00 <_printf_float>:
 8005d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d04:	ed2d 8b02 	vpush	{d8}
 8005d08:	b08d      	sub	sp, #52	; 0x34
 8005d0a:	460c      	mov	r4, r1
 8005d0c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005d10:	4616      	mov	r6, r2
 8005d12:	461f      	mov	r7, r3
 8005d14:	4605      	mov	r5, r0
 8005d16:	f002 fefb 	bl	8008b10 <_localeconv_r>
 8005d1a:	f8d0 a000 	ldr.w	sl, [r0]
 8005d1e:	4650      	mov	r0, sl
 8005d20:	f7fa faa6 	bl	8000270 <strlen>
 8005d24:	2300      	movs	r3, #0
 8005d26:	930a      	str	r3, [sp, #40]	; 0x28
 8005d28:	6823      	ldr	r3, [r4, #0]
 8005d2a:	9305      	str	r3, [sp, #20]
 8005d2c:	f8d8 3000 	ldr.w	r3, [r8]
 8005d30:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005d34:	3307      	adds	r3, #7
 8005d36:	f023 0307 	bic.w	r3, r3, #7
 8005d3a:	f103 0208 	add.w	r2, r3, #8
 8005d3e:	f8c8 2000 	str.w	r2, [r8]
 8005d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d46:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005d4a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005d4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005d52:	9307      	str	r3, [sp, #28]
 8005d54:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d58:	ee08 0a10 	vmov	s16, r0
 8005d5c:	4b9f      	ldr	r3, [pc, #636]	; (8005fdc <_printf_float+0x2dc>)
 8005d5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d62:	f04f 32ff 	mov.w	r2, #4294967295
 8005d66:	f7fa fee1 	bl	8000b2c <__aeabi_dcmpun>
 8005d6a:	bb88      	cbnz	r0, 8005dd0 <_printf_float+0xd0>
 8005d6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d70:	4b9a      	ldr	r3, [pc, #616]	; (8005fdc <_printf_float+0x2dc>)
 8005d72:	f04f 32ff 	mov.w	r2, #4294967295
 8005d76:	f7fa febb 	bl	8000af0 <__aeabi_dcmple>
 8005d7a:	bb48      	cbnz	r0, 8005dd0 <_printf_float+0xd0>
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	2300      	movs	r3, #0
 8005d80:	4640      	mov	r0, r8
 8005d82:	4649      	mov	r1, r9
 8005d84:	f7fa feaa 	bl	8000adc <__aeabi_dcmplt>
 8005d88:	b110      	cbz	r0, 8005d90 <_printf_float+0x90>
 8005d8a:	232d      	movs	r3, #45	; 0x2d
 8005d8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d90:	4b93      	ldr	r3, [pc, #588]	; (8005fe0 <_printf_float+0x2e0>)
 8005d92:	4894      	ldr	r0, [pc, #592]	; (8005fe4 <_printf_float+0x2e4>)
 8005d94:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005d98:	bf94      	ite	ls
 8005d9a:	4698      	movls	r8, r3
 8005d9c:	4680      	movhi	r8, r0
 8005d9e:	2303      	movs	r3, #3
 8005da0:	6123      	str	r3, [r4, #16]
 8005da2:	9b05      	ldr	r3, [sp, #20]
 8005da4:	f023 0204 	bic.w	r2, r3, #4
 8005da8:	6022      	str	r2, [r4, #0]
 8005daa:	f04f 0900 	mov.w	r9, #0
 8005dae:	9700      	str	r7, [sp, #0]
 8005db0:	4633      	mov	r3, r6
 8005db2:	aa0b      	add	r2, sp, #44	; 0x2c
 8005db4:	4621      	mov	r1, r4
 8005db6:	4628      	mov	r0, r5
 8005db8:	f000 f9d8 	bl	800616c <_printf_common>
 8005dbc:	3001      	adds	r0, #1
 8005dbe:	f040 8090 	bne.w	8005ee2 <_printf_float+0x1e2>
 8005dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc6:	b00d      	add	sp, #52	; 0x34
 8005dc8:	ecbd 8b02 	vpop	{d8}
 8005dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dd0:	4642      	mov	r2, r8
 8005dd2:	464b      	mov	r3, r9
 8005dd4:	4640      	mov	r0, r8
 8005dd6:	4649      	mov	r1, r9
 8005dd8:	f7fa fea8 	bl	8000b2c <__aeabi_dcmpun>
 8005ddc:	b140      	cbz	r0, 8005df0 <_printf_float+0xf0>
 8005dde:	464b      	mov	r3, r9
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	bfbc      	itt	lt
 8005de4:	232d      	movlt	r3, #45	; 0x2d
 8005de6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005dea:	487f      	ldr	r0, [pc, #508]	; (8005fe8 <_printf_float+0x2e8>)
 8005dec:	4b7f      	ldr	r3, [pc, #508]	; (8005fec <_printf_float+0x2ec>)
 8005dee:	e7d1      	b.n	8005d94 <_printf_float+0x94>
 8005df0:	6863      	ldr	r3, [r4, #4]
 8005df2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005df6:	9206      	str	r2, [sp, #24]
 8005df8:	1c5a      	adds	r2, r3, #1
 8005dfa:	d13f      	bne.n	8005e7c <_printf_float+0x17c>
 8005dfc:	2306      	movs	r3, #6
 8005dfe:	6063      	str	r3, [r4, #4]
 8005e00:	9b05      	ldr	r3, [sp, #20]
 8005e02:	6861      	ldr	r1, [r4, #4]
 8005e04:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005e08:	2300      	movs	r3, #0
 8005e0a:	9303      	str	r3, [sp, #12]
 8005e0c:	ab0a      	add	r3, sp, #40	; 0x28
 8005e0e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005e12:	ab09      	add	r3, sp, #36	; 0x24
 8005e14:	ec49 8b10 	vmov	d0, r8, r9
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	6022      	str	r2, [r4, #0]
 8005e1c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005e20:	4628      	mov	r0, r5
 8005e22:	f7ff fecd 	bl	8005bc0 <__cvt>
 8005e26:	9b06      	ldr	r3, [sp, #24]
 8005e28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e2a:	2b47      	cmp	r3, #71	; 0x47
 8005e2c:	4680      	mov	r8, r0
 8005e2e:	d108      	bne.n	8005e42 <_printf_float+0x142>
 8005e30:	1cc8      	adds	r0, r1, #3
 8005e32:	db02      	blt.n	8005e3a <_printf_float+0x13a>
 8005e34:	6863      	ldr	r3, [r4, #4]
 8005e36:	4299      	cmp	r1, r3
 8005e38:	dd41      	ble.n	8005ebe <_printf_float+0x1be>
 8005e3a:	f1ab 0b02 	sub.w	fp, fp, #2
 8005e3e:	fa5f fb8b 	uxtb.w	fp, fp
 8005e42:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005e46:	d820      	bhi.n	8005e8a <_printf_float+0x18a>
 8005e48:	3901      	subs	r1, #1
 8005e4a:	465a      	mov	r2, fp
 8005e4c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005e50:	9109      	str	r1, [sp, #36]	; 0x24
 8005e52:	f7ff ff17 	bl	8005c84 <__exponent>
 8005e56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e58:	1813      	adds	r3, r2, r0
 8005e5a:	2a01      	cmp	r2, #1
 8005e5c:	4681      	mov	r9, r0
 8005e5e:	6123      	str	r3, [r4, #16]
 8005e60:	dc02      	bgt.n	8005e68 <_printf_float+0x168>
 8005e62:	6822      	ldr	r2, [r4, #0]
 8005e64:	07d2      	lsls	r2, r2, #31
 8005e66:	d501      	bpl.n	8005e6c <_printf_float+0x16c>
 8005e68:	3301      	adds	r3, #1
 8005e6a:	6123      	str	r3, [r4, #16]
 8005e6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d09c      	beq.n	8005dae <_printf_float+0xae>
 8005e74:	232d      	movs	r3, #45	; 0x2d
 8005e76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e7a:	e798      	b.n	8005dae <_printf_float+0xae>
 8005e7c:	9a06      	ldr	r2, [sp, #24]
 8005e7e:	2a47      	cmp	r2, #71	; 0x47
 8005e80:	d1be      	bne.n	8005e00 <_printf_float+0x100>
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1bc      	bne.n	8005e00 <_printf_float+0x100>
 8005e86:	2301      	movs	r3, #1
 8005e88:	e7b9      	b.n	8005dfe <_printf_float+0xfe>
 8005e8a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005e8e:	d118      	bne.n	8005ec2 <_printf_float+0x1c2>
 8005e90:	2900      	cmp	r1, #0
 8005e92:	6863      	ldr	r3, [r4, #4]
 8005e94:	dd0b      	ble.n	8005eae <_printf_float+0x1ae>
 8005e96:	6121      	str	r1, [r4, #16]
 8005e98:	b913      	cbnz	r3, 8005ea0 <_printf_float+0x1a0>
 8005e9a:	6822      	ldr	r2, [r4, #0]
 8005e9c:	07d0      	lsls	r0, r2, #31
 8005e9e:	d502      	bpl.n	8005ea6 <_printf_float+0x1a6>
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	440b      	add	r3, r1
 8005ea4:	6123      	str	r3, [r4, #16]
 8005ea6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ea8:	f04f 0900 	mov.w	r9, #0
 8005eac:	e7de      	b.n	8005e6c <_printf_float+0x16c>
 8005eae:	b913      	cbnz	r3, 8005eb6 <_printf_float+0x1b6>
 8005eb0:	6822      	ldr	r2, [r4, #0]
 8005eb2:	07d2      	lsls	r2, r2, #31
 8005eb4:	d501      	bpl.n	8005eba <_printf_float+0x1ba>
 8005eb6:	3302      	adds	r3, #2
 8005eb8:	e7f4      	b.n	8005ea4 <_printf_float+0x1a4>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e7f2      	b.n	8005ea4 <_printf_float+0x1a4>
 8005ebe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005ec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ec4:	4299      	cmp	r1, r3
 8005ec6:	db05      	blt.n	8005ed4 <_printf_float+0x1d4>
 8005ec8:	6823      	ldr	r3, [r4, #0]
 8005eca:	6121      	str	r1, [r4, #16]
 8005ecc:	07d8      	lsls	r0, r3, #31
 8005ece:	d5ea      	bpl.n	8005ea6 <_printf_float+0x1a6>
 8005ed0:	1c4b      	adds	r3, r1, #1
 8005ed2:	e7e7      	b.n	8005ea4 <_printf_float+0x1a4>
 8005ed4:	2900      	cmp	r1, #0
 8005ed6:	bfd4      	ite	le
 8005ed8:	f1c1 0202 	rsble	r2, r1, #2
 8005edc:	2201      	movgt	r2, #1
 8005ede:	4413      	add	r3, r2
 8005ee0:	e7e0      	b.n	8005ea4 <_printf_float+0x1a4>
 8005ee2:	6823      	ldr	r3, [r4, #0]
 8005ee4:	055a      	lsls	r2, r3, #21
 8005ee6:	d407      	bmi.n	8005ef8 <_printf_float+0x1f8>
 8005ee8:	6923      	ldr	r3, [r4, #16]
 8005eea:	4642      	mov	r2, r8
 8005eec:	4631      	mov	r1, r6
 8005eee:	4628      	mov	r0, r5
 8005ef0:	47b8      	blx	r7
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	d12c      	bne.n	8005f50 <_printf_float+0x250>
 8005ef6:	e764      	b.n	8005dc2 <_printf_float+0xc2>
 8005ef8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005efc:	f240 80e0 	bls.w	80060c0 <_printf_float+0x3c0>
 8005f00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f04:	2200      	movs	r2, #0
 8005f06:	2300      	movs	r3, #0
 8005f08:	f7fa fdde 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	d034      	beq.n	8005f7a <_printf_float+0x27a>
 8005f10:	4a37      	ldr	r2, [pc, #220]	; (8005ff0 <_printf_float+0x2f0>)
 8005f12:	2301      	movs	r3, #1
 8005f14:	4631      	mov	r1, r6
 8005f16:	4628      	mov	r0, r5
 8005f18:	47b8      	blx	r7
 8005f1a:	3001      	adds	r0, #1
 8005f1c:	f43f af51 	beq.w	8005dc2 <_printf_float+0xc2>
 8005f20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f24:	429a      	cmp	r2, r3
 8005f26:	db02      	blt.n	8005f2e <_printf_float+0x22e>
 8005f28:	6823      	ldr	r3, [r4, #0]
 8005f2a:	07d8      	lsls	r0, r3, #31
 8005f2c:	d510      	bpl.n	8005f50 <_printf_float+0x250>
 8005f2e:	ee18 3a10 	vmov	r3, s16
 8005f32:	4652      	mov	r2, sl
 8005f34:	4631      	mov	r1, r6
 8005f36:	4628      	mov	r0, r5
 8005f38:	47b8      	blx	r7
 8005f3a:	3001      	adds	r0, #1
 8005f3c:	f43f af41 	beq.w	8005dc2 <_printf_float+0xc2>
 8005f40:	f04f 0800 	mov.w	r8, #0
 8005f44:	f104 091a 	add.w	r9, r4, #26
 8005f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	4543      	cmp	r3, r8
 8005f4e:	dc09      	bgt.n	8005f64 <_printf_float+0x264>
 8005f50:	6823      	ldr	r3, [r4, #0]
 8005f52:	079b      	lsls	r3, r3, #30
 8005f54:	f100 8105 	bmi.w	8006162 <_printf_float+0x462>
 8005f58:	68e0      	ldr	r0, [r4, #12]
 8005f5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f5c:	4298      	cmp	r0, r3
 8005f5e:	bfb8      	it	lt
 8005f60:	4618      	movlt	r0, r3
 8005f62:	e730      	b.n	8005dc6 <_printf_float+0xc6>
 8005f64:	2301      	movs	r3, #1
 8005f66:	464a      	mov	r2, r9
 8005f68:	4631      	mov	r1, r6
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	47b8      	blx	r7
 8005f6e:	3001      	adds	r0, #1
 8005f70:	f43f af27 	beq.w	8005dc2 <_printf_float+0xc2>
 8005f74:	f108 0801 	add.w	r8, r8, #1
 8005f78:	e7e6      	b.n	8005f48 <_printf_float+0x248>
 8005f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	dc39      	bgt.n	8005ff4 <_printf_float+0x2f4>
 8005f80:	4a1b      	ldr	r2, [pc, #108]	; (8005ff0 <_printf_float+0x2f0>)
 8005f82:	2301      	movs	r3, #1
 8005f84:	4631      	mov	r1, r6
 8005f86:	4628      	mov	r0, r5
 8005f88:	47b8      	blx	r7
 8005f8a:	3001      	adds	r0, #1
 8005f8c:	f43f af19 	beq.w	8005dc2 <_printf_float+0xc2>
 8005f90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f94:	4313      	orrs	r3, r2
 8005f96:	d102      	bne.n	8005f9e <_printf_float+0x29e>
 8005f98:	6823      	ldr	r3, [r4, #0]
 8005f9a:	07d9      	lsls	r1, r3, #31
 8005f9c:	d5d8      	bpl.n	8005f50 <_printf_float+0x250>
 8005f9e:	ee18 3a10 	vmov	r3, s16
 8005fa2:	4652      	mov	r2, sl
 8005fa4:	4631      	mov	r1, r6
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	47b8      	blx	r7
 8005faa:	3001      	adds	r0, #1
 8005fac:	f43f af09 	beq.w	8005dc2 <_printf_float+0xc2>
 8005fb0:	f04f 0900 	mov.w	r9, #0
 8005fb4:	f104 0a1a 	add.w	sl, r4, #26
 8005fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fba:	425b      	negs	r3, r3
 8005fbc:	454b      	cmp	r3, r9
 8005fbe:	dc01      	bgt.n	8005fc4 <_printf_float+0x2c4>
 8005fc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fc2:	e792      	b.n	8005eea <_printf_float+0x1ea>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	4652      	mov	r2, sl
 8005fc8:	4631      	mov	r1, r6
 8005fca:	4628      	mov	r0, r5
 8005fcc:	47b8      	blx	r7
 8005fce:	3001      	adds	r0, #1
 8005fd0:	f43f aef7 	beq.w	8005dc2 <_printf_float+0xc2>
 8005fd4:	f109 0901 	add.w	r9, r9, #1
 8005fd8:	e7ee      	b.n	8005fb8 <_printf_float+0x2b8>
 8005fda:	bf00      	nop
 8005fdc:	7fefffff 	.word	0x7fefffff
 8005fe0:	0800a47c 	.word	0x0800a47c
 8005fe4:	0800a480 	.word	0x0800a480
 8005fe8:	0800a488 	.word	0x0800a488
 8005fec:	0800a484 	.word	0x0800a484
 8005ff0:	0800a48c 	.word	0x0800a48c
 8005ff4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ff6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	bfa8      	it	ge
 8005ffc:	461a      	movge	r2, r3
 8005ffe:	2a00      	cmp	r2, #0
 8006000:	4691      	mov	r9, r2
 8006002:	dc37      	bgt.n	8006074 <_printf_float+0x374>
 8006004:	f04f 0b00 	mov.w	fp, #0
 8006008:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800600c:	f104 021a 	add.w	r2, r4, #26
 8006010:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006012:	9305      	str	r3, [sp, #20]
 8006014:	eba3 0309 	sub.w	r3, r3, r9
 8006018:	455b      	cmp	r3, fp
 800601a:	dc33      	bgt.n	8006084 <_printf_float+0x384>
 800601c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006020:	429a      	cmp	r2, r3
 8006022:	db3b      	blt.n	800609c <_printf_float+0x39c>
 8006024:	6823      	ldr	r3, [r4, #0]
 8006026:	07da      	lsls	r2, r3, #31
 8006028:	d438      	bmi.n	800609c <_printf_float+0x39c>
 800602a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800602c:	9b05      	ldr	r3, [sp, #20]
 800602e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	eba2 0901 	sub.w	r9, r2, r1
 8006036:	4599      	cmp	r9, r3
 8006038:	bfa8      	it	ge
 800603a:	4699      	movge	r9, r3
 800603c:	f1b9 0f00 	cmp.w	r9, #0
 8006040:	dc35      	bgt.n	80060ae <_printf_float+0x3ae>
 8006042:	f04f 0800 	mov.w	r8, #0
 8006046:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800604a:	f104 0a1a 	add.w	sl, r4, #26
 800604e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006052:	1a9b      	subs	r3, r3, r2
 8006054:	eba3 0309 	sub.w	r3, r3, r9
 8006058:	4543      	cmp	r3, r8
 800605a:	f77f af79 	ble.w	8005f50 <_printf_float+0x250>
 800605e:	2301      	movs	r3, #1
 8006060:	4652      	mov	r2, sl
 8006062:	4631      	mov	r1, r6
 8006064:	4628      	mov	r0, r5
 8006066:	47b8      	blx	r7
 8006068:	3001      	adds	r0, #1
 800606a:	f43f aeaa 	beq.w	8005dc2 <_printf_float+0xc2>
 800606e:	f108 0801 	add.w	r8, r8, #1
 8006072:	e7ec      	b.n	800604e <_printf_float+0x34e>
 8006074:	4613      	mov	r3, r2
 8006076:	4631      	mov	r1, r6
 8006078:	4642      	mov	r2, r8
 800607a:	4628      	mov	r0, r5
 800607c:	47b8      	blx	r7
 800607e:	3001      	adds	r0, #1
 8006080:	d1c0      	bne.n	8006004 <_printf_float+0x304>
 8006082:	e69e      	b.n	8005dc2 <_printf_float+0xc2>
 8006084:	2301      	movs	r3, #1
 8006086:	4631      	mov	r1, r6
 8006088:	4628      	mov	r0, r5
 800608a:	9205      	str	r2, [sp, #20]
 800608c:	47b8      	blx	r7
 800608e:	3001      	adds	r0, #1
 8006090:	f43f ae97 	beq.w	8005dc2 <_printf_float+0xc2>
 8006094:	9a05      	ldr	r2, [sp, #20]
 8006096:	f10b 0b01 	add.w	fp, fp, #1
 800609a:	e7b9      	b.n	8006010 <_printf_float+0x310>
 800609c:	ee18 3a10 	vmov	r3, s16
 80060a0:	4652      	mov	r2, sl
 80060a2:	4631      	mov	r1, r6
 80060a4:	4628      	mov	r0, r5
 80060a6:	47b8      	blx	r7
 80060a8:	3001      	adds	r0, #1
 80060aa:	d1be      	bne.n	800602a <_printf_float+0x32a>
 80060ac:	e689      	b.n	8005dc2 <_printf_float+0xc2>
 80060ae:	9a05      	ldr	r2, [sp, #20]
 80060b0:	464b      	mov	r3, r9
 80060b2:	4442      	add	r2, r8
 80060b4:	4631      	mov	r1, r6
 80060b6:	4628      	mov	r0, r5
 80060b8:	47b8      	blx	r7
 80060ba:	3001      	adds	r0, #1
 80060bc:	d1c1      	bne.n	8006042 <_printf_float+0x342>
 80060be:	e680      	b.n	8005dc2 <_printf_float+0xc2>
 80060c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060c2:	2a01      	cmp	r2, #1
 80060c4:	dc01      	bgt.n	80060ca <_printf_float+0x3ca>
 80060c6:	07db      	lsls	r3, r3, #31
 80060c8:	d538      	bpl.n	800613c <_printf_float+0x43c>
 80060ca:	2301      	movs	r3, #1
 80060cc:	4642      	mov	r2, r8
 80060ce:	4631      	mov	r1, r6
 80060d0:	4628      	mov	r0, r5
 80060d2:	47b8      	blx	r7
 80060d4:	3001      	adds	r0, #1
 80060d6:	f43f ae74 	beq.w	8005dc2 <_printf_float+0xc2>
 80060da:	ee18 3a10 	vmov	r3, s16
 80060de:	4652      	mov	r2, sl
 80060e0:	4631      	mov	r1, r6
 80060e2:	4628      	mov	r0, r5
 80060e4:	47b8      	blx	r7
 80060e6:	3001      	adds	r0, #1
 80060e8:	f43f ae6b 	beq.w	8005dc2 <_printf_float+0xc2>
 80060ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80060f0:	2200      	movs	r2, #0
 80060f2:	2300      	movs	r3, #0
 80060f4:	f7fa fce8 	bl	8000ac8 <__aeabi_dcmpeq>
 80060f8:	b9d8      	cbnz	r0, 8006132 <_printf_float+0x432>
 80060fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060fc:	f108 0201 	add.w	r2, r8, #1
 8006100:	3b01      	subs	r3, #1
 8006102:	4631      	mov	r1, r6
 8006104:	4628      	mov	r0, r5
 8006106:	47b8      	blx	r7
 8006108:	3001      	adds	r0, #1
 800610a:	d10e      	bne.n	800612a <_printf_float+0x42a>
 800610c:	e659      	b.n	8005dc2 <_printf_float+0xc2>
 800610e:	2301      	movs	r3, #1
 8006110:	4652      	mov	r2, sl
 8006112:	4631      	mov	r1, r6
 8006114:	4628      	mov	r0, r5
 8006116:	47b8      	blx	r7
 8006118:	3001      	adds	r0, #1
 800611a:	f43f ae52 	beq.w	8005dc2 <_printf_float+0xc2>
 800611e:	f108 0801 	add.w	r8, r8, #1
 8006122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006124:	3b01      	subs	r3, #1
 8006126:	4543      	cmp	r3, r8
 8006128:	dcf1      	bgt.n	800610e <_printf_float+0x40e>
 800612a:	464b      	mov	r3, r9
 800612c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006130:	e6dc      	b.n	8005eec <_printf_float+0x1ec>
 8006132:	f04f 0800 	mov.w	r8, #0
 8006136:	f104 0a1a 	add.w	sl, r4, #26
 800613a:	e7f2      	b.n	8006122 <_printf_float+0x422>
 800613c:	2301      	movs	r3, #1
 800613e:	4642      	mov	r2, r8
 8006140:	e7df      	b.n	8006102 <_printf_float+0x402>
 8006142:	2301      	movs	r3, #1
 8006144:	464a      	mov	r2, r9
 8006146:	4631      	mov	r1, r6
 8006148:	4628      	mov	r0, r5
 800614a:	47b8      	blx	r7
 800614c:	3001      	adds	r0, #1
 800614e:	f43f ae38 	beq.w	8005dc2 <_printf_float+0xc2>
 8006152:	f108 0801 	add.w	r8, r8, #1
 8006156:	68e3      	ldr	r3, [r4, #12]
 8006158:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800615a:	1a5b      	subs	r3, r3, r1
 800615c:	4543      	cmp	r3, r8
 800615e:	dcf0      	bgt.n	8006142 <_printf_float+0x442>
 8006160:	e6fa      	b.n	8005f58 <_printf_float+0x258>
 8006162:	f04f 0800 	mov.w	r8, #0
 8006166:	f104 0919 	add.w	r9, r4, #25
 800616a:	e7f4      	b.n	8006156 <_printf_float+0x456>

0800616c <_printf_common>:
 800616c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006170:	4616      	mov	r6, r2
 8006172:	4699      	mov	r9, r3
 8006174:	688a      	ldr	r2, [r1, #8]
 8006176:	690b      	ldr	r3, [r1, #16]
 8006178:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800617c:	4293      	cmp	r3, r2
 800617e:	bfb8      	it	lt
 8006180:	4613      	movlt	r3, r2
 8006182:	6033      	str	r3, [r6, #0]
 8006184:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006188:	4607      	mov	r7, r0
 800618a:	460c      	mov	r4, r1
 800618c:	b10a      	cbz	r2, 8006192 <_printf_common+0x26>
 800618e:	3301      	adds	r3, #1
 8006190:	6033      	str	r3, [r6, #0]
 8006192:	6823      	ldr	r3, [r4, #0]
 8006194:	0699      	lsls	r1, r3, #26
 8006196:	bf42      	ittt	mi
 8006198:	6833      	ldrmi	r3, [r6, #0]
 800619a:	3302      	addmi	r3, #2
 800619c:	6033      	strmi	r3, [r6, #0]
 800619e:	6825      	ldr	r5, [r4, #0]
 80061a0:	f015 0506 	ands.w	r5, r5, #6
 80061a4:	d106      	bne.n	80061b4 <_printf_common+0x48>
 80061a6:	f104 0a19 	add.w	sl, r4, #25
 80061aa:	68e3      	ldr	r3, [r4, #12]
 80061ac:	6832      	ldr	r2, [r6, #0]
 80061ae:	1a9b      	subs	r3, r3, r2
 80061b0:	42ab      	cmp	r3, r5
 80061b2:	dc26      	bgt.n	8006202 <_printf_common+0x96>
 80061b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061b8:	1e13      	subs	r3, r2, #0
 80061ba:	6822      	ldr	r2, [r4, #0]
 80061bc:	bf18      	it	ne
 80061be:	2301      	movne	r3, #1
 80061c0:	0692      	lsls	r2, r2, #26
 80061c2:	d42b      	bmi.n	800621c <_printf_common+0xb0>
 80061c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061c8:	4649      	mov	r1, r9
 80061ca:	4638      	mov	r0, r7
 80061cc:	47c0      	blx	r8
 80061ce:	3001      	adds	r0, #1
 80061d0:	d01e      	beq.n	8006210 <_printf_common+0xa4>
 80061d2:	6823      	ldr	r3, [r4, #0]
 80061d4:	68e5      	ldr	r5, [r4, #12]
 80061d6:	6832      	ldr	r2, [r6, #0]
 80061d8:	f003 0306 	and.w	r3, r3, #6
 80061dc:	2b04      	cmp	r3, #4
 80061de:	bf08      	it	eq
 80061e0:	1aad      	subeq	r5, r5, r2
 80061e2:	68a3      	ldr	r3, [r4, #8]
 80061e4:	6922      	ldr	r2, [r4, #16]
 80061e6:	bf0c      	ite	eq
 80061e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061ec:	2500      	movne	r5, #0
 80061ee:	4293      	cmp	r3, r2
 80061f0:	bfc4      	itt	gt
 80061f2:	1a9b      	subgt	r3, r3, r2
 80061f4:	18ed      	addgt	r5, r5, r3
 80061f6:	2600      	movs	r6, #0
 80061f8:	341a      	adds	r4, #26
 80061fa:	42b5      	cmp	r5, r6
 80061fc:	d11a      	bne.n	8006234 <_printf_common+0xc8>
 80061fe:	2000      	movs	r0, #0
 8006200:	e008      	b.n	8006214 <_printf_common+0xa8>
 8006202:	2301      	movs	r3, #1
 8006204:	4652      	mov	r2, sl
 8006206:	4649      	mov	r1, r9
 8006208:	4638      	mov	r0, r7
 800620a:	47c0      	blx	r8
 800620c:	3001      	adds	r0, #1
 800620e:	d103      	bne.n	8006218 <_printf_common+0xac>
 8006210:	f04f 30ff 	mov.w	r0, #4294967295
 8006214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006218:	3501      	adds	r5, #1
 800621a:	e7c6      	b.n	80061aa <_printf_common+0x3e>
 800621c:	18e1      	adds	r1, r4, r3
 800621e:	1c5a      	adds	r2, r3, #1
 8006220:	2030      	movs	r0, #48	; 0x30
 8006222:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006226:	4422      	add	r2, r4
 8006228:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800622c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006230:	3302      	adds	r3, #2
 8006232:	e7c7      	b.n	80061c4 <_printf_common+0x58>
 8006234:	2301      	movs	r3, #1
 8006236:	4622      	mov	r2, r4
 8006238:	4649      	mov	r1, r9
 800623a:	4638      	mov	r0, r7
 800623c:	47c0      	blx	r8
 800623e:	3001      	adds	r0, #1
 8006240:	d0e6      	beq.n	8006210 <_printf_common+0xa4>
 8006242:	3601      	adds	r6, #1
 8006244:	e7d9      	b.n	80061fa <_printf_common+0x8e>
	...

08006248 <_printf_i>:
 8006248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800624c:	460c      	mov	r4, r1
 800624e:	4691      	mov	r9, r2
 8006250:	7e27      	ldrb	r7, [r4, #24]
 8006252:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006254:	2f78      	cmp	r7, #120	; 0x78
 8006256:	4680      	mov	r8, r0
 8006258:	469a      	mov	sl, r3
 800625a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800625e:	d807      	bhi.n	8006270 <_printf_i+0x28>
 8006260:	2f62      	cmp	r7, #98	; 0x62
 8006262:	d80a      	bhi.n	800627a <_printf_i+0x32>
 8006264:	2f00      	cmp	r7, #0
 8006266:	f000 80d8 	beq.w	800641a <_printf_i+0x1d2>
 800626a:	2f58      	cmp	r7, #88	; 0x58
 800626c:	f000 80a3 	beq.w	80063b6 <_printf_i+0x16e>
 8006270:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006274:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006278:	e03a      	b.n	80062f0 <_printf_i+0xa8>
 800627a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800627e:	2b15      	cmp	r3, #21
 8006280:	d8f6      	bhi.n	8006270 <_printf_i+0x28>
 8006282:	a001      	add	r0, pc, #4	; (adr r0, 8006288 <_printf_i+0x40>)
 8006284:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006288:	080062e1 	.word	0x080062e1
 800628c:	080062f5 	.word	0x080062f5
 8006290:	08006271 	.word	0x08006271
 8006294:	08006271 	.word	0x08006271
 8006298:	08006271 	.word	0x08006271
 800629c:	08006271 	.word	0x08006271
 80062a0:	080062f5 	.word	0x080062f5
 80062a4:	08006271 	.word	0x08006271
 80062a8:	08006271 	.word	0x08006271
 80062ac:	08006271 	.word	0x08006271
 80062b0:	08006271 	.word	0x08006271
 80062b4:	08006401 	.word	0x08006401
 80062b8:	08006325 	.word	0x08006325
 80062bc:	080063e3 	.word	0x080063e3
 80062c0:	08006271 	.word	0x08006271
 80062c4:	08006271 	.word	0x08006271
 80062c8:	08006423 	.word	0x08006423
 80062cc:	08006271 	.word	0x08006271
 80062d0:	08006325 	.word	0x08006325
 80062d4:	08006271 	.word	0x08006271
 80062d8:	08006271 	.word	0x08006271
 80062dc:	080063eb 	.word	0x080063eb
 80062e0:	680b      	ldr	r3, [r1, #0]
 80062e2:	1d1a      	adds	r2, r3, #4
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	600a      	str	r2, [r1, #0]
 80062e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80062ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062f0:	2301      	movs	r3, #1
 80062f2:	e0a3      	b.n	800643c <_printf_i+0x1f4>
 80062f4:	6825      	ldr	r5, [r4, #0]
 80062f6:	6808      	ldr	r0, [r1, #0]
 80062f8:	062e      	lsls	r6, r5, #24
 80062fa:	f100 0304 	add.w	r3, r0, #4
 80062fe:	d50a      	bpl.n	8006316 <_printf_i+0xce>
 8006300:	6805      	ldr	r5, [r0, #0]
 8006302:	600b      	str	r3, [r1, #0]
 8006304:	2d00      	cmp	r5, #0
 8006306:	da03      	bge.n	8006310 <_printf_i+0xc8>
 8006308:	232d      	movs	r3, #45	; 0x2d
 800630a:	426d      	negs	r5, r5
 800630c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006310:	485e      	ldr	r0, [pc, #376]	; (800648c <_printf_i+0x244>)
 8006312:	230a      	movs	r3, #10
 8006314:	e019      	b.n	800634a <_printf_i+0x102>
 8006316:	f015 0f40 	tst.w	r5, #64	; 0x40
 800631a:	6805      	ldr	r5, [r0, #0]
 800631c:	600b      	str	r3, [r1, #0]
 800631e:	bf18      	it	ne
 8006320:	b22d      	sxthne	r5, r5
 8006322:	e7ef      	b.n	8006304 <_printf_i+0xbc>
 8006324:	680b      	ldr	r3, [r1, #0]
 8006326:	6825      	ldr	r5, [r4, #0]
 8006328:	1d18      	adds	r0, r3, #4
 800632a:	6008      	str	r0, [r1, #0]
 800632c:	0628      	lsls	r0, r5, #24
 800632e:	d501      	bpl.n	8006334 <_printf_i+0xec>
 8006330:	681d      	ldr	r5, [r3, #0]
 8006332:	e002      	b.n	800633a <_printf_i+0xf2>
 8006334:	0669      	lsls	r1, r5, #25
 8006336:	d5fb      	bpl.n	8006330 <_printf_i+0xe8>
 8006338:	881d      	ldrh	r5, [r3, #0]
 800633a:	4854      	ldr	r0, [pc, #336]	; (800648c <_printf_i+0x244>)
 800633c:	2f6f      	cmp	r7, #111	; 0x6f
 800633e:	bf0c      	ite	eq
 8006340:	2308      	moveq	r3, #8
 8006342:	230a      	movne	r3, #10
 8006344:	2100      	movs	r1, #0
 8006346:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800634a:	6866      	ldr	r6, [r4, #4]
 800634c:	60a6      	str	r6, [r4, #8]
 800634e:	2e00      	cmp	r6, #0
 8006350:	bfa2      	ittt	ge
 8006352:	6821      	ldrge	r1, [r4, #0]
 8006354:	f021 0104 	bicge.w	r1, r1, #4
 8006358:	6021      	strge	r1, [r4, #0]
 800635a:	b90d      	cbnz	r5, 8006360 <_printf_i+0x118>
 800635c:	2e00      	cmp	r6, #0
 800635e:	d04d      	beq.n	80063fc <_printf_i+0x1b4>
 8006360:	4616      	mov	r6, r2
 8006362:	fbb5 f1f3 	udiv	r1, r5, r3
 8006366:	fb03 5711 	mls	r7, r3, r1, r5
 800636a:	5dc7      	ldrb	r7, [r0, r7]
 800636c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006370:	462f      	mov	r7, r5
 8006372:	42bb      	cmp	r3, r7
 8006374:	460d      	mov	r5, r1
 8006376:	d9f4      	bls.n	8006362 <_printf_i+0x11a>
 8006378:	2b08      	cmp	r3, #8
 800637a:	d10b      	bne.n	8006394 <_printf_i+0x14c>
 800637c:	6823      	ldr	r3, [r4, #0]
 800637e:	07df      	lsls	r7, r3, #31
 8006380:	d508      	bpl.n	8006394 <_printf_i+0x14c>
 8006382:	6923      	ldr	r3, [r4, #16]
 8006384:	6861      	ldr	r1, [r4, #4]
 8006386:	4299      	cmp	r1, r3
 8006388:	bfde      	ittt	le
 800638a:	2330      	movle	r3, #48	; 0x30
 800638c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006390:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006394:	1b92      	subs	r2, r2, r6
 8006396:	6122      	str	r2, [r4, #16]
 8006398:	f8cd a000 	str.w	sl, [sp]
 800639c:	464b      	mov	r3, r9
 800639e:	aa03      	add	r2, sp, #12
 80063a0:	4621      	mov	r1, r4
 80063a2:	4640      	mov	r0, r8
 80063a4:	f7ff fee2 	bl	800616c <_printf_common>
 80063a8:	3001      	adds	r0, #1
 80063aa:	d14c      	bne.n	8006446 <_printf_i+0x1fe>
 80063ac:	f04f 30ff 	mov.w	r0, #4294967295
 80063b0:	b004      	add	sp, #16
 80063b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063b6:	4835      	ldr	r0, [pc, #212]	; (800648c <_printf_i+0x244>)
 80063b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	680e      	ldr	r6, [r1, #0]
 80063c0:	061f      	lsls	r7, r3, #24
 80063c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80063c6:	600e      	str	r6, [r1, #0]
 80063c8:	d514      	bpl.n	80063f4 <_printf_i+0x1ac>
 80063ca:	07d9      	lsls	r1, r3, #31
 80063cc:	bf44      	itt	mi
 80063ce:	f043 0320 	orrmi.w	r3, r3, #32
 80063d2:	6023      	strmi	r3, [r4, #0]
 80063d4:	b91d      	cbnz	r5, 80063de <_printf_i+0x196>
 80063d6:	6823      	ldr	r3, [r4, #0]
 80063d8:	f023 0320 	bic.w	r3, r3, #32
 80063dc:	6023      	str	r3, [r4, #0]
 80063de:	2310      	movs	r3, #16
 80063e0:	e7b0      	b.n	8006344 <_printf_i+0xfc>
 80063e2:	6823      	ldr	r3, [r4, #0]
 80063e4:	f043 0320 	orr.w	r3, r3, #32
 80063e8:	6023      	str	r3, [r4, #0]
 80063ea:	2378      	movs	r3, #120	; 0x78
 80063ec:	4828      	ldr	r0, [pc, #160]	; (8006490 <_printf_i+0x248>)
 80063ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063f2:	e7e3      	b.n	80063bc <_printf_i+0x174>
 80063f4:	065e      	lsls	r6, r3, #25
 80063f6:	bf48      	it	mi
 80063f8:	b2ad      	uxthmi	r5, r5
 80063fa:	e7e6      	b.n	80063ca <_printf_i+0x182>
 80063fc:	4616      	mov	r6, r2
 80063fe:	e7bb      	b.n	8006378 <_printf_i+0x130>
 8006400:	680b      	ldr	r3, [r1, #0]
 8006402:	6826      	ldr	r6, [r4, #0]
 8006404:	6960      	ldr	r0, [r4, #20]
 8006406:	1d1d      	adds	r5, r3, #4
 8006408:	600d      	str	r5, [r1, #0]
 800640a:	0635      	lsls	r5, r6, #24
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	d501      	bpl.n	8006414 <_printf_i+0x1cc>
 8006410:	6018      	str	r0, [r3, #0]
 8006412:	e002      	b.n	800641a <_printf_i+0x1d2>
 8006414:	0671      	lsls	r1, r6, #25
 8006416:	d5fb      	bpl.n	8006410 <_printf_i+0x1c8>
 8006418:	8018      	strh	r0, [r3, #0]
 800641a:	2300      	movs	r3, #0
 800641c:	6123      	str	r3, [r4, #16]
 800641e:	4616      	mov	r6, r2
 8006420:	e7ba      	b.n	8006398 <_printf_i+0x150>
 8006422:	680b      	ldr	r3, [r1, #0]
 8006424:	1d1a      	adds	r2, r3, #4
 8006426:	600a      	str	r2, [r1, #0]
 8006428:	681e      	ldr	r6, [r3, #0]
 800642a:	6862      	ldr	r2, [r4, #4]
 800642c:	2100      	movs	r1, #0
 800642e:	4630      	mov	r0, r6
 8006430:	f7f9 fece 	bl	80001d0 <memchr>
 8006434:	b108      	cbz	r0, 800643a <_printf_i+0x1f2>
 8006436:	1b80      	subs	r0, r0, r6
 8006438:	6060      	str	r0, [r4, #4]
 800643a:	6863      	ldr	r3, [r4, #4]
 800643c:	6123      	str	r3, [r4, #16]
 800643e:	2300      	movs	r3, #0
 8006440:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006444:	e7a8      	b.n	8006398 <_printf_i+0x150>
 8006446:	6923      	ldr	r3, [r4, #16]
 8006448:	4632      	mov	r2, r6
 800644a:	4649      	mov	r1, r9
 800644c:	4640      	mov	r0, r8
 800644e:	47d0      	blx	sl
 8006450:	3001      	adds	r0, #1
 8006452:	d0ab      	beq.n	80063ac <_printf_i+0x164>
 8006454:	6823      	ldr	r3, [r4, #0]
 8006456:	079b      	lsls	r3, r3, #30
 8006458:	d413      	bmi.n	8006482 <_printf_i+0x23a>
 800645a:	68e0      	ldr	r0, [r4, #12]
 800645c:	9b03      	ldr	r3, [sp, #12]
 800645e:	4298      	cmp	r0, r3
 8006460:	bfb8      	it	lt
 8006462:	4618      	movlt	r0, r3
 8006464:	e7a4      	b.n	80063b0 <_printf_i+0x168>
 8006466:	2301      	movs	r3, #1
 8006468:	4632      	mov	r2, r6
 800646a:	4649      	mov	r1, r9
 800646c:	4640      	mov	r0, r8
 800646e:	47d0      	blx	sl
 8006470:	3001      	adds	r0, #1
 8006472:	d09b      	beq.n	80063ac <_printf_i+0x164>
 8006474:	3501      	adds	r5, #1
 8006476:	68e3      	ldr	r3, [r4, #12]
 8006478:	9903      	ldr	r1, [sp, #12]
 800647a:	1a5b      	subs	r3, r3, r1
 800647c:	42ab      	cmp	r3, r5
 800647e:	dcf2      	bgt.n	8006466 <_printf_i+0x21e>
 8006480:	e7eb      	b.n	800645a <_printf_i+0x212>
 8006482:	2500      	movs	r5, #0
 8006484:	f104 0619 	add.w	r6, r4, #25
 8006488:	e7f5      	b.n	8006476 <_printf_i+0x22e>
 800648a:	bf00      	nop
 800648c:	0800a48e 	.word	0x0800a48e
 8006490:	0800a49f 	.word	0x0800a49f

08006494 <_scanf_float>:
 8006494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006498:	b087      	sub	sp, #28
 800649a:	4617      	mov	r7, r2
 800649c:	9303      	str	r3, [sp, #12]
 800649e:	688b      	ldr	r3, [r1, #8]
 80064a0:	1e5a      	subs	r2, r3, #1
 80064a2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80064a6:	bf83      	ittte	hi
 80064a8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80064ac:	195b      	addhi	r3, r3, r5
 80064ae:	9302      	strhi	r3, [sp, #8]
 80064b0:	2300      	movls	r3, #0
 80064b2:	bf86      	itte	hi
 80064b4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80064b8:	608b      	strhi	r3, [r1, #8]
 80064ba:	9302      	strls	r3, [sp, #8]
 80064bc:	680b      	ldr	r3, [r1, #0]
 80064be:	468b      	mov	fp, r1
 80064c0:	2500      	movs	r5, #0
 80064c2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80064c6:	f84b 3b1c 	str.w	r3, [fp], #28
 80064ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80064ce:	4680      	mov	r8, r0
 80064d0:	460c      	mov	r4, r1
 80064d2:	465e      	mov	r6, fp
 80064d4:	46aa      	mov	sl, r5
 80064d6:	46a9      	mov	r9, r5
 80064d8:	9501      	str	r5, [sp, #4]
 80064da:	68a2      	ldr	r2, [r4, #8]
 80064dc:	b152      	cbz	r2, 80064f4 <_scanf_float+0x60>
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	2b4e      	cmp	r3, #78	; 0x4e
 80064e4:	d864      	bhi.n	80065b0 <_scanf_float+0x11c>
 80064e6:	2b40      	cmp	r3, #64	; 0x40
 80064e8:	d83c      	bhi.n	8006564 <_scanf_float+0xd0>
 80064ea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80064ee:	b2c8      	uxtb	r0, r1
 80064f0:	280e      	cmp	r0, #14
 80064f2:	d93a      	bls.n	800656a <_scanf_float+0xd6>
 80064f4:	f1b9 0f00 	cmp.w	r9, #0
 80064f8:	d003      	beq.n	8006502 <_scanf_float+0x6e>
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006500:	6023      	str	r3, [r4, #0]
 8006502:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006506:	f1ba 0f01 	cmp.w	sl, #1
 800650a:	f200 8113 	bhi.w	8006734 <_scanf_float+0x2a0>
 800650e:	455e      	cmp	r6, fp
 8006510:	f200 8105 	bhi.w	800671e <_scanf_float+0x28a>
 8006514:	2501      	movs	r5, #1
 8006516:	4628      	mov	r0, r5
 8006518:	b007      	add	sp, #28
 800651a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800651e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006522:	2a0d      	cmp	r2, #13
 8006524:	d8e6      	bhi.n	80064f4 <_scanf_float+0x60>
 8006526:	a101      	add	r1, pc, #4	; (adr r1, 800652c <_scanf_float+0x98>)
 8006528:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800652c:	0800666b 	.word	0x0800666b
 8006530:	080064f5 	.word	0x080064f5
 8006534:	080064f5 	.word	0x080064f5
 8006538:	080064f5 	.word	0x080064f5
 800653c:	080066cb 	.word	0x080066cb
 8006540:	080066a3 	.word	0x080066a3
 8006544:	080064f5 	.word	0x080064f5
 8006548:	080064f5 	.word	0x080064f5
 800654c:	08006679 	.word	0x08006679
 8006550:	080064f5 	.word	0x080064f5
 8006554:	080064f5 	.word	0x080064f5
 8006558:	080064f5 	.word	0x080064f5
 800655c:	080064f5 	.word	0x080064f5
 8006560:	08006631 	.word	0x08006631
 8006564:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006568:	e7db      	b.n	8006522 <_scanf_float+0x8e>
 800656a:	290e      	cmp	r1, #14
 800656c:	d8c2      	bhi.n	80064f4 <_scanf_float+0x60>
 800656e:	a001      	add	r0, pc, #4	; (adr r0, 8006574 <_scanf_float+0xe0>)
 8006570:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006574:	08006623 	.word	0x08006623
 8006578:	080064f5 	.word	0x080064f5
 800657c:	08006623 	.word	0x08006623
 8006580:	080066b7 	.word	0x080066b7
 8006584:	080064f5 	.word	0x080064f5
 8006588:	080065d1 	.word	0x080065d1
 800658c:	0800660d 	.word	0x0800660d
 8006590:	0800660d 	.word	0x0800660d
 8006594:	0800660d 	.word	0x0800660d
 8006598:	0800660d 	.word	0x0800660d
 800659c:	0800660d 	.word	0x0800660d
 80065a0:	0800660d 	.word	0x0800660d
 80065a4:	0800660d 	.word	0x0800660d
 80065a8:	0800660d 	.word	0x0800660d
 80065ac:	0800660d 	.word	0x0800660d
 80065b0:	2b6e      	cmp	r3, #110	; 0x6e
 80065b2:	d809      	bhi.n	80065c8 <_scanf_float+0x134>
 80065b4:	2b60      	cmp	r3, #96	; 0x60
 80065b6:	d8b2      	bhi.n	800651e <_scanf_float+0x8a>
 80065b8:	2b54      	cmp	r3, #84	; 0x54
 80065ba:	d077      	beq.n	80066ac <_scanf_float+0x218>
 80065bc:	2b59      	cmp	r3, #89	; 0x59
 80065be:	d199      	bne.n	80064f4 <_scanf_float+0x60>
 80065c0:	2d07      	cmp	r5, #7
 80065c2:	d197      	bne.n	80064f4 <_scanf_float+0x60>
 80065c4:	2508      	movs	r5, #8
 80065c6:	e029      	b.n	800661c <_scanf_float+0x188>
 80065c8:	2b74      	cmp	r3, #116	; 0x74
 80065ca:	d06f      	beq.n	80066ac <_scanf_float+0x218>
 80065cc:	2b79      	cmp	r3, #121	; 0x79
 80065ce:	e7f6      	b.n	80065be <_scanf_float+0x12a>
 80065d0:	6821      	ldr	r1, [r4, #0]
 80065d2:	05c8      	lsls	r0, r1, #23
 80065d4:	d51a      	bpl.n	800660c <_scanf_float+0x178>
 80065d6:	9b02      	ldr	r3, [sp, #8]
 80065d8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80065dc:	6021      	str	r1, [r4, #0]
 80065de:	f109 0901 	add.w	r9, r9, #1
 80065e2:	b11b      	cbz	r3, 80065ec <_scanf_float+0x158>
 80065e4:	3b01      	subs	r3, #1
 80065e6:	3201      	adds	r2, #1
 80065e8:	9302      	str	r3, [sp, #8]
 80065ea:	60a2      	str	r2, [r4, #8]
 80065ec:	68a3      	ldr	r3, [r4, #8]
 80065ee:	3b01      	subs	r3, #1
 80065f0:	60a3      	str	r3, [r4, #8]
 80065f2:	6923      	ldr	r3, [r4, #16]
 80065f4:	3301      	adds	r3, #1
 80065f6:	6123      	str	r3, [r4, #16]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3b01      	subs	r3, #1
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	607b      	str	r3, [r7, #4]
 8006600:	f340 8084 	ble.w	800670c <_scanf_float+0x278>
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	3301      	adds	r3, #1
 8006608:	603b      	str	r3, [r7, #0]
 800660a:	e766      	b.n	80064da <_scanf_float+0x46>
 800660c:	eb1a 0f05 	cmn.w	sl, r5
 8006610:	f47f af70 	bne.w	80064f4 <_scanf_float+0x60>
 8006614:	6822      	ldr	r2, [r4, #0]
 8006616:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800661a:	6022      	str	r2, [r4, #0]
 800661c:	f806 3b01 	strb.w	r3, [r6], #1
 8006620:	e7e4      	b.n	80065ec <_scanf_float+0x158>
 8006622:	6822      	ldr	r2, [r4, #0]
 8006624:	0610      	lsls	r0, r2, #24
 8006626:	f57f af65 	bpl.w	80064f4 <_scanf_float+0x60>
 800662a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800662e:	e7f4      	b.n	800661a <_scanf_float+0x186>
 8006630:	f1ba 0f00 	cmp.w	sl, #0
 8006634:	d10e      	bne.n	8006654 <_scanf_float+0x1c0>
 8006636:	f1b9 0f00 	cmp.w	r9, #0
 800663a:	d10e      	bne.n	800665a <_scanf_float+0x1c6>
 800663c:	6822      	ldr	r2, [r4, #0]
 800663e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006642:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006646:	d108      	bne.n	800665a <_scanf_float+0x1c6>
 8006648:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800664c:	6022      	str	r2, [r4, #0]
 800664e:	f04f 0a01 	mov.w	sl, #1
 8006652:	e7e3      	b.n	800661c <_scanf_float+0x188>
 8006654:	f1ba 0f02 	cmp.w	sl, #2
 8006658:	d055      	beq.n	8006706 <_scanf_float+0x272>
 800665a:	2d01      	cmp	r5, #1
 800665c:	d002      	beq.n	8006664 <_scanf_float+0x1d0>
 800665e:	2d04      	cmp	r5, #4
 8006660:	f47f af48 	bne.w	80064f4 <_scanf_float+0x60>
 8006664:	3501      	adds	r5, #1
 8006666:	b2ed      	uxtb	r5, r5
 8006668:	e7d8      	b.n	800661c <_scanf_float+0x188>
 800666a:	f1ba 0f01 	cmp.w	sl, #1
 800666e:	f47f af41 	bne.w	80064f4 <_scanf_float+0x60>
 8006672:	f04f 0a02 	mov.w	sl, #2
 8006676:	e7d1      	b.n	800661c <_scanf_float+0x188>
 8006678:	b97d      	cbnz	r5, 800669a <_scanf_float+0x206>
 800667a:	f1b9 0f00 	cmp.w	r9, #0
 800667e:	f47f af3c 	bne.w	80064fa <_scanf_float+0x66>
 8006682:	6822      	ldr	r2, [r4, #0]
 8006684:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006688:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800668c:	f47f af39 	bne.w	8006502 <_scanf_float+0x6e>
 8006690:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006694:	6022      	str	r2, [r4, #0]
 8006696:	2501      	movs	r5, #1
 8006698:	e7c0      	b.n	800661c <_scanf_float+0x188>
 800669a:	2d03      	cmp	r5, #3
 800669c:	d0e2      	beq.n	8006664 <_scanf_float+0x1d0>
 800669e:	2d05      	cmp	r5, #5
 80066a0:	e7de      	b.n	8006660 <_scanf_float+0x1cc>
 80066a2:	2d02      	cmp	r5, #2
 80066a4:	f47f af26 	bne.w	80064f4 <_scanf_float+0x60>
 80066a8:	2503      	movs	r5, #3
 80066aa:	e7b7      	b.n	800661c <_scanf_float+0x188>
 80066ac:	2d06      	cmp	r5, #6
 80066ae:	f47f af21 	bne.w	80064f4 <_scanf_float+0x60>
 80066b2:	2507      	movs	r5, #7
 80066b4:	e7b2      	b.n	800661c <_scanf_float+0x188>
 80066b6:	6822      	ldr	r2, [r4, #0]
 80066b8:	0591      	lsls	r1, r2, #22
 80066ba:	f57f af1b 	bpl.w	80064f4 <_scanf_float+0x60>
 80066be:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80066c2:	6022      	str	r2, [r4, #0]
 80066c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80066c8:	e7a8      	b.n	800661c <_scanf_float+0x188>
 80066ca:	6822      	ldr	r2, [r4, #0]
 80066cc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80066d0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80066d4:	d006      	beq.n	80066e4 <_scanf_float+0x250>
 80066d6:	0550      	lsls	r0, r2, #21
 80066d8:	f57f af0c 	bpl.w	80064f4 <_scanf_float+0x60>
 80066dc:	f1b9 0f00 	cmp.w	r9, #0
 80066e0:	f43f af0f 	beq.w	8006502 <_scanf_float+0x6e>
 80066e4:	0591      	lsls	r1, r2, #22
 80066e6:	bf58      	it	pl
 80066e8:	9901      	ldrpl	r1, [sp, #4]
 80066ea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80066ee:	bf58      	it	pl
 80066f0:	eba9 0101 	subpl.w	r1, r9, r1
 80066f4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80066f8:	bf58      	it	pl
 80066fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80066fe:	6022      	str	r2, [r4, #0]
 8006700:	f04f 0900 	mov.w	r9, #0
 8006704:	e78a      	b.n	800661c <_scanf_float+0x188>
 8006706:	f04f 0a03 	mov.w	sl, #3
 800670a:	e787      	b.n	800661c <_scanf_float+0x188>
 800670c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006710:	4639      	mov	r1, r7
 8006712:	4640      	mov	r0, r8
 8006714:	4798      	blx	r3
 8006716:	2800      	cmp	r0, #0
 8006718:	f43f aedf 	beq.w	80064da <_scanf_float+0x46>
 800671c:	e6ea      	b.n	80064f4 <_scanf_float+0x60>
 800671e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006722:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006726:	463a      	mov	r2, r7
 8006728:	4640      	mov	r0, r8
 800672a:	4798      	blx	r3
 800672c:	6923      	ldr	r3, [r4, #16]
 800672e:	3b01      	subs	r3, #1
 8006730:	6123      	str	r3, [r4, #16]
 8006732:	e6ec      	b.n	800650e <_scanf_float+0x7a>
 8006734:	1e6b      	subs	r3, r5, #1
 8006736:	2b06      	cmp	r3, #6
 8006738:	d825      	bhi.n	8006786 <_scanf_float+0x2f2>
 800673a:	2d02      	cmp	r5, #2
 800673c:	d836      	bhi.n	80067ac <_scanf_float+0x318>
 800673e:	455e      	cmp	r6, fp
 8006740:	f67f aee8 	bls.w	8006514 <_scanf_float+0x80>
 8006744:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006748:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800674c:	463a      	mov	r2, r7
 800674e:	4640      	mov	r0, r8
 8006750:	4798      	blx	r3
 8006752:	6923      	ldr	r3, [r4, #16]
 8006754:	3b01      	subs	r3, #1
 8006756:	6123      	str	r3, [r4, #16]
 8006758:	e7f1      	b.n	800673e <_scanf_float+0x2aa>
 800675a:	9802      	ldr	r0, [sp, #8]
 800675c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006760:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006764:	9002      	str	r0, [sp, #8]
 8006766:	463a      	mov	r2, r7
 8006768:	4640      	mov	r0, r8
 800676a:	4798      	blx	r3
 800676c:	6923      	ldr	r3, [r4, #16]
 800676e:	3b01      	subs	r3, #1
 8006770:	6123      	str	r3, [r4, #16]
 8006772:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006776:	fa5f fa8a 	uxtb.w	sl, sl
 800677a:	f1ba 0f02 	cmp.w	sl, #2
 800677e:	d1ec      	bne.n	800675a <_scanf_float+0x2c6>
 8006780:	3d03      	subs	r5, #3
 8006782:	b2ed      	uxtb	r5, r5
 8006784:	1b76      	subs	r6, r6, r5
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	05da      	lsls	r2, r3, #23
 800678a:	d52f      	bpl.n	80067ec <_scanf_float+0x358>
 800678c:	055b      	lsls	r3, r3, #21
 800678e:	d510      	bpl.n	80067b2 <_scanf_float+0x31e>
 8006790:	455e      	cmp	r6, fp
 8006792:	f67f aebf 	bls.w	8006514 <_scanf_float+0x80>
 8006796:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800679a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800679e:	463a      	mov	r2, r7
 80067a0:	4640      	mov	r0, r8
 80067a2:	4798      	blx	r3
 80067a4:	6923      	ldr	r3, [r4, #16]
 80067a6:	3b01      	subs	r3, #1
 80067a8:	6123      	str	r3, [r4, #16]
 80067aa:	e7f1      	b.n	8006790 <_scanf_float+0x2fc>
 80067ac:	46aa      	mov	sl, r5
 80067ae:	9602      	str	r6, [sp, #8]
 80067b0:	e7df      	b.n	8006772 <_scanf_float+0x2de>
 80067b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80067b6:	6923      	ldr	r3, [r4, #16]
 80067b8:	2965      	cmp	r1, #101	; 0x65
 80067ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80067be:	f106 35ff 	add.w	r5, r6, #4294967295
 80067c2:	6123      	str	r3, [r4, #16]
 80067c4:	d00c      	beq.n	80067e0 <_scanf_float+0x34c>
 80067c6:	2945      	cmp	r1, #69	; 0x45
 80067c8:	d00a      	beq.n	80067e0 <_scanf_float+0x34c>
 80067ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067ce:	463a      	mov	r2, r7
 80067d0:	4640      	mov	r0, r8
 80067d2:	4798      	blx	r3
 80067d4:	6923      	ldr	r3, [r4, #16]
 80067d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80067da:	3b01      	subs	r3, #1
 80067dc:	1eb5      	subs	r5, r6, #2
 80067de:	6123      	str	r3, [r4, #16]
 80067e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067e4:	463a      	mov	r2, r7
 80067e6:	4640      	mov	r0, r8
 80067e8:	4798      	blx	r3
 80067ea:	462e      	mov	r6, r5
 80067ec:	6825      	ldr	r5, [r4, #0]
 80067ee:	f015 0510 	ands.w	r5, r5, #16
 80067f2:	d158      	bne.n	80068a6 <_scanf_float+0x412>
 80067f4:	7035      	strb	r5, [r6, #0]
 80067f6:	6823      	ldr	r3, [r4, #0]
 80067f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80067fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006800:	d11c      	bne.n	800683c <_scanf_float+0x3a8>
 8006802:	9b01      	ldr	r3, [sp, #4]
 8006804:	454b      	cmp	r3, r9
 8006806:	eba3 0209 	sub.w	r2, r3, r9
 800680a:	d124      	bne.n	8006856 <_scanf_float+0x3c2>
 800680c:	2200      	movs	r2, #0
 800680e:	4659      	mov	r1, fp
 8006810:	4640      	mov	r0, r8
 8006812:	f000 ff07 	bl	8007624 <_strtod_r>
 8006816:	9b03      	ldr	r3, [sp, #12]
 8006818:	6821      	ldr	r1, [r4, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f011 0f02 	tst.w	r1, #2
 8006820:	ec57 6b10 	vmov	r6, r7, d0
 8006824:	f103 0204 	add.w	r2, r3, #4
 8006828:	d020      	beq.n	800686c <_scanf_float+0x3d8>
 800682a:	9903      	ldr	r1, [sp, #12]
 800682c:	600a      	str	r2, [r1, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	e9c3 6700 	strd	r6, r7, [r3]
 8006834:	68e3      	ldr	r3, [r4, #12]
 8006836:	3301      	adds	r3, #1
 8006838:	60e3      	str	r3, [r4, #12]
 800683a:	e66c      	b.n	8006516 <_scanf_float+0x82>
 800683c:	9b04      	ldr	r3, [sp, #16]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d0e4      	beq.n	800680c <_scanf_float+0x378>
 8006842:	9905      	ldr	r1, [sp, #20]
 8006844:	230a      	movs	r3, #10
 8006846:	462a      	mov	r2, r5
 8006848:	3101      	adds	r1, #1
 800684a:	4640      	mov	r0, r8
 800684c:	f000 ff74 	bl	8007738 <_strtol_r>
 8006850:	9b04      	ldr	r3, [sp, #16]
 8006852:	9e05      	ldr	r6, [sp, #20]
 8006854:	1ac2      	subs	r2, r0, r3
 8006856:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800685a:	429e      	cmp	r6, r3
 800685c:	bf28      	it	cs
 800685e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006862:	4912      	ldr	r1, [pc, #72]	; (80068ac <_scanf_float+0x418>)
 8006864:	4630      	mov	r0, r6
 8006866:	f000 f87f 	bl	8006968 <siprintf>
 800686a:	e7cf      	b.n	800680c <_scanf_float+0x378>
 800686c:	f011 0f04 	tst.w	r1, #4
 8006870:	9903      	ldr	r1, [sp, #12]
 8006872:	600a      	str	r2, [r1, #0]
 8006874:	d1db      	bne.n	800682e <_scanf_float+0x39a>
 8006876:	f8d3 8000 	ldr.w	r8, [r3]
 800687a:	ee10 2a10 	vmov	r2, s0
 800687e:	ee10 0a10 	vmov	r0, s0
 8006882:	463b      	mov	r3, r7
 8006884:	4639      	mov	r1, r7
 8006886:	f7fa f951 	bl	8000b2c <__aeabi_dcmpun>
 800688a:	b128      	cbz	r0, 8006898 <_scanf_float+0x404>
 800688c:	4808      	ldr	r0, [pc, #32]	; (80068b0 <_scanf_float+0x41c>)
 800688e:	f000 f821 	bl	80068d4 <nanf>
 8006892:	ed88 0a00 	vstr	s0, [r8]
 8006896:	e7cd      	b.n	8006834 <_scanf_float+0x3a0>
 8006898:	4630      	mov	r0, r6
 800689a:	4639      	mov	r1, r7
 800689c:	f7fa f9a4 	bl	8000be8 <__aeabi_d2f>
 80068a0:	f8c8 0000 	str.w	r0, [r8]
 80068a4:	e7c6      	b.n	8006834 <_scanf_float+0x3a0>
 80068a6:	2500      	movs	r5, #0
 80068a8:	e635      	b.n	8006516 <_scanf_float+0x82>
 80068aa:	bf00      	nop
 80068ac:	0800a4b0 	.word	0x0800a4b0
 80068b0:	0800a8c8 	.word	0x0800a8c8

080068b4 <_sbrk_r>:
 80068b4:	b538      	push	{r3, r4, r5, lr}
 80068b6:	4d06      	ldr	r5, [pc, #24]	; (80068d0 <_sbrk_r+0x1c>)
 80068b8:	2300      	movs	r3, #0
 80068ba:	4604      	mov	r4, r0
 80068bc:	4608      	mov	r0, r1
 80068be:	602b      	str	r3, [r5, #0]
 80068c0:	f7fb f83c 	bl	800193c <_sbrk>
 80068c4:	1c43      	adds	r3, r0, #1
 80068c6:	d102      	bne.n	80068ce <_sbrk_r+0x1a>
 80068c8:	682b      	ldr	r3, [r5, #0]
 80068ca:	b103      	cbz	r3, 80068ce <_sbrk_r+0x1a>
 80068cc:	6023      	str	r3, [r4, #0]
 80068ce:	bd38      	pop	{r3, r4, r5, pc}
 80068d0:	20000394 	.word	0x20000394

080068d4 <nanf>:
 80068d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80068dc <nanf+0x8>
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	7fc00000 	.word	0x7fc00000

080068e0 <_raise_r>:
 80068e0:	291f      	cmp	r1, #31
 80068e2:	b538      	push	{r3, r4, r5, lr}
 80068e4:	4604      	mov	r4, r0
 80068e6:	460d      	mov	r5, r1
 80068e8:	d904      	bls.n	80068f4 <_raise_r+0x14>
 80068ea:	2316      	movs	r3, #22
 80068ec:	6003      	str	r3, [r0, #0]
 80068ee:	f04f 30ff 	mov.w	r0, #4294967295
 80068f2:	bd38      	pop	{r3, r4, r5, pc}
 80068f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80068f6:	b112      	cbz	r2, 80068fe <_raise_r+0x1e>
 80068f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80068fc:	b94b      	cbnz	r3, 8006912 <_raise_r+0x32>
 80068fe:	4620      	mov	r0, r4
 8006900:	f000 f830 	bl	8006964 <_getpid_r>
 8006904:	462a      	mov	r2, r5
 8006906:	4601      	mov	r1, r0
 8006908:	4620      	mov	r0, r4
 800690a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800690e:	f000 b817 	b.w	8006940 <_kill_r>
 8006912:	2b01      	cmp	r3, #1
 8006914:	d00a      	beq.n	800692c <_raise_r+0x4c>
 8006916:	1c59      	adds	r1, r3, #1
 8006918:	d103      	bne.n	8006922 <_raise_r+0x42>
 800691a:	2316      	movs	r3, #22
 800691c:	6003      	str	r3, [r0, #0]
 800691e:	2001      	movs	r0, #1
 8006920:	e7e7      	b.n	80068f2 <_raise_r+0x12>
 8006922:	2400      	movs	r4, #0
 8006924:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006928:	4628      	mov	r0, r5
 800692a:	4798      	blx	r3
 800692c:	2000      	movs	r0, #0
 800692e:	e7e0      	b.n	80068f2 <_raise_r+0x12>

08006930 <raise>:
 8006930:	4b02      	ldr	r3, [pc, #8]	; (800693c <raise+0xc>)
 8006932:	4601      	mov	r1, r0
 8006934:	6818      	ldr	r0, [r3, #0]
 8006936:	f7ff bfd3 	b.w	80068e0 <_raise_r>
 800693a:	bf00      	nop
 800693c:	20000030 	.word	0x20000030

08006940 <_kill_r>:
 8006940:	b538      	push	{r3, r4, r5, lr}
 8006942:	4d07      	ldr	r5, [pc, #28]	; (8006960 <_kill_r+0x20>)
 8006944:	2300      	movs	r3, #0
 8006946:	4604      	mov	r4, r0
 8006948:	4608      	mov	r0, r1
 800694a:	4611      	mov	r1, r2
 800694c:	602b      	str	r3, [r5, #0]
 800694e:	f7fa ff6d 	bl	800182c <_kill>
 8006952:	1c43      	adds	r3, r0, #1
 8006954:	d102      	bne.n	800695c <_kill_r+0x1c>
 8006956:	682b      	ldr	r3, [r5, #0]
 8006958:	b103      	cbz	r3, 800695c <_kill_r+0x1c>
 800695a:	6023      	str	r3, [r4, #0]
 800695c:	bd38      	pop	{r3, r4, r5, pc}
 800695e:	bf00      	nop
 8006960:	20000394 	.word	0x20000394

08006964 <_getpid_r>:
 8006964:	f7fa bf5a 	b.w	800181c <_getpid>

08006968 <siprintf>:
 8006968:	b40e      	push	{r1, r2, r3}
 800696a:	b500      	push	{lr}
 800696c:	b09c      	sub	sp, #112	; 0x70
 800696e:	ab1d      	add	r3, sp, #116	; 0x74
 8006970:	9002      	str	r0, [sp, #8]
 8006972:	9006      	str	r0, [sp, #24]
 8006974:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006978:	4809      	ldr	r0, [pc, #36]	; (80069a0 <siprintf+0x38>)
 800697a:	9107      	str	r1, [sp, #28]
 800697c:	9104      	str	r1, [sp, #16]
 800697e:	4909      	ldr	r1, [pc, #36]	; (80069a4 <siprintf+0x3c>)
 8006980:	f853 2b04 	ldr.w	r2, [r3], #4
 8006984:	9105      	str	r1, [sp, #20]
 8006986:	6800      	ldr	r0, [r0, #0]
 8006988:	9301      	str	r3, [sp, #4]
 800698a:	a902      	add	r1, sp, #8
 800698c:	f002 fe08 	bl	80095a0 <_svfiprintf_r>
 8006990:	9b02      	ldr	r3, [sp, #8]
 8006992:	2200      	movs	r2, #0
 8006994:	701a      	strb	r2, [r3, #0]
 8006996:	b01c      	add	sp, #112	; 0x70
 8006998:	f85d eb04 	ldr.w	lr, [sp], #4
 800699c:	b003      	add	sp, #12
 800699e:	4770      	bx	lr
 80069a0:	20000030 	.word	0x20000030
 80069a4:	ffff0208 	.word	0xffff0208

080069a8 <strstr>:
 80069a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069aa:	780c      	ldrb	r4, [r1, #0]
 80069ac:	b164      	cbz	r4, 80069c8 <strstr+0x20>
 80069ae:	4603      	mov	r3, r0
 80069b0:	781a      	ldrb	r2, [r3, #0]
 80069b2:	4618      	mov	r0, r3
 80069b4:	1c5e      	adds	r6, r3, #1
 80069b6:	b90a      	cbnz	r2, 80069bc <strstr+0x14>
 80069b8:	4610      	mov	r0, r2
 80069ba:	e005      	b.n	80069c8 <strstr+0x20>
 80069bc:	4294      	cmp	r4, r2
 80069be:	d108      	bne.n	80069d2 <strstr+0x2a>
 80069c0:	460d      	mov	r5, r1
 80069c2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80069c6:	b902      	cbnz	r2, 80069ca <strstr+0x22>
 80069c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069ca:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80069ce:	4297      	cmp	r7, r2
 80069d0:	d0f7      	beq.n	80069c2 <strstr+0x1a>
 80069d2:	4633      	mov	r3, r6
 80069d4:	e7ec      	b.n	80069b0 <strstr+0x8>

080069d6 <sulp>:
 80069d6:	b570      	push	{r4, r5, r6, lr}
 80069d8:	4604      	mov	r4, r0
 80069da:	460d      	mov	r5, r1
 80069dc:	ec45 4b10 	vmov	d0, r4, r5
 80069e0:	4616      	mov	r6, r2
 80069e2:	f002 fc23 	bl	800922c <__ulp>
 80069e6:	ec51 0b10 	vmov	r0, r1, d0
 80069ea:	b17e      	cbz	r6, 8006a0c <sulp+0x36>
 80069ec:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80069f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	dd09      	ble.n	8006a0c <sulp+0x36>
 80069f8:	051b      	lsls	r3, r3, #20
 80069fa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80069fe:	2400      	movs	r4, #0
 8006a00:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006a04:	4622      	mov	r2, r4
 8006a06:	462b      	mov	r3, r5
 8006a08:	f7f9 fdf6 	bl	80005f8 <__aeabi_dmul>
 8006a0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006a10 <_strtod_l>:
 8006a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a14:	b0a3      	sub	sp, #140	; 0x8c
 8006a16:	461f      	mov	r7, r3
 8006a18:	2300      	movs	r3, #0
 8006a1a:	931e      	str	r3, [sp, #120]	; 0x78
 8006a1c:	4ba4      	ldr	r3, [pc, #656]	; (8006cb0 <_strtod_l+0x2a0>)
 8006a1e:	9219      	str	r2, [sp, #100]	; 0x64
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	9307      	str	r3, [sp, #28]
 8006a24:	4604      	mov	r4, r0
 8006a26:	4618      	mov	r0, r3
 8006a28:	4688      	mov	r8, r1
 8006a2a:	f7f9 fc21 	bl	8000270 <strlen>
 8006a2e:	f04f 0a00 	mov.w	sl, #0
 8006a32:	4605      	mov	r5, r0
 8006a34:	f04f 0b00 	mov.w	fp, #0
 8006a38:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006a3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006a3e:	781a      	ldrb	r2, [r3, #0]
 8006a40:	2a2b      	cmp	r2, #43	; 0x2b
 8006a42:	d04c      	beq.n	8006ade <_strtod_l+0xce>
 8006a44:	d839      	bhi.n	8006aba <_strtod_l+0xaa>
 8006a46:	2a0d      	cmp	r2, #13
 8006a48:	d832      	bhi.n	8006ab0 <_strtod_l+0xa0>
 8006a4a:	2a08      	cmp	r2, #8
 8006a4c:	d832      	bhi.n	8006ab4 <_strtod_l+0xa4>
 8006a4e:	2a00      	cmp	r2, #0
 8006a50:	d03c      	beq.n	8006acc <_strtod_l+0xbc>
 8006a52:	2300      	movs	r3, #0
 8006a54:	930e      	str	r3, [sp, #56]	; 0x38
 8006a56:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006a58:	7833      	ldrb	r3, [r6, #0]
 8006a5a:	2b30      	cmp	r3, #48	; 0x30
 8006a5c:	f040 80b4 	bne.w	8006bc8 <_strtod_l+0x1b8>
 8006a60:	7873      	ldrb	r3, [r6, #1]
 8006a62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006a66:	2b58      	cmp	r3, #88	; 0x58
 8006a68:	d16c      	bne.n	8006b44 <_strtod_l+0x134>
 8006a6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a6c:	9301      	str	r3, [sp, #4]
 8006a6e:	ab1e      	add	r3, sp, #120	; 0x78
 8006a70:	9702      	str	r7, [sp, #8]
 8006a72:	9300      	str	r3, [sp, #0]
 8006a74:	4a8f      	ldr	r2, [pc, #572]	; (8006cb4 <_strtod_l+0x2a4>)
 8006a76:	ab1f      	add	r3, sp, #124	; 0x7c
 8006a78:	a91d      	add	r1, sp, #116	; 0x74
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	f001 fd40 	bl	8008500 <__gethex>
 8006a80:	f010 0707 	ands.w	r7, r0, #7
 8006a84:	4605      	mov	r5, r0
 8006a86:	d005      	beq.n	8006a94 <_strtod_l+0x84>
 8006a88:	2f06      	cmp	r7, #6
 8006a8a:	d12a      	bne.n	8006ae2 <_strtod_l+0xd2>
 8006a8c:	3601      	adds	r6, #1
 8006a8e:	2300      	movs	r3, #0
 8006a90:	961d      	str	r6, [sp, #116]	; 0x74
 8006a92:	930e      	str	r3, [sp, #56]	; 0x38
 8006a94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	f040 8596 	bne.w	80075c8 <_strtod_l+0xbb8>
 8006a9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a9e:	b1db      	cbz	r3, 8006ad8 <_strtod_l+0xc8>
 8006aa0:	4652      	mov	r2, sl
 8006aa2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006aa6:	ec43 2b10 	vmov	d0, r2, r3
 8006aaa:	b023      	add	sp, #140	; 0x8c
 8006aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ab0:	2a20      	cmp	r2, #32
 8006ab2:	d1ce      	bne.n	8006a52 <_strtod_l+0x42>
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	931d      	str	r3, [sp, #116]	; 0x74
 8006ab8:	e7c0      	b.n	8006a3c <_strtod_l+0x2c>
 8006aba:	2a2d      	cmp	r2, #45	; 0x2d
 8006abc:	d1c9      	bne.n	8006a52 <_strtod_l+0x42>
 8006abe:	2201      	movs	r2, #1
 8006ac0:	920e      	str	r2, [sp, #56]	; 0x38
 8006ac2:	1c5a      	adds	r2, r3, #1
 8006ac4:	921d      	str	r2, [sp, #116]	; 0x74
 8006ac6:	785b      	ldrb	r3, [r3, #1]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1c4      	bne.n	8006a56 <_strtod_l+0x46>
 8006acc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ace:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f040 8576 	bne.w	80075c4 <_strtod_l+0xbb4>
 8006ad8:	4652      	mov	r2, sl
 8006ada:	465b      	mov	r3, fp
 8006adc:	e7e3      	b.n	8006aa6 <_strtod_l+0x96>
 8006ade:	2200      	movs	r2, #0
 8006ae0:	e7ee      	b.n	8006ac0 <_strtod_l+0xb0>
 8006ae2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006ae4:	b13a      	cbz	r2, 8006af6 <_strtod_l+0xe6>
 8006ae6:	2135      	movs	r1, #53	; 0x35
 8006ae8:	a820      	add	r0, sp, #128	; 0x80
 8006aea:	f002 fcaa 	bl	8009442 <__copybits>
 8006aee:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006af0:	4620      	mov	r0, r4
 8006af2:	f002 f86f 	bl	8008bd4 <_Bfree>
 8006af6:	3f01      	subs	r7, #1
 8006af8:	2f05      	cmp	r7, #5
 8006afa:	d807      	bhi.n	8006b0c <_strtod_l+0xfc>
 8006afc:	e8df f007 	tbb	[pc, r7]
 8006b00:	1d180b0e 	.word	0x1d180b0e
 8006b04:	030e      	.short	0x030e
 8006b06:	f04f 0b00 	mov.w	fp, #0
 8006b0a:	46da      	mov	sl, fp
 8006b0c:	0728      	lsls	r0, r5, #28
 8006b0e:	d5c1      	bpl.n	8006a94 <_strtod_l+0x84>
 8006b10:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006b14:	e7be      	b.n	8006a94 <_strtod_l+0x84>
 8006b16:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8006b1a:	e7f7      	b.n	8006b0c <_strtod_l+0xfc>
 8006b1c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8006b20:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006b22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006b26:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006b2a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006b2e:	e7ed      	b.n	8006b0c <_strtod_l+0xfc>
 8006b30:	f8df b184 	ldr.w	fp, [pc, #388]	; 8006cb8 <_strtod_l+0x2a8>
 8006b34:	f04f 0a00 	mov.w	sl, #0
 8006b38:	e7e8      	b.n	8006b0c <_strtod_l+0xfc>
 8006b3a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006b3e:	f04f 3aff 	mov.w	sl, #4294967295
 8006b42:	e7e3      	b.n	8006b0c <_strtod_l+0xfc>
 8006b44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b46:	1c5a      	adds	r2, r3, #1
 8006b48:	921d      	str	r2, [sp, #116]	; 0x74
 8006b4a:	785b      	ldrb	r3, [r3, #1]
 8006b4c:	2b30      	cmp	r3, #48	; 0x30
 8006b4e:	d0f9      	beq.n	8006b44 <_strtod_l+0x134>
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d09f      	beq.n	8006a94 <_strtod_l+0x84>
 8006b54:	2301      	movs	r3, #1
 8006b56:	f04f 0900 	mov.w	r9, #0
 8006b5a:	9304      	str	r3, [sp, #16]
 8006b5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b5e:	930a      	str	r3, [sp, #40]	; 0x28
 8006b60:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006b64:	464f      	mov	r7, r9
 8006b66:	220a      	movs	r2, #10
 8006b68:	981d      	ldr	r0, [sp, #116]	; 0x74
 8006b6a:	7806      	ldrb	r6, [r0, #0]
 8006b6c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006b70:	b2d9      	uxtb	r1, r3
 8006b72:	2909      	cmp	r1, #9
 8006b74:	d92a      	bls.n	8006bcc <_strtod_l+0x1bc>
 8006b76:	9907      	ldr	r1, [sp, #28]
 8006b78:	462a      	mov	r2, r5
 8006b7a:	f002 fe19 	bl	80097b0 <strncmp>
 8006b7e:	b398      	cbz	r0, 8006be8 <_strtod_l+0x1d8>
 8006b80:	2000      	movs	r0, #0
 8006b82:	4633      	mov	r3, r6
 8006b84:	463d      	mov	r5, r7
 8006b86:	9007      	str	r0, [sp, #28]
 8006b88:	4602      	mov	r2, r0
 8006b8a:	2b65      	cmp	r3, #101	; 0x65
 8006b8c:	d001      	beq.n	8006b92 <_strtod_l+0x182>
 8006b8e:	2b45      	cmp	r3, #69	; 0x45
 8006b90:	d118      	bne.n	8006bc4 <_strtod_l+0x1b4>
 8006b92:	b91d      	cbnz	r5, 8006b9c <_strtod_l+0x18c>
 8006b94:	9b04      	ldr	r3, [sp, #16]
 8006b96:	4303      	orrs	r3, r0
 8006b98:	d098      	beq.n	8006acc <_strtod_l+0xbc>
 8006b9a:	2500      	movs	r5, #0
 8006b9c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8006ba0:	f108 0301 	add.w	r3, r8, #1
 8006ba4:	931d      	str	r3, [sp, #116]	; 0x74
 8006ba6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006baa:	2b2b      	cmp	r3, #43	; 0x2b
 8006bac:	d075      	beq.n	8006c9a <_strtod_l+0x28a>
 8006bae:	2b2d      	cmp	r3, #45	; 0x2d
 8006bb0:	d07b      	beq.n	8006caa <_strtod_l+0x29a>
 8006bb2:	f04f 0c00 	mov.w	ip, #0
 8006bb6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006bba:	2909      	cmp	r1, #9
 8006bbc:	f240 8082 	bls.w	8006cc4 <_strtod_l+0x2b4>
 8006bc0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006bc4:	2600      	movs	r6, #0
 8006bc6:	e09d      	b.n	8006d04 <_strtod_l+0x2f4>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	e7c4      	b.n	8006b56 <_strtod_l+0x146>
 8006bcc:	2f08      	cmp	r7, #8
 8006bce:	bfd8      	it	le
 8006bd0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006bd2:	f100 0001 	add.w	r0, r0, #1
 8006bd6:	bfda      	itte	le
 8006bd8:	fb02 3301 	mlale	r3, r2, r1, r3
 8006bdc:	9309      	strle	r3, [sp, #36]	; 0x24
 8006bde:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006be2:	3701      	adds	r7, #1
 8006be4:	901d      	str	r0, [sp, #116]	; 0x74
 8006be6:	e7bf      	b.n	8006b68 <_strtod_l+0x158>
 8006be8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006bea:	195a      	adds	r2, r3, r5
 8006bec:	921d      	str	r2, [sp, #116]	; 0x74
 8006bee:	5d5b      	ldrb	r3, [r3, r5]
 8006bf0:	2f00      	cmp	r7, #0
 8006bf2:	d037      	beq.n	8006c64 <_strtod_l+0x254>
 8006bf4:	9007      	str	r0, [sp, #28]
 8006bf6:	463d      	mov	r5, r7
 8006bf8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006bfc:	2a09      	cmp	r2, #9
 8006bfe:	d912      	bls.n	8006c26 <_strtod_l+0x216>
 8006c00:	2201      	movs	r2, #1
 8006c02:	e7c2      	b.n	8006b8a <_strtod_l+0x17a>
 8006c04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006c06:	1c5a      	adds	r2, r3, #1
 8006c08:	921d      	str	r2, [sp, #116]	; 0x74
 8006c0a:	785b      	ldrb	r3, [r3, #1]
 8006c0c:	3001      	adds	r0, #1
 8006c0e:	2b30      	cmp	r3, #48	; 0x30
 8006c10:	d0f8      	beq.n	8006c04 <_strtod_l+0x1f4>
 8006c12:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006c16:	2a08      	cmp	r2, #8
 8006c18:	f200 84db 	bhi.w	80075d2 <_strtod_l+0xbc2>
 8006c1c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006c1e:	9007      	str	r0, [sp, #28]
 8006c20:	2000      	movs	r0, #0
 8006c22:	920a      	str	r2, [sp, #40]	; 0x28
 8006c24:	4605      	mov	r5, r0
 8006c26:	3b30      	subs	r3, #48	; 0x30
 8006c28:	f100 0201 	add.w	r2, r0, #1
 8006c2c:	d014      	beq.n	8006c58 <_strtod_l+0x248>
 8006c2e:	9907      	ldr	r1, [sp, #28]
 8006c30:	4411      	add	r1, r2
 8006c32:	9107      	str	r1, [sp, #28]
 8006c34:	462a      	mov	r2, r5
 8006c36:	eb00 0e05 	add.w	lr, r0, r5
 8006c3a:	210a      	movs	r1, #10
 8006c3c:	4572      	cmp	r2, lr
 8006c3e:	d113      	bne.n	8006c68 <_strtod_l+0x258>
 8006c40:	182a      	adds	r2, r5, r0
 8006c42:	2a08      	cmp	r2, #8
 8006c44:	f105 0501 	add.w	r5, r5, #1
 8006c48:	4405      	add	r5, r0
 8006c4a:	dc1c      	bgt.n	8006c86 <_strtod_l+0x276>
 8006c4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c4e:	220a      	movs	r2, #10
 8006c50:	fb02 3301 	mla	r3, r2, r1, r3
 8006c54:	9309      	str	r3, [sp, #36]	; 0x24
 8006c56:	2200      	movs	r2, #0
 8006c58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006c5a:	1c59      	adds	r1, r3, #1
 8006c5c:	911d      	str	r1, [sp, #116]	; 0x74
 8006c5e:	785b      	ldrb	r3, [r3, #1]
 8006c60:	4610      	mov	r0, r2
 8006c62:	e7c9      	b.n	8006bf8 <_strtod_l+0x1e8>
 8006c64:	4638      	mov	r0, r7
 8006c66:	e7d2      	b.n	8006c0e <_strtod_l+0x1fe>
 8006c68:	2a08      	cmp	r2, #8
 8006c6a:	dc04      	bgt.n	8006c76 <_strtod_l+0x266>
 8006c6c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006c6e:	434e      	muls	r6, r1
 8006c70:	9609      	str	r6, [sp, #36]	; 0x24
 8006c72:	3201      	adds	r2, #1
 8006c74:	e7e2      	b.n	8006c3c <_strtod_l+0x22c>
 8006c76:	f102 0c01 	add.w	ip, r2, #1
 8006c7a:	f1bc 0f10 	cmp.w	ip, #16
 8006c7e:	bfd8      	it	le
 8006c80:	fb01 f909 	mulle.w	r9, r1, r9
 8006c84:	e7f5      	b.n	8006c72 <_strtod_l+0x262>
 8006c86:	2d10      	cmp	r5, #16
 8006c88:	bfdc      	itt	le
 8006c8a:	220a      	movle	r2, #10
 8006c8c:	fb02 3909 	mlale	r9, r2, r9, r3
 8006c90:	e7e1      	b.n	8006c56 <_strtod_l+0x246>
 8006c92:	2300      	movs	r3, #0
 8006c94:	9307      	str	r3, [sp, #28]
 8006c96:	2201      	movs	r2, #1
 8006c98:	e77c      	b.n	8006b94 <_strtod_l+0x184>
 8006c9a:	f04f 0c00 	mov.w	ip, #0
 8006c9e:	f108 0302 	add.w	r3, r8, #2
 8006ca2:	931d      	str	r3, [sp, #116]	; 0x74
 8006ca4:	f898 3002 	ldrb.w	r3, [r8, #2]
 8006ca8:	e785      	b.n	8006bb6 <_strtod_l+0x1a6>
 8006caa:	f04f 0c01 	mov.w	ip, #1
 8006cae:	e7f6      	b.n	8006c9e <_strtod_l+0x28e>
 8006cb0:	0800a708 	.word	0x0800a708
 8006cb4:	0800a4b8 	.word	0x0800a4b8
 8006cb8:	7ff00000 	.word	0x7ff00000
 8006cbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006cbe:	1c59      	adds	r1, r3, #1
 8006cc0:	911d      	str	r1, [sp, #116]	; 0x74
 8006cc2:	785b      	ldrb	r3, [r3, #1]
 8006cc4:	2b30      	cmp	r3, #48	; 0x30
 8006cc6:	d0f9      	beq.n	8006cbc <_strtod_l+0x2ac>
 8006cc8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8006ccc:	2908      	cmp	r1, #8
 8006cce:	f63f af79 	bhi.w	8006bc4 <_strtod_l+0x1b4>
 8006cd2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006cd6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006cd8:	9308      	str	r3, [sp, #32]
 8006cda:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006cdc:	1c59      	adds	r1, r3, #1
 8006cde:	911d      	str	r1, [sp, #116]	; 0x74
 8006ce0:	785b      	ldrb	r3, [r3, #1]
 8006ce2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8006ce6:	2e09      	cmp	r6, #9
 8006ce8:	d937      	bls.n	8006d5a <_strtod_l+0x34a>
 8006cea:	9e08      	ldr	r6, [sp, #32]
 8006cec:	1b89      	subs	r1, r1, r6
 8006cee:	2908      	cmp	r1, #8
 8006cf0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006cf4:	dc02      	bgt.n	8006cfc <_strtod_l+0x2ec>
 8006cf6:	4576      	cmp	r6, lr
 8006cf8:	bfa8      	it	ge
 8006cfa:	4676      	movge	r6, lr
 8006cfc:	f1bc 0f00 	cmp.w	ip, #0
 8006d00:	d000      	beq.n	8006d04 <_strtod_l+0x2f4>
 8006d02:	4276      	negs	r6, r6
 8006d04:	2d00      	cmp	r5, #0
 8006d06:	d14f      	bne.n	8006da8 <_strtod_l+0x398>
 8006d08:	9904      	ldr	r1, [sp, #16]
 8006d0a:	4301      	orrs	r1, r0
 8006d0c:	f47f aec2 	bne.w	8006a94 <_strtod_l+0x84>
 8006d10:	2a00      	cmp	r2, #0
 8006d12:	f47f aedb 	bne.w	8006acc <_strtod_l+0xbc>
 8006d16:	2b69      	cmp	r3, #105	; 0x69
 8006d18:	d027      	beq.n	8006d6a <_strtod_l+0x35a>
 8006d1a:	dc24      	bgt.n	8006d66 <_strtod_l+0x356>
 8006d1c:	2b49      	cmp	r3, #73	; 0x49
 8006d1e:	d024      	beq.n	8006d6a <_strtod_l+0x35a>
 8006d20:	2b4e      	cmp	r3, #78	; 0x4e
 8006d22:	f47f aed3 	bne.w	8006acc <_strtod_l+0xbc>
 8006d26:	499e      	ldr	r1, [pc, #632]	; (8006fa0 <_strtod_l+0x590>)
 8006d28:	a81d      	add	r0, sp, #116	; 0x74
 8006d2a:	f001 fe41 	bl	80089b0 <__match>
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	f43f aecc 	beq.w	8006acc <_strtod_l+0xbc>
 8006d34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	2b28      	cmp	r3, #40	; 0x28
 8006d3a:	d12d      	bne.n	8006d98 <_strtod_l+0x388>
 8006d3c:	4999      	ldr	r1, [pc, #612]	; (8006fa4 <_strtod_l+0x594>)
 8006d3e:	aa20      	add	r2, sp, #128	; 0x80
 8006d40:	a81d      	add	r0, sp, #116	; 0x74
 8006d42:	f001 fe49 	bl	80089d8 <__hexnan>
 8006d46:	2805      	cmp	r0, #5
 8006d48:	d126      	bne.n	8006d98 <_strtod_l+0x388>
 8006d4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d4c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8006d50:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006d54:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006d58:	e69c      	b.n	8006a94 <_strtod_l+0x84>
 8006d5a:	210a      	movs	r1, #10
 8006d5c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006d60:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006d64:	e7b9      	b.n	8006cda <_strtod_l+0x2ca>
 8006d66:	2b6e      	cmp	r3, #110	; 0x6e
 8006d68:	e7db      	b.n	8006d22 <_strtod_l+0x312>
 8006d6a:	498f      	ldr	r1, [pc, #572]	; (8006fa8 <_strtod_l+0x598>)
 8006d6c:	a81d      	add	r0, sp, #116	; 0x74
 8006d6e:	f001 fe1f 	bl	80089b0 <__match>
 8006d72:	2800      	cmp	r0, #0
 8006d74:	f43f aeaa 	beq.w	8006acc <_strtod_l+0xbc>
 8006d78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006d7a:	498c      	ldr	r1, [pc, #560]	; (8006fac <_strtod_l+0x59c>)
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	a81d      	add	r0, sp, #116	; 0x74
 8006d80:	931d      	str	r3, [sp, #116]	; 0x74
 8006d82:	f001 fe15 	bl	80089b0 <__match>
 8006d86:	b910      	cbnz	r0, 8006d8e <_strtod_l+0x37e>
 8006d88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	931d      	str	r3, [sp, #116]	; 0x74
 8006d8e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8006fbc <_strtod_l+0x5ac>
 8006d92:	f04f 0a00 	mov.w	sl, #0
 8006d96:	e67d      	b.n	8006a94 <_strtod_l+0x84>
 8006d98:	4885      	ldr	r0, [pc, #532]	; (8006fb0 <_strtod_l+0x5a0>)
 8006d9a:	f002 fd01 	bl	80097a0 <nan>
 8006d9e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006da2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006da6:	e675      	b.n	8006a94 <_strtod_l+0x84>
 8006da8:	9b07      	ldr	r3, [sp, #28]
 8006daa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dac:	1af3      	subs	r3, r6, r3
 8006dae:	2f00      	cmp	r7, #0
 8006db0:	bf08      	it	eq
 8006db2:	462f      	moveq	r7, r5
 8006db4:	2d10      	cmp	r5, #16
 8006db6:	9308      	str	r3, [sp, #32]
 8006db8:	46a8      	mov	r8, r5
 8006dba:	bfa8      	it	ge
 8006dbc:	f04f 0810 	movge.w	r8, #16
 8006dc0:	f7f9 fba0 	bl	8000504 <__aeabi_ui2d>
 8006dc4:	2d09      	cmp	r5, #9
 8006dc6:	4682      	mov	sl, r0
 8006dc8:	468b      	mov	fp, r1
 8006dca:	dd13      	ble.n	8006df4 <_strtod_l+0x3e4>
 8006dcc:	4b79      	ldr	r3, [pc, #484]	; (8006fb4 <_strtod_l+0x5a4>)
 8006dce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006dd2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006dd6:	f7f9 fc0f 	bl	80005f8 <__aeabi_dmul>
 8006dda:	4682      	mov	sl, r0
 8006ddc:	4648      	mov	r0, r9
 8006dde:	468b      	mov	fp, r1
 8006de0:	f7f9 fb90 	bl	8000504 <__aeabi_ui2d>
 8006de4:	4602      	mov	r2, r0
 8006de6:	460b      	mov	r3, r1
 8006de8:	4650      	mov	r0, sl
 8006dea:	4659      	mov	r1, fp
 8006dec:	f7f9 fa4e 	bl	800028c <__adddf3>
 8006df0:	4682      	mov	sl, r0
 8006df2:	468b      	mov	fp, r1
 8006df4:	2d0f      	cmp	r5, #15
 8006df6:	dc38      	bgt.n	8006e6a <_strtod_l+0x45a>
 8006df8:	9b08      	ldr	r3, [sp, #32]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f43f ae4a 	beq.w	8006a94 <_strtod_l+0x84>
 8006e00:	dd24      	ble.n	8006e4c <_strtod_l+0x43c>
 8006e02:	2b16      	cmp	r3, #22
 8006e04:	dc0b      	bgt.n	8006e1e <_strtod_l+0x40e>
 8006e06:	4d6b      	ldr	r5, [pc, #428]	; (8006fb4 <_strtod_l+0x5a4>)
 8006e08:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8006e0c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006e10:	4652      	mov	r2, sl
 8006e12:	465b      	mov	r3, fp
 8006e14:	f7f9 fbf0 	bl	80005f8 <__aeabi_dmul>
 8006e18:	4682      	mov	sl, r0
 8006e1a:	468b      	mov	fp, r1
 8006e1c:	e63a      	b.n	8006a94 <_strtod_l+0x84>
 8006e1e:	9a08      	ldr	r2, [sp, #32]
 8006e20:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006e24:	4293      	cmp	r3, r2
 8006e26:	db20      	blt.n	8006e6a <_strtod_l+0x45a>
 8006e28:	4c62      	ldr	r4, [pc, #392]	; (8006fb4 <_strtod_l+0x5a4>)
 8006e2a:	f1c5 050f 	rsb	r5, r5, #15
 8006e2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006e32:	4652      	mov	r2, sl
 8006e34:	465b      	mov	r3, fp
 8006e36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e3a:	f7f9 fbdd 	bl	80005f8 <__aeabi_dmul>
 8006e3e:	9b08      	ldr	r3, [sp, #32]
 8006e40:	1b5d      	subs	r5, r3, r5
 8006e42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006e46:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006e4a:	e7e3      	b.n	8006e14 <_strtod_l+0x404>
 8006e4c:	9b08      	ldr	r3, [sp, #32]
 8006e4e:	3316      	adds	r3, #22
 8006e50:	db0b      	blt.n	8006e6a <_strtod_l+0x45a>
 8006e52:	9b07      	ldr	r3, [sp, #28]
 8006e54:	4a57      	ldr	r2, [pc, #348]	; (8006fb4 <_strtod_l+0x5a4>)
 8006e56:	1b9e      	subs	r6, r3, r6
 8006e58:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8006e5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e60:	4650      	mov	r0, sl
 8006e62:	4659      	mov	r1, fp
 8006e64:	f7f9 fcf2 	bl	800084c <__aeabi_ddiv>
 8006e68:	e7d6      	b.n	8006e18 <_strtod_l+0x408>
 8006e6a:	9b08      	ldr	r3, [sp, #32]
 8006e6c:	eba5 0808 	sub.w	r8, r5, r8
 8006e70:	4498      	add	r8, r3
 8006e72:	f1b8 0f00 	cmp.w	r8, #0
 8006e76:	dd71      	ble.n	8006f5c <_strtod_l+0x54c>
 8006e78:	f018 030f 	ands.w	r3, r8, #15
 8006e7c:	d00a      	beq.n	8006e94 <_strtod_l+0x484>
 8006e7e:	494d      	ldr	r1, [pc, #308]	; (8006fb4 <_strtod_l+0x5a4>)
 8006e80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006e84:	4652      	mov	r2, sl
 8006e86:	465b      	mov	r3, fp
 8006e88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e8c:	f7f9 fbb4 	bl	80005f8 <__aeabi_dmul>
 8006e90:	4682      	mov	sl, r0
 8006e92:	468b      	mov	fp, r1
 8006e94:	f038 080f 	bics.w	r8, r8, #15
 8006e98:	d04d      	beq.n	8006f36 <_strtod_l+0x526>
 8006e9a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006e9e:	dd22      	ble.n	8006ee6 <_strtod_l+0x4d6>
 8006ea0:	2500      	movs	r5, #0
 8006ea2:	462e      	mov	r6, r5
 8006ea4:	9509      	str	r5, [sp, #36]	; 0x24
 8006ea6:	9507      	str	r5, [sp, #28]
 8006ea8:	2322      	movs	r3, #34	; 0x22
 8006eaa:	f8df b110 	ldr.w	fp, [pc, #272]	; 8006fbc <_strtod_l+0x5ac>
 8006eae:	6023      	str	r3, [r4, #0]
 8006eb0:	f04f 0a00 	mov.w	sl, #0
 8006eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f43f adec 	beq.w	8006a94 <_strtod_l+0x84>
 8006ebc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	f001 fe88 	bl	8008bd4 <_Bfree>
 8006ec4:	9907      	ldr	r1, [sp, #28]
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	f001 fe84 	bl	8008bd4 <_Bfree>
 8006ecc:	4631      	mov	r1, r6
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f001 fe80 	bl	8008bd4 <_Bfree>
 8006ed4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	f001 fe7c 	bl	8008bd4 <_Bfree>
 8006edc:	4629      	mov	r1, r5
 8006ede:	4620      	mov	r0, r4
 8006ee0:	f001 fe78 	bl	8008bd4 <_Bfree>
 8006ee4:	e5d6      	b.n	8006a94 <_strtod_l+0x84>
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006eec:	4650      	mov	r0, sl
 8006eee:	4659      	mov	r1, fp
 8006ef0:	4699      	mov	r9, r3
 8006ef2:	f1b8 0f01 	cmp.w	r8, #1
 8006ef6:	dc21      	bgt.n	8006f3c <_strtod_l+0x52c>
 8006ef8:	b10b      	cbz	r3, 8006efe <_strtod_l+0x4ee>
 8006efa:	4682      	mov	sl, r0
 8006efc:	468b      	mov	fp, r1
 8006efe:	4b2e      	ldr	r3, [pc, #184]	; (8006fb8 <_strtod_l+0x5a8>)
 8006f00:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006f04:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006f08:	4652      	mov	r2, sl
 8006f0a:	465b      	mov	r3, fp
 8006f0c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006f10:	f7f9 fb72 	bl	80005f8 <__aeabi_dmul>
 8006f14:	4b29      	ldr	r3, [pc, #164]	; (8006fbc <_strtod_l+0x5ac>)
 8006f16:	460a      	mov	r2, r1
 8006f18:	400b      	ands	r3, r1
 8006f1a:	4929      	ldr	r1, [pc, #164]	; (8006fc0 <_strtod_l+0x5b0>)
 8006f1c:	428b      	cmp	r3, r1
 8006f1e:	4682      	mov	sl, r0
 8006f20:	d8be      	bhi.n	8006ea0 <_strtod_l+0x490>
 8006f22:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006f26:	428b      	cmp	r3, r1
 8006f28:	bf86      	itte	hi
 8006f2a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006fc4 <_strtod_l+0x5b4>
 8006f2e:	f04f 3aff 	movhi.w	sl, #4294967295
 8006f32:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006f36:	2300      	movs	r3, #0
 8006f38:	9304      	str	r3, [sp, #16]
 8006f3a:	e081      	b.n	8007040 <_strtod_l+0x630>
 8006f3c:	f018 0f01 	tst.w	r8, #1
 8006f40:	d007      	beq.n	8006f52 <_strtod_l+0x542>
 8006f42:	4b1d      	ldr	r3, [pc, #116]	; (8006fb8 <_strtod_l+0x5a8>)
 8006f44:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4c:	f7f9 fb54 	bl	80005f8 <__aeabi_dmul>
 8006f50:	2301      	movs	r3, #1
 8006f52:	f109 0901 	add.w	r9, r9, #1
 8006f56:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006f5a:	e7ca      	b.n	8006ef2 <_strtod_l+0x4e2>
 8006f5c:	d0eb      	beq.n	8006f36 <_strtod_l+0x526>
 8006f5e:	f1c8 0800 	rsb	r8, r8, #0
 8006f62:	f018 020f 	ands.w	r2, r8, #15
 8006f66:	d00a      	beq.n	8006f7e <_strtod_l+0x56e>
 8006f68:	4b12      	ldr	r3, [pc, #72]	; (8006fb4 <_strtod_l+0x5a4>)
 8006f6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f6e:	4650      	mov	r0, sl
 8006f70:	4659      	mov	r1, fp
 8006f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f76:	f7f9 fc69 	bl	800084c <__aeabi_ddiv>
 8006f7a:	4682      	mov	sl, r0
 8006f7c:	468b      	mov	fp, r1
 8006f7e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006f82:	d0d8      	beq.n	8006f36 <_strtod_l+0x526>
 8006f84:	f1b8 0f1f 	cmp.w	r8, #31
 8006f88:	dd1e      	ble.n	8006fc8 <_strtod_l+0x5b8>
 8006f8a:	2500      	movs	r5, #0
 8006f8c:	462e      	mov	r6, r5
 8006f8e:	9509      	str	r5, [sp, #36]	; 0x24
 8006f90:	9507      	str	r5, [sp, #28]
 8006f92:	2322      	movs	r3, #34	; 0x22
 8006f94:	f04f 0a00 	mov.w	sl, #0
 8006f98:	f04f 0b00 	mov.w	fp, #0
 8006f9c:	6023      	str	r3, [r4, #0]
 8006f9e:	e789      	b.n	8006eb4 <_strtod_l+0x4a4>
 8006fa0:	0800a489 	.word	0x0800a489
 8006fa4:	0800a4cc 	.word	0x0800a4cc
 8006fa8:	0800a481 	.word	0x0800a481
 8006fac:	0800a60c 	.word	0x0800a60c
 8006fb0:	0800a8c8 	.word	0x0800a8c8
 8006fb4:	0800a7a8 	.word	0x0800a7a8
 8006fb8:	0800a780 	.word	0x0800a780
 8006fbc:	7ff00000 	.word	0x7ff00000
 8006fc0:	7ca00000 	.word	0x7ca00000
 8006fc4:	7fefffff 	.word	0x7fefffff
 8006fc8:	f018 0310 	ands.w	r3, r8, #16
 8006fcc:	bf18      	it	ne
 8006fce:	236a      	movne	r3, #106	; 0x6a
 8006fd0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8007388 <_strtod_l+0x978>
 8006fd4:	9304      	str	r3, [sp, #16]
 8006fd6:	4650      	mov	r0, sl
 8006fd8:	4659      	mov	r1, fp
 8006fda:	2300      	movs	r3, #0
 8006fdc:	f018 0f01 	tst.w	r8, #1
 8006fe0:	d004      	beq.n	8006fec <_strtod_l+0x5dc>
 8006fe2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006fe6:	f7f9 fb07 	bl	80005f8 <__aeabi_dmul>
 8006fea:	2301      	movs	r3, #1
 8006fec:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006ff0:	f109 0908 	add.w	r9, r9, #8
 8006ff4:	d1f2      	bne.n	8006fdc <_strtod_l+0x5cc>
 8006ff6:	b10b      	cbz	r3, 8006ffc <_strtod_l+0x5ec>
 8006ff8:	4682      	mov	sl, r0
 8006ffa:	468b      	mov	fp, r1
 8006ffc:	9b04      	ldr	r3, [sp, #16]
 8006ffe:	b1bb      	cbz	r3, 8007030 <_strtod_l+0x620>
 8007000:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8007004:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007008:	2b00      	cmp	r3, #0
 800700a:	4659      	mov	r1, fp
 800700c:	dd10      	ble.n	8007030 <_strtod_l+0x620>
 800700e:	2b1f      	cmp	r3, #31
 8007010:	f340 8128 	ble.w	8007264 <_strtod_l+0x854>
 8007014:	2b34      	cmp	r3, #52	; 0x34
 8007016:	bfde      	ittt	le
 8007018:	3b20      	suble	r3, #32
 800701a:	f04f 32ff 	movle.w	r2, #4294967295
 800701e:	fa02 f303 	lslle.w	r3, r2, r3
 8007022:	f04f 0a00 	mov.w	sl, #0
 8007026:	bfcc      	ite	gt
 8007028:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800702c:	ea03 0b01 	andle.w	fp, r3, r1
 8007030:	2200      	movs	r2, #0
 8007032:	2300      	movs	r3, #0
 8007034:	4650      	mov	r0, sl
 8007036:	4659      	mov	r1, fp
 8007038:	f7f9 fd46 	bl	8000ac8 <__aeabi_dcmpeq>
 800703c:	2800      	cmp	r0, #0
 800703e:	d1a4      	bne.n	8006f8a <_strtod_l+0x57a>
 8007040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007046:	462b      	mov	r3, r5
 8007048:	463a      	mov	r2, r7
 800704a:	4620      	mov	r0, r4
 800704c:	f001 fe2e 	bl	8008cac <__s2b>
 8007050:	9009      	str	r0, [sp, #36]	; 0x24
 8007052:	2800      	cmp	r0, #0
 8007054:	f43f af24 	beq.w	8006ea0 <_strtod_l+0x490>
 8007058:	9b07      	ldr	r3, [sp, #28]
 800705a:	1b9e      	subs	r6, r3, r6
 800705c:	9b08      	ldr	r3, [sp, #32]
 800705e:	2b00      	cmp	r3, #0
 8007060:	bfb4      	ite	lt
 8007062:	4633      	movlt	r3, r6
 8007064:	2300      	movge	r3, #0
 8007066:	9310      	str	r3, [sp, #64]	; 0x40
 8007068:	9b08      	ldr	r3, [sp, #32]
 800706a:	2500      	movs	r5, #0
 800706c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007070:	9318      	str	r3, [sp, #96]	; 0x60
 8007072:	462e      	mov	r6, r5
 8007074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007076:	4620      	mov	r0, r4
 8007078:	6859      	ldr	r1, [r3, #4]
 800707a:	f001 fd6b 	bl	8008b54 <_Balloc>
 800707e:	9007      	str	r0, [sp, #28]
 8007080:	2800      	cmp	r0, #0
 8007082:	f43f af11 	beq.w	8006ea8 <_strtod_l+0x498>
 8007086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007088:	691a      	ldr	r2, [r3, #16]
 800708a:	3202      	adds	r2, #2
 800708c:	f103 010c 	add.w	r1, r3, #12
 8007090:	0092      	lsls	r2, r2, #2
 8007092:	300c      	adds	r0, #12
 8007094:	f7fe fcba 	bl	8005a0c <memcpy>
 8007098:	ec4b ab10 	vmov	d0, sl, fp
 800709c:	aa20      	add	r2, sp, #128	; 0x80
 800709e:	a91f      	add	r1, sp, #124	; 0x7c
 80070a0:	4620      	mov	r0, r4
 80070a2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80070a6:	f002 f93d 	bl	8009324 <__d2b>
 80070aa:	901e      	str	r0, [sp, #120]	; 0x78
 80070ac:	2800      	cmp	r0, #0
 80070ae:	f43f aefb 	beq.w	8006ea8 <_strtod_l+0x498>
 80070b2:	2101      	movs	r1, #1
 80070b4:	4620      	mov	r0, r4
 80070b6:	f001 fe93 	bl	8008de0 <__i2b>
 80070ba:	4606      	mov	r6, r0
 80070bc:	2800      	cmp	r0, #0
 80070be:	f43f aef3 	beq.w	8006ea8 <_strtod_l+0x498>
 80070c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80070c4:	9904      	ldr	r1, [sp, #16]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	bfab      	itete	ge
 80070ca:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80070cc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80070ce:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80070d0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80070d4:	bfac      	ite	ge
 80070d6:	eb03 0902 	addge.w	r9, r3, r2
 80070da:	1ad7      	sublt	r7, r2, r3
 80070dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80070de:	eba3 0801 	sub.w	r8, r3, r1
 80070e2:	4490      	add	r8, r2
 80070e4:	4ba3      	ldr	r3, [pc, #652]	; (8007374 <_strtod_l+0x964>)
 80070e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80070ea:	4598      	cmp	r8, r3
 80070ec:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80070f0:	f280 80cc 	bge.w	800728c <_strtod_l+0x87c>
 80070f4:	eba3 0308 	sub.w	r3, r3, r8
 80070f8:	2b1f      	cmp	r3, #31
 80070fa:	eba2 0203 	sub.w	r2, r2, r3
 80070fe:	f04f 0101 	mov.w	r1, #1
 8007102:	f300 80b6 	bgt.w	8007272 <_strtod_l+0x862>
 8007106:	fa01 f303 	lsl.w	r3, r1, r3
 800710a:	9311      	str	r3, [sp, #68]	; 0x44
 800710c:	2300      	movs	r3, #0
 800710e:	930c      	str	r3, [sp, #48]	; 0x30
 8007110:	eb09 0802 	add.w	r8, r9, r2
 8007114:	9b04      	ldr	r3, [sp, #16]
 8007116:	45c1      	cmp	r9, r8
 8007118:	4417      	add	r7, r2
 800711a:	441f      	add	r7, r3
 800711c:	464b      	mov	r3, r9
 800711e:	bfa8      	it	ge
 8007120:	4643      	movge	r3, r8
 8007122:	42bb      	cmp	r3, r7
 8007124:	bfa8      	it	ge
 8007126:	463b      	movge	r3, r7
 8007128:	2b00      	cmp	r3, #0
 800712a:	bfc2      	ittt	gt
 800712c:	eba8 0803 	subgt.w	r8, r8, r3
 8007130:	1aff      	subgt	r7, r7, r3
 8007132:	eba9 0903 	subgt.w	r9, r9, r3
 8007136:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007138:	2b00      	cmp	r3, #0
 800713a:	dd17      	ble.n	800716c <_strtod_l+0x75c>
 800713c:	4631      	mov	r1, r6
 800713e:	461a      	mov	r2, r3
 8007140:	4620      	mov	r0, r4
 8007142:	f001 ff09 	bl	8008f58 <__pow5mult>
 8007146:	4606      	mov	r6, r0
 8007148:	2800      	cmp	r0, #0
 800714a:	f43f aead 	beq.w	8006ea8 <_strtod_l+0x498>
 800714e:	4601      	mov	r1, r0
 8007150:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007152:	4620      	mov	r0, r4
 8007154:	f001 fe5a 	bl	8008e0c <__multiply>
 8007158:	900f      	str	r0, [sp, #60]	; 0x3c
 800715a:	2800      	cmp	r0, #0
 800715c:	f43f aea4 	beq.w	8006ea8 <_strtod_l+0x498>
 8007160:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007162:	4620      	mov	r0, r4
 8007164:	f001 fd36 	bl	8008bd4 <_Bfree>
 8007168:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800716a:	931e      	str	r3, [sp, #120]	; 0x78
 800716c:	f1b8 0f00 	cmp.w	r8, #0
 8007170:	f300 8091 	bgt.w	8007296 <_strtod_l+0x886>
 8007174:	9b08      	ldr	r3, [sp, #32]
 8007176:	2b00      	cmp	r3, #0
 8007178:	dd08      	ble.n	800718c <_strtod_l+0x77c>
 800717a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800717c:	9907      	ldr	r1, [sp, #28]
 800717e:	4620      	mov	r0, r4
 8007180:	f001 feea 	bl	8008f58 <__pow5mult>
 8007184:	9007      	str	r0, [sp, #28]
 8007186:	2800      	cmp	r0, #0
 8007188:	f43f ae8e 	beq.w	8006ea8 <_strtod_l+0x498>
 800718c:	2f00      	cmp	r7, #0
 800718e:	dd08      	ble.n	80071a2 <_strtod_l+0x792>
 8007190:	9907      	ldr	r1, [sp, #28]
 8007192:	463a      	mov	r2, r7
 8007194:	4620      	mov	r0, r4
 8007196:	f001 ff39 	bl	800900c <__lshift>
 800719a:	9007      	str	r0, [sp, #28]
 800719c:	2800      	cmp	r0, #0
 800719e:	f43f ae83 	beq.w	8006ea8 <_strtod_l+0x498>
 80071a2:	f1b9 0f00 	cmp.w	r9, #0
 80071a6:	dd08      	ble.n	80071ba <_strtod_l+0x7aa>
 80071a8:	4631      	mov	r1, r6
 80071aa:	464a      	mov	r2, r9
 80071ac:	4620      	mov	r0, r4
 80071ae:	f001 ff2d 	bl	800900c <__lshift>
 80071b2:	4606      	mov	r6, r0
 80071b4:	2800      	cmp	r0, #0
 80071b6:	f43f ae77 	beq.w	8006ea8 <_strtod_l+0x498>
 80071ba:	9a07      	ldr	r2, [sp, #28]
 80071bc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80071be:	4620      	mov	r0, r4
 80071c0:	f001 ffac 	bl	800911c <__mdiff>
 80071c4:	4605      	mov	r5, r0
 80071c6:	2800      	cmp	r0, #0
 80071c8:	f43f ae6e 	beq.w	8006ea8 <_strtod_l+0x498>
 80071cc:	68c3      	ldr	r3, [r0, #12]
 80071ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80071d0:	2300      	movs	r3, #0
 80071d2:	60c3      	str	r3, [r0, #12]
 80071d4:	4631      	mov	r1, r6
 80071d6:	f001 ff85 	bl	80090e4 <__mcmp>
 80071da:	2800      	cmp	r0, #0
 80071dc:	da65      	bge.n	80072aa <_strtod_l+0x89a>
 80071de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071e0:	ea53 030a 	orrs.w	r3, r3, sl
 80071e4:	f040 8087 	bne.w	80072f6 <_strtod_l+0x8e6>
 80071e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f040 8082 	bne.w	80072f6 <_strtod_l+0x8e6>
 80071f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80071f6:	0d1b      	lsrs	r3, r3, #20
 80071f8:	051b      	lsls	r3, r3, #20
 80071fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80071fe:	d97a      	bls.n	80072f6 <_strtod_l+0x8e6>
 8007200:	696b      	ldr	r3, [r5, #20]
 8007202:	b913      	cbnz	r3, 800720a <_strtod_l+0x7fa>
 8007204:	692b      	ldr	r3, [r5, #16]
 8007206:	2b01      	cmp	r3, #1
 8007208:	dd75      	ble.n	80072f6 <_strtod_l+0x8e6>
 800720a:	4629      	mov	r1, r5
 800720c:	2201      	movs	r2, #1
 800720e:	4620      	mov	r0, r4
 8007210:	f001 fefc 	bl	800900c <__lshift>
 8007214:	4631      	mov	r1, r6
 8007216:	4605      	mov	r5, r0
 8007218:	f001 ff64 	bl	80090e4 <__mcmp>
 800721c:	2800      	cmp	r0, #0
 800721e:	dd6a      	ble.n	80072f6 <_strtod_l+0x8e6>
 8007220:	9904      	ldr	r1, [sp, #16]
 8007222:	4a55      	ldr	r2, [pc, #340]	; (8007378 <_strtod_l+0x968>)
 8007224:	465b      	mov	r3, fp
 8007226:	2900      	cmp	r1, #0
 8007228:	f000 8085 	beq.w	8007336 <_strtod_l+0x926>
 800722c:	ea02 010b 	and.w	r1, r2, fp
 8007230:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007234:	dc7f      	bgt.n	8007336 <_strtod_l+0x926>
 8007236:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800723a:	f77f aeaa 	ble.w	8006f92 <_strtod_l+0x582>
 800723e:	4a4f      	ldr	r2, [pc, #316]	; (800737c <_strtod_l+0x96c>)
 8007240:	2300      	movs	r3, #0
 8007242:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8007246:	4650      	mov	r0, sl
 8007248:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800724c:	4659      	mov	r1, fp
 800724e:	f7f9 f9d3 	bl	80005f8 <__aeabi_dmul>
 8007252:	460b      	mov	r3, r1
 8007254:	4303      	orrs	r3, r0
 8007256:	bf08      	it	eq
 8007258:	2322      	moveq	r3, #34	; 0x22
 800725a:	4682      	mov	sl, r0
 800725c:	468b      	mov	fp, r1
 800725e:	bf08      	it	eq
 8007260:	6023      	streq	r3, [r4, #0]
 8007262:	e62b      	b.n	8006ebc <_strtod_l+0x4ac>
 8007264:	f04f 32ff 	mov.w	r2, #4294967295
 8007268:	fa02 f303 	lsl.w	r3, r2, r3
 800726c:	ea03 0a0a 	and.w	sl, r3, sl
 8007270:	e6de      	b.n	8007030 <_strtod_l+0x620>
 8007272:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007276:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800727a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800727e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007282:	fa01 f308 	lsl.w	r3, r1, r8
 8007286:	930c      	str	r3, [sp, #48]	; 0x30
 8007288:	9111      	str	r1, [sp, #68]	; 0x44
 800728a:	e741      	b.n	8007110 <_strtod_l+0x700>
 800728c:	2300      	movs	r3, #0
 800728e:	930c      	str	r3, [sp, #48]	; 0x30
 8007290:	2301      	movs	r3, #1
 8007292:	9311      	str	r3, [sp, #68]	; 0x44
 8007294:	e73c      	b.n	8007110 <_strtod_l+0x700>
 8007296:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007298:	4642      	mov	r2, r8
 800729a:	4620      	mov	r0, r4
 800729c:	f001 feb6 	bl	800900c <__lshift>
 80072a0:	901e      	str	r0, [sp, #120]	; 0x78
 80072a2:	2800      	cmp	r0, #0
 80072a4:	f47f af66 	bne.w	8007174 <_strtod_l+0x764>
 80072a8:	e5fe      	b.n	8006ea8 <_strtod_l+0x498>
 80072aa:	465f      	mov	r7, fp
 80072ac:	d16e      	bne.n	800738c <_strtod_l+0x97c>
 80072ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80072b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80072b4:	b342      	cbz	r2, 8007308 <_strtod_l+0x8f8>
 80072b6:	4a32      	ldr	r2, [pc, #200]	; (8007380 <_strtod_l+0x970>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d128      	bne.n	800730e <_strtod_l+0x8fe>
 80072bc:	9b04      	ldr	r3, [sp, #16]
 80072be:	4650      	mov	r0, sl
 80072c0:	b1eb      	cbz	r3, 80072fe <_strtod_l+0x8ee>
 80072c2:	4a2d      	ldr	r2, [pc, #180]	; (8007378 <_strtod_l+0x968>)
 80072c4:	403a      	ands	r2, r7
 80072c6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80072ca:	f04f 31ff 	mov.w	r1, #4294967295
 80072ce:	d819      	bhi.n	8007304 <_strtod_l+0x8f4>
 80072d0:	0d12      	lsrs	r2, r2, #20
 80072d2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80072d6:	fa01 f303 	lsl.w	r3, r1, r3
 80072da:	4298      	cmp	r0, r3
 80072dc:	d117      	bne.n	800730e <_strtod_l+0x8fe>
 80072de:	4b29      	ldr	r3, [pc, #164]	; (8007384 <_strtod_l+0x974>)
 80072e0:	429f      	cmp	r7, r3
 80072e2:	d102      	bne.n	80072ea <_strtod_l+0x8da>
 80072e4:	3001      	adds	r0, #1
 80072e6:	f43f addf 	beq.w	8006ea8 <_strtod_l+0x498>
 80072ea:	4b23      	ldr	r3, [pc, #140]	; (8007378 <_strtod_l+0x968>)
 80072ec:	403b      	ands	r3, r7
 80072ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80072f2:	f04f 0a00 	mov.w	sl, #0
 80072f6:	9b04      	ldr	r3, [sp, #16]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1a0      	bne.n	800723e <_strtod_l+0x82e>
 80072fc:	e5de      	b.n	8006ebc <_strtod_l+0x4ac>
 80072fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007302:	e7ea      	b.n	80072da <_strtod_l+0x8ca>
 8007304:	460b      	mov	r3, r1
 8007306:	e7e8      	b.n	80072da <_strtod_l+0x8ca>
 8007308:	ea53 030a 	orrs.w	r3, r3, sl
 800730c:	d088      	beq.n	8007220 <_strtod_l+0x810>
 800730e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007310:	b1db      	cbz	r3, 800734a <_strtod_l+0x93a>
 8007312:	423b      	tst	r3, r7
 8007314:	d0ef      	beq.n	80072f6 <_strtod_l+0x8e6>
 8007316:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007318:	9a04      	ldr	r2, [sp, #16]
 800731a:	4650      	mov	r0, sl
 800731c:	4659      	mov	r1, fp
 800731e:	b1c3      	cbz	r3, 8007352 <_strtod_l+0x942>
 8007320:	f7ff fb59 	bl	80069d6 <sulp>
 8007324:	4602      	mov	r2, r0
 8007326:	460b      	mov	r3, r1
 8007328:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800732c:	f7f8 ffae 	bl	800028c <__adddf3>
 8007330:	4682      	mov	sl, r0
 8007332:	468b      	mov	fp, r1
 8007334:	e7df      	b.n	80072f6 <_strtod_l+0x8e6>
 8007336:	4013      	ands	r3, r2
 8007338:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800733c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007340:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007344:	f04f 3aff 	mov.w	sl, #4294967295
 8007348:	e7d5      	b.n	80072f6 <_strtod_l+0x8e6>
 800734a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800734c:	ea13 0f0a 	tst.w	r3, sl
 8007350:	e7e0      	b.n	8007314 <_strtod_l+0x904>
 8007352:	f7ff fb40 	bl	80069d6 <sulp>
 8007356:	4602      	mov	r2, r0
 8007358:	460b      	mov	r3, r1
 800735a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800735e:	f7f8 ff93 	bl	8000288 <__aeabi_dsub>
 8007362:	2200      	movs	r2, #0
 8007364:	2300      	movs	r3, #0
 8007366:	4682      	mov	sl, r0
 8007368:	468b      	mov	fp, r1
 800736a:	f7f9 fbad 	bl	8000ac8 <__aeabi_dcmpeq>
 800736e:	2800      	cmp	r0, #0
 8007370:	d0c1      	beq.n	80072f6 <_strtod_l+0x8e6>
 8007372:	e60e      	b.n	8006f92 <_strtod_l+0x582>
 8007374:	fffffc02 	.word	0xfffffc02
 8007378:	7ff00000 	.word	0x7ff00000
 800737c:	39500000 	.word	0x39500000
 8007380:	000fffff 	.word	0x000fffff
 8007384:	7fefffff 	.word	0x7fefffff
 8007388:	0800a4e0 	.word	0x0800a4e0
 800738c:	4631      	mov	r1, r6
 800738e:	4628      	mov	r0, r5
 8007390:	f002 f824 	bl	80093dc <__ratio>
 8007394:	ec59 8b10 	vmov	r8, r9, d0
 8007398:	ee10 0a10 	vmov	r0, s0
 800739c:	2200      	movs	r2, #0
 800739e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80073a2:	4649      	mov	r1, r9
 80073a4:	f7f9 fba4 	bl	8000af0 <__aeabi_dcmple>
 80073a8:	2800      	cmp	r0, #0
 80073aa:	d07c      	beq.n	80074a6 <_strtod_l+0xa96>
 80073ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d04c      	beq.n	800744c <_strtod_l+0xa3c>
 80073b2:	4b95      	ldr	r3, [pc, #596]	; (8007608 <_strtod_l+0xbf8>)
 80073b4:	2200      	movs	r2, #0
 80073b6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80073ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007608 <_strtod_l+0xbf8>
 80073be:	f04f 0800 	mov.w	r8, #0
 80073c2:	4b92      	ldr	r3, [pc, #584]	; (800760c <_strtod_l+0xbfc>)
 80073c4:	403b      	ands	r3, r7
 80073c6:	9311      	str	r3, [sp, #68]	; 0x44
 80073c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80073ca:	4b91      	ldr	r3, [pc, #580]	; (8007610 <_strtod_l+0xc00>)
 80073cc:	429a      	cmp	r2, r3
 80073ce:	f040 80b2 	bne.w	8007536 <_strtod_l+0xb26>
 80073d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80073d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80073da:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80073de:	ec4b ab10 	vmov	d0, sl, fp
 80073e2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80073e6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80073ea:	f001 ff1f 	bl	800922c <__ulp>
 80073ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80073f2:	ec53 2b10 	vmov	r2, r3, d0
 80073f6:	f7f9 f8ff 	bl	80005f8 <__aeabi_dmul>
 80073fa:	4652      	mov	r2, sl
 80073fc:	465b      	mov	r3, fp
 80073fe:	f7f8 ff45 	bl	800028c <__adddf3>
 8007402:	460b      	mov	r3, r1
 8007404:	4981      	ldr	r1, [pc, #516]	; (800760c <_strtod_l+0xbfc>)
 8007406:	4a83      	ldr	r2, [pc, #524]	; (8007614 <_strtod_l+0xc04>)
 8007408:	4019      	ands	r1, r3
 800740a:	4291      	cmp	r1, r2
 800740c:	4682      	mov	sl, r0
 800740e:	d95e      	bls.n	80074ce <_strtod_l+0xabe>
 8007410:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007412:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007416:	4293      	cmp	r3, r2
 8007418:	d103      	bne.n	8007422 <_strtod_l+0xa12>
 800741a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800741c:	3301      	adds	r3, #1
 800741e:	f43f ad43 	beq.w	8006ea8 <_strtod_l+0x498>
 8007422:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8007620 <_strtod_l+0xc10>
 8007426:	f04f 3aff 	mov.w	sl, #4294967295
 800742a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800742c:	4620      	mov	r0, r4
 800742e:	f001 fbd1 	bl	8008bd4 <_Bfree>
 8007432:	9907      	ldr	r1, [sp, #28]
 8007434:	4620      	mov	r0, r4
 8007436:	f001 fbcd 	bl	8008bd4 <_Bfree>
 800743a:	4631      	mov	r1, r6
 800743c:	4620      	mov	r0, r4
 800743e:	f001 fbc9 	bl	8008bd4 <_Bfree>
 8007442:	4629      	mov	r1, r5
 8007444:	4620      	mov	r0, r4
 8007446:	f001 fbc5 	bl	8008bd4 <_Bfree>
 800744a:	e613      	b.n	8007074 <_strtod_l+0x664>
 800744c:	f1ba 0f00 	cmp.w	sl, #0
 8007450:	d11b      	bne.n	800748a <_strtod_l+0xa7a>
 8007452:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007456:	b9f3      	cbnz	r3, 8007496 <_strtod_l+0xa86>
 8007458:	4b6b      	ldr	r3, [pc, #428]	; (8007608 <_strtod_l+0xbf8>)
 800745a:	2200      	movs	r2, #0
 800745c:	4640      	mov	r0, r8
 800745e:	4649      	mov	r1, r9
 8007460:	f7f9 fb3c 	bl	8000adc <__aeabi_dcmplt>
 8007464:	b9d0      	cbnz	r0, 800749c <_strtod_l+0xa8c>
 8007466:	4640      	mov	r0, r8
 8007468:	4649      	mov	r1, r9
 800746a:	4b6b      	ldr	r3, [pc, #428]	; (8007618 <_strtod_l+0xc08>)
 800746c:	2200      	movs	r2, #0
 800746e:	f7f9 f8c3 	bl	80005f8 <__aeabi_dmul>
 8007472:	4680      	mov	r8, r0
 8007474:	4689      	mov	r9, r1
 8007476:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800747a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800747e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007480:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8007484:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007488:	e79b      	b.n	80073c2 <_strtod_l+0x9b2>
 800748a:	f1ba 0f01 	cmp.w	sl, #1
 800748e:	d102      	bne.n	8007496 <_strtod_l+0xa86>
 8007490:	2f00      	cmp	r7, #0
 8007492:	f43f ad7e 	beq.w	8006f92 <_strtod_l+0x582>
 8007496:	4b61      	ldr	r3, [pc, #388]	; (800761c <_strtod_l+0xc0c>)
 8007498:	2200      	movs	r2, #0
 800749a:	e78c      	b.n	80073b6 <_strtod_l+0x9a6>
 800749c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007618 <_strtod_l+0xc08>
 80074a0:	f04f 0800 	mov.w	r8, #0
 80074a4:	e7e7      	b.n	8007476 <_strtod_l+0xa66>
 80074a6:	4b5c      	ldr	r3, [pc, #368]	; (8007618 <_strtod_l+0xc08>)
 80074a8:	4640      	mov	r0, r8
 80074aa:	4649      	mov	r1, r9
 80074ac:	2200      	movs	r2, #0
 80074ae:	f7f9 f8a3 	bl	80005f8 <__aeabi_dmul>
 80074b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074b4:	4680      	mov	r8, r0
 80074b6:	4689      	mov	r9, r1
 80074b8:	b933      	cbnz	r3, 80074c8 <_strtod_l+0xab8>
 80074ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074be:	9012      	str	r0, [sp, #72]	; 0x48
 80074c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80074c2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80074c6:	e7dd      	b.n	8007484 <_strtod_l+0xa74>
 80074c8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80074cc:	e7f9      	b.n	80074c2 <_strtod_l+0xab2>
 80074ce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80074d2:	9b04      	ldr	r3, [sp, #16]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d1a8      	bne.n	800742a <_strtod_l+0xa1a>
 80074d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80074dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80074de:	0d1b      	lsrs	r3, r3, #20
 80074e0:	051b      	lsls	r3, r3, #20
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d1a1      	bne.n	800742a <_strtod_l+0xa1a>
 80074e6:	4640      	mov	r0, r8
 80074e8:	4649      	mov	r1, r9
 80074ea:	f7f9 fbe5 	bl	8000cb8 <__aeabi_d2lz>
 80074ee:	f7f9 f855 	bl	800059c <__aeabi_l2d>
 80074f2:	4602      	mov	r2, r0
 80074f4:	460b      	mov	r3, r1
 80074f6:	4640      	mov	r0, r8
 80074f8:	4649      	mov	r1, r9
 80074fa:	f7f8 fec5 	bl	8000288 <__aeabi_dsub>
 80074fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007500:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007504:	ea43 030a 	orr.w	r3, r3, sl
 8007508:	4313      	orrs	r3, r2
 800750a:	4680      	mov	r8, r0
 800750c:	4689      	mov	r9, r1
 800750e:	d053      	beq.n	80075b8 <_strtod_l+0xba8>
 8007510:	a335      	add	r3, pc, #212	; (adr r3, 80075e8 <_strtod_l+0xbd8>)
 8007512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007516:	f7f9 fae1 	bl	8000adc <__aeabi_dcmplt>
 800751a:	2800      	cmp	r0, #0
 800751c:	f47f acce 	bne.w	8006ebc <_strtod_l+0x4ac>
 8007520:	a333      	add	r3, pc, #204	; (adr r3, 80075f0 <_strtod_l+0xbe0>)
 8007522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007526:	4640      	mov	r0, r8
 8007528:	4649      	mov	r1, r9
 800752a:	f7f9 faf5 	bl	8000b18 <__aeabi_dcmpgt>
 800752e:	2800      	cmp	r0, #0
 8007530:	f43f af7b 	beq.w	800742a <_strtod_l+0xa1a>
 8007534:	e4c2      	b.n	8006ebc <_strtod_l+0x4ac>
 8007536:	9b04      	ldr	r3, [sp, #16]
 8007538:	b333      	cbz	r3, 8007588 <_strtod_l+0xb78>
 800753a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800753c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007540:	d822      	bhi.n	8007588 <_strtod_l+0xb78>
 8007542:	a32d      	add	r3, pc, #180	; (adr r3, 80075f8 <_strtod_l+0xbe8>)
 8007544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007548:	4640      	mov	r0, r8
 800754a:	4649      	mov	r1, r9
 800754c:	f7f9 fad0 	bl	8000af0 <__aeabi_dcmple>
 8007550:	b1a0      	cbz	r0, 800757c <_strtod_l+0xb6c>
 8007552:	4649      	mov	r1, r9
 8007554:	4640      	mov	r0, r8
 8007556:	f7f9 fb27 	bl	8000ba8 <__aeabi_d2uiz>
 800755a:	2801      	cmp	r0, #1
 800755c:	bf38      	it	cc
 800755e:	2001      	movcc	r0, #1
 8007560:	f7f8 ffd0 	bl	8000504 <__aeabi_ui2d>
 8007564:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007566:	4680      	mov	r8, r0
 8007568:	4689      	mov	r9, r1
 800756a:	bb13      	cbnz	r3, 80075b2 <_strtod_l+0xba2>
 800756c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007570:	9014      	str	r0, [sp, #80]	; 0x50
 8007572:	9315      	str	r3, [sp, #84]	; 0x54
 8007574:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007578:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800757c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800757e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007580:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007584:	1a9b      	subs	r3, r3, r2
 8007586:	930d      	str	r3, [sp, #52]	; 0x34
 8007588:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800758c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007590:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007594:	f001 fe4a 	bl	800922c <__ulp>
 8007598:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800759c:	ec53 2b10 	vmov	r2, r3, d0
 80075a0:	f7f9 f82a 	bl	80005f8 <__aeabi_dmul>
 80075a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80075a8:	f7f8 fe70 	bl	800028c <__adddf3>
 80075ac:	4682      	mov	sl, r0
 80075ae:	468b      	mov	fp, r1
 80075b0:	e78f      	b.n	80074d2 <_strtod_l+0xac2>
 80075b2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80075b6:	e7dd      	b.n	8007574 <_strtod_l+0xb64>
 80075b8:	a311      	add	r3, pc, #68	; (adr r3, 8007600 <_strtod_l+0xbf0>)
 80075ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075be:	f7f9 fa8d 	bl	8000adc <__aeabi_dcmplt>
 80075c2:	e7b4      	b.n	800752e <_strtod_l+0xb1e>
 80075c4:	2300      	movs	r3, #0
 80075c6:	930e      	str	r3, [sp, #56]	; 0x38
 80075c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80075ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80075cc:	6013      	str	r3, [r2, #0]
 80075ce:	f7ff ba65 	b.w	8006a9c <_strtod_l+0x8c>
 80075d2:	2b65      	cmp	r3, #101	; 0x65
 80075d4:	f43f ab5d 	beq.w	8006c92 <_strtod_l+0x282>
 80075d8:	2b45      	cmp	r3, #69	; 0x45
 80075da:	f43f ab5a 	beq.w	8006c92 <_strtod_l+0x282>
 80075de:	2201      	movs	r2, #1
 80075e0:	f7ff bb92 	b.w	8006d08 <_strtod_l+0x2f8>
 80075e4:	f3af 8000 	nop.w
 80075e8:	94a03595 	.word	0x94a03595
 80075ec:	3fdfffff 	.word	0x3fdfffff
 80075f0:	35afe535 	.word	0x35afe535
 80075f4:	3fe00000 	.word	0x3fe00000
 80075f8:	ffc00000 	.word	0xffc00000
 80075fc:	41dfffff 	.word	0x41dfffff
 8007600:	94a03595 	.word	0x94a03595
 8007604:	3fcfffff 	.word	0x3fcfffff
 8007608:	3ff00000 	.word	0x3ff00000
 800760c:	7ff00000 	.word	0x7ff00000
 8007610:	7fe00000 	.word	0x7fe00000
 8007614:	7c9fffff 	.word	0x7c9fffff
 8007618:	3fe00000 	.word	0x3fe00000
 800761c:	bff00000 	.word	0xbff00000
 8007620:	7fefffff 	.word	0x7fefffff

08007624 <_strtod_r>:
 8007624:	4b01      	ldr	r3, [pc, #4]	; (800762c <_strtod_r+0x8>)
 8007626:	f7ff b9f3 	b.w	8006a10 <_strtod_l>
 800762a:	bf00      	nop
 800762c:	20000098 	.word	0x20000098

08007630 <_strtol_l.isra.0>:
 8007630:	2b01      	cmp	r3, #1
 8007632:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007636:	d001      	beq.n	800763c <_strtol_l.isra.0+0xc>
 8007638:	2b24      	cmp	r3, #36	; 0x24
 800763a:	d906      	bls.n	800764a <_strtol_l.isra.0+0x1a>
 800763c:	f7fe f9ac 	bl	8005998 <__errno>
 8007640:	2316      	movs	r3, #22
 8007642:	6003      	str	r3, [r0, #0]
 8007644:	2000      	movs	r0, #0
 8007646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800764a:	4f3a      	ldr	r7, [pc, #232]	; (8007734 <_strtol_l.isra.0+0x104>)
 800764c:	468e      	mov	lr, r1
 800764e:	4676      	mov	r6, lr
 8007650:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007654:	5de5      	ldrb	r5, [r4, r7]
 8007656:	f015 0508 	ands.w	r5, r5, #8
 800765a:	d1f8      	bne.n	800764e <_strtol_l.isra.0+0x1e>
 800765c:	2c2d      	cmp	r4, #45	; 0x2d
 800765e:	d134      	bne.n	80076ca <_strtol_l.isra.0+0x9a>
 8007660:	f89e 4000 	ldrb.w	r4, [lr]
 8007664:	f04f 0801 	mov.w	r8, #1
 8007668:	f106 0e02 	add.w	lr, r6, #2
 800766c:	2b00      	cmp	r3, #0
 800766e:	d05c      	beq.n	800772a <_strtol_l.isra.0+0xfa>
 8007670:	2b10      	cmp	r3, #16
 8007672:	d10c      	bne.n	800768e <_strtol_l.isra.0+0x5e>
 8007674:	2c30      	cmp	r4, #48	; 0x30
 8007676:	d10a      	bne.n	800768e <_strtol_l.isra.0+0x5e>
 8007678:	f89e 4000 	ldrb.w	r4, [lr]
 800767c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007680:	2c58      	cmp	r4, #88	; 0x58
 8007682:	d14d      	bne.n	8007720 <_strtol_l.isra.0+0xf0>
 8007684:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007688:	2310      	movs	r3, #16
 800768a:	f10e 0e02 	add.w	lr, lr, #2
 800768e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007692:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007696:	2600      	movs	r6, #0
 8007698:	fbbc f9f3 	udiv	r9, ip, r3
 800769c:	4635      	mov	r5, r6
 800769e:	fb03 ca19 	mls	sl, r3, r9, ip
 80076a2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80076a6:	2f09      	cmp	r7, #9
 80076a8:	d818      	bhi.n	80076dc <_strtol_l.isra.0+0xac>
 80076aa:	463c      	mov	r4, r7
 80076ac:	42a3      	cmp	r3, r4
 80076ae:	dd24      	ble.n	80076fa <_strtol_l.isra.0+0xca>
 80076b0:	2e00      	cmp	r6, #0
 80076b2:	db1f      	blt.n	80076f4 <_strtol_l.isra.0+0xc4>
 80076b4:	45a9      	cmp	r9, r5
 80076b6:	d31d      	bcc.n	80076f4 <_strtol_l.isra.0+0xc4>
 80076b8:	d101      	bne.n	80076be <_strtol_l.isra.0+0x8e>
 80076ba:	45a2      	cmp	sl, r4
 80076bc:	db1a      	blt.n	80076f4 <_strtol_l.isra.0+0xc4>
 80076be:	fb05 4503 	mla	r5, r5, r3, r4
 80076c2:	2601      	movs	r6, #1
 80076c4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80076c8:	e7eb      	b.n	80076a2 <_strtol_l.isra.0+0x72>
 80076ca:	2c2b      	cmp	r4, #43	; 0x2b
 80076cc:	bf08      	it	eq
 80076ce:	f89e 4000 	ldrbeq.w	r4, [lr]
 80076d2:	46a8      	mov	r8, r5
 80076d4:	bf08      	it	eq
 80076d6:	f106 0e02 	addeq.w	lr, r6, #2
 80076da:	e7c7      	b.n	800766c <_strtol_l.isra.0+0x3c>
 80076dc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80076e0:	2f19      	cmp	r7, #25
 80076e2:	d801      	bhi.n	80076e8 <_strtol_l.isra.0+0xb8>
 80076e4:	3c37      	subs	r4, #55	; 0x37
 80076e6:	e7e1      	b.n	80076ac <_strtol_l.isra.0+0x7c>
 80076e8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80076ec:	2f19      	cmp	r7, #25
 80076ee:	d804      	bhi.n	80076fa <_strtol_l.isra.0+0xca>
 80076f0:	3c57      	subs	r4, #87	; 0x57
 80076f2:	e7db      	b.n	80076ac <_strtol_l.isra.0+0x7c>
 80076f4:	f04f 36ff 	mov.w	r6, #4294967295
 80076f8:	e7e4      	b.n	80076c4 <_strtol_l.isra.0+0x94>
 80076fa:	2e00      	cmp	r6, #0
 80076fc:	da05      	bge.n	800770a <_strtol_l.isra.0+0xda>
 80076fe:	2322      	movs	r3, #34	; 0x22
 8007700:	6003      	str	r3, [r0, #0]
 8007702:	4665      	mov	r5, ip
 8007704:	b942      	cbnz	r2, 8007718 <_strtol_l.isra.0+0xe8>
 8007706:	4628      	mov	r0, r5
 8007708:	e79d      	b.n	8007646 <_strtol_l.isra.0+0x16>
 800770a:	f1b8 0f00 	cmp.w	r8, #0
 800770e:	d000      	beq.n	8007712 <_strtol_l.isra.0+0xe2>
 8007710:	426d      	negs	r5, r5
 8007712:	2a00      	cmp	r2, #0
 8007714:	d0f7      	beq.n	8007706 <_strtol_l.isra.0+0xd6>
 8007716:	b10e      	cbz	r6, 800771c <_strtol_l.isra.0+0xec>
 8007718:	f10e 31ff 	add.w	r1, lr, #4294967295
 800771c:	6011      	str	r1, [r2, #0]
 800771e:	e7f2      	b.n	8007706 <_strtol_l.isra.0+0xd6>
 8007720:	2430      	movs	r4, #48	; 0x30
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1b3      	bne.n	800768e <_strtol_l.isra.0+0x5e>
 8007726:	2308      	movs	r3, #8
 8007728:	e7b1      	b.n	800768e <_strtol_l.isra.0+0x5e>
 800772a:	2c30      	cmp	r4, #48	; 0x30
 800772c:	d0a4      	beq.n	8007678 <_strtol_l.isra.0+0x48>
 800772e:	230a      	movs	r3, #10
 8007730:	e7ad      	b.n	800768e <_strtol_l.isra.0+0x5e>
 8007732:	bf00      	nop
 8007734:	0800a509 	.word	0x0800a509

08007738 <_strtol_r>:
 8007738:	f7ff bf7a 	b.w	8007630 <_strtol_l.isra.0>

0800773c <quorem>:
 800773c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007740:	6903      	ldr	r3, [r0, #16]
 8007742:	690c      	ldr	r4, [r1, #16]
 8007744:	42a3      	cmp	r3, r4
 8007746:	4607      	mov	r7, r0
 8007748:	f2c0 8081 	blt.w	800784e <quorem+0x112>
 800774c:	3c01      	subs	r4, #1
 800774e:	f101 0814 	add.w	r8, r1, #20
 8007752:	f100 0514 	add.w	r5, r0, #20
 8007756:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800775a:	9301      	str	r3, [sp, #4]
 800775c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007760:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007764:	3301      	adds	r3, #1
 8007766:	429a      	cmp	r2, r3
 8007768:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800776c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007770:	fbb2 f6f3 	udiv	r6, r2, r3
 8007774:	d331      	bcc.n	80077da <quorem+0x9e>
 8007776:	f04f 0e00 	mov.w	lr, #0
 800777a:	4640      	mov	r0, r8
 800777c:	46ac      	mov	ip, r5
 800777e:	46f2      	mov	sl, lr
 8007780:	f850 2b04 	ldr.w	r2, [r0], #4
 8007784:	b293      	uxth	r3, r2
 8007786:	fb06 e303 	mla	r3, r6, r3, lr
 800778a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800778e:	b29b      	uxth	r3, r3
 8007790:	ebaa 0303 	sub.w	r3, sl, r3
 8007794:	0c12      	lsrs	r2, r2, #16
 8007796:	f8dc a000 	ldr.w	sl, [ip]
 800779a:	fb06 e202 	mla	r2, r6, r2, lr
 800779e:	fa13 f38a 	uxtah	r3, r3, sl
 80077a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80077a6:	fa1f fa82 	uxth.w	sl, r2
 80077aa:	f8dc 2000 	ldr.w	r2, [ip]
 80077ae:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80077b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077bc:	4581      	cmp	r9, r0
 80077be:	f84c 3b04 	str.w	r3, [ip], #4
 80077c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80077c6:	d2db      	bcs.n	8007780 <quorem+0x44>
 80077c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80077cc:	b92b      	cbnz	r3, 80077da <quorem+0x9e>
 80077ce:	9b01      	ldr	r3, [sp, #4]
 80077d0:	3b04      	subs	r3, #4
 80077d2:	429d      	cmp	r5, r3
 80077d4:	461a      	mov	r2, r3
 80077d6:	d32e      	bcc.n	8007836 <quorem+0xfa>
 80077d8:	613c      	str	r4, [r7, #16]
 80077da:	4638      	mov	r0, r7
 80077dc:	f001 fc82 	bl	80090e4 <__mcmp>
 80077e0:	2800      	cmp	r0, #0
 80077e2:	db24      	blt.n	800782e <quorem+0xf2>
 80077e4:	3601      	adds	r6, #1
 80077e6:	4628      	mov	r0, r5
 80077e8:	f04f 0c00 	mov.w	ip, #0
 80077ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80077f0:	f8d0 e000 	ldr.w	lr, [r0]
 80077f4:	b293      	uxth	r3, r2
 80077f6:	ebac 0303 	sub.w	r3, ip, r3
 80077fa:	0c12      	lsrs	r2, r2, #16
 80077fc:	fa13 f38e 	uxtah	r3, r3, lr
 8007800:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007804:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007808:	b29b      	uxth	r3, r3
 800780a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800780e:	45c1      	cmp	r9, r8
 8007810:	f840 3b04 	str.w	r3, [r0], #4
 8007814:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007818:	d2e8      	bcs.n	80077ec <quorem+0xb0>
 800781a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800781e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007822:	b922      	cbnz	r2, 800782e <quorem+0xf2>
 8007824:	3b04      	subs	r3, #4
 8007826:	429d      	cmp	r5, r3
 8007828:	461a      	mov	r2, r3
 800782a:	d30a      	bcc.n	8007842 <quorem+0x106>
 800782c:	613c      	str	r4, [r7, #16]
 800782e:	4630      	mov	r0, r6
 8007830:	b003      	add	sp, #12
 8007832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007836:	6812      	ldr	r2, [r2, #0]
 8007838:	3b04      	subs	r3, #4
 800783a:	2a00      	cmp	r2, #0
 800783c:	d1cc      	bne.n	80077d8 <quorem+0x9c>
 800783e:	3c01      	subs	r4, #1
 8007840:	e7c7      	b.n	80077d2 <quorem+0x96>
 8007842:	6812      	ldr	r2, [r2, #0]
 8007844:	3b04      	subs	r3, #4
 8007846:	2a00      	cmp	r2, #0
 8007848:	d1f0      	bne.n	800782c <quorem+0xf0>
 800784a:	3c01      	subs	r4, #1
 800784c:	e7eb      	b.n	8007826 <quorem+0xea>
 800784e:	2000      	movs	r0, #0
 8007850:	e7ee      	b.n	8007830 <quorem+0xf4>
 8007852:	0000      	movs	r0, r0
 8007854:	0000      	movs	r0, r0
	...

08007858 <_dtoa_r>:
 8007858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800785c:	ed2d 8b02 	vpush	{d8}
 8007860:	ec57 6b10 	vmov	r6, r7, d0
 8007864:	b095      	sub	sp, #84	; 0x54
 8007866:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007868:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800786c:	9105      	str	r1, [sp, #20]
 800786e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007872:	4604      	mov	r4, r0
 8007874:	9209      	str	r2, [sp, #36]	; 0x24
 8007876:	930f      	str	r3, [sp, #60]	; 0x3c
 8007878:	b975      	cbnz	r5, 8007898 <_dtoa_r+0x40>
 800787a:	2010      	movs	r0, #16
 800787c:	f7fe f8b6 	bl	80059ec <malloc>
 8007880:	4602      	mov	r2, r0
 8007882:	6260      	str	r0, [r4, #36]	; 0x24
 8007884:	b920      	cbnz	r0, 8007890 <_dtoa_r+0x38>
 8007886:	4bb2      	ldr	r3, [pc, #712]	; (8007b50 <_dtoa_r+0x2f8>)
 8007888:	21ea      	movs	r1, #234	; 0xea
 800788a:	48b2      	ldr	r0, [pc, #712]	; (8007b54 <_dtoa_r+0x2fc>)
 800788c:	f001 ffb0 	bl	80097f0 <__assert_func>
 8007890:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007894:	6005      	str	r5, [r0, #0]
 8007896:	60c5      	str	r5, [r0, #12]
 8007898:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800789a:	6819      	ldr	r1, [r3, #0]
 800789c:	b151      	cbz	r1, 80078b4 <_dtoa_r+0x5c>
 800789e:	685a      	ldr	r2, [r3, #4]
 80078a0:	604a      	str	r2, [r1, #4]
 80078a2:	2301      	movs	r3, #1
 80078a4:	4093      	lsls	r3, r2
 80078a6:	608b      	str	r3, [r1, #8]
 80078a8:	4620      	mov	r0, r4
 80078aa:	f001 f993 	bl	8008bd4 <_Bfree>
 80078ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078b0:	2200      	movs	r2, #0
 80078b2:	601a      	str	r2, [r3, #0]
 80078b4:	1e3b      	subs	r3, r7, #0
 80078b6:	bfb9      	ittee	lt
 80078b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80078bc:	9303      	strlt	r3, [sp, #12]
 80078be:	2300      	movge	r3, #0
 80078c0:	f8c8 3000 	strge.w	r3, [r8]
 80078c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80078c8:	4ba3      	ldr	r3, [pc, #652]	; (8007b58 <_dtoa_r+0x300>)
 80078ca:	bfbc      	itt	lt
 80078cc:	2201      	movlt	r2, #1
 80078ce:	f8c8 2000 	strlt.w	r2, [r8]
 80078d2:	ea33 0309 	bics.w	r3, r3, r9
 80078d6:	d11b      	bne.n	8007910 <_dtoa_r+0xb8>
 80078d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078da:	f242 730f 	movw	r3, #9999	; 0x270f
 80078de:	6013      	str	r3, [r2, #0]
 80078e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078e4:	4333      	orrs	r3, r6
 80078e6:	f000 857a 	beq.w	80083de <_dtoa_r+0xb86>
 80078ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078ec:	b963      	cbnz	r3, 8007908 <_dtoa_r+0xb0>
 80078ee:	4b9b      	ldr	r3, [pc, #620]	; (8007b5c <_dtoa_r+0x304>)
 80078f0:	e024      	b.n	800793c <_dtoa_r+0xe4>
 80078f2:	4b9b      	ldr	r3, [pc, #620]	; (8007b60 <_dtoa_r+0x308>)
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	3308      	adds	r3, #8
 80078f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80078fa:	6013      	str	r3, [r2, #0]
 80078fc:	9800      	ldr	r0, [sp, #0]
 80078fe:	b015      	add	sp, #84	; 0x54
 8007900:	ecbd 8b02 	vpop	{d8}
 8007904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007908:	4b94      	ldr	r3, [pc, #592]	; (8007b5c <_dtoa_r+0x304>)
 800790a:	9300      	str	r3, [sp, #0]
 800790c:	3303      	adds	r3, #3
 800790e:	e7f3      	b.n	80078f8 <_dtoa_r+0xa0>
 8007910:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007914:	2200      	movs	r2, #0
 8007916:	ec51 0b17 	vmov	r0, r1, d7
 800791a:	2300      	movs	r3, #0
 800791c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007920:	f7f9 f8d2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007924:	4680      	mov	r8, r0
 8007926:	b158      	cbz	r0, 8007940 <_dtoa_r+0xe8>
 8007928:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800792a:	2301      	movs	r3, #1
 800792c:	6013      	str	r3, [r2, #0]
 800792e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 8551 	beq.w	80083d8 <_dtoa_r+0xb80>
 8007936:	488b      	ldr	r0, [pc, #556]	; (8007b64 <_dtoa_r+0x30c>)
 8007938:	6018      	str	r0, [r3, #0]
 800793a:	1e43      	subs	r3, r0, #1
 800793c:	9300      	str	r3, [sp, #0]
 800793e:	e7dd      	b.n	80078fc <_dtoa_r+0xa4>
 8007940:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007944:	aa12      	add	r2, sp, #72	; 0x48
 8007946:	a913      	add	r1, sp, #76	; 0x4c
 8007948:	4620      	mov	r0, r4
 800794a:	f001 fceb 	bl	8009324 <__d2b>
 800794e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007952:	4683      	mov	fp, r0
 8007954:	2d00      	cmp	r5, #0
 8007956:	d07c      	beq.n	8007a52 <_dtoa_r+0x1fa>
 8007958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800795a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800795e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007962:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007966:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800796a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800796e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007972:	4b7d      	ldr	r3, [pc, #500]	; (8007b68 <_dtoa_r+0x310>)
 8007974:	2200      	movs	r2, #0
 8007976:	4630      	mov	r0, r6
 8007978:	4639      	mov	r1, r7
 800797a:	f7f8 fc85 	bl	8000288 <__aeabi_dsub>
 800797e:	a36e      	add	r3, pc, #440	; (adr r3, 8007b38 <_dtoa_r+0x2e0>)
 8007980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007984:	f7f8 fe38 	bl	80005f8 <__aeabi_dmul>
 8007988:	a36d      	add	r3, pc, #436	; (adr r3, 8007b40 <_dtoa_r+0x2e8>)
 800798a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798e:	f7f8 fc7d 	bl	800028c <__adddf3>
 8007992:	4606      	mov	r6, r0
 8007994:	4628      	mov	r0, r5
 8007996:	460f      	mov	r7, r1
 8007998:	f7f8 fdc4 	bl	8000524 <__aeabi_i2d>
 800799c:	a36a      	add	r3, pc, #424	; (adr r3, 8007b48 <_dtoa_r+0x2f0>)
 800799e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a2:	f7f8 fe29 	bl	80005f8 <__aeabi_dmul>
 80079a6:	4602      	mov	r2, r0
 80079a8:	460b      	mov	r3, r1
 80079aa:	4630      	mov	r0, r6
 80079ac:	4639      	mov	r1, r7
 80079ae:	f7f8 fc6d 	bl	800028c <__adddf3>
 80079b2:	4606      	mov	r6, r0
 80079b4:	460f      	mov	r7, r1
 80079b6:	f7f9 f8cf 	bl	8000b58 <__aeabi_d2iz>
 80079ba:	2200      	movs	r2, #0
 80079bc:	4682      	mov	sl, r0
 80079be:	2300      	movs	r3, #0
 80079c0:	4630      	mov	r0, r6
 80079c2:	4639      	mov	r1, r7
 80079c4:	f7f9 f88a 	bl	8000adc <__aeabi_dcmplt>
 80079c8:	b148      	cbz	r0, 80079de <_dtoa_r+0x186>
 80079ca:	4650      	mov	r0, sl
 80079cc:	f7f8 fdaa 	bl	8000524 <__aeabi_i2d>
 80079d0:	4632      	mov	r2, r6
 80079d2:	463b      	mov	r3, r7
 80079d4:	f7f9 f878 	bl	8000ac8 <__aeabi_dcmpeq>
 80079d8:	b908      	cbnz	r0, 80079de <_dtoa_r+0x186>
 80079da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079de:	f1ba 0f16 	cmp.w	sl, #22
 80079e2:	d854      	bhi.n	8007a8e <_dtoa_r+0x236>
 80079e4:	4b61      	ldr	r3, [pc, #388]	; (8007b6c <_dtoa_r+0x314>)
 80079e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80079ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80079f2:	f7f9 f873 	bl	8000adc <__aeabi_dcmplt>
 80079f6:	2800      	cmp	r0, #0
 80079f8:	d04b      	beq.n	8007a92 <_dtoa_r+0x23a>
 80079fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079fe:	2300      	movs	r3, #0
 8007a00:	930e      	str	r3, [sp, #56]	; 0x38
 8007a02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a04:	1b5d      	subs	r5, r3, r5
 8007a06:	1e6b      	subs	r3, r5, #1
 8007a08:	9304      	str	r3, [sp, #16]
 8007a0a:	bf43      	ittte	mi
 8007a0c:	2300      	movmi	r3, #0
 8007a0e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007a12:	9304      	strmi	r3, [sp, #16]
 8007a14:	f04f 0800 	movpl.w	r8, #0
 8007a18:	f1ba 0f00 	cmp.w	sl, #0
 8007a1c:	db3b      	blt.n	8007a96 <_dtoa_r+0x23e>
 8007a1e:	9b04      	ldr	r3, [sp, #16]
 8007a20:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007a24:	4453      	add	r3, sl
 8007a26:	9304      	str	r3, [sp, #16]
 8007a28:	2300      	movs	r3, #0
 8007a2a:	9306      	str	r3, [sp, #24]
 8007a2c:	9b05      	ldr	r3, [sp, #20]
 8007a2e:	2b09      	cmp	r3, #9
 8007a30:	d869      	bhi.n	8007b06 <_dtoa_r+0x2ae>
 8007a32:	2b05      	cmp	r3, #5
 8007a34:	bfc4      	itt	gt
 8007a36:	3b04      	subgt	r3, #4
 8007a38:	9305      	strgt	r3, [sp, #20]
 8007a3a:	9b05      	ldr	r3, [sp, #20]
 8007a3c:	f1a3 0302 	sub.w	r3, r3, #2
 8007a40:	bfcc      	ite	gt
 8007a42:	2500      	movgt	r5, #0
 8007a44:	2501      	movle	r5, #1
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	d869      	bhi.n	8007b1e <_dtoa_r+0x2c6>
 8007a4a:	e8df f003 	tbb	[pc, r3]
 8007a4e:	4e2c      	.short	0x4e2c
 8007a50:	5a4c      	.short	0x5a4c
 8007a52:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007a56:	441d      	add	r5, r3
 8007a58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007a5c:	2b20      	cmp	r3, #32
 8007a5e:	bfc1      	itttt	gt
 8007a60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007a64:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007a68:	fa09 f303 	lslgt.w	r3, r9, r3
 8007a6c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007a70:	bfda      	itte	le
 8007a72:	f1c3 0320 	rsble	r3, r3, #32
 8007a76:	fa06 f003 	lslle.w	r0, r6, r3
 8007a7a:	4318      	orrgt	r0, r3
 8007a7c:	f7f8 fd42 	bl	8000504 <__aeabi_ui2d>
 8007a80:	2301      	movs	r3, #1
 8007a82:	4606      	mov	r6, r0
 8007a84:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007a88:	3d01      	subs	r5, #1
 8007a8a:	9310      	str	r3, [sp, #64]	; 0x40
 8007a8c:	e771      	b.n	8007972 <_dtoa_r+0x11a>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e7b6      	b.n	8007a00 <_dtoa_r+0x1a8>
 8007a92:	900e      	str	r0, [sp, #56]	; 0x38
 8007a94:	e7b5      	b.n	8007a02 <_dtoa_r+0x1aa>
 8007a96:	f1ca 0300 	rsb	r3, sl, #0
 8007a9a:	9306      	str	r3, [sp, #24]
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	eba8 080a 	sub.w	r8, r8, sl
 8007aa2:	930d      	str	r3, [sp, #52]	; 0x34
 8007aa4:	e7c2      	b.n	8007a2c <_dtoa_r+0x1d4>
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	9308      	str	r3, [sp, #32]
 8007aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	dc39      	bgt.n	8007b24 <_dtoa_r+0x2cc>
 8007ab0:	f04f 0901 	mov.w	r9, #1
 8007ab4:	f8cd 9004 	str.w	r9, [sp, #4]
 8007ab8:	464b      	mov	r3, r9
 8007aba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007abe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	6042      	str	r2, [r0, #4]
 8007ac4:	2204      	movs	r2, #4
 8007ac6:	f102 0614 	add.w	r6, r2, #20
 8007aca:	429e      	cmp	r6, r3
 8007acc:	6841      	ldr	r1, [r0, #4]
 8007ace:	d92f      	bls.n	8007b30 <_dtoa_r+0x2d8>
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	f001 f83f 	bl	8008b54 <_Balloc>
 8007ad6:	9000      	str	r0, [sp, #0]
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	d14b      	bne.n	8007b74 <_dtoa_r+0x31c>
 8007adc:	4b24      	ldr	r3, [pc, #144]	; (8007b70 <_dtoa_r+0x318>)
 8007ade:	4602      	mov	r2, r0
 8007ae0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007ae4:	e6d1      	b.n	800788a <_dtoa_r+0x32>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e7de      	b.n	8007aa8 <_dtoa_r+0x250>
 8007aea:	2300      	movs	r3, #0
 8007aec:	9308      	str	r3, [sp, #32]
 8007aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007af0:	eb0a 0903 	add.w	r9, sl, r3
 8007af4:	f109 0301 	add.w	r3, r9, #1
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	9301      	str	r3, [sp, #4]
 8007afc:	bfb8      	it	lt
 8007afe:	2301      	movlt	r3, #1
 8007b00:	e7dd      	b.n	8007abe <_dtoa_r+0x266>
 8007b02:	2301      	movs	r3, #1
 8007b04:	e7f2      	b.n	8007aec <_dtoa_r+0x294>
 8007b06:	2501      	movs	r5, #1
 8007b08:	2300      	movs	r3, #0
 8007b0a:	9305      	str	r3, [sp, #20]
 8007b0c:	9508      	str	r5, [sp, #32]
 8007b0e:	f04f 39ff 	mov.w	r9, #4294967295
 8007b12:	2200      	movs	r2, #0
 8007b14:	f8cd 9004 	str.w	r9, [sp, #4]
 8007b18:	2312      	movs	r3, #18
 8007b1a:	9209      	str	r2, [sp, #36]	; 0x24
 8007b1c:	e7cf      	b.n	8007abe <_dtoa_r+0x266>
 8007b1e:	2301      	movs	r3, #1
 8007b20:	9308      	str	r3, [sp, #32]
 8007b22:	e7f4      	b.n	8007b0e <_dtoa_r+0x2b6>
 8007b24:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007b28:	f8cd 9004 	str.w	r9, [sp, #4]
 8007b2c:	464b      	mov	r3, r9
 8007b2e:	e7c6      	b.n	8007abe <_dtoa_r+0x266>
 8007b30:	3101      	adds	r1, #1
 8007b32:	6041      	str	r1, [r0, #4]
 8007b34:	0052      	lsls	r2, r2, #1
 8007b36:	e7c6      	b.n	8007ac6 <_dtoa_r+0x26e>
 8007b38:	636f4361 	.word	0x636f4361
 8007b3c:	3fd287a7 	.word	0x3fd287a7
 8007b40:	8b60c8b3 	.word	0x8b60c8b3
 8007b44:	3fc68a28 	.word	0x3fc68a28
 8007b48:	509f79fb 	.word	0x509f79fb
 8007b4c:	3fd34413 	.word	0x3fd34413
 8007b50:	0800a616 	.word	0x0800a616
 8007b54:	0800a62d 	.word	0x0800a62d
 8007b58:	7ff00000 	.word	0x7ff00000
 8007b5c:	0800a612 	.word	0x0800a612
 8007b60:	0800a609 	.word	0x0800a609
 8007b64:	0800a48d 	.word	0x0800a48d
 8007b68:	3ff80000 	.word	0x3ff80000
 8007b6c:	0800a7a8 	.word	0x0800a7a8
 8007b70:	0800a68c 	.word	0x0800a68c
 8007b74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b76:	9a00      	ldr	r2, [sp, #0]
 8007b78:	601a      	str	r2, [r3, #0]
 8007b7a:	9b01      	ldr	r3, [sp, #4]
 8007b7c:	2b0e      	cmp	r3, #14
 8007b7e:	f200 80ad 	bhi.w	8007cdc <_dtoa_r+0x484>
 8007b82:	2d00      	cmp	r5, #0
 8007b84:	f000 80aa 	beq.w	8007cdc <_dtoa_r+0x484>
 8007b88:	f1ba 0f00 	cmp.w	sl, #0
 8007b8c:	dd36      	ble.n	8007bfc <_dtoa_r+0x3a4>
 8007b8e:	4ac3      	ldr	r2, [pc, #780]	; (8007e9c <_dtoa_r+0x644>)
 8007b90:	f00a 030f 	and.w	r3, sl, #15
 8007b94:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007b98:	ed93 7b00 	vldr	d7, [r3]
 8007b9c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007ba0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007ba4:	eeb0 8a47 	vmov.f32	s16, s14
 8007ba8:	eef0 8a67 	vmov.f32	s17, s15
 8007bac:	d016      	beq.n	8007bdc <_dtoa_r+0x384>
 8007bae:	4bbc      	ldr	r3, [pc, #752]	; (8007ea0 <_dtoa_r+0x648>)
 8007bb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007bb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007bb8:	f7f8 fe48 	bl	800084c <__aeabi_ddiv>
 8007bbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bc0:	f007 070f 	and.w	r7, r7, #15
 8007bc4:	2503      	movs	r5, #3
 8007bc6:	4eb6      	ldr	r6, [pc, #728]	; (8007ea0 <_dtoa_r+0x648>)
 8007bc8:	b957      	cbnz	r7, 8007be0 <_dtoa_r+0x388>
 8007bca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bce:	ec53 2b18 	vmov	r2, r3, d8
 8007bd2:	f7f8 fe3b 	bl	800084c <__aeabi_ddiv>
 8007bd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bda:	e029      	b.n	8007c30 <_dtoa_r+0x3d8>
 8007bdc:	2502      	movs	r5, #2
 8007bde:	e7f2      	b.n	8007bc6 <_dtoa_r+0x36e>
 8007be0:	07f9      	lsls	r1, r7, #31
 8007be2:	d508      	bpl.n	8007bf6 <_dtoa_r+0x39e>
 8007be4:	ec51 0b18 	vmov	r0, r1, d8
 8007be8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007bec:	f7f8 fd04 	bl	80005f8 <__aeabi_dmul>
 8007bf0:	ec41 0b18 	vmov	d8, r0, r1
 8007bf4:	3501      	adds	r5, #1
 8007bf6:	107f      	asrs	r7, r7, #1
 8007bf8:	3608      	adds	r6, #8
 8007bfa:	e7e5      	b.n	8007bc8 <_dtoa_r+0x370>
 8007bfc:	f000 80a6 	beq.w	8007d4c <_dtoa_r+0x4f4>
 8007c00:	f1ca 0600 	rsb	r6, sl, #0
 8007c04:	4ba5      	ldr	r3, [pc, #660]	; (8007e9c <_dtoa_r+0x644>)
 8007c06:	4fa6      	ldr	r7, [pc, #664]	; (8007ea0 <_dtoa_r+0x648>)
 8007c08:	f006 020f 	and.w	r2, r6, #15
 8007c0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c14:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007c18:	f7f8 fcee 	bl	80005f8 <__aeabi_dmul>
 8007c1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c20:	1136      	asrs	r6, r6, #4
 8007c22:	2300      	movs	r3, #0
 8007c24:	2502      	movs	r5, #2
 8007c26:	2e00      	cmp	r6, #0
 8007c28:	f040 8085 	bne.w	8007d36 <_dtoa_r+0x4de>
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d1d2      	bne.n	8007bd6 <_dtoa_r+0x37e>
 8007c30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f000 808c 	beq.w	8007d50 <_dtoa_r+0x4f8>
 8007c38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007c3c:	4b99      	ldr	r3, [pc, #612]	; (8007ea4 <_dtoa_r+0x64c>)
 8007c3e:	2200      	movs	r2, #0
 8007c40:	4630      	mov	r0, r6
 8007c42:	4639      	mov	r1, r7
 8007c44:	f7f8 ff4a 	bl	8000adc <__aeabi_dcmplt>
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	f000 8081 	beq.w	8007d50 <_dtoa_r+0x4f8>
 8007c4e:	9b01      	ldr	r3, [sp, #4]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d07d      	beq.n	8007d50 <_dtoa_r+0x4f8>
 8007c54:	f1b9 0f00 	cmp.w	r9, #0
 8007c58:	dd3c      	ble.n	8007cd4 <_dtoa_r+0x47c>
 8007c5a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007c5e:	9307      	str	r3, [sp, #28]
 8007c60:	2200      	movs	r2, #0
 8007c62:	4b91      	ldr	r3, [pc, #580]	; (8007ea8 <_dtoa_r+0x650>)
 8007c64:	4630      	mov	r0, r6
 8007c66:	4639      	mov	r1, r7
 8007c68:	f7f8 fcc6 	bl	80005f8 <__aeabi_dmul>
 8007c6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c70:	3501      	adds	r5, #1
 8007c72:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007c76:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	f7f8 fc52 	bl	8000524 <__aeabi_i2d>
 8007c80:	4632      	mov	r2, r6
 8007c82:	463b      	mov	r3, r7
 8007c84:	f7f8 fcb8 	bl	80005f8 <__aeabi_dmul>
 8007c88:	4b88      	ldr	r3, [pc, #544]	; (8007eac <_dtoa_r+0x654>)
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f7f8 fafe 	bl	800028c <__adddf3>
 8007c90:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007c94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c98:	9303      	str	r3, [sp, #12]
 8007c9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d15c      	bne.n	8007d5a <_dtoa_r+0x502>
 8007ca0:	4b83      	ldr	r3, [pc, #524]	; (8007eb0 <_dtoa_r+0x658>)
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	4630      	mov	r0, r6
 8007ca6:	4639      	mov	r1, r7
 8007ca8:	f7f8 faee 	bl	8000288 <__aeabi_dsub>
 8007cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cb0:	4606      	mov	r6, r0
 8007cb2:	460f      	mov	r7, r1
 8007cb4:	f7f8 ff30 	bl	8000b18 <__aeabi_dcmpgt>
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	f040 8296 	bne.w	80081ea <_dtoa_r+0x992>
 8007cbe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007cc2:	4630      	mov	r0, r6
 8007cc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cc8:	4639      	mov	r1, r7
 8007cca:	f7f8 ff07 	bl	8000adc <__aeabi_dcmplt>
 8007cce:	2800      	cmp	r0, #0
 8007cd0:	f040 8288 	bne.w	80081e4 <_dtoa_r+0x98c>
 8007cd4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007cd8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007cdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f2c0 8158 	blt.w	8007f94 <_dtoa_r+0x73c>
 8007ce4:	f1ba 0f0e 	cmp.w	sl, #14
 8007ce8:	f300 8154 	bgt.w	8007f94 <_dtoa_r+0x73c>
 8007cec:	4b6b      	ldr	r3, [pc, #428]	; (8007e9c <_dtoa_r+0x644>)
 8007cee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007cf2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f280 80e3 	bge.w	8007ec4 <_dtoa_r+0x66c>
 8007cfe:	9b01      	ldr	r3, [sp, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f300 80df 	bgt.w	8007ec4 <_dtoa_r+0x66c>
 8007d06:	f040 826d 	bne.w	80081e4 <_dtoa_r+0x98c>
 8007d0a:	4b69      	ldr	r3, [pc, #420]	; (8007eb0 <_dtoa_r+0x658>)
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	4640      	mov	r0, r8
 8007d10:	4649      	mov	r1, r9
 8007d12:	f7f8 fc71 	bl	80005f8 <__aeabi_dmul>
 8007d16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d1a:	f7f8 fef3 	bl	8000b04 <__aeabi_dcmpge>
 8007d1e:	9e01      	ldr	r6, [sp, #4]
 8007d20:	4637      	mov	r7, r6
 8007d22:	2800      	cmp	r0, #0
 8007d24:	f040 8243 	bne.w	80081ae <_dtoa_r+0x956>
 8007d28:	9d00      	ldr	r5, [sp, #0]
 8007d2a:	2331      	movs	r3, #49	; 0x31
 8007d2c:	f805 3b01 	strb.w	r3, [r5], #1
 8007d30:	f10a 0a01 	add.w	sl, sl, #1
 8007d34:	e23f      	b.n	80081b6 <_dtoa_r+0x95e>
 8007d36:	07f2      	lsls	r2, r6, #31
 8007d38:	d505      	bpl.n	8007d46 <_dtoa_r+0x4ee>
 8007d3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d3e:	f7f8 fc5b 	bl	80005f8 <__aeabi_dmul>
 8007d42:	3501      	adds	r5, #1
 8007d44:	2301      	movs	r3, #1
 8007d46:	1076      	asrs	r6, r6, #1
 8007d48:	3708      	adds	r7, #8
 8007d4a:	e76c      	b.n	8007c26 <_dtoa_r+0x3ce>
 8007d4c:	2502      	movs	r5, #2
 8007d4e:	e76f      	b.n	8007c30 <_dtoa_r+0x3d8>
 8007d50:	9b01      	ldr	r3, [sp, #4]
 8007d52:	f8cd a01c 	str.w	sl, [sp, #28]
 8007d56:	930c      	str	r3, [sp, #48]	; 0x30
 8007d58:	e78d      	b.n	8007c76 <_dtoa_r+0x41e>
 8007d5a:	9900      	ldr	r1, [sp, #0]
 8007d5c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007d5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d60:	4b4e      	ldr	r3, [pc, #312]	; (8007e9c <_dtoa_r+0x644>)
 8007d62:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d66:	4401      	add	r1, r0
 8007d68:	9102      	str	r1, [sp, #8]
 8007d6a:	9908      	ldr	r1, [sp, #32]
 8007d6c:	eeb0 8a47 	vmov.f32	s16, s14
 8007d70:	eef0 8a67 	vmov.f32	s17, s15
 8007d74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d7c:	2900      	cmp	r1, #0
 8007d7e:	d045      	beq.n	8007e0c <_dtoa_r+0x5b4>
 8007d80:	494c      	ldr	r1, [pc, #304]	; (8007eb4 <_dtoa_r+0x65c>)
 8007d82:	2000      	movs	r0, #0
 8007d84:	f7f8 fd62 	bl	800084c <__aeabi_ddiv>
 8007d88:	ec53 2b18 	vmov	r2, r3, d8
 8007d8c:	f7f8 fa7c 	bl	8000288 <__aeabi_dsub>
 8007d90:	9d00      	ldr	r5, [sp, #0]
 8007d92:	ec41 0b18 	vmov	d8, r0, r1
 8007d96:	4639      	mov	r1, r7
 8007d98:	4630      	mov	r0, r6
 8007d9a:	f7f8 fedd 	bl	8000b58 <__aeabi_d2iz>
 8007d9e:	900c      	str	r0, [sp, #48]	; 0x30
 8007da0:	f7f8 fbc0 	bl	8000524 <__aeabi_i2d>
 8007da4:	4602      	mov	r2, r0
 8007da6:	460b      	mov	r3, r1
 8007da8:	4630      	mov	r0, r6
 8007daa:	4639      	mov	r1, r7
 8007dac:	f7f8 fa6c 	bl	8000288 <__aeabi_dsub>
 8007db0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007db2:	3330      	adds	r3, #48	; 0x30
 8007db4:	f805 3b01 	strb.w	r3, [r5], #1
 8007db8:	ec53 2b18 	vmov	r2, r3, d8
 8007dbc:	4606      	mov	r6, r0
 8007dbe:	460f      	mov	r7, r1
 8007dc0:	f7f8 fe8c 	bl	8000adc <__aeabi_dcmplt>
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	d165      	bne.n	8007e94 <_dtoa_r+0x63c>
 8007dc8:	4632      	mov	r2, r6
 8007dca:	463b      	mov	r3, r7
 8007dcc:	4935      	ldr	r1, [pc, #212]	; (8007ea4 <_dtoa_r+0x64c>)
 8007dce:	2000      	movs	r0, #0
 8007dd0:	f7f8 fa5a 	bl	8000288 <__aeabi_dsub>
 8007dd4:	ec53 2b18 	vmov	r2, r3, d8
 8007dd8:	f7f8 fe80 	bl	8000adc <__aeabi_dcmplt>
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	f040 80b9 	bne.w	8007f54 <_dtoa_r+0x6fc>
 8007de2:	9b02      	ldr	r3, [sp, #8]
 8007de4:	429d      	cmp	r5, r3
 8007de6:	f43f af75 	beq.w	8007cd4 <_dtoa_r+0x47c>
 8007dea:	4b2f      	ldr	r3, [pc, #188]	; (8007ea8 <_dtoa_r+0x650>)
 8007dec:	ec51 0b18 	vmov	r0, r1, d8
 8007df0:	2200      	movs	r2, #0
 8007df2:	f7f8 fc01 	bl	80005f8 <__aeabi_dmul>
 8007df6:	4b2c      	ldr	r3, [pc, #176]	; (8007ea8 <_dtoa_r+0x650>)
 8007df8:	ec41 0b18 	vmov	d8, r0, r1
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	4630      	mov	r0, r6
 8007e00:	4639      	mov	r1, r7
 8007e02:	f7f8 fbf9 	bl	80005f8 <__aeabi_dmul>
 8007e06:	4606      	mov	r6, r0
 8007e08:	460f      	mov	r7, r1
 8007e0a:	e7c4      	b.n	8007d96 <_dtoa_r+0x53e>
 8007e0c:	ec51 0b17 	vmov	r0, r1, d7
 8007e10:	f7f8 fbf2 	bl	80005f8 <__aeabi_dmul>
 8007e14:	9b02      	ldr	r3, [sp, #8]
 8007e16:	9d00      	ldr	r5, [sp, #0]
 8007e18:	930c      	str	r3, [sp, #48]	; 0x30
 8007e1a:	ec41 0b18 	vmov	d8, r0, r1
 8007e1e:	4639      	mov	r1, r7
 8007e20:	4630      	mov	r0, r6
 8007e22:	f7f8 fe99 	bl	8000b58 <__aeabi_d2iz>
 8007e26:	9011      	str	r0, [sp, #68]	; 0x44
 8007e28:	f7f8 fb7c 	bl	8000524 <__aeabi_i2d>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	460b      	mov	r3, r1
 8007e30:	4630      	mov	r0, r6
 8007e32:	4639      	mov	r1, r7
 8007e34:	f7f8 fa28 	bl	8000288 <__aeabi_dsub>
 8007e38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e3a:	3330      	adds	r3, #48	; 0x30
 8007e3c:	f805 3b01 	strb.w	r3, [r5], #1
 8007e40:	9b02      	ldr	r3, [sp, #8]
 8007e42:	429d      	cmp	r5, r3
 8007e44:	4606      	mov	r6, r0
 8007e46:	460f      	mov	r7, r1
 8007e48:	f04f 0200 	mov.w	r2, #0
 8007e4c:	d134      	bne.n	8007eb8 <_dtoa_r+0x660>
 8007e4e:	4b19      	ldr	r3, [pc, #100]	; (8007eb4 <_dtoa_r+0x65c>)
 8007e50:	ec51 0b18 	vmov	r0, r1, d8
 8007e54:	f7f8 fa1a 	bl	800028c <__adddf3>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	4630      	mov	r0, r6
 8007e5e:	4639      	mov	r1, r7
 8007e60:	f7f8 fe5a 	bl	8000b18 <__aeabi_dcmpgt>
 8007e64:	2800      	cmp	r0, #0
 8007e66:	d175      	bne.n	8007f54 <_dtoa_r+0x6fc>
 8007e68:	ec53 2b18 	vmov	r2, r3, d8
 8007e6c:	4911      	ldr	r1, [pc, #68]	; (8007eb4 <_dtoa_r+0x65c>)
 8007e6e:	2000      	movs	r0, #0
 8007e70:	f7f8 fa0a 	bl	8000288 <__aeabi_dsub>
 8007e74:	4602      	mov	r2, r0
 8007e76:	460b      	mov	r3, r1
 8007e78:	4630      	mov	r0, r6
 8007e7a:	4639      	mov	r1, r7
 8007e7c:	f7f8 fe2e 	bl	8000adc <__aeabi_dcmplt>
 8007e80:	2800      	cmp	r0, #0
 8007e82:	f43f af27 	beq.w	8007cd4 <_dtoa_r+0x47c>
 8007e86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e88:	1e6b      	subs	r3, r5, #1
 8007e8a:	930c      	str	r3, [sp, #48]	; 0x30
 8007e8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e90:	2b30      	cmp	r3, #48	; 0x30
 8007e92:	d0f8      	beq.n	8007e86 <_dtoa_r+0x62e>
 8007e94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007e98:	e04a      	b.n	8007f30 <_dtoa_r+0x6d8>
 8007e9a:	bf00      	nop
 8007e9c:	0800a7a8 	.word	0x0800a7a8
 8007ea0:	0800a780 	.word	0x0800a780
 8007ea4:	3ff00000 	.word	0x3ff00000
 8007ea8:	40240000 	.word	0x40240000
 8007eac:	401c0000 	.word	0x401c0000
 8007eb0:	40140000 	.word	0x40140000
 8007eb4:	3fe00000 	.word	0x3fe00000
 8007eb8:	4baf      	ldr	r3, [pc, #700]	; (8008178 <_dtoa_r+0x920>)
 8007eba:	f7f8 fb9d 	bl	80005f8 <__aeabi_dmul>
 8007ebe:	4606      	mov	r6, r0
 8007ec0:	460f      	mov	r7, r1
 8007ec2:	e7ac      	b.n	8007e1e <_dtoa_r+0x5c6>
 8007ec4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007ec8:	9d00      	ldr	r5, [sp, #0]
 8007eca:	4642      	mov	r2, r8
 8007ecc:	464b      	mov	r3, r9
 8007ece:	4630      	mov	r0, r6
 8007ed0:	4639      	mov	r1, r7
 8007ed2:	f7f8 fcbb 	bl	800084c <__aeabi_ddiv>
 8007ed6:	f7f8 fe3f 	bl	8000b58 <__aeabi_d2iz>
 8007eda:	9002      	str	r0, [sp, #8]
 8007edc:	f7f8 fb22 	bl	8000524 <__aeabi_i2d>
 8007ee0:	4642      	mov	r2, r8
 8007ee2:	464b      	mov	r3, r9
 8007ee4:	f7f8 fb88 	bl	80005f8 <__aeabi_dmul>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	460b      	mov	r3, r1
 8007eec:	4630      	mov	r0, r6
 8007eee:	4639      	mov	r1, r7
 8007ef0:	f7f8 f9ca 	bl	8000288 <__aeabi_dsub>
 8007ef4:	9e02      	ldr	r6, [sp, #8]
 8007ef6:	9f01      	ldr	r7, [sp, #4]
 8007ef8:	3630      	adds	r6, #48	; 0x30
 8007efa:	f805 6b01 	strb.w	r6, [r5], #1
 8007efe:	9e00      	ldr	r6, [sp, #0]
 8007f00:	1bae      	subs	r6, r5, r6
 8007f02:	42b7      	cmp	r7, r6
 8007f04:	4602      	mov	r2, r0
 8007f06:	460b      	mov	r3, r1
 8007f08:	d137      	bne.n	8007f7a <_dtoa_r+0x722>
 8007f0a:	f7f8 f9bf 	bl	800028c <__adddf3>
 8007f0e:	4642      	mov	r2, r8
 8007f10:	464b      	mov	r3, r9
 8007f12:	4606      	mov	r6, r0
 8007f14:	460f      	mov	r7, r1
 8007f16:	f7f8 fdff 	bl	8000b18 <__aeabi_dcmpgt>
 8007f1a:	b9c8      	cbnz	r0, 8007f50 <_dtoa_r+0x6f8>
 8007f1c:	4642      	mov	r2, r8
 8007f1e:	464b      	mov	r3, r9
 8007f20:	4630      	mov	r0, r6
 8007f22:	4639      	mov	r1, r7
 8007f24:	f7f8 fdd0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f28:	b110      	cbz	r0, 8007f30 <_dtoa_r+0x6d8>
 8007f2a:	9b02      	ldr	r3, [sp, #8]
 8007f2c:	07d9      	lsls	r1, r3, #31
 8007f2e:	d40f      	bmi.n	8007f50 <_dtoa_r+0x6f8>
 8007f30:	4620      	mov	r0, r4
 8007f32:	4659      	mov	r1, fp
 8007f34:	f000 fe4e 	bl	8008bd4 <_Bfree>
 8007f38:	2300      	movs	r3, #0
 8007f3a:	702b      	strb	r3, [r5, #0]
 8007f3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f3e:	f10a 0001 	add.w	r0, sl, #1
 8007f42:	6018      	str	r0, [r3, #0]
 8007f44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f43f acd8 	beq.w	80078fc <_dtoa_r+0xa4>
 8007f4c:	601d      	str	r5, [r3, #0]
 8007f4e:	e4d5      	b.n	80078fc <_dtoa_r+0xa4>
 8007f50:	f8cd a01c 	str.w	sl, [sp, #28]
 8007f54:	462b      	mov	r3, r5
 8007f56:	461d      	mov	r5, r3
 8007f58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f5c:	2a39      	cmp	r2, #57	; 0x39
 8007f5e:	d108      	bne.n	8007f72 <_dtoa_r+0x71a>
 8007f60:	9a00      	ldr	r2, [sp, #0]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d1f7      	bne.n	8007f56 <_dtoa_r+0x6fe>
 8007f66:	9a07      	ldr	r2, [sp, #28]
 8007f68:	9900      	ldr	r1, [sp, #0]
 8007f6a:	3201      	adds	r2, #1
 8007f6c:	9207      	str	r2, [sp, #28]
 8007f6e:	2230      	movs	r2, #48	; 0x30
 8007f70:	700a      	strb	r2, [r1, #0]
 8007f72:	781a      	ldrb	r2, [r3, #0]
 8007f74:	3201      	adds	r2, #1
 8007f76:	701a      	strb	r2, [r3, #0]
 8007f78:	e78c      	b.n	8007e94 <_dtoa_r+0x63c>
 8007f7a:	4b7f      	ldr	r3, [pc, #508]	; (8008178 <_dtoa_r+0x920>)
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f7f8 fb3b 	bl	80005f8 <__aeabi_dmul>
 8007f82:	2200      	movs	r2, #0
 8007f84:	2300      	movs	r3, #0
 8007f86:	4606      	mov	r6, r0
 8007f88:	460f      	mov	r7, r1
 8007f8a:	f7f8 fd9d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f8e:	2800      	cmp	r0, #0
 8007f90:	d09b      	beq.n	8007eca <_dtoa_r+0x672>
 8007f92:	e7cd      	b.n	8007f30 <_dtoa_r+0x6d8>
 8007f94:	9a08      	ldr	r2, [sp, #32]
 8007f96:	2a00      	cmp	r2, #0
 8007f98:	f000 80c4 	beq.w	8008124 <_dtoa_r+0x8cc>
 8007f9c:	9a05      	ldr	r2, [sp, #20]
 8007f9e:	2a01      	cmp	r2, #1
 8007fa0:	f300 80a8 	bgt.w	80080f4 <_dtoa_r+0x89c>
 8007fa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007fa6:	2a00      	cmp	r2, #0
 8007fa8:	f000 80a0 	beq.w	80080ec <_dtoa_r+0x894>
 8007fac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007fb0:	9e06      	ldr	r6, [sp, #24]
 8007fb2:	4645      	mov	r5, r8
 8007fb4:	9a04      	ldr	r2, [sp, #16]
 8007fb6:	2101      	movs	r1, #1
 8007fb8:	441a      	add	r2, r3
 8007fba:	4620      	mov	r0, r4
 8007fbc:	4498      	add	r8, r3
 8007fbe:	9204      	str	r2, [sp, #16]
 8007fc0:	f000 ff0e 	bl	8008de0 <__i2b>
 8007fc4:	4607      	mov	r7, r0
 8007fc6:	2d00      	cmp	r5, #0
 8007fc8:	dd0b      	ble.n	8007fe2 <_dtoa_r+0x78a>
 8007fca:	9b04      	ldr	r3, [sp, #16]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	dd08      	ble.n	8007fe2 <_dtoa_r+0x78a>
 8007fd0:	42ab      	cmp	r3, r5
 8007fd2:	9a04      	ldr	r2, [sp, #16]
 8007fd4:	bfa8      	it	ge
 8007fd6:	462b      	movge	r3, r5
 8007fd8:	eba8 0803 	sub.w	r8, r8, r3
 8007fdc:	1aed      	subs	r5, r5, r3
 8007fde:	1ad3      	subs	r3, r2, r3
 8007fe0:	9304      	str	r3, [sp, #16]
 8007fe2:	9b06      	ldr	r3, [sp, #24]
 8007fe4:	b1fb      	cbz	r3, 8008026 <_dtoa_r+0x7ce>
 8007fe6:	9b08      	ldr	r3, [sp, #32]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f000 809f 	beq.w	800812c <_dtoa_r+0x8d4>
 8007fee:	2e00      	cmp	r6, #0
 8007ff0:	dd11      	ble.n	8008016 <_dtoa_r+0x7be>
 8007ff2:	4639      	mov	r1, r7
 8007ff4:	4632      	mov	r2, r6
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	f000 ffae 	bl	8008f58 <__pow5mult>
 8007ffc:	465a      	mov	r2, fp
 8007ffe:	4601      	mov	r1, r0
 8008000:	4607      	mov	r7, r0
 8008002:	4620      	mov	r0, r4
 8008004:	f000 ff02 	bl	8008e0c <__multiply>
 8008008:	4659      	mov	r1, fp
 800800a:	9007      	str	r0, [sp, #28]
 800800c:	4620      	mov	r0, r4
 800800e:	f000 fde1 	bl	8008bd4 <_Bfree>
 8008012:	9b07      	ldr	r3, [sp, #28]
 8008014:	469b      	mov	fp, r3
 8008016:	9b06      	ldr	r3, [sp, #24]
 8008018:	1b9a      	subs	r2, r3, r6
 800801a:	d004      	beq.n	8008026 <_dtoa_r+0x7ce>
 800801c:	4659      	mov	r1, fp
 800801e:	4620      	mov	r0, r4
 8008020:	f000 ff9a 	bl	8008f58 <__pow5mult>
 8008024:	4683      	mov	fp, r0
 8008026:	2101      	movs	r1, #1
 8008028:	4620      	mov	r0, r4
 800802a:	f000 fed9 	bl	8008de0 <__i2b>
 800802e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008030:	2b00      	cmp	r3, #0
 8008032:	4606      	mov	r6, r0
 8008034:	dd7c      	ble.n	8008130 <_dtoa_r+0x8d8>
 8008036:	461a      	mov	r2, r3
 8008038:	4601      	mov	r1, r0
 800803a:	4620      	mov	r0, r4
 800803c:	f000 ff8c 	bl	8008f58 <__pow5mult>
 8008040:	9b05      	ldr	r3, [sp, #20]
 8008042:	2b01      	cmp	r3, #1
 8008044:	4606      	mov	r6, r0
 8008046:	dd76      	ble.n	8008136 <_dtoa_r+0x8de>
 8008048:	2300      	movs	r3, #0
 800804a:	9306      	str	r3, [sp, #24]
 800804c:	6933      	ldr	r3, [r6, #16]
 800804e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008052:	6918      	ldr	r0, [r3, #16]
 8008054:	f000 fe74 	bl	8008d40 <__hi0bits>
 8008058:	f1c0 0020 	rsb	r0, r0, #32
 800805c:	9b04      	ldr	r3, [sp, #16]
 800805e:	4418      	add	r0, r3
 8008060:	f010 001f 	ands.w	r0, r0, #31
 8008064:	f000 8086 	beq.w	8008174 <_dtoa_r+0x91c>
 8008068:	f1c0 0320 	rsb	r3, r0, #32
 800806c:	2b04      	cmp	r3, #4
 800806e:	dd7f      	ble.n	8008170 <_dtoa_r+0x918>
 8008070:	f1c0 001c 	rsb	r0, r0, #28
 8008074:	9b04      	ldr	r3, [sp, #16]
 8008076:	4403      	add	r3, r0
 8008078:	4480      	add	r8, r0
 800807a:	4405      	add	r5, r0
 800807c:	9304      	str	r3, [sp, #16]
 800807e:	f1b8 0f00 	cmp.w	r8, #0
 8008082:	dd05      	ble.n	8008090 <_dtoa_r+0x838>
 8008084:	4659      	mov	r1, fp
 8008086:	4642      	mov	r2, r8
 8008088:	4620      	mov	r0, r4
 800808a:	f000 ffbf 	bl	800900c <__lshift>
 800808e:	4683      	mov	fp, r0
 8008090:	9b04      	ldr	r3, [sp, #16]
 8008092:	2b00      	cmp	r3, #0
 8008094:	dd05      	ble.n	80080a2 <_dtoa_r+0x84a>
 8008096:	4631      	mov	r1, r6
 8008098:	461a      	mov	r2, r3
 800809a:	4620      	mov	r0, r4
 800809c:	f000 ffb6 	bl	800900c <__lshift>
 80080a0:	4606      	mov	r6, r0
 80080a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d069      	beq.n	800817c <_dtoa_r+0x924>
 80080a8:	4631      	mov	r1, r6
 80080aa:	4658      	mov	r0, fp
 80080ac:	f001 f81a 	bl	80090e4 <__mcmp>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	da63      	bge.n	800817c <_dtoa_r+0x924>
 80080b4:	2300      	movs	r3, #0
 80080b6:	4659      	mov	r1, fp
 80080b8:	220a      	movs	r2, #10
 80080ba:	4620      	mov	r0, r4
 80080bc:	f000 fdac 	bl	8008c18 <__multadd>
 80080c0:	9b08      	ldr	r3, [sp, #32]
 80080c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080c6:	4683      	mov	fp, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f000 818f 	beq.w	80083ec <_dtoa_r+0xb94>
 80080ce:	4639      	mov	r1, r7
 80080d0:	2300      	movs	r3, #0
 80080d2:	220a      	movs	r2, #10
 80080d4:	4620      	mov	r0, r4
 80080d6:	f000 fd9f 	bl	8008c18 <__multadd>
 80080da:	f1b9 0f00 	cmp.w	r9, #0
 80080de:	4607      	mov	r7, r0
 80080e0:	f300 808e 	bgt.w	8008200 <_dtoa_r+0x9a8>
 80080e4:	9b05      	ldr	r3, [sp, #20]
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	dc50      	bgt.n	800818c <_dtoa_r+0x934>
 80080ea:	e089      	b.n	8008200 <_dtoa_r+0x9a8>
 80080ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80080f2:	e75d      	b.n	8007fb0 <_dtoa_r+0x758>
 80080f4:	9b01      	ldr	r3, [sp, #4]
 80080f6:	1e5e      	subs	r6, r3, #1
 80080f8:	9b06      	ldr	r3, [sp, #24]
 80080fa:	42b3      	cmp	r3, r6
 80080fc:	bfbf      	itttt	lt
 80080fe:	9b06      	ldrlt	r3, [sp, #24]
 8008100:	9606      	strlt	r6, [sp, #24]
 8008102:	1af2      	sublt	r2, r6, r3
 8008104:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008106:	bfb6      	itet	lt
 8008108:	189b      	addlt	r3, r3, r2
 800810a:	1b9e      	subge	r6, r3, r6
 800810c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800810e:	9b01      	ldr	r3, [sp, #4]
 8008110:	bfb8      	it	lt
 8008112:	2600      	movlt	r6, #0
 8008114:	2b00      	cmp	r3, #0
 8008116:	bfb5      	itete	lt
 8008118:	eba8 0503 	sublt.w	r5, r8, r3
 800811c:	9b01      	ldrge	r3, [sp, #4]
 800811e:	2300      	movlt	r3, #0
 8008120:	4645      	movge	r5, r8
 8008122:	e747      	b.n	8007fb4 <_dtoa_r+0x75c>
 8008124:	9e06      	ldr	r6, [sp, #24]
 8008126:	9f08      	ldr	r7, [sp, #32]
 8008128:	4645      	mov	r5, r8
 800812a:	e74c      	b.n	8007fc6 <_dtoa_r+0x76e>
 800812c:	9a06      	ldr	r2, [sp, #24]
 800812e:	e775      	b.n	800801c <_dtoa_r+0x7c4>
 8008130:	9b05      	ldr	r3, [sp, #20]
 8008132:	2b01      	cmp	r3, #1
 8008134:	dc18      	bgt.n	8008168 <_dtoa_r+0x910>
 8008136:	9b02      	ldr	r3, [sp, #8]
 8008138:	b9b3      	cbnz	r3, 8008168 <_dtoa_r+0x910>
 800813a:	9b03      	ldr	r3, [sp, #12]
 800813c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008140:	b9a3      	cbnz	r3, 800816c <_dtoa_r+0x914>
 8008142:	9b03      	ldr	r3, [sp, #12]
 8008144:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008148:	0d1b      	lsrs	r3, r3, #20
 800814a:	051b      	lsls	r3, r3, #20
 800814c:	b12b      	cbz	r3, 800815a <_dtoa_r+0x902>
 800814e:	9b04      	ldr	r3, [sp, #16]
 8008150:	3301      	adds	r3, #1
 8008152:	9304      	str	r3, [sp, #16]
 8008154:	f108 0801 	add.w	r8, r8, #1
 8008158:	2301      	movs	r3, #1
 800815a:	9306      	str	r3, [sp, #24]
 800815c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800815e:	2b00      	cmp	r3, #0
 8008160:	f47f af74 	bne.w	800804c <_dtoa_r+0x7f4>
 8008164:	2001      	movs	r0, #1
 8008166:	e779      	b.n	800805c <_dtoa_r+0x804>
 8008168:	2300      	movs	r3, #0
 800816a:	e7f6      	b.n	800815a <_dtoa_r+0x902>
 800816c:	9b02      	ldr	r3, [sp, #8]
 800816e:	e7f4      	b.n	800815a <_dtoa_r+0x902>
 8008170:	d085      	beq.n	800807e <_dtoa_r+0x826>
 8008172:	4618      	mov	r0, r3
 8008174:	301c      	adds	r0, #28
 8008176:	e77d      	b.n	8008074 <_dtoa_r+0x81c>
 8008178:	40240000 	.word	0x40240000
 800817c:	9b01      	ldr	r3, [sp, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	dc38      	bgt.n	80081f4 <_dtoa_r+0x99c>
 8008182:	9b05      	ldr	r3, [sp, #20]
 8008184:	2b02      	cmp	r3, #2
 8008186:	dd35      	ble.n	80081f4 <_dtoa_r+0x99c>
 8008188:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800818c:	f1b9 0f00 	cmp.w	r9, #0
 8008190:	d10d      	bne.n	80081ae <_dtoa_r+0x956>
 8008192:	4631      	mov	r1, r6
 8008194:	464b      	mov	r3, r9
 8008196:	2205      	movs	r2, #5
 8008198:	4620      	mov	r0, r4
 800819a:	f000 fd3d 	bl	8008c18 <__multadd>
 800819e:	4601      	mov	r1, r0
 80081a0:	4606      	mov	r6, r0
 80081a2:	4658      	mov	r0, fp
 80081a4:	f000 ff9e 	bl	80090e4 <__mcmp>
 80081a8:	2800      	cmp	r0, #0
 80081aa:	f73f adbd 	bgt.w	8007d28 <_dtoa_r+0x4d0>
 80081ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081b0:	9d00      	ldr	r5, [sp, #0]
 80081b2:	ea6f 0a03 	mvn.w	sl, r3
 80081b6:	f04f 0800 	mov.w	r8, #0
 80081ba:	4631      	mov	r1, r6
 80081bc:	4620      	mov	r0, r4
 80081be:	f000 fd09 	bl	8008bd4 <_Bfree>
 80081c2:	2f00      	cmp	r7, #0
 80081c4:	f43f aeb4 	beq.w	8007f30 <_dtoa_r+0x6d8>
 80081c8:	f1b8 0f00 	cmp.w	r8, #0
 80081cc:	d005      	beq.n	80081da <_dtoa_r+0x982>
 80081ce:	45b8      	cmp	r8, r7
 80081d0:	d003      	beq.n	80081da <_dtoa_r+0x982>
 80081d2:	4641      	mov	r1, r8
 80081d4:	4620      	mov	r0, r4
 80081d6:	f000 fcfd 	bl	8008bd4 <_Bfree>
 80081da:	4639      	mov	r1, r7
 80081dc:	4620      	mov	r0, r4
 80081de:	f000 fcf9 	bl	8008bd4 <_Bfree>
 80081e2:	e6a5      	b.n	8007f30 <_dtoa_r+0x6d8>
 80081e4:	2600      	movs	r6, #0
 80081e6:	4637      	mov	r7, r6
 80081e8:	e7e1      	b.n	80081ae <_dtoa_r+0x956>
 80081ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80081ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80081f0:	4637      	mov	r7, r6
 80081f2:	e599      	b.n	8007d28 <_dtoa_r+0x4d0>
 80081f4:	9b08      	ldr	r3, [sp, #32]
 80081f6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f000 80fd 	beq.w	80083fa <_dtoa_r+0xba2>
 8008200:	2d00      	cmp	r5, #0
 8008202:	dd05      	ble.n	8008210 <_dtoa_r+0x9b8>
 8008204:	4639      	mov	r1, r7
 8008206:	462a      	mov	r2, r5
 8008208:	4620      	mov	r0, r4
 800820a:	f000 feff 	bl	800900c <__lshift>
 800820e:	4607      	mov	r7, r0
 8008210:	9b06      	ldr	r3, [sp, #24]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d05c      	beq.n	80082d0 <_dtoa_r+0xa78>
 8008216:	6879      	ldr	r1, [r7, #4]
 8008218:	4620      	mov	r0, r4
 800821a:	f000 fc9b 	bl	8008b54 <_Balloc>
 800821e:	4605      	mov	r5, r0
 8008220:	b928      	cbnz	r0, 800822e <_dtoa_r+0x9d6>
 8008222:	4b80      	ldr	r3, [pc, #512]	; (8008424 <_dtoa_r+0xbcc>)
 8008224:	4602      	mov	r2, r0
 8008226:	f240 21ea 	movw	r1, #746	; 0x2ea
 800822a:	f7ff bb2e 	b.w	800788a <_dtoa_r+0x32>
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	3202      	adds	r2, #2
 8008232:	0092      	lsls	r2, r2, #2
 8008234:	f107 010c 	add.w	r1, r7, #12
 8008238:	300c      	adds	r0, #12
 800823a:	f7fd fbe7 	bl	8005a0c <memcpy>
 800823e:	2201      	movs	r2, #1
 8008240:	4629      	mov	r1, r5
 8008242:	4620      	mov	r0, r4
 8008244:	f000 fee2 	bl	800900c <__lshift>
 8008248:	9b00      	ldr	r3, [sp, #0]
 800824a:	3301      	adds	r3, #1
 800824c:	9301      	str	r3, [sp, #4]
 800824e:	9b00      	ldr	r3, [sp, #0]
 8008250:	444b      	add	r3, r9
 8008252:	9307      	str	r3, [sp, #28]
 8008254:	9b02      	ldr	r3, [sp, #8]
 8008256:	f003 0301 	and.w	r3, r3, #1
 800825a:	46b8      	mov	r8, r7
 800825c:	9306      	str	r3, [sp, #24]
 800825e:	4607      	mov	r7, r0
 8008260:	9b01      	ldr	r3, [sp, #4]
 8008262:	4631      	mov	r1, r6
 8008264:	3b01      	subs	r3, #1
 8008266:	4658      	mov	r0, fp
 8008268:	9302      	str	r3, [sp, #8]
 800826a:	f7ff fa67 	bl	800773c <quorem>
 800826e:	4603      	mov	r3, r0
 8008270:	3330      	adds	r3, #48	; 0x30
 8008272:	9004      	str	r0, [sp, #16]
 8008274:	4641      	mov	r1, r8
 8008276:	4658      	mov	r0, fp
 8008278:	9308      	str	r3, [sp, #32]
 800827a:	f000 ff33 	bl	80090e4 <__mcmp>
 800827e:	463a      	mov	r2, r7
 8008280:	4681      	mov	r9, r0
 8008282:	4631      	mov	r1, r6
 8008284:	4620      	mov	r0, r4
 8008286:	f000 ff49 	bl	800911c <__mdiff>
 800828a:	68c2      	ldr	r2, [r0, #12]
 800828c:	9b08      	ldr	r3, [sp, #32]
 800828e:	4605      	mov	r5, r0
 8008290:	bb02      	cbnz	r2, 80082d4 <_dtoa_r+0xa7c>
 8008292:	4601      	mov	r1, r0
 8008294:	4658      	mov	r0, fp
 8008296:	f000 ff25 	bl	80090e4 <__mcmp>
 800829a:	9b08      	ldr	r3, [sp, #32]
 800829c:	4602      	mov	r2, r0
 800829e:	4629      	mov	r1, r5
 80082a0:	4620      	mov	r0, r4
 80082a2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80082a6:	f000 fc95 	bl	8008bd4 <_Bfree>
 80082aa:	9b05      	ldr	r3, [sp, #20]
 80082ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082ae:	9d01      	ldr	r5, [sp, #4]
 80082b0:	ea43 0102 	orr.w	r1, r3, r2
 80082b4:	9b06      	ldr	r3, [sp, #24]
 80082b6:	430b      	orrs	r3, r1
 80082b8:	9b08      	ldr	r3, [sp, #32]
 80082ba:	d10d      	bne.n	80082d8 <_dtoa_r+0xa80>
 80082bc:	2b39      	cmp	r3, #57	; 0x39
 80082be:	d029      	beq.n	8008314 <_dtoa_r+0xabc>
 80082c0:	f1b9 0f00 	cmp.w	r9, #0
 80082c4:	dd01      	ble.n	80082ca <_dtoa_r+0xa72>
 80082c6:	9b04      	ldr	r3, [sp, #16]
 80082c8:	3331      	adds	r3, #49	; 0x31
 80082ca:	9a02      	ldr	r2, [sp, #8]
 80082cc:	7013      	strb	r3, [r2, #0]
 80082ce:	e774      	b.n	80081ba <_dtoa_r+0x962>
 80082d0:	4638      	mov	r0, r7
 80082d2:	e7b9      	b.n	8008248 <_dtoa_r+0x9f0>
 80082d4:	2201      	movs	r2, #1
 80082d6:	e7e2      	b.n	800829e <_dtoa_r+0xa46>
 80082d8:	f1b9 0f00 	cmp.w	r9, #0
 80082dc:	db06      	blt.n	80082ec <_dtoa_r+0xa94>
 80082de:	9905      	ldr	r1, [sp, #20]
 80082e0:	ea41 0909 	orr.w	r9, r1, r9
 80082e4:	9906      	ldr	r1, [sp, #24]
 80082e6:	ea59 0101 	orrs.w	r1, r9, r1
 80082ea:	d120      	bne.n	800832e <_dtoa_r+0xad6>
 80082ec:	2a00      	cmp	r2, #0
 80082ee:	ddec      	ble.n	80082ca <_dtoa_r+0xa72>
 80082f0:	4659      	mov	r1, fp
 80082f2:	2201      	movs	r2, #1
 80082f4:	4620      	mov	r0, r4
 80082f6:	9301      	str	r3, [sp, #4]
 80082f8:	f000 fe88 	bl	800900c <__lshift>
 80082fc:	4631      	mov	r1, r6
 80082fe:	4683      	mov	fp, r0
 8008300:	f000 fef0 	bl	80090e4 <__mcmp>
 8008304:	2800      	cmp	r0, #0
 8008306:	9b01      	ldr	r3, [sp, #4]
 8008308:	dc02      	bgt.n	8008310 <_dtoa_r+0xab8>
 800830a:	d1de      	bne.n	80082ca <_dtoa_r+0xa72>
 800830c:	07da      	lsls	r2, r3, #31
 800830e:	d5dc      	bpl.n	80082ca <_dtoa_r+0xa72>
 8008310:	2b39      	cmp	r3, #57	; 0x39
 8008312:	d1d8      	bne.n	80082c6 <_dtoa_r+0xa6e>
 8008314:	9a02      	ldr	r2, [sp, #8]
 8008316:	2339      	movs	r3, #57	; 0x39
 8008318:	7013      	strb	r3, [r2, #0]
 800831a:	462b      	mov	r3, r5
 800831c:	461d      	mov	r5, r3
 800831e:	3b01      	subs	r3, #1
 8008320:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008324:	2a39      	cmp	r2, #57	; 0x39
 8008326:	d050      	beq.n	80083ca <_dtoa_r+0xb72>
 8008328:	3201      	adds	r2, #1
 800832a:	701a      	strb	r2, [r3, #0]
 800832c:	e745      	b.n	80081ba <_dtoa_r+0x962>
 800832e:	2a00      	cmp	r2, #0
 8008330:	dd03      	ble.n	800833a <_dtoa_r+0xae2>
 8008332:	2b39      	cmp	r3, #57	; 0x39
 8008334:	d0ee      	beq.n	8008314 <_dtoa_r+0xabc>
 8008336:	3301      	adds	r3, #1
 8008338:	e7c7      	b.n	80082ca <_dtoa_r+0xa72>
 800833a:	9a01      	ldr	r2, [sp, #4]
 800833c:	9907      	ldr	r1, [sp, #28]
 800833e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008342:	428a      	cmp	r2, r1
 8008344:	d02a      	beq.n	800839c <_dtoa_r+0xb44>
 8008346:	4659      	mov	r1, fp
 8008348:	2300      	movs	r3, #0
 800834a:	220a      	movs	r2, #10
 800834c:	4620      	mov	r0, r4
 800834e:	f000 fc63 	bl	8008c18 <__multadd>
 8008352:	45b8      	cmp	r8, r7
 8008354:	4683      	mov	fp, r0
 8008356:	f04f 0300 	mov.w	r3, #0
 800835a:	f04f 020a 	mov.w	r2, #10
 800835e:	4641      	mov	r1, r8
 8008360:	4620      	mov	r0, r4
 8008362:	d107      	bne.n	8008374 <_dtoa_r+0xb1c>
 8008364:	f000 fc58 	bl	8008c18 <__multadd>
 8008368:	4680      	mov	r8, r0
 800836a:	4607      	mov	r7, r0
 800836c:	9b01      	ldr	r3, [sp, #4]
 800836e:	3301      	adds	r3, #1
 8008370:	9301      	str	r3, [sp, #4]
 8008372:	e775      	b.n	8008260 <_dtoa_r+0xa08>
 8008374:	f000 fc50 	bl	8008c18 <__multadd>
 8008378:	4639      	mov	r1, r7
 800837a:	4680      	mov	r8, r0
 800837c:	2300      	movs	r3, #0
 800837e:	220a      	movs	r2, #10
 8008380:	4620      	mov	r0, r4
 8008382:	f000 fc49 	bl	8008c18 <__multadd>
 8008386:	4607      	mov	r7, r0
 8008388:	e7f0      	b.n	800836c <_dtoa_r+0xb14>
 800838a:	f1b9 0f00 	cmp.w	r9, #0
 800838e:	9a00      	ldr	r2, [sp, #0]
 8008390:	bfcc      	ite	gt
 8008392:	464d      	movgt	r5, r9
 8008394:	2501      	movle	r5, #1
 8008396:	4415      	add	r5, r2
 8008398:	f04f 0800 	mov.w	r8, #0
 800839c:	4659      	mov	r1, fp
 800839e:	2201      	movs	r2, #1
 80083a0:	4620      	mov	r0, r4
 80083a2:	9301      	str	r3, [sp, #4]
 80083a4:	f000 fe32 	bl	800900c <__lshift>
 80083a8:	4631      	mov	r1, r6
 80083aa:	4683      	mov	fp, r0
 80083ac:	f000 fe9a 	bl	80090e4 <__mcmp>
 80083b0:	2800      	cmp	r0, #0
 80083b2:	dcb2      	bgt.n	800831a <_dtoa_r+0xac2>
 80083b4:	d102      	bne.n	80083bc <_dtoa_r+0xb64>
 80083b6:	9b01      	ldr	r3, [sp, #4]
 80083b8:	07db      	lsls	r3, r3, #31
 80083ba:	d4ae      	bmi.n	800831a <_dtoa_r+0xac2>
 80083bc:	462b      	mov	r3, r5
 80083be:	461d      	mov	r5, r3
 80083c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083c4:	2a30      	cmp	r2, #48	; 0x30
 80083c6:	d0fa      	beq.n	80083be <_dtoa_r+0xb66>
 80083c8:	e6f7      	b.n	80081ba <_dtoa_r+0x962>
 80083ca:	9a00      	ldr	r2, [sp, #0]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d1a5      	bne.n	800831c <_dtoa_r+0xac4>
 80083d0:	f10a 0a01 	add.w	sl, sl, #1
 80083d4:	2331      	movs	r3, #49	; 0x31
 80083d6:	e779      	b.n	80082cc <_dtoa_r+0xa74>
 80083d8:	4b13      	ldr	r3, [pc, #76]	; (8008428 <_dtoa_r+0xbd0>)
 80083da:	f7ff baaf 	b.w	800793c <_dtoa_r+0xe4>
 80083de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f47f aa86 	bne.w	80078f2 <_dtoa_r+0x9a>
 80083e6:	4b11      	ldr	r3, [pc, #68]	; (800842c <_dtoa_r+0xbd4>)
 80083e8:	f7ff baa8 	b.w	800793c <_dtoa_r+0xe4>
 80083ec:	f1b9 0f00 	cmp.w	r9, #0
 80083f0:	dc03      	bgt.n	80083fa <_dtoa_r+0xba2>
 80083f2:	9b05      	ldr	r3, [sp, #20]
 80083f4:	2b02      	cmp	r3, #2
 80083f6:	f73f aec9 	bgt.w	800818c <_dtoa_r+0x934>
 80083fa:	9d00      	ldr	r5, [sp, #0]
 80083fc:	4631      	mov	r1, r6
 80083fe:	4658      	mov	r0, fp
 8008400:	f7ff f99c 	bl	800773c <quorem>
 8008404:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008408:	f805 3b01 	strb.w	r3, [r5], #1
 800840c:	9a00      	ldr	r2, [sp, #0]
 800840e:	1aaa      	subs	r2, r5, r2
 8008410:	4591      	cmp	r9, r2
 8008412:	ddba      	ble.n	800838a <_dtoa_r+0xb32>
 8008414:	4659      	mov	r1, fp
 8008416:	2300      	movs	r3, #0
 8008418:	220a      	movs	r2, #10
 800841a:	4620      	mov	r0, r4
 800841c:	f000 fbfc 	bl	8008c18 <__multadd>
 8008420:	4683      	mov	fp, r0
 8008422:	e7eb      	b.n	80083fc <_dtoa_r+0xba4>
 8008424:	0800a68c 	.word	0x0800a68c
 8008428:	0800a48c 	.word	0x0800a48c
 800842c:	0800a609 	.word	0x0800a609

08008430 <rshift>:
 8008430:	6903      	ldr	r3, [r0, #16]
 8008432:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008436:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800843a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800843e:	f100 0414 	add.w	r4, r0, #20
 8008442:	dd45      	ble.n	80084d0 <rshift+0xa0>
 8008444:	f011 011f 	ands.w	r1, r1, #31
 8008448:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800844c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008450:	d10c      	bne.n	800846c <rshift+0x3c>
 8008452:	f100 0710 	add.w	r7, r0, #16
 8008456:	4629      	mov	r1, r5
 8008458:	42b1      	cmp	r1, r6
 800845a:	d334      	bcc.n	80084c6 <rshift+0x96>
 800845c:	1a9b      	subs	r3, r3, r2
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	1eea      	subs	r2, r5, #3
 8008462:	4296      	cmp	r6, r2
 8008464:	bf38      	it	cc
 8008466:	2300      	movcc	r3, #0
 8008468:	4423      	add	r3, r4
 800846a:	e015      	b.n	8008498 <rshift+0x68>
 800846c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008470:	f1c1 0820 	rsb	r8, r1, #32
 8008474:	40cf      	lsrs	r7, r1
 8008476:	f105 0e04 	add.w	lr, r5, #4
 800847a:	46a1      	mov	r9, r4
 800847c:	4576      	cmp	r6, lr
 800847e:	46f4      	mov	ip, lr
 8008480:	d815      	bhi.n	80084ae <rshift+0x7e>
 8008482:	1a9b      	subs	r3, r3, r2
 8008484:	009a      	lsls	r2, r3, #2
 8008486:	3a04      	subs	r2, #4
 8008488:	3501      	adds	r5, #1
 800848a:	42ae      	cmp	r6, r5
 800848c:	bf38      	it	cc
 800848e:	2200      	movcc	r2, #0
 8008490:	18a3      	adds	r3, r4, r2
 8008492:	50a7      	str	r7, [r4, r2]
 8008494:	b107      	cbz	r7, 8008498 <rshift+0x68>
 8008496:	3304      	adds	r3, #4
 8008498:	1b1a      	subs	r2, r3, r4
 800849a:	42a3      	cmp	r3, r4
 800849c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80084a0:	bf08      	it	eq
 80084a2:	2300      	moveq	r3, #0
 80084a4:	6102      	str	r2, [r0, #16]
 80084a6:	bf08      	it	eq
 80084a8:	6143      	streq	r3, [r0, #20]
 80084aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084ae:	f8dc c000 	ldr.w	ip, [ip]
 80084b2:	fa0c fc08 	lsl.w	ip, ip, r8
 80084b6:	ea4c 0707 	orr.w	r7, ip, r7
 80084ba:	f849 7b04 	str.w	r7, [r9], #4
 80084be:	f85e 7b04 	ldr.w	r7, [lr], #4
 80084c2:	40cf      	lsrs	r7, r1
 80084c4:	e7da      	b.n	800847c <rshift+0x4c>
 80084c6:	f851 cb04 	ldr.w	ip, [r1], #4
 80084ca:	f847 cf04 	str.w	ip, [r7, #4]!
 80084ce:	e7c3      	b.n	8008458 <rshift+0x28>
 80084d0:	4623      	mov	r3, r4
 80084d2:	e7e1      	b.n	8008498 <rshift+0x68>

080084d4 <__hexdig_fun>:
 80084d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80084d8:	2b09      	cmp	r3, #9
 80084da:	d802      	bhi.n	80084e2 <__hexdig_fun+0xe>
 80084dc:	3820      	subs	r0, #32
 80084de:	b2c0      	uxtb	r0, r0
 80084e0:	4770      	bx	lr
 80084e2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80084e6:	2b05      	cmp	r3, #5
 80084e8:	d801      	bhi.n	80084ee <__hexdig_fun+0x1a>
 80084ea:	3847      	subs	r0, #71	; 0x47
 80084ec:	e7f7      	b.n	80084de <__hexdig_fun+0xa>
 80084ee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80084f2:	2b05      	cmp	r3, #5
 80084f4:	d801      	bhi.n	80084fa <__hexdig_fun+0x26>
 80084f6:	3827      	subs	r0, #39	; 0x27
 80084f8:	e7f1      	b.n	80084de <__hexdig_fun+0xa>
 80084fa:	2000      	movs	r0, #0
 80084fc:	4770      	bx	lr
	...

08008500 <__gethex>:
 8008500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008504:	ed2d 8b02 	vpush	{d8}
 8008508:	b089      	sub	sp, #36	; 0x24
 800850a:	ee08 0a10 	vmov	s16, r0
 800850e:	9304      	str	r3, [sp, #16]
 8008510:	4bbc      	ldr	r3, [pc, #752]	; (8008804 <__gethex+0x304>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	9301      	str	r3, [sp, #4]
 8008516:	4618      	mov	r0, r3
 8008518:	468b      	mov	fp, r1
 800851a:	4690      	mov	r8, r2
 800851c:	f7f7 fea8 	bl	8000270 <strlen>
 8008520:	9b01      	ldr	r3, [sp, #4]
 8008522:	f8db 2000 	ldr.w	r2, [fp]
 8008526:	4403      	add	r3, r0
 8008528:	4682      	mov	sl, r0
 800852a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800852e:	9305      	str	r3, [sp, #20]
 8008530:	1c93      	adds	r3, r2, #2
 8008532:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008536:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800853a:	32fe      	adds	r2, #254	; 0xfe
 800853c:	18d1      	adds	r1, r2, r3
 800853e:	461f      	mov	r7, r3
 8008540:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008544:	9100      	str	r1, [sp, #0]
 8008546:	2830      	cmp	r0, #48	; 0x30
 8008548:	d0f8      	beq.n	800853c <__gethex+0x3c>
 800854a:	f7ff ffc3 	bl	80084d4 <__hexdig_fun>
 800854e:	4604      	mov	r4, r0
 8008550:	2800      	cmp	r0, #0
 8008552:	d13a      	bne.n	80085ca <__gethex+0xca>
 8008554:	9901      	ldr	r1, [sp, #4]
 8008556:	4652      	mov	r2, sl
 8008558:	4638      	mov	r0, r7
 800855a:	f001 f929 	bl	80097b0 <strncmp>
 800855e:	4605      	mov	r5, r0
 8008560:	2800      	cmp	r0, #0
 8008562:	d168      	bne.n	8008636 <__gethex+0x136>
 8008564:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008568:	eb07 060a 	add.w	r6, r7, sl
 800856c:	f7ff ffb2 	bl	80084d4 <__hexdig_fun>
 8008570:	2800      	cmp	r0, #0
 8008572:	d062      	beq.n	800863a <__gethex+0x13a>
 8008574:	4633      	mov	r3, r6
 8008576:	7818      	ldrb	r0, [r3, #0]
 8008578:	2830      	cmp	r0, #48	; 0x30
 800857a:	461f      	mov	r7, r3
 800857c:	f103 0301 	add.w	r3, r3, #1
 8008580:	d0f9      	beq.n	8008576 <__gethex+0x76>
 8008582:	f7ff ffa7 	bl	80084d4 <__hexdig_fun>
 8008586:	2301      	movs	r3, #1
 8008588:	fab0 f480 	clz	r4, r0
 800858c:	0964      	lsrs	r4, r4, #5
 800858e:	4635      	mov	r5, r6
 8008590:	9300      	str	r3, [sp, #0]
 8008592:	463a      	mov	r2, r7
 8008594:	4616      	mov	r6, r2
 8008596:	3201      	adds	r2, #1
 8008598:	7830      	ldrb	r0, [r6, #0]
 800859a:	f7ff ff9b 	bl	80084d4 <__hexdig_fun>
 800859e:	2800      	cmp	r0, #0
 80085a0:	d1f8      	bne.n	8008594 <__gethex+0x94>
 80085a2:	9901      	ldr	r1, [sp, #4]
 80085a4:	4652      	mov	r2, sl
 80085a6:	4630      	mov	r0, r6
 80085a8:	f001 f902 	bl	80097b0 <strncmp>
 80085ac:	b980      	cbnz	r0, 80085d0 <__gethex+0xd0>
 80085ae:	b94d      	cbnz	r5, 80085c4 <__gethex+0xc4>
 80085b0:	eb06 050a 	add.w	r5, r6, sl
 80085b4:	462a      	mov	r2, r5
 80085b6:	4616      	mov	r6, r2
 80085b8:	3201      	adds	r2, #1
 80085ba:	7830      	ldrb	r0, [r6, #0]
 80085bc:	f7ff ff8a 	bl	80084d4 <__hexdig_fun>
 80085c0:	2800      	cmp	r0, #0
 80085c2:	d1f8      	bne.n	80085b6 <__gethex+0xb6>
 80085c4:	1bad      	subs	r5, r5, r6
 80085c6:	00ad      	lsls	r5, r5, #2
 80085c8:	e004      	b.n	80085d4 <__gethex+0xd4>
 80085ca:	2400      	movs	r4, #0
 80085cc:	4625      	mov	r5, r4
 80085ce:	e7e0      	b.n	8008592 <__gethex+0x92>
 80085d0:	2d00      	cmp	r5, #0
 80085d2:	d1f7      	bne.n	80085c4 <__gethex+0xc4>
 80085d4:	7833      	ldrb	r3, [r6, #0]
 80085d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80085da:	2b50      	cmp	r3, #80	; 0x50
 80085dc:	d13b      	bne.n	8008656 <__gethex+0x156>
 80085de:	7873      	ldrb	r3, [r6, #1]
 80085e0:	2b2b      	cmp	r3, #43	; 0x2b
 80085e2:	d02c      	beq.n	800863e <__gethex+0x13e>
 80085e4:	2b2d      	cmp	r3, #45	; 0x2d
 80085e6:	d02e      	beq.n	8008646 <__gethex+0x146>
 80085e8:	1c71      	adds	r1, r6, #1
 80085ea:	f04f 0900 	mov.w	r9, #0
 80085ee:	7808      	ldrb	r0, [r1, #0]
 80085f0:	f7ff ff70 	bl	80084d4 <__hexdig_fun>
 80085f4:	1e43      	subs	r3, r0, #1
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	2b18      	cmp	r3, #24
 80085fa:	d82c      	bhi.n	8008656 <__gethex+0x156>
 80085fc:	f1a0 0210 	sub.w	r2, r0, #16
 8008600:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008604:	f7ff ff66 	bl	80084d4 <__hexdig_fun>
 8008608:	1e43      	subs	r3, r0, #1
 800860a:	b2db      	uxtb	r3, r3
 800860c:	2b18      	cmp	r3, #24
 800860e:	d91d      	bls.n	800864c <__gethex+0x14c>
 8008610:	f1b9 0f00 	cmp.w	r9, #0
 8008614:	d000      	beq.n	8008618 <__gethex+0x118>
 8008616:	4252      	negs	r2, r2
 8008618:	4415      	add	r5, r2
 800861a:	f8cb 1000 	str.w	r1, [fp]
 800861e:	b1e4      	cbz	r4, 800865a <__gethex+0x15a>
 8008620:	9b00      	ldr	r3, [sp, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	bf14      	ite	ne
 8008626:	2700      	movne	r7, #0
 8008628:	2706      	moveq	r7, #6
 800862a:	4638      	mov	r0, r7
 800862c:	b009      	add	sp, #36	; 0x24
 800862e:	ecbd 8b02 	vpop	{d8}
 8008632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008636:	463e      	mov	r6, r7
 8008638:	4625      	mov	r5, r4
 800863a:	2401      	movs	r4, #1
 800863c:	e7ca      	b.n	80085d4 <__gethex+0xd4>
 800863e:	f04f 0900 	mov.w	r9, #0
 8008642:	1cb1      	adds	r1, r6, #2
 8008644:	e7d3      	b.n	80085ee <__gethex+0xee>
 8008646:	f04f 0901 	mov.w	r9, #1
 800864a:	e7fa      	b.n	8008642 <__gethex+0x142>
 800864c:	230a      	movs	r3, #10
 800864e:	fb03 0202 	mla	r2, r3, r2, r0
 8008652:	3a10      	subs	r2, #16
 8008654:	e7d4      	b.n	8008600 <__gethex+0x100>
 8008656:	4631      	mov	r1, r6
 8008658:	e7df      	b.n	800861a <__gethex+0x11a>
 800865a:	1bf3      	subs	r3, r6, r7
 800865c:	3b01      	subs	r3, #1
 800865e:	4621      	mov	r1, r4
 8008660:	2b07      	cmp	r3, #7
 8008662:	dc0b      	bgt.n	800867c <__gethex+0x17c>
 8008664:	ee18 0a10 	vmov	r0, s16
 8008668:	f000 fa74 	bl	8008b54 <_Balloc>
 800866c:	4604      	mov	r4, r0
 800866e:	b940      	cbnz	r0, 8008682 <__gethex+0x182>
 8008670:	4b65      	ldr	r3, [pc, #404]	; (8008808 <__gethex+0x308>)
 8008672:	4602      	mov	r2, r0
 8008674:	21de      	movs	r1, #222	; 0xde
 8008676:	4865      	ldr	r0, [pc, #404]	; (800880c <__gethex+0x30c>)
 8008678:	f001 f8ba 	bl	80097f0 <__assert_func>
 800867c:	3101      	adds	r1, #1
 800867e:	105b      	asrs	r3, r3, #1
 8008680:	e7ee      	b.n	8008660 <__gethex+0x160>
 8008682:	f100 0914 	add.w	r9, r0, #20
 8008686:	f04f 0b00 	mov.w	fp, #0
 800868a:	f1ca 0301 	rsb	r3, sl, #1
 800868e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008692:	f8cd b000 	str.w	fp, [sp]
 8008696:	9306      	str	r3, [sp, #24]
 8008698:	42b7      	cmp	r7, r6
 800869a:	d340      	bcc.n	800871e <__gethex+0x21e>
 800869c:	9802      	ldr	r0, [sp, #8]
 800869e:	9b00      	ldr	r3, [sp, #0]
 80086a0:	f840 3b04 	str.w	r3, [r0], #4
 80086a4:	eba0 0009 	sub.w	r0, r0, r9
 80086a8:	1080      	asrs	r0, r0, #2
 80086aa:	0146      	lsls	r6, r0, #5
 80086ac:	6120      	str	r0, [r4, #16]
 80086ae:	4618      	mov	r0, r3
 80086b0:	f000 fb46 	bl	8008d40 <__hi0bits>
 80086b4:	1a30      	subs	r0, r6, r0
 80086b6:	f8d8 6000 	ldr.w	r6, [r8]
 80086ba:	42b0      	cmp	r0, r6
 80086bc:	dd63      	ble.n	8008786 <__gethex+0x286>
 80086be:	1b87      	subs	r7, r0, r6
 80086c0:	4639      	mov	r1, r7
 80086c2:	4620      	mov	r0, r4
 80086c4:	f000 fee0 	bl	8009488 <__any_on>
 80086c8:	4682      	mov	sl, r0
 80086ca:	b1a8      	cbz	r0, 80086f8 <__gethex+0x1f8>
 80086cc:	1e7b      	subs	r3, r7, #1
 80086ce:	1159      	asrs	r1, r3, #5
 80086d0:	f003 021f 	and.w	r2, r3, #31
 80086d4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80086d8:	f04f 0a01 	mov.w	sl, #1
 80086dc:	fa0a f202 	lsl.w	r2, sl, r2
 80086e0:	420a      	tst	r2, r1
 80086e2:	d009      	beq.n	80086f8 <__gethex+0x1f8>
 80086e4:	4553      	cmp	r3, sl
 80086e6:	dd05      	ble.n	80086f4 <__gethex+0x1f4>
 80086e8:	1eb9      	subs	r1, r7, #2
 80086ea:	4620      	mov	r0, r4
 80086ec:	f000 fecc 	bl	8009488 <__any_on>
 80086f0:	2800      	cmp	r0, #0
 80086f2:	d145      	bne.n	8008780 <__gethex+0x280>
 80086f4:	f04f 0a02 	mov.w	sl, #2
 80086f8:	4639      	mov	r1, r7
 80086fa:	4620      	mov	r0, r4
 80086fc:	f7ff fe98 	bl	8008430 <rshift>
 8008700:	443d      	add	r5, r7
 8008702:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008706:	42ab      	cmp	r3, r5
 8008708:	da4c      	bge.n	80087a4 <__gethex+0x2a4>
 800870a:	ee18 0a10 	vmov	r0, s16
 800870e:	4621      	mov	r1, r4
 8008710:	f000 fa60 	bl	8008bd4 <_Bfree>
 8008714:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008716:	2300      	movs	r3, #0
 8008718:	6013      	str	r3, [r2, #0]
 800871a:	27a3      	movs	r7, #163	; 0xa3
 800871c:	e785      	b.n	800862a <__gethex+0x12a>
 800871e:	1e73      	subs	r3, r6, #1
 8008720:	9a05      	ldr	r2, [sp, #20]
 8008722:	9303      	str	r3, [sp, #12]
 8008724:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008728:	4293      	cmp	r3, r2
 800872a:	d019      	beq.n	8008760 <__gethex+0x260>
 800872c:	f1bb 0f20 	cmp.w	fp, #32
 8008730:	d107      	bne.n	8008742 <__gethex+0x242>
 8008732:	9b02      	ldr	r3, [sp, #8]
 8008734:	9a00      	ldr	r2, [sp, #0]
 8008736:	f843 2b04 	str.w	r2, [r3], #4
 800873a:	9302      	str	r3, [sp, #8]
 800873c:	2300      	movs	r3, #0
 800873e:	9300      	str	r3, [sp, #0]
 8008740:	469b      	mov	fp, r3
 8008742:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008746:	f7ff fec5 	bl	80084d4 <__hexdig_fun>
 800874a:	9b00      	ldr	r3, [sp, #0]
 800874c:	f000 000f 	and.w	r0, r0, #15
 8008750:	fa00 f00b 	lsl.w	r0, r0, fp
 8008754:	4303      	orrs	r3, r0
 8008756:	9300      	str	r3, [sp, #0]
 8008758:	f10b 0b04 	add.w	fp, fp, #4
 800875c:	9b03      	ldr	r3, [sp, #12]
 800875e:	e00d      	b.n	800877c <__gethex+0x27c>
 8008760:	9b03      	ldr	r3, [sp, #12]
 8008762:	9a06      	ldr	r2, [sp, #24]
 8008764:	4413      	add	r3, r2
 8008766:	42bb      	cmp	r3, r7
 8008768:	d3e0      	bcc.n	800872c <__gethex+0x22c>
 800876a:	4618      	mov	r0, r3
 800876c:	9901      	ldr	r1, [sp, #4]
 800876e:	9307      	str	r3, [sp, #28]
 8008770:	4652      	mov	r2, sl
 8008772:	f001 f81d 	bl	80097b0 <strncmp>
 8008776:	9b07      	ldr	r3, [sp, #28]
 8008778:	2800      	cmp	r0, #0
 800877a:	d1d7      	bne.n	800872c <__gethex+0x22c>
 800877c:	461e      	mov	r6, r3
 800877e:	e78b      	b.n	8008698 <__gethex+0x198>
 8008780:	f04f 0a03 	mov.w	sl, #3
 8008784:	e7b8      	b.n	80086f8 <__gethex+0x1f8>
 8008786:	da0a      	bge.n	800879e <__gethex+0x29e>
 8008788:	1a37      	subs	r7, r6, r0
 800878a:	4621      	mov	r1, r4
 800878c:	ee18 0a10 	vmov	r0, s16
 8008790:	463a      	mov	r2, r7
 8008792:	f000 fc3b 	bl	800900c <__lshift>
 8008796:	1bed      	subs	r5, r5, r7
 8008798:	4604      	mov	r4, r0
 800879a:	f100 0914 	add.w	r9, r0, #20
 800879e:	f04f 0a00 	mov.w	sl, #0
 80087a2:	e7ae      	b.n	8008702 <__gethex+0x202>
 80087a4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80087a8:	42a8      	cmp	r0, r5
 80087aa:	dd72      	ble.n	8008892 <__gethex+0x392>
 80087ac:	1b45      	subs	r5, r0, r5
 80087ae:	42ae      	cmp	r6, r5
 80087b0:	dc36      	bgt.n	8008820 <__gethex+0x320>
 80087b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d02a      	beq.n	8008810 <__gethex+0x310>
 80087ba:	2b03      	cmp	r3, #3
 80087bc:	d02c      	beq.n	8008818 <__gethex+0x318>
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d115      	bne.n	80087ee <__gethex+0x2ee>
 80087c2:	42ae      	cmp	r6, r5
 80087c4:	d113      	bne.n	80087ee <__gethex+0x2ee>
 80087c6:	2e01      	cmp	r6, #1
 80087c8:	d10b      	bne.n	80087e2 <__gethex+0x2e2>
 80087ca:	9a04      	ldr	r2, [sp, #16]
 80087cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80087d0:	6013      	str	r3, [r2, #0]
 80087d2:	2301      	movs	r3, #1
 80087d4:	6123      	str	r3, [r4, #16]
 80087d6:	f8c9 3000 	str.w	r3, [r9]
 80087da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087dc:	2762      	movs	r7, #98	; 0x62
 80087de:	601c      	str	r4, [r3, #0]
 80087e0:	e723      	b.n	800862a <__gethex+0x12a>
 80087e2:	1e71      	subs	r1, r6, #1
 80087e4:	4620      	mov	r0, r4
 80087e6:	f000 fe4f 	bl	8009488 <__any_on>
 80087ea:	2800      	cmp	r0, #0
 80087ec:	d1ed      	bne.n	80087ca <__gethex+0x2ca>
 80087ee:	ee18 0a10 	vmov	r0, s16
 80087f2:	4621      	mov	r1, r4
 80087f4:	f000 f9ee 	bl	8008bd4 <_Bfree>
 80087f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80087fa:	2300      	movs	r3, #0
 80087fc:	6013      	str	r3, [r2, #0]
 80087fe:	2750      	movs	r7, #80	; 0x50
 8008800:	e713      	b.n	800862a <__gethex+0x12a>
 8008802:	bf00      	nop
 8008804:	0800a708 	.word	0x0800a708
 8008808:	0800a68c 	.word	0x0800a68c
 800880c:	0800a69d 	.word	0x0800a69d
 8008810:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1eb      	bne.n	80087ee <__gethex+0x2ee>
 8008816:	e7d8      	b.n	80087ca <__gethex+0x2ca>
 8008818:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1d5      	bne.n	80087ca <__gethex+0x2ca>
 800881e:	e7e6      	b.n	80087ee <__gethex+0x2ee>
 8008820:	1e6f      	subs	r7, r5, #1
 8008822:	f1ba 0f00 	cmp.w	sl, #0
 8008826:	d131      	bne.n	800888c <__gethex+0x38c>
 8008828:	b127      	cbz	r7, 8008834 <__gethex+0x334>
 800882a:	4639      	mov	r1, r7
 800882c:	4620      	mov	r0, r4
 800882e:	f000 fe2b 	bl	8009488 <__any_on>
 8008832:	4682      	mov	sl, r0
 8008834:	117b      	asrs	r3, r7, #5
 8008836:	2101      	movs	r1, #1
 8008838:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800883c:	f007 071f 	and.w	r7, r7, #31
 8008840:	fa01 f707 	lsl.w	r7, r1, r7
 8008844:	421f      	tst	r7, r3
 8008846:	4629      	mov	r1, r5
 8008848:	4620      	mov	r0, r4
 800884a:	bf18      	it	ne
 800884c:	f04a 0a02 	orrne.w	sl, sl, #2
 8008850:	1b76      	subs	r6, r6, r5
 8008852:	f7ff fded 	bl	8008430 <rshift>
 8008856:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800885a:	2702      	movs	r7, #2
 800885c:	f1ba 0f00 	cmp.w	sl, #0
 8008860:	d048      	beq.n	80088f4 <__gethex+0x3f4>
 8008862:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008866:	2b02      	cmp	r3, #2
 8008868:	d015      	beq.n	8008896 <__gethex+0x396>
 800886a:	2b03      	cmp	r3, #3
 800886c:	d017      	beq.n	800889e <__gethex+0x39e>
 800886e:	2b01      	cmp	r3, #1
 8008870:	d109      	bne.n	8008886 <__gethex+0x386>
 8008872:	f01a 0f02 	tst.w	sl, #2
 8008876:	d006      	beq.n	8008886 <__gethex+0x386>
 8008878:	f8d9 0000 	ldr.w	r0, [r9]
 800887c:	ea4a 0a00 	orr.w	sl, sl, r0
 8008880:	f01a 0f01 	tst.w	sl, #1
 8008884:	d10e      	bne.n	80088a4 <__gethex+0x3a4>
 8008886:	f047 0710 	orr.w	r7, r7, #16
 800888a:	e033      	b.n	80088f4 <__gethex+0x3f4>
 800888c:	f04f 0a01 	mov.w	sl, #1
 8008890:	e7d0      	b.n	8008834 <__gethex+0x334>
 8008892:	2701      	movs	r7, #1
 8008894:	e7e2      	b.n	800885c <__gethex+0x35c>
 8008896:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008898:	f1c3 0301 	rsb	r3, r3, #1
 800889c:	9315      	str	r3, [sp, #84]	; 0x54
 800889e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d0f0      	beq.n	8008886 <__gethex+0x386>
 80088a4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80088a8:	f104 0314 	add.w	r3, r4, #20
 80088ac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80088b0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80088b4:	f04f 0c00 	mov.w	ip, #0
 80088b8:	4618      	mov	r0, r3
 80088ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80088be:	f1b2 3fff 	cmp.w	r2, #4294967295
 80088c2:	d01c      	beq.n	80088fe <__gethex+0x3fe>
 80088c4:	3201      	adds	r2, #1
 80088c6:	6002      	str	r2, [r0, #0]
 80088c8:	2f02      	cmp	r7, #2
 80088ca:	f104 0314 	add.w	r3, r4, #20
 80088ce:	d13f      	bne.n	8008950 <__gethex+0x450>
 80088d0:	f8d8 2000 	ldr.w	r2, [r8]
 80088d4:	3a01      	subs	r2, #1
 80088d6:	42b2      	cmp	r2, r6
 80088d8:	d10a      	bne.n	80088f0 <__gethex+0x3f0>
 80088da:	1171      	asrs	r1, r6, #5
 80088dc:	2201      	movs	r2, #1
 80088de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80088e2:	f006 061f 	and.w	r6, r6, #31
 80088e6:	fa02 f606 	lsl.w	r6, r2, r6
 80088ea:	421e      	tst	r6, r3
 80088ec:	bf18      	it	ne
 80088ee:	4617      	movne	r7, r2
 80088f0:	f047 0720 	orr.w	r7, r7, #32
 80088f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80088f6:	601c      	str	r4, [r3, #0]
 80088f8:	9b04      	ldr	r3, [sp, #16]
 80088fa:	601d      	str	r5, [r3, #0]
 80088fc:	e695      	b.n	800862a <__gethex+0x12a>
 80088fe:	4299      	cmp	r1, r3
 8008900:	f843 cc04 	str.w	ip, [r3, #-4]
 8008904:	d8d8      	bhi.n	80088b8 <__gethex+0x3b8>
 8008906:	68a3      	ldr	r3, [r4, #8]
 8008908:	459b      	cmp	fp, r3
 800890a:	db19      	blt.n	8008940 <__gethex+0x440>
 800890c:	6861      	ldr	r1, [r4, #4]
 800890e:	ee18 0a10 	vmov	r0, s16
 8008912:	3101      	adds	r1, #1
 8008914:	f000 f91e 	bl	8008b54 <_Balloc>
 8008918:	4681      	mov	r9, r0
 800891a:	b918      	cbnz	r0, 8008924 <__gethex+0x424>
 800891c:	4b1a      	ldr	r3, [pc, #104]	; (8008988 <__gethex+0x488>)
 800891e:	4602      	mov	r2, r0
 8008920:	2184      	movs	r1, #132	; 0x84
 8008922:	e6a8      	b.n	8008676 <__gethex+0x176>
 8008924:	6922      	ldr	r2, [r4, #16]
 8008926:	3202      	adds	r2, #2
 8008928:	f104 010c 	add.w	r1, r4, #12
 800892c:	0092      	lsls	r2, r2, #2
 800892e:	300c      	adds	r0, #12
 8008930:	f7fd f86c 	bl	8005a0c <memcpy>
 8008934:	4621      	mov	r1, r4
 8008936:	ee18 0a10 	vmov	r0, s16
 800893a:	f000 f94b 	bl	8008bd4 <_Bfree>
 800893e:	464c      	mov	r4, r9
 8008940:	6923      	ldr	r3, [r4, #16]
 8008942:	1c5a      	adds	r2, r3, #1
 8008944:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008948:	6122      	str	r2, [r4, #16]
 800894a:	2201      	movs	r2, #1
 800894c:	615a      	str	r2, [r3, #20]
 800894e:	e7bb      	b.n	80088c8 <__gethex+0x3c8>
 8008950:	6922      	ldr	r2, [r4, #16]
 8008952:	455a      	cmp	r2, fp
 8008954:	dd0b      	ble.n	800896e <__gethex+0x46e>
 8008956:	2101      	movs	r1, #1
 8008958:	4620      	mov	r0, r4
 800895a:	f7ff fd69 	bl	8008430 <rshift>
 800895e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008962:	3501      	adds	r5, #1
 8008964:	42ab      	cmp	r3, r5
 8008966:	f6ff aed0 	blt.w	800870a <__gethex+0x20a>
 800896a:	2701      	movs	r7, #1
 800896c:	e7c0      	b.n	80088f0 <__gethex+0x3f0>
 800896e:	f016 061f 	ands.w	r6, r6, #31
 8008972:	d0fa      	beq.n	800896a <__gethex+0x46a>
 8008974:	449a      	add	sl, r3
 8008976:	f1c6 0620 	rsb	r6, r6, #32
 800897a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800897e:	f000 f9df 	bl	8008d40 <__hi0bits>
 8008982:	42b0      	cmp	r0, r6
 8008984:	dbe7      	blt.n	8008956 <__gethex+0x456>
 8008986:	e7f0      	b.n	800896a <__gethex+0x46a>
 8008988:	0800a68c 	.word	0x0800a68c

0800898c <L_shift>:
 800898c:	f1c2 0208 	rsb	r2, r2, #8
 8008990:	0092      	lsls	r2, r2, #2
 8008992:	b570      	push	{r4, r5, r6, lr}
 8008994:	f1c2 0620 	rsb	r6, r2, #32
 8008998:	6843      	ldr	r3, [r0, #4]
 800899a:	6804      	ldr	r4, [r0, #0]
 800899c:	fa03 f506 	lsl.w	r5, r3, r6
 80089a0:	432c      	orrs	r4, r5
 80089a2:	40d3      	lsrs	r3, r2
 80089a4:	6004      	str	r4, [r0, #0]
 80089a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80089aa:	4288      	cmp	r0, r1
 80089ac:	d3f4      	bcc.n	8008998 <L_shift+0xc>
 80089ae:	bd70      	pop	{r4, r5, r6, pc}

080089b0 <__match>:
 80089b0:	b530      	push	{r4, r5, lr}
 80089b2:	6803      	ldr	r3, [r0, #0]
 80089b4:	3301      	adds	r3, #1
 80089b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089ba:	b914      	cbnz	r4, 80089c2 <__match+0x12>
 80089bc:	6003      	str	r3, [r0, #0]
 80089be:	2001      	movs	r0, #1
 80089c0:	bd30      	pop	{r4, r5, pc}
 80089c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80089ca:	2d19      	cmp	r5, #25
 80089cc:	bf98      	it	ls
 80089ce:	3220      	addls	r2, #32
 80089d0:	42a2      	cmp	r2, r4
 80089d2:	d0f0      	beq.n	80089b6 <__match+0x6>
 80089d4:	2000      	movs	r0, #0
 80089d6:	e7f3      	b.n	80089c0 <__match+0x10>

080089d8 <__hexnan>:
 80089d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089dc:	680b      	ldr	r3, [r1, #0]
 80089de:	6801      	ldr	r1, [r0, #0]
 80089e0:	115e      	asrs	r6, r3, #5
 80089e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80089e6:	f013 031f 	ands.w	r3, r3, #31
 80089ea:	b087      	sub	sp, #28
 80089ec:	bf18      	it	ne
 80089ee:	3604      	addne	r6, #4
 80089f0:	2500      	movs	r5, #0
 80089f2:	1f37      	subs	r7, r6, #4
 80089f4:	4682      	mov	sl, r0
 80089f6:	4690      	mov	r8, r2
 80089f8:	9301      	str	r3, [sp, #4]
 80089fa:	f846 5c04 	str.w	r5, [r6, #-4]
 80089fe:	46b9      	mov	r9, r7
 8008a00:	463c      	mov	r4, r7
 8008a02:	9502      	str	r5, [sp, #8]
 8008a04:	46ab      	mov	fp, r5
 8008a06:	784a      	ldrb	r2, [r1, #1]
 8008a08:	1c4b      	adds	r3, r1, #1
 8008a0a:	9303      	str	r3, [sp, #12]
 8008a0c:	b342      	cbz	r2, 8008a60 <__hexnan+0x88>
 8008a0e:	4610      	mov	r0, r2
 8008a10:	9105      	str	r1, [sp, #20]
 8008a12:	9204      	str	r2, [sp, #16]
 8008a14:	f7ff fd5e 	bl	80084d4 <__hexdig_fun>
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	d14f      	bne.n	8008abc <__hexnan+0xe4>
 8008a1c:	9a04      	ldr	r2, [sp, #16]
 8008a1e:	9905      	ldr	r1, [sp, #20]
 8008a20:	2a20      	cmp	r2, #32
 8008a22:	d818      	bhi.n	8008a56 <__hexnan+0x7e>
 8008a24:	9b02      	ldr	r3, [sp, #8]
 8008a26:	459b      	cmp	fp, r3
 8008a28:	dd13      	ble.n	8008a52 <__hexnan+0x7a>
 8008a2a:	454c      	cmp	r4, r9
 8008a2c:	d206      	bcs.n	8008a3c <__hexnan+0x64>
 8008a2e:	2d07      	cmp	r5, #7
 8008a30:	dc04      	bgt.n	8008a3c <__hexnan+0x64>
 8008a32:	462a      	mov	r2, r5
 8008a34:	4649      	mov	r1, r9
 8008a36:	4620      	mov	r0, r4
 8008a38:	f7ff ffa8 	bl	800898c <L_shift>
 8008a3c:	4544      	cmp	r4, r8
 8008a3e:	d950      	bls.n	8008ae2 <__hexnan+0x10a>
 8008a40:	2300      	movs	r3, #0
 8008a42:	f1a4 0904 	sub.w	r9, r4, #4
 8008a46:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a4a:	f8cd b008 	str.w	fp, [sp, #8]
 8008a4e:	464c      	mov	r4, r9
 8008a50:	461d      	mov	r5, r3
 8008a52:	9903      	ldr	r1, [sp, #12]
 8008a54:	e7d7      	b.n	8008a06 <__hexnan+0x2e>
 8008a56:	2a29      	cmp	r2, #41	; 0x29
 8008a58:	d156      	bne.n	8008b08 <__hexnan+0x130>
 8008a5a:	3102      	adds	r1, #2
 8008a5c:	f8ca 1000 	str.w	r1, [sl]
 8008a60:	f1bb 0f00 	cmp.w	fp, #0
 8008a64:	d050      	beq.n	8008b08 <__hexnan+0x130>
 8008a66:	454c      	cmp	r4, r9
 8008a68:	d206      	bcs.n	8008a78 <__hexnan+0xa0>
 8008a6a:	2d07      	cmp	r5, #7
 8008a6c:	dc04      	bgt.n	8008a78 <__hexnan+0xa0>
 8008a6e:	462a      	mov	r2, r5
 8008a70:	4649      	mov	r1, r9
 8008a72:	4620      	mov	r0, r4
 8008a74:	f7ff ff8a 	bl	800898c <L_shift>
 8008a78:	4544      	cmp	r4, r8
 8008a7a:	d934      	bls.n	8008ae6 <__hexnan+0x10e>
 8008a7c:	f1a8 0204 	sub.w	r2, r8, #4
 8008a80:	4623      	mov	r3, r4
 8008a82:	f853 1b04 	ldr.w	r1, [r3], #4
 8008a86:	f842 1f04 	str.w	r1, [r2, #4]!
 8008a8a:	429f      	cmp	r7, r3
 8008a8c:	d2f9      	bcs.n	8008a82 <__hexnan+0xaa>
 8008a8e:	1b3b      	subs	r3, r7, r4
 8008a90:	f023 0303 	bic.w	r3, r3, #3
 8008a94:	3304      	adds	r3, #4
 8008a96:	3401      	adds	r4, #1
 8008a98:	3e03      	subs	r6, #3
 8008a9a:	42b4      	cmp	r4, r6
 8008a9c:	bf88      	it	hi
 8008a9e:	2304      	movhi	r3, #4
 8008aa0:	4443      	add	r3, r8
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f843 2b04 	str.w	r2, [r3], #4
 8008aa8:	429f      	cmp	r7, r3
 8008aaa:	d2fb      	bcs.n	8008aa4 <__hexnan+0xcc>
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	b91b      	cbnz	r3, 8008ab8 <__hexnan+0xe0>
 8008ab0:	4547      	cmp	r7, r8
 8008ab2:	d127      	bne.n	8008b04 <__hexnan+0x12c>
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	603b      	str	r3, [r7, #0]
 8008ab8:	2005      	movs	r0, #5
 8008aba:	e026      	b.n	8008b0a <__hexnan+0x132>
 8008abc:	3501      	adds	r5, #1
 8008abe:	2d08      	cmp	r5, #8
 8008ac0:	f10b 0b01 	add.w	fp, fp, #1
 8008ac4:	dd06      	ble.n	8008ad4 <__hexnan+0xfc>
 8008ac6:	4544      	cmp	r4, r8
 8008ac8:	d9c3      	bls.n	8008a52 <__hexnan+0x7a>
 8008aca:	2300      	movs	r3, #0
 8008acc:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ad0:	2501      	movs	r5, #1
 8008ad2:	3c04      	subs	r4, #4
 8008ad4:	6822      	ldr	r2, [r4, #0]
 8008ad6:	f000 000f 	and.w	r0, r0, #15
 8008ada:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008ade:	6022      	str	r2, [r4, #0]
 8008ae0:	e7b7      	b.n	8008a52 <__hexnan+0x7a>
 8008ae2:	2508      	movs	r5, #8
 8008ae4:	e7b5      	b.n	8008a52 <__hexnan+0x7a>
 8008ae6:	9b01      	ldr	r3, [sp, #4]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d0df      	beq.n	8008aac <__hexnan+0xd4>
 8008aec:	f04f 32ff 	mov.w	r2, #4294967295
 8008af0:	f1c3 0320 	rsb	r3, r3, #32
 8008af4:	fa22 f303 	lsr.w	r3, r2, r3
 8008af8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008afc:	401a      	ands	r2, r3
 8008afe:	f846 2c04 	str.w	r2, [r6, #-4]
 8008b02:	e7d3      	b.n	8008aac <__hexnan+0xd4>
 8008b04:	3f04      	subs	r7, #4
 8008b06:	e7d1      	b.n	8008aac <__hexnan+0xd4>
 8008b08:	2004      	movs	r0, #4
 8008b0a:	b007      	add	sp, #28
 8008b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008b10 <_localeconv_r>:
 8008b10:	4800      	ldr	r0, [pc, #0]	; (8008b14 <_localeconv_r+0x4>)
 8008b12:	4770      	bx	lr
 8008b14:	20000188 	.word	0x20000188

08008b18 <__ascii_mbtowc>:
 8008b18:	b082      	sub	sp, #8
 8008b1a:	b901      	cbnz	r1, 8008b1e <__ascii_mbtowc+0x6>
 8008b1c:	a901      	add	r1, sp, #4
 8008b1e:	b142      	cbz	r2, 8008b32 <__ascii_mbtowc+0x1a>
 8008b20:	b14b      	cbz	r3, 8008b36 <__ascii_mbtowc+0x1e>
 8008b22:	7813      	ldrb	r3, [r2, #0]
 8008b24:	600b      	str	r3, [r1, #0]
 8008b26:	7812      	ldrb	r2, [r2, #0]
 8008b28:	1e10      	subs	r0, r2, #0
 8008b2a:	bf18      	it	ne
 8008b2c:	2001      	movne	r0, #1
 8008b2e:	b002      	add	sp, #8
 8008b30:	4770      	bx	lr
 8008b32:	4610      	mov	r0, r2
 8008b34:	e7fb      	b.n	8008b2e <__ascii_mbtowc+0x16>
 8008b36:	f06f 0001 	mvn.w	r0, #1
 8008b3a:	e7f8      	b.n	8008b2e <__ascii_mbtowc+0x16>

08008b3c <__malloc_lock>:
 8008b3c:	4801      	ldr	r0, [pc, #4]	; (8008b44 <__malloc_lock+0x8>)
 8008b3e:	f000 be88 	b.w	8009852 <__retarget_lock_acquire_recursive>
 8008b42:	bf00      	nop
 8008b44:	2000039c 	.word	0x2000039c

08008b48 <__malloc_unlock>:
 8008b48:	4801      	ldr	r0, [pc, #4]	; (8008b50 <__malloc_unlock+0x8>)
 8008b4a:	f000 be83 	b.w	8009854 <__retarget_lock_release_recursive>
 8008b4e:	bf00      	nop
 8008b50:	2000039c 	.word	0x2000039c

08008b54 <_Balloc>:
 8008b54:	b570      	push	{r4, r5, r6, lr}
 8008b56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008b58:	4604      	mov	r4, r0
 8008b5a:	460d      	mov	r5, r1
 8008b5c:	b976      	cbnz	r6, 8008b7c <_Balloc+0x28>
 8008b5e:	2010      	movs	r0, #16
 8008b60:	f7fc ff44 	bl	80059ec <malloc>
 8008b64:	4602      	mov	r2, r0
 8008b66:	6260      	str	r0, [r4, #36]	; 0x24
 8008b68:	b920      	cbnz	r0, 8008b74 <_Balloc+0x20>
 8008b6a:	4b18      	ldr	r3, [pc, #96]	; (8008bcc <_Balloc+0x78>)
 8008b6c:	4818      	ldr	r0, [pc, #96]	; (8008bd0 <_Balloc+0x7c>)
 8008b6e:	2166      	movs	r1, #102	; 0x66
 8008b70:	f000 fe3e 	bl	80097f0 <__assert_func>
 8008b74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b78:	6006      	str	r6, [r0, #0]
 8008b7a:	60c6      	str	r6, [r0, #12]
 8008b7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008b7e:	68f3      	ldr	r3, [r6, #12]
 8008b80:	b183      	cbz	r3, 8008ba4 <_Balloc+0x50>
 8008b82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b8a:	b9b8      	cbnz	r0, 8008bbc <_Balloc+0x68>
 8008b8c:	2101      	movs	r1, #1
 8008b8e:	fa01 f605 	lsl.w	r6, r1, r5
 8008b92:	1d72      	adds	r2, r6, #5
 8008b94:	0092      	lsls	r2, r2, #2
 8008b96:	4620      	mov	r0, r4
 8008b98:	f000 fc97 	bl	80094ca <_calloc_r>
 8008b9c:	b160      	cbz	r0, 8008bb8 <_Balloc+0x64>
 8008b9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ba2:	e00e      	b.n	8008bc2 <_Balloc+0x6e>
 8008ba4:	2221      	movs	r2, #33	; 0x21
 8008ba6:	2104      	movs	r1, #4
 8008ba8:	4620      	mov	r0, r4
 8008baa:	f000 fc8e 	bl	80094ca <_calloc_r>
 8008bae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bb0:	60f0      	str	r0, [r6, #12]
 8008bb2:	68db      	ldr	r3, [r3, #12]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1e4      	bne.n	8008b82 <_Balloc+0x2e>
 8008bb8:	2000      	movs	r0, #0
 8008bba:	bd70      	pop	{r4, r5, r6, pc}
 8008bbc:	6802      	ldr	r2, [r0, #0]
 8008bbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008bc8:	e7f7      	b.n	8008bba <_Balloc+0x66>
 8008bca:	bf00      	nop
 8008bcc:	0800a616 	.word	0x0800a616
 8008bd0:	0800a71c 	.word	0x0800a71c

08008bd4 <_Bfree>:
 8008bd4:	b570      	push	{r4, r5, r6, lr}
 8008bd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008bd8:	4605      	mov	r5, r0
 8008bda:	460c      	mov	r4, r1
 8008bdc:	b976      	cbnz	r6, 8008bfc <_Bfree+0x28>
 8008bde:	2010      	movs	r0, #16
 8008be0:	f7fc ff04 	bl	80059ec <malloc>
 8008be4:	4602      	mov	r2, r0
 8008be6:	6268      	str	r0, [r5, #36]	; 0x24
 8008be8:	b920      	cbnz	r0, 8008bf4 <_Bfree+0x20>
 8008bea:	4b09      	ldr	r3, [pc, #36]	; (8008c10 <_Bfree+0x3c>)
 8008bec:	4809      	ldr	r0, [pc, #36]	; (8008c14 <_Bfree+0x40>)
 8008bee:	218a      	movs	r1, #138	; 0x8a
 8008bf0:	f000 fdfe 	bl	80097f0 <__assert_func>
 8008bf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bf8:	6006      	str	r6, [r0, #0]
 8008bfa:	60c6      	str	r6, [r0, #12]
 8008bfc:	b13c      	cbz	r4, 8008c0e <_Bfree+0x3a>
 8008bfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c00:	6862      	ldr	r2, [r4, #4]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c08:	6021      	str	r1, [r4, #0]
 8008c0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c0e:	bd70      	pop	{r4, r5, r6, pc}
 8008c10:	0800a616 	.word	0x0800a616
 8008c14:	0800a71c 	.word	0x0800a71c

08008c18 <__multadd>:
 8008c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c1c:	690e      	ldr	r6, [r1, #16]
 8008c1e:	4607      	mov	r7, r0
 8008c20:	4698      	mov	r8, r3
 8008c22:	460c      	mov	r4, r1
 8008c24:	f101 0014 	add.w	r0, r1, #20
 8008c28:	2300      	movs	r3, #0
 8008c2a:	6805      	ldr	r5, [r0, #0]
 8008c2c:	b2a9      	uxth	r1, r5
 8008c2e:	fb02 8101 	mla	r1, r2, r1, r8
 8008c32:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008c36:	0c2d      	lsrs	r5, r5, #16
 8008c38:	fb02 c505 	mla	r5, r2, r5, ip
 8008c3c:	b289      	uxth	r1, r1
 8008c3e:	3301      	adds	r3, #1
 8008c40:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008c44:	429e      	cmp	r6, r3
 8008c46:	f840 1b04 	str.w	r1, [r0], #4
 8008c4a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008c4e:	dcec      	bgt.n	8008c2a <__multadd+0x12>
 8008c50:	f1b8 0f00 	cmp.w	r8, #0
 8008c54:	d022      	beq.n	8008c9c <__multadd+0x84>
 8008c56:	68a3      	ldr	r3, [r4, #8]
 8008c58:	42b3      	cmp	r3, r6
 8008c5a:	dc19      	bgt.n	8008c90 <__multadd+0x78>
 8008c5c:	6861      	ldr	r1, [r4, #4]
 8008c5e:	4638      	mov	r0, r7
 8008c60:	3101      	adds	r1, #1
 8008c62:	f7ff ff77 	bl	8008b54 <_Balloc>
 8008c66:	4605      	mov	r5, r0
 8008c68:	b928      	cbnz	r0, 8008c76 <__multadd+0x5e>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	4b0d      	ldr	r3, [pc, #52]	; (8008ca4 <__multadd+0x8c>)
 8008c6e:	480e      	ldr	r0, [pc, #56]	; (8008ca8 <__multadd+0x90>)
 8008c70:	21b5      	movs	r1, #181	; 0xb5
 8008c72:	f000 fdbd 	bl	80097f0 <__assert_func>
 8008c76:	6922      	ldr	r2, [r4, #16]
 8008c78:	3202      	adds	r2, #2
 8008c7a:	f104 010c 	add.w	r1, r4, #12
 8008c7e:	0092      	lsls	r2, r2, #2
 8008c80:	300c      	adds	r0, #12
 8008c82:	f7fc fec3 	bl	8005a0c <memcpy>
 8008c86:	4621      	mov	r1, r4
 8008c88:	4638      	mov	r0, r7
 8008c8a:	f7ff ffa3 	bl	8008bd4 <_Bfree>
 8008c8e:	462c      	mov	r4, r5
 8008c90:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008c94:	3601      	adds	r6, #1
 8008c96:	f8c3 8014 	str.w	r8, [r3, #20]
 8008c9a:	6126      	str	r6, [r4, #16]
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ca2:	bf00      	nop
 8008ca4:	0800a68c 	.word	0x0800a68c
 8008ca8:	0800a71c 	.word	0x0800a71c

08008cac <__s2b>:
 8008cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cb0:	460c      	mov	r4, r1
 8008cb2:	4615      	mov	r5, r2
 8008cb4:	461f      	mov	r7, r3
 8008cb6:	2209      	movs	r2, #9
 8008cb8:	3308      	adds	r3, #8
 8008cba:	4606      	mov	r6, r0
 8008cbc:	fb93 f3f2 	sdiv	r3, r3, r2
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	db09      	blt.n	8008cdc <__s2b+0x30>
 8008cc8:	4630      	mov	r0, r6
 8008cca:	f7ff ff43 	bl	8008b54 <_Balloc>
 8008cce:	b940      	cbnz	r0, 8008ce2 <__s2b+0x36>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	4b19      	ldr	r3, [pc, #100]	; (8008d38 <__s2b+0x8c>)
 8008cd4:	4819      	ldr	r0, [pc, #100]	; (8008d3c <__s2b+0x90>)
 8008cd6:	21ce      	movs	r1, #206	; 0xce
 8008cd8:	f000 fd8a 	bl	80097f0 <__assert_func>
 8008cdc:	0052      	lsls	r2, r2, #1
 8008cde:	3101      	adds	r1, #1
 8008ce0:	e7f0      	b.n	8008cc4 <__s2b+0x18>
 8008ce2:	9b08      	ldr	r3, [sp, #32]
 8008ce4:	6143      	str	r3, [r0, #20]
 8008ce6:	2d09      	cmp	r5, #9
 8008ce8:	f04f 0301 	mov.w	r3, #1
 8008cec:	6103      	str	r3, [r0, #16]
 8008cee:	dd16      	ble.n	8008d1e <__s2b+0x72>
 8008cf0:	f104 0909 	add.w	r9, r4, #9
 8008cf4:	46c8      	mov	r8, r9
 8008cf6:	442c      	add	r4, r5
 8008cf8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008cfc:	4601      	mov	r1, r0
 8008cfe:	3b30      	subs	r3, #48	; 0x30
 8008d00:	220a      	movs	r2, #10
 8008d02:	4630      	mov	r0, r6
 8008d04:	f7ff ff88 	bl	8008c18 <__multadd>
 8008d08:	45a0      	cmp	r8, r4
 8008d0a:	d1f5      	bne.n	8008cf8 <__s2b+0x4c>
 8008d0c:	f1a5 0408 	sub.w	r4, r5, #8
 8008d10:	444c      	add	r4, r9
 8008d12:	1b2d      	subs	r5, r5, r4
 8008d14:	1963      	adds	r3, r4, r5
 8008d16:	42bb      	cmp	r3, r7
 8008d18:	db04      	blt.n	8008d24 <__s2b+0x78>
 8008d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d1e:	340a      	adds	r4, #10
 8008d20:	2509      	movs	r5, #9
 8008d22:	e7f6      	b.n	8008d12 <__s2b+0x66>
 8008d24:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008d28:	4601      	mov	r1, r0
 8008d2a:	3b30      	subs	r3, #48	; 0x30
 8008d2c:	220a      	movs	r2, #10
 8008d2e:	4630      	mov	r0, r6
 8008d30:	f7ff ff72 	bl	8008c18 <__multadd>
 8008d34:	e7ee      	b.n	8008d14 <__s2b+0x68>
 8008d36:	bf00      	nop
 8008d38:	0800a68c 	.word	0x0800a68c
 8008d3c:	0800a71c 	.word	0x0800a71c

08008d40 <__hi0bits>:
 8008d40:	0c03      	lsrs	r3, r0, #16
 8008d42:	041b      	lsls	r3, r3, #16
 8008d44:	b9d3      	cbnz	r3, 8008d7c <__hi0bits+0x3c>
 8008d46:	0400      	lsls	r0, r0, #16
 8008d48:	2310      	movs	r3, #16
 8008d4a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008d4e:	bf04      	itt	eq
 8008d50:	0200      	lsleq	r0, r0, #8
 8008d52:	3308      	addeq	r3, #8
 8008d54:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008d58:	bf04      	itt	eq
 8008d5a:	0100      	lsleq	r0, r0, #4
 8008d5c:	3304      	addeq	r3, #4
 8008d5e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008d62:	bf04      	itt	eq
 8008d64:	0080      	lsleq	r0, r0, #2
 8008d66:	3302      	addeq	r3, #2
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	db05      	blt.n	8008d78 <__hi0bits+0x38>
 8008d6c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008d70:	f103 0301 	add.w	r3, r3, #1
 8008d74:	bf08      	it	eq
 8008d76:	2320      	moveq	r3, #32
 8008d78:	4618      	mov	r0, r3
 8008d7a:	4770      	bx	lr
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	e7e4      	b.n	8008d4a <__hi0bits+0xa>

08008d80 <__lo0bits>:
 8008d80:	6803      	ldr	r3, [r0, #0]
 8008d82:	f013 0207 	ands.w	r2, r3, #7
 8008d86:	4601      	mov	r1, r0
 8008d88:	d00b      	beq.n	8008da2 <__lo0bits+0x22>
 8008d8a:	07da      	lsls	r2, r3, #31
 8008d8c:	d424      	bmi.n	8008dd8 <__lo0bits+0x58>
 8008d8e:	0798      	lsls	r0, r3, #30
 8008d90:	bf49      	itett	mi
 8008d92:	085b      	lsrmi	r3, r3, #1
 8008d94:	089b      	lsrpl	r3, r3, #2
 8008d96:	2001      	movmi	r0, #1
 8008d98:	600b      	strmi	r3, [r1, #0]
 8008d9a:	bf5c      	itt	pl
 8008d9c:	600b      	strpl	r3, [r1, #0]
 8008d9e:	2002      	movpl	r0, #2
 8008da0:	4770      	bx	lr
 8008da2:	b298      	uxth	r0, r3
 8008da4:	b9b0      	cbnz	r0, 8008dd4 <__lo0bits+0x54>
 8008da6:	0c1b      	lsrs	r3, r3, #16
 8008da8:	2010      	movs	r0, #16
 8008daa:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008dae:	bf04      	itt	eq
 8008db0:	0a1b      	lsreq	r3, r3, #8
 8008db2:	3008      	addeq	r0, #8
 8008db4:	071a      	lsls	r2, r3, #28
 8008db6:	bf04      	itt	eq
 8008db8:	091b      	lsreq	r3, r3, #4
 8008dba:	3004      	addeq	r0, #4
 8008dbc:	079a      	lsls	r2, r3, #30
 8008dbe:	bf04      	itt	eq
 8008dc0:	089b      	lsreq	r3, r3, #2
 8008dc2:	3002      	addeq	r0, #2
 8008dc4:	07da      	lsls	r2, r3, #31
 8008dc6:	d403      	bmi.n	8008dd0 <__lo0bits+0x50>
 8008dc8:	085b      	lsrs	r3, r3, #1
 8008dca:	f100 0001 	add.w	r0, r0, #1
 8008dce:	d005      	beq.n	8008ddc <__lo0bits+0x5c>
 8008dd0:	600b      	str	r3, [r1, #0]
 8008dd2:	4770      	bx	lr
 8008dd4:	4610      	mov	r0, r2
 8008dd6:	e7e8      	b.n	8008daa <__lo0bits+0x2a>
 8008dd8:	2000      	movs	r0, #0
 8008dda:	4770      	bx	lr
 8008ddc:	2020      	movs	r0, #32
 8008dde:	4770      	bx	lr

08008de0 <__i2b>:
 8008de0:	b510      	push	{r4, lr}
 8008de2:	460c      	mov	r4, r1
 8008de4:	2101      	movs	r1, #1
 8008de6:	f7ff feb5 	bl	8008b54 <_Balloc>
 8008dea:	4602      	mov	r2, r0
 8008dec:	b928      	cbnz	r0, 8008dfa <__i2b+0x1a>
 8008dee:	4b05      	ldr	r3, [pc, #20]	; (8008e04 <__i2b+0x24>)
 8008df0:	4805      	ldr	r0, [pc, #20]	; (8008e08 <__i2b+0x28>)
 8008df2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008df6:	f000 fcfb 	bl	80097f0 <__assert_func>
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	6144      	str	r4, [r0, #20]
 8008dfe:	6103      	str	r3, [r0, #16]
 8008e00:	bd10      	pop	{r4, pc}
 8008e02:	bf00      	nop
 8008e04:	0800a68c 	.word	0x0800a68c
 8008e08:	0800a71c 	.word	0x0800a71c

08008e0c <__multiply>:
 8008e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e10:	4614      	mov	r4, r2
 8008e12:	690a      	ldr	r2, [r1, #16]
 8008e14:	6923      	ldr	r3, [r4, #16]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	bfb8      	it	lt
 8008e1a:	460b      	movlt	r3, r1
 8008e1c:	460d      	mov	r5, r1
 8008e1e:	bfbc      	itt	lt
 8008e20:	4625      	movlt	r5, r4
 8008e22:	461c      	movlt	r4, r3
 8008e24:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008e28:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008e2c:	68ab      	ldr	r3, [r5, #8]
 8008e2e:	6869      	ldr	r1, [r5, #4]
 8008e30:	eb0a 0709 	add.w	r7, sl, r9
 8008e34:	42bb      	cmp	r3, r7
 8008e36:	b085      	sub	sp, #20
 8008e38:	bfb8      	it	lt
 8008e3a:	3101      	addlt	r1, #1
 8008e3c:	f7ff fe8a 	bl	8008b54 <_Balloc>
 8008e40:	b930      	cbnz	r0, 8008e50 <__multiply+0x44>
 8008e42:	4602      	mov	r2, r0
 8008e44:	4b42      	ldr	r3, [pc, #264]	; (8008f50 <__multiply+0x144>)
 8008e46:	4843      	ldr	r0, [pc, #268]	; (8008f54 <__multiply+0x148>)
 8008e48:	f240 115d 	movw	r1, #349	; 0x15d
 8008e4c:	f000 fcd0 	bl	80097f0 <__assert_func>
 8008e50:	f100 0614 	add.w	r6, r0, #20
 8008e54:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008e58:	4633      	mov	r3, r6
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	4543      	cmp	r3, r8
 8008e5e:	d31e      	bcc.n	8008e9e <__multiply+0x92>
 8008e60:	f105 0c14 	add.w	ip, r5, #20
 8008e64:	f104 0314 	add.w	r3, r4, #20
 8008e68:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008e6c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008e70:	9202      	str	r2, [sp, #8]
 8008e72:	ebac 0205 	sub.w	r2, ip, r5
 8008e76:	3a15      	subs	r2, #21
 8008e78:	f022 0203 	bic.w	r2, r2, #3
 8008e7c:	3204      	adds	r2, #4
 8008e7e:	f105 0115 	add.w	r1, r5, #21
 8008e82:	458c      	cmp	ip, r1
 8008e84:	bf38      	it	cc
 8008e86:	2204      	movcc	r2, #4
 8008e88:	9201      	str	r2, [sp, #4]
 8008e8a:	9a02      	ldr	r2, [sp, #8]
 8008e8c:	9303      	str	r3, [sp, #12]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d808      	bhi.n	8008ea4 <__multiply+0x98>
 8008e92:	2f00      	cmp	r7, #0
 8008e94:	dc55      	bgt.n	8008f42 <__multiply+0x136>
 8008e96:	6107      	str	r7, [r0, #16]
 8008e98:	b005      	add	sp, #20
 8008e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e9e:	f843 2b04 	str.w	r2, [r3], #4
 8008ea2:	e7db      	b.n	8008e5c <__multiply+0x50>
 8008ea4:	f8b3 a000 	ldrh.w	sl, [r3]
 8008ea8:	f1ba 0f00 	cmp.w	sl, #0
 8008eac:	d020      	beq.n	8008ef0 <__multiply+0xe4>
 8008eae:	f105 0e14 	add.w	lr, r5, #20
 8008eb2:	46b1      	mov	r9, r6
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008eba:	f8d9 b000 	ldr.w	fp, [r9]
 8008ebe:	b2a1      	uxth	r1, r4
 8008ec0:	fa1f fb8b 	uxth.w	fp, fp
 8008ec4:	fb0a b101 	mla	r1, sl, r1, fp
 8008ec8:	4411      	add	r1, r2
 8008eca:	f8d9 2000 	ldr.w	r2, [r9]
 8008ece:	0c24      	lsrs	r4, r4, #16
 8008ed0:	0c12      	lsrs	r2, r2, #16
 8008ed2:	fb0a 2404 	mla	r4, sl, r4, r2
 8008ed6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008eda:	b289      	uxth	r1, r1
 8008edc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008ee0:	45f4      	cmp	ip, lr
 8008ee2:	f849 1b04 	str.w	r1, [r9], #4
 8008ee6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008eea:	d8e4      	bhi.n	8008eb6 <__multiply+0xaa>
 8008eec:	9901      	ldr	r1, [sp, #4]
 8008eee:	5072      	str	r2, [r6, r1]
 8008ef0:	9a03      	ldr	r2, [sp, #12]
 8008ef2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008ef6:	3304      	adds	r3, #4
 8008ef8:	f1b9 0f00 	cmp.w	r9, #0
 8008efc:	d01f      	beq.n	8008f3e <__multiply+0x132>
 8008efe:	6834      	ldr	r4, [r6, #0]
 8008f00:	f105 0114 	add.w	r1, r5, #20
 8008f04:	46b6      	mov	lr, r6
 8008f06:	f04f 0a00 	mov.w	sl, #0
 8008f0a:	880a      	ldrh	r2, [r1, #0]
 8008f0c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008f10:	fb09 b202 	mla	r2, r9, r2, fp
 8008f14:	4492      	add	sl, r2
 8008f16:	b2a4      	uxth	r4, r4
 8008f18:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008f1c:	f84e 4b04 	str.w	r4, [lr], #4
 8008f20:	f851 4b04 	ldr.w	r4, [r1], #4
 8008f24:	f8be 2000 	ldrh.w	r2, [lr]
 8008f28:	0c24      	lsrs	r4, r4, #16
 8008f2a:	fb09 2404 	mla	r4, r9, r4, r2
 8008f2e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008f32:	458c      	cmp	ip, r1
 8008f34:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008f38:	d8e7      	bhi.n	8008f0a <__multiply+0xfe>
 8008f3a:	9a01      	ldr	r2, [sp, #4]
 8008f3c:	50b4      	str	r4, [r6, r2]
 8008f3e:	3604      	adds	r6, #4
 8008f40:	e7a3      	b.n	8008e8a <__multiply+0x7e>
 8008f42:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1a5      	bne.n	8008e96 <__multiply+0x8a>
 8008f4a:	3f01      	subs	r7, #1
 8008f4c:	e7a1      	b.n	8008e92 <__multiply+0x86>
 8008f4e:	bf00      	nop
 8008f50:	0800a68c 	.word	0x0800a68c
 8008f54:	0800a71c 	.word	0x0800a71c

08008f58 <__pow5mult>:
 8008f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f5c:	4615      	mov	r5, r2
 8008f5e:	f012 0203 	ands.w	r2, r2, #3
 8008f62:	4606      	mov	r6, r0
 8008f64:	460f      	mov	r7, r1
 8008f66:	d007      	beq.n	8008f78 <__pow5mult+0x20>
 8008f68:	4c25      	ldr	r4, [pc, #148]	; (8009000 <__pow5mult+0xa8>)
 8008f6a:	3a01      	subs	r2, #1
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f72:	f7ff fe51 	bl	8008c18 <__multadd>
 8008f76:	4607      	mov	r7, r0
 8008f78:	10ad      	asrs	r5, r5, #2
 8008f7a:	d03d      	beq.n	8008ff8 <__pow5mult+0xa0>
 8008f7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008f7e:	b97c      	cbnz	r4, 8008fa0 <__pow5mult+0x48>
 8008f80:	2010      	movs	r0, #16
 8008f82:	f7fc fd33 	bl	80059ec <malloc>
 8008f86:	4602      	mov	r2, r0
 8008f88:	6270      	str	r0, [r6, #36]	; 0x24
 8008f8a:	b928      	cbnz	r0, 8008f98 <__pow5mult+0x40>
 8008f8c:	4b1d      	ldr	r3, [pc, #116]	; (8009004 <__pow5mult+0xac>)
 8008f8e:	481e      	ldr	r0, [pc, #120]	; (8009008 <__pow5mult+0xb0>)
 8008f90:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008f94:	f000 fc2c 	bl	80097f0 <__assert_func>
 8008f98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f9c:	6004      	str	r4, [r0, #0]
 8008f9e:	60c4      	str	r4, [r0, #12]
 8008fa0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008fa4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008fa8:	b94c      	cbnz	r4, 8008fbe <__pow5mult+0x66>
 8008faa:	f240 2171 	movw	r1, #625	; 0x271
 8008fae:	4630      	mov	r0, r6
 8008fb0:	f7ff ff16 	bl	8008de0 <__i2b>
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008fba:	4604      	mov	r4, r0
 8008fbc:	6003      	str	r3, [r0, #0]
 8008fbe:	f04f 0900 	mov.w	r9, #0
 8008fc2:	07eb      	lsls	r3, r5, #31
 8008fc4:	d50a      	bpl.n	8008fdc <__pow5mult+0x84>
 8008fc6:	4639      	mov	r1, r7
 8008fc8:	4622      	mov	r2, r4
 8008fca:	4630      	mov	r0, r6
 8008fcc:	f7ff ff1e 	bl	8008e0c <__multiply>
 8008fd0:	4639      	mov	r1, r7
 8008fd2:	4680      	mov	r8, r0
 8008fd4:	4630      	mov	r0, r6
 8008fd6:	f7ff fdfd 	bl	8008bd4 <_Bfree>
 8008fda:	4647      	mov	r7, r8
 8008fdc:	106d      	asrs	r5, r5, #1
 8008fde:	d00b      	beq.n	8008ff8 <__pow5mult+0xa0>
 8008fe0:	6820      	ldr	r0, [r4, #0]
 8008fe2:	b938      	cbnz	r0, 8008ff4 <__pow5mult+0x9c>
 8008fe4:	4622      	mov	r2, r4
 8008fe6:	4621      	mov	r1, r4
 8008fe8:	4630      	mov	r0, r6
 8008fea:	f7ff ff0f 	bl	8008e0c <__multiply>
 8008fee:	6020      	str	r0, [r4, #0]
 8008ff0:	f8c0 9000 	str.w	r9, [r0]
 8008ff4:	4604      	mov	r4, r0
 8008ff6:	e7e4      	b.n	8008fc2 <__pow5mult+0x6a>
 8008ff8:	4638      	mov	r0, r7
 8008ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ffe:	bf00      	nop
 8009000:	0800a870 	.word	0x0800a870
 8009004:	0800a616 	.word	0x0800a616
 8009008:	0800a71c 	.word	0x0800a71c

0800900c <__lshift>:
 800900c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009010:	460c      	mov	r4, r1
 8009012:	6849      	ldr	r1, [r1, #4]
 8009014:	6923      	ldr	r3, [r4, #16]
 8009016:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800901a:	68a3      	ldr	r3, [r4, #8]
 800901c:	4607      	mov	r7, r0
 800901e:	4691      	mov	r9, r2
 8009020:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009024:	f108 0601 	add.w	r6, r8, #1
 8009028:	42b3      	cmp	r3, r6
 800902a:	db0b      	blt.n	8009044 <__lshift+0x38>
 800902c:	4638      	mov	r0, r7
 800902e:	f7ff fd91 	bl	8008b54 <_Balloc>
 8009032:	4605      	mov	r5, r0
 8009034:	b948      	cbnz	r0, 800904a <__lshift+0x3e>
 8009036:	4602      	mov	r2, r0
 8009038:	4b28      	ldr	r3, [pc, #160]	; (80090dc <__lshift+0xd0>)
 800903a:	4829      	ldr	r0, [pc, #164]	; (80090e0 <__lshift+0xd4>)
 800903c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009040:	f000 fbd6 	bl	80097f0 <__assert_func>
 8009044:	3101      	adds	r1, #1
 8009046:	005b      	lsls	r3, r3, #1
 8009048:	e7ee      	b.n	8009028 <__lshift+0x1c>
 800904a:	2300      	movs	r3, #0
 800904c:	f100 0114 	add.w	r1, r0, #20
 8009050:	f100 0210 	add.w	r2, r0, #16
 8009054:	4618      	mov	r0, r3
 8009056:	4553      	cmp	r3, sl
 8009058:	db33      	blt.n	80090c2 <__lshift+0xb6>
 800905a:	6920      	ldr	r0, [r4, #16]
 800905c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009060:	f104 0314 	add.w	r3, r4, #20
 8009064:	f019 091f 	ands.w	r9, r9, #31
 8009068:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800906c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009070:	d02b      	beq.n	80090ca <__lshift+0xbe>
 8009072:	f1c9 0e20 	rsb	lr, r9, #32
 8009076:	468a      	mov	sl, r1
 8009078:	2200      	movs	r2, #0
 800907a:	6818      	ldr	r0, [r3, #0]
 800907c:	fa00 f009 	lsl.w	r0, r0, r9
 8009080:	4302      	orrs	r2, r0
 8009082:	f84a 2b04 	str.w	r2, [sl], #4
 8009086:	f853 2b04 	ldr.w	r2, [r3], #4
 800908a:	459c      	cmp	ip, r3
 800908c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009090:	d8f3      	bhi.n	800907a <__lshift+0x6e>
 8009092:	ebac 0304 	sub.w	r3, ip, r4
 8009096:	3b15      	subs	r3, #21
 8009098:	f023 0303 	bic.w	r3, r3, #3
 800909c:	3304      	adds	r3, #4
 800909e:	f104 0015 	add.w	r0, r4, #21
 80090a2:	4584      	cmp	ip, r0
 80090a4:	bf38      	it	cc
 80090a6:	2304      	movcc	r3, #4
 80090a8:	50ca      	str	r2, [r1, r3]
 80090aa:	b10a      	cbz	r2, 80090b0 <__lshift+0xa4>
 80090ac:	f108 0602 	add.w	r6, r8, #2
 80090b0:	3e01      	subs	r6, #1
 80090b2:	4638      	mov	r0, r7
 80090b4:	612e      	str	r6, [r5, #16]
 80090b6:	4621      	mov	r1, r4
 80090b8:	f7ff fd8c 	bl	8008bd4 <_Bfree>
 80090bc:	4628      	mov	r0, r5
 80090be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80090c6:	3301      	adds	r3, #1
 80090c8:	e7c5      	b.n	8009056 <__lshift+0x4a>
 80090ca:	3904      	subs	r1, #4
 80090cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80090d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80090d4:	459c      	cmp	ip, r3
 80090d6:	d8f9      	bhi.n	80090cc <__lshift+0xc0>
 80090d8:	e7ea      	b.n	80090b0 <__lshift+0xa4>
 80090da:	bf00      	nop
 80090dc:	0800a68c 	.word	0x0800a68c
 80090e0:	0800a71c 	.word	0x0800a71c

080090e4 <__mcmp>:
 80090e4:	b530      	push	{r4, r5, lr}
 80090e6:	6902      	ldr	r2, [r0, #16]
 80090e8:	690c      	ldr	r4, [r1, #16]
 80090ea:	1b12      	subs	r2, r2, r4
 80090ec:	d10e      	bne.n	800910c <__mcmp+0x28>
 80090ee:	f100 0314 	add.w	r3, r0, #20
 80090f2:	3114      	adds	r1, #20
 80090f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80090f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80090fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009100:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009104:	42a5      	cmp	r5, r4
 8009106:	d003      	beq.n	8009110 <__mcmp+0x2c>
 8009108:	d305      	bcc.n	8009116 <__mcmp+0x32>
 800910a:	2201      	movs	r2, #1
 800910c:	4610      	mov	r0, r2
 800910e:	bd30      	pop	{r4, r5, pc}
 8009110:	4283      	cmp	r3, r0
 8009112:	d3f3      	bcc.n	80090fc <__mcmp+0x18>
 8009114:	e7fa      	b.n	800910c <__mcmp+0x28>
 8009116:	f04f 32ff 	mov.w	r2, #4294967295
 800911a:	e7f7      	b.n	800910c <__mcmp+0x28>

0800911c <__mdiff>:
 800911c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009120:	460c      	mov	r4, r1
 8009122:	4606      	mov	r6, r0
 8009124:	4611      	mov	r1, r2
 8009126:	4620      	mov	r0, r4
 8009128:	4617      	mov	r7, r2
 800912a:	f7ff ffdb 	bl	80090e4 <__mcmp>
 800912e:	1e05      	subs	r5, r0, #0
 8009130:	d110      	bne.n	8009154 <__mdiff+0x38>
 8009132:	4629      	mov	r1, r5
 8009134:	4630      	mov	r0, r6
 8009136:	f7ff fd0d 	bl	8008b54 <_Balloc>
 800913a:	b930      	cbnz	r0, 800914a <__mdiff+0x2e>
 800913c:	4b39      	ldr	r3, [pc, #228]	; (8009224 <__mdiff+0x108>)
 800913e:	4602      	mov	r2, r0
 8009140:	f240 2132 	movw	r1, #562	; 0x232
 8009144:	4838      	ldr	r0, [pc, #224]	; (8009228 <__mdiff+0x10c>)
 8009146:	f000 fb53 	bl	80097f0 <__assert_func>
 800914a:	2301      	movs	r3, #1
 800914c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009150:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009154:	bfa4      	itt	ge
 8009156:	463b      	movge	r3, r7
 8009158:	4627      	movge	r7, r4
 800915a:	4630      	mov	r0, r6
 800915c:	6879      	ldr	r1, [r7, #4]
 800915e:	bfa6      	itte	ge
 8009160:	461c      	movge	r4, r3
 8009162:	2500      	movge	r5, #0
 8009164:	2501      	movlt	r5, #1
 8009166:	f7ff fcf5 	bl	8008b54 <_Balloc>
 800916a:	b920      	cbnz	r0, 8009176 <__mdiff+0x5a>
 800916c:	4b2d      	ldr	r3, [pc, #180]	; (8009224 <__mdiff+0x108>)
 800916e:	4602      	mov	r2, r0
 8009170:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009174:	e7e6      	b.n	8009144 <__mdiff+0x28>
 8009176:	693e      	ldr	r6, [r7, #16]
 8009178:	60c5      	str	r5, [r0, #12]
 800917a:	6925      	ldr	r5, [r4, #16]
 800917c:	f107 0114 	add.w	r1, r7, #20
 8009180:	f104 0914 	add.w	r9, r4, #20
 8009184:	f100 0e14 	add.w	lr, r0, #20
 8009188:	f107 0210 	add.w	r2, r7, #16
 800918c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009190:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009194:	46f2      	mov	sl, lr
 8009196:	2700      	movs	r7, #0
 8009198:	f859 3b04 	ldr.w	r3, [r9], #4
 800919c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80091a0:	fa1f f883 	uxth.w	r8, r3
 80091a4:	fa17 f78b 	uxtah	r7, r7, fp
 80091a8:	0c1b      	lsrs	r3, r3, #16
 80091aa:	eba7 0808 	sub.w	r8, r7, r8
 80091ae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80091b2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80091b6:	fa1f f888 	uxth.w	r8, r8
 80091ba:	141f      	asrs	r7, r3, #16
 80091bc:	454d      	cmp	r5, r9
 80091be:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80091c2:	f84a 3b04 	str.w	r3, [sl], #4
 80091c6:	d8e7      	bhi.n	8009198 <__mdiff+0x7c>
 80091c8:	1b2b      	subs	r3, r5, r4
 80091ca:	3b15      	subs	r3, #21
 80091cc:	f023 0303 	bic.w	r3, r3, #3
 80091d0:	3304      	adds	r3, #4
 80091d2:	3415      	adds	r4, #21
 80091d4:	42a5      	cmp	r5, r4
 80091d6:	bf38      	it	cc
 80091d8:	2304      	movcc	r3, #4
 80091da:	4419      	add	r1, r3
 80091dc:	4473      	add	r3, lr
 80091de:	469e      	mov	lr, r3
 80091e0:	460d      	mov	r5, r1
 80091e2:	4565      	cmp	r5, ip
 80091e4:	d30e      	bcc.n	8009204 <__mdiff+0xe8>
 80091e6:	f10c 0203 	add.w	r2, ip, #3
 80091ea:	1a52      	subs	r2, r2, r1
 80091ec:	f022 0203 	bic.w	r2, r2, #3
 80091f0:	3903      	subs	r1, #3
 80091f2:	458c      	cmp	ip, r1
 80091f4:	bf38      	it	cc
 80091f6:	2200      	movcc	r2, #0
 80091f8:	441a      	add	r2, r3
 80091fa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80091fe:	b17b      	cbz	r3, 8009220 <__mdiff+0x104>
 8009200:	6106      	str	r6, [r0, #16]
 8009202:	e7a5      	b.n	8009150 <__mdiff+0x34>
 8009204:	f855 8b04 	ldr.w	r8, [r5], #4
 8009208:	fa17 f488 	uxtah	r4, r7, r8
 800920c:	1422      	asrs	r2, r4, #16
 800920e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009212:	b2a4      	uxth	r4, r4
 8009214:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009218:	f84e 4b04 	str.w	r4, [lr], #4
 800921c:	1417      	asrs	r7, r2, #16
 800921e:	e7e0      	b.n	80091e2 <__mdiff+0xc6>
 8009220:	3e01      	subs	r6, #1
 8009222:	e7ea      	b.n	80091fa <__mdiff+0xde>
 8009224:	0800a68c 	.word	0x0800a68c
 8009228:	0800a71c 	.word	0x0800a71c

0800922c <__ulp>:
 800922c:	b082      	sub	sp, #8
 800922e:	ed8d 0b00 	vstr	d0, [sp]
 8009232:	9b01      	ldr	r3, [sp, #4]
 8009234:	4912      	ldr	r1, [pc, #72]	; (8009280 <__ulp+0x54>)
 8009236:	4019      	ands	r1, r3
 8009238:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800923c:	2900      	cmp	r1, #0
 800923e:	dd05      	ble.n	800924c <__ulp+0x20>
 8009240:	2200      	movs	r2, #0
 8009242:	460b      	mov	r3, r1
 8009244:	ec43 2b10 	vmov	d0, r2, r3
 8009248:	b002      	add	sp, #8
 800924a:	4770      	bx	lr
 800924c:	4249      	negs	r1, r1
 800924e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009252:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009256:	f04f 0200 	mov.w	r2, #0
 800925a:	f04f 0300 	mov.w	r3, #0
 800925e:	da04      	bge.n	800926a <__ulp+0x3e>
 8009260:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009264:	fa41 f300 	asr.w	r3, r1, r0
 8009268:	e7ec      	b.n	8009244 <__ulp+0x18>
 800926a:	f1a0 0114 	sub.w	r1, r0, #20
 800926e:	291e      	cmp	r1, #30
 8009270:	bfda      	itte	le
 8009272:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009276:	fa20 f101 	lsrle.w	r1, r0, r1
 800927a:	2101      	movgt	r1, #1
 800927c:	460a      	mov	r2, r1
 800927e:	e7e1      	b.n	8009244 <__ulp+0x18>
 8009280:	7ff00000 	.word	0x7ff00000

08009284 <__b2d>:
 8009284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009286:	6905      	ldr	r5, [r0, #16]
 8009288:	f100 0714 	add.w	r7, r0, #20
 800928c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009290:	1f2e      	subs	r6, r5, #4
 8009292:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009296:	4620      	mov	r0, r4
 8009298:	f7ff fd52 	bl	8008d40 <__hi0bits>
 800929c:	f1c0 0320 	rsb	r3, r0, #32
 80092a0:	280a      	cmp	r0, #10
 80092a2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009320 <__b2d+0x9c>
 80092a6:	600b      	str	r3, [r1, #0]
 80092a8:	dc14      	bgt.n	80092d4 <__b2d+0x50>
 80092aa:	f1c0 0e0b 	rsb	lr, r0, #11
 80092ae:	fa24 f10e 	lsr.w	r1, r4, lr
 80092b2:	42b7      	cmp	r7, r6
 80092b4:	ea41 030c 	orr.w	r3, r1, ip
 80092b8:	bf34      	ite	cc
 80092ba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80092be:	2100      	movcs	r1, #0
 80092c0:	3015      	adds	r0, #21
 80092c2:	fa04 f000 	lsl.w	r0, r4, r0
 80092c6:	fa21 f10e 	lsr.w	r1, r1, lr
 80092ca:	ea40 0201 	orr.w	r2, r0, r1
 80092ce:	ec43 2b10 	vmov	d0, r2, r3
 80092d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092d4:	42b7      	cmp	r7, r6
 80092d6:	bf3a      	itte	cc
 80092d8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80092dc:	f1a5 0608 	subcc.w	r6, r5, #8
 80092e0:	2100      	movcs	r1, #0
 80092e2:	380b      	subs	r0, #11
 80092e4:	d017      	beq.n	8009316 <__b2d+0x92>
 80092e6:	f1c0 0c20 	rsb	ip, r0, #32
 80092ea:	fa04 f500 	lsl.w	r5, r4, r0
 80092ee:	42be      	cmp	r6, r7
 80092f0:	fa21 f40c 	lsr.w	r4, r1, ip
 80092f4:	ea45 0504 	orr.w	r5, r5, r4
 80092f8:	bf8c      	ite	hi
 80092fa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80092fe:	2400      	movls	r4, #0
 8009300:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009304:	fa01 f000 	lsl.w	r0, r1, r0
 8009308:	fa24 f40c 	lsr.w	r4, r4, ip
 800930c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009310:	ea40 0204 	orr.w	r2, r0, r4
 8009314:	e7db      	b.n	80092ce <__b2d+0x4a>
 8009316:	ea44 030c 	orr.w	r3, r4, ip
 800931a:	460a      	mov	r2, r1
 800931c:	e7d7      	b.n	80092ce <__b2d+0x4a>
 800931e:	bf00      	nop
 8009320:	3ff00000 	.word	0x3ff00000

08009324 <__d2b>:
 8009324:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009328:	4689      	mov	r9, r1
 800932a:	2101      	movs	r1, #1
 800932c:	ec57 6b10 	vmov	r6, r7, d0
 8009330:	4690      	mov	r8, r2
 8009332:	f7ff fc0f 	bl	8008b54 <_Balloc>
 8009336:	4604      	mov	r4, r0
 8009338:	b930      	cbnz	r0, 8009348 <__d2b+0x24>
 800933a:	4602      	mov	r2, r0
 800933c:	4b25      	ldr	r3, [pc, #148]	; (80093d4 <__d2b+0xb0>)
 800933e:	4826      	ldr	r0, [pc, #152]	; (80093d8 <__d2b+0xb4>)
 8009340:	f240 310a 	movw	r1, #778	; 0x30a
 8009344:	f000 fa54 	bl	80097f0 <__assert_func>
 8009348:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800934c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009350:	bb35      	cbnz	r5, 80093a0 <__d2b+0x7c>
 8009352:	2e00      	cmp	r6, #0
 8009354:	9301      	str	r3, [sp, #4]
 8009356:	d028      	beq.n	80093aa <__d2b+0x86>
 8009358:	4668      	mov	r0, sp
 800935a:	9600      	str	r6, [sp, #0]
 800935c:	f7ff fd10 	bl	8008d80 <__lo0bits>
 8009360:	9900      	ldr	r1, [sp, #0]
 8009362:	b300      	cbz	r0, 80093a6 <__d2b+0x82>
 8009364:	9a01      	ldr	r2, [sp, #4]
 8009366:	f1c0 0320 	rsb	r3, r0, #32
 800936a:	fa02 f303 	lsl.w	r3, r2, r3
 800936e:	430b      	orrs	r3, r1
 8009370:	40c2      	lsrs	r2, r0
 8009372:	6163      	str	r3, [r4, #20]
 8009374:	9201      	str	r2, [sp, #4]
 8009376:	9b01      	ldr	r3, [sp, #4]
 8009378:	61a3      	str	r3, [r4, #24]
 800937a:	2b00      	cmp	r3, #0
 800937c:	bf14      	ite	ne
 800937e:	2202      	movne	r2, #2
 8009380:	2201      	moveq	r2, #1
 8009382:	6122      	str	r2, [r4, #16]
 8009384:	b1d5      	cbz	r5, 80093bc <__d2b+0x98>
 8009386:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800938a:	4405      	add	r5, r0
 800938c:	f8c9 5000 	str.w	r5, [r9]
 8009390:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009394:	f8c8 0000 	str.w	r0, [r8]
 8009398:	4620      	mov	r0, r4
 800939a:	b003      	add	sp, #12
 800939c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093a4:	e7d5      	b.n	8009352 <__d2b+0x2e>
 80093a6:	6161      	str	r1, [r4, #20]
 80093a8:	e7e5      	b.n	8009376 <__d2b+0x52>
 80093aa:	a801      	add	r0, sp, #4
 80093ac:	f7ff fce8 	bl	8008d80 <__lo0bits>
 80093b0:	9b01      	ldr	r3, [sp, #4]
 80093b2:	6163      	str	r3, [r4, #20]
 80093b4:	2201      	movs	r2, #1
 80093b6:	6122      	str	r2, [r4, #16]
 80093b8:	3020      	adds	r0, #32
 80093ba:	e7e3      	b.n	8009384 <__d2b+0x60>
 80093bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80093c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80093c4:	f8c9 0000 	str.w	r0, [r9]
 80093c8:	6918      	ldr	r0, [r3, #16]
 80093ca:	f7ff fcb9 	bl	8008d40 <__hi0bits>
 80093ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80093d2:	e7df      	b.n	8009394 <__d2b+0x70>
 80093d4:	0800a68c 	.word	0x0800a68c
 80093d8:	0800a71c 	.word	0x0800a71c

080093dc <__ratio>:
 80093dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e0:	4688      	mov	r8, r1
 80093e2:	4669      	mov	r1, sp
 80093e4:	4681      	mov	r9, r0
 80093e6:	f7ff ff4d 	bl	8009284 <__b2d>
 80093ea:	a901      	add	r1, sp, #4
 80093ec:	4640      	mov	r0, r8
 80093ee:	ec55 4b10 	vmov	r4, r5, d0
 80093f2:	f7ff ff47 	bl	8009284 <__b2d>
 80093f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80093fa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80093fe:	eba3 0c02 	sub.w	ip, r3, r2
 8009402:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009406:	1a9b      	subs	r3, r3, r2
 8009408:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800940c:	ec51 0b10 	vmov	r0, r1, d0
 8009410:	2b00      	cmp	r3, #0
 8009412:	bfd6      	itet	le
 8009414:	460a      	movle	r2, r1
 8009416:	462a      	movgt	r2, r5
 8009418:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800941c:	468b      	mov	fp, r1
 800941e:	462f      	mov	r7, r5
 8009420:	bfd4      	ite	le
 8009422:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009426:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800942a:	4620      	mov	r0, r4
 800942c:	ee10 2a10 	vmov	r2, s0
 8009430:	465b      	mov	r3, fp
 8009432:	4639      	mov	r1, r7
 8009434:	f7f7 fa0a 	bl	800084c <__aeabi_ddiv>
 8009438:	ec41 0b10 	vmov	d0, r0, r1
 800943c:	b003      	add	sp, #12
 800943e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009442 <__copybits>:
 8009442:	3901      	subs	r1, #1
 8009444:	b570      	push	{r4, r5, r6, lr}
 8009446:	1149      	asrs	r1, r1, #5
 8009448:	6914      	ldr	r4, [r2, #16]
 800944a:	3101      	adds	r1, #1
 800944c:	f102 0314 	add.w	r3, r2, #20
 8009450:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009454:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009458:	1f05      	subs	r5, r0, #4
 800945a:	42a3      	cmp	r3, r4
 800945c:	d30c      	bcc.n	8009478 <__copybits+0x36>
 800945e:	1aa3      	subs	r3, r4, r2
 8009460:	3b11      	subs	r3, #17
 8009462:	f023 0303 	bic.w	r3, r3, #3
 8009466:	3211      	adds	r2, #17
 8009468:	42a2      	cmp	r2, r4
 800946a:	bf88      	it	hi
 800946c:	2300      	movhi	r3, #0
 800946e:	4418      	add	r0, r3
 8009470:	2300      	movs	r3, #0
 8009472:	4288      	cmp	r0, r1
 8009474:	d305      	bcc.n	8009482 <__copybits+0x40>
 8009476:	bd70      	pop	{r4, r5, r6, pc}
 8009478:	f853 6b04 	ldr.w	r6, [r3], #4
 800947c:	f845 6f04 	str.w	r6, [r5, #4]!
 8009480:	e7eb      	b.n	800945a <__copybits+0x18>
 8009482:	f840 3b04 	str.w	r3, [r0], #4
 8009486:	e7f4      	b.n	8009472 <__copybits+0x30>

08009488 <__any_on>:
 8009488:	f100 0214 	add.w	r2, r0, #20
 800948c:	6900      	ldr	r0, [r0, #16]
 800948e:	114b      	asrs	r3, r1, #5
 8009490:	4298      	cmp	r0, r3
 8009492:	b510      	push	{r4, lr}
 8009494:	db11      	blt.n	80094ba <__any_on+0x32>
 8009496:	dd0a      	ble.n	80094ae <__any_on+0x26>
 8009498:	f011 011f 	ands.w	r1, r1, #31
 800949c:	d007      	beq.n	80094ae <__any_on+0x26>
 800949e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80094a2:	fa24 f001 	lsr.w	r0, r4, r1
 80094a6:	fa00 f101 	lsl.w	r1, r0, r1
 80094aa:	428c      	cmp	r4, r1
 80094ac:	d10b      	bne.n	80094c6 <__any_on+0x3e>
 80094ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d803      	bhi.n	80094be <__any_on+0x36>
 80094b6:	2000      	movs	r0, #0
 80094b8:	bd10      	pop	{r4, pc}
 80094ba:	4603      	mov	r3, r0
 80094bc:	e7f7      	b.n	80094ae <__any_on+0x26>
 80094be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80094c2:	2900      	cmp	r1, #0
 80094c4:	d0f5      	beq.n	80094b2 <__any_on+0x2a>
 80094c6:	2001      	movs	r0, #1
 80094c8:	e7f6      	b.n	80094b8 <__any_on+0x30>

080094ca <_calloc_r>:
 80094ca:	b513      	push	{r0, r1, r4, lr}
 80094cc:	434a      	muls	r2, r1
 80094ce:	4611      	mov	r1, r2
 80094d0:	9201      	str	r2, [sp, #4]
 80094d2:	f7fc fb1b 	bl	8005b0c <_malloc_r>
 80094d6:	4604      	mov	r4, r0
 80094d8:	b118      	cbz	r0, 80094e2 <_calloc_r+0x18>
 80094da:	9a01      	ldr	r2, [sp, #4]
 80094dc:	2100      	movs	r1, #0
 80094de:	f7fc fabd 	bl	8005a5c <memset>
 80094e2:	4620      	mov	r0, r4
 80094e4:	b002      	add	sp, #8
 80094e6:	bd10      	pop	{r4, pc}

080094e8 <__ssputs_r>:
 80094e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094ec:	688e      	ldr	r6, [r1, #8]
 80094ee:	429e      	cmp	r6, r3
 80094f0:	4682      	mov	sl, r0
 80094f2:	460c      	mov	r4, r1
 80094f4:	4690      	mov	r8, r2
 80094f6:	461f      	mov	r7, r3
 80094f8:	d838      	bhi.n	800956c <__ssputs_r+0x84>
 80094fa:	898a      	ldrh	r2, [r1, #12]
 80094fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009500:	d032      	beq.n	8009568 <__ssputs_r+0x80>
 8009502:	6825      	ldr	r5, [r4, #0]
 8009504:	6909      	ldr	r1, [r1, #16]
 8009506:	eba5 0901 	sub.w	r9, r5, r1
 800950a:	6965      	ldr	r5, [r4, #20]
 800950c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009510:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009514:	3301      	adds	r3, #1
 8009516:	444b      	add	r3, r9
 8009518:	106d      	asrs	r5, r5, #1
 800951a:	429d      	cmp	r5, r3
 800951c:	bf38      	it	cc
 800951e:	461d      	movcc	r5, r3
 8009520:	0553      	lsls	r3, r2, #21
 8009522:	d531      	bpl.n	8009588 <__ssputs_r+0xa0>
 8009524:	4629      	mov	r1, r5
 8009526:	f7fc faf1 	bl	8005b0c <_malloc_r>
 800952a:	4606      	mov	r6, r0
 800952c:	b950      	cbnz	r0, 8009544 <__ssputs_r+0x5c>
 800952e:	230c      	movs	r3, #12
 8009530:	f8ca 3000 	str.w	r3, [sl]
 8009534:	89a3      	ldrh	r3, [r4, #12]
 8009536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800953a:	81a3      	strh	r3, [r4, #12]
 800953c:	f04f 30ff 	mov.w	r0, #4294967295
 8009540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009544:	6921      	ldr	r1, [r4, #16]
 8009546:	464a      	mov	r2, r9
 8009548:	f7fc fa60 	bl	8005a0c <memcpy>
 800954c:	89a3      	ldrh	r3, [r4, #12]
 800954e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009556:	81a3      	strh	r3, [r4, #12]
 8009558:	6126      	str	r6, [r4, #16]
 800955a:	6165      	str	r5, [r4, #20]
 800955c:	444e      	add	r6, r9
 800955e:	eba5 0509 	sub.w	r5, r5, r9
 8009562:	6026      	str	r6, [r4, #0]
 8009564:	60a5      	str	r5, [r4, #8]
 8009566:	463e      	mov	r6, r7
 8009568:	42be      	cmp	r6, r7
 800956a:	d900      	bls.n	800956e <__ssputs_r+0x86>
 800956c:	463e      	mov	r6, r7
 800956e:	4632      	mov	r2, r6
 8009570:	6820      	ldr	r0, [r4, #0]
 8009572:	4641      	mov	r1, r8
 8009574:	f7fc fa58 	bl	8005a28 <memmove>
 8009578:	68a3      	ldr	r3, [r4, #8]
 800957a:	6822      	ldr	r2, [r4, #0]
 800957c:	1b9b      	subs	r3, r3, r6
 800957e:	4432      	add	r2, r6
 8009580:	60a3      	str	r3, [r4, #8]
 8009582:	6022      	str	r2, [r4, #0]
 8009584:	2000      	movs	r0, #0
 8009586:	e7db      	b.n	8009540 <__ssputs_r+0x58>
 8009588:	462a      	mov	r2, r5
 800958a:	f000 f964 	bl	8009856 <_realloc_r>
 800958e:	4606      	mov	r6, r0
 8009590:	2800      	cmp	r0, #0
 8009592:	d1e1      	bne.n	8009558 <__ssputs_r+0x70>
 8009594:	6921      	ldr	r1, [r4, #16]
 8009596:	4650      	mov	r0, sl
 8009598:	f7fc fa68 	bl	8005a6c <_free_r>
 800959c:	e7c7      	b.n	800952e <__ssputs_r+0x46>
	...

080095a0 <_svfiprintf_r>:
 80095a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a4:	4698      	mov	r8, r3
 80095a6:	898b      	ldrh	r3, [r1, #12]
 80095a8:	061b      	lsls	r3, r3, #24
 80095aa:	b09d      	sub	sp, #116	; 0x74
 80095ac:	4607      	mov	r7, r0
 80095ae:	460d      	mov	r5, r1
 80095b0:	4614      	mov	r4, r2
 80095b2:	d50e      	bpl.n	80095d2 <_svfiprintf_r+0x32>
 80095b4:	690b      	ldr	r3, [r1, #16]
 80095b6:	b963      	cbnz	r3, 80095d2 <_svfiprintf_r+0x32>
 80095b8:	2140      	movs	r1, #64	; 0x40
 80095ba:	f7fc faa7 	bl	8005b0c <_malloc_r>
 80095be:	6028      	str	r0, [r5, #0]
 80095c0:	6128      	str	r0, [r5, #16]
 80095c2:	b920      	cbnz	r0, 80095ce <_svfiprintf_r+0x2e>
 80095c4:	230c      	movs	r3, #12
 80095c6:	603b      	str	r3, [r7, #0]
 80095c8:	f04f 30ff 	mov.w	r0, #4294967295
 80095cc:	e0d1      	b.n	8009772 <_svfiprintf_r+0x1d2>
 80095ce:	2340      	movs	r3, #64	; 0x40
 80095d0:	616b      	str	r3, [r5, #20]
 80095d2:	2300      	movs	r3, #0
 80095d4:	9309      	str	r3, [sp, #36]	; 0x24
 80095d6:	2320      	movs	r3, #32
 80095d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80095e0:	2330      	movs	r3, #48	; 0x30
 80095e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800978c <_svfiprintf_r+0x1ec>
 80095e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095ea:	f04f 0901 	mov.w	r9, #1
 80095ee:	4623      	mov	r3, r4
 80095f0:	469a      	mov	sl, r3
 80095f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095f6:	b10a      	cbz	r2, 80095fc <_svfiprintf_r+0x5c>
 80095f8:	2a25      	cmp	r2, #37	; 0x25
 80095fa:	d1f9      	bne.n	80095f0 <_svfiprintf_r+0x50>
 80095fc:	ebba 0b04 	subs.w	fp, sl, r4
 8009600:	d00b      	beq.n	800961a <_svfiprintf_r+0x7a>
 8009602:	465b      	mov	r3, fp
 8009604:	4622      	mov	r2, r4
 8009606:	4629      	mov	r1, r5
 8009608:	4638      	mov	r0, r7
 800960a:	f7ff ff6d 	bl	80094e8 <__ssputs_r>
 800960e:	3001      	adds	r0, #1
 8009610:	f000 80aa 	beq.w	8009768 <_svfiprintf_r+0x1c8>
 8009614:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009616:	445a      	add	r2, fp
 8009618:	9209      	str	r2, [sp, #36]	; 0x24
 800961a:	f89a 3000 	ldrb.w	r3, [sl]
 800961e:	2b00      	cmp	r3, #0
 8009620:	f000 80a2 	beq.w	8009768 <_svfiprintf_r+0x1c8>
 8009624:	2300      	movs	r3, #0
 8009626:	f04f 32ff 	mov.w	r2, #4294967295
 800962a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800962e:	f10a 0a01 	add.w	sl, sl, #1
 8009632:	9304      	str	r3, [sp, #16]
 8009634:	9307      	str	r3, [sp, #28]
 8009636:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800963a:	931a      	str	r3, [sp, #104]	; 0x68
 800963c:	4654      	mov	r4, sl
 800963e:	2205      	movs	r2, #5
 8009640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009644:	4851      	ldr	r0, [pc, #324]	; (800978c <_svfiprintf_r+0x1ec>)
 8009646:	f7f6 fdc3 	bl	80001d0 <memchr>
 800964a:	9a04      	ldr	r2, [sp, #16]
 800964c:	b9d8      	cbnz	r0, 8009686 <_svfiprintf_r+0xe6>
 800964e:	06d0      	lsls	r0, r2, #27
 8009650:	bf44      	itt	mi
 8009652:	2320      	movmi	r3, #32
 8009654:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009658:	0711      	lsls	r1, r2, #28
 800965a:	bf44      	itt	mi
 800965c:	232b      	movmi	r3, #43	; 0x2b
 800965e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009662:	f89a 3000 	ldrb.w	r3, [sl]
 8009666:	2b2a      	cmp	r3, #42	; 0x2a
 8009668:	d015      	beq.n	8009696 <_svfiprintf_r+0xf6>
 800966a:	9a07      	ldr	r2, [sp, #28]
 800966c:	4654      	mov	r4, sl
 800966e:	2000      	movs	r0, #0
 8009670:	f04f 0c0a 	mov.w	ip, #10
 8009674:	4621      	mov	r1, r4
 8009676:	f811 3b01 	ldrb.w	r3, [r1], #1
 800967a:	3b30      	subs	r3, #48	; 0x30
 800967c:	2b09      	cmp	r3, #9
 800967e:	d94e      	bls.n	800971e <_svfiprintf_r+0x17e>
 8009680:	b1b0      	cbz	r0, 80096b0 <_svfiprintf_r+0x110>
 8009682:	9207      	str	r2, [sp, #28]
 8009684:	e014      	b.n	80096b0 <_svfiprintf_r+0x110>
 8009686:	eba0 0308 	sub.w	r3, r0, r8
 800968a:	fa09 f303 	lsl.w	r3, r9, r3
 800968e:	4313      	orrs	r3, r2
 8009690:	9304      	str	r3, [sp, #16]
 8009692:	46a2      	mov	sl, r4
 8009694:	e7d2      	b.n	800963c <_svfiprintf_r+0x9c>
 8009696:	9b03      	ldr	r3, [sp, #12]
 8009698:	1d19      	adds	r1, r3, #4
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	9103      	str	r1, [sp, #12]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	bfbb      	ittet	lt
 80096a2:	425b      	neglt	r3, r3
 80096a4:	f042 0202 	orrlt.w	r2, r2, #2
 80096a8:	9307      	strge	r3, [sp, #28]
 80096aa:	9307      	strlt	r3, [sp, #28]
 80096ac:	bfb8      	it	lt
 80096ae:	9204      	strlt	r2, [sp, #16]
 80096b0:	7823      	ldrb	r3, [r4, #0]
 80096b2:	2b2e      	cmp	r3, #46	; 0x2e
 80096b4:	d10c      	bne.n	80096d0 <_svfiprintf_r+0x130>
 80096b6:	7863      	ldrb	r3, [r4, #1]
 80096b8:	2b2a      	cmp	r3, #42	; 0x2a
 80096ba:	d135      	bne.n	8009728 <_svfiprintf_r+0x188>
 80096bc:	9b03      	ldr	r3, [sp, #12]
 80096be:	1d1a      	adds	r2, r3, #4
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	9203      	str	r2, [sp, #12]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	bfb8      	it	lt
 80096c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80096cc:	3402      	adds	r4, #2
 80096ce:	9305      	str	r3, [sp, #20]
 80096d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800979c <_svfiprintf_r+0x1fc>
 80096d4:	7821      	ldrb	r1, [r4, #0]
 80096d6:	2203      	movs	r2, #3
 80096d8:	4650      	mov	r0, sl
 80096da:	f7f6 fd79 	bl	80001d0 <memchr>
 80096de:	b140      	cbz	r0, 80096f2 <_svfiprintf_r+0x152>
 80096e0:	2340      	movs	r3, #64	; 0x40
 80096e2:	eba0 000a 	sub.w	r0, r0, sl
 80096e6:	fa03 f000 	lsl.w	r0, r3, r0
 80096ea:	9b04      	ldr	r3, [sp, #16]
 80096ec:	4303      	orrs	r3, r0
 80096ee:	3401      	adds	r4, #1
 80096f0:	9304      	str	r3, [sp, #16]
 80096f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096f6:	4826      	ldr	r0, [pc, #152]	; (8009790 <_svfiprintf_r+0x1f0>)
 80096f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096fc:	2206      	movs	r2, #6
 80096fe:	f7f6 fd67 	bl	80001d0 <memchr>
 8009702:	2800      	cmp	r0, #0
 8009704:	d038      	beq.n	8009778 <_svfiprintf_r+0x1d8>
 8009706:	4b23      	ldr	r3, [pc, #140]	; (8009794 <_svfiprintf_r+0x1f4>)
 8009708:	bb1b      	cbnz	r3, 8009752 <_svfiprintf_r+0x1b2>
 800970a:	9b03      	ldr	r3, [sp, #12]
 800970c:	3307      	adds	r3, #7
 800970e:	f023 0307 	bic.w	r3, r3, #7
 8009712:	3308      	adds	r3, #8
 8009714:	9303      	str	r3, [sp, #12]
 8009716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009718:	4433      	add	r3, r6
 800971a:	9309      	str	r3, [sp, #36]	; 0x24
 800971c:	e767      	b.n	80095ee <_svfiprintf_r+0x4e>
 800971e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009722:	460c      	mov	r4, r1
 8009724:	2001      	movs	r0, #1
 8009726:	e7a5      	b.n	8009674 <_svfiprintf_r+0xd4>
 8009728:	2300      	movs	r3, #0
 800972a:	3401      	adds	r4, #1
 800972c:	9305      	str	r3, [sp, #20]
 800972e:	4619      	mov	r1, r3
 8009730:	f04f 0c0a 	mov.w	ip, #10
 8009734:	4620      	mov	r0, r4
 8009736:	f810 2b01 	ldrb.w	r2, [r0], #1
 800973a:	3a30      	subs	r2, #48	; 0x30
 800973c:	2a09      	cmp	r2, #9
 800973e:	d903      	bls.n	8009748 <_svfiprintf_r+0x1a8>
 8009740:	2b00      	cmp	r3, #0
 8009742:	d0c5      	beq.n	80096d0 <_svfiprintf_r+0x130>
 8009744:	9105      	str	r1, [sp, #20]
 8009746:	e7c3      	b.n	80096d0 <_svfiprintf_r+0x130>
 8009748:	fb0c 2101 	mla	r1, ip, r1, r2
 800974c:	4604      	mov	r4, r0
 800974e:	2301      	movs	r3, #1
 8009750:	e7f0      	b.n	8009734 <_svfiprintf_r+0x194>
 8009752:	ab03      	add	r3, sp, #12
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	462a      	mov	r2, r5
 8009758:	4b0f      	ldr	r3, [pc, #60]	; (8009798 <_svfiprintf_r+0x1f8>)
 800975a:	a904      	add	r1, sp, #16
 800975c:	4638      	mov	r0, r7
 800975e:	f7fc facf 	bl	8005d00 <_printf_float>
 8009762:	1c42      	adds	r2, r0, #1
 8009764:	4606      	mov	r6, r0
 8009766:	d1d6      	bne.n	8009716 <_svfiprintf_r+0x176>
 8009768:	89ab      	ldrh	r3, [r5, #12]
 800976a:	065b      	lsls	r3, r3, #25
 800976c:	f53f af2c 	bmi.w	80095c8 <_svfiprintf_r+0x28>
 8009770:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009772:	b01d      	add	sp, #116	; 0x74
 8009774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009778:	ab03      	add	r3, sp, #12
 800977a:	9300      	str	r3, [sp, #0]
 800977c:	462a      	mov	r2, r5
 800977e:	4b06      	ldr	r3, [pc, #24]	; (8009798 <_svfiprintf_r+0x1f8>)
 8009780:	a904      	add	r1, sp, #16
 8009782:	4638      	mov	r0, r7
 8009784:	f7fc fd60 	bl	8006248 <_printf_i>
 8009788:	e7eb      	b.n	8009762 <_svfiprintf_r+0x1c2>
 800978a:	bf00      	nop
 800978c:	0800a87c 	.word	0x0800a87c
 8009790:	0800a886 	.word	0x0800a886
 8009794:	08005d01 	.word	0x08005d01
 8009798:	080094e9 	.word	0x080094e9
 800979c:	0800a882 	.word	0x0800a882

080097a0 <nan>:
 80097a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80097a8 <nan+0x8>
 80097a4:	4770      	bx	lr
 80097a6:	bf00      	nop
 80097a8:	00000000 	.word	0x00000000
 80097ac:	7ff80000 	.word	0x7ff80000

080097b0 <strncmp>:
 80097b0:	b510      	push	{r4, lr}
 80097b2:	b16a      	cbz	r2, 80097d0 <strncmp+0x20>
 80097b4:	3901      	subs	r1, #1
 80097b6:	1884      	adds	r4, r0, r2
 80097b8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80097bc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d103      	bne.n	80097cc <strncmp+0x1c>
 80097c4:	42a0      	cmp	r0, r4
 80097c6:	d001      	beq.n	80097cc <strncmp+0x1c>
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d1f5      	bne.n	80097b8 <strncmp+0x8>
 80097cc:	1a98      	subs	r0, r3, r2
 80097ce:	bd10      	pop	{r4, pc}
 80097d0:	4610      	mov	r0, r2
 80097d2:	e7fc      	b.n	80097ce <strncmp+0x1e>

080097d4 <__ascii_wctomb>:
 80097d4:	b149      	cbz	r1, 80097ea <__ascii_wctomb+0x16>
 80097d6:	2aff      	cmp	r2, #255	; 0xff
 80097d8:	bf85      	ittet	hi
 80097da:	238a      	movhi	r3, #138	; 0x8a
 80097dc:	6003      	strhi	r3, [r0, #0]
 80097de:	700a      	strbls	r2, [r1, #0]
 80097e0:	f04f 30ff 	movhi.w	r0, #4294967295
 80097e4:	bf98      	it	ls
 80097e6:	2001      	movls	r0, #1
 80097e8:	4770      	bx	lr
 80097ea:	4608      	mov	r0, r1
 80097ec:	4770      	bx	lr
	...

080097f0 <__assert_func>:
 80097f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80097f2:	4614      	mov	r4, r2
 80097f4:	461a      	mov	r2, r3
 80097f6:	4b09      	ldr	r3, [pc, #36]	; (800981c <__assert_func+0x2c>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4605      	mov	r5, r0
 80097fc:	68d8      	ldr	r0, [r3, #12]
 80097fe:	b14c      	cbz	r4, 8009814 <__assert_func+0x24>
 8009800:	4b07      	ldr	r3, [pc, #28]	; (8009820 <__assert_func+0x30>)
 8009802:	9100      	str	r1, [sp, #0]
 8009804:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009808:	4906      	ldr	r1, [pc, #24]	; (8009824 <__assert_func+0x34>)
 800980a:	462b      	mov	r3, r5
 800980c:	f000 f80e 	bl	800982c <fiprintf>
 8009810:	f7fc f8ba 	bl	8005988 <abort>
 8009814:	4b04      	ldr	r3, [pc, #16]	; (8009828 <__assert_func+0x38>)
 8009816:	461c      	mov	r4, r3
 8009818:	e7f3      	b.n	8009802 <__assert_func+0x12>
 800981a:	bf00      	nop
 800981c:	20000030 	.word	0x20000030
 8009820:	0800a88d 	.word	0x0800a88d
 8009824:	0800a89a 	.word	0x0800a89a
 8009828:	0800a8c8 	.word	0x0800a8c8

0800982c <fiprintf>:
 800982c:	b40e      	push	{r1, r2, r3}
 800982e:	b503      	push	{r0, r1, lr}
 8009830:	4601      	mov	r1, r0
 8009832:	ab03      	add	r3, sp, #12
 8009834:	4805      	ldr	r0, [pc, #20]	; (800984c <fiprintf+0x20>)
 8009836:	f853 2b04 	ldr.w	r2, [r3], #4
 800983a:	6800      	ldr	r0, [r0, #0]
 800983c:	9301      	str	r3, [sp, #4]
 800983e:	f000 f859 	bl	80098f4 <_vfiprintf_r>
 8009842:	b002      	add	sp, #8
 8009844:	f85d eb04 	ldr.w	lr, [sp], #4
 8009848:	b003      	add	sp, #12
 800984a:	4770      	bx	lr
 800984c:	20000030 	.word	0x20000030

08009850 <__retarget_lock_init_recursive>:
 8009850:	4770      	bx	lr

08009852 <__retarget_lock_acquire_recursive>:
 8009852:	4770      	bx	lr

08009854 <__retarget_lock_release_recursive>:
 8009854:	4770      	bx	lr

08009856 <_realloc_r>:
 8009856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009858:	4607      	mov	r7, r0
 800985a:	4614      	mov	r4, r2
 800985c:	460e      	mov	r6, r1
 800985e:	b921      	cbnz	r1, 800986a <_realloc_r+0x14>
 8009860:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009864:	4611      	mov	r1, r2
 8009866:	f7fc b951 	b.w	8005b0c <_malloc_r>
 800986a:	b922      	cbnz	r2, 8009876 <_realloc_r+0x20>
 800986c:	f7fc f8fe 	bl	8005a6c <_free_r>
 8009870:	4625      	mov	r5, r4
 8009872:	4628      	mov	r0, r5
 8009874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009876:	f000 fc49 	bl	800a10c <_malloc_usable_size_r>
 800987a:	42a0      	cmp	r0, r4
 800987c:	d20f      	bcs.n	800989e <_realloc_r+0x48>
 800987e:	4621      	mov	r1, r4
 8009880:	4638      	mov	r0, r7
 8009882:	f7fc f943 	bl	8005b0c <_malloc_r>
 8009886:	4605      	mov	r5, r0
 8009888:	2800      	cmp	r0, #0
 800988a:	d0f2      	beq.n	8009872 <_realloc_r+0x1c>
 800988c:	4631      	mov	r1, r6
 800988e:	4622      	mov	r2, r4
 8009890:	f7fc f8bc 	bl	8005a0c <memcpy>
 8009894:	4631      	mov	r1, r6
 8009896:	4638      	mov	r0, r7
 8009898:	f7fc f8e8 	bl	8005a6c <_free_r>
 800989c:	e7e9      	b.n	8009872 <_realloc_r+0x1c>
 800989e:	4635      	mov	r5, r6
 80098a0:	e7e7      	b.n	8009872 <_realloc_r+0x1c>

080098a2 <__sfputc_r>:
 80098a2:	6893      	ldr	r3, [r2, #8]
 80098a4:	3b01      	subs	r3, #1
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	b410      	push	{r4}
 80098aa:	6093      	str	r3, [r2, #8]
 80098ac:	da08      	bge.n	80098c0 <__sfputc_r+0x1e>
 80098ae:	6994      	ldr	r4, [r2, #24]
 80098b0:	42a3      	cmp	r3, r4
 80098b2:	db01      	blt.n	80098b8 <__sfputc_r+0x16>
 80098b4:	290a      	cmp	r1, #10
 80098b6:	d103      	bne.n	80098c0 <__sfputc_r+0x1e>
 80098b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098bc:	f000 b94a 	b.w	8009b54 <__swbuf_r>
 80098c0:	6813      	ldr	r3, [r2, #0]
 80098c2:	1c58      	adds	r0, r3, #1
 80098c4:	6010      	str	r0, [r2, #0]
 80098c6:	7019      	strb	r1, [r3, #0]
 80098c8:	4608      	mov	r0, r1
 80098ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <__sfputs_r>:
 80098d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098d2:	4606      	mov	r6, r0
 80098d4:	460f      	mov	r7, r1
 80098d6:	4614      	mov	r4, r2
 80098d8:	18d5      	adds	r5, r2, r3
 80098da:	42ac      	cmp	r4, r5
 80098dc:	d101      	bne.n	80098e2 <__sfputs_r+0x12>
 80098de:	2000      	movs	r0, #0
 80098e0:	e007      	b.n	80098f2 <__sfputs_r+0x22>
 80098e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098e6:	463a      	mov	r2, r7
 80098e8:	4630      	mov	r0, r6
 80098ea:	f7ff ffda 	bl	80098a2 <__sfputc_r>
 80098ee:	1c43      	adds	r3, r0, #1
 80098f0:	d1f3      	bne.n	80098da <__sfputs_r+0xa>
 80098f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080098f4 <_vfiprintf_r>:
 80098f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f8:	460d      	mov	r5, r1
 80098fa:	b09d      	sub	sp, #116	; 0x74
 80098fc:	4614      	mov	r4, r2
 80098fe:	4698      	mov	r8, r3
 8009900:	4606      	mov	r6, r0
 8009902:	b118      	cbz	r0, 800990c <_vfiprintf_r+0x18>
 8009904:	6983      	ldr	r3, [r0, #24]
 8009906:	b90b      	cbnz	r3, 800990c <_vfiprintf_r+0x18>
 8009908:	f000 fafe 	bl	8009f08 <__sinit>
 800990c:	4b89      	ldr	r3, [pc, #548]	; (8009b34 <_vfiprintf_r+0x240>)
 800990e:	429d      	cmp	r5, r3
 8009910:	d11b      	bne.n	800994a <_vfiprintf_r+0x56>
 8009912:	6875      	ldr	r5, [r6, #4]
 8009914:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009916:	07d9      	lsls	r1, r3, #31
 8009918:	d405      	bmi.n	8009926 <_vfiprintf_r+0x32>
 800991a:	89ab      	ldrh	r3, [r5, #12]
 800991c:	059a      	lsls	r2, r3, #22
 800991e:	d402      	bmi.n	8009926 <_vfiprintf_r+0x32>
 8009920:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009922:	f7ff ff96 	bl	8009852 <__retarget_lock_acquire_recursive>
 8009926:	89ab      	ldrh	r3, [r5, #12]
 8009928:	071b      	lsls	r3, r3, #28
 800992a:	d501      	bpl.n	8009930 <_vfiprintf_r+0x3c>
 800992c:	692b      	ldr	r3, [r5, #16]
 800992e:	b9eb      	cbnz	r3, 800996c <_vfiprintf_r+0x78>
 8009930:	4629      	mov	r1, r5
 8009932:	4630      	mov	r0, r6
 8009934:	f000 f960 	bl	8009bf8 <__swsetup_r>
 8009938:	b1c0      	cbz	r0, 800996c <_vfiprintf_r+0x78>
 800993a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800993c:	07dc      	lsls	r4, r3, #31
 800993e:	d50e      	bpl.n	800995e <_vfiprintf_r+0x6a>
 8009940:	f04f 30ff 	mov.w	r0, #4294967295
 8009944:	b01d      	add	sp, #116	; 0x74
 8009946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800994a:	4b7b      	ldr	r3, [pc, #492]	; (8009b38 <_vfiprintf_r+0x244>)
 800994c:	429d      	cmp	r5, r3
 800994e:	d101      	bne.n	8009954 <_vfiprintf_r+0x60>
 8009950:	68b5      	ldr	r5, [r6, #8]
 8009952:	e7df      	b.n	8009914 <_vfiprintf_r+0x20>
 8009954:	4b79      	ldr	r3, [pc, #484]	; (8009b3c <_vfiprintf_r+0x248>)
 8009956:	429d      	cmp	r5, r3
 8009958:	bf08      	it	eq
 800995a:	68f5      	ldreq	r5, [r6, #12]
 800995c:	e7da      	b.n	8009914 <_vfiprintf_r+0x20>
 800995e:	89ab      	ldrh	r3, [r5, #12]
 8009960:	0598      	lsls	r0, r3, #22
 8009962:	d4ed      	bmi.n	8009940 <_vfiprintf_r+0x4c>
 8009964:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009966:	f7ff ff75 	bl	8009854 <__retarget_lock_release_recursive>
 800996a:	e7e9      	b.n	8009940 <_vfiprintf_r+0x4c>
 800996c:	2300      	movs	r3, #0
 800996e:	9309      	str	r3, [sp, #36]	; 0x24
 8009970:	2320      	movs	r3, #32
 8009972:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009976:	f8cd 800c 	str.w	r8, [sp, #12]
 800997a:	2330      	movs	r3, #48	; 0x30
 800997c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009b40 <_vfiprintf_r+0x24c>
 8009980:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009984:	f04f 0901 	mov.w	r9, #1
 8009988:	4623      	mov	r3, r4
 800998a:	469a      	mov	sl, r3
 800998c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009990:	b10a      	cbz	r2, 8009996 <_vfiprintf_r+0xa2>
 8009992:	2a25      	cmp	r2, #37	; 0x25
 8009994:	d1f9      	bne.n	800998a <_vfiprintf_r+0x96>
 8009996:	ebba 0b04 	subs.w	fp, sl, r4
 800999a:	d00b      	beq.n	80099b4 <_vfiprintf_r+0xc0>
 800999c:	465b      	mov	r3, fp
 800999e:	4622      	mov	r2, r4
 80099a0:	4629      	mov	r1, r5
 80099a2:	4630      	mov	r0, r6
 80099a4:	f7ff ff94 	bl	80098d0 <__sfputs_r>
 80099a8:	3001      	adds	r0, #1
 80099aa:	f000 80aa 	beq.w	8009b02 <_vfiprintf_r+0x20e>
 80099ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099b0:	445a      	add	r2, fp
 80099b2:	9209      	str	r2, [sp, #36]	; 0x24
 80099b4:	f89a 3000 	ldrb.w	r3, [sl]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f000 80a2 	beq.w	8009b02 <_vfiprintf_r+0x20e>
 80099be:	2300      	movs	r3, #0
 80099c0:	f04f 32ff 	mov.w	r2, #4294967295
 80099c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099c8:	f10a 0a01 	add.w	sl, sl, #1
 80099cc:	9304      	str	r3, [sp, #16]
 80099ce:	9307      	str	r3, [sp, #28]
 80099d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099d4:	931a      	str	r3, [sp, #104]	; 0x68
 80099d6:	4654      	mov	r4, sl
 80099d8:	2205      	movs	r2, #5
 80099da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099de:	4858      	ldr	r0, [pc, #352]	; (8009b40 <_vfiprintf_r+0x24c>)
 80099e0:	f7f6 fbf6 	bl	80001d0 <memchr>
 80099e4:	9a04      	ldr	r2, [sp, #16]
 80099e6:	b9d8      	cbnz	r0, 8009a20 <_vfiprintf_r+0x12c>
 80099e8:	06d1      	lsls	r1, r2, #27
 80099ea:	bf44      	itt	mi
 80099ec:	2320      	movmi	r3, #32
 80099ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099f2:	0713      	lsls	r3, r2, #28
 80099f4:	bf44      	itt	mi
 80099f6:	232b      	movmi	r3, #43	; 0x2b
 80099f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099fc:	f89a 3000 	ldrb.w	r3, [sl]
 8009a00:	2b2a      	cmp	r3, #42	; 0x2a
 8009a02:	d015      	beq.n	8009a30 <_vfiprintf_r+0x13c>
 8009a04:	9a07      	ldr	r2, [sp, #28]
 8009a06:	4654      	mov	r4, sl
 8009a08:	2000      	movs	r0, #0
 8009a0a:	f04f 0c0a 	mov.w	ip, #10
 8009a0e:	4621      	mov	r1, r4
 8009a10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a14:	3b30      	subs	r3, #48	; 0x30
 8009a16:	2b09      	cmp	r3, #9
 8009a18:	d94e      	bls.n	8009ab8 <_vfiprintf_r+0x1c4>
 8009a1a:	b1b0      	cbz	r0, 8009a4a <_vfiprintf_r+0x156>
 8009a1c:	9207      	str	r2, [sp, #28]
 8009a1e:	e014      	b.n	8009a4a <_vfiprintf_r+0x156>
 8009a20:	eba0 0308 	sub.w	r3, r0, r8
 8009a24:	fa09 f303 	lsl.w	r3, r9, r3
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	9304      	str	r3, [sp, #16]
 8009a2c:	46a2      	mov	sl, r4
 8009a2e:	e7d2      	b.n	80099d6 <_vfiprintf_r+0xe2>
 8009a30:	9b03      	ldr	r3, [sp, #12]
 8009a32:	1d19      	adds	r1, r3, #4
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	9103      	str	r1, [sp, #12]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	bfbb      	ittet	lt
 8009a3c:	425b      	neglt	r3, r3
 8009a3e:	f042 0202 	orrlt.w	r2, r2, #2
 8009a42:	9307      	strge	r3, [sp, #28]
 8009a44:	9307      	strlt	r3, [sp, #28]
 8009a46:	bfb8      	it	lt
 8009a48:	9204      	strlt	r2, [sp, #16]
 8009a4a:	7823      	ldrb	r3, [r4, #0]
 8009a4c:	2b2e      	cmp	r3, #46	; 0x2e
 8009a4e:	d10c      	bne.n	8009a6a <_vfiprintf_r+0x176>
 8009a50:	7863      	ldrb	r3, [r4, #1]
 8009a52:	2b2a      	cmp	r3, #42	; 0x2a
 8009a54:	d135      	bne.n	8009ac2 <_vfiprintf_r+0x1ce>
 8009a56:	9b03      	ldr	r3, [sp, #12]
 8009a58:	1d1a      	adds	r2, r3, #4
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	9203      	str	r2, [sp, #12]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	bfb8      	it	lt
 8009a62:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a66:	3402      	adds	r4, #2
 8009a68:	9305      	str	r3, [sp, #20]
 8009a6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009b50 <_vfiprintf_r+0x25c>
 8009a6e:	7821      	ldrb	r1, [r4, #0]
 8009a70:	2203      	movs	r2, #3
 8009a72:	4650      	mov	r0, sl
 8009a74:	f7f6 fbac 	bl	80001d0 <memchr>
 8009a78:	b140      	cbz	r0, 8009a8c <_vfiprintf_r+0x198>
 8009a7a:	2340      	movs	r3, #64	; 0x40
 8009a7c:	eba0 000a 	sub.w	r0, r0, sl
 8009a80:	fa03 f000 	lsl.w	r0, r3, r0
 8009a84:	9b04      	ldr	r3, [sp, #16]
 8009a86:	4303      	orrs	r3, r0
 8009a88:	3401      	adds	r4, #1
 8009a8a:	9304      	str	r3, [sp, #16]
 8009a8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a90:	482c      	ldr	r0, [pc, #176]	; (8009b44 <_vfiprintf_r+0x250>)
 8009a92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a96:	2206      	movs	r2, #6
 8009a98:	f7f6 fb9a 	bl	80001d0 <memchr>
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	d03f      	beq.n	8009b20 <_vfiprintf_r+0x22c>
 8009aa0:	4b29      	ldr	r3, [pc, #164]	; (8009b48 <_vfiprintf_r+0x254>)
 8009aa2:	bb1b      	cbnz	r3, 8009aec <_vfiprintf_r+0x1f8>
 8009aa4:	9b03      	ldr	r3, [sp, #12]
 8009aa6:	3307      	adds	r3, #7
 8009aa8:	f023 0307 	bic.w	r3, r3, #7
 8009aac:	3308      	adds	r3, #8
 8009aae:	9303      	str	r3, [sp, #12]
 8009ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ab2:	443b      	add	r3, r7
 8009ab4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ab6:	e767      	b.n	8009988 <_vfiprintf_r+0x94>
 8009ab8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009abc:	460c      	mov	r4, r1
 8009abe:	2001      	movs	r0, #1
 8009ac0:	e7a5      	b.n	8009a0e <_vfiprintf_r+0x11a>
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	3401      	adds	r4, #1
 8009ac6:	9305      	str	r3, [sp, #20]
 8009ac8:	4619      	mov	r1, r3
 8009aca:	f04f 0c0a 	mov.w	ip, #10
 8009ace:	4620      	mov	r0, r4
 8009ad0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ad4:	3a30      	subs	r2, #48	; 0x30
 8009ad6:	2a09      	cmp	r2, #9
 8009ad8:	d903      	bls.n	8009ae2 <_vfiprintf_r+0x1ee>
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d0c5      	beq.n	8009a6a <_vfiprintf_r+0x176>
 8009ade:	9105      	str	r1, [sp, #20]
 8009ae0:	e7c3      	b.n	8009a6a <_vfiprintf_r+0x176>
 8009ae2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ae6:	4604      	mov	r4, r0
 8009ae8:	2301      	movs	r3, #1
 8009aea:	e7f0      	b.n	8009ace <_vfiprintf_r+0x1da>
 8009aec:	ab03      	add	r3, sp, #12
 8009aee:	9300      	str	r3, [sp, #0]
 8009af0:	462a      	mov	r2, r5
 8009af2:	4b16      	ldr	r3, [pc, #88]	; (8009b4c <_vfiprintf_r+0x258>)
 8009af4:	a904      	add	r1, sp, #16
 8009af6:	4630      	mov	r0, r6
 8009af8:	f7fc f902 	bl	8005d00 <_printf_float>
 8009afc:	4607      	mov	r7, r0
 8009afe:	1c78      	adds	r0, r7, #1
 8009b00:	d1d6      	bne.n	8009ab0 <_vfiprintf_r+0x1bc>
 8009b02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b04:	07d9      	lsls	r1, r3, #31
 8009b06:	d405      	bmi.n	8009b14 <_vfiprintf_r+0x220>
 8009b08:	89ab      	ldrh	r3, [r5, #12]
 8009b0a:	059a      	lsls	r2, r3, #22
 8009b0c:	d402      	bmi.n	8009b14 <_vfiprintf_r+0x220>
 8009b0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b10:	f7ff fea0 	bl	8009854 <__retarget_lock_release_recursive>
 8009b14:	89ab      	ldrh	r3, [r5, #12]
 8009b16:	065b      	lsls	r3, r3, #25
 8009b18:	f53f af12 	bmi.w	8009940 <_vfiprintf_r+0x4c>
 8009b1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b1e:	e711      	b.n	8009944 <_vfiprintf_r+0x50>
 8009b20:	ab03      	add	r3, sp, #12
 8009b22:	9300      	str	r3, [sp, #0]
 8009b24:	462a      	mov	r2, r5
 8009b26:	4b09      	ldr	r3, [pc, #36]	; (8009b4c <_vfiprintf_r+0x258>)
 8009b28:	a904      	add	r1, sp, #16
 8009b2a:	4630      	mov	r0, r6
 8009b2c:	f7fc fb8c 	bl	8006248 <_printf_i>
 8009b30:	e7e4      	b.n	8009afc <_vfiprintf_r+0x208>
 8009b32:	bf00      	nop
 8009b34:	0800a8ec 	.word	0x0800a8ec
 8009b38:	0800a90c 	.word	0x0800a90c
 8009b3c:	0800a8cc 	.word	0x0800a8cc
 8009b40:	0800a87c 	.word	0x0800a87c
 8009b44:	0800a886 	.word	0x0800a886
 8009b48:	08005d01 	.word	0x08005d01
 8009b4c:	080098d1 	.word	0x080098d1
 8009b50:	0800a882 	.word	0x0800a882

08009b54 <__swbuf_r>:
 8009b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b56:	460e      	mov	r6, r1
 8009b58:	4614      	mov	r4, r2
 8009b5a:	4605      	mov	r5, r0
 8009b5c:	b118      	cbz	r0, 8009b66 <__swbuf_r+0x12>
 8009b5e:	6983      	ldr	r3, [r0, #24]
 8009b60:	b90b      	cbnz	r3, 8009b66 <__swbuf_r+0x12>
 8009b62:	f000 f9d1 	bl	8009f08 <__sinit>
 8009b66:	4b21      	ldr	r3, [pc, #132]	; (8009bec <__swbuf_r+0x98>)
 8009b68:	429c      	cmp	r4, r3
 8009b6a:	d12b      	bne.n	8009bc4 <__swbuf_r+0x70>
 8009b6c:	686c      	ldr	r4, [r5, #4]
 8009b6e:	69a3      	ldr	r3, [r4, #24]
 8009b70:	60a3      	str	r3, [r4, #8]
 8009b72:	89a3      	ldrh	r3, [r4, #12]
 8009b74:	071a      	lsls	r2, r3, #28
 8009b76:	d52f      	bpl.n	8009bd8 <__swbuf_r+0x84>
 8009b78:	6923      	ldr	r3, [r4, #16]
 8009b7a:	b36b      	cbz	r3, 8009bd8 <__swbuf_r+0x84>
 8009b7c:	6923      	ldr	r3, [r4, #16]
 8009b7e:	6820      	ldr	r0, [r4, #0]
 8009b80:	1ac0      	subs	r0, r0, r3
 8009b82:	6963      	ldr	r3, [r4, #20]
 8009b84:	b2f6      	uxtb	r6, r6
 8009b86:	4283      	cmp	r3, r0
 8009b88:	4637      	mov	r7, r6
 8009b8a:	dc04      	bgt.n	8009b96 <__swbuf_r+0x42>
 8009b8c:	4621      	mov	r1, r4
 8009b8e:	4628      	mov	r0, r5
 8009b90:	f000 f926 	bl	8009de0 <_fflush_r>
 8009b94:	bb30      	cbnz	r0, 8009be4 <__swbuf_r+0x90>
 8009b96:	68a3      	ldr	r3, [r4, #8]
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	60a3      	str	r3, [r4, #8]
 8009b9c:	6823      	ldr	r3, [r4, #0]
 8009b9e:	1c5a      	adds	r2, r3, #1
 8009ba0:	6022      	str	r2, [r4, #0]
 8009ba2:	701e      	strb	r6, [r3, #0]
 8009ba4:	6963      	ldr	r3, [r4, #20]
 8009ba6:	3001      	adds	r0, #1
 8009ba8:	4283      	cmp	r3, r0
 8009baa:	d004      	beq.n	8009bb6 <__swbuf_r+0x62>
 8009bac:	89a3      	ldrh	r3, [r4, #12]
 8009bae:	07db      	lsls	r3, r3, #31
 8009bb0:	d506      	bpl.n	8009bc0 <__swbuf_r+0x6c>
 8009bb2:	2e0a      	cmp	r6, #10
 8009bb4:	d104      	bne.n	8009bc0 <__swbuf_r+0x6c>
 8009bb6:	4621      	mov	r1, r4
 8009bb8:	4628      	mov	r0, r5
 8009bba:	f000 f911 	bl	8009de0 <_fflush_r>
 8009bbe:	b988      	cbnz	r0, 8009be4 <__swbuf_r+0x90>
 8009bc0:	4638      	mov	r0, r7
 8009bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bc4:	4b0a      	ldr	r3, [pc, #40]	; (8009bf0 <__swbuf_r+0x9c>)
 8009bc6:	429c      	cmp	r4, r3
 8009bc8:	d101      	bne.n	8009bce <__swbuf_r+0x7a>
 8009bca:	68ac      	ldr	r4, [r5, #8]
 8009bcc:	e7cf      	b.n	8009b6e <__swbuf_r+0x1a>
 8009bce:	4b09      	ldr	r3, [pc, #36]	; (8009bf4 <__swbuf_r+0xa0>)
 8009bd0:	429c      	cmp	r4, r3
 8009bd2:	bf08      	it	eq
 8009bd4:	68ec      	ldreq	r4, [r5, #12]
 8009bd6:	e7ca      	b.n	8009b6e <__swbuf_r+0x1a>
 8009bd8:	4621      	mov	r1, r4
 8009bda:	4628      	mov	r0, r5
 8009bdc:	f000 f80c 	bl	8009bf8 <__swsetup_r>
 8009be0:	2800      	cmp	r0, #0
 8009be2:	d0cb      	beq.n	8009b7c <__swbuf_r+0x28>
 8009be4:	f04f 37ff 	mov.w	r7, #4294967295
 8009be8:	e7ea      	b.n	8009bc0 <__swbuf_r+0x6c>
 8009bea:	bf00      	nop
 8009bec:	0800a8ec 	.word	0x0800a8ec
 8009bf0:	0800a90c 	.word	0x0800a90c
 8009bf4:	0800a8cc 	.word	0x0800a8cc

08009bf8 <__swsetup_r>:
 8009bf8:	4b32      	ldr	r3, [pc, #200]	; (8009cc4 <__swsetup_r+0xcc>)
 8009bfa:	b570      	push	{r4, r5, r6, lr}
 8009bfc:	681d      	ldr	r5, [r3, #0]
 8009bfe:	4606      	mov	r6, r0
 8009c00:	460c      	mov	r4, r1
 8009c02:	b125      	cbz	r5, 8009c0e <__swsetup_r+0x16>
 8009c04:	69ab      	ldr	r3, [r5, #24]
 8009c06:	b913      	cbnz	r3, 8009c0e <__swsetup_r+0x16>
 8009c08:	4628      	mov	r0, r5
 8009c0a:	f000 f97d 	bl	8009f08 <__sinit>
 8009c0e:	4b2e      	ldr	r3, [pc, #184]	; (8009cc8 <__swsetup_r+0xd0>)
 8009c10:	429c      	cmp	r4, r3
 8009c12:	d10f      	bne.n	8009c34 <__swsetup_r+0x3c>
 8009c14:	686c      	ldr	r4, [r5, #4]
 8009c16:	89a3      	ldrh	r3, [r4, #12]
 8009c18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c1c:	0719      	lsls	r1, r3, #28
 8009c1e:	d42c      	bmi.n	8009c7a <__swsetup_r+0x82>
 8009c20:	06dd      	lsls	r5, r3, #27
 8009c22:	d411      	bmi.n	8009c48 <__swsetup_r+0x50>
 8009c24:	2309      	movs	r3, #9
 8009c26:	6033      	str	r3, [r6, #0]
 8009c28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009c2c:	81a3      	strh	r3, [r4, #12]
 8009c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c32:	e03e      	b.n	8009cb2 <__swsetup_r+0xba>
 8009c34:	4b25      	ldr	r3, [pc, #148]	; (8009ccc <__swsetup_r+0xd4>)
 8009c36:	429c      	cmp	r4, r3
 8009c38:	d101      	bne.n	8009c3e <__swsetup_r+0x46>
 8009c3a:	68ac      	ldr	r4, [r5, #8]
 8009c3c:	e7eb      	b.n	8009c16 <__swsetup_r+0x1e>
 8009c3e:	4b24      	ldr	r3, [pc, #144]	; (8009cd0 <__swsetup_r+0xd8>)
 8009c40:	429c      	cmp	r4, r3
 8009c42:	bf08      	it	eq
 8009c44:	68ec      	ldreq	r4, [r5, #12]
 8009c46:	e7e6      	b.n	8009c16 <__swsetup_r+0x1e>
 8009c48:	0758      	lsls	r0, r3, #29
 8009c4a:	d512      	bpl.n	8009c72 <__swsetup_r+0x7a>
 8009c4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c4e:	b141      	cbz	r1, 8009c62 <__swsetup_r+0x6a>
 8009c50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c54:	4299      	cmp	r1, r3
 8009c56:	d002      	beq.n	8009c5e <__swsetup_r+0x66>
 8009c58:	4630      	mov	r0, r6
 8009c5a:	f7fb ff07 	bl	8005a6c <_free_r>
 8009c5e:	2300      	movs	r3, #0
 8009c60:	6363      	str	r3, [r4, #52]	; 0x34
 8009c62:	89a3      	ldrh	r3, [r4, #12]
 8009c64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c68:	81a3      	strh	r3, [r4, #12]
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	6063      	str	r3, [r4, #4]
 8009c6e:	6923      	ldr	r3, [r4, #16]
 8009c70:	6023      	str	r3, [r4, #0]
 8009c72:	89a3      	ldrh	r3, [r4, #12]
 8009c74:	f043 0308 	orr.w	r3, r3, #8
 8009c78:	81a3      	strh	r3, [r4, #12]
 8009c7a:	6923      	ldr	r3, [r4, #16]
 8009c7c:	b94b      	cbnz	r3, 8009c92 <__swsetup_r+0x9a>
 8009c7e:	89a3      	ldrh	r3, [r4, #12]
 8009c80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c88:	d003      	beq.n	8009c92 <__swsetup_r+0x9a>
 8009c8a:	4621      	mov	r1, r4
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	f000 f9fd 	bl	800a08c <__smakebuf_r>
 8009c92:	89a0      	ldrh	r0, [r4, #12]
 8009c94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c98:	f010 0301 	ands.w	r3, r0, #1
 8009c9c:	d00a      	beq.n	8009cb4 <__swsetup_r+0xbc>
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	60a3      	str	r3, [r4, #8]
 8009ca2:	6963      	ldr	r3, [r4, #20]
 8009ca4:	425b      	negs	r3, r3
 8009ca6:	61a3      	str	r3, [r4, #24]
 8009ca8:	6923      	ldr	r3, [r4, #16]
 8009caa:	b943      	cbnz	r3, 8009cbe <__swsetup_r+0xc6>
 8009cac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009cb0:	d1ba      	bne.n	8009c28 <__swsetup_r+0x30>
 8009cb2:	bd70      	pop	{r4, r5, r6, pc}
 8009cb4:	0781      	lsls	r1, r0, #30
 8009cb6:	bf58      	it	pl
 8009cb8:	6963      	ldrpl	r3, [r4, #20]
 8009cba:	60a3      	str	r3, [r4, #8]
 8009cbc:	e7f4      	b.n	8009ca8 <__swsetup_r+0xb0>
 8009cbe:	2000      	movs	r0, #0
 8009cc0:	e7f7      	b.n	8009cb2 <__swsetup_r+0xba>
 8009cc2:	bf00      	nop
 8009cc4:	20000030 	.word	0x20000030
 8009cc8:	0800a8ec 	.word	0x0800a8ec
 8009ccc:	0800a90c 	.word	0x0800a90c
 8009cd0:	0800a8cc 	.word	0x0800a8cc

08009cd4 <__sflush_r>:
 8009cd4:	898a      	ldrh	r2, [r1, #12]
 8009cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cda:	4605      	mov	r5, r0
 8009cdc:	0710      	lsls	r0, r2, #28
 8009cde:	460c      	mov	r4, r1
 8009ce0:	d458      	bmi.n	8009d94 <__sflush_r+0xc0>
 8009ce2:	684b      	ldr	r3, [r1, #4]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	dc05      	bgt.n	8009cf4 <__sflush_r+0x20>
 8009ce8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	dc02      	bgt.n	8009cf4 <__sflush_r+0x20>
 8009cee:	2000      	movs	r0, #0
 8009cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cf6:	2e00      	cmp	r6, #0
 8009cf8:	d0f9      	beq.n	8009cee <__sflush_r+0x1a>
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d00:	682f      	ldr	r7, [r5, #0]
 8009d02:	602b      	str	r3, [r5, #0]
 8009d04:	d032      	beq.n	8009d6c <__sflush_r+0x98>
 8009d06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d08:	89a3      	ldrh	r3, [r4, #12]
 8009d0a:	075a      	lsls	r2, r3, #29
 8009d0c:	d505      	bpl.n	8009d1a <__sflush_r+0x46>
 8009d0e:	6863      	ldr	r3, [r4, #4]
 8009d10:	1ac0      	subs	r0, r0, r3
 8009d12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d14:	b10b      	cbz	r3, 8009d1a <__sflush_r+0x46>
 8009d16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d18:	1ac0      	subs	r0, r0, r3
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d20:	6a21      	ldr	r1, [r4, #32]
 8009d22:	4628      	mov	r0, r5
 8009d24:	47b0      	blx	r6
 8009d26:	1c43      	adds	r3, r0, #1
 8009d28:	89a3      	ldrh	r3, [r4, #12]
 8009d2a:	d106      	bne.n	8009d3a <__sflush_r+0x66>
 8009d2c:	6829      	ldr	r1, [r5, #0]
 8009d2e:	291d      	cmp	r1, #29
 8009d30:	d82c      	bhi.n	8009d8c <__sflush_r+0xb8>
 8009d32:	4a2a      	ldr	r2, [pc, #168]	; (8009ddc <__sflush_r+0x108>)
 8009d34:	40ca      	lsrs	r2, r1
 8009d36:	07d6      	lsls	r6, r2, #31
 8009d38:	d528      	bpl.n	8009d8c <__sflush_r+0xb8>
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	6062      	str	r2, [r4, #4]
 8009d3e:	04d9      	lsls	r1, r3, #19
 8009d40:	6922      	ldr	r2, [r4, #16]
 8009d42:	6022      	str	r2, [r4, #0]
 8009d44:	d504      	bpl.n	8009d50 <__sflush_r+0x7c>
 8009d46:	1c42      	adds	r2, r0, #1
 8009d48:	d101      	bne.n	8009d4e <__sflush_r+0x7a>
 8009d4a:	682b      	ldr	r3, [r5, #0]
 8009d4c:	b903      	cbnz	r3, 8009d50 <__sflush_r+0x7c>
 8009d4e:	6560      	str	r0, [r4, #84]	; 0x54
 8009d50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d52:	602f      	str	r7, [r5, #0]
 8009d54:	2900      	cmp	r1, #0
 8009d56:	d0ca      	beq.n	8009cee <__sflush_r+0x1a>
 8009d58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d5c:	4299      	cmp	r1, r3
 8009d5e:	d002      	beq.n	8009d66 <__sflush_r+0x92>
 8009d60:	4628      	mov	r0, r5
 8009d62:	f7fb fe83 	bl	8005a6c <_free_r>
 8009d66:	2000      	movs	r0, #0
 8009d68:	6360      	str	r0, [r4, #52]	; 0x34
 8009d6a:	e7c1      	b.n	8009cf0 <__sflush_r+0x1c>
 8009d6c:	6a21      	ldr	r1, [r4, #32]
 8009d6e:	2301      	movs	r3, #1
 8009d70:	4628      	mov	r0, r5
 8009d72:	47b0      	blx	r6
 8009d74:	1c41      	adds	r1, r0, #1
 8009d76:	d1c7      	bne.n	8009d08 <__sflush_r+0x34>
 8009d78:	682b      	ldr	r3, [r5, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d0c4      	beq.n	8009d08 <__sflush_r+0x34>
 8009d7e:	2b1d      	cmp	r3, #29
 8009d80:	d001      	beq.n	8009d86 <__sflush_r+0xb2>
 8009d82:	2b16      	cmp	r3, #22
 8009d84:	d101      	bne.n	8009d8a <__sflush_r+0xb6>
 8009d86:	602f      	str	r7, [r5, #0]
 8009d88:	e7b1      	b.n	8009cee <__sflush_r+0x1a>
 8009d8a:	89a3      	ldrh	r3, [r4, #12]
 8009d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d90:	81a3      	strh	r3, [r4, #12]
 8009d92:	e7ad      	b.n	8009cf0 <__sflush_r+0x1c>
 8009d94:	690f      	ldr	r7, [r1, #16]
 8009d96:	2f00      	cmp	r7, #0
 8009d98:	d0a9      	beq.n	8009cee <__sflush_r+0x1a>
 8009d9a:	0793      	lsls	r3, r2, #30
 8009d9c:	680e      	ldr	r6, [r1, #0]
 8009d9e:	bf08      	it	eq
 8009da0:	694b      	ldreq	r3, [r1, #20]
 8009da2:	600f      	str	r7, [r1, #0]
 8009da4:	bf18      	it	ne
 8009da6:	2300      	movne	r3, #0
 8009da8:	eba6 0807 	sub.w	r8, r6, r7
 8009dac:	608b      	str	r3, [r1, #8]
 8009dae:	f1b8 0f00 	cmp.w	r8, #0
 8009db2:	dd9c      	ble.n	8009cee <__sflush_r+0x1a>
 8009db4:	6a21      	ldr	r1, [r4, #32]
 8009db6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009db8:	4643      	mov	r3, r8
 8009dba:	463a      	mov	r2, r7
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	47b0      	blx	r6
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	dc06      	bgt.n	8009dd2 <__sflush_r+0xfe>
 8009dc4:	89a3      	ldrh	r3, [r4, #12]
 8009dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dca:	81a3      	strh	r3, [r4, #12]
 8009dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd0:	e78e      	b.n	8009cf0 <__sflush_r+0x1c>
 8009dd2:	4407      	add	r7, r0
 8009dd4:	eba8 0800 	sub.w	r8, r8, r0
 8009dd8:	e7e9      	b.n	8009dae <__sflush_r+0xda>
 8009dda:	bf00      	nop
 8009ddc:	20400001 	.word	0x20400001

08009de0 <_fflush_r>:
 8009de0:	b538      	push	{r3, r4, r5, lr}
 8009de2:	690b      	ldr	r3, [r1, #16]
 8009de4:	4605      	mov	r5, r0
 8009de6:	460c      	mov	r4, r1
 8009de8:	b913      	cbnz	r3, 8009df0 <_fflush_r+0x10>
 8009dea:	2500      	movs	r5, #0
 8009dec:	4628      	mov	r0, r5
 8009dee:	bd38      	pop	{r3, r4, r5, pc}
 8009df0:	b118      	cbz	r0, 8009dfa <_fflush_r+0x1a>
 8009df2:	6983      	ldr	r3, [r0, #24]
 8009df4:	b90b      	cbnz	r3, 8009dfa <_fflush_r+0x1a>
 8009df6:	f000 f887 	bl	8009f08 <__sinit>
 8009dfa:	4b14      	ldr	r3, [pc, #80]	; (8009e4c <_fflush_r+0x6c>)
 8009dfc:	429c      	cmp	r4, r3
 8009dfe:	d11b      	bne.n	8009e38 <_fflush_r+0x58>
 8009e00:	686c      	ldr	r4, [r5, #4]
 8009e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d0ef      	beq.n	8009dea <_fflush_r+0xa>
 8009e0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e0c:	07d0      	lsls	r0, r2, #31
 8009e0e:	d404      	bmi.n	8009e1a <_fflush_r+0x3a>
 8009e10:	0599      	lsls	r1, r3, #22
 8009e12:	d402      	bmi.n	8009e1a <_fflush_r+0x3a>
 8009e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e16:	f7ff fd1c 	bl	8009852 <__retarget_lock_acquire_recursive>
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	4621      	mov	r1, r4
 8009e1e:	f7ff ff59 	bl	8009cd4 <__sflush_r>
 8009e22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e24:	07da      	lsls	r2, r3, #31
 8009e26:	4605      	mov	r5, r0
 8009e28:	d4e0      	bmi.n	8009dec <_fflush_r+0xc>
 8009e2a:	89a3      	ldrh	r3, [r4, #12]
 8009e2c:	059b      	lsls	r3, r3, #22
 8009e2e:	d4dd      	bmi.n	8009dec <_fflush_r+0xc>
 8009e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e32:	f7ff fd0f 	bl	8009854 <__retarget_lock_release_recursive>
 8009e36:	e7d9      	b.n	8009dec <_fflush_r+0xc>
 8009e38:	4b05      	ldr	r3, [pc, #20]	; (8009e50 <_fflush_r+0x70>)
 8009e3a:	429c      	cmp	r4, r3
 8009e3c:	d101      	bne.n	8009e42 <_fflush_r+0x62>
 8009e3e:	68ac      	ldr	r4, [r5, #8]
 8009e40:	e7df      	b.n	8009e02 <_fflush_r+0x22>
 8009e42:	4b04      	ldr	r3, [pc, #16]	; (8009e54 <_fflush_r+0x74>)
 8009e44:	429c      	cmp	r4, r3
 8009e46:	bf08      	it	eq
 8009e48:	68ec      	ldreq	r4, [r5, #12]
 8009e4a:	e7da      	b.n	8009e02 <_fflush_r+0x22>
 8009e4c:	0800a8ec 	.word	0x0800a8ec
 8009e50:	0800a90c 	.word	0x0800a90c
 8009e54:	0800a8cc 	.word	0x0800a8cc

08009e58 <std>:
 8009e58:	2300      	movs	r3, #0
 8009e5a:	b510      	push	{r4, lr}
 8009e5c:	4604      	mov	r4, r0
 8009e5e:	e9c0 3300 	strd	r3, r3, [r0]
 8009e62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e66:	6083      	str	r3, [r0, #8]
 8009e68:	8181      	strh	r1, [r0, #12]
 8009e6a:	6643      	str	r3, [r0, #100]	; 0x64
 8009e6c:	81c2      	strh	r2, [r0, #14]
 8009e6e:	6183      	str	r3, [r0, #24]
 8009e70:	4619      	mov	r1, r3
 8009e72:	2208      	movs	r2, #8
 8009e74:	305c      	adds	r0, #92	; 0x5c
 8009e76:	f7fb fdf1 	bl	8005a5c <memset>
 8009e7a:	4b05      	ldr	r3, [pc, #20]	; (8009e90 <std+0x38>)
 8009e7c:	6263      	str	r3, [r4, #36]	; 0x24
 8009e7e:	4b05      	ldr	r3, [pc, #20]	; (8009e94 <std+0x3c>)
 8009e80:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e82:	4b05      	ldr	r3, [pc, #20]	; (8009e98 <std+0x40>)
 8009e84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e86:	4b05      	ldr	r3, [pc, #20]	; (8009e9c <std+0x44>)
 8009e88:	6224      	str	r4, [r4, #32]
 8009e8a:	6323      	str	r3, [r4, #48]	; 0x30
 8009e8c:	bd10      	pop	{r4, pc}
 8009e8e:	bf00      	nop
 8009e90:	0800a11d 	.word	0x0800a11d
 8009e94:	0800a13f 	.word	0x0800a13f
 8009e98:	0800a177 	.word	0x0800a177
 8009e9c:	0800a19b 	.word	0x0800a19b

08009ea0 <_cleanup_r>:
 8009ea0:	4901      	ldr	r1, [pc, #4]	; (8009ea8 <_cleanup_r+0x8>)
 8009ea2:	f000 b8af 	b.w	800a004 <_fwalk_reent>
 8009ea6:	bf00      	nop
 8009ea8:	08009de1 	.word	0x08009de1

08009eac <__sfmoreglue>:
 8009eac:	b570      	push	{r4, r5, r6, lr}
 8009eae:	1e4a      	subs	r2, r1, #1
 8009eb0:	2568      	movs	r5, #104	; 0x68
 8009eb2:	4355      	muls	r5, r2
 8009eb4:	460e      	mov	r6, r1
 8009eb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009eba:	f7fb fe27 	bl	8005b0c <_malloc_r>
 8009ebe:	4604      	mov	r4, r0
 8009ec0:	b140      	cbz	r0, 8009ed4 <__sfmoreglue+0x28>
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	e9c0 1600 	strd	r1, r6, [r0]
 8009ec8:	300c      	adds	r0, #12
 8009eca:	60a0      	str	r0, [r4, #8]
 8009ecc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ed0:	f7fb fdc4 	bl	8005a5c <memset>
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	bd70      	pop	{r4, r5, r6, pc}

08009ed8 <__sfp_lock_acquire>:
 8009ed8:	4801      	ldr	r0, [pc, #4]	; (8009ee0 <__sfp_lock_acquire+0x8>)
 8009eda:	f7ff bcba 	b.w	8009852 <__retarget_lock_acquire_recursive>
 8009ede:	bf00      	nop
 8009ee0:	200003a0 	.word	0x200003a0

08009ee4 <__sfp_lock_release>:
 8009ee4:	4801      	ldr	r0, [pc, #4]	; (8009eec <__sfp_lock_release+0x8>)
 8009ee6:	f7ff bcb5 	b.w	8009854 <__retarget_lock_release_recursive>
 8009eea:	bf00      	nop
 8009eec:	200003a0 	.word	0x200003a0

08009ef0 <__sinit_lock_acquire>:
 8009ef0:	4801      	ldr	r0, [pc, #4]	; (8009ef8 <__sinit_lock_acquire+0x8>)
 8009ef2:	f7ff bcae 	b.w	8009852 <__retarget_lock_acquire_recursive>
 8009ef6:	bf00      	nop
 8009ef8:	2000039b 	.word	0x2000039b

08009efc <__sinit_lock_release>:
 8009efc:	4801      	ldr	r0, [pc, #4]	; (8009f04 <__sinit_lock_release+0x8>)
 8009efe:	f7ff bca9 	b.w	8009854 <__retarget_lock_release_recursive>
 8009f02:	bf00      	nop
 8009f04:	2000039b 	.word	0x2000039b

08009f08 <__sinit>:
 8009f08:	b510      	push	{r4, lr}
 8009f0a:	4604      	mov	r4, r0
 8009f0c:	f7ff fff0 	bl	8009ef0 <__sinit_lock_acquire>
 8009f10:	69a3      	ldr	r3, [r4, #24]
 8009f12:	b11b      	cbz	r3, 8009f1c <__sinit+0x14>
 8009f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f18:	f7ff bff0 	b.w	8009efc <__sinit_lock_release>
 8009f1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009f20:	6523      	str	r3, [r4, #80]	; 0x50
 8009f22:	4b13      	ldr	r3, [pc, #76]	; (8009f70 <__sinit+0x68>)
 8009f24:	4a13      	ldr	r2, [pc, #76]	; (8009f74 <__sinit+0x6c>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	62a2      	str	r2, [r4, #40]	; 0x28
 8009f2a:	42a3      	cmp	r3, r4
 8009f2c:	bf04      	itt	eq
 8009f2e:	2301      	moveq	r3, #1
 8009f30:	61a3      	streq	r3, [r4, #24]
 8009f32:	4620      	mov	r0, r4
 8009f34:	f000 f820 	bl	8009f78 <__sfp>
 8009f38:	6060      	str	r0, [r4, #4]
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	f000 f81c 	bl	8009f78 <__sfp>
 8009f40:	60a0      	str	r0, [r4, #8]
 8009f42:	4620      	mov	r0, r4
 8009f44:	f000 f818 	bl	8009f78 <__sfp>
 8009f48:	2200      	movs	r2, #0
 8009f4a:	60e0      	str	r0, [r4, #12]
 8009f4c:	2104      	movs	r1, #4
 8009f4e:	6860      	ldr	r0, [r4, #4]
 8009f50:	f7ff ff82 	bl	8009e58 <std>
 8009f54:	68a0      	ldr	r0, [r4, #8]
 8009f56:	2201      	movs	r2, #1
 8009f58:	2109      	movs	r1, #9
 8009f5a:	f7ff ff7d 	bl	8009e58 <std>
 8009f5e:	68e0      	ldr	r0, [r4, #12]
 8009f60:	2202      	movs	r2, #2
 8009f62:	2112      	movs	r1, #18
 8009f64:	f7ff ff78 	bl	8009e58 <std>
 8009f68:	2301      	movs	r3, #1
 8009f6a:	61a3      	str	r3, [r4, #24]
 8009f6c:	e7d2      	b.n	8009f14 <__sinit+0xc>
 8009f6e:	bf00      	nop
 8009f70:	0800a478 	.word	0x0800a478
 8009f74:	08009ea1 	.word	0x08009ea1

08009f78 <__sfp>:
 8009f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f7a:	4607      	mov	r7, r0
 8009f7c:	f7ff ffac 	bl	8009ed8 <__sfp_lock_acquire>
 8009f80:	4b1e      	ldr	r3, [pc, #120]	; (8009ffc <__sfp+0x84>)
 8009f82:	681e      	ldr	r6, [r3, #0]
 8009f84:	69b3      	ldr	r3, [r6, #24]
 8009f86:	b913      	cbnz	r3, 8009f8e <__sfp+0x16>
 8009f88:	4630      	mov	r0, r6
 8009f8a:	f7ff ffbd 	bl	8009f08 <__sinit>
 8009f8e:	3648      	adds	r6, #72	; 0x48
 8009f90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009f94:	3b01      	subs	r3, #1
 8009f96:	d503      	bpl.n	8009fa0 <__sfp+0x28>
 8009f98:	6833      	ldr	r3, [r6, #0]
 8009f9a:	b30b      	cbz	r3, 8009fe0 <__sfp+0x68>
 8009f9c:	6836      	ldr	r6, [r6, #0]
 8009f9e:	e7f7      	b.n	8009f90 <__sfp+0x18>
 8009fa0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009fa4:	b9d5      	cbnz	r5, 8009fdc <__sfp+0x64>
 8009fa6:	4b16      	ldr	r3, [pc, #88]	; (800a000 <__sfp+0x88>)
 8009fa8:	60e3      	str	r3, [r4, #12]
 8009faa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009fae:	6665      	str	r5, [r4, #100]	; 0x64
 8009fb0:	f7ff fc4e 	bl	8009850 <__retarget_lock_init_recursive>
 8009fb4:	f7ff ff96 	bl	8009ee4 <__sfp_lock_release>
 8009fb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009fbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009fc0:	6025      	str	r5, [r4, #0]
 8009fc2:	61a5      	str	r5, [r4, #24]
 8009fc4:	2208      	movs	r2, #8
 8009fc6:	4629      	mov	r1, r5
 8009fc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009fcc:	f7fb fd46 	bl	8005a5c <memset>
 8009fd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009fd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009fd8:	4620      	mov	r0, r4
 8009fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fdc:	3468      	adds	r4, #104	; 0x68
 8009fde:	e7d9      	b.n	8009f94 <__sfp+0x1c>
 8009fe0:	2104      	movs	r1, #4
 8009fe2:	4638      	mov	r0, r7
 8009fe4:	f7ff ff62 	bl	8009eac <__sfmoreglue>
 8009fe8:	4604      	mov	r4, r0
 8009fea:	6030      	str	r0, [r6, #0]
 8009fec:	2800      	cmp	r0, #0
 8009fee:	d1d5      	bne.n	8009f9c <__sfp+0x24>
 8009ff0:	f7ff ff78 	bl	8009ee4 <__sfp_lock_release>
 8009ff4:	230c      	movs	r3, #12
 8009ff6:	603b      	str	r3, [r7, #0]
 8009ff8:	e7ee      	b.n	8009fd8 <__sfp+0x60>
 8009ffa:	bf00      	nop
 8009ffc:	0800a478 	.word	0x0800a478
 800a000:	ffff0001 	.word	0xffff0001

0800a004 <_fwalk_reent>:
 800a004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a008:	4606      	mov	r6, r0
 800a00a:	4688      	mov	r8, r1
 800a00c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a010:	2700      	movs	r7, #0
 800a012:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a016:	f1b9 0901 	subs.w	r9, r9, #1
 800a01a:	d505      	bpl.n	800a028 <_fwalk_reent+0x24>
 800a01c:	6824      	ldr	r4, [r4, #0]
 800a01e:	2c00      	cmp	r4, #0
 800a020:	d1f7      	bne.n	800a012 <_fwalk_reent+0xe>
 800a022:	4638      	mov	r0, r7
 800a024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a028:	89ab      	ldrh	r3, [r5, #12]
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d907      	bls.n	800a03e <_fwalk_reent+0x3a>
 800a02e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a032:	3301      	adds	r3, #1
 800a034:	d003      	beq.n	800a03e <_fwalk_reent+0x3a>
 800a036:	4629      	mov	r1, r5
 800a038:	4630      	mov	r0, r6
 800a03a:	47c0      	blx	r8
 800a03c:	4307      	orrs	r7, r0
 800a03e:	3568      	adds	r5, #104	; 0x68
 800a040:	e7e9      	b.n	800a016 <_fwalk_reent+0x12>

0800a042 <__swhatbuf_r>:
 800a042:	b570      	push	{r4, r5, r6, lr}
 800a044:	460e      	mov	r6, r1
 800a046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a04a:	2900      	cmp	r1, #0
 800a04c:	b096      	sub	sp, #88	; 0x58
 800a04e:	4614      	mov	r4, r2
 800a050:	461d      	mov	r5, r3
 800a052:	da07      	bge.n	800a064 <__swhatbuf_r+0x22>
 800a054:	2300      	movs	r3, #0
 800a056:	602b      	str	r3, [r5, #0]
 800a058:	89b3      	ldrh	r3, [r6, #12]
 800a05a:	061a      	lsls	r2, r3, #24
 800a05c:	d410      	bmi.n	800a080 <__swhatbuf_r+0x3e>
 800a05e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a062:	e00e      	b.n	800a082 <__swhatbuf_r+0x40>
 800a064:	466a      	mov	r2, sp
 800a066:	f000 f8bf 	bl	800a1e8 <_fstat_r>
 800a06a:	2800      	cmp	r0, #0
 800a06c:	dbf2      	blt.n	800a054 <__swhatbuf_r+0x12>
 800a06e:	9a01      	ldr	r2, [sp, #4]
 800a070:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a074:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a078:	425a      	negs	r2, r3
 800a07a:	415a      	adcs	r2, r3
 800a07c:	602a      	str	r2, [r5, #0]
 800a07e:	e7ee      	b.n	800a05e <__swhatbuf_r+0x1c>
 800a080:	2340      	movs	r3, #64	; 0x40
 800a082:	2000      	movs	r0, #0
 800a084:	6023      	str	r3, [r4, #0]
 800a086:	b016      	add	sp, #88	; 0x58
 800a088:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a08c <__smakebuf_r>:
 800a08c:	898b      	ldrh	r3, [r1, #12]
 800a08e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a090:	079d      	lsls	r5, r3, #30
 800a092:	4606      	mov	r6, r0
 800a094:	460c      	mov	r4, r1
 800a096:	d507      	bpl.n	800a0a8 <__smakebuf_r+0x1c>
 800a098:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a09c:	6023      	str	r3, [r4, #0]
 800a09e:	6123      	str	r3, [r4, #16]
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	6163      	str	r3, [r4, #20]
 800a0a4:	b002      	add	sp, #8
 800a0a6:	bd70      	pop	{r4, r5, r6, pc}
 800a0a8:	ab01      	add	r3, sp, #4
 800a0aa:	466a      	mov	r2, sp
 800a0ac:	f7ff ffc9 	bl	800a042 <__swhatbuf_r>
 800a0b0:	9900      	ldr	r1, [sp, #0]
 800a0b2:	4605      	mov	r5, r0
 800a0b4:	4630      	mov	r0, r6
 800a0b6:	f7fb fd29 	bl	8005b0c <_malloc_r>
 800a0ba:	b948      	cbnz	r0, 800a0d0 <__smakebuf_r+0x44>
 800a0bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0c0:	059a      	lsls	r2, r3, #22
 800a0c2:	d4ef      	bmi.n	800a0a4 <__smakebuf_r+0x18>
 800a0c4:	f023 0303 	bic.w	r3, r3, #3
 800a0c8:	f043 0302 	orr.w	r3, r3, #2
 800a0cc:	81a3      	strh	r3, [r4, #12]
 800a0ce:	e7e3      	b.n	800a098 <__smakebuf_r+0xc>
 800a0d0:	4b0d      	ldr	r3, [pc, #52]	; (800a108 <__smakebuf_r+0x7c>)
 800a0d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a0d4:	89a3      	ldrh	r3, [r4, #12]
 800a0d6:	6020      	str	r0, [r4, #0]
 800a0d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0dc:	81a3      	strh	r3, [r4, #12]
 800a0de:	9b00      	ldr	r3, [sp, #0]
 800a0e0:	6163      	str	r3, [r4, #20]
 800a0e2:	9b01      	ldr	r3, [sp, #4]
 800a0e4:	6120      	str	r0, [r4, #16]
 800a0e6:	b15b      	cbz	r3, 800a100 <__smakebuf_r+0x74>
 800a0e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0ec:	4630      	mov	r0, r6
 800a0ee:	f000 f88d 	bl	800a20c <_isatty_r>
 800a0f2:	b128      	cbz	r0, 800a100 <__smakebuf_r+0x74>
 800a0f4:	89a3      	ldrh	r3, [r4, #12]
 800a0f6:	f023 0303 	bic.w	r3, r3, #3
 800a0fa:	f043 0301 	orr.w	r3, r3, #1
 800a0fe:	81a3      	strh	r3, [r4, #12]
 800a100:	89a0      	ldrh	r0, [r4, #12]
 800a102:	4305      	orrs	r5, r0
 800a104:	81a5      	strh	r5, [r4, #12]
 800a106:	e7cd      	b.n	800a0a4 <__smakebuf_r+0x18>
 800a108:	08009ea1 	.word	0x08009ea1

0800a10c <_malloc_usable_size_r>:
 800a10c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a110:	1f18      	subs	r0, r3, #4
 800a112:	2b00      	cmp	r3, #0
 800a114:	bfbc      	itt	lt
 800a116:	580b      	ldrlt	r3, [r1, r0]
 800a118:	18c0      	addlt	r0, r0, r3
 800a11a:	4770      	bx	lr

0800a11c <__sread>:
 800a11c:	b510      	push	{r4, lr}
 800a11e:	460c      	mov	r4, r1
 800a120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a124:	f000 f894 	bl	800a250 <_read_r>
 800a128:	2800      	cmp	r0, #0
 800a12a:	bfab      	itete	ge
 800a12c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a12e:	89a3      	ldrhlt	r3, [r4, #12]
 800a130:	181b      	addge	r3, r3, r0
 800a132:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a136:	bfac      	ite	ge
 800a138:	6563      	strge	r3, [r4, #84]	; 0x54
 800a13a:	81a3      	strhlt	r3, [r4, #12]
 800a13c:	bd10      	pop	{r4, pc}

0800a13e <__swrite>:
 800a13e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a142:	461f      	mov	r7, r3
 800a144:	898b      	ldrh	r3, [r1, #12]
 800a146:	05db      	lsls	r3, r3, #23
 800a148:	4605      	mov	r5, r0
 800a14a:	460c      	mov	r4, r1
 800a14c:	4616      	mov	r6, r2
 800a14e:	d505      	bpl.n	800a15c <__swrite+0x1e>
 800a150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a154:	2302      	movs	r3, #2
 800a156:	2200      	movs	r2, #0
 800a158:	f000 f868 	bl	800a22c <_lseek_r>
 800a15c:	89a3      	ldrh	r3, [r4, #12]
 800a15e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a162:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a166:	81a3      	strh	r3, [r4, #12]
 800a168:	4632      	mov	r2, r6
 800a16a:	463b      	mov	r3, r7
 800a16c:	4628      	mov	r0, r5
 800a16e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a172:	f000 b817 	b.w	800a1a4 <_write_r>

0800a176 <__sseek>:
 800a176:	b510      	push	{r4, lr}
 800a178:	460c      	mov	r4, r1
 800a17a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a17e:	f000 f855 	bl	800a22c <_lseek_r>
 800a182:	1c43      	adds	r3, r0, #1
 800a184:	89a3      	ldrh	r3, [r4, #12]
 800a186:	bf15      	itete	ne
 800a188:	6560      	strne	r0, [r4, #84]	; 0x54
 800a18a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a18e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a192:	81a3      	strheq	r3, [r4, #12]
 800a194:	bf18      	it	ne
 800a196:	81a3      	strhne	r3, [r4, #12]
 800a198:	bd10      	pop	{r4, pc}

0800a19a <__sclose>:
 800a19a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a19e:	f000 b813 	b.w	800a1c8 <_close_r>
	...

0800a1a4 <_write_r>:
 800a1a4:	b538      	push	{r3, r4, r5, lr}
 800a1a6:	4d07      	ldr	r5, [pc, #28]	; (800a1c4 <_write_r+0x20>)
 800a1a8:	4604      	mov	r4, r0
 800a1aa:	4608      	mov	r0, r1
 800a1ac:	4611      	mov	r1, r2
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	602a      	str	r2, [r5, #0]
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	f7f7 fb71 	bl	800189a <_write>
 800a1b8:	1c43      	adds	r3, r0, #1
 800a1ba:	d102      	bne.n	800a1c2 <_write_r+0x1e>
 800a1bc:	682b      	ldr	r3, [r5, #0]
 800a1be:	b103      	cbz	r3, 800a1c2 <_write_r+0x1e>
 800a1c0:	6023      	str	r3, [r4, #0]
 800a1c2:	bd38      	pop	{r3, r4, r5, pc}
 800a1c4:	20000394 	.word	0x20000394

0800a1c8 <_close_r>:
 800a1c8:	b538      	push	{r3, r4, r5, lr}
 800a1ca:	4d06      	ldr	r5, [pc, #24]	; (800a1e4 <_close_r+0x1c>)
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	4604      	mov	r4, r0
 800a1d0:	4608      	mov	r0, r1
 800a1d2:	602b      	str	r3, [r5, #0]
 800a1d4:	f7f7 fb7d 	bl	80018d2 <_close>
 800a1d8:	1c43      	adds	r3, r0, #1
 800a1da:	d102      	bne.n	800a1e2 <_close_r+0x1a>
 800a1dc:	682b      	ldr	r3, [r5, #0]
 800a1de:	b103      	cbz	r3, 800a1e2 <_close_r+0x1a>
 800a1e0:	6023      	str	r3, [r4, #0]
 800a1e2:	bd38      	pop	{r3, r4, r5, pc}
 800a1e4:	20000394 	.word	0x20000394

0800a1e8 <_fstat_r>:
 800a1e8:	b538      	push	{r3, r4, r5, lr}
 800a1ea:	4d07      	ldr	r5, [pc, #28]	; (800a208 <_fstat_r+0x20>)
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	4604      	mov	r4, r0
 800a1f0:	4608      	mov	r0, r1
 800a1f2:	4611      	mov	r1, r2
 800a1f4:	602b      	str	r3, [r5, #0]
 800a1f6:	f7f7 fb78 	bl	80018ea <_fstat>
 800a1fa:	1c43      	adds	r3, r0, #1
 800a1fc:	d102      	bne.n	800a204 <_fstat_r+0x1c>
 800a1fe:	682b      	ldr	r3, [r5, #0]
 800a200:	b103      	cbz	r3, 800a204 <_fstat_r+0x1c>
 800a202:	6023      	str	r3, [r4, #0]
 800a204:	bd38      	pop	{r3, r4, r5, pc}
 800a206:	bf00      	nop
 800a208:	20000394 	.word	0x20000394

0800a20c <_isatty_r>:
 800a20c:	b538      	push	{r3, r4, r5, lr}
 800a20e:	4d06      	ldr	r5, [pc, #24]	; (800a228 <_isatty_r+0x1c>)
 800a210:	2300      	movs	r3, #0
 800a212:	4604      	mov	r4, r0
 800a214:	4608      	mov	r0, r1
 800a216:	602b      	str	r3, [r5, #0]
 800a218:	f7f7 fb77 	bl	800190a <_isatty>
 800a21c:	1c43      	adds	r3, r0, #1
 800a21e:	d102      	bne.n	800a226 <_isatty_r+0x1a>
 800a220:	682b      	ldr	r3, [r5, #0]
 800a222:	b103      	cbz	r3, 800a226 <_isatty_r+0x1a>
 800a224:	6023      	str	r3, [r4, #0]
 800a226:	bd38      	pop	{r3, r4, r5, pc}
 800a228:	20000394 	.word	0x20000394

0800a22c <_lseek_r>:
 800a22c:	b538      	push	{r3, r4, r5, lr}
 800a22e:	4d07      	ldr	r5, [pc, #28]	; (800a24c <_lseek_r+0x20>)
 800a230:	4604      	mov	r4, r0
 800a232:	4608      	mov	r0, r1
 800a234:	4611      	mov	r1, r2
 800a236:	2200      	movs	r2, #0
 800a238:	602a      	str	r2, [r5, #0]
 800a23a:	461a      	mov	r2, r3
 800a23c:	f7f7 fb70 	bl	8001920 <_lseek>
 800a240:	1c43      	adds	r3, r0, #1
 800a242:	d102      	bne.n	800a24a <_lseek_r+0x1e>
 800a244:	682b      	ldr	r3, [r5, #0]
 800a246:	b103      	cbz	r3, 800a24a <_lseek_r+0x1e>
 800a248:	6023      	str	r3, [r4, #0]
 800a24a:	bd38      	pop	{r3, r4, r5, pc}
 800a24c:	20000394 	.word	0x20000394

0800a250 <_read_r>:
 800a250:	b538      	push	{r3, r4, r5, lr}
 800a252:	4d07      	ldr	r5, [pc, #28]	; (800a270 <_read_r+0x20>)
 800a254:	4604      	mov	r4, r0
 800a256:	4608      	mov	r0, r1
 800a258:	4611      	mov	r1, r2
 800a25a:	2200      	movs	r2, #0
 800a25c:	602a      	str	r2, [r5, #0]
 800a25e:	461a      	mov	r2, r3
 800a260:	f7f7 fafe 	bl	8001860 <_read>
 800a264:	1c43      	adds	r3, r0, #1
 800a266:	d102      	bne.n	800a26e <_read_r+0x1e>
 800a268:	682b      	ldr	r3, [r5, #0]
 800a26a:	b103      	cbz	r3, 800a26e <_read_r+0x1e>
 800a26c:	6023      	str	r3, [r4, #0]
 800a26e:	bd38      	pop	{r3, r4, r5, pc}
 800a270:	20000394 	.word	0x20000394

0800a274 <_init>:
 800a274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a276:	bf00      	nop
 800a278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a27a:	bc08      	pop	{r3}
 800a27c:	469e      	mov	lr, r3
 800a27e:	4770      	bx	lr

0800a280 <_fini>:
 800a280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a282:	bf00      	nop
 800a284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a286:	bc08      	pop	{r3}
 800a288:	469e      	mov	lr, r3
 800a28a:	4770      	bx	lr
