
Bootloader_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009850  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  080099e0  080099e0  000199e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f1c  08009f1c  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  08009f1c  08009f1c  00019f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f24  08009f24  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f24  08009f24  00019f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f28  08009f28  00019f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08009f2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000938  20000200  0800a12c  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b38  0800a12c  00020b38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012bc3  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e7f  00000000  00000000  00032df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  00035c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b50  00000000  00000000  00036900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000282b7  00000000  00000000  00037450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd1c  00000000  00000000  0005f707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb6b8  00000000  00000000  0006f423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015aadb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045e4  00000000  00000000  0015ab30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080099c8 	.word	0x080099c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	080099c8 	.word	0x080099c8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001002:	4b25      	ldr	r3, [pc, #148]	; (8001098 <MX_GPIO_Init+0xac>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	4a24      	ldr	r2, [pc, #144]	; (8001098 <MX_GPIO_Init+0xac>)
 8001008:	f043 0304 	orr.w	r3, r3, #4
 800100c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100e:	4b22      	ldr	r3, [pc, #136]	; (8001098 <MX_GPIO_Init+0xac>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	f003 0304 	and.w	r3, r3, #4
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <MX_GPIO_Init+0xac>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	4a1e      	ldr	r2, [pc, #120]	; (8001098 <MX_GPIO_Init+0xac>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001026:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <MX_GPIO_Init+0xac>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001032:	4b19      	ldr	r3, [pc, #100]	; (8001098 <MX_GPIO_Init+0xac>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	4a18      	ldr	r2, [pc, #96]	; (8001098 <MX_GPIO_Init+0xac>)
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103e:	4b16      	ldr	r3, [pc, #88]	; (8001098 <MX_GPIO_Init+0xac>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(user_led_GPIO_Port, user_led_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	2120      	movs	r1, #32
 800104e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001052:	f001 f9a3 	bl	800239c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = user_button_Pin;
 8001056:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800105a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105c:	2300      	movs	r3, #0
 800105e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001060:	2301      	movs	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(user_button_GPIO_Port, &GPIO_InitStruct);
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	4619      	mov	r1, r3
 800106a:	480c      	ldr	r0, [pc, #48]	; (800109c <MX_GPIO_Init+0xb0>)
 800106c:	f000 ffec 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = user_led_Pin;
 8001070:	2320      	movs	r3, #32
 8001072:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001074:	2301      	movs	r3, #1
 8001076:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107c:	2303      	movs	r3, #3
 800107e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(user_led_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	4619      	mov	r1, r3
 8001086:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108a:	f000 ffdd 	bl	8002048 <HAL_GPIO_Init>

}
 800108e:	bf00      	nop
 8001090:	3720      	adds	r7, #32
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40021000 	.word	0x40021000
 800109c:	48000800 	.word	0x48000800

080010a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a6:	f000 fb23 	bl	80016f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010aa:	f000 f831 	bl	8001110 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ae:	f7ff ff9d 	bl	8000fec <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80010b2:	f000 fa0f 	bl	80014d4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80010b6:	f000 fa3d 	bl	8001534 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Khởi động ngoại vi giao tiếp:
  sim7600_init() ;
 80010ba:	f003 ff21 	bl	8004f00 <sim7600_init>
  terminal_init() ;
 80010be:	f003 ff73 	bl	8004fa8 <terminal_init>
  // 2. Tiếp theo, kiểm tra version hiện tại và version đang có trên server
  // 2.1. Lấy dữ liệu version trên server

  // 2.2. Lấy dữ liệu hiện tại từ bộ nhớ FLASH

  Flash_erase( 255 ) ;
 80010c2:	20ff      	movs	r0, #255	; 0xff
 80010c4:	f003 fd90 	bl	8004be8 <Flash_erase>

  Flash_write( 0x0807F800, "version: 1.0.0Helllo" ) ;
 80010c8:	490f      	ldr	r1, [pc, #60]	; (8001108 <main+0x68>)
 80010ca:	4810      	ldr	r0, [pc, #64]	; (800110c <main+0x6c>)
 80010cc:	f003 fdb6 	bl	8004c3c <Flash_write>

//  terminal_println( Flash_read_doubleWord( 0x0807F800 ), 2000 ) ;
//  terminal_print( Flash_read_doubleWord( 0x0807F808 ), 2000 ) ;

  char rx[ 0x0807F818 - 0x0807F800 ] ;
  memset( rx, 0, 0x0807F818 - 0x0807F800 ) ;
 80010d0:	463b      	mov	r3, r7
 80010d2:	2218      	movs	r2, #24
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f004 f846 	bl	8005168 <memset>
  Flash_read( 0x0807F800, 0x0807F818, rx ) ;
 80010dc:	463b      	mov	r3, r7
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	a307      	add	r3, pc, #28	; (adr r3, 8001100 <main+0x60>)
 80010e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e6:	4809      	ldr	r0, [pc, #36]	; (800110c <main+0x6c>)
 80010e8:	f04f 0100 	mov.w	r1, #0
 80010ec:	f003 fea2 	bl	8004e34 <Flash_read>
  terminal_println( (const char*)rx, 2000 ) ;
 80010f0:	463b      	mov	r3, r7
 80010f2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f003 ffaa 	bl	8005050 <terminal_println>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <main+0x5c>
 80010fe:	bf00      	nop
 8001100:	0807f818 	.word	0x0807f818
 8001104:	00000000 	.word	0x00000000
 8001108:	080099e0 	.word	0x080099e0
 800110c:	0807f800 	.word	0x0807f800

08001110 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b0b8      	sub	sp, #224	; 0xe0
 8001114:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001116:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800111a:	2244      	movs	r2, #68	; 0x44
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f004 f822 	bl	8005168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001124:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001134:	463b      	mov	r3, r7
 8001136:	2288      	movs	r2, #136	; 0x88
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f004 f814 	bl	8005168 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001140:	2302      	movs	r3, #2
 8001142:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001146:	f44f 7380 	mov.w	r3, #256	; 0x100
 800114a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800114e:	2310      	movs	r3, #16
 8001150:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001154:	2300      	movs	r3, #0
 8001156:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800115e:	4618      	mov	r0, r3
 8001160:	f001 f998 	bl	8002494 <HAL_RCC_OscConfig>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800116a:	f000 f853 	bl	8001214 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116e:	230f      	movs	r3, #15
 8001170:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001174:	2301      	movs	r3, #1
 8001176:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800117a:	2300      	movs	r3, #0
 800117c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001180:	2300      	movs	r3, #0
 8001182:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800118c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f001 fd64 	bl	8002c60 <HAL_RCC_ClockConfig>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800119e:	f000 f839 	bl	8001214 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80011a2:	2303      	movs	r3, #3
 80011a4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80011a6:	2300      	movs	r3, #0
 80011a8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011aa:	2300      	movs	r3, #0
 80011ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ae:	463b      	mov	r3, r7
 80011b0:	4618      	mov	r0, r3
 80011b2:	f001 ff5b 	bl	800306c <HAL_RCCEx_PeriphCLKConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80011bc:	f000 f82a 	bl	8001214 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011c4:	f001 f910 	bl	80023e8 <HAL_PWREx_ControlVoltageScaling>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011ce:	f000 f821 	bl	8001214 <Error_Handler>
  }
}
 80011d2:	bf00      	nop
 80011d4:	37e0      	adds	r7, #224	; 0xe0
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	if( huart->Instance == USART1 )
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a08      	ldr	r2, [pc, #32]	; (800120c <HAL_UART_RxCpltCallback+0x30>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d102      	bne.n	80011f4 <HAL_UART_RxCpltCallback+0x18>
		sim7600_irqProcess() ;
 80011ee:	f003 fe97 	bl	8004f20 <sim7600_irqProcess>
	else if( huart->Instance == USART2 )
		terminal_irqProcess() ;
}
 80011f2:	e006      	b.n	8001202 <HAL_UART_RxCpltCallback+0x26>
	else if( huart->Instance == USART2 )
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a05      	ldr	r2, [pc, #20]	; (8001210 <HAL_UART_RxCpltCallback+0x34>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d101      	bne.n	8001202 <HAL_UART_RxCpltCallback+0x26>
		terminal_irqProcess() ;
 80011fe:	f003 fee3 	bl	8004fc8 <terminal_irqProcess>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40013800 	.word	0x40013800
 8001210:	40004400 	.word	0x40004400

08001214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
}
 800121a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800121c:	e7fe      	b.n	800121c <Error_Handler+0x8>
	...

08001220 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <HAL_MspInit+0x44>)
 8001228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800122a:	4a0e      	ldr	r2, [pc, #56]	; (8001264 <HAL_MspInit+0x44>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6613      	str	r3, [r2, #96]	; 0x60
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <HAL_MspInit+0x44>)
 8001234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <HAL_MspInit+0x44>)
 8001240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001242:	4a08      	ldr	r2, [pc, #32]	; (8001264 <HAL_MspInit+0x44>)
 8001244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001248:	6593      	str	r3, [r2, #88]	; 0x58
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_MspInit+0x44>)
 800124c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40021000 	.word	0x40021000

08001268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800126c:	e7fe      	b.n	800126c <NMI_Handler+0x4>

0800126e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <HardFault_Handler+0x4>

08001274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <MemManage_Handler+0x4>

0800127a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800127e:	e7fe      	b.n	800127e <BusFault_Handler+0x4>

08001280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <UsageFault_Handler+0x4>

08001286 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b4:	f000 fa78 	bl	80017a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}

080012bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012c0:	4802      	ldr	r0, [pc, #8]	; (80012cc <USART1_IRQHandler+0x10>)
 80012c2:	f002 fcb5 	bl	8003c30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000a1c 	.word	0x20000a1c

080012d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012d4:	4802      	ldr	r0, [pc, #8]	; (80012e0 <USART2_IRQHandler+0x10>)
 80012d6:	f002 fcab 	bl	8003c30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000aa0 	.word	0x20000aa0

080012e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
	return 1;
 80012e8:	2301      	movs	r3, #1
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <_kill>:

int _kill(int pid, int sig)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012fe:	f003 fefb 	bl	80050f8 <__errno>
 8001302:	4603      	mov	r3, r0
 8001304:	2216      	movs	r2, #22
 8001306:	601a      	str	r2, [r3, #0]
	return -1;
 8001308:	f04f 33ff 	mov.w	r3, #4294967295
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <_exit>:

void _exit (int status)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800131c:	f04f 31ff 	mov.w	r1, #4294967295
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff ffe7 	bl	80012f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001326:	e7fe      	b.n	8001326 <_exit+0x12>

08001328 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	e00a      	b.n	8001350 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800133a:	f3af 8000 	nop.w
 800133e:	4601      	mov	r1, r0
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	1c5a      	adds	r2, r3, #1
 8001344:	60ba      	str	r2, [r7, #8]
 8001346:	b2ca      	uxtb	r2, r1
 8001348:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	3301      	adds	r3, #1
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697a      	ldr	r2, [r7, #20]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	429a      	cmp	r2, r3
 8001356:	dbf0      	blt.n	800133a <_read+0x12>
	}

return len;
 8001358:	687b      	ldr	r3, [r7, #4]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	60f8      	str	r0, [r7, #12]
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	e009      	b.n	8001388 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	1c5a      	adds	r2, r3, #1
 8001378:	60ba      	str	r2, [r7, #8]
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	3301      	adds	r3, #1
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	429a      	cmp	r2, r3
 800138e:	dbf1      	blt.n	8001374 <_write+0x12>
	}
	return len;
 8001390:	687b      	ldr	r3, [r7, #4]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <_close>:

int _close(int file)
{
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
	return -1;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013c2:	605a      	str	r2, [r3, #4]
	return 0;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <_isatty>:

int _isatty(int file)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
	return 1;
 80013da:	2301      	movs	r3, #1
}
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
	return 0;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800140c:	4a14      	ldr	r2, [pc, #80]	; (8001460 <_sbrk+0x5c>)
 800140e:	4b15      	ldr	r3, [pc, #84]	; (8001464 <_sbrk+0x60>)
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001418:	4b13      	ldr	r3, [pc, #76]	; (8001468 <_sbrk+0x64>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d102      	bne.n	8001426 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001420:	4b11      	ldr	r3, [pc, #68]	; (8001468 <_sbrk+0x64>)
 8001422:	4a12      	ldr	r2, [pc, #72]	; (800146c <_sbrk+0x68>)
 8001424:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001426:	4b10      	ldr	r3, [pc, #64]	; (8001468 <_sbrk+0x64>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4413      	add	r3, r2
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	429a      	cmp	r2, r3
 8001432:	d207      	bcs.n	8001444 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001434:	f003 fe60 	bl	80050f8 <__errno>
 8001438:	4603      	mov	r3, r0
 800143a:	220c      	movs	r2, #12
 800143c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800143e:	f04f 33ff 	mov.w	r3, #4294967295
 8001442:	e009      	b.n	8001458 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <_sbrk+0x64>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800144a:	4b07      	ldr	r3, [pc, #28]	; (8001468 <_sbrk+0x64>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	4a05      	ldr	r2, [pc, #20]	; (8001468 <_sbrk+0x64>)
 8001454:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001456:	68fb      	ldr	r3, [r7, #12]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20018000 	.word	0x20018000
 8001464:	00000400 	.word	0x00000400
 8001468:	2000021c 	.word	0x2000021c
 800146c:	20000b38 	.word	0x20000b38

08001470 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001474:	4b15      	ldr	r3, [pc, #84]	; (80014cc <SystemInit+0x5c>)
 8001476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800147a:	4a14      	ldr	r2, [pc, #80]	; (80014cc <SystemInit+0x5c>)
 800147c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001480:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <SystemInit+0x60>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a11      	ldr	r2, [pc, #68]	; (80014d0 <SystemInit+0x60>)
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <SystemInit+0x60>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <SystemInit+0x60>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a0d      	ldr	r2, [pc, #52]	; (80014d0 <SystemInit+0x60>)
 800149c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80014a0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80014a4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80014a6:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <SystemInit+0x60>)
 80014a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014ac:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014ae:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <SystemInit+0x60>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <SystemInit+0x60>)
 80014b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80014ba:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <SystemInit+0x60>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000ed00 	.word	0xe000ed00
 80014d0:	40021000 	.word	0x40021000

080014d4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014d8:	4b14      	ldr	r3, [pc, #80]	; (800152c <MX_USART1_UART_Init+0x58>)
 80014da:	4a15      	ldr	r2, [pc, #84]	; (8001530 <MX_USART1_UART_Init+0x5c>)
 80014dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014de:	4b13      	ldr	r3, [pc, #76]	; (800152c <MX_USART1_UART_Init+0x58>)
 80014e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014e6:	4b11      	ldr	r3, [pc, #68]	; (800152c <MX_USART1_UART_Init+0x58>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <MX_USART1_UART_Init+0x58>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <MX_USART1_UART_Init+0x58>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <MX_USART1_UART_Init+0x58>)
 80014fa:	220c      	movs	r2, #12
 80014fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <MX_USART1_UART_Init+0x58>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <MX_USART1_UART_Init+0x58>)
 8001506:	2200      	movs	r2, #0
 8001508:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <MX_USART1_UART_Init+0x58>)
 800150c:	2200      	movs	r2, #0
 800150e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <MX_USART1_UART_Init+0x58>)
 8001512:	2200      	movs	r2, #0
 8001514:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_USART1_UART_Init+0x58>)
 8001518:	f002 fa64 	bl	80039e4 <HAL_UART_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001522:	f7ff fe77 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000a1c 	.word	0x20000a1c
 8001530:	40013800 	.word	0x40013800

08001534 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <MX_USART2_UART_Init+0x58>)
 800153a:	4a15      	ldr	r2, [pc, #84]	; (8001590 <MX_USART2_UART_Init+0x5c>)
 800153c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800153e:	4b13      	ldr	r3, [pc, #76]	; (800158c <MX_USART2_UART_Init+0x58>)
 8001540:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001544:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <MX_USART2_UART_Init+0x58>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800154c:	4b0f      	ldr	r3, [pc, #60]	; (800158c <MX_USART2_UART_Init+0x58>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <MX_USART2_UART_Init+0x58>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <MX_USART2_UART_Init+0x58>)
 800155a:	220c      	movs	r2, #12
 800155c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <MX_USART2_UART_Init+0x58>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <MX_USART2_UART_Init+0x58>)
 8001566:	2200      	movs	r2, #0
 8001568:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <MX_USART2_UART_Init+0x58>)
 800156c:	2200      	movs	r2, #0
 800156e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <MX_USART2_UART_Init+0x58>)
 8001572:	2200      	movs	r2, #0
 8001574:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_USART2_UART_Init+0x58>)
 8001578:	f002 fa34 	bl	80039e4 <HAL_UART_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001582:	f7ff fe47 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000aa0 	.word	0x20000aa0
 8001590:	40004400 	.word	0x40004400

08001594 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08c      	sub	sp, #48	; 0x30
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a36      	ldr	r2, [pc, #216]	; (800168c <HAL_UART_MspInit+0xf8>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d130      	bne.n	8001618 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015b6:	4b36      	ldr	r3, [pc, #216]	; (8001690 <HAL_UART_MspInit+0xfc>)
 80015b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ba:	4a35      	ldr	r2, [pc, #212]	; (8001690 <HAL_UART_MspInit+0xfc>)
 80015bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c0:	6613      	str	r3, [r2, #96]	; 0x60
 80015c2:	4b33      	ldr	r3, [pc, #204]	; (8001690 <HAL_UART_MspInit+0xfc>)
 80015c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ca:	61bb      	str	r3, [r7, #24]
 80015cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ce:	4b30      	ldr	r3, [pc, #192]	; (8001690 <HAL_UART_MspInit+0xfc>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d2:	4a2f      	ldr	r2, [pc, #188]	; (8001690 <HAL_UART_MspInit+0xfc>)
 80015d4:	f043 0302 	orr.w	r3, r3, #2
 80015d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015da:	4b2d      	ldr	r3, [pc, #180]	; (8001690 <HAL_UART_MspInit+0xfc>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SIM7600E_TX_Pin|SIM7600E_RX_Pin;
 80015e6:	23c0      	movs	r3, #192	; 0xc0
 80015e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	2302      	movs	r3, #2
 80015ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f2:	2303      	movs	r3, #3
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015f6:	2307      	movs	r3, #7
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fa:	f107 031c 	add.w	r3, r7, #28
 80015fe:	4619      	mov	r1, r3
 8001600:	4824      	ldr	r0, [pc, #144]	; (8001694 <HAL_UART_MspInit+0x100>)
 8001602:	f000 fd21 	bl	8002048 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	2025      	movs	r0, #37	; 0x25
 800160c:	f000 f9c7 	bl	800199e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001610:	2025      	movs	r0, #37	; 0x25
 8001612:	f000 f9e0 	bl	80019d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001616:	e035      	b.n	8001684 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a1e      	ldr	r2, [pc, #120]	; (8001698 <HAL_UART_MspInit+0x104>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d130      	bne.n	8001684 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001622:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <HAL_UART_MspInit+0xfc>)
 8001624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001626:	4a1a      	ldr	r2, [pc, #104]	; (8001690 <HAL_UART_MspInit+0xfc>)
 8001628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800162c:	6593      	str	r3, [r2, #88]	; 0x58
 800162e:	4b18      	ldr	r3, [pc, #96]	; (8001690 <HAL_UART_MspInit+0xfc>)
 8001630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <HAL_UART_MspInit+0xfc>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163e:	4a14      	ldr	r2, [pc, #80]	; (8001690 <HAL_UART_MspInit+0xfc>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001646:	4b12      	ldr	r3, [pc, #72]	; (8001690 <HAL_UART_MspInit+0xfc>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TERMINAL_TX_Pin|TERMINAL_RX_Pin;
 8001652:	230c      	movs	r3, #12
 8001654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165e:	2303      	movs	r3, #3
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001662:	2307      	movs	r3, #7
 8001664:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001666:	f107 031c 	add.w	r3, r7, #28
 800166a:	4619      	mov	r1, r3
 800166c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001670:	f000 fcea 	bl	8002048 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001674:	2200      	movs	r2, #0
 8001676:	2100      	movs	r1, #0
 8001678:	2026      	movs	r0, #38	; 0x26
 800167a:	f000 f990 	bl	800199e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800167e:	2026      	movs	r0, #38	; 0x26
 8001680:	f000 f9a9 	bl	80019d6 <HAL_NVIC_EnableIRQ>
}
 8001684:	bf00      	nop
 8001686:	3730      	adds	r7, #48	; 0x30
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40013800 	.word	0x40013800
 8001690:	40021000 	.word	0x40021000
 8001694:	48000400 	.word	0x48000400
 8001698:	40004400 	.word	0x40004400

0800169c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800169c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016a0:	f7ff fee6 	bl	8001470 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80016a4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80016a6:	e003      	b.n	80016b0 <LoopCopyDataInit>

080016a8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80016a8:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80016aa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80016ac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80016ae:	3104      	adds	r1, #4

080016b0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80016b0:	480a      	ldr	r0, [pc, #40]	; (80016dc <LoopForever+0xa>)
	ldr	r3, =_edata
 80016b2:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80016b4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80016b6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80016b8:	d3f6      	bcc.n	80016a8 <CopyDataInit>
	ldr	r2, =_sbss
 80016ba:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80016bc:	e002      	b.n	80016c4 <LoopFillZerobss>

080016be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80016be:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80016c0:	f842 3b04 	str.w	r3, [r2], #4

080016c4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <LoopForever+0x16>)
	cmp	r2, r3
 80016c6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80016c8:	d3f9      	bcc.n	80016be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ca:	f003 fd1b 	bl	8005104 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016ce:	f7ff fce7 	bl	80010a0 <main>

080016d2 <LoopForever>:

LoopForever:
    b LoopForever
 80016d2:	e7fe      	b.n	80016d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016d4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80016d8:	08009f2c 	.word	0x08009f2c
	ldr	r0, =_sdata
 80016dc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80016e0:	20000200 	.word	0x20000200
	ldr	r2, =_sbss
 80016e4:	20000200 	.word	0x20000200
	ldr	r3, = _ebss
 80016e8:	20000b38 	.word	0x20000b38

080016ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016ec:	e7fe      	b.n	80016ec <ADC1_2_IRQHandler>
	...

080016f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016fa:	4b0c      	ldr	r3, [pc, #48]	; (800172c <HAL_Init+0x3c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a0b      	ldr	r2, [pc, #44]	; (800172c <HAL_Init+0x3c>)
 8001700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001704:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001706:	2003      	movs	r0, #3
 8001708:	f000 f93e 	bl	8001988 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800170c:	2000      	movs	r0, #0
 800170e:	f000 f80f 	bl	8001730 <HAL_InitTick>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d002      	beq.n	800171e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	71fb      	strb	r3, [r7, #7]
 800171c:	e001      	b.n	8001722 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800171e:	f7ff fd7f 	bl	8001220 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001722:	79fb      	ldrb	r3, [r7, #7]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40022000 	.word	0x40022000

08001730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001738:	2300      	movs	r3, #0
 800173a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800173c:	4b17      	ldr	r3, [pc, #92]	; (800179c <HAL_InitTick+0x6c>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d023      	beq.n	800178c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001744:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <HAL_InitTick+0x70>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4b14      	ldr	r3, [pc, #80]	; (800179c <HAL_InitTick+0x6c>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	4619      	mov	r1, r3
 800174e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001752:	fbb3 f3f1 	udiv	r3, r3, r1
 8001756:	fbb2 f3f3 	udiv	r3, r2, r3
 800175a:	4618      	mov	r0, r3
 800175c:	f000 f949 	bl	80019f2 <HAL_SYSTICK_Config>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d10f      	bne.n	8001786 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b0f      	cmp	r3, #15
 800176a:	d809      	bhi.n	8001780 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800176c:	2200      	movs	r2, #0
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	f04f 30ff 	mov.w	r0, #4294967295
 8001774:	f000 f913 	bl	800199e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001778:	4a0a      	ldr	r2, [pc, #40]	; (80017a4 <HAL_InitTick+0x74>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	e007      	b.n	8001790 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	73fb      	strb	r3, [r7, #15]
 8001784:	e004      	b.n	8001790 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	73fb      	strb	r3, [r7, #15]
 800178a:	e001      	b.n	8001790 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001790:	7bfb      	ldrb	r3, [r7, #15]
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000008 	.word	0x20000008
 80017a0:	20000000 	.word	0x20000000
 80017a4:	20000004 	.word	0x20000004

080017a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_IncTick+0x20>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_IncTick+0x24>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	4a04      	ldr	r2, [pc, #16]	; (80017cc <HAL_IncTick+0x24>)
 80017ba:	6013      	str	r3, [r2, #0]
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	20000008 	.word	0x20000008
 80017cc:	20000b24 	.word	0x20000b24

080017d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return uwTick;
 80017d4:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <HAL_GetTick+0x14>)
 80017d6:	681b      	ldr	r3, [r3, #0]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20000b24 	.word	0x20000b24

080017e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <__NVIC_SetPriorityGrouping+0x44>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001804:	4013      	ands	r3, r2
 8001806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001810:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181a:	4a04      	ldr	r2, [pc, #16]	; (800182c <__NVIC_SetPriorityGrouping+0x44>)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	60d3      	str	r3, [r2, #12]
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001834:	4b04      	ldr	r3, [pc, #16]	; (8001848 <__NVIC_GetPriorityGrouping+0x18>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	f003 0307 	and.w	r3, r3, #7
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	2b00      	cmp	r3, #0
 800185c:	db0b      	blt.n	8001876 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	f003 021f 	and.w	r2, r3, #31
 8001864:	4907      	ldr	r1, [pc, #28]	; (8001884 <__NVIC_EnableIRQ+0x38>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	095b      	lsrs	r3, r3, #5
 800186c:	2001      	movs	r0, #1
 800186e:	fa00 f202 	lsl.w	r2, r0, r2
 8001872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000e100 	.word	0xe000e100

08001888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	6039      	str	r1, [r7, #0]
 8001892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001898:	2b00      	cmp	r3, #0
 800189a:	db0a      	blt.n	80018b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	490c      	ldr	r1, [pc, #48]	; (80018d4 <__NVIC_SetPriority+0x4c>)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	0112      	lsls	r2, r2, #4
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	440b      	add	r3, r1
 80018ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b0:	e00a      	b.n	80018c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	4908      	ldr	r1, [pc, #32]	; (80018d8 <__NVIC_SetPriority+0x50>)
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	3b04      	subs	r3, #4
 80018c0:	0112      	lsls	r2, r2, #4
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	440b      	add	r3, r1
 80018c6:	761a      	strb	r2, [r3, #24]
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000e100 	.word	0xe000e100
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018dc:	b480      	push	{r7}
 80018de:	b089      	sub	sp, #36	; 0x24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f1c3 0307 	rsb	r3, r3, #7
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	bf28      	it	cs
 80018fa:	2304      	movcs	r3, #4
 80018fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3304      	adds	r3, #4
 8001902:	2b06      	cmp	r3, #6
 8001904:	d902      	bls.n	800190c <NVIC_EncodePriority+0x30>
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3b03      	subs	r3, #3
 800190a:	e000      	b.n	800190e <NVIC_EncodePriority+0x32>
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	f04f 32ff 	mov.w	r2, #4294967295
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43da      	mvns	r2, r3
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	401a      	ands	r2, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001924:	f04f 31ff 	mov.w	r1, #4294967295
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fa01 f303 	lsl.w	r3, r1, r3
 800192e:	43d9      	mvns	r1, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001934:	4313      	orrs	r3, r2
         );
}
 8001936:	4618      	mov	r0, r3
 8001938:	3724      	adds	r7, #36	; 0x24
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3b01      	subs	r3, #1
 8001950:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001954:	d301      	bcc.n	800195a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001956:	2301      	movs	r3, #1
 8001958:	e00f      	b.n	800197a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195a:	4a0a      	ldr	r2, [pc, #40]	; (8001984 <SysTick_Config+0x40>)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3b01      	subs	r3, #1
 8001960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001962:	210f      	movs	r1, #15
 8001964:	f04f 30ff 	mov.w	r0, #4294967295
 8001968:	f7ff ff8e 	bl	8001888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <SysTick_Config+0x40>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001972:	4b04      	ldr	r3, [pc, #16]	; (8001984 <SysTick_Config+0x40>)
 8001974:	2207      	movs	r2, #7
 8001976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	e000e010 	.word	0xe000e010

08001988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff ff29 	bl	80017e8 <__NVIC_SetPriorityGrouping>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b086      	sub	sp, #24
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	4603      	mov	r3, r0
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
 80019aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019b0:	f7ff ff3e 	bl	8001830 <__NVIC_GetPriorityGrouping>
 80019b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	68b9      	ldr	r1, [r7, #8]
 80019ba:	6978      	ldr	r0, [r7, #20]
 80019bc:	f7ff ff8e 	bl	80018dc <NVIC_EncodePriority>
 80019c0:	4602      	mov	r2, r0
 80019c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c6:	4611      	mov	r1, r2
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ff5d 	bl	8001888 <__NVIC_SetPriority>
}
 80019ce:	bf00      	nop
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	4603      	mov	r3, r0
 80019de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff31 	bl	800184c <__NVIC_EnableIRQ>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff ffa2 	bl	8001944 <SysTick_Config>
 8001a00:	4603      	mov	r3, r0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b085      	sub	sp, #20
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d008      	beq.n	8001a34 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2204      	movs	r2, #4
 8001a26:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e022      	b.n	8001a7a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 020e 	bic.w	r2, r2, #14
 8001a42:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0201 	bic.w	r2, r2, #1
 8001a52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a58:	f003 021c 	and.w	r2, r3, #28
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	2101      	movs	r1, #1
 8001a62:	fa01 f202 	lsl.w	r2, r1, r2
 8001a66:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b084      	sub	sp, #16
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d005      	beq.n	8001aaa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2204      	movs	r2, #4
 8001aa2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	73fb      	strb	r3, [r7, #15]
 8001aa8:	e029      	b.n	8001afe <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 020e 	bic.w	r2, r2, #14
 8001ab8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 0201 	bic.w	r2, r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	f003 021c 	and.w	r2, r3, #28
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8001adc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	4798      	blx	r3
    }
  }
  return status;
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001b1a:	4b2f      	ldr	r3, [pc, #188]	; (8001bd8 <HAL_FLASH_Program+0xd0>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <HAL_FLASH_Program+0x1e>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e053      	b.n	8001bce <HAL_FLASH_Program+0xc6>
 8001b26:	4b2c      	ldr	r3, [pc, #176]	; (8001bd8 <HAL_FLASH_Program+0xd0>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b30:	f000 f894 	bl	8001c5c <FLASH_WaitForLastOperation>
 8001b34:	4603      	mov	r3, r0
 8001b36:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8001b38:	7dfb      	ldrb	r3, [r7, #23]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d143      	bne.n	8001bc6 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b3e:	4b26      	ldr	r3, [pc, #152]	; (8001bd8 <HAL_FLASH_Program+0xd0>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001b44:	4b25      	ldr	r3, [pc, #148]	; (8001bdc <HAL_FLASH_Program+0xd4>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d009      	beq.n	8001b64 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001b50:	4b22      	ldr	r3, [pc, #136]	; (8001bdc <HAL_FLASH_Program+0xd4>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a21      	ldr	r2, [pc, #132]	; (8001bdc <HAL_FLASH_Program+0xd4>)
 8001b56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b5a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001b5c:	4b1e      	ldr	r3, [pc, #120]	; (8001bd8 <HAL_FLASH_Program+0xd0>)
 8001b5e:	2202      	movs	r2, #2
 8001b60:	771a      	strb	r2, [r3, #28]
 8001b62:	e002      	b.n	8001b6a <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001b64:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <HAL_FLASH_Program+0xd0>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d107      	bne.n	8001b80 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8001b70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b74:	68b8      	ldr	r0, [r7, #8]
 8001b76:	f000 f8c7 	bl	8001d08 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	e010      	b.n	8001ba2 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d002      	beq.n	8001b8c <HAL_FLASH_Program+0x84>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d10a      	bne.n	8001ba2 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	4619      	mov	r1, r3
 8001b90:	68b8      	ldr	r0, [r7, #8]
 8001b92:	f000 f8df 	bl	8001d54 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d102      	bne.n	8001ba2 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8001b9c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ba0:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ba2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ba6:	f000 f859 	bl	8001c5c <FLASH_WaitForLastOperation>
 8001baa:	4603      	mov	r3, r0
 8001bac:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d006      	beq.n	8001bc2 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_FLASH_Program+0xd4>)
 8001bb6:	695a      	ldr	r2, [r3, #20]
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	4907      	ldr	r1, [pc, #28]	; (8001bdc <HAL_FLASH_Program+0xd4>)
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001bc2:	f000 f9fd 	bl	8001fc0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001bc6:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <HAL_FLASH_Program+0xd0>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	701a      	strb	r2, [r3, #0]

  return status;
 8001bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	2000000c 	.word	0x2000000c
 8001bdc:	40022000 	.word	0x40022000

08001be0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001be6:	2300      	movs	r3, #0
 8001be8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <HAL_FLASH_Unlock+0x38>)
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	da0b      	bge.n	8001c0a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <HAL_FLASH_Unlock+0x38>)
 8001bf4:	4a09      	ldr	r2, [pc, #36]	; (8001c1c <HAL_FLASH_Unlock+0x3c>)
 8001bf6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <HAL_FLASH_Unlock+0x38>)
 8001bfa:	4a09      	ldr	r2, [pc, #36]	; (8001c20 <HAL_FLASH_Unlock+0x40>)
 8001bfc:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <HAL_FLASH_Unlock+0x38>)
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	da01      	bge.n	8001c0a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	40022000 	.word	0x40022000
 8001c1c:	45670123 	.word	0x45670123
 8001c20:	cdef89ab 	.word	0xcdef89ab

08001c24 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <HAL_FLASH_Lock+0x1c>)
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	4a04      	ldr	r2, [pc, #16]	; (8001c40 <HAL_FLASH_Lock+0x1c>)
 8001c2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c32:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	40022000 	.word	0x40022000

08001c44 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  *            @arg FLASH_FLAG_PEMPTY : FLASH Boot from not programmed flash (apply only for STM32L43x/STM32L44x devices)
  */
uint32_t HAL_FLASH_GetError(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8001c48:	4b03      	ldr	r3, [pc, #12]	; (8001c58 <HAL_FLASH_GetError+0x14>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	2000000c 	.word	0x2000000c

08001c5c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8001c64:	f7ff fdb4 	bl	80017d0 <HAL_GetTick>
 8001c68:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001c6a:	e00d      	b.n	8001c88 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c72:	d009      	beq.n	8001c88 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8001c74:	f7ff fdac 	bl	80017d0 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d801      	bhi.n	8001c88 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e037      	b.n	8001cf8 <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001c88:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <FLASH_WaitForLastOperation+0xa4>)
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1eb      	bne.n	8001c6c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001c94:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <FLASH_WaitForLastOperation+0xa4>)
 8001c96:	691a      	ldr	r2, [r3, #16]
 8001c98:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d01e      	beq.n	8001ce4 <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8001ca6:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <FLASH_WaitForLastOperation+0xa8>)
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	4a15      	ldr	r2, [pc, #84]	; (8001d04 <FLASH_WaitForLastOperation+0xa8>)
 8001cb0:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d007      	beq.n	8001ccc <FLASH_WaitForLastOperation+0x70>
 8001cbc:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <FLASH_WaitForLastOperation+0xa4>)
 8001cbe:	699a      	ldr	r2, [r3, #24]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001cc6:	490e      	ldr	r1, [pc, #56]	; (8001d00 <FLASH_WaitForLastOperation+0xa4>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	618b      	str	r3, [r1, #24]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d004      	beq.n	8001ce0 <FLASH_WaitForLastOperation+0x84>
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <FLASH_WaitForLastOperation+0xa4>)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001cde:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e009      	b.n	8001cf8 <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <FLASH_WaitForLastOperation+0xa4>)
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d002      	beq.n	8001cf6 <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <FLASH_WaitForLastOperation+0xa4>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40022000 	.word	0x40022000
 8001d04:	2000000c 	.word	0x2000000c

08001d08 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001d14:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <FLASH_Program_DoubleWord+0x48>)
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	4a0d      	ldr	r2, [pc, #52]	; (8001d50 <FLASH_Program_DoubleWord+0x48>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001d26:	f3bf 8f6f 	isb	sy
}
 8001d2a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8001d2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	000a      	movs	r2, r1
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	68f9      	ldr	r1, [r7, #12]
 8001d3e:	3104      	adds	r1, #4
 8001d40:	4613      	mov	r3, r2
 8001d42:	600b      	str	r3, [r1, #0]
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	40022000 	.word	0x40022000

08001d54 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b089      	sub	sp, #36	; 0x24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8001d5e:	2340      	movs	r3, #64	; 0x40
 8001d60:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8001d6a:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <FLASH_Program_Fast+0x68>)
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	4a13      	ldr	r2, [pc, #76]	; (8001dbc <FLASH_Program_Fast+0x68>)
 8001d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d74:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d76:	f3ef 8310 	mrs	r3, PRIMASK
 8001d7a:	60fb      	str	r3, [r7, #12]
  return(result);
 8001d7c:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8001d7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d80:	b672      	cpsid	i
}
 8001d82:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	3304      	adds	r3, #4
 8001d90:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	3304      	adds	r3, #4
 8001d96:	617b      	str	r3, [r7, #20]
    row_index--;
 8001d98:	7ffb      	ldrb	r3, [r7, #31]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8001d9e:	7ffb      	ldrb	r3, [r7, #31]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1ef      	bne.n	8001d84 <FLASH_Program_Fast+0x30>
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	f383 8810 	msr	PRIMASK, r3
}
 8001dae:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8001db0:	bf00      	nop
 8001db2:	3724      	adds	r7, #36	; 0x24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	40022000 	.word	0x40022000

08001dc0 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001dca:	4b4c      	ldr	r3, [pc, #304]	; (8001efc <HAL_FLASHEx_Erase+0x13c>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d101      	bne.n	8001dd6 <HAL_FLASHEx_Erase+0x16>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e08d      	b.n	8001ef2 <HAL_FLASHEx_Erase+0x132>
 8001dd6:	4b49      	ldr	r3, [pc, #292]	; (8001efc <HAL_FLASHEx_Erase+0x13c>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ddc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001de0:	f7ff ff3c 	bl	8001c5c <FLASH_WaitForLastOperation>
 8001de4:	4603      	mov	r3, r0
 8001de6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d17d      	bne.n	8001eea <HAL_FLASHEx_Erase+0x12a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001dee:	4b43      	ldr	r3, [pc, #268]	; (8001efc <HAL_FLASHEx_Erase+0x13c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8001df4:	4b42      	ldr	r3, [pc, #264]	; (8001f00 <HAL_FLASHEx_Erase+0x140>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d019      	beq.n	8001e34 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001e00:	4b3f      	ldr	r3, [pc, #252]	; (8001f00 <HAL_FLASHEx_Erase+0x140>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a3e      	ldr	r2, [pc, #248]	; (8001f00 <HAL_FLASHEx_Erase+0x140>)
 8001e06:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e0a:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001e0c:	4b3c      	ldr	r3, [pc, #240]	; (8001f00 <HAL_FLASHEx_Erase+0x140>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d009      	beq.n	8001e2c <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8001e18:	4b39      	ldr	r3, [pc, #228]	; (8001f00 <HAL_FLASHEx_Erase+0x140>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a38      	ldr	r2, [pc, #224]	; (8001f00 <HAL_FLASHEx_Erase+0x140>)
 8001e1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e22:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8001e24:	4b35      	ldr	r3, [pc, #212]	; (8001efc <HAL_FLASHEx_Erase+0x13c>)
 8001e26:	2203      	movs	r2, #3
 8001e28:	771a      	strb	r2, [r3, #28]
 8001e2a:	e016      	b.n	8001e5a <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8001e2c:	4b33      	ldr	r3, [pc, #204]	; (8001efc <HAL_FLASHEx_Erase+0x13c>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	771a      	strb	r2, [r3, #28]
 8001e32:	e012      	b.n	8001e5a <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001e34:	4b32      	ldr	r3, [pc, #200]	; (8001f00 <HAL_FLASHEx_Erase+0x140>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d009      	beq.n	8001e54 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001e40:	4b2f      	ldr	r3, [pc, #188]	; (8001f00 <HAL_FLASHEx_Erase+0x140>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a2e      	ldr	r2, [pc, #184]	; (8001f00 <HAL_FLASHEx_Erase+0x140>)
 8001e46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e4a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001e4c:	4b2b      	ldr	r3, [pc, #172]	; (8001efc <HAL_FLASHEx_Erase+0x13c>)
 8001e4e:	2202      	movs	r2, #2
 8001e50:	771a      	strb	r2, [r3, #28]
 8001e52:	e002      	b.n	8001e5a <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001e54:	4b29      	ldr	r3, [pc, #164]	; (8001efc <HAL_FLASHEx_Erase+0x13c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d113      	bne.n	8001e8a <HAL_FLASHEx_Erase+0xca>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 f84c 	bl	8001f04 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001e70:	f7ff fef4 	bl	8001c5c <FLASH_WaitForLastOperation>
 8001e74:	4603      	mov	r3, r0
 8001e76:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8001e78:	4b21      	ldr	r3, [pc, #132]	; (8001f00 <HAL_FLASHEx_Erase+0x140>)
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	4a20      	ldr	r2, [pc, #128]	; (8001f00 <HAL_FLASHEx_Erase+0x140>)
 8001e7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001e82:	f023 0304 	bic.w	r3, r3, #4
 8001e86:	6153      	str	r3, [r2, #20]
 8001e88:	e02d      	b.n	8001ee6 <HAL_FLASHEx_Erase+0x126>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e90:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	e01d      	b.n	8001ed6 <HAL_FLASHEx_Erase+0x116>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	68b8      	ldr	r0, [r7, #8]
 8001ea2:	f000 f857 	bl	8001f54 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ea6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001eaa:	f7ff fed7 	bl	8001c5c <FLASH_WaitForLastOperation>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8001eb2:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <HAL_FLASHEx_Erase+0x140>)
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	4a12      	ldr	r2, [pc, #72]	; (8001f00 <HAL_FLASHEx_Erase+0x140>)
 8001eb8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001ebc:	f023 0302 	bic.w	r3, r3, #2
 8001ec0:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_FLASHEx_Erase+0x110>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	601a      	str	r2, [r3, #0]
          break;
 8001ece:	e00a      	b.n	8001ee6 <HAL_FLASHEx_Erase+0x126>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	4413      	add	r3, r2
 8001ee0:	68ba      	ldr	r2, [r7, #8]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d3d9      	bcc.n	8001e9a <HAL_FLASHEx_Erase+0xda>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001ee6:	f000 f86b 	bl	8001fc0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001eea:	4b04      	ldr	r3, [pc, #16]	; (8001efc <HAL_FLASHEx_Erase+0x13c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]

  return status;
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	2000000c 	.word	0x2000000c
 8001f00:	40022000 	.word	0x40022000

08001f04 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d005      	beq.n	8001f22 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8001f16:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <FLASH_MassErase+0x4c>)
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	4a0d      	ldr	r2, [pc, #52]	; (8001f50 <FLASH_MassErase+0x4c>)
 8001f1c:	f043 0304 	orr.w	r3, r3, #4
 8001f20:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8001f2c:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <FLASH_MassErase+0x4c>)
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	4a07      	ldr	r2, [pc, #28]	; (8001f50 <FLASH_MassErase+0x4c>)
 8001f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f36:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001f38:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <FLASH_MassErase+0x4c>)
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	4a04      	ldr	r2, [pc, #16]	; (8001f50 <FLASH_MassErase+0x4c>)
 8001f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f42:	6153      	str	r3, [r2, #20]
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	40022000 	.word	0x40022000

08001f54 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d006      	beq.n	8001f76 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8001f68:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <FLASH_PageErase+0x68>)
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	4a13      	ldr	r2, [pc, #76]	; (8001fbc <FLASH_PageErase+0x68>)
 8001f6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f72:	6153      	str	r3, [r2, #20]
 8001f74:	e005      	b.n	8001f82 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8001f76:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <FLASH_PageErase+0x68>)
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	4a10      	ldr	r2, [pc, #64]	; (8001fbc <FLASH_PageErase+0x68>)
 8001f7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f80:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8001f82:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <FLASH_PageErase+0x68>)
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8001f92:	490a      	ldr	r1, [pc, #40]	; (8001fbc <FLASH_PageErase+0x68>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <FLASH_PageErase+0x68>)
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	4a07      	ldr	r2, [pc, #28]	; (8001fbc <FLASH_PageErase+0x68>)
 8001f9e:	f043 0302 	orr.w	r3, r3, #2
 8001fa2:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001fa4:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <FLASH_PageErase+0x68>)
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	4a04      	ldr	r2, [pc, #16]	; (8001fbc <FLASH_PageErase+0x68>)
 8001faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fae:	6153      	str	r3, [r2, #20]
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	40022000 	.word	0x40022000

08001fc0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8001fc6:	4b1e      	ldr	r3, [pc, #120]	; (8002040 <FLASH_FlushCaches+0x80>)
 8001fc8:	7f1b      	ldrb	r3, [r3, #28]
 8001fca:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d002      	beq.n	8001fd8 <FLASH_FlushCaches+0x18>
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d111      	bne.n	8001ffc <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001fd8:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <FLASH_FlushCaches+0x84>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a19      	ldr	r2, [pc, #100]	; (8002044 <FLASH_FlushCaches+0x84>)
 8001fde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fe2:	6013      	str	r3, [r2, #0]
 8001fe4:	4b17      	ldr	r3, [pc, #92]	; (8002044 <FLASH_FlushCaches+0x84>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a16      	ldr	r2, [pc, #88]	; (8002044 <FLASH_FlushCaches+0x84>)
 8001fea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001fee:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ff0:	4b14      	ldr	r3, [pc, #80]	; (8002044 <FLASH_FlushCaches+0x84>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a13      	ldr	r2, [pc, #76]	; (8002044 <FLASH_FlushCaches+0x84>)
 8001ff6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ffa:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d002      	beq.n	8002008 <FLASH_FlushCaches+0x48>
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	2b03      	cmp	r3, #3
 8002006:	d111      	bne.n	800202c <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002008:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <FLASH_FlushCaches+0x84>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a0d      	ldr	r2, [pc, #52]	; (8002044 <FLASH_FlushCaches+0x84>)
 800200e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002012:	6013      	str	r3, [r2, #0]
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <FLASH_FlushCaches+0x84>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a0a      	ldr	r2, [pc, #40]	; (8002044 <FLASH_FlushCaches+0x84>)
 800201a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800201e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002020:	4b08      	ldr	r3, [pc, #32]	; (8002044 <FLASH_FlushCaches+0x84>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a07      	ldr	r2, [pc, #28]	; (8002044 <FLASH_FlushCaches+0x84>)
 8002026:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800202a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800202c:	4b04      	ldr	r3, [pc, #16]	; (8002040 <FLASH_FlushCaches+0x80>)
 800202e:	2200      	movs	r2, #0
 8002030:	771a      	strb	r2, [r3, #28]
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	2000000c 	.word	0x2000000c
 8002044:	40022000 	.word	0x40022000

08002048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002048:	b480      	push	{r7}
 800204a:	b087      	sub	sp, #28
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002056:	e17f      	b.n	8002358 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	2101      	movs	r1, #1
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	fa01 f303 	lsl.w	r3, r1, r3
 8002064:	4013      	ands	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 8171 	beq.w	8002352 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d00b      	beq.n	8002090 <HAL_GPIO_Init+0x48>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b02      	cmp	r3, #2
 800207e:	d007      	beq.n	8002090 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002084:	2b11      	cmp	r3, #17
 8002086:	d003      	beq.n	8002090 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b12      	cmp	r3, #18
 800208e:	d130      	bne.n	80020f2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	2203      	movs	r2, #3
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	68da      	ldr	r2, [r3, #12]
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020c6:	2201      	movs	r2, #1
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4013      	ands	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	091b      	lsrs	r3, r3, #4
 80020dc:	f003 0201 	and.w	r2, r3, #1
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d118      	bne.n	8002130 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002102:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002104:	2201      	movs	r2, #1
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	08db      	lsrs	r3, r3, #3
 800211a:	f003 0201 	and.w	r2, r3, #1
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	2203      	movs	r2, #3
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	4013      	ands	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b02      	cmp	r3, #2
 8002166:	d003      	beq.n	8002170 <HAL_GPIO_Init+0x128>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b12      	cmp	r3, #18
 800216e:	d123      	bne.n	80021b8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	08da      	lsrs	r2, r3, #3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3208      	adds	r2, #8
 8002178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800217c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	220f      	movs	r2, #15
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	08da      	lsrs	r2, r3, #3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3208      	adds	r2, #8
 80021b2:	6939      	ldr	r1, [r7, #16]
 80021b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	2203      	movs	r2, #3
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0203 	and.w	r2, r3, #3
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 80ac 	beq.w	8002352 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fa:	4b5f      	ldr	r3, [pc, #380]	; (8002378 <HAL_GPIO_Init+0x330>)
 80021fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021fe:	4a5e      	ldr	r2, [pc, #376]	; (8002378 <HAL_GPIO_Init+0x330>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6613      	str	r3, [r2, #96]	; 0x60
 8002206:	4b5c      	ldr	r3, [pc, #368]	; (8002378 <HAL_GPIO_Init+0x330>)
 8002208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	60bb      	str	r3, [r7, #8]
 8002210:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002212:	4a5a      	ldr	r2, [pc, #360]	; (800237c <HAL_GPIO_Init+0x334>)
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	089b      	lsrs	r3, r3, #2
 8002218:	3302      	adds	r3, #2
 800221a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	220f      	movs	r2, #15
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43db      	mvns	r3, r3
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4013      	ands	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800223c:	d025      	beq.n	800228a <HAL_GPIO_Init+0x242>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a4f      	ldr	r2, [pc, #316]	; (8002380 <HAL_GPIO_Init+0x338>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d01f      	beq.n	8002286 <HAL_GPIO_Init+0x23e>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a4e      	ldr	r2, [pc, #312]	; (8002384 <HAL_GPIO_Init+0x33c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d019      	beq.n	8002282 <HAL_GPIO_Init+0x23a>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a4d      	ldr	r2, [pc, #308]	; (8002388 <HAL_GPIO_Init+0x340>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d013      	beq.n	800227e <HAL_GPIO_Init+0x236>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a4c      	ldr	r2, [pc, #304]	; (800238c <HAL_GPIO_Init+0x344>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d00d      	beq.n	800227a <HAL_GPIO_Init+0x232>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a4b      	ldr	r2, [pc, #300]	; (8002390 <HAL_GPIO_Init+0x348>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d007      	beq.n	8002276 <HAL_GPIO_Init+0x22e>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a4a      	ldr	r2, [pc, #296]	; (8002394 <HAL_GPIO_Init+0x34c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d101      	bne.n	8002272 <HAL_GPIO_Init+0x22a>
 800226e:	2306      	movs	r3, #6
 8002270:	e00c      	b.n	800228c <HAL_GPIO_Init+0x244>
 8002272:	2307      	movs	r3, #7
 8002274:	e00a      	b.n	800228c <HAL_GPIO_Init+0x244>
 8002276:	2305      	movs	r3, #5
 8002278:	e008      	b.n	800228c <HAL_GPIO_Init+0x244>
 800227a:	2304      	movs	r3, #4
 800227c:	e006      	b.n	800228c <HAL_GPIO_Init+0x244>
 800227e:	2303      	movs	r3, #3
 8002280:	e004      	b.n	800228c <HAL_GPIO_Init+0x244>
 8002282:	2302      	movs	r3, #2
 8002284:	e002      	b.n	800228c <HAL_GPIO_Init+0x244>
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <HAL_GPIO_Init+0x244>
 800228a:	2300      	movs	r3, #0
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	f002 0203 	and.w	r2, r2, #3
 8002292:	0092      	lsls	r2, r2, #2
 8002294:	4093      	lsls	r3, r2
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800229c:	4937      	ldr	r1, [pc, #220]	; (800237c <HAL_GPIO_Init+0x334>)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	089b      	lsrs	r3, r3, #2
 80022a2:	3302      	adds	r3, #2
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80022aa:	4b3b      	ldr	r3, [pc, #236]	; (8002398 <HAL_GPIO_Init+0x350>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	43db      	mvns	r3, r3
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	4013      	ands	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022ce:	4a32      	ldr	r2, [pc, #200]	; (8002398 <HAL_GPIO_Init+0x350>)
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80022d4:	4b30      	ldr	r3, [pc, #192]	; (8002398 <HAL_GPIO_Init+0x350>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	43db      	mvns	r3, r3
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4013      	ands	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022f8:	4a27      	ldr	r2, [pc, #156]	; (8002398 <HAL_GPIO_Init+0x350>)
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022fe:	4b26      	ldr	r3, [pc, #152]	; (8002398 <HAL_GPIO_Init+0x350>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	43db      	mvns	r3, r3
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4013      	ands	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4313      	orrs	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002322:	4a1d      	ldr	r2, [pc, #116]	; (8002398 <HAL_GPIO_Init+0x350>)
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002328:	4b1b      	ldr	r3, [pc, #108]	; (8002398 <HAL_GPIO_Init+0x350>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	43db      	mvns	r3, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4013      	ands	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4313      	orrs	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800234c:	4a12      	ldr	r2, [pc, #72]	; (8002398 <HAL_GPIO_Init+0x350>)
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	3301      	adds	r3, #1
 8002356:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	fa22 f303 	lsr.w	r3, r2, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	f47f ae78 	bne.w	8002058 <HAL_GPIO_Init+0x10>
  }
}
 8002368:	bf00      	nop
 800236a:	bf00      	nop
 800236c:	371c      	adds	r7, #28
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40021000 	.word	0x40021000
 800237c:	40010000 	.word	0x40010000
 8002380:	48000400 	.word	0x48000400
 8002384:	48000800 	.word	0x48000800
 8002388:	48000c00 	.word	0x48000c00
 800238c:	48001000 	.word	0x48001000
 8002390:	48001400 	.word	0x48001400
 8002394:	48001800 	.word	0x48001800
 8002398:	40010400 	.word	0x40010400

0800239c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	807b      	strh	r3, [r7, #2]
 80023a8:	4613      	mov	r3, r2
 80023aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023ac:	787b      	ldrb	r3, [r7, #1]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023b2:	887a      	ldrh	r2, [r7, #2]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023b8:	e002      	b.n	80023c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023ba:	887a      	ldrh	r2, [r7, #2]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80023d0:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	40007000 	.word	0x40007000

080023e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023f6:	d130      	bne.n	800245a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80023f8:	4b23      	ldr	r3, [pc, #140]	; (8002488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002404:	d038      	beq.n	8002478 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002406:	4b20      	ldr	r3, [pc, #128]	; (8002488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800240e:	4a1e      	ldr	r2, [pc, #120]	; (8002488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002410:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002414:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002416:	4b1d      	ldr	r3, [pc, #116]	; (800248c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2232      	movs	r2, #50	; 0x32
 800241c:	fb02 f303 	mul.w	r3, r2, r3
 8002420:	4a1b      	ldr	r2, [pc, #108]	; (8002490 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002422:	fba2 2303 	umull	r2, r3, r2, r3
 8002426:	0c9b      	lsrs	r3, r3, #18
 8002428:	3301      	adds	r3, #1
 800242a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800242c:	e002      	b.n	8002434 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	3b01      	subs	r3, #1
 8002432:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002434:	4b14      	ldr	r3, [pc, #80]	; (8002488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800243c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002440:	d102      	bne.n	8002448 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1f2      	bne.n	800242e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002448:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002454:	d110      	bne.n	8002478 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e00f      	b.n	800247a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800245a:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002466:	d007      	beq.n	8002478 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002468:	4b07      	ldr	r3, [pc, #28]	; (8002488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002470:	4a05      	ldr	r2, [pc, #20]	; (8002488 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002472:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002476:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40007000 	.word	0x40007000
 800248c:	20000000 	.word	0x20000000
 8002490:	431bde83 	.word	0x431bde83

08002494 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e3d4      	b.n	8002c50 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024a6:	4ba1      	ldr	r3, [pc, #644]	; (800272c <HAL_RCC_OscConfig+0x298>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 030c 	and.w	r3, r3, #12
 80024ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024b0:	4b9e      	ldr	r3, [pc, #632]	; (800272c <HAL_RCC_OscConfig+0x298>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0310 	and.w	r3, r3, #16
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 80e4 	beq.w	8002690 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d007      	beq.n	80024de <HAL_RCC_OscConfig+0x4a>
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	2b0c      	cmp	r3, #12
 80024d2:	f040 808b 	bne.w	80025ec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	f040 8087 	bne.w	80025ec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024de:	4b93      	ldr	r3, [pc, #588]	; (800272c <HAL_RCC_OscConfig+0x298>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d005      	beq.n	80024f6 <HAL_RCC_OscConfig+0x62>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e3ac      	b.n	8002c50 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1a      	ldr	r2, [r3, #32]
 80024fa:	4b8c      	ldr	r3, [pc, #560]	; (800272c <HAL_RCC_OscConfig+0x298>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d004      	beq.n	8002510 <HAL_RCC_OscConfig+0x7c>
 8002506:	4b89      	ldr	r3, [pc, #548]	; (800272c <HAL_RCC_OscConfig+0x298>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800250e:	e005      	b.n	800251c <HAL_RCC_OscConfig+0x88>
 8002510:	4b86      	ldr	r3, [pc, #536]	; (800272c <HAL_RCC_OscConfig+0x298>)
 8002512:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002516:	091b      	lsrs	r3, r3, #4
 8002518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800251c:	4293      	cmp	r3, r2
 800251e:	d223      	bcs.n	8002568 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	4618      	mov	r0, r3
 8002526:	f000 fd41 	bl	8002fac <RCC_SetFlashLatencyFromMSIRange>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e38d      	b.n	8002c50 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002534:	4b7d      	ldr	r3, [pc, #500]	; (800272c <HAL_RCC_OscConfig+0x298>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a7c      	ldr	r2, [pc, #496]	; (800272c <HAL_RCC_OscConfig+0x298>)
 800253a:	f043 0308 	orr.w	r3, r3, #8
 800253e:	6013      	str	r3, [r2, #0]
 8002540:	4b7a      	ldr	r3, [pc, #488]	; (800272c <HAL_RCC_OscConfig+0x298>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	4977      	ldr	r1, [pc, #476]	; (800272c <HAL_RCC_OscConfig+0x298>)
 800254e:	4313      	orrs	r3, r2
 8002550:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002552:	4b76      	ldr	r3, [pc, #472]	; (800272c <HAL_RCC_OscConfig+0x298>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	021b      	lsls	r3, r3, #8
 8002560:	4972      	ldr	r1, [pc, #456]	; (800272c <HAL_RCC_OscConfig+0x298>)
 8002562:	4313      	orrs	r3, r2
 8002564:	604b      	str	r3, [r1, #4]
 8002566:	e025      	b.n	80025b4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002568:	4b70      	ldr	r3, [pc, #448]	; (800272c <HAL_RCC_OscConfig+0x298>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a6f      	ldr	r2, [pc, #444]	; (800272c <HAL_RCC_OscConfig+0x298>)
 800256e:	f043 0308 	orr.w	r3, r3, #8
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	4b6d      	ldr	r3, [pc, #436]	; (800272c <HAL_RCC_OscConfig+0x298>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	496a      	ldr	r1, [pc, #424]	; (800272c <HAL_RCC_OscConfig+0x298>)
 8002582:	4313      	orrs	r3, r2
 8002584:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002586:	4b69      	ldr	r3, [pc, #420]	; (800272c <HAL_RCC_OscConfig+0x298>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	021b      	lsls	r3, r3, #8
 8002594:	4965      	ldr	r1, [pc, #404]	; (800272c <HAL_RCC_OscConfig+0x298>)
 8002596:	4313      	orrs	r3, r2
 8002598:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d109      	bne.n	80025b4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f000 fd01 	bl	8002fac <RCC_SetFlashLatencyFromMSIRange>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e34d      	b.n	8002c50 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025b4:	f000 fc36 	bl	8002e24 <HAL_RCC_GetSysClockFreq>
 80025b8:	4602      	mov	r2, r0
 80025ba:	4b5c      	ldr	r3, [pc, #368]	; (800272c <HAL_RCC_OscConfig+0x298>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	091b      	lsrs	r3, r3, #4
 80025c0:	f003 030f 	and.w	r3, r3, #15
 80025c4:	495a      	ldr	r1, [pc, #360]	; (8002730 <HAL_RCC_OscConfig+0x29c>)
 80025c6:	5ccb      	ldrb	r3, [r1, r3]
 80025c8:	f003 031f 	and.w	r3, r3, #31
 80025cc:	fa22 f303 	lsr.w	r3, r2, r3
 80025d0:	4a58      	ldr	r2, [pc, #352]	; (8002734 <HAL_RCC_OscConfig+0x2a0>)
 80025d2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025d4:	4b58      	ldr	r3, [pc, #352]	; (8002738 <HAL_RCC_OscConfig+0x2a4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff f8a9 	bl	8001730 <HAL_InitTick>
 80025de:	4603      	mov	r3, r0
 80025e0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d052      	beq.n	800268e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
 80025ea:	e331      	b.n	8002c50 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d032      	beq.n	800265a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025f4:	4b4d      	ldr	r3, [pc, #308]	; (800272c <HAL_RCC_OscConfig+0x298>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a4c      	ldr	r2, [pc, #304]	; (800272c <HAL_RCC_OscConfig+0x298>)
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002600:	f7ff f8e6 	bl	80017d0 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002608:	f7ff f8e2 	bl	80017d0 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e31a      	b.n	8002c50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800261a:	4b44      	ldr	r3, [pc, #272]	; (800272c <HAL_RCC_OscConfig+0x298>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0f0      	beq.n	8002608 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002626:	4b41      	ldr	r3, [pc, #260]	; (800272c <HAL_RCC_OscConfig+0x298>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a40      	ldr	r2, [pc, #256]	; (800272c <HAL_RCC_OscConfig+0x298>)
 800262c:	f043 0308 	orr.w	r3, r3, #8
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	4b3e      	ldr	r3, [pc, #248]	; (800272c <HAL_RCC_OscConfig+0x298>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	493b      	ldr	r1, [pc, #236]	; (800272c <HAL_RCC_OscConfig+0x298>)
 8002640:	4313      	orrs	r3, r2
 8002642:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002644:	4b39      	ldr	r3, [pc, #228]	; (800272c <HAL_RCC_OscConfig+0x298>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	021b      	lsls	r3, r3, #8
 8002652:	4936      	ldr	r1, [pc, #216]	; (800272c <HAL_RCC_OscConfig+0x298>)
 8002654:	4313      	orrs	r3, r2
 8002656:	604b      	str	r3, [r1, #4]
 8002658:	e01a      	b.n	8002690 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800265a:	4b34      	ldr	r3, [pc, #208]	; (800272c <HAL_RCC_OscConfig+0x298>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a33      	ldr	r2, [pc, #204]	; (800272c <HAL_RCC_OscConfig+0x298>)
 8002660:	f023 0301 	bic.w	r3, r3, #1
 8002664:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002666:	f7ff f8b3 	bl	80017d0 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800266e:	f7ff f8af 	bl	80017d0 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e2e7      	b.n	8002c50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002680:	4b2a      	ldr	r3, [pc, #168]	; (800272c <HAL_RCC_OscConfig+0x298>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1f0      	bne.n	800266e <HAL_RCC_OscConfig+0x1da>
 800268c:	e000      	b.n	8002690 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800268e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b00      	cmp	r3, #0
 800269a:	d074      	beq.n	8002786 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d005      	beq.n	80026ae <HAL_RCC_OscConfig+0x21a>
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	2b0c      	cmp	r3, #12
 80026a6:	d10e      	bne.n	80026c6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d10b      	bne.n	80026c6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ae:	4b1f      	ldr	r3, [pc, #124]	; (800272c <HAL_RCC_OscConfig+0x298>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d064      	beq.n	8002784 <HAL_RCC_OscConfig+0x2f0>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d160      	bne.n	8002784 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e2c4      	b.n	8002c50 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ce:	d106      	bne.n	80026de <HAL_RCC_OscConfig+0x24a>
 80026d0:	4b16      	ldr	r3, [pc, #88]	; (800272c <HAL_RCC_OscConfig+0x298>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a15      	ldr	r2, [pc, #84]	; (800272c <HAL_RCC_OscConfig+0x298>)
 80026d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	e01d      	b.n	800271a <HAL_RCC_OscConfig+0x286>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026e6:	d10c      	bne.n	8002702 <HAL_RCC_OscConfig+0x26e>
 80026e8:	4b10      	ldr	r3, [pc, #64]	; (800272c <HAL_RCC_OscConfig+0x298>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a0f      	ldr	r2, [pc, #60]	; (800272c <HAL_RCC_OscConfig+0x298>)
 80026ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f2:	6013      	str	r3, [r2, #0]
 80026f4:	4b0d      	ldr	r3, [pc, #52]	; (800272c <HAL_RCC_OscConfig+0x298>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a0c      	ldr	r2, [pc, #48]	; (800272c <HAL_RCC_OscConfig+0x298>)
 80026fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026fe:	6013      	str	r3, [r2, #0]
 8002700:	e00b      	b.n	800271a <HAL_RCC_OscConfig+0x286>
 8002702:	4b0a      	ldr	r3, [pc, #40]	; (800272c <HAL_RCC_OscConfig+0x298>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a09      	ldr	r2, [pc, #36]	; (800272c <HAL_RCC_OscConfig+0x298>)
 8002708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <HAL_RCC_OscConfig+0x298>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a06      	ldr	r2, [pc, #24]	; (800272c <HAL_RCC_OscConfig+0x298>)
 8002714:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002718:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d01c      	beq.n	800275c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002722:	f7ff f855 	bl	80017d0 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002728:	e011      	b.n	800274e <HAL_RCC_OscConfig+0x2ba>
 800272a:	bf00      	nop
 800272c:	40021000 	.word	0x40021000
 8002730:	08009a20 	.word	0x08009a20
 8002734:	20000000 	.word	0x20000000
 8002738:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800273c:	f7ff f848 	bl	80017d0 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b64      	cmp	r3, #100	; 0x64
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e280      	b.n	8002c50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800274e:	4baf      	ldr	r3, [pc, #700]	; (8002a0c <HAL_RCC_OscConfig+0x578>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0x2a8>
 800275a:	e014      	b.n	8002786 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275c:	f7ff f838 	bl	80017d0 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002764:	f7ff f834 	bl	80017d0 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b64      	cmp	r3, #100	; 0x64
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e26c      	b.n	8002c50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002776:	4ba5      	ldr	r3, [pc, #660]	; (8002a0c <HAL_RCC_OscConfig+0x578>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0x2d0>
 8002782:	e000      	b.n	8002786 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d060      	beq.n	8002854 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	2b04      	cmp	r3, #4
 8002796:	d005      	beq.n	80027a4 <HAL_RCC_OscConfig+0x310>
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	2b0c      	cmp	r3, #12
 800279c:	d119      	bne.n	80027d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d116      	bne.n	80027d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027a4:	4b99      	ldr	r3, [pc, #612]	; (8002a0c <HAL_RCC_OscConfig+0x578>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <HAL_RCC_OscConfig+0x328>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e249      	b.n	8002c50 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027bc:	4b93      	ldr	r3, [pc, #588]	; (8002a0c <HAL_RCC_OscConfig+0x578>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	061b      	lsls	r3, r3, #24
 80027ca:	4990      	ldr	r1, [pc, #576]	; (8002a0c <HAL_RCC_OscConfig+0x578>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027d0:	e040      	b.n	8002854 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d023      	beq.n	8002822 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027da:	4b8c      	ldr	r3, [pc, #560]	; (8002a0c <HAL_RCC_OscConfig+0x578>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a8b      	ldr	r2, [pc, #556]	; (8002a0c <HAL_RCC_OscConfig+0x578>)
 80027e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e6:	f7fe fff3 	bl	80017d0 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ee:	f7fe ffef 	bl	80017d0 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e227      	b.n	8002c50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002800:	4b82      	ldr	r3, [pc, #520]	; (8002a0c <HAL_RCC_OscConfig+0x578>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0f0      	beq.n	80027ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280c:	4b7f      	ldr	r3, [pc, #508]	; (8002a0c <HAL_RCC_OscConfig+0x578>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	061b      	lsls	r3, r3, #24
 800281a:	497c      	ldr	r1, [pc, #496]	; (8002a0c <HAL_RCC_OscConfig+0x578>)
 800281c:	4313      	orrs	r3, r2
 800281e:	604b      	str	r3, [r1, #4]
 8002820:	e018      	b.n	8002854 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002822:	4b7a      	ldr	r3, [pc, #488]	; (8002a0c <HAL_RCC_OscConfig+0x578>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a79      	ldr	r2, [pc, #484]	; (8002a0c <HAL_RCC_OscConfig+0x578>)
 8002828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800282c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282e:	f7fe ffcf 	bl	80017d0 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002836:	f7fe ffcb 	bl	80017d0 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e203      	b.n	8002c50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002848:	4b70      	ldr	r3, [pc, #448]	; (8002a0c <HAL_RCC_OscConfig+0x578>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1f0      	bne.n	8002836 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0308 	and.w	r3, r3, #8
 800285c:	2b00      	cmp	r3, #0
 800285e:	d03c      	beq.n	80028da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d01c      	beq.n	80028a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002868:	4b68      	ldr	r3, [pc, #416]	; (8002a0c <HAL_RCC_OscConfig+0x578>)
 800286a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800286e:	4a67      	ldr	r2, [pc, #412]	; (8002a0c <HAL_RCC_OscConfig+0x578>)
 8002870:	f043 0301 	orr.w	r3, r3, #1
 8002874:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002878:	f7fe ffaa 	bl	80017d0 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002880:	f7fe ffa6 	bl	80017d0 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e1de      	b.n	8002c50 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002892:	4b5e      	ldr	r3, [pc, #376]	; (8002a0c <HAL_RCC_OscConfig+0x578>)
 8002894:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0ef      	beq.n	8002880 <HAL_RCC_OscConfig+0x3ec>
 80028a0:	e01b      	b.n	80028da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a2:	4b5a      	ldr	r3, [pc, #360]	; (8002a0c <HAL_RCC_OscConfig+0x578>)
 80028a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028a8:	4a58      	ldr	r2, [pc, #352]	; (8002a0c <HAL_RCC_OscConfig+0x578>)
 80028aa:	f023 0301 	bic.w	r3, r3, #1
 80028ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b2:	f7fe ff8d 	bl	80017d0 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ba:	f7fe ff89 	bl	80017d0 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e1c1      	b.n	8002c50 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028cc:	4b4f      	ldr	r3, [pc, #316]	; (8002a0c <HAL_RCC_OscConfig+0x578>)
 80028ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1ef      	bne.n	80028ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0304 	and.w	r3, r3, #4
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 80a6 	beq.w	8002a34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028e8:	2300      	movs	r3, #0
 80028ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80028ec:	4b47      	ldr	r3, [pc, #284]	; (8002a0c <HAL_RCC_OscConfig+0x578>)
 80028ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10d      	bne.n	8002914 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f8:	4b44      	ldr	r3, [pc, #272]	; (8002a0c <HAL_RCC_OscConfig+0x578>)
 80028fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fc:	4a43      	ldr	r2, [pc, #268]	; (8002a0c <HAL_RCC_OscConfig+0x578>)
 80028fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002902:	6593      	str	r3, [r2, #88]	; 0x58
 8002904:	4b41      	ldr	r3, [pc, #260]	; (8002a0c <HAL_RCC_OscConfig+0x578>)
 8002906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002910:	2301      	movs	r3, #1
 8002912:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002914:	4b3e      	ldr	r3, [pc, #248]	; (8002a10 <HAL_RCC_OscConfig+0x57c>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291c:	2b00      	cmp	r3, #0
 800291e:	d118      	bne.n	8002952 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002920:	4b3b      	ldr	r3, [pc, #236]	; (8002a10 <HAL_RCC_OscConfig+0x57c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a3a      	ldr	r2, [pc, #232]	; (8002a10 <HAL_RCC_OscConfig+0x57c>)
 8002926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800292c:	f7fe ff50 	bl	80017d0 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002934:	f7fe ff4c 	bl	80017d0 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e184      	b.n	8002c50 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002946:	4b32      	ldr	r3, [pc, #200]	; (8002a10 <HAL_RCC_OscConfig+0x57c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d108      	bne.n	800296c <HAL_RCC_OscConfig+0x4d8>
 800295a:	4b2c      	ldr	r3, [pc, #176]	; (8002a0c <HAL_RCC_OscConfig+0x578>)
 800295c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002960:	4a2a      	ldr	r2, [pc, #168]	; (8002a0c <HAL_RCC_OscConfig+0x578>)
 8002962:	f043 0301 	orr.w	r3, r3, #1
 8002966:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800296a:	e024      	b.n	80029b6 <HAL_RCC_OscConfig+0x522>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2b05      	cmp	r3, #5
 8002972:	d110      	bne.n	8002996 <HAL_RCC_OscConfig+0x502>
 8002974:	4b25      	ldr	r3, [pc, #148]	; (8002a0c <HAL_RCC_OscConfig+0x578>)
 8002976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297a:	4a24      	ldr	r2, [pc, #144]	; (8002a0c <HAL_RCC_OscConfig+0x578>)
 800297c:	f043 0304 	orr.w	r3, r3, #4
 8002980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002984:	4b21      	ldr	r3, [pc, #132]	; (8002a0c <HAL_RCC_OscConfig+0x578>)
 8002986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298a:	4a20      	ldr	r2, [pc, #128]	; (8002a0c <HAL_RCC_OscConfig+0x578>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002994:	e00f      	b.n	80029b6 <HAL_RCC_OscConfig+0x522>
 8002996:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <HAL_RCC_OscConfig+0x578>)
 8002998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299c:	4a1b      	ldr	r2, [pc, #108]	; (8002a0c <HAL_RCC_OscConfig+0x578>)
 800299e:	f023 0301 	bic.w	r3, r3, #1
 80029a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029a6:	4b19      	ldr	r3, [pc, #100]	; (8002a0c <HAL_RCC_OscConfig+0x578>)
 80029a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ac:	4a17      	ldr	r2, [pc, #92]	; (8002a0c <HAL_RCC_OscConfig+0x578>)
 80029ae:	f023 0304 	bic.w	r3, r3, #4
 80029b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d016      	beq.n	80029ec <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029be:	f7fe ff07 	bl	80017d0 <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029c4:	e00a      	b.n	80029dc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c6:	f7fe ff03 	bl	80017d0 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e139      	b.n	8002c50 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_RCC_OscConfig+0x578>)
 80029de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0ed      	beq.n	80029c6 <HAL_RCC_OscConfig+0x532>
 80029ea:	e01a      	b.n	8002a22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ec:	f7fe fef0 	bl	80017d0 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029f2:	e00f      	b.n	8002a14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f4:	f7fe feec 	bl	80017d0 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d906      	bls.n	8002a14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e122      	b.n	8002c50 <HAL_RCC_OscConfig+0x7bc>
 8002a0a:	bf00      	nop
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a14:	4b90      	ldr	r3, [pc, #576]	; (8002c58 <HAL_RCC_OscConfig+0x7c4>)
 8002a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1e8      	bne.n	80029f4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a22:	7ffb      	ldrb	r3, [r7, #31]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d105      	bne.n	8002a34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a28:	4b8b      	ldr	r3, [pc, #556]	; (8002c58 <HAL_RCC_OscConfig+0x7c4>)
 8002a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2c:	4a8a      	ldr	r2, [pc, #552]	; (8002c58 <HAL_RCC_OscConfig+0x7c4>)
 8002a2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a32:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 8108 	beq.w	8002c4e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	f040 80d0 	bne.w	8002be8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a48:	4b83      	ldr	r3, [pc, #524]	; (8002c58 <HAL_RCC_OscConfig+0x7c4>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f003 0203 	and.w	r2, r3, #3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d130      	bne.n	8002abe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	3b01      	subs	r3, #1
 8002a68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d127      	bne.n	8002abe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a78:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d11f      	bne.n	8002abe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a88:	2a07      	cmp	r2, #7
 8002a8a:	bf14      	ite	ne
 8002a8c:	2201      	movne	r2, #1
 8002a8e:	2200      	moveq	r2, #0
 8002a90:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d113      	bne.n	8002abe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa0:	085b      	lsrs	r3, r3, #1
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d109      	bne.n	8002abe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	085b      	lsrs	r3, r3, #1
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d06e      	beq.n	8002b9c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	2b0c      	cmp	r3, #12
 8002ac2:	d069      	beq.n	8002b98 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ac4:	4b64      	ldr	r3, [pc, #400]	; (8002c58 <HAL_RCC_OscConfig+0x7c4>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d105      	bne.n	8002adc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ad0:	4b61      	ldr	r3, [pc, #388]	; (8002c58 <HAL_RCC_OscConfig+0x7c4>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e0b7      	b.n	8002c50 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ae0:	4b5d      	ldr	r3, [pc, #372]	; (8002c58 <HAL_RCC_OscConfig+0x7c4>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a5c      	ldr	r2, [pc, #368]	; (8002c58 <HAL_RCC_OscConfig+0x7c4>)
 8002ae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002aec:	f7fe fe70 	bl	80017d0 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af4:	f7fe fe6c 	bl	80017d0 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e0a4      	b.n	8002c50 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b06:	4b54      	ldr	r3, [pc, #336]	; (8002c58 <HAL_RCC_OscConfig+0x7c4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b12:	4b51      	ldr	r3, [pc, #324]	; (8002c58 <HAL_RCC_OscConfig+0x7c4>)
 8002b14:	68da      	ldr	r2, [r3, #12]
 8002b16:	4b51      	ldr	r3, [pc, #324]	; (8002c5c <HAL_RCC_OscConfig+0x7c8>)
 8002b18:	4013      	ands	r3, r2
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b22:	3a01      	subs	r2, #1
 8002b24:	0112      	lsls	r2, r2, #4
 8002b26:	4311      	orrs	r1, r2
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b2c:	0212      	lsls	r2, r2, #8
 8002b2e:	4311      	orrs	r1, r2
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b34:	0852      	lsrs	r2, r2, #1
 8002b36:	3a01      	subs	r2, #1
 8002b38:	0552      	lsls	r2, r2, #21
 8002b3a:	4311      	orrs	r1, r2
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b40:	0852      	lsrs	r2, r2, #1
 8002b42:	3a01      	subs	r2, #1
 8002b44:	0652      	lsls	r2, r2, #25
 8002b46:	4311      	orrs	r1, r2
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b4c:	0912      	lsrs	r2, r2, #4
 8002b4e:	0452      	lsls	r2, r2, #17
 8002b50:	430a      	orrs	r2, r1
 8002b52:	4941      	ldr	r1, [pc, #260]	; (8002c58 <HAL_RCC_OscConfig+0x7c4>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b58:	4b3f      	ldr	r3, [pc, #252]	; (8002c58 <HAL_RCC_OscConfig+0x7c4>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a3e      	ldr	r2, [pc, #248]	; (8002c58 <HAL_RCC_OscConfig+0x7c4>)
 8002b5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b62:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b64:	4b3c      	ldr	r3, [pc, #240]	; (8002c58 <HAL_RCC_OscConfig+0x7c4>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	4a3b      	ldr	r2, [pc, #236]	; (8002c58 <HAL_RCC_OscConfig+0x7c4>)
 8002b6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b70:	f7fe fe2e 	bl	80017d0 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b78:	f7fe fe2a 	bl	80017d0 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e062      	b.n	8002c50 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b8a:	4b33      	ldr	r3, [pc, #204]	; (8002c58 <HAL_RCC_OscConfig+0x7c4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b96:	e05a      	b.n	8002c4e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e059      	b.n	8002c50 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b9c:	4b2e      	ldr	r3, [pc, #184]	; (8002c58 <HAL_RCC_OscConfig+0x7c4>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d152      	bne.n	8002c4e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ba8:	4b2b      	ldr	r3, [pc, #172]	; (8002c58 <HAL_RCC_OscConfig+0x7c4>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a2a      	ldr	r2, [pc, #168]	; (8002c58 <HAL_RCC_OscConfig+0x7c4>)
 8002bae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bb2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bb4:	4b28      	ldr	r3, [pc, #160]	; (8002c58 <HAL_RCC_OscConfig+0x7c4>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	4a27      	ldr	r2, [pc, #156]	; (8002c58 <HAL_RCC_OscConfig+0x7c4>)
 8002bba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bbe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bc0:	f7fe fe06 	bl	80017d0 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc8:	f7fe fe02 	bl	80017d0 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e03a      	b.n	8002c50 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bda:	4b1f      	ldr	r3, [pc, #124]	; (8002c58 <HAL_RCC_OscConfig+0x7c4>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0f0      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x734>
 8002be6:	e032      	b.n	8002c4e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	2b0c      	cmp	r3, #12
 8002bec:	d02d      	beq.n	8002c4a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bee:	4b1a      	ldr	r3, [pc, #104]	; (8002c58 <HAL_RCC_OscConfig+0x7c4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a19      	ldr	r2, [pc, #100]	; (8002c58 <HAL_RCC_OscConfig+0x7c4>)
 8002bf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bf8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002bfa:	4b17      	ldr	r3, [pc, #92]	; (8002c58 <HAL_RCC_OscConfig+0x7c4>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d105      	bne.n	8002c12 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002c06:	4b14      	ldr	r3, [pc, #80]	; (8002c58 <HAL_RCC_OscConfig+0x7c4>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	4a13      	ldr	r2, [pc, #76]	; (8002c58 <HAL_RCC_OscConfig+0x7c4>)
 8002c0c:	f023 0303 	bic.w	r3, r3, #3
 8002c10:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c12:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <HAL_RCC_OscConfig+0x7c4>)
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	4a10      	ldr	r2, [pc, #64]	; (8002c58 <HAL_RCC_OscConfig+0x7c4>)
 8002c18:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c20:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c22:	f7fe fdd5 	bl	80017d0 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2a:	f7fe fdd1 	bl	80017d0 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e009      	b.n	8002c50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c3c:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <HAL_RCC_OscConfig+0x7c4>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1f0      	bne.n	8002c2a <HAL_RCC_OscConfig+0x796>
 8002c48:	e001      	b.n	8002c4e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3720      	adds	r7, #32
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	f99d808c 	.word	0xf99d808c

08002c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e0c8      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c74:	4b66      	ldr	r3, [pc, #408]	; (8002e10 <HAL_RCC_ClockConfig+0x1b0>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d910      	bls.n	8002ca4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c82:	4b63      	ldr	r3, [pc, #396]	; (8002e10 <HAL_RCC_ClockConfig+0x1b0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f023 0207 	bic.w	r2, r3, #7
 8002c8a:	4961      	ldr	r1, [pc, #388]	; (8002e10 <HAL_RCC_ClockConfig+0x1b0>)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c92:	4b5f      	ldr	r3, [pc, #380]	; (8002e10 <HAL_RCC_ClockConfig+0x1b0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d001      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e0b0      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d04c      	beq.n	8002d4a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b03      	cmp	r3, #3
 8002cb6:	d107      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cb8:	4b56      	ldr	r3, [pc, #344]	; (8002e14 <HAL_RCC_ClockConfig+0x1b4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d121      	bne.n	8002d08 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e09e      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d107      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cd0:	4b50      	ldr	r3, [pc, #320]	; (8002e14 <HAL_RCC_ClockConfig+0x1b4>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d115      	bne.n	8002d08 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e092      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d107      	bne.n	8002cf8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ce8:	4b4a      	ldr	r3, [pc, #296]	; (8002e14 <HAL_RCC_ClockConfig+0x1b4>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d109      	bne.n	8002d08 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e086      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cf8:	4b46      	ldr	r3, [pc, #280]	; (8002e14 <HAL_RCC_ClockConfig+0x1b4>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e07e      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d08:	4b42      	ldr	r3, [pc, #264]	; (8002e14 <HAL_RCC_ClockConfig+0x1b4>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f023 0203 	bic.w	r2, r3, #3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	493f      	ldr	r1, [pc, #252]	; (8002e14 <HAL_RCC_ClockConfig+0x1b4>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d1a:	f7fe fd59 	bl	80017d0 <HAL_GetTick>
 8002d1e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d20:	e00a      	b.n	8002d38 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d22:	f7fe fd55 	bl	80017d0 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e066      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d38:	4b36      	ldr	r3, [pc, #216]	; (8002e14 <HAL_RCC_ClockConfig+0x1b4>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 020c 	and.w	r2, r3, #12
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d1eb      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d008      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d56:	4b2f      	ldr	r3, [pc, #188]	; (8002e14 <HAL_RCC_ClockConfig+0x1b4>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	492c      	ldr	r1, [pc, #176]	; (8002e14 <HAL_RCC_ClockConfig+0x1b4>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d68:	4b29      	ldr	r3, [pc, #164]	; (8002e10 <HAL_RCC_ClockConfig+0x1b0>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d210      	bcs.n	8002d98 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d76:	4b26      	ldr	r3, [pc, #152]	; (8002e10 <HAL_RCC_ClockConfig+0x1b0>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f023 0207 	bic.w	r2, r3, #7
 8002d7e:	4924      	ldr	r1, [pc, #144]	; (8002e10 <HAL_RCC_ClockConfig+0x1b0>)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d86:	4b22      	ldr	r3, [pc, #136]	; (8002e10 <HAL_RCC_ClockConfig+0x1b0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d001      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e036      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d008      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002da4:	4b1b      	ldr	r3, [pc, #108]	; (8002e14 <HAL_RCC_ClockConfig+0x1b4>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	4918      	ldr	r1, [pc, #96]	; (8002e14 <HAL_RCC_ClockConfig+0x1b4>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d009      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dc2:	4b14      	ldr	r3, [pc, #80]	; (8002e14 <HAL_RCC_ClockConfig+0x1b4>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4910      	ldr	r1, [pc, #64]	; (8002e14 <HAL_RCC_ClockConfig+0x1b4>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dd6:	f000 f825 	bl	8002e24 <HAL_RCC_GetSysClockFreq>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	4b0d      	ldr	r3, [pc, #52]	; (8002e14 <HAL_RCC_ClockConfig+0x1b4>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	091b      	lsrs	r3, r3, #4
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	490c      	ldr	r1, [pc, #48]	; (8002e18 <HAL_RCC_ClockConfig+0x1b8>)
 8002de8:	5ccb      	ldrb	r3, [r1, r3]
 8002dea:	f003 031f 	and.w	r3, r3, #31
 8002dee:	fa22 f303 	lsr.w	r3, r2, r3
 8002df2:	4a0a      	ldr	r2, [pc, #40]	; (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002df6:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <HAL_RCC_ClockConfig+0x1c0>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fe fc98 	bl	8001730 <HAL_InitTick>
 8002e00:	4603      	mov	r3, r0
 8002e02:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e04:	7afb      	ldrb	r3, [r7, #11]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40022000 	.word	0x40022000
 8002e14:	40021000 	.word	0x40021000
 8002e18:	08009a20 	.word	0x08009a20
 8002e1c:	20000000 	.word	0x20000000
 8002e20:	20000004 	.word	0x20000004

08002e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b089      	sub	sp, #36	; 0x24
 8002e28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61fb      	str	r3, [r7, #28]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e32:	4b3e      	ldr	r3, [pc, #248]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 030c 	and.w	r3, r3, #12
 8002e3a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e3c:	4b3b      	ldr	r3, [pc, #236]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f003 0303 	and.w	r3, r3, #3
 8002e44:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <HAL_RCC_GetSysClockFreq+0x34>
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	2b0c      	cmp	r3, #12
 8002e50:	d121      	bne.n	8002e96 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d11e      	bne.n	8002e96 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e58:	4b34      	ldr	r3, [pc, #208]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d107      	bne.n	8002e74 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e64:	4b31      	ldr	r3, [pc, #196]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e6a:	0a1b      	lsrs	r3, r3, #8
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	61fb      	str	r3, [r7, #28]
 8002e72:	e005      	b.n	8002e80 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e74:	4b2d      	ldr	r3, [pc, #180]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	091b      	lsrs	r3, r3, #4
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e80:	4a2b      	ldr	r2, [pc, #172]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e88:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10d      	bne.n	8002eac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e94:	e00a      	b.n	8002eac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d102      	bne.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e9c:	4b25      	ldr	r3, [pc, #148]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e9e:	61bb      	str	r3, [r7, #24]
 8002ea0:	e004      	b.n	8002eac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d101      	bne.n	8002eac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ea8:	4b23      	ldr	r3, [pc, #140]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x114>)
 8002eaa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	2b0c      	cmp	r3, #12
 8002eb0:	d134      	bne.n	8002f1c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002eb2:	4b1e      	ldr	r3, [pc, #120]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d003      	beq.n	8002eca <HAL_RCC_GetSysClockFreq+0xa6>
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	2b03      	cmp	r3, #3
 8002ec6:	d003      	beq.n	8002ed0 <HAL_RCC_GetSysClockFreq+0xac>
 8002ec8:	e005      	b.n	8002ed6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002eca:	4b1a      	ldr	r3, [pc, #104]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ecc:	617b      	str	r3, [r7, #20]
      break;
 8002ece:	e005      	b.n	8002edc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ed0:	4b19      	ldr	r3, [pc, #100]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ed2:	617b      	str	r3, [r7, #20]
      break;
 8002ed4:	e002      	b.n	8002edc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	617b      	str	r3, [r7, #20]
      break;
 8002eda:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002edc:	4b13      	ldr	r3, [pc, #76]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	091b      	lsrs	r3, r3, #4
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002eea:	4b10      	ldr	r3, [pc, #64]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	0a1b      	lsrs	r3, r3, #8
 8002ef0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	fb02 f203 	mul.w	r2, r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f00:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f02:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	0e5b      	lsrs	r3, r3, #25
 8002f08:	f003 0303 	and.w	r3, r3, #3
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f1c:	69bb      	ldr	r3, [r7, #24]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3724      	adds	r7, #36	; 0x24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	08009a38 	.word	0x08009a38
 8002f34:	00f42400 	.word	0x00f42400
 8002f38:	007a1200 	.word	0x007a1200

08002f3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f40:	4b03      	ldr	r3, [pc, #12]	; (8002f50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f42:	681b      	ldr	r3, [r3, #0]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	20000000 	.word	0x20000000

08002f54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f58:	f7ff fff0 	bl	8002f3c <HAL_RCC_GetHCLKFreq>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	0a1b      	lsrs	r3, r3, #8
 8002f64:	f003 0307 	and.w	r3, r3, #7
 8002f68:	4904      	ldr	r1, [pc, #16]	; (8002f7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f6a:	5ccb      	ldrb	r3, [r1, r3]
 8002f6c:	f003 031f 	and.w	r3, r3, #31
 8002f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	08009a30 	.word	0x08009a30

08002f80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f84:	f7ff ffda 	bl	8002f3c <HAL_RCC_GetHCLKFreq>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	0adb      	lsrs	r3, r3, #11
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	4904      	ldr	r1, [pc, #16]	; (8002fa8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f96:	5ccb      	ldrb	r3, [r1, r3]
 8002f98:	f003 031f 	and.w	r3, r3, #31
 8002f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	08009a30 	.word	0x08009a30

08002fac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002fb8:	4b2a      	ldr	r3, [pc, #168]	; (8003064 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002fc4:	f7ff fa02 	bl	80023cc <HAL_PWREx_GetVoltageRange>
 8002fc8:	6178      	str	r0, [r7, #20]
 8002fca:	e014      	b.n	8002ff6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fcc:	4b25      	ldr	r3, [pc, #148]	; (8003064 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd0:	4a24      	ldr	r2, [pc, #144]	; (8003064 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd6:	6593      	str	r3, [r2, #88]	; 0x58
 8002fd8:	4b22      	ldr	r3, [pc, #136]	; (8003064 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002fe4:	f7ff f9f2 	bl	80023cc <HAL_PWREx_GetVoltageRange>
 8002fe8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002fea:	4b1e      	ldr	r3, [pc, #120]	; (8003064 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fee:	4a1d      	ldr	r2, [pc, #116]	; (8003064 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ffc:	d10b      	bne.n	8003016 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b80      	cmp	r3, #128	; 0x80
 8003002:	d919      	bls.n	8003038 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2ba0      	cmp	r3, #160	; 0xa0
 8003008:	d902      	bls.n	8003010 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800300a:	2302      	movs	r3, #2
 800300c:	613b      	str	r3, [r7, #16]
 800300e:	e013      	b.n	8003038 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003010:	2301      	movs	r3, #1
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	e010      	b.n	8003038 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b80      	cmp	r3, #128	; 0x80
 800301a:	d902      	bls.n	8003022 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800301c:	2303      	movs	r3, #3
 800301e:	613b      	str	r3, [r7, #16]
 8003020:	e00a      	b.n	8003038 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b80      	cmp	r3, #128	; 0x80
 8003026:	d102      	bne.n	800302e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003028:	2302      	movs	r3, #2
 800302a:	613b      	str	r3, [r7, #16]
 800302c:	e004      	b.n	8003038 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b70      	cmp	r3, #112	; 0x70
 8003032:	d101      	bne.n	8003038 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003034:	2301      	movs	r3, #1
 8003036:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003038:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f023 0207 	bic.w	r2, r3, #7
 8003040:	4909      	ldr	r1, [pc, #36]	; (8003068 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003048:	4b07      	ldr	r3, [pc, #28]	; (8003068 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	429a      	cmp	r2, r3
 8003054:	d001      	beq.n	800305a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e000      	b.n	800305c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3718      	adds	r7, #24
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40021000 	.word	0x40021000
 8003068:	40022000 	.word	0x40022000

0800306c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003074:	2300      	movs	r3, #0
 8003076:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003078:	2300      	movs	r3, #0
 800307a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003084:	2b00      	cmp	r3, #0
 8003086:	d041      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800308c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003090:	d02a      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003092:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003096:	d824      	bhi.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003098:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800309c:	d008      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800309e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030a2:	d81e      	bhi.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00a      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80030a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030ac:	d010      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030ae:	e018      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030b0:	4b86      	ldr	r3, [pc, #536]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	4a85      	ldr	r2, [pc, #532]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030bc:	e015      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3304      	adds	r3, #4
 80030c2:	2100      	movs	r1, #0
 80030c4:	4618      	mov	r0, r3
 80030c6:	f000 fabb 	bl	8003640 <RCCEx_PLLSAI1_Config>
 80030ca:	4603      	mov	r3, r0
 80030cc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030ce:	e00c      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3320      	adds	r3, #32
 80030d4:	2100      	movs	r1, #0
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 fba6 	bl	8003828 <RCCEx_PLLSAI2_Config>
 80030dc:	4603      	mov	r3, r0
 80030de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030e0:	e003      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	74fb      	strb	r3, [r7, #19]
      break;
 80030e6:	e000      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80030e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030ea:	7cfb      	ldrb	r3, [r7, #19]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10b      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030f0:	4b76      	ldr	r3, [pc, #472]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030fe:	4973      	ldr	r1, [pc, #460]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003100:	4313      	orrs	r3, r2
 8003102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003106:	e001      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003108:	7cfb      	ldrb	r3, [r7, #19]
 800310a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d041      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800311c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003120:	d02a      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003122:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003126:	d824      	bhi.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003128:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800312c:	d008      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800312e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003132:	d81e      	bhi.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00a      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800313c:	d010      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800313e:	e018      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003140:	4b62      	ldr	r3, [pc, #392]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	4a61      	ldr	r2, [pc, #388]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800314c:	e015      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	3304      	adds	r3, #4
 8003152:	2100      	movs	r1, #0
 8003154:	4618      	mov	r0, r3
 8003156:	f000 fa73 	bl	8003640 <RCCEx_PLLSAI1_Config>
 800315a:	4603      	mov	r3, r0
 800315c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800315e:	e00c      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3320      	adds	r3, #32
 8003164:	2100      	movs	r1, #0
 8003166:	4618      	mov	r0, r3
 8003168:	f000 fb5e 	bl	8003828 <RCCEx_PLLSAI2_Config>
 800316c:	4603      	mov	r3, r0
 800316e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003170:	e003      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	74fb      	strb	r3, [r7, #19]
      break;
 8003176:	e000      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003178:	bf00      	nop
    }

    if(ret == HAL_OK)
 800317a:	7cfb      	ldrb	r3, [r7, #19]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10b      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003180:	4b52      	ldr	r3, [pc, #328]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003186:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800318e:	494f      	ldr	r1, [pc, #316]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003190:	4313      	orrs	r3, r2
 8003192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003196:	e001      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003198:	7cfb      	ldrb	r3, [r7, #19]
 800319a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 80a0 	beq.w	80032ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031aa:	2300      	movs	r3, #0
 80031ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031ae:	4b47      	ldr	r3, [pc, #284]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x152>
 80031ba:	2301      	movs	r3, #1
 80031bc:	e000      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80031be:	2300      	movs	r3, #0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00d      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c4:	4b41      	ldr	r3, [pc, #260]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c8:	4a40      	ldr	r2, [pc, #256]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ce:	6593      	str	r3, [r2, #88]	; 0x58
 80031d0:	4b3e      	ldr	r3, [pc, #248]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d8:	60bb      	str	r3, [r7, #8]
 80031da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031dc:	2301      	movs	r3, #1
 80031de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031e0:	4b3b      	ldr	r3, [pc, #236]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a3a      	ldr	r2, [pc, #232]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031ec:	f7fe faf0 	bl	80017d0 <HAL_GetTick>
 80031f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031f2:	e009      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f4:	f7fe faec 	bl	80017d0 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d902      	bls.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	74fb      	strb	r3, [r7, #19]
        break;
 8003206:	e005      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003208:	4b31      	ldr	r3, [pc, #196]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0ef      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003214:	7cfb      	ldrb	r3, [r7, #19]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d15c      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800321a:	4b2c      	ldr	r3, [pc, #176]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800321c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003220:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003224:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d01f      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	429a      	cmp	r2, r3
 8003236:	d019      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003238:	4b24      	ldr	r3, [pc, #144]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800323a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003242:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003244:	4b21      	ldr	r3, [pc, #132]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324a:	4a20      	ldr	r2, [pc, #128]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003254:	4b1d      	ldr	r3, [pc, #116]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325a:	4a1c      	ldr	r2, [pc, #112]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003264:	4a19      	ldr	r2, [pc, #100]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d016      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003276:	f7fe faab 	bl	80017d0 <HAL_GetTick>
 800327a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800327c:	e00b      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327e:	f7fe faa7 	bl	80017d0 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	f241 3288 	movw	r2, #5000	; 0x1388
 800328c:	4293      	cmp	r3, r2
 800328e:	d902      	bls.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	74fb      	strb	r3, [r7, #19]
            break;
 8003294:	e006      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003296:	4b0d      	ldr	r3, [pc, #52]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0ec      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80032a4:	7cfb      	ldrb	r3, [r7, #19]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10c      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032aa:	4b08      	ldr	r3, [pc, #32]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ba:	4904      	ldr	r1, [pc, #16]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032c2:	e009      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032c4:	7cfb      	ldrb	r3, [r7, #19]
 80032c6:	74bb      	strb	r3, [r7, #18]
 80032c8:	e006      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80032ca:	bf00      	nop
 80032cc:	40021000 	.word	0x40021000
 80032d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d4:	7cfb      	ldrb	r3, [r7, #19]
 80032d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032d8:	7c7b      	ldrb	r3, [r7, #17]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d105      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032de:	4b9e      	ldr	r3, [pc, #632]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e2:	4a9d      	ldr	r2, [pc, #628]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032f6:	4b98      	ldr	r3, [pc, #608]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fc:	f023 0203 	bic.w	r2, r3, #3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003304:	4994      	ldr	r1, [pc, #592]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003306:	4313      	orrs	r3, r2
 8003308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00a      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003318:	4b8f      	ldr	r3, [pc, #572]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331e:	f023 020c 	bic.w	r2, r3, #12
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003326:	498c      	ldr	r1, [pc, #560]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003328:	4313      	orrs	r3, r2
 800332a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0304 	and.w	r3, r3, #4
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800333a:	4b87      	ldr	r3, [pc, #540]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003340:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	4983      	ldr	r1, [pc, #524]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334a:	4313      	orrs	r3, r2
 800334c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0308 	and.w	r3, r3, #8
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00a      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800335c:	4b7e      	ldr	r3, [pc, #504]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003362:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	497b      	ldr	r1, [pc, #492]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336c:	4313      	orrs	r3, r2
 800336e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0310 	and.w	r3, r3, #16
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00a      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800337e:	4b76      	ldr	r3, [pc, #472]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003384:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800338c:	4972      	ldr	r1, [pc, #456]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338e:	4313      	orrs	r3, r2
 8003390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0320 	and.w	r3, r3, #32
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00a      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033a0:	4b6d      	ldr	r3, [pc, #436]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ae:	496a      	ldr	r1, [pc, #424]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033c2:	4b65      	ldr	r3, [pc, #404]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d0:	4961      	ldr	r1, [pc, #388]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00a      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033e4:	4b5c      	ldr	r3, [pc, #368]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f2:	4959      	ldr	r1, [pc, #356]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00a      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003406:	4b54      	ldr	r3, [pc, #336]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003414:	4950      	ldr	r1, [pc, #320]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003416:	4313      	orrs	r3, r2
 8003418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00a      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003428:	4b4b      	ldr	r3, [pc, #300]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003436:	4948      	ldr	r1, [pc, #288]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003438:	4313      	orrs	r3, r2
 800343a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800344a:	4b43      	ldr	r3, [pc, #268]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003450:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003458:	493f      	ldr	r1, [pc, #252]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345a:	4313      	orrs	r3, r2
 800345c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d028      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800346c:	4b3a      	ldr	r3, [pc, #232]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003472:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800347a:	4937      	ldr	r1, [pc, #220]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347c:	4313      	orrs	r3, r2
 800347e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003486:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800348a:	d106      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800348c:	4b32      	ldr	r3, [pc, #200]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	4a31      	ldr	r2, [pc, #196]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003492:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003496:	60d3      	str	r3, [r2, #12]
 8003498:	e011      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800349e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034a2:	d10c      	bne.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3304      	adds	r3, #4
 80034a8:	2101      	movs	r1, #1
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 f8c8 	bl	8003640 <RCCEx_PLLSAI1_Config>
 80034b0:	4603      	mov	r3, r0
 80034b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80034b4:	7cfb      	ldrb	r3, [r7, #19]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80034ba:	7cfb      	ldrb	r3, [r7, #19]
 80034bc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d028      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034ca:	4b23      	ldr	r3, [pc, #140]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d8:	491f      	ldr	r1, [pc, #124]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034e8:	d106      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034ea:	4b1b      	ldr	r3, [pc, #108]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	4a1a      	ldr	r2, [pc, #104]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034f4:	60d3      	str	r3, [r2, #12]
 80034f6:	e011      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003500:	d10c      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	3304      	adds	r3, #4
 8003506:	2101      	movs	r1, #1
 8003508:	4618      	mov	r0, r3
 800350a:	f000 f899 	bl	8003640 <RCCEx_PLLSAI1_Config>
 800350e:	4603      	mov	r3, r0
 8003510:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003512:	7cfb      	ldrb	r3, [r7, #19]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003518:	7cfb      	ldrb	r3, [r7, #19]
 800351a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d02b      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003528:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003536:	4908      	ldr	r1, [pc, #32]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003538:	4313      	orrs	r3, r2
 800353a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003542:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003546:	d109      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003548:	4b03      	ldr	r3, [pc, #12]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	4a02      	ldr	r2, [pc, #8]	; (8003558 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003552:	60d3      	str	r3, [r2, #12]
 8003554:	e014      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003556:	bf00      	nop
 8003558:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003560:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003564:	d10c      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3304      	adds	r3, #4
 800356a:	2101      	movs	r1, #1
 800356c:	4618      	mov	r0, r3
 800356e:	f000 f867 	bl	8003640 <RCCEx_PLLSAI1_Config>
 8003572:	4603      	mov	r3, r0
 8003574:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003576:	7cfb      	ldrb	r3, [r7, #19]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800357c:	7cfb      	ldrb	r3, [r7, #19]
 800357e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d02f      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800358c:	4b2b      	ldr	r3, [pc, #172]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800358e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003592:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800359a:	4928      	ldr	r1, [pc, #160]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035aa:	d10d      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3304      	adds	r3, #4
 80035b0:	2102      	movs	r1, #2
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 f844 	bl	8003640 <RCCEx_PLLSAI1_Config>
 80035b8:	4603      	mov	r3, r0
 80035ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035bc:	7cfb      	ldrb	r3, [r7, #19]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d014      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035c2:	7cfb      	ldrb	r3, [r7, #19]
 80035c4:	74bb      	strb	r3, [r7, #18]
 80035c6:	e011      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035d0:	d10c      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	3320      	adds	r3, #32
 80035d6:	2102      	movs	r1, #2
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 f925 	bl	8003828 <RCCEx_PLLSAI2_Config>
 80035de:	4603      	mov	r3, r0
 80035e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035e2:	7cfb      	ldrb	r3, [r7, #19]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035e8:	7cfb      	ldrb	r3, [r7, #19]
 80035ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00a      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035f8:	4b10      	ldr	r3, [pc, #64]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003606:	490d      	ldr	r1, [pc, #52]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00b      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800361a:	4b08      	ldr	r3, [pc, #32]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800361c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003620:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800362a:	4904      	ldr	r1, [pc, #16]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800362c:	4313      	orrs	r3, r2
 800362e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003632:	7cbb      	ldrb	r3, [r7, #18]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40021000 	.word	0x40021000

08003640 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800364e:	4b75      	ldr	r3, [pc, #468]	; (8003824 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d018      	beq.n	800368c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800365a:	4b72      	ldr	r3, [pc, #456]	; (8003824 <RCCEx_PLLSAI1_Config+0x1e4>)
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f003 0203 	and.w	r2, r3, #3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	429a      	cmp	r2, r3
 8003668:	d10d      	bne.n	8003686 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
       ||
 800366e:	2b00      	cmp	r3, #0
 8003670:	d009      	beq.n	8003686 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003672:	4b6c      	ldr	r3, [pc, #432]	; (8003824 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	091b      	lsrs	r3, r3, #4
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	1c5a      	adds	r2, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
       ||
 8003682:	429a      	cmp	r2, r3
 8003684:	d047      	beq.n	8003716 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	73fb      	strb	r3, [r7, #15]
 800368a:	e044      	b.n	8003716 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b03      	cmp	r3, #3
 8003692:	d018      	beq.n	80036c6 <RCCEx_PLLSAI1_Config+0x86>
 8003694:	2b03      	cmp	r3, #3
 8003696:	d825      	bhi.n	80036e4 <RCCEx_PLLSAI1_Config+0xa4>
 8003698:	2b01      	cmp	r3, #1
 800369a:	d002      	beq.n	80036a2 <RCCEx_PLLSAI1_Config+0x62>
 800369c:	2b02      	cmp	r3, #2
 800369e:	d009      	beq.n	80036b4 <RCCEx_PLLSAI1_Config+0x74>
 80036a0:	e020      	b.n	80036e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036a2:	4b60      	ldr	r3, [pc, #384]	; (8003824 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d11d      	bne.n	80036ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036b2:	e01a      	b.n	80036ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036b4:	4b5b      	ldr	r3, [pc, #364]	; (8003824 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d116      	bne.n	80036ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036c4:	e013      	b.n	80036ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036c6:	4b57      	ldr	r3, [pc, #348]	; (8003824 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10f      	bne.n	80036f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036d2:	4b54      	ldr	r3, [pc, #336]	; (8003824 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d109      	bne.n	80036f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036e2:	e006      	b.n	80036f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	73fb      	strb	r3, [r7, #15]
      break;
 80036e8:	e004      	b.n	80036f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036ea:	bf00      	nop
 80036ec:	e002      	b.n	80036f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036ee:	bf00      	nop
 80036f0:	e000      	b.n	80036f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10d      	bne.n	8003716 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036fa:	4b4a      	ldr	r3, [pc, #296]	; (8003824 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6819      	ldr	r1, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	3b01      	subs	r3, #1
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	430b      	orrs	r3, r1
 8003710:	4944      	ldr	r1, [pc, #272]	; (8003824 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003712:	4313      	orrs	r3, r2
 8003714:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003716:	7bfb      	ldrb	r3, [r7, #15]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d17d      	bne.n	8003818 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800371c:	4b41      	ldr	r3, [pc, #260]	; (8003824 <RCCEx_PLLSAI1_Config+0x1e4>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a40      	ldr	r2, [pc, #256]	; (8003824 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003722:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003726:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003728:	f7fe f852 	bl	80017d0 <HAL_GetTick>
 800372c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800372e:	e009      	b.n	8003744 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003730:	f7fe f84e 	bl	80017d0 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d902      	bls.n	8003744 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	73fb      	strb	r3, [r7, #15]
        break;
 8003742:	e005      	b.n	8003750 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003744:	4b37      	ldr	r3, [pc, #220]	; (8003824 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1ef      	bne.n	8003730 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003750:	7bfb      	ldrb	r3, [r7, #15]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d160      	bne.n	8003818 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d111      	bne.n	8003780 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800375c:	4b31      	ldr	r3, [pc, #196]	; (8003824 <RCCEx_PLLSAI1_Config+0x1e4>)
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6892      	ldr	r2, [r2, #8]
 800376c:	0211      	lsls	r1, r2, #8
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	68d2      	ldr	r2, [r2, #12]
 8003772:	0912      	lsrs	r2, r2, #4
 8003774:	0452      	lsls	r2, r2, #17
 8003776:	430a      	orrs	r2, r1
 8003778:	492a      	ldr	r1, [pc, #168]	; (8003824 <RCCEx_PLLSAI1_Config+0x1e4>)
 800377a:	4313      	orrs	r3, r2
 800377c:	610b      	str	r3, [r1, #16]
 800377e:	e027      	b.n	80037d0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d112      	bne.n	80037ac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003786:	4b27      	ldr	r3, [pc, #156]	; (8003824 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800378e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6892      	ldr	r2, [r2, #8]
 8003796:	0211      	lsls	r1, r2, #8
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6912      	ldr	r2, [r2, #16]
 800379c:	0852      	lsrs	r2, r2, #1
 800379e:	3a01      	subs	r2, #1
 80037a0:	0552      	lsls	r2, r2, #21
 80037a2:	430a      	orrs	r2, r1
 80037a4:	491f      	ldr	r1, [pc, #124]	; (8003824 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	610b      	str	r3, [r1, #16]
 80037aa:	e011      	b.n	80037d0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037ac:	4b1d      	ldr	r3, [pc, #116]	; (8003824 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6892      	ldr	r2, [r2, #8]
 80037bc:	0211      	lsls	r1, r2, #8
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6952      	ldr	r2, [r2, #20]
 80037c2:	0852      	lsrs	r2, r2, #1
 80037c4:	3a01      	subs	r2, #1
 80037c6:	0652      	lsls	r2, r2, #25
 80037c8:	430a      	orrs	r2, r1
 80037ca:	4916      	ldr	r1, [pc, #88]	; (8003824 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80037d0:	4b14      	ldr	r3, [pc, #80]	; (8003824 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a13      	ldr	r2, [pc, #76]	; (8003824 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037dc:	f7fd fff8 	bl	80017d0 <HAL_GetTick>
 80037e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037e2:	e009      	b.n	80037f8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037e4:	f7fd fff4 	bl	80017d0 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d902      	bls.n	80037f8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	73fb      	strb	r3, [r7, #15]
          break;
 80037f6:	e005      	b.n	8003804 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037f8:	4b0a      	ldr	r3, [pc, #40]	; (8003824 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0ef      	beq.n	80037e4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003804:	7bfb      	ldrb	r3, [r7, #15]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d106      	bne.n	8003818 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800380a:	4b06      	ldr	r3, [pc, #24]	; (8003824 <RCCEx_PLLSAI1_Config+0x1e4>)
 800380c:	691a      	ldr	r2, [r3, #16]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	4904      	ldr	r1, [pc, #16]	; (8003824 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003814:	4313      	orrs	r3, r2
 8003816:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003818:	7bfb      	ldrb	r3, [r7, #15]
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40021000 	.word	0x40021000

08003828 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003836:	4b6a      	ldr	r3, [pc, #424]	; (80039e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d018      	beq.n	8003874 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003842:	4b67      	ldr	r3, [pc, #412]	; (80039e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f003 0203 	and.w	r2, r3, #3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d10d      	bne.n	800386e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
       ||
 8003856:	2b00      	cmp	r3, #0
 8003858:	d009      	beq.n	800386e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800385a:	4b61      	ldr	r3, [pc, #388]	; (80039e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	091b      	lsrs	r3, r3, #4
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	1c5a      	adds	r2, r3, #1
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
       ||
 800386a:	429a      	cmp	r2, r3
 800386c:	d047      	beq.n	80038fe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	73fb      	strb	r3, [r7, #15]
 8003872:	e044      	b.n	80038fe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b03      	cmp	r3, #3
 800387a:	d018      	beq.n	80038ae <RCCEx_PLLSAI2_Config+0x86>
 800387c:	2b03      	cmp	r3, #3
 800387e:	d825      	bhi.n	80038cc <RCCEx_PLLSAI2_Config+0xa4>
 8003880:	2b01      	cmp	r3, #1
 8003882:	d002      	beq.n	800388a <RCCEx_PLLSAI2_Config+0x62>
 8003884:	2b02      	cmp	r3, #2
 8003886:	d009      	beq.n	800389c <RCCEx_PLLSAI2_Config+0x74>
 8003888:	e020      	b.n	80038cc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800388a:	4b55      	ldr	r3, [pc, #340]	; (80039e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d11d      	bne.n	80038d2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800389a:	e01a      	b.n	80038d2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800389c:	4b50      	ldr	r3, [pc, #320]	; (80039e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d116      	bne.n	80038d6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ac:	e013      	b.n	80038d6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038ae:	4b4c      	ldr	r3, [pc, #304]	; (80039e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10f      	bne.n	80038da <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038ba:	4b49      	ldr	r3, [pc, #292]	; (80039e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038ca:	e006      	b.n	80038da <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	73fb      	strb	r3, [r7, #15]
      break;
 80038d0:	e004      	b.n	80038dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038d2:	bf00      	nop
 80038d4:	e002      	b.n	80038dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038d6:	bf00      	nop
 80038d8:	e000      	b.n	80038dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038da:	bf00      	nop
    }

    if(status == HAL_OK)
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10d      	bne.n	80038fe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038e2:	4b3f      	ldr	r3, [pc, #252]	; (80039e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6819      	ldr	r1, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	430b      	orrs	r3, r1
 80038f8:	4939      	ldr	r1, [pc, #228]	; (80039e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038fe:	7bfb      	ldrb	r3, [r7, #15]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d167      	bne.n	80039d4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003904:	4b36      	ldr	r3, [pc, #216]	; (80039e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a35      	ldr	r2, [pc, #212]	; (80039e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800390a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800390e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003910:	f7fd ff5e 	bl	80017d0 <HAL_GetTick>
 8003914:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003916:	e009      	b.n	800392c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003918:	f7fd ff5a 	bl	80017d0 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d902      	bls.n	800392c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	73fb      	strb	r3, [r7, #15]
        break;
 800392a:	e005      	b.n	8003938 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800392c:	4b2c      	ldr	r3, [pc, #176]	; (80039e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1ef      	bne.n	8003918 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d14a      	bne.n	80039d4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d111      	bne.n	8003968 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003944:	4b26      	ldr	r3, [pc, #152]	; (80039e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800394c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6892      	ldr	r2, [r2, #8]
 8003954:	0211      	lsls	r1, r2, #8
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	68d2      	ldr	r2, [r2, #12]
 800395a:	0912      	lsrs	r2, r2, #4
 800395c:	0452      	lsls	r2, r2, #17
 800395e:	430a      	orrs	r2, r1
 8003960:	491f      	ldr	r1, [pc, #124]	; (80039e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003962:	4313      	orrs	r3, r2
 8003964:	614b      	str	r3, [r1, #20]
 8003966:	e011      	b.n	800398c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003968:	4b1d      	ldr	r3, [pc, #116]	; (80039e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003970:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6892      	ldr	r2, [r2, #8]
 8003978:	0211      	lsls	r1, r2, #8
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6912      	ldr	r2, [r2, #16]
 800397e:	0852      	lsrs	r2, r2, #1
 8003980:	3a01      	subs	r2, #1
 8003982:	0652      	lsls	r2, r2, #25
 8003984:	430a      	orrs	r2, r1
 8003986:	4916      	ldr	r1, [pc, #88]	; (80039e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003988:	4313      	orrs	r3, r2
 800398a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800398c:	4b14      	ldr	r3, [pc, #80]	; (80039e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a13      	ldr	r2, [pc, #76]	; (80039e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003996:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003998:	f7fd ff1a 	bl	80017d0 <HAL_GetTick>
 800399c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800399e:	e009      	b.n	80039b4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039a0:	f7fd ff16 	bl	80017d0 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d902      	bls.n	80039b4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	73fb      	strb	r3, [r7, #15]
          break;
 80039b2:	e005      	b.n	80039c0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039b4:	4b0a      	ldr	r3, [pc, #40]	; (80039e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0ef      	beq.n	80039a0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d106      	bne.n	80039d4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80039c6:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c8:	695a      	ldr	r2, [r3, #20]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	4904      	ldr	r1, [pc, #16]	; (80039e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40021000 	.word	0x40021000

080039e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e040      	b.n	8003a78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d106      	bne.n	8003a0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7fd fdc4 	bl	8001594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2224      	movs	r2, #36	; 0x24
 8003a10:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0201 	bic.w	r2, r2, #1
 8003a20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 fb26 	bl	8004074 <UART_SetConfig>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d101      	bne.n	8003a32 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e022      	b.n	8003a78 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 fda4 	bl	8004588 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0201 	orr.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 fe2b 	bl	80046cc <UART_CheckIdleState>
 8003a76:	4603      	mov	r3, r0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b08a      	sub	sp, #40	; 0x28
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a94:	2b20      	cmp	r3, #32
 8003a96:	f040 8082 	bne.w	8003b9e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <HAL_UART_Transmit+0x26>
 8003aa0:	88fb      	ldrh	r3, [r7, #6]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e07a      	b.n	8003ba0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d101      	bne.n	8003ab8 <HAL_UART_Transmit+0x38>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	e073      	b.n	8003ba0 <HAL_UART_Transmit+0x120>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2221      	movs	r2, #33	; 0x21
 8003acc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ace:	f7fd fe7f 	bl	80017d0 <HAL_GetTick>
 8003ad2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	88fa      	ldrh	r2, [r7, #6]
 8003ad8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	88fa      	ldrh	r2, [r7, #6]
 8003ae0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aec:	d108      	bne.n	8003b00 <HAL_UART_Transmit+0x80>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d104      	bne.n	8003b00 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	61bb      	str	r3, [r7, #24]
 8003afe:	e003      	b.n	8003b08 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b04:	2300      	movs	r3, #0
 8003b06:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003b10:	e02d      	b.n	8003b6e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2180      	movs	r1, #128	; 0x80
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 fe1e 	bl	800475e <UART_WaitOnFlagUntilTimeout>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e039      	b.n	8003ba0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10b      	bne.n	8003b4a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	881a      	ldrh	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b3e:	b292      	uxth	r2, r2
 8003b40:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	3302      	adds	r3, #2
 8003b46:	61bb      	str	r3, [r7, #24]
 8003b48:	e008      	b.n	8003b5c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	781a      	ldrb	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	b292      	uxth	r2, r2
 8003b54:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1cb      	bne.n	8003b12 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2200      	movs	r2, #0
 8003b82:	2140      	movs	r1, #64	; 0x40
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 fdea 	bl	800475e <UART_WaitOnFlagUntilTimeout>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e005      	b.n	8003ba0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2220      	movs	r2, #32
 8003b98:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	e000      	b.n	8003ba0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003b9e:	2302      	movs	r3, #2
  }
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3720      	adds	r7, #32
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bba:	2b20      	cmp	r3, #32
 8003bbc:	d131      	bne.n	8003c22 <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d002      	beq.n	8003bca <HAL_UART_Receive_IT+0x22>
 8003bc4:	88fb      	ldrh	r3, [r7, #6]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e02a      	b.n	8003c24 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d101      	bne.n	8003bdc <HAL_UART_Receive_IT+0x34>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	e023      	b.n	8003c24 <HAL_UART_Receive_IT+0x7c>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a0f      	ldr	r2, [pc, #60]	; (8003c2c <HAL_UART_Receive_IT+0x84>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d00e      	beq.n	8003c12 <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d007      	beq.n	8003c12 <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003c10:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003c12:	88fb      	ldrh	r3, [r7, #6]
 8003c14:	461a      	mov	r2, r3
 8003c16:	68b9      	ldr	r1, [r7, #8]
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 fe1d 	bl	8004858 <UART_Start_Receive_IT>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	e000      	b.n	8003c24 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8003c22:	2302      	movs	r3, #2
  }
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40008000 	.word	0x40008000

08003c30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b088      	sub	sp, #32
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c50:	69fa      	ldr	r2, [r7, #28]
 8003c52:	f640 030f 	movw	r3, #2063	; 0x80f
 8003c56:	4013      	ands	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d113      	bne.n	8003c88 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f003 0320 	and.w	r3, r3, #32
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00e      	beq.n	8003c88 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d009      	beq.n	8003c88 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 81ce 	beq.w	800401a <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	4798      	blx	r3
      }
      return;
 8003c86:	e1c8      	b.n	800401a <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 80e3 	beq.w	8003e56 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d105      	bne.n	8003ca6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4ba6      	ldr	r3, [pc, #664]	; (8003f38 <HAL_UART_IRQHandler+0x308>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 80d8 	beq.w	8003e56 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d010      	beq.n	8003cd2 <HAL_UART_IRQHandler+0xa2>
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00b      	beq.n	8003cd2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cc8:	f043 0201 	orr.w	r2, r3, #1
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d010      	beq.n	8003cfe <HAL_UART_IRQHandler+0xce>
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00b      	beq.n	8003cfe <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2202      	movs	r2, #2
 8003cec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cf4:	f043 0204 	orr.w	r2, r3, #4
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d010      	beq.n	8003d2a <HAL_UART_IRQHandler+0xfa>
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00b      	beq.n	8003d2a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2204      	movs	r2, #4
 8003d18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d20:	f043 0202 	orr.w	r2, r3, #2
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	f003 0308 	and.w	r3, r3, #8
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d015      	beq.n	8003d60 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	f003 0320 	and.w	r3, r3, #32
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d104      	bne.n	8003d48 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00b      	beq.n	8003d60 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2208      	movs	r2, #8
 8003d4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d56:	f043 0208 	orr.w	r2, r3, #8
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d011      	beq.n	8003d8e <HAL_UART_IRQHandler+0x15e>
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00c      	beq.n	8003d8e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d84:	f043 0220 	orr.w	r2, r3, #32
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 8142 	beq.w	800401e <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	f003 0320 	and.w	r3, r3, #32
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00c      	beq.n	8003dbe <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	f003 0320 	and.w	r3, r3, #32
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d007      	beq.n	8003dbe <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dc4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd0:	2b40      	cmp	r3, #64	; 0x40
 8003dd2:	d004      	beq.n	8003dde <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d031      	beq.n	8003e42 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 fdc2 	bl	8004968 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dee:	2b40      	cmp	r3, #64	; 0x40
 8003df0:	d123      	bne.n	8003e3a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e00:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d013      	beq.n	8003e32 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0e:	4a4b      	ldr	r2, [pc, #300]	; (8003f3c <HAL_UART_IRQHandler+0x30c>)
 8003e10:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fd fe35 	bl	8001a86 <HAL_DMA_Abort_IT>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d017      	beq.n	8003e52 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e30:	e00f      	b.n	8003e52 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f908 	bl	8004048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e38:	e00b      	b.n	8003e52 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f904 	bl	8004048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e40:	e007      	b.n	8003e52 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f900 	bl	8004048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003e50:	e0e5      	b.n	800401e <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e52:	bf00      	nop
    return;
 8003e54:	e0e3      	b.n	800401e <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	f040 80a9 	bne.w	8003fb2 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f003 0310 	and.w	r3, r3, #16
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 80a3 	beq.w	8003fb2 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	f003 0310 	and.w	r3, r3, #16
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 809d 	beq.w	8003fb2 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2210      	movs	r2, #16
 8003e7e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8a:	2b40      	cmp	r3, #64	; 0x40
 8003e8c:	d158      	bne.n	8003f40 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003e98:	893b      	ldrh	r3, [r7, #8]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f000 80c1 	beq.w	8004022 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ea6:	893a      	ldrh	r2, [r7, #8]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	f080 80ba 	bcs.w	8004022 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	893a      	ldrh	r2, [r7, #8]
 8003eb2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0320 	and.w	r3, r3, #32
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d12a      	bne.n	8003f1c <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ed4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0201 	bic.w	r2, r2, #1
 8003ee4:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ef4:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0210 	bic.w	r2, r2, #16
 8003f10:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fd fd77 	bl	8001a0a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	4619      	mov	r1, r3
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f893 	bl	800405c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003f36:	e074      	b.n	8004022 <HAL_UART_IRQHandler+0x3f2>
 8003f38:	04000120 	.word	0x04000120
 8003f3c:	080049c7 	.word	0x080049c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d063      	beq.n	8004026 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8003f5e:	897b      	ldrh	r3, [r7, #10]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d060      	beq.n	8004026 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f72:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 0201 	bic.w	r2, r2, #1
 8003f82:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2220      	movs	r2, #32
 8003f88:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0210 	bic.w	r2, r2, #16
 8003fa4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fa6:	897b      	ldrh	r3, [r7, #10]
 8003fa8:	4619      	mov	r1, r3
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f856 	bl	800405c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003fb0:	e039      	b.n	8004026 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00d      	beq.n	8003fd8 <HAL_UART_IRQHandler+0x3a8>
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d008      	beq.n	8003fd8 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003fce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 fdff 	bl	8004bd4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003fd6:	e029      	b.n	800402c <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00d      	beq.n	8003ffe <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d008      	beq.n	8003ffe <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d01a      	beq.n	800402a <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	4798      	blx	r3
    }
    return;
 8003ffc:	e015      	b.n	800402a <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004004:	2b00      	cmp	r3, #0
 8004006:	d011      	beq.n	800402c <HAL_UART_IRQHandler+0x3fc>
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00c      	beq.n	800402c <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 fced 	bl	80049f2 <UART_EndTransmit_IT>
    return;
 8004018:	e008      	b.n	800402c <HAL_UART_IRQHandler+0x3fc>
      return;
 800401a:	bf00      	nop
 800401c:	e006      	b.n	800402c <HAL_UART_IRQHandler+0x3fc>
    return;
 800401e:	bf00      	nop
 8004020:	e004      	b.n	800402c <HAL_UART_IRQHandler+0x3fc>
      return;
 8004022:	bf00      	nop
 8004024:	e002      	b.n	800402c <HAL_UART_IRQHandler+0x3fc>
      return;
 8004026:	bf00      	nop
 8004028:	e000      	b.n	800402c <HAL_UART_IRQHandler+0x3fc>
    return;
 800402a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800402c:	3720      	adds	r7, #32
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop

08004034 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	460b      	mov	r3, r1
 8004066:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004074:	b5b0      	push	{r4, r5, r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800407c:	2300      	movs	r3, #0
 800407e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	431a      	orrs	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	431a      	orrs	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	4313      	orrs	r3, r2
 8004096:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	4bad      	ldr	r3, [pc, #692]	; (8004354 <UART_SetConfig+0x2e0>)
 80040a0:	4013      	ands	r3, r2
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6812      	ldr	r2, [r2, #0]
 80040a6:	69f9      	ldr	r1, [r7, #28]
 80040a8:	430b      	orrs	r3, r1
 80040aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68da      	ldr	r2, [r3, #12]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4aa2      	ldr	r2, [pc, #648]	; (8004358 <UART_SetConfig+0x2e4>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d004      	beq.n	80040dc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	69fa      	ldr	r2, [r7, #28]
 80040d8:	4313      	orrs	r3, r2
 80040da:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	69fa      	ldr	r2, [r7, #28]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a99      	ldr	r2, [pc, #612]	; (800435c <UART_SetConfig+0x2e8>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d121      	bne.n	800413e <UART_SetConfig+0xca>
 80040fa:	4b99      	ldr	r3, [pc, #612]	; (8004360 <UART_SetConfig+0x2ec>)
 80040fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004100:	f003 0303 	and.w	r3, r3, #3
 8004104:	2b03      	cmp	r3, #3
 8004106:	d817      	bhi.n	8004138 <UART_SetConfig+0xc4>
 8004108:	a201      	add	r2, pc, #4	; (adr r2, 8004110 <UART_SetConfig+0x9c>)
 800410a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410e:	bf00      	nop
 8004110:	08004121 	.word	0x08004121
 8004114:	0800412d 	.word	0x0800412d
 8004118:	08004127 	.word	0x08004127
 800411c:	08004133 	.word	0x08004133
 8004120:	2301      	movs	r3, #1
 8004122:	76fb      	strb	r3, [r7, #27]
 8004124:	e0e7      	b.n	80042f6 <UART_SetConfig+0x282>
 8004126:	2302      	movs	r3, #2
 8004128:	76fb      	strb	r3, [r7, #27]
 800412a:	e0e4      	b.n	80042f6 <UART_SetConfig+0x282>
 800412c:	2304      	movs	r3, #4
 800412e:	76fb      	strb	r3, [r7, #27]
 8004130:	e0e1      	b.n	80042f6 <UART_SetConfig+0x282>
 8004132:	2308      	movs	r3, #8
 8004134:	76fb      	strb	r3, [r7, #27]
 8004136:	e0de      	b.n	80042f6 <UART_SetConfig+0x282>
 8004138:	2310      	movs	r3, #16
 800413a:	76fb      	strb	r3, [r7, #27]
 800413c:	e0db      	b.n	80042f6 <UART_SetConfig+0x282>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a88      	ldr	r2, [pc, #544]	; (8004364 <UART_SetConfig+0x2f0>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d132      	bne.n	80041ae <UART_SetConfig+0x13a>
 8004148:	4b85      	ldr	r3, [pc, #532]	; (8004360 <UART_SetConfig+0x2ec>)
 800414a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414e:	f003 030c 	and.w	r3, r3, #12
 8004152:	2b0c      	cmp	r3, #12
 8004154:	d828      	bhi.n	80041a8 <UART_SetConfig+0x134>
 8004156:	a201      	add	r2, pc, #4	; (adr r2, 800415c <UART_SetConfig+0xe8>)
 8004158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415c:	08004191 	.word	0x08004191
 8004160:	080041a9 	.word	0x080041a9
 8004164:	080041a9 	.word	0x080041a9
 8004168:	080041a9 	.word	0x080041a9
 800416c:	0800419d 	.word	0x0800419d
 8004170:	080041a9 	.word	0x080041a9
 8004174:	080041a9 	.word	0x080041a9
 8004178:	080041a9 	.word	0x080041a9
 800417c:	08004197 	.word	0x08004197
 8004180:	080041a9 	.word	0x080041a9
 8004184:	080041a9 	.word	0x080041a9
 8004188:	080041a9 	.word	0x080041a9
 800418c:	080041a3 	.word	0x080041a3
 8004190:	2300      	movs	r3, #0
 8004192:	76fb      	strb	r3, [r7, #27]
 8004194:	e0af      	b.n	80042f6 <UART_SetConfig+0x282>
 8004196:	2302      	movs	r3, #2
 8004198:	76fb      	strb	r3, [r7, #27]
 800419a:	e0ac      	b.n	80042f6 <UART_SetConfig+0x282>
 800419c:	2304      	movs	r3, #4
 800419e:	76fb      	strb	r3, [r7, #27]
 80041a0:	e0a9      	b.n	80042f6 <UART_SetConfig+0x282>
 80041a2:	2308      	movs	r3, #8
 80041a4:	76fb      	strb	r3, [r7, #27]
 80041a6:	e0a6      	b.n	80042f6 <UART_SetConfig+0x282>
 80041a8:	2310      	movs	r3, #16
 80041aa:	76fb      	strb	r3, [r7, #27]
 80041ac:	e0a3      	b.n	80042f6 <UART_SetConfig+0x282>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a6d      	ldr	r2, [pc, #436]	; (8004368 <UART_SetConfig+0x2f4>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d120      	bne.n	80041fa <UART_SetConfig+0x186>
 80041b8:	4b69      	ldr	r3, [pc, #420]	; (8004360 <UART_SetConfig+0x2ec>)
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041c2:	2b30      	cmp	r3, #48	; 0x30
 80041c4:	d013      	beq.n	80041ee <UART_SetConfig+0x17a>
 80041c6:	2b30      	cmp	r3, #48	; 0x30
 80041c8:	d814      	bhi.n	80041f4 <UART_SetConfig+0x180>
 80041ca:	2b20      	cmp	r3, #32
 80041cc:	d009      	beq.n	80041e2 <UART_SetConfig+0x16e>
 80041ce:	2b20      	cmp	r3, #32
 80041d0:	d810      	bhi.n	80041f4 <UART_SetConfig+0x180>
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d002      	beq.n	80041dc <UART_SetConfig+0x168>
 80041d6:	2b10      	cmp	r3, #16
 80041d8:	d006      	beq.n	80041e8 <UART_SetConfig+0x174>
 80041da:	e00b      	b.n	80041f4 <UART_SetConfig+0x180>
 80041dc:	2300      	movs	r3, #0
 80041de:	76fb      	strb	r3, [r7, #27]
 80041e0:	e089      	b.n	80042f6 <UART_SetConfig+0x282>
 80041e2:	2302      	movs	r3, #2
 80041e4:	76fb      	strb	r3, [r7, #27]
 80041e6:	e086      	b.n	80042f6 <UART_SetConfig+0x282>
 80041e8:	2304      	movs	r3, #4
 80041ea:	76fb      	strb	r3, [r7, #27]
 80041ec:	e083      	b.n	80042f6 <UART_SetConfig+0x282>
 80041ee:	2308      	movs	r3, #8
 80041f0:	76fb      	strb	r3, [r7, #27]
 80041f2:	e080      	b.n	80042f6 <UART_SetConfig+0x282>
 80041f4:	2310      	movs	r3, #16
 80041f6:	76fb      	strb	r3, [r7, #27]
 80041f8:	e07d      	b.n	80042f6 <UART_SetConfig+0x282>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a5b      	ldr	r2, [pc, #364]	; (800436c <UART_SetConfig+0x2f8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d120      	bne.n	8004246 <UART_SetConfig+0x1d2>
 8004204:	4b56      	ldr	r3, [pc, #344]	; (8004360 <UART_SetConfig+0x2ec>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800420e:	2bc0      	cmp	r3, #192	; 0xc0
 8004210:	d013      	beq.n	800423a <UART_SetConfig+0x1c6>
 8004212:	2bc0      	cmp	r3, #192	; 0xc0
 8004214:	d814      	bhi.n	8004240 <UART_SetConfig+0x1cc>
 8004216:	2b80      	cmp	r3, #128	; 0x80
 8004218:	d009      	beq.n	800422e <UART_SetConfig+0x1ba>
 800421a:	2b80      	cmp	r3, #128	; 0x80
 800421c:	d810      	bhi.n	8004240 <UART_SetConfig+0x1cc>
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <UART_SetConfig+0x1b4>
 8004222:	2b40      	cmp	r3, #64	; 0x40
 8004224:	d006      	beq.n	8004234 <UART_SetConfig+0x1c0>
 8004226:	e00b      	b.n	8004240 <UART_SetConfig+0x1cc>
 8004228:	2300      	movs	r3, #0
 800422a:	76fb      	strb	r3, [r7, #27]
 800422c:	e063      	b.n	80042f6 <UART_SetConfig+0x282>
 800422e:	2302      	movs	r3, #2
 8004230:	76fb      	strb	r3, [r7, #27]
 8004232:	e060      	b.n	80042f6 <UART_SetConfig+0x282>
 8004234:	2304      	movs	r3, #4
 8004236:	76fb      	strb	r3, [r7, #27]
 8004238:	e05d      	b.n	80042f6 <UART_SetConfig+0x282>
 800423a:	2308      	movs	r3, #8
 800423c:	76fb      	strb	r3, [r7, #27]
 800423e:	e05a      	b.n	80042f6 <UART_SetConfig+0x282>
 8004240:	2310      	movs	r3, #16
 8004242:	76fb      	strb	r3, [r7, #27]
 8004244:	e057      	b.n	80042f6 <UART_SetConfig+0x282>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a49      	ldr	r2, [pc, #292]	; (8004370 <UART_SetConfig+0x2fc>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d125      	bne.n	800429c <UART_SetConfig+0x228>
 8004250:	4b43      	ldr	r3, [pc, #268]	; (8004360 <UART_SetConfig+0x2ec>)
 8004252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800425a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800425e:	d017      	beq.n	8004290 <UART_SetConfig+0x21c>
 8004260:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004264:	d817      	bhi.n	8004296 <UART_SetConfig+0x222>
 8004266:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800426a:	d00b      	beq.n	8004284 <UART_SetConfig+0x210>
 800426c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004270:	d811      	bhi.n	8004296 <UART_SetConfig+0x222>
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <UART_SetConfig+0x20a>
 8004276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800427a:	d006      	beq.n	800428a <UART_SetConfig+0x216>
 800427c:	e00b      	b.n	8004296 <UART_SetConfig+0x222>
 800427e:	2300      	movs	r3, #0
 8004280:	76fb      	strb	r3, [r7, #27]
 8004282:	e038      	b.n	80042f6 <UART_SetConfig+0x282>
 8004284:	2302      	movs	r3, #2
 8004286:	76fb      	strb	r3, [r7, #27]
 8004288:	e035      	b.n	80042f6 <UART_SetConfig+0x282>
 800428a:	2304      	movs	r3, #4
 800428c:	76fb      	strb	r3, [r7, #27]
 800428e:	e032      	b.n	80042f6 <UART_SetConfig+0x282>
 8004290:	2308      	movs	r3, #8
 8004292:	76fb      	strb	r3, [r7, #27]
 8004294:	e02f      	b.n	80042f6 <UART_SetConfig+0x282>
 8004296:	2310      	movs	r3, #16
 8004298:	76fb      	strb	r3, [r7, #27]
 800429a:	e02c      	b.n	80042f6 <UART_SetConfig+0x282>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a2d      	ldr	r2, [pc, #180]	; (8004358 <UART_SetConfig+0x2e4>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d125      	bne.n	80042f2 <UART_SetConfig+0x27e>
 80042a6:	4b2e      	ldr	r3, [pc, #184]	; (8004360 <UART_SetConfig+0x2ec>)
 80042a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042b4:	d017      	beq.n	80042e6 <UART_SetConfig+0x272>
 80042b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042ba:	d817      	bhi.n	80042ec <UART_SetConfig+0x278>
 80042bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042c0:	d00b      	beq.n	80042da <UART_SetConfig+0x266>
 80042c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042c6:	d811      	bhi.n	80042ec <UART_SetConfig+0x278>
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <UART_SetConfig+0x260>
 80042cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d0:	d006      	beq.n	80042e0 <UART_SetConfig+0x26c>
 80042d2:	e00b      	b.n	80042ec <UART_SetConfig+0x278>
 80042d4:	2300      	movs	r3, #0
 80042d6:	76fb      	strb	r3, [r7, #27]
 80042d8:	e00d      	b.n	80042f6 <UART_SetConfig+0x282>
 80042da:	2302      	movs	r3, #2
 80042dc:	76fb      	strb	r3, [r7, #27]
 80042de:	e00a      	b.n	80042f6 <UART_SetConfig+0x282>
 80042e0:	2304      	movs	r3, #4
 80042e2:	76fb      	strb	r3, [r7, #27]
 80042e4:	e007      	b.n	80042f6 <UART_SetConfig+0x282>
 80042e6:	2308      	movs	r3, #8
 80042e8:	76fb      	strb	r3, [r7, #27]
 80042ea:	e004      	b.n	80042f6 <UART_SetConfig+0x282>
 80042ec:	2310      	movs	r3, #16
 80042ee:	76fb      	strb	r3, [r7, #27]
 80042f0:	e001      	b.n	80042f6 <UART_SetConfig+0x282>
 80042f2:	2310      	movs	r3, #16
 80042f4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a17      	ldr	r2, [pc, #92]	; (8004358 <UART_SetConfig+0x2e4>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	f040 8087 	bne.w	8004410 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004302:	7efb      	ldrb	r3, [r7, #27]
 8004304:	2b08      	cmp	r3, #8
 8004306:	d837      	bhi.n	8004378 <UART_SetConfig+0x304>
 8004308:	a201      	add	r2, pc, #4	; (adr r2, 8004310 <UART_SetConfig+0x29c>)
 800430a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430e:	bf00      	nop
 8004310:	08004335 	.word	0x08004335
 8004314:	08004379 	.word	0x08004379
 8004318:	0800433d 	.word	0x0800433d
 800431c:	08004379 	.word	0x08004379
 8004320:	08004343 	.word	0x08004343
 8004324:	08004379 	.word	0x08004379
 8004328:	08004379 	.word	0x08004379
 800432c:	08004379 	.word	0x08004379
 8004330:	0800434b 	.word	0x0800434b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004334:	f7fe fe0e 	bl	8002f54 <HAL_RCC_GetPCLK1Freq>
 8004338:	6178      	str	r0, [r7, #20]
        break;
 800433a:	e022      	b.n	8004382 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800433c:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <UART_SetConfig+0x300>)
 800433e:	617b      	str	r3, [r7, #20]
        break;
 8004340:	e01f      	b.n	8004382 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004342:	f7fe fd6f 	bl	8002e24 <HAL_RCC_GetSysClockFreq>
 8004346:	6178      	str	r0, [r7, #20]
        break;
 8004348:	e01b      	b.n	8004382 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800434a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800434e:	617b      	str	r3, [r7, #20]
        break;
 8004350:	e017      	b.n	8004382 <UART_SetConfig+0x30e>
 8004352:	bf00      	nop
 8004354:	efff69f3 	.word	0xefff69f3
 8004358:	40008000 	.word	0x40008000
 800435c:	40013800 	.word	0x40013800
 8004360:	40021000 	.word	0x40021000
 8004364:	40004400 	.word	0x40004400
 8004368:	40004800 	.word	0x40004800
 800436c:	40004c00 	.word	0x40004c00
 8004370:	40005000 	.word	0x40005000
 8004374:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	76bb      	strb	r3, [r7, #26]
        break;
 8004380:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 80f1 	beq.w	800456c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	4613      	mov	r3, r2
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	4413      	add	r3, r2
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	429a      	cmp	r2, r3
 8004398:	d305      	bcc.n	80043a6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d902      	bls.n	80043ac <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	76bb      	strb	r3, [r7, #26]
 80043aa:	e0df      	b.n	800456c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f04f 0100 	mov.w	r1, #0
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	020b      	lsls	r3, r1, #8
 80043be:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80043c2:	0202      	lsls	r2, r0, #8
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	6849      	ldr	r1, [r1, #4]
 80043c8:	0849      	lsrs	r1, r1, #1
 80043ca:	4608      	mov	r0, r1
 80043cc:	f04f 0100 	mov.w	r1, #0
 80043d0:	1814      	adds	r4, r2, r0
 80043d2:	eb43 0501 	adc.w	r5, r3, r1
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	461a      	mov	r2, r3
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	4620      	mov	r0, r4
 80043e2:	4629      	mov	r1, r5
 80043e4:	f7fc fc50 	bl	8000c88 <__aeabi_uldivmod>
 80043e8:	4602      	mov	r2, r0
 80043ea:	460b      	mov	r3, r1
 80043ec:	4613      	mov	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043f6:	d308      	bcc.n	800440a <UART_SetConfig+0x396>
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043fe:	d204      	bcs.n	800440a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	60da      	str	r2, [r3, #12]
 8004408:	e0b0      	b.n	800456c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	76bb      	strb	r3, [r7, #26]
 800440e:	e0ad      	b.n	800456c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	69db      	ldr	r3, [r3, #28]
 8004414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004418:	d15c      	bne.n	80044d4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800441a:	7efb      	ldrb	r3, [r7, #27]
 800441c:	2b08      	cmp	r3, #8
 800441e:	d828      	bhi.n	8004472 <UART_SetConfig+0x3fe>
 8004420:	a201      	add	r2, pc, #4	; (adr r2, 8004428 <UART_SetConfig+0x3b4>)
 8004422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004426:	bf00      	nop
 8004428:	0800444d 	.word	0x0800444d
 800442c:	08004455 	.word	0x08004455
 8004430:	0800445d 	.word	0x0800445d
 8004434:	08004473 	.word	0x08004473
 8004438:	08004463 	.word	0x08004463
 800443c:	08004473 	.word	0x08004473
 8004440:	08004473 	.word	0x08004473
 8004444:	08004473 	.word	0x08004473
 8004448:	0800446b 	.word	0x0800446b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800444c:	f7fe fd82 	bl	8002f54 <HAL_RCC_GetPCLK1Freq>
 8004450:	6178      	str	r0, [r7, #20]
        break;
 8004452:	e013      	b.n	800447c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004454:	f7fe fd94 	bl	8002f80 <HAL_RCC_GetPCLK2Freq>
 8004458:	6178      	str	r0, [r7, #20]
        break;
 800445a:	e00f      	b.n	800447c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800445c:	4b49      	ldr	r3, [pc, #292]	; (8004584 <UART_SetConfig+0x510>)
 800445e:	617b      	str	r3, [r7, #20]
        break;
 8004460:	e00c      	b.n	800447c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004462:	f7fe fcdf 	bl	8002e24 <HAL_RCC_GetSysClockFreq>
 8004466:	6178      	str	r0, [r7, #20]
        break;
 8004468:	e008      	b.n	800447c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800446a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800446e:	617b      	str	r3, [r7, #20]
        break;
 8004470:	e004      	b.n	800447c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004472:	2300      	movs	r3, #0
 8004474:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	76bb      	strb	r3, [r7, #26]
        break;
 800447a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d074      	beq.n	800456c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	005a      	lsls	r2, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	085b      	lsrs	r3, r3, #1
 800448c:	441a      	add	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	fbb2 f3f3 	udiv	r3, r2, r3
 8004496:	b29b      	uxth	r3, r3
 8004498:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	2b0f      	cmp	r3, #15
 800449e:	d916      	bls.n	80044ce <UART_SetConfig+0x45a>
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a6:	d212      	bcs.n	80044ce <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	f023 030f 	bic.w	r3, r3, #15
 80044b0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	085b      	lsrs	r3, r3, #1
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	b29a      	uxth	r2, r3
 80044be:	89fb      	ldrh	r3, [r7, #14]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	89fa      	ldrh	r2, [r7, #14]
 80044ca:	60da      	str	r2, [r3, #12]
 80044cc:	e04e      	b.n	800456c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	76bb      	strb	r3, [r7, #26]
 80044d2:	e04b      	b.n	800456c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044d4:	7efb      	ldrb	r3, [r7, #27]
 80044d6:	2b08      	cmp	r3, #8
 80044d8:	d827      	bhi.n	800452a <UART_SetConfig+0x4b6>
 80044da:	a201      	add	r2, pc, #4	; (adr r2, 80044e0 <UART_SetConfig+0x46c>)
 80044dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e0:	08004505 	.word	0x08004505
 80044e4:	0800450d 	.word	0x0800450d
 80044e8:	08004515 	.word	0x08004515
 80044ec:	0800452b 	.word	0x0800452b
 80044f0:	0800451b 	.word	0x0800451b
 80044f4:	0800452b 	.word	0x0800452b
 80044f8:	0800452b 	.word	0x0800452b
 80044fc:	0800452b 	.word	0x0800452b
 8004500:	08004523 	.word	0x08004523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004504:	f7fe fd26 	bl	8002f54 <HAL_RCC_GetPCLK1Freq>
 8004508:	6178      	str	r0, [r7, #20]
        break;
 800450a:	e013      	b.n	8004534 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800450c:	f7fe fd38 	bl	8002f80 <HAL_RCC_GetPCLK2Freq>
 8004510:	6178      	str	r0, [r7, #20]
        break;
 8004512:	e00f      	b.n	8004534 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004514:	4b1b      	ldr	r3, [pc, #108]	; (8004584 <UART_SetConfig+0x510>)
 8004516:	617b      	str	r3, [r7, #20]
        break;
 8004518:	e00c      	b.n	8004534 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800451a:	f7fe fc83 	bl	8002e24 <HAL_RCC_GetSysClockFreq>
 800451e:	6178      	str	r0, [r7, #20]
        break;
 8004520:	e008      	b.n	8004534 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004526:	617b      	str	r3, [r7, #20]
        break;
 8004528:	e004      	b.n	8004534 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	76bb      	strb	r3, [r7, #26]
        break;
 8004532:	bf00      	nop
    }

    if (pclk != 0U)
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d018      	beq.n	800456c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	085a      	lsrs	r2, r3, #1
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	441a      	add	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	fbb2 f3f3 	udiv	r3, r2, r3
 800454c:	b29b      	uxth	r3, r3
 800454e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	2b0f      	cmp	r3, #15
 8004554:	d908      	bls.n	8004568 <UART_SetConfig+0x4f4>
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800455c:	d204      	bcs.n	8004568 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	60da      	str	r2, [r3, #12]
 8004566:	e001      	b.n	800456c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004578:	7ebb      	ldrb	r3, [r7, #26]
}
 800457a:	4618      	mov	r0, r3
 800457c:	3720      	adds	r7, #32
 800457e:	46bd      	mov	sp, r7
 8004580:	bdb0      	pop	{r4, r5, r7, pc}
 8004582:	bf00      	nop
 8004584:	00f42400 	.word	0x00f42400

08004588 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00a      	beq.n	80045b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00a      	beq.n	80045d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	f003 0308 	and.w	r3, r3, #8
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	f003 0320 	and.w	r3, r3, #32
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004664:	2b00      	cmp	r3, #0
 8004666:	d01a      	beq.n	800469e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004686:	d10a      	bne.n	800469e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	430a      	orrs	r2, r1
 80046be:	605a      	str	r2, [r3, #4]
  }
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af02      	add	r7, sp, #8
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046dc:	f7fd f878 	bl	80017d0 <HAL_GetTick>
 80046e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0308 	and.w	r3, r3, #8
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d10e      	bne.n	800470e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f82d 	bl	800475e <UART_WaitOnFlagUntilTimeout>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e023      	b.n	8004756 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b04      	cmp	r3, #4
 800471a:	d10e      	bne.n	800473a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800471c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f817 	bl	800475e <UART_WaitOnFlagUntilTimeout>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e00d      	b.n	8004756 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2220      	movs	r2, #32
 800473e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2220      	movs	r2, #32
 8004744:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b084      	sub	sp, #16
 8004762:	af00      	add	r7, sp, #0
 8004764:	60f8      	str	r0, [r7, #12]
 8004766:	60b9      	str	r1, [r7, #8]
 8004768:	603b      	str	r3, [r7, #0]
 800476a:	4613      	mov	r3, r2
 800476c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800476e:	e05e      	b.n	800482e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004776:	d05a      	beq.n	800482e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004778:	f7fd f82a 	bl	80017d0 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	429a      	cmp	r2, r3
 8004786:	d302      	bcc.n	800478e <UART_WaitOnFlagUntilTimeout+0x30>
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d11b      	bne.n	80047c6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800479c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0201 	bic.w	r2, r2, #1
 80047ac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2220      	movs	r2, #32
 80047b2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2220      	movs	r2, #32
 80047b8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e043      	b.n	800484e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0304 	and.w	r3, r3, #4
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d02c      	beq.n	800482e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047e2:	d124      	bne.n	800482e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047ec:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047fc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0201 	bic.w	r2, r2, #1
 800480c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2220      	movs	r2, #32
 8004812:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2220      	movs	r2, #32
 8004818:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2220      	movs	r2, #32
 800481e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e00f      	b.n	800484e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	69da      	ldr	r2, [r3, #28]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	4013      	ands	r3, r2
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	429a      	cmp	r2, r3
 800483c:	bf0c      	ite	eq
 800483e:	2301      	moveq	r3, #1
 8004840:	2300      	movne	r3, #0
 8004842:	b2db      	uxtb	r3, r3
 8004844:	461a      	mov	r2, r3
 8004846:	79fb      	ldrb	r3, [r7, #7]
 8004848:	429a      	cmp	r2, r3
 800484a:	d091      	beq.n	8004770 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	4613      	mov	r3, r2
 8004864:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	88fa      	ldrh	r2, [r7, #6]
 8004870:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	88fa      	ldrh	r2, [r7, #6]
 8004878:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800488a:	d10e      	bne.n	80048aa <UART_Start_Receive_IT+0x52>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d105      	bne.n	80048a0 <UART_Start_Receive_IT+0x48>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f240 12ff 	movw	r2, #511	; 0x1ff
 800489a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800489e:	e02d      	b.n	80048fc <UART_Start_Receive_IT+0xa4>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	22ff      	movs	r2, #255	; 0xff
 80048a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048a8:	e028      	b.n	80048fc <UART_Start_Receive_IT+0xa4>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10d      	bne.n	80048ce <UART_Start_Receive_IT+0x76>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d104      	bne.n	80048c4 <UART_Start_Receive_IT+0x6c>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	22ff      	movs	r2, #255	; 0xff
 80048be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048c2:	e01b      	b.n	80048fc <UART_Start_Receive_IT+0xa4>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	227f      	movs	r2, #127	; 0x7f
 80048c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048cc:	e016      	b.n	80048fc <UART_Start_Receive_IT+0xa4>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048d6:	d10d      	bne.n	80048f4 <UART_Start_Receive_IT+0x9c>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d104      	bne.n	80048ea <UART_Start_Receive_IT+0x92>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	227f      	movs	r2, #127	; 0x7f
 80048e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048e8:	e008      	b.n	80048fc <UART_Start_Receive_IT+0xa4>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	223f      	movs	r2, #63	; 0x3f
 80048ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048f2:	e003      	b.n	80048fc <UART_Start_Receive_IT+0xa4>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2222      	movs	r2, #34	; 0x22
 8004908:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f042 0201 	orr.w	r2, r2, #1
 8004918:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004922:	d107      	bne.n	8004934 <UART_Start_Receive_IT+0xdc>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d103      	bne.n	8004934 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4a0c      	ldr	r2, [pc, #48]	; (8004960 <UART_Start_Receive_IT+0x108>)
 8004930:	665a      	str	r2, [r3, #100]	; 0x64
 8004932:	e002      	b.n	800493a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4a0b      	ldr	r2, [pc, #44]	; (8004964 <UART_Start_Receive_IT+0x10c>)
 8004938:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004950:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3714      	adds	r7, #20
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	08004afd 	.word	0x08004afd
 8004964:	08004a25 	.word	0x08004a25

08004968 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800497e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689a      	ldr	r2, [r3, #8]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 0201 	bic.w	r2, r2, #1
 800498e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004994:	2b01      	cmp	r3, #1
 8004996:	d107      	bne.n	80049a8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 0210 	bic.w	r2, r2, #16
 80049a6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2220      	movs	r2, #32
 80049ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80049ba:	bf00      	nop
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b084      	sub	sp, #16
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f7ff fb2f 	bl	8004048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049ea:	bf00      	nop
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b082      	sub	sp, #8
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a08:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7ff fb0c 	bl	8004034 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a1c:	bf00      	nop
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a32:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a38:	2b22      	cmp	r3, #34	; 0x22
 8004a3a:	d151      	bne.n	8004ae0 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004a42:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004a44:	89bb      	ldrh	r3, [r7, #12]
 8004a46:	b2d9      	uxtb	r1, r3
 8004a48:	89fb      	ldrh	r3, [r7, #14]
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a50:	400a      	ands	r2, r1
 8004a52:	b2d2      	uxtb	r2, r2
 8004a54:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5a:	1c5a      	adds	r2, r3, #1
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d13a      	bne.n	8004af4 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a8c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0201 	bic.w	r2, r2, #1
 8004a9c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d10f      	bne.n	8004ad2 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0210 	bic.w	r2, r2, #16
 8004ac0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ac8:	4619      	mov	r1, r3
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7ff fac6 	bl	800405c <HAL_UARTEx_RxEventCallback>
 8004ad0:	e002      	b.n	8004ad8 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7fc fb82 	bl	80011dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ade:	e009      	b.n	8004af4 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	8b1b      	ldrh	r3, [r3, #24]
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0208 	orr.w	r2, r2, #8
 8004af0:	b292      	uxth	r2, r2
 8004af2:	831a      	strh	r2, [r3, #24]
}
 8004af4:	bf00      	nop
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004b0a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b10:	2b22      	cmp	r3, #34	; 0x22
 8004b12:	d151      	bne.n	8004bb8 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004b1a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b20:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004b22:	89ba      	ldrh	r2, [r7, #12]
 8004b24:	89fb      	ldrh	r3, [r7, #14]
 8004b26:	4013      	ands	r3, r2
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b32:	1c9a      	adds	r2, r3, #2
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	3b01      	subs	r3, #1
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d13a      	bne.n	8004bcc <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b64:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0201 	bic.w	r2, r2, #1
 8004b74:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d10f      	bne.n	8004baa <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f022 0210 	bic.w	r2, r2, #16
 8004b98:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7ff fa5a 	bl	800405c <HAL_UARTEx_RxEventCallback>
 8004ba8:	e002      	b.n	8004bb0 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7fc fb16 	bl	80011dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004bb6:	e009      	b.n	8004bcc <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	8b1b      	ldrh	r3, [r3, #24]
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f042 0208 	orr.w	r2, r2, #8
 8004bc8:	b292      	uxth	r2, r2
 8004bca:	831a      	strh	r2, [r3, #24]
}
 8004bcc:	bf00      	nop
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <Flash_erase>:
}



/*_________________________________________________________________________________________________________________________________*/
void Flash_erase( uint32_t _page ) {
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
	FLASH_EraseInitTypeDef EraseStruct ;
	static uint32_t PageEraseERROR_Addr  ;
	HAL_FLASH_Unlock() ;
 8004bf0:	f7fc fff6 	bl	8001be0 <HAL_FLASH_Unlock>
	if( _page <= LAST_PAGE_ADDR_BANK1)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a0f      	ldr	r2, [pc, #60]	; (8004c34 <Flash_erase+0x4c>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d802      	bhi.n	8004c02 <Flash_erase+0x1a>
		EraseStruct.Banks = FLASH_BANK_1 ;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	e001      	b.n	8004c06 <Flash_erase+0x1e>
	else
		EraseStruct.Banks = FLASH_BANK_2 ;
 8004c02:	2302      	movs	r3, #2
 8004c04:	60fb      	str	r3, [r7, #12]
	EraseStruct.NbPages = 1 ;
 8004c06:	2301      	movs	r3, #1
 8004c08:	617b      	str	r3, [r7, #20]
	EraseStruct.TypeErase = FLASH_TYPEERASE_PAGES ;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60bb      	str	r3, [r7, #8]
	EraseStruct.Page = _page ;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	613b      	str	r3, [r7, #16]

	if( HAL_FLASHEx_Erase( &EraseStruct, &PageEraseERROR_Addr ) != HAL_OK )
 8004c12:	f107 0308 	add.w	r3, r7, #8
 8004c16:	4908      	ldr	r1, [pc, #32]	; (8004c38 <Flash_erase+0x50>)
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7fd f8d1 	bl	8001dc0 <HAL_FLASHEx_Erase>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d002      	beq.n	8004c2a <Flash_erase+0x42>
		return (void)HAL_FLASH_GetError() ;
 8004c24:	f7fd f80e 	bl	8001c44 <HAL_FLASH_GetError>
 8004c28:	e001      	b.n	8004c2e <Flash_erase+0x46>

	HAL_FLASH_Lock() ;
 8004c2a:	f7fc fffb 	bl	8001c24 <HAL_FLASH_Lock>
}
 8004c2e:	3718      	adds	r7, #24
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	0807f800 	.word	0x0807f800
 8004c38:	20000220 	.word	0x20000220

08004c3c <Flash_write>:



/*_________________________________________________________________________________________________________________________________*/
void Flash_write( uint32_t _address, const char* _data ) {
 8004c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c40:	b08a      	sub	sp, #40	; 0x28
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
 8004c46:	6039      	str	r1, [r7, #0]
 8004c48:	466b      	mov	r3, sp
 8004c4a:	469a      	mov	sl, r3
	HAL_FLASH_Unlock() ;
 8004c4c:	f7fc ffc8 	bl	8001be0 <HAL_FLASH_Unlock>

	unsigned int size = strlen( _data ) + 1 ;
 8004c50:	6838      	ldr	r0, [r7, #0]
 8004c52:	f7fb fabd 	bl	80001d0 <strlen>
 8004c56:	4603      	mov	r3, r0
 8004c58:	3301      	adds	r3, #1
 8004c5a:	617b      	str	r3, [r7, #20]
	char dataArr[ size ] ;
 8004c5c:	697e      	ldr	r6, [r7, #20]
 8004c5e:	4633      	mov	r3, r6
 8004c60:	3b01      	subs	r3, #1
 8004c62:	613b      	str	r3, [r7, #16]
 8004c64:	4630      	mov	r0, r6
 8004c66:	f04f 0100 	mov.w	r1, #0
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	f04f 0300 	mov.w	r3, #0
 8004c72:	00cb      	lsls	r3, r1, #3
 8004c74:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004c78:	00c2      	lsls	r2, r0, #3
 8004c7a:	4630      	mov	r0, r6
 8004c7c:	f04f 0100 	mov.w	r1, #0
 8004c80:	f04f 0200 	mov.w	r2, #0
 8004c84:	f04f 0300 	mov.w	r3, #0
 8004c88:	00cb      	lsls	r3, r1, #3
 8004c8a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004c8e:	00c2      	lsls	r2, r0, #3
 8004c90:	1df3      	adds	r3, r6, #7
 8004c92:	08db      	lsrs	r3, r3, #3
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	ebad 0d03 	sub.w	sp, sp, r3
 8004c9a:	466b      	mov	r3, sp
 8004c9c:	3300      	adds	r3, #0
 8004c9e:	60fb      	str	r3, [r7, #12]
	memset( dataArr, 0, size ) ;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 fa5e 	bl	8005168 <memset>
	memcpy( dataArr, _data, size - 1 ) ;
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	6839      	ldr	r1, [r7, #0]
 8004cb6:	f000 fa49 	bl	800514c <memcpy>
	uint64_t data = 0x0000000000000000000000000000000000000000 ;
 8004cba:	f04f 0200 	mov.w	r2, #0
 8004cbe:	f04f 0300 	mov.w	r3, #0
 8004cc2:	e9c7 2308 	strd	r2, r3, [r7, #32]

	for( int i = 0; i < size; i += 8 ){
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	61fb      	str	r3, [r7, #28]
 8004cca:	e053      	b.n	8004d74 <Flash_write+0x138>
		for( int j = 0; j < 8; j++ ){
 8004ccc:	2300      	movs	r3, #0
 8004cce:	61bb      	str	r3, [r7, #24]
 8004cd0:	e03c      	b.n	8004d4c <Flash_write+0x110>
			if( dataArr[ i + j ] == '\0' ) {
 8004cd2:	69fa      	ldr	r2, [r7, #28]
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	5cd3      	ldrb	r3, [r2, r3]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d116      	bne.n	8004d0e <Flash_write+0xd2>
				data <<= (8-j)*8 ;
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	f1c3 0308 	rsb	r3, r3, #8
 8004ce6:	00d9      	lsls	r1, r3, #3
 8004ce8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cec:	f1a1 0620 	sub.w	r6, r1, #32
 8004cf0:	f1c1 0020 	rsb	r0, r1, #32
 8004cf4:	fa03 f501 	lsl.w	r5, r3, r1
 8004cf8:	fa02 f606 	lsl.w	r6, r2, r6
 8004cfc:	4335      	orrs	r5, r6
 8004cfe:	fa22 f000 	lsr.w	r0, r2, r0
 8004d02:	4305      	orrs	r5, r0
 8004d04:	fa02 f401 	lsl.w	r4, r2, r1
 8004d08:	e9c7 4508 	strd	r4, r5, [r7, #32]
				break ;
 8004d0c:	e021      	b.n	8004d52 <Flash_write+0x116>
			}else {
				data <<= 8 ;
 8004d0e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004d12:	f04f 0200 	mov.w	r2, #0
 8004d16:	f04f 0300 	mov.w	r3, #0
 8004d1a:	020b      	lsls	r3, r1, #8
 8004d1c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004d20:	0202      	lsls	r2, r0, #8
 8004d22:	e9c7 2308 	strd	r2, r3, [r7, #32]
				data |= dataArr[ i + j ] ;
 8004d26:	69fa      	ldr	r2, [r7, #28]
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	5cd3      	ldrb	r3, [r2, r3]
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	f04f 0300 	mov.w	r3, #0
 8004d36:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004d3a:	ea40 0802 	orr.w	r8, r0, r2
 8004d3e:	ea41 0903 	orr.w	r9, r1, r3
 8004d42:	e9c7 8908 	strd	r8, r9, [r7, #32]
		for( int j = 0; j < 8; j++ ){
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	61bb      	str	r3, [r7, #24]
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	2b07      	cmp	r3, #7
 8004d50:	ddbf      	ble.n	8004cd2 <Flash_write+0x96>
			}
		}
		HAL_FLASH_Program( FLASH_TYPEPROGRAM_DOUBLEWORD, _address + i, data ) ;
 8004d52:	69fa      	ldr	r2, [r7, #28]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	18d1      	adds	r1, r2, r3
 8004d58:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	f7fc fed3 	bl	8001b08 <HAL_FLASH_Program>
		data = 0x000000000000000000000000000000000000 ;
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for( int i = 0; i < size; i += 8 ){
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	3308      	adds	r3, #8
 8004d72:	61fb      	str	r3, [r7, #28]
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d8a7      	bhi.n	8004ccc <Flash_write+0x90>
	}

	HAL_FLASH_Lock() ;
 8004d7c:	f7fc ff52 	bl	8001c24 <HAL_FLASH_Lock>
 8004d80:	46d5      	mov	sp, sl
}
 8004d82:	bf00      	nop
 8004d84:	3728      	adds	r7, #40	; 0x28
 8004d86:	46bd      	mov	sp, r7
 8004d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004d8c <Flash_read_doubleWord>:



/*_________________________________________________________________________________________________________________________________*/
char* Flash_read_doubleWord( uint64_t _Address ) {
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b088      	sub	sp, #32
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	e9c7 0100 	strd	r0, r1, [r7]
	static char result[ 8 + 1 ] ;
	char temp[8] = {0} ;
 8004d96:	2300      	movs	r3, #0
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61bb      	str	r3, [r7, #24]
	memset( result, 0x00 , 8 + 1 ) ;
 8004d9e:	2209      	movs	r2, #9
 8004da0:	2100      	movs	r1, #0
 8004da2:	4823      	ldr	r0, [pc, #140]	; (8004e30 <Flash_read_doubleWord+0xa4>)
 8004da4:	f000 f9e0 	bl	8005168 <memset>
	memset( temp, 0xFF , 8 ) ;
 8004da8:	f107 0314 	add.w	r3, r7, #20
 8004dac:	2208      	movs	r2, #8
 8004dae:	21ff      	movs	r1, #255	; 0xff
 8004db0:	4618      	mov	r0, r3
 8004db2:	f000 f9d9 	bl	8005168 <memset>
	uint64_t data[1] ;
	*data = *(__IO uint64_t *)_Address ;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbc:	e9c7 2302 	strd	r2, r3, [r7, #8]

	for( int i = 0; i < 8; i++ ){
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	61fb      	str	r3, [r7, #28]
 8004dc4:	e023      	b.n	8004e0e <Flash_read_doubleWord+0x82>
		temp[ 7-i ] &= data[0] ;
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	f1c3 0307 	rsb	r3, r3, #7
 8004dcc:	f107 0220 	add.w	r2, r7, #32
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 8004dd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	f1c3 0307 	rsb	r3, r3, #7
 8004de2:	400a      	ands	r2, r1
 8004de4:	b2d2      	uxtb	r2, r2
 8004de6:	f107 0120 	add.w	r1, r7, #32
 8004dea:	440b      	add	r3, r1
 8004dec:	f803 2c0c 	strb.w	r2, [r3, #-12]
		data[0] >>= 8 ;
 8004df0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004df4:	f04f 0200 	mov.w	r2, #0
 8004df8:	f04f 0300 	mov.w	r3, #0
 8004dfc:	0a02      	lsrs	r2, r0, #8
 8004dfe:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004e02:	0a0b      	lsrs	r3, r1, #8
 8004e04:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for( int i = 0; i < 8; i++ ){
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	61fb      	str	r3, [r7, #28]
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	2b07      	cmp	r3, #7
 8004e12:	ddd8      	ble.n	8004dc6 <Flash_read_doubleWord+0x3a>
	}

	memcpy( result, temp, 8 ) ;
 8004e14:	4b06      	ldr	r3, [pc, #24]	; (8004e30 <Flash_read_doubleWord+0xa4>)
 8004e16:	461a      	mov	r2, r3
 8004e18:	f107 0314 	add.w	r3, r7, #20
 8004e1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004e20:	e882 0003 	stmia.w	r2, {r0, r1}
	return result ;
 8004e24:	4b02      	ldr	r3, [pc, #8]	; (8004e30 <Flash_read_doubleWord+0xa4>)
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3720      	adds	r7, #32
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000224 	.word	0x20000224

08004e34 <Flash_read>:



/*_________________________________________________________________________________________________________________________________*/
void  Flash_read( uint64_t _fromAddress, uint64_t _toAddress, char* _result ) {
 8004e34:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004e38:	b088      	sub	sp, #32
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004e40:	e9c7 2300 	strd	r2, r3, [r7]
 8004e44:	466b      	mov	r3, sp
 8004e46:	461d      	mov	r5, r3
	unsigned int size = ( unsigned int )( _toAddress - _fromAddress )  ;
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	61bb      	str	r3, [r7, #24]
	char result[ size + 1 ] ;
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	1c5c      	adds	r4, r3, #1
 8004e54:	4623      	mov	r3, r4
 8004e56:	3b01      	subs	r3, #1
 8004e58:	617b      	str	r3, [r7, #20]
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	f04f 0100 	mov.w	r1, #0
 8004e60:	f04f 0200 	mov.w	r2, #0
 8004e64:	f04f 0300 	mov.w	r3, #0
 8004e68:	00cb      	lsls	r3, r1, #3
 8004e6a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004e6e:	00c2      	lsls	r2, r0, #3
 8004e70:	4620      	mov	r0, r4
 8004e72:	f04f 0100 	mov.w	r1, #0
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	f04f 0300 	mov.w	r3, #0
 8004e7e:	00cb      	lsls	r3, r1, #3
 8004e80:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004e84:	00c2      	lsls	r2, r0, #3
 8004e86:	1de3      	adds	r3, r4, #7
 8004e88:	08db      	lsrs	r3, r3, #3
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	ebad 0d03 	sub.w	sp, sp, r3
 8004e90:	466b      	mov	r3, sp
 8004e92:	3300      	adds	r3, #0
 8004e94:	613b      	str	r3, [r7, #16]
	memset( result, 0, size ) ;
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 f963 	bl	8005168 <memset>

	for( int i = 0; i < size; i += 8 ) {
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	61fb      	str	r3, [r7, #28]
 8004ea6:	e016      	b.n	8004ed6 <Flash_read+0xa2>
		strcat( result, Flash_read_doubleWord( _fromAddress + i ) ) ;
 8004ea8:	693c      	ldr	r4, [r7, #16]
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	4618      	mov	r0, r3
 8004eae:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8004eb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004eb6:	eb10 0802 	adds.w	r8, r0, r2
 8004eba:	eb41 0903 	adc.w	r9, r1, r3
 8004ebe:	4640      	mov	r0, r8
 8004ec0:	4649      	mov	r1, r9
 8004ec2:	f7ff ff63 	bl	8004d8c <Flash_read_doubleWord>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	4619      	mov	r1, r3
 8004eca:	4620      	mov	r0, r4
 8004ecc:	f000 fff4 	bl	8005eb8 <strcat>
	for( int i = 0; i < size; i += 8 ) {
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	3308      	adds	r3, #8
 8004ed4:	61fb      	str	r3, [r7, #28]
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d8e4      	bhi.n	8004ea8 <Flash_read+0x74>
	}

	memcpy( _result, result, strlen( result ) ) ;
 8004ede:	693c      	ldr	r4, [r7, #16]
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fb f974 	bl	80001d0 <strlen>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	461a      	mov	r2, r3
 8004eec:	4621      	mov	r1, r4
 8004eee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ef0:	f000 f92c 	bl	800514c <memcpy>
 8004ef4:	46ad      	mov	sp, r5
}
 8004ef6:	bf00      	nop
 8004ef8:	3720      	adds	r7, #32
 8004efa:	46bd      	mov	sp, r7
 8004efc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08004f00 <sim7600_init>:
char sim_rxByte[ 1 ] = {0} ;
unsigned int sim_rxCnt = 0 ;



void sim7600_init() {
 8004f00:	b580      	push	{r7, lr}
 8004f02:	af00      	add	r7, sp, #0
	sim7600_memreset() ;
 8004f04:	f000 f83a 	bl	8004f7c <sim7600_memreset>
	HAL_UART_Receive_IT( &SIM_UART_TXRX, (uint8_t*)sim_rxByte, 1 ) ;
 8004f08:	2201      	movs	r2, #1
 8004f0a:	4903      	ldr	r1, [pc, #12]	; (8004f18 <sim7600_init+0x18>)
 8004f0c:	4803      	ldr	r0, [pc, #12]	; (8004f1c <sim7600_init+0x1c>)
 8004f0e:	f7fe fe4b 	bl	8003ba8 <HAL_UART_Receive_IT>
}
 8004f12:	bf00      	nop
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20000618 	.word	0x20000618
 8004f1c:	20000a1c 	.word	0x20000a1c

08004f20 <sim7600_irqProcess>:



void sim7600_irqProcess() {
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
	if(  sim_rxByte[0] == '\r' ){
 8004f24:	4b10      	ldr	r3, [pc, #64]	; (8004f68 <sim7600_irqProcess+0x48>)
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2b0d      	cmp	r3, #13
 8004f2a:	d106      	bne.n	8004f3a <sim7600_irqProcess+0x1a>
		sim_rxDone_Flag = 1 ;
 8004f2c:	4b0f      	ldr	r3, [pc, #60]	; (8004f6c <sim7600_irqProcess+0x4c>)
 8004f2e:	2201      	movs	r2, #1
 8004f30:	701a      	strb	r2, [r3, #0]
 8004f32:	4b0d      	ldr	r3, [pc, #52]	; (8004f68 <sim7600_irqProcess+0x48>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	701a      	strb	r2, [r3, #0]
 8004f38:	e00f      	b.n	8004f5a <sim7600_irqProcess+0x3a>
		memset( sim_rxByte, 0, 1 ) ;
	}else{
		sim_rxData[ sim_rxCnt ] = sim_rxByte[0] ;
 8004f3a:	4b0d      	ldr	r3, [pc, #52]	; (8004f70 <sim7600_irqProcess+0x50>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a0a      	ldr	r2, [pc, #40]	; (8004f68 <sim7600_irqProcess+0x48>)
 8004f40:	7811      	ldrb	r1, [r2, #0]
 8004f42:	4a0c      	ldr	r2, [pc, #48]	; (8004f74 <sim7600_irqProcess+0x54>)
 8004f44:	54d1      	strb	r1, [r2, r3]
		if ( sim_rxCnt < SIM_RXDATA_MAX ) sim_rxCnt++ ;
 8004f46:	4b0a      	ldr	r3, [pc, #40]	; (8004f70 <sim7600_irqProcess+0x50>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f4e:	d204      	bcs.n	8004f5a <sim7600_irqProcess+0x3a>
 8004f50:	4b07      	ldr	r3, [pc, #28]	; (8004f70 <sim7600_irqProcess+0x50>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	3301      	adds	r3, #1
 8004f56:	4a06      	ldr	r2, [pc, #24]	; (8004f70 <sim7600_irqProcess+0x50>)
 8004f58:	6013      	str	r3, [r2, #0]
	}
	HAL_UART_Receive_IT( &SIM_UART_TXRX, (uint8_t*)sim_rxByte, 1 ) ;
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	4902      	ldr	r1, [pc, #8]	; (8004f68 <sim7600_irqProcess+0x48>)
 8004f5e:	4806      	ldr	r0, [pc, #24]	; (8004f78 <sim7600_irqProcess+0x58>)
 8004f60:	f7fe fe22 	bl	8003ba8 <HAL_UART_Receive_IT>
}
 8004f64:	bf00      	nop
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	20000618 	.word	0x20000618
 8004f6c:	2000022d 	.word	0x2000022d
 8004f70:	2000061c 	.word	0x2000061c
 8004f74:	20000230 	.word	0x20000230
 8004f78:	20000a1c 	.word	0x20000a1c

08004f7c <sim7600_memreset>:
    return answer;
}



void sim7600_memreset() {
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
    sim_rxCnt = 0 ;
 8004f80:	4b06      	ldr	r3, [pc, #24]	; (8004f9c <sim7600_memreset+0x20>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]
    sim_rxDone_Flag = 0 ;
 8004f86:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <sim7600_memreset+0x24>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	701a      	strb	r2, [r3, #0]
    memset( sim_rxData, 0, SIM_RXDATA_MAX );
 8004f8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f90:	2100      	movs	r1, #0
 8004f92:	4804      	ldr	r0, [pc, #16]	; (8004fa4 <sim7600_memreset+0x28>)
 8004f94:	f000 f8e8 	bl	8005168 <memset>
}
 8004f98:	bf00      	nop
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	2000061c 	.word	0x2000061c
 8004fa0:	2000022d 	.word	0x2000022d
 8004fa4:	20000230 	.word	0x20000230

08004fa8 <terminal_init>:
_Bool terminal_rxDone_Flag = 0 ;
static char terminal_rxData[ TERMINAL_RXDATA_MAX ] = {0} ;
char rxByte[1] = {0} ;
unsigned int rxCnt = 0 ;

void terminal_init() {
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	af00      	add	r7, sp, #0
	terminal_memreset() ;
 8004fac:	f000 f83a 	bl	8005024 <terminal_memreset>
	HAL_UART_Receive_IT( &TERMINAL_TXRX, (uint8_t*)rxByte, 1 ) ;
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	4903      	ldr	r1, [pc, #12]	; (8004fc0 <terminal_init+0x18>)
 8004fb4:	4803      	ldr	r0, [pc, #12]	; (8004fc4 <terminal_init+0x1c>)
 8004fb6:	f7fe fdf7 	bl	8003ba8 <HAL_UART_Receive_IT>
}
 8004fba:	bf00      	nop
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	20000a0c 	.word	0x20000a0c
 8004fc4:	20000aa0 	.word	0x20000aa0

08004fc8 <terminal_irqProcess>:



void terminal_irqProcess() {
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
	if(  rxByte[0] == '\r' ){
 8004fcc:	4b10      	ldr	r3, [pc, #64]	; (8005010 <terminal_irqProcess+0x48>)
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	2b0d      	cmp	r3, #13
 8004fd2:	d106      	bne.n	8004fe2 <terminal_irqProcess+0x1a>
		terminal_rxDone_Flag = 1 ;
 8004fd4:	4b0f      	ldr	r3, [pc, #60]	; (8005014 <terminal_irqProcess+0x4c>)
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	701a      	strb	r2, [r3, #0]
 8004fda:	4b0d      	ldr	r3, [pc, #52]	; (8005010 <terminal_irqProcess+0x48>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	701a      	strb	r2, [r3, #0]
 8004fe0:	e00f      	b.n	8005002 <terminal_irqProcess+0x3a>
		memset( rxByte, 0, 1 ) ;
	}else{
		terminal_rxData[ rxCnt ] = rxByte[0] ;
 8004fe2:	4b0d      	ldr	r3, [pc, #52]	; (8005018 <terminal_irqProcess+0x50>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a0a      	ldr	r2, [pc, #40]	; (8005010 <terminal_irqProcess+0x48>)
 8004fe8:	7811      	ldrb	r1, [r2, #0]
 8004fea:	4a0c      	ldr	r2, [pc, #48]	; (800501c <terminal_irqProcess+0x54>)
 8004fec:	54d1      	strb	r1, [r2, r3]
		if ( rxCnt < TERMINAL_RXDATA_MAX ) rxCnt++ ;
 8004fee:	4b0a      	ldr	r3, [pc, #40]	; (8005018 <terminal_irqProcess+0x50>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ff6:	d204      	bcs.n	8005002 <terminal_irqProcess+0x3a>
 8004ff8:	4b07      	ldr	r3, [pc, #28]	; (8005018 <terminal_irqProcess+0x50>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	4a06      	ldr	r2, [pc, #24]	; (8005018 <terminal_irqProcess+0x50>)
 8005000:	6013      	str	r3, [r2, #0]
	}
	HAL_UART_Receive_IT( &TERMINAL_TXRX, (uint8_t*)rxByte, 1 ) ;
 8005002:	2201      	movs	r2, #1
 8005004:	4902      	ldr	r1, [pc, #8]	; (8005010 <terminal_irqProcess+0x48>)
 8005006:	4806      	ldr	r0, [pc, #24]	; (8005020 <terminal_irqProcess+0x58>)
 8005008:	f7fe fdce 	bl	8003ba8 <HAL_UART_Receive_IT>
}
 800500c:	bf00      	nop
 800500e:	bd80      	pop	{r7, pc}
 8005010:	20000a0c 	.word	0x20000a0c
 8005014:	20000620 	.word	0x20000620
 8005018:	20000a10 	.word	0x20000a10
 800501c:	20000624 	.word	0x20000624
 8005020:	20000aa0 	.word	0x20000aa0

08005024 <terminal_memreset>:



void terminal_memreset() {
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
    rxCnt = 0 ;
 8005028:	4b06      	ldr	r3, [pc, #24]	; (8005044 <terminal_memreset+0x20>)
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]
    terminal_rxDone_Flag = 0 ;
 800502e:	4b06      	ldr	r3, [pc, #24]	; (8005048 <terminal_memreset+0x24>)
 8005030:	2200      	movs	r2, #0
 8005032:	701a      	strb	r2, [r3, #0]
    memset( terminal_rxData, 0, TERMINAL_RXDATA_MAX );
 8005034:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005038:	2100      	movs	r1, #0
 800503a:	4804      	ldr	r0, [pc, #16]	; (800504c <terminal_memreset+0x28>)
 800503c:	f000 f894 	bl	8005168 <memset>
}
 8005040:	bf00      	nop
 8005042:	bd80      	pop	{r7, pc}
 8005044:	20000a10 	.word	0x20000a10
 8005048:	20000620 	.word	0x20000620
 800504c:	20000624 	.word	0x20000624

08005050 <terminal_println>:
	HAL_UART_Transmit( &TERMINAL_TXRX, (uint8_t*)_info, strlen( _info ), _timeout ) ;
}



void terminal_println( const char* _info, unsigned int _timeout ) {
 8005050:	b5b0      	push	{r4, r5, r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
 800505a:	466b      	mov	r3, sp
 800505c:	461d      	mov	r5, r3
	char info[ strlen( _info ) + 2 ]  ;
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7fb f8b6 	bl	80001d0 <strlen>
 8005064:	4603      	mov	r3, r0
 8005066:	1c9c      	adds	r4, r3, #2
 8005068:	4623      	mov	r3, r4
 800506a:	3b01      	subs	r3, #1
 800506c:	60fb      	str	r3, [r7, #12]
 800506e:	4620      	mov	r0, r4
 8005070:	f04f 0100 	mov.w	r1, #0
 8005074:	f04f 0200 	mov.w	r2, #0
 8005078:	f04f 0300 	mov.w	r3, #0
 800507c:	00cb      	lsls	r3, r1, #3
 800507e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8005082:	00c2      	lsls	r2, r0, #3
 8005084:	4620      	mov	r0, r4
 8005086:	f04f 0100 	mov.w	r1, #0
 800508a:	f04f 0200 	mov.w	r2, #0
 800508e:	f04f 0300 	mov.w	r3, #0
 8005092:	00cb      	lsls	r3, r1, #3
 8005094:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8005098:	00c2      	lsls	r2, r0, #3
 800509a:	1de3      	adds	r3, r4, #7
 800509c:	08db      	lsrs	r3, r3, #3
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	ebad 0d03 	sub.w	sp, sp, r3
 80050a4:	466b      	mov	r3, sp
 80050a6:	3300      	adds	r3, #0
 80050a8:	60bb      	str	r3, [r7, #8]
	memset( info, 0, strlen( _info ) + 2 ) ;
 80050aa:	68bc      	ldr	r4, [r7, #8]
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7fb f88f 	bl	80001d0 <strlen>
 80050b2:	4603      	mov	r3, r0
 80050b4:	3302      	adds	r3, #2
 80050b6:	461a      	mov	r2, r3
 80050b8:	2100      	movs	r1, #0
 80050ba:	4620      	mov	r0, r4
 80050bc:	f000 f854 	bl	8005168 <memset>
	sprintf( info, "\n%s", _info ) ;
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	490a      	ldr	r1, [pc, #40]	; (80050f0 <terminal_println+0xa0>)
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 fed6 	bl	8005e78 <siprintf>

	HAL_UART_Transmit( &TERMINAL_TXRX, (uint8_t*)info, strlen( info ), _timeout ) ;
 80050cc:	68bc      	ldr	r4, [r7, #8]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7fb f87d 	bl	80001d0 <strlen>
 80050d6:	4603      	mov	r3, r0
 80050d8:	b29a      	uxth	r2, r3
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	4621      	mov	r1, r4
 80050de:	4805      	ldr	r0, [pc, #20]	; (80050f4 <terminal_println+0xa4>)
 80050e0:	f7fe fcce 	bl	8003a80 <HAL_UART_Transmit>
 80050e4:	46ad      	mov	sp, r5
}
 80050e6:	bf00      	nop
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bdb0      	pop	{r4, r5, r7, pc}
 80050ee:	bf00      	nop
 80050f0:	08009a1c 	.word	0x08009a1c
 80050f4:	20000aa0 	.word	0x20000aa0

080050f8 <__errno>:
 80050f8:	4b01      	ldr	r3, [pc, #4]	; (8005100 <__errno+0x8>)
 80050fa:	6818      	ldr	r0, [r3, #0]
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	2000002c 	.word	0x2000002c

08005104 <__libc_init_array>:
 8005104:	b570      	push	{r4, r5, r6, lr}
 8005106:	4d0d      	ldr	r5, [pc, #52]	; (800513c <__libc_init_array+0x38>)
 8005108:	4c0d      	ldr	r4, [pc, #52]	; (8005140 <__libc_init_array+0x3c>)
 800510a:	1b64      	subs	r4, r4, r5
 800510c:	10a4      	asrs	r4, r4, #2
 800510e:	2600      	movs	r6, #0
 8005110:	42a6      	cmp	r6, r4
 8005112:	d109      	bne.n	8005128 <__libc_init_array+0x24>
 8005114:	4d0b      	ldr	r5, [pc, #44]	; (8005144 <__libc_init_array+0x40>)
 8005116:	4c0c      	ldr	r4, [pc, #48]	; (8005148 <__libc_init_array+0x44>)
 8005118:	f004 fc56 	bl	80099c8 <_init>
 800511c:	1b64      	subs	r4, r4, r5
 800511e:	10a4      	asrs	r4, r4, #2
 8005120:	2600      	movs	r6, #0
 8005122:	42a6      	cmp	r6, r4
 8005124:	d105      	bne.n	8005132 <__libc_init_array+0x2e>
 8005126:	bd70      	pop	{r4, r5, r6, pc}
 8005128:	f855 3b04 	ldr.w	r3, [r5], #4
 800512c:	4798      	blx	r3
 800512e:	3601      	adds	r6, #1
 8005130:	e7ee      	b.n	8005110 <__libc_init_array+0xc>
 8005132:	f855 3b04 	ldr.w	r3, [r5], #4
 8005136:	4798      	blx	r3
 8005138:	3601      	adds	r6, #1
 800513a:	e7f2      	b.n	8005122 <__libc_init_array+0x1e>
 800513c:	08009f24 	.word	0x08009f24
 8005140:	08009f24 	.word	0x08009f24
 8005144:	08009f24 	.word	0x08009f24
 8005148:	08009f28 	.word	0x08009f28

0800514c <memcpy>:
 800514c:	440a      	add	r2, r1
 800514e:	4291      	cmp	r1, r2
 8005150:	f100 33ff 	add.w	r3, r0, #4294967295
 8005154:	d100      	bne.n	8005158 <memcpy+0xc>
 8005156:	4770      	bx	lr
 8005158:	b510      	push	{r4, lr}
 800515a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800515e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005162:	4291      	cmp	r1, r2
 8005164:	d1f9      	bne.n	800515a <memcpy+0xe>
 8005166:	bd10      	pop	{r4, pc}

08005168 <memset>:
 8005168:	4402      	add	r2, r0
 800516a:	4603      	mov	r3, r0
 800516c:	4293      	cmp	r3, r2
 800516e:	d100      	bne.n	8005172 <memset+0xa>
 8005170:	4770      	bx	lr
 8005172:	f803 1b01 	strb.w	r1, [r3], #1
 8005176:	e7f9      	b.n	800516c <memset+0x4>

08005178 <__cvt>:
 8005178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800517c:	ec55 4b10 	vmov	r4, r5, d0
 8005180:	2d00      	cmp	r5, #0
 8005182:	460e      	mov	r6, r1
 8005184:	4619      	mov	r1, r3
 8005186:	462b      	mov	r3, r5
 8005188:	bfbb      	ittet	lt
 800518a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800518e:	461d      	movlt	r5, r3
 8005190:	2300      	movge	r3, #0
 8005192:	232d      	movlt	r3, #45	; 0x2d
 8005194:	700b      	strb	r3, [r1, #0]
 8005196:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005198:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800519c:	4691      	mov	r9, r2
 800519e:	f023 0820 	bic.w	r8, r3, #32
 80051a2:	bfbc      	itt	lt
 80051a4:	4622      	movlt	r2, r4
 80051a6:	4614      	movlt	r4, r2
 80051a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80051ac:	d005      	beq.n	80051ba <__cvt+0x42>
 80051ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80051b2:	d100      	bne.n	80051b6 <__cvt+0x3e>
 80051b4:	3601      	adds	r6, #1
 80051b6:	2102      	movs	r1, #2
 80051b8:	e000      	b.n	80051bc <__cvt+0x44>
 80051ba:	2103      	movs	r1, #3
 80051bc:	ab03      	add	r3, sp, #12
 80051be:	9301      	str	r3, [sp, #4]
 80051c0:	ab02      	add	r3, sp, #8
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	ec45 4b10 	vmov	d0, r4, r5
 80051c8:	4653      	mov	r3, sl
 80051ca:	4632      	mov	r2, r6
 80051cc:	f001 fdc4 	bl	8006d58 <_dtoa_r>
 80051d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80051d4:	4607      	mov	r7, r0
 80051d6:	d102      	bne.n	80051de <__cvt+0x66>
 80051d8:	f019 0f01 	tst.w	r9, #1
 80051dc:	d022      	beq.n	8005224 <__cvt+0xac>
 80051de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80051e2:	eb07 0906 	add.w	r9, r7, r6
 80051e6:	d110      	bne.n	800520a <__cvt+0x92>
 80051e8:	783b      	ldrb	r3, [r7, #0]
 80051ea:	2b30      	cmp	r3, #48	; 0x30
 80051ec:	d10a      	bne.n	8005204 <__cvt+0x8c>
 80051ee:	2200      	movs	r2, #0
 80051f0:	2300      	movs	r3, #0
 80051f2:	4620      	mov	r0, r4
 80051f4:	4629      	mov	r1, r5
 80051f6:	f7fb fc67 	bl	8000ac8 <__aeabi_dcmpeq>
 80051fa:	b918      	cbnz	r0, 8005204 <__cvt+0x8c>
 80051fc:	f1c6 0601 	rsb	r6, r6, #1
 8005200:	f8ca 6000 	str.w	r6, [sl]
 8005204:	f8da 3000 	ldr.w	r3, [sl]
 8005208:	4499      	add	r9, r3
 800520a:	2200      	movs	r2, #0
 800520c:	2300      	movs	r3, #0
 800520e:	4620      	mov	r0, r4
 8005210:	4629      	mov	r1, r5
 8005212:	f7fb fc59 	bl	8000ac8 <__aeabi_dcmpeq>
 8005216:	b108      	cbz	r0, 800521c <__cvt+0xa4>
 8005218:	f8cd 900c 	str.w	r9, [sp, #12]
 800521c:	2230      	movs	r2, #48	; 0x30
 800521e:	9b03      	ldr	r3, [sp, #12]
 8005220:	454b      	cmp	r3, r9
 8005222:	d307      	bcc.n	8005234 <__cvt+0xbc>
 8005224:	9b03      	ldr	r3, [sp, #12]
 8005226:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005228:	1bdb      	subs	r3, r3, r7
 800522a:	4638      	mov	r0, r7
 800522c:	6013      	str	r3, [r2, #0]
 800522e:	b004      	add	sp, #16
 8005230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005234:	1c59      	adds	r1, r3, #1
 8005236:	9103      	str	r1, [sp, #12]
 8005238:	701a      	strb	r2, [r3, #0]
 800523a:	e7f0      	b.n	800521e <__cvt+0xa6>

0800523c <__exponent>:
 800523c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800523e:	4603      	mov	r3, r0
 8005240:	2900      	cmp	r1, #0
 8005242:	bfb8      	it	lt
 8005244:	4249      	neglt	r1, r1
 8005246:	f803 2b02 	strb.w	r2, [r3], #2
 800524a:	bfb4      	ite	lt
 800524c:	222d      	movlt	r2, #45	; 0x2d
 800524e:	222b      	movge	r2, #43	; 0x2b
 8005250:	2909      	cmp	r1, #9
 8005252:	7042      	strb	r2, [r0, #1]
 8005254:	dd2a      	ble.n	80052ac <__exponent+0x70>
 8005256:	f10d 0407 	add.w	r4, sp, #7
 800525a:	46a4      	mov	ip, r4
 800525c:	270a      	movs	r7, #10
 800525e:	46a6      	mov	lr, r4
 8005260:	460a      	mov	r2, r1
 8005262:	fb91 f6f7 	sdiv	r6, r1, r7
 8005266:	fb07 1516 	mls	r5, r7, r6, r1
 800526a:	3530      	adds	r5, #48	; 0x30
 800526c:	2a63      	cmp	r2, #99	; 0x63
 800526e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005272:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005276:	4631      	mov	r1, r6
 8005278:	dcf1      	bgt.n	800525e <__exponent+0x22>
 800527a:	3130      	adds	r1, #48	; 0x30
 800527c:	f1ae 0502 	sub.w	r5, lr, #2
 8005280:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005284:	1c44      	adds	r4, r0, #1
 8005286:	4629      	mov	r1, r5
 8005288:	4561      	cmp	r1, ip
 800528a:	d30a      	bcc.n	80052a2 <__exponent+0x66>
 800528c:	f10d 0209 	add.w	r2, sp, #9
 8005290:	eba2 020e 	sub.w	r2, r2, lr
 8005294:	4565      	cmp	r5, ip
 8005296:	bf88      	it	hi
 8005298:	2200      	movhi	r2, #0
 800529a:	4413      	add	r3, r2
 800529c:	1a18      	subs	r0, r3, r0
 800529e:	b003      	add	sp, #12
 80052a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80052aa:	e7ed      	b.n	8005288 <__exponent+0x4c>
 80052ac:	2330      	movs	r3, #48	; 0x30
 80052ae:	3130      	adds	r1, #48	; 0x30
 80052b0:	7083      	strb	r3, [r0, #2]
 80052b2:	70c1      	strb	r1, [r0, #3]
 80052b4:	1d03      	adds	r3, r0, #4
 80052b6:	e7f1      	b.n	800529c <__exponent+0x60>

080052b8 <_printf_float>:
 80052b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052bc:	ed2d 8b02 	vpush	{d8}
 80052c0:	b08d      	sub	sp, #52	; 0x34
 80052c2:	460c      	mov	r4, r1
 80052c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80052c8:	4616      	mov	r6, r2
 80052ca:	461f      	mov	r7, r3
 80052cc:	4605      	mov	r5, r0
 80052ce:	f002 fe9f 	bl	8008010 <_localeconv_r>
 80052d2:	f8d0 a000 	ldr.w	sl, [r0]
 80052d6:	4650      	mov	r0, sl
 80052d8:	f7fa ff7a 	bl	80001d0 <strlen>
 80052dc:	2300      	movs	r3, #0
 80052de:	930a      	str	r3, [sp, #40]	; 0x28
 80052e0:	6823      	ldr	r3, [r4, #0]
 80052e2:	9305      	str	r3, [sp, #20]
 80052e4:	f8d8 3000 	ldr.w	r3, [r8]
 80052e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80052ec:	3307      	adds	r3, #7
 80052ee:	f023 0307 	bic.w	r3, r3, #7
 80052f2:	f103 0208 	add.w	r2, r3, #8
 80052f6:	f8c8 2000 	str.w	r2, [r8]
 80052fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005302:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005306:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800530a:	9307      	str	r3, [sp, #28]
 800530c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005310:	ee08 0a10 	vmov	s16, r0
 8005314:	4b9f      	ldr	r3, [pc, #636]	; (8005594 <_printf_float+0x2dc>)
 8005316:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800531a:	f04f 32ff 	mov.w	r2, #4294967295
 800531e:	f7fb fc05 	bl	8000b2c <__aeabi_dcmpun>
 8005322:	bb88      	cbnz	r0, 8005388 <_printf_float+0xd0>
 8005324:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005328:	4b9a      	ldr	r3, [pc, #616]	; (8005594 <_printf_float+0x2dc>)
 800532a:	f04f 32ff 	mov.w	r2, #4294967295
 800532e:	f7fb fbdf 	bl	8000af0 <__aeabi_dcmple>
 8005332:	bb48      	cbnz	r0, 8005388 <_printf_float+0xd0>
 8005334:	2200      	movs	r2, #0
 8005336:	2300      	movs	r3, #0
 8005338:	4640      	mov	r0, r8
 800533a:	4649      	mov	r1, r9
 800533c:	f7fb fbce 	bl	8000adc <__aeabi_dcmplt>
 8005340:	b110      	cbz	r0, 8005348 <_printf_float+0x90>
 8005342:	232d      	movs	r3, #45	; 0x2d
 8005344:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005348:	4b93      	ldr	r3, [pc, #588]	; (8005598 <_printf_float+0x2e0>)
 800534a:	4894      	ldr	r0, [pc, #592]	; (800559c <_printf_float+0x2e4>)
 800534c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005350:	bf94      	ite	ls
 8005352:	4698      	movls	r8, r3
 8005354:	4680      	movhi	r8, r0
 8005356:	2303      	movs	r3, #3
 8005358:	6123      	str	r3, [r4, #16]
 800535a:	9b05      	ldr	r3, [sp, #20]
 800535c:	f023 0204 	bic.w	r2, r3, #4
 8005360:	6022      	str	r2, [r4, #0]
 8005362:	f04f 0900 	mov.w	r9, #0
 8005366:	9700      	str	r7, [sp, #0]
 8005368:	4633      	mov	r3, r6
 800536a:	aa0b      	add	r2, sp, #44	; 0x2c
 800536c:	4621      	mov	r1, r4
 800536e:	4628      	mov	r0, r5
 8005370:	f000 f9d8 	bl	8005724 <_printf_common>
 8005374:	3001      	adds	r0, #1
 8005376:	f040 8090 	bne.w	800549a <_printf_float+0x1e2>
 800537a:	f04f 30ff 	mov.w	r0, #4294967295
 800537e:	b00d      	add	sp, #52	; 0x34
 8005380:	ecbd 8b02 	vpop	{d8}
 8005384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005388:	4642      	mov	r2, r8
 800538a:	464b      	mov	r3, r9
 800538c:	4640      	mov	r0, r8
 800538e:	4649      	mov	r1, r9
 8005390:	f7fb fbcc 	bl	8000b2c <__aeabi_dcmpun>
 8005394:	b140      	cbz	r0, 80053a8 <_printf_float+0xf0>
 8005396:	464b      	mov	r3, r9
 8005398:	2b00      	cmp	r3, #0
 800539a:	bfbc      	itt	lt
 800539c:	232d      	movlt	r3, #45	; 0x2d
 800539e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80053a2:	487f      	ldr	r0, [pc, #508]	; (80055a0 <_printf_float+0x2e8>)
 80053a4:	4b7f      	ldr	r3, [pc, #508]	; (80055a4 <_printf_float+0x2ec>)
 80053a6:	e7d1      	b.n	800534c <_printf_float+0x94>
 80053a8:	6863      	ldr	r3, [r4, #4]
 80053aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80053ae:	9206      	str	r2, [sp, #24]
 80053b0:	1c5a      	adds	r2, r3, #1
 80053b2:	d13f      	bne.n	8005434 <_printf_float+0x17c>
 80053b4:	2306      	movs	r3, #6
 80053b6:	6063      	str	r3, [r4, #4]
 80053b8:	9b05      	ldr	r3, [sp, #20]
 80053ba:	6861      	ldr	r1, [r4, #4]
 80053bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80053c0:	2300      	movs	r3, #0
 80053c2:	9303      	str	r3, [sp, #12]
 80053c4:	ab0a      	add	r3, sp, #40	; 0x28
 80053c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80053ca:	ab09      	add	r3, sp, #36	; 0x24
 80053cc:	ec49 8b10 	vmov	d0, r8, r9
 80053d0:	9300      	str	r3, [sp, #0]
 80053d2:	6022      	str	r2, [r4, #0]
 80053d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80053d8:	4628      	mov	r0, r5
 80053da:	f7ff fecd 	bl	8005178 <__cvt>
 80053de:	9b06      	ldr	r3, [sp, #24]
 80053e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053e2:	2b47      	cmp	r3, #71	; 0x47
 80053e4:	4680      	mov	r8, r0
 80053e6:	d108      	bne.n	80053fa <_printf_float+0x142>
 80053e8:	1cc8      	adds	r0, r1, #3
 80053ea:	db02      	blt.n	80053f2 <_printf_float+0x13a>
 80053ec:	6863      	ldr	r3, [r4, #4]
 80053ee:	4299      	cmp	r1, r3
 80053f0:	dd41      	ble.n	8005476 <_printf_float+0x1be>
 80053f2:	f1ab 0b02 	sub.w	fp, fp, #2
 80053f6:	fa5f fb8b 	uxtb.w	fp, fp
 80053fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80053fe:	d820      	bhi.n	8005442 <_printf_float+0x18a>
 8005400:	3901      	subs	r1, #1
 8005402:	465a      	mov	r2, fp
 8005404:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005408:	9109      	str	r1, [sp, #36]	; 0x24
 800540a:	f7ff ff17 	bl	800523c <__exponent>
 800540e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005410:	1813      	adds	r3, r2, r0
 8005412:	2a01      	cmp	r2, #1
 8005414:	4681      	mov	r9, r0
 8005416:	6123      	str	r3, [r4, #16]
 8005418:	dc02      	bgt.n	8005420 <_printf_float+0x168>
 800541a:	6822      	ldr	r2, [r4, #0]
 800541c:	07d2      	lsls	r2, r2, #31
 800541e:	d501      	bpl.n	8005424 <_printf_float+0x16c>
 8005420:	3301      	adds	r3, #1
 8005422:	6123      	str	r3, [r4, #16]
 8005424:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005428:	2b00      	cmp	r3, #0
 800542a:	d09c      	beq.n	8005366 <_printf_float+0xae>
 800542c:	232d      	movs	r3, #45	; 0x2d
 800542e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005432:	e798      	b.n	8005366 <_printf_float+0xae>
 8005434:	9a06      	ldr	r2, [sp, #24]
 8005436:	2a47      	cmp	r2, #71	; 0x47
 8005438:	d1be      	bne.n	80053b8 <_printf_float+0x100>
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1bc      	bne.n	80053b8 <_printf_float+0x100>
 800543e:	2301      	movs	r3, #1
 8005440:	e7b9      	b.n	80053b6 <_printf_float+0xfe>
 8005442:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005446:	d118      	bne.n	800547a <_printf_float+0x1c2>
 8005448:	2900      	cmp	r1, #0
 800544a:	6863      	ldr	r3, [r4, #4]
 800544c:	dd0b      	ble.n	8005466 <_printf_float+0x1ae>
 800544e:	6121      	str	r1, [r4, #16]
 8005450:	b913      	cbnz	r3, 8005458 <_printf_float+0x1a0>
 8005452:	6822      	ldr	r2, [r4, #0]
 8005454:	07d0      	lsls	r0, r2, #31
 8005456:	d502      	bpl.n	800545e <_printf_float+0x1a6>
 8005458:	3301      	adds	r3, #1
 800545a:	440b      	add	r3, r1
 800545c:	6123      	str	r3, [r4, #16]
 800545e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005460:	f04f 0900 	mov.w	r9, #0
 8005464:	e7de      	b.n	8005424 <_printf_float+0x16c>
 8005466:	b913      	cbnz	r3, 800546e <_printf_float+0x1b6>
 8005468:	6822      	ldr	r2, [r4, #0]
 800546a:	07d2      	lsls	r2, r2, #31
 800546c:	d501      	bpl.n	8005472 <_printf_float+0x1ba>
 800546e:	3302      	adds	r3, #2
 8005470:	e7f4      	b.n	800545c <_printf_float+0x1a4>
 8005472:	2301      	movs	r3, #1
 8005474:	e7f2      	b.n	800545c <_printf_float+0x1a4>
 8005476:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800547a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800547c:	4299      	cmp	r1, r3
 800547e:	db05      	blt.n	800548c <_printf_float+0x1d4>
 8005480:	6823      	ldr	r3, [r4, #0]
 8005482:	6121      	str	r1, [r4, #16]
 8005484:	07d8      	lsls	r0, r3, #31
 8005486:	d5ea      	bpl.n	800545e <_printf_float+0x1a6>
 8005488:	1c4b      	adds	r3, r1, #1
 800548a:	e7e7      	b.n	800545c <_printf_float+0x1a4>
 800548c:	2900      	cmp	r1, #0
 800548e:	bfd4      	ite	le
 8005490:	f1c1 0202 	rsble	r2, r1, #2
 8005494:	2201      	movgt	r2, #1
 8005496:	4413      	add	r3, r2
 8005498:	e7e0      	b.n	800545c <_printf_float+0x1a4>
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	055a      	lsls	r2, r3, #21
 800549e:	d407      	bmi.n	80054b0 <_printf_float+0x1f8>
 80054a0:	6923      	ldr	r3, [r4, #16]
 80054a2:	4642      	mov	r2, r8
 80054a4:	4631      	mov	r1, r6
 80054a6:	4628      	mov	r0, r5
 80054a8:	47b8      	blx	r7
 80054aa:	3001      	adds	r0, #1
 80054ac:	d12c      	bne.n	8005508 <_printf_float+0x250>
 80054ae:	e764      	b.n	800537a <_printf_float+0xc2>
 80054b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80054b4:	f240 80e0 	bls.w	8005678 <_printf_float+0x3c0>
 80054b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054bc:	2200      	movs	r2, #0
 80054be:	2300      	movs	r3, #0
 80054c0:	f7fb fb02 	bl	8000ac8 <__aeabi_dcmpeq>
 80054c4:	2800      	cmp	r0, #0
 80054c6:	d034      	beq.n	8005532 <_printf_float+0x27a>
 80054c8:	4a37      	ldr	r2, [pc, #220]	; (80055a8 <_printf_float+0x2f0>)
 80054ca:	2301      	movs	r3, #1
 80054cc:	4631      	mov	r1, r6
 80054ce:	4628      	mov	r0, r5
 80054d0:	47b8      	blx	r7
 80054d2:	3001      	adds	r0, #1
 80054d4:	f43f af51 	beq.w	800537a <_printf_float+0xc2>
 80054d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054dc:	429a      	cmp	r2, r3
 80054de:	db02      	blt.n	80054e6 <_printf_float+0x22e>
 80054e0:	6823      	ldr	r3, [r4, #0]
 80054e2:	07d8      	lsls	r0, r3, #31
 80054e4:	d510      	bpl.n	8005508 <_printf_float+0x250>
 80054e6:	ee18 3a10 	vmov	r3, s16
 80054ea:	4652      	mov	r2, sl
 80054ec:	4631      	mov	r1, r6
 80054ee:	4628      	mov	r0, r5
 80054f0:	47b8      	blx	r7
 80054f2:	3001      	adds	r0, #1
 80054f4:	f43f af41 	beq.w	800537a <_printf_float+0xc2>
 80054f8:	f04f 0800 	mov.w	r8, #0
 80054fc:	f104 091a 	add.w	r9, r4, #26
 8005500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005502:	3b01      	subs	r3, #1
 8005504:	4543      	cmp	r3, r8
 8005506:	dc09      	bgt.n	800551c <_printf_float+0x264>
 8005508:	6823      	ldr	r3, [r4, #0]
 800550a:	079b      	lsls	r3, r3, #30
 800550c:	f100 8105 	bmi.w	800571a <_printf_float+0x462>
 8005510:	68e0      	ldr	r0, [r4, #12]
 8005512:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005514:	4298      	cmp	r0, r3
 8005516:	bfb8      	it	lt
 8005518:	4618      	movlt	r0, r3
 800551a:	e730      	b.n	800537e <_printf_float+0xc6>
 800551c:	2301      	movs	r3, #1
 800551e:	464a      	mov	r2, r9
 8005520:	4631      	mov	r1, r6
 8005522:	4628      	mov	r0, r5
 8005524:	47b8      	blx	r7
 8005526:	3001      	adds	r0, #1
 8005528:	f43f af27 	beq.w	800537a <_printf_float+0xc2>
 800552c:	f108 0801 	add.w	r8, r8, #1
 8005530:	e7e6      	b.n	8005500 <_printf_float+0x248>
 8005532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005534:	2b00      	cmp	r3, #0
 8005536:	dc39      	bgt.n	80055ac <_printf_float+0x2f4>
 8005538:	4a1b      	ldr	r2, [pc, #108]	; (80055a8 <_printf_float+0x2f0>)
 800553a:	2301      	movs	r3, #1
 800553c:	4631      	mov	r1, r6
 800553e:	4628      	mov	r0, r5
 8005540:	47b8      	blx	r7
 8005542:	3001      	adds	r0, #1
 8005544:	f43f af19 	beq.w	800537a <_printf_float+0xc2>
 8005548:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800554c:	4313      	orrs	r3, r2
 800554e:	d102      	bne.n	8005556 <_printf_float+0x29e>
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	07d9      	lsls	r1, r3, #31
 8005554:	d5d8      	bpl.n	8005508 <_printf_float+0x250>
 8005556:	ee18 3a10 	vmov	r3, s16
 800555a:	4652      	mov	r2, sl
 800555c:	4631      	mov	r1, r6
 800555e:	4628      	mov	r0, r5
 8005560:	47b8      	blx	r7
 8005562:	3001      	adds	r0, #1
 8005564:	f43f af09 	beq.w	800537a <_printf_float+0xc2>
 8005568:	f04f 0900 	mov.w	r9, #0
 800556c:	f104 0a1a 	add.w	sl, r4, #26
 8005570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005572:	425b      	negs	r3, r3
 8005574:	454b      	cmp	r3, r9
 8005576:	dc01      	bgt.n	800557c <_printf_float+0x2c4>
 8005578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800557a:	e792      	b.n	80054a2 <_printf_float+0x1ea>
 800557c:	2301      	movs	r3, #1
 800557e:	4652      	mov	r2, sl
 8005580:	4631      	mov	r1, r6
 8005582:	4628      	mov	r0, r5
 8005584:	47b8      	blx	r7
 8005586:	3001      	adds	r0, #1
 8005588:	f43f aef7 	beq.w	800537a <_printf_float+0xc2>
 800558c:	f109 0901 	add.w	r9, r9, #1
 8005590:	e7ee      	b.n	8005570 <_printf_float+0x2b8>
 8005592:	bf00      	nop
 8005594:	7fefffff 	.word	0x7fefffff
 8005598:	08009a6c 	.word	0x08009a6c
 800559c:	08009a70 	.word	0x08009a70
 80055a0:	08009a78 	.word	0x08009a78
 80055a4:	08009a74 	.word	0x08009a74
 80055a8:	08009a7c 	.word	0x08009a7c
 80055ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055b0:	429a      	cmp	r2, r3
 80055b2:	bfa8      	it	ge
 80055b4:	461a      	movge	r2, r3
 80055b6:	2a00      	cmp	r2, #0
 80055b8:	4691      	mov	r9, r2
 80055ba:	dc37      	bgt.n	800562c <_printf_float+0x374>
 80055bc:	f04f 0b00 	mov.w	fp, #0
 80055c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055c4:	f104 021a 	add.w	r2, r4, #26
 80055c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055ca:	9305      	str	r3, [sp, #20]
 80055cc:	eba3 0309 	sub.w	r3, r3, r9
 80055d0:	455b      	cmp	r3, fp
 80055d2:	dc33      	bgt.n	800563c <_printf_float+0x384>
 80055d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055d8:	429a      	cmp	r2, r3
 80055da:	db3b      	blt.n	8005654 <_printf_float+0x39c>
 80055dc:	6823      	ldr	r3, [r4, #0]
 80055de:	07da      	lsls	r2, r3, #31
 80055e0:	d438      	bmi.n	8005654 <_printf_float+0x39c>
 80055e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055e4:	9b05      	ldr	r3, [sp, #20]
 80055e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	eba2 0901 	sub.w	r9, r2, r1
 80055ee:	4599      	cmp	r9, r3
 80055f0:	bfa8      	it	ge
 80055f2:	4699      	movge	r9, r3
 80055f4:	f1b9 0f00 	cmp.w	r9, #0
 80055f8:	dc35      	bgt.n	8005666 <_printf_float+0x3ae>
 80055fa:	f04f 0800 	mov.w	r8, #0
 80055fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005602:	f104 0a1a 	add.w	sl, r4, #26
 8005606:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800560a:	1a9b      	subs	r3, r3, r2
 800560c:	eba3 0309 	sub.w	r3, r3, r9
 8005610:	4543      	cmp	r3, r8
 8005612:	f77f af79 	ble.w	8005508 <_printf_float+0x250>
 8005616:	2301      	movs	r3, #1
 8005618:	4652      	mov	r2, sl
 800561a:	4631      	mov	r1, r6
 800561c:	4628      	mov	r0, r5
 800561e:	47b8      	blx	r7
 8005620:	3001      	adds	r0, #1
 8005622:	f43f aeaa 	beq.w	800537a <_printf_float+0xc2>
 8005626:	f108 0801 	add.w	r8, r8, #1
 800562a:	e7ec      	b.n	8005606 <_printf_float+0x34e>
 800562c:	4613      	mov	r3, r2
 800562e:	4631      	mov	r1, r6
 8005630:	4642      	mov	r2, r8
 8005632:	4628      	mov	r0, r5
 8005634:	47b8      	blx	r7
 8005636:	3001      	adds	r0, #1
 8005638:	d1c0      	bne.n	80055bc <_printf_float+0x304>
 800563a:	e69e      	b.n	800537a <_printf_float+0xc2>
 800563c:	2301      	movs	r3, #1
 800563e:	4631      	mov	r1, r6
 8005640:	4628      	mov	r0, r5
 8005642:	9205      	str	r2, [sp, #20]
 8005644:	47b8      	blx	r7
 8005646:	3001      	adds	r0, #1
 8005648:	f43f ae97 	beq.w	800537a <_printf_float+0xc2>
 800564c:	9a05      	ldr	r2, [sp, #20]
 800564e:	f10b 0b01 	add.w	fp, fp, #1
 8005652:	e7b9      	b.n	80055c8 <_printf_float+0x310>
 8005654:	ee18 3a10 	vmov	r3, s16
 8005658:	4652      	mov	r2, sl
 800565a:	4631      	mov	r1, r6
 800565c:	4628      	mov	r0, r5
 800565e:	47b8      	blx	r7
 8005660:	3001      	adds	r0, #1
 8005662:	d1be      	bne.n	80055e2 <_printf_float+0x32a>
 8005664:	e689      	b.n	800537a <_printf_float+0xc2>
 8005666:	9a05      	ldr	r2, [sp, #20]
 8005668:	464b      	mov	r3, r9
 800566a:	4442      	add	r2, r8
 800566c:	4631      	mov	r1, r6
 800566e:	4628      	mov	r0, r5
 8005670:	47b8      	blx	r7
 8005672:	3001      	adds	r0, #1
 8005674:	d1c1      	bne.n	80055fa <_printf_float+0x342>
 8005676:	e680      	b.n	800537a <_printf_float+0xc2>
 8005678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800567a:	2a01      	cmp	r2, #1
 800567c:	dc01      	bgt.n	8005682 <_printf_float+0x3ca>
 800567e:	07db      	lsls	r3, r3, #31
 8005680:	d538      	bpl.n	80056f4 <_printf_float+0x43c>
 8005682:	2301      	movs	r3, #1
 8005684:	4642      	mov	r2, r8
 8005686:	4631      	mov	r1, r6
 8005688:	4628      	mov	r0, r5
 800568a:	47b8      	blx	r7
 800568c:	3001      	adds	r0, #1
 800568e:	f43f ae74 	beq.w	800537a <_printf_float+0xc2>
 8005692:	ee18 3a10 	vmov	r3, s16
 8005696:	4652      	mov	r2, sl
 8005698:	4631      	mov	r1, r6
 800569a:	4628      	mov	r0, r5
 800569c:	47b8      	blx	r7
 800569e:	3001      	adds	r0, #1
 80056a0:	f43f ae6b 	beq.w	800537a <_printf_float+0xc2>
 80056a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056a8:	2200      	movs	r2, #0
 80056aa:	2300      	movs	r3, #0
 80056ac:	f7fb fa0c 	bl	8000ac8 <__aeabi_dcmpeq>
 80056b0:	b9d8      	cbnz	r0, 80056ea <_printf_float+0x432>
 80056b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056b4:	f108 0201 	add.w	r2, r8, #1
 80056b8:	3b01      	subs	r3, #1
 80056ba:	4631      	mov	r1, r6
 80056bc:	4628      	mov	r0, r5
 80056be:	47b8      	blx	r7
 80056c0:	3001      	adds	r0, #1
 80056c2:	d10e      	bne.n	80056e2 <_printf_float+0x42a>
 80056c4:	e659      	b.n	800537a <_printf_float+0xc2>
 80056c6:	2301      	movs	r3, #1
 80056c8:	4652      	mov	r2, sl
 80056ca:	4631      	mov	r1, r6
 80056cc:	4628      	mov	r0, r5
 80056ce:	47b8      	blx	r7
 80056d0:	3001      	adds	r0, #1
 80056d2:	f43f ae52 	beq.w	800537a <_printf_float+0xc2>
 80056d6:	f108 0801 	add.w	r8, r8, #1
 80056da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056dc:	3b01      	subs	r3, #1
 80056de:	4543      	cmp	r3, r8
 80056e0:	dcf1      	bgt.n	80056c6 <_printf_float+0x40e>
 80056e2:	464b      	mov	r3, r9
 80056e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80056e8:	e6dc      	b.n	80054a4 <_printf_float+0x1ec>
 80056ea:	f04f 0800 	mov.w	r8, #0
 80056ee:	f104 0a1a 	add.w	sl, r4, #26
 80056f2:	e7f2      	b.n	80056da <_printf_float+0x422>
 80056f4:	2301      	movs	r3, #1
 80056f6:	4642      	mov	r2, r8
 80056f8:	e7df      	b.n	80056ba <_printf_float+0x402>
 80056fa:	2301      	movs	r3, #1
 80056fc:	464a      	mov	r2, r9
 80056fe:	4631      	mov	r1, r6
 8005700:	4628      	mov	r0, r5
 8005702:	47b8      	blx	r7
 8005704:	3001      	adds	r0, #1
 8005706:	f43f ae38 	beq.w	800537a <_printf_float+0xc2>
 800570a:	f108 0801 	add.w	r8, r8, #1
 800570e:	68e3      	ldr	r3, [r4, #12]
 8005710:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005712:	1a5b      	subs	r3, r3, r1
 8005714:	4543      	cmp	r3, r8
 8005716:	dcf0      	bgt.n	80056fa <_printf_float+0x442>
 8005718:	e6fa      	b.n	8005510 <_printf_float+0x258>
 800571a:	f04f 0800 	mov.w	r8, #0
 800571e:	f104 0919 	add.w	r9, r4, #25
 8005722:	e7f4      	b.n	800570e <_printf_float+0x456>

08005724 <_printf_common>:
 8005724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005728:	4616      	mov	r6, r2
 800572a:	4699      	mov	r9, r3
 800572c:	688a      	ldr	r2, [r1, #8]
 800572e:	690b      	ldr	r3, [r1, #16]
 8005730:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005734:	4293      	cmp	r3, r2
 8005736:	bfb8      	it	lt
 8005738:	4613      	movlt	r3, r2
 800573a:	6033      	str	r3, [r6, #0]
 800573c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005740:	4607      	mov	r7, r0
 8005742:	460c      	mov	r4, r1
 8005744:	b10a      	cbz	r2, 800574a <_printf_common+0x26>
 8005746:	3301      	adds	r3, #1
 8005748:	6033      	str	r3, [r6, #0]
 800574a:	6823      	ldr	r3, [r4, #0]
 800574c:	0699      	lsls	r1, r3, #26
 800574e:	bf42      	ittt	mi
 8005750:	6833      	ldrmi	r3, [r6, #0]
 8005752:	3302      	addmi	r3, #2
 8005754:	6033      	strmi	r3, [r6, #0]
 8005756:	6825      	ldr	r5, [r4, #0]
 8005758:	f015 0506 	ands.w	r5, r5, #6
 800575c:	d106      	bne.n	800576c <_printf_common+0x48>
 800575e:	f104 0a19 	add.w	sl, r4, #25
 8005762:	68e3      	ldr	r3, [r4, #12]
 8005764:	6832      	ldr	r2, [r6, #0]
 8005766:	1a9b      	subs	r3, r3, r2
 8005768:	42ab      	cmp	r3, r5
 800576a:	dc26      	bgt.n	80057ba <_printf_common+0x96>
 800576c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005770:	1e13      	subs	r3, r2, #0
 8005772:	6822      	ldr	r2, [r4, #0]
 8005774:	bf18      	it	ne
 8005776:	2301      	movne	r3, #1
 8005778:	0692      	lsls	r2, r2, #26
 800577a:	d42b      	bmi.n	80057d4 <_printf_common+0xb0>
 800577c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005780:	4649      	mov	r1, r9
 8005782:	4638      	mov	r0, r7
 8005784:	47c0      	blx	r8
 8005786:	3001      	adds	r0, #1
 8005788:	d01e      	beq.n	80057c8 <_printf_common+0xa4>
 800578a:	6823      	ldr	r3, [r4, #0]
 800578c:	68e5      	ldr	r5, [r4, #12]
 800578e:	6832      	ldr	r2, [r6, #0]
 8005790:	f003 0306 	and.w	r3, r3, #6
 8005794:	2b04      	cmp	r3, #4
 8005796:	bf08      	it	eq
 8005798:	1aad      	subeq	r5, r5, r2
 800579a:	68a3      	ldr	r3, [r4, #8]
 800579c:	6922      	ldr	r2, [r4, #16]
 800579e:	bf0c      	ite	eq
 80057a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057a4:	2500      	movne	r5, #0
 80057a6:	4293      	cmp	r3, r2
 80057a8:	bfc4      	itt	gt
 80057aa:	1a9b      	subgt	r3, r3, r2
 80057ac:	18ed      	addgt	r5, r5, r3
 80057ae:	2600      	movs	r6, #0
 80057b0:	341a      	adds	r4, #26
 80057b2:	42b5      	cmp	r5, r6
 80057b4:	d11a      	bne.n	80057ec <_printf_common+0xc8>
 80057b6:	2000      	movs	r0, #0
 80057b8:	e008      	b.n	80057cc <_printf_common+0xa8>
 80057ba:	2301      	movs	r3, #1
 80057bc:	4652      	mov	r2, sl
 80057be:	4649      	mov	r1, r9
 80057c0:	4638      	mov	r0, r7
 80057c2:	47c0      	blx	r8
 80057c4:	3001      	adds	r0, #1
 80057c6:	d103      	bne.n	80057d0 <_printf_common+0xac>
 80057c8:	f04f 30ff 	mov.w	r0, #4294967295
 80057cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057d0:	3501      	adds	r5, #1
 80057d2:	e7c6      	b.n	8005762 <_printf_common+0x3e>
 80057d4:	18e1      	adds	r1, r4, r3
 80057d6:	1c5a      	adds	r2, r3, #1
 80057d8:	2030      	movs	r0, #48	; 0x30
 80057da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057de:	4422      	add	r2, r4
 80057e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057e8:	3302      	adds	r3, #2
 80057ea:	e7c7      	b.n	800577c <_printf_common+0x58>
 80057ec:	2301      	movs	r3, #1
 80057ee:	4622      	mov	r2, r4
 80057f0:	4649      	mov	r1, r9
 80057f2:	4638      	mov	r0, r7
 80057f4:	47c0      	blx	r8
 80057f6:	3001      	adds	r0, #1
 80057f8:	d0e6      	beq.n	80057c8 <_printf_common+0xa4>
 80057fa:	3601      	adds	r6, #1
 80057fc:	e7d9      	b.n	80057b2 <_printf_common+0x8e>
	...

08005800 <_printf_i>:
 8005800:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005804:	460c      	mov	r4, r1
 8005806:	4691      	mov	r9, r2
 8005808:	7e27      	ldrb	r7, [r4, #24]
 800580a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800580c:	2f78      	cmp	r7, #120	; 0x78
 800580e:	4680      	mov	r8, r0
 8005810:	469a      	mov	sl, r3
 8005812:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005816:	d807      	bhi.n	8005828 <_printf_i+0x28>
 8005818:	2f62      	cmp	r7, #98	; 0x62
 800581a:	d80a      	bhi.n	8005832 <_printf_i+0x32>
 800581c:	2f00      	cmp	r7, #0
 800581e:	f000 80d8 	beq.w	80059d2 <_printf_i+0x1d2>
 8005822:	2f58      	cmp	r7, #88	; 0x58
 8005824:	f000 80a3 	beq.w	800596e <_printf_i+0x16e>
 8005828:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800582c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005830:	e03a      	b.n	80058a8 <_printf_i+0xa8>
 8005832:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005836:	2b15      	cmp	r3, #21
 8005838:	d8f6      	bhi.n	8005828 <_printf_i+0x28>
 800583a:	a001      	add	r0, pc, #4	; (adr r0, 8005840 <_printf_i+0x40>)
 800583c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005840:	08005899 	.word	0x08005899
 8005844:	080058ad 	.word	0x080058ad
 8005848:	08005829 	.word	0x08005829
 800584c:	08005829 	.word	0x08005829
 8005850:	08005829 	.word	0x08005829
 8005854:	08005829 	.word	0x08005829
 8005858:	080058ad 	.word	0x080058ad
 800585c:	08005829 	.word	0x08005829
 8005860:	08005829 	.word	0x08005829
 8005864:	08005829 	.word	0x08005829
 8005868:	08005829 	.word	0x08005829
 800586c:	080059b9 	.word	0x080059b9
 8005870:	080058dd 	.word	0x080058dd
 8005874:	0800599b 	.word	0x0800599b
 8005878:	08005829 	.word	0x08005829
 800587c:	08005829 	.word	0x08005829
 8005880:	080059db 	.word	0x080059db
 8005884:	08005829 	.word	0x08005829
 8005888:	080058dd 	.word	0x080058dd
 800588c:	08005829 	.word	0x08005829
 8005890:	08005829 	.word	0x08005829
 8005894:	080059a3 	.word	0x080059a3
 8005898:	680b      	ldr	r3, [r1, #0]
 800589a:	1d1a      	adds	r2, r3, #4
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	600a      	str	r2, [r1, #0]
 80058a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80058a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058a8:	2301      	movs	r3, #1
 80058aa:	e0a3      	b.n	80059f4 <_printf_i+0x1f4>
 80058ac:	6825      	ldr	r5, [r4, #0]
 80058ae:	6808      	ldr	r0, [r1, #0]
 80058b0:	062e      	lsls	r6, r5, #24
 80058b2:	f100 0304 	add.w	r3, r0, #4
 80058b6:	d50a      	bpl.n	80058ce <_printf_i+0xce>
 80058b8:	6805      	ldr	r5, [r0, #0]
 80058ba:	600b      	str	r3, [r1, #0]
 80058bc:	2d00      	cmp	r5, #0
 80058be:	da03      	bge.n	80058c8 <_printf_i+0xc8>
 80058c0:	232d      	movs	r3, #45	; 0x2d
 80058c2:	426d      	negs	r5, r5
 80058c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058c8:	485e      	ldr	r0, [pc, #376]	; (8005a44 <_printf_i+0x244>)
 80058ca:	230a      	movs	r3, #10
 80058cc:	e019      	b.n	8005902 <_printf_i+0x102>
 80058ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80058d2:	6805      	ldr	r5, [r0, #0]
 80058d4:	600b      	str	r3, [r1, #0]
 80058d6:	bf18      	it	ne
 80058d8:	b22d      	sxthne	r5, r5
 80058da:	e7ef      	b.n	80058bc <_printf_i+0xbc>
 80058dc:	680b      	ldr	r3, [r1, #0]
 80058de:	6825      	ldr	r5, [r4, #0]
 80058e0:	1d18      	adds	r0, r3, #4
 80058e2:	6008      	str	r0, [r1, #0]
 80058e4:	0628      	lsls	r0, r5, #24
 80058e6:	d501      	bpl.n	80058ec <_printf_i+0xec>
 80058e8:	681d      	ldr	r5, [r3, #0]
 80058ea:	e002      	b.n	80058f2 <_printf_i+0xf2>
 80058ec:	0669      	lsls	r1, r5, #25
 80058ee:	d5fb      	bpl.n	80058e8 <_printf_i+0xe8>
 80058f0:	881d      	ldrh	r5, [r3, #0]
 80058f2:	4854      	ldr	r0, [pc, #336]	; (8005a44 <_printf_i+0x244>)
 80058f4:	2f6f      	cmp	r7, #111	; 0x6f
 80058f6:	bf0c      	ite	eq
 80058f8:	2308      	moveq	r3, #8
 80058fa:	230a      	movne	r3, #10
 80058fc:	2100      	movs	r1, #0
 80058fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005902:	6866      	ldr	r6, [r4, #4]
 8005904:	60a6      	str	r6, [r4, #8]
 8005906:	2e00      	cmp	r6, #0
 8005908:	bfa2      	ittt	ge
 800590a:	6821      	ldrge	r1, [r4, #0]
 800590c:	f021 0104 	bicge.w	r1, r1, #4
 8005910:	6021      	strge	r1, [r4, #0]
 8005912:	b90d      	cbnz	r5, 8005918 <_printf_i+0x118>
 8005914:	2e00      	cmp	r6, #0
 8005916:	d04d      	beq.n	80059b4 <_printf_i+0x1b4>
 8005918:	4616      	mov	r6, r2
 800591a:	fbb5 f1f3 	udiv	r1, r5, r3
 800591e:	fb03 5711 	mls	r7, r3, r1, r5
 8005922:	5dc7      	ldrb	r7, [r0, r7]
 8005924:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005928:	462f      	mov	r7, r5
 800592a:	42bb      	cmp	r3, r7
 800592c:	460d      	mov	r5, r1
 800592e:	d9f4      	bls.n	800591a <_printf_i+0x11a>
 8005930:	2b08      	cmp	r3, #8
 8005932:	d10b      	bne.n	800594c <_printf_i+0x14c>
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	07df      	lsls	r7, r3, #31
 8005938:	d508      	bpl.n	800594c <_printf_i+0x14c>
 800593a:	6923      	ldr	r3, [r4, #16]
 800593c:	6861      	ldr	r1, [r4, #4]
 800593e:	4299      	cmp	r1, r3
 8005940:	bfde      	ittt	le
 8005942:	2330      	movle	r3, #48	; 0x30
 8005944:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005948:	f106 36ff 	addle.w	r6, r6, #4294967295
 800594c:	1b92      	subs	r2, r2, r6
 800594e:	6122      	str	r2, [r4, #16]
 8005950:	f8cd a000 	str.w	sl, [sp]
 8005954:	464b      	mov	r3, r9
 8005956:	aa03      	add	r2, sp, #12
 8005958:	4621      	mov	r1, r4
 800595a:	4640      	mov	r0, r8
 800595c:	f7ff fee2 	bl	8005724 <_printf_common>
 8005960:	3001      	adds	r0, #1
 8005962:	d14c      	bne.n	80059fe <_printf_i+0x1fe>
 8005964:	f04f 30ff 	mov.w	r0, #4294967295
 8005968:	b004      	add	sp, #16
 800596a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800596e:	4835      	ldr	r0, [pc, #212]	; (8005a44 <_printf_i+0x244>)
 8005970:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005974:	6823      	ldr	r3, [r4, #0]
 8005976:	680e      	ldr	r6, [r1, #0]
 8005978:	061f      	lsls	r7, r3, #24
 800597a:	f856 5b04 	ldr.w	r5, [r6], #4
 800597e:	600e      	str	r6, [r1, #0]
 8005980:	d514      	bpl.n	80059ac <_printf_i+0x1ac>
 8005982:	07d9      	lsls	r1, r3, #31
 8005984:	bf44      	itt	mi
 8005986:	f043 0320 	orrmi.w	r3, r3, #32
 800598a:	6023      	strmi	r3, [r4, #0]
 800598c:	b91d      	cbnz	r5, 8005996 <_printf_i+0x196>
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	f023 0320 	bic.w	r3, r3, #32
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	2310      	movs	r3, #16
 8005998:	e7b0      	b.n	80058fc <_printf_i+0xfc>
 800599a:	6823      	ldr	r3, [r4, #0]
 800599c:	f043 0320 	orr.w	r3, r3, #32
 80059a0:	6023      	str	r3, [r4, #0]
 80059a2:	2378      	movs	r3, #120	; 0x78
 80059a4:	4828      	ldr	r0, [pc, #160]	; (8005a48 <_printf_i+0x248>)
 80059a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059aa:	e7e3      	b.n	8005974 <_printf_i+0x174>
 80059ac:	065e      	lsls	r6, r3, #25
 80059ae:	bf48      	it	mi
 80059b0:	b2ad      	uxthmi	r5, r5
 80059b2:	e7e6      	b.n	8005982 <_printf_i+0x182>
 80059b4:	4616      	mov	r6, r2
 80059b6:	e7bb      	b.n	8005930 <_printf_i+0x130>
 80059b8:	680b      	ldr	r3, [r1, #0]
 80059ba:	6826      	ldr	r6, [r4, #0]
 80059bc:	6960      	ldr	r0, [r4, #20]
 80059be:	1d1d      	adds	r5, r3, #4
 80059c0:	600d      	str	r5, [r1, #0]
 80059c2:	0635      	lsls	r5, r6, #24
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	d501      	bpl.n	80059cc <_printf_i+0x1cc>
 80059c8:	6018      	str	r0, [r3, #0]
 80059ca:	e002      	b.n	80059d2 <_printf_i+0x1d2>
 80059cc:	0671      	lsls	r1, r6, #25
 80059ce:	d5fb      	bpl.n	80059c8 <_printf_i+0x1c8>
 80059d0:	8018      	strh	r0, [r3, #0]
 80059d2:	2300      	movs	r3, #0
 80059d4:	6123      	str	r3, [r4, #16]
 80059d6:	4616      	mov	r6, r2
 80059d8:	e7ba      	b.n	8005950 <_printf_i+0x150>
 80059da:	680b      	ldr	r3, [r1, #0]
 80059dc:	1d1a      	adds	r2, r3, #4
 80059de:	600a      	str	r2, [r1, #0]
 80059e0:	681e      	ldr	r6, [r3, #0]
 80059e2:	6862      	ldr	r2, [r4, #4]
 80059e4:	2100      	movs	r1, #0
 80059e6:	4630      	mov	r0, r6
 80059e8:	f7fa fbfa 	bl	80001e0 <memchr>
 80059ec:	b108      	cbz	r0, 80059f2 <_printf_i+0x1f2>
 80059ee:	1b80      	subs	r0, r0, r6
 80059f0:	6060      	str	r0, [r4, #4]
 80059f2:	6863      	ldr	r3, [r4, #4]
 80059f4:	6123      	str	r3, [r4, #16]
 80059f6:	2300      	movs	r3, #0
 80059f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059fc:	e7a8      	b.n	8005950 <_printf_i+0x150>
 80059fe:	6923      	ldr	r3, [r4, #16]
 8005a00:	4632      	mov	r2, r6
 8005a02:	4649      	mov	r1, r9
 8005a04:	4640      	mov	r0, r8
 8005a06:	47d0      	blx	sl
 8005a08:	3001      	adds	r0, #1
 8005a0a:	d0ab      	beq.n	8005964 <_printf_i+0x164>
 8005a0c:	6823      	ldr	r3, [r4, #0]
 8005a0e:	079b      	lsls	r3, r3, #30
 8005a10:	d413      	bmi.n	8005a3a <_printf_i+0x23a>
 8005a12:	68e0      	ldr	r0, [r4, #12]
 8005a14:	9b03      	ldr	r3, [sp, #12]
 8005a16:	4298      	cmp	r0, r3
 8005a18:	bfb8      	it	lt
 8005a1a:	4618      	movlt	r0, r3
 8005a1c:	e7a4      	b.n	8005968 <_printf_i+0x168>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	4632      	mov	r2, r6
 8005a22:	4649      	mov	r1, r9
 8005a24:	4640      	mov	r0, r8
 8005a26:	47d0      	blx	sl
 8005a28:	3001      	adds	r0, #1
 8005a2a:	d09b      	beq.n	8005964 <_printf_i+0x164>
 8005a2c:	3501      	adds	r5, #1
 8005a2e:	68e3      	ldr	r3, [r4, #12]
 8005a30:	9903      	ldr	r1, [sp, #12]
 8005a32:	1a5b      	subs	r3, r3, r1
 8005a34:	42ab      	cmp	r3, r5
 8005a36:	dcf2      	bgt.n	8005a1e <_printf_i+0x21e>
 8005a38:	e7eb      	b.n	8005a12 <_printf_i+0x212>
 8005a3a:	2500      	movs	r5, #0
 8005a3c:	f104 0619 	add.w	r6, r4, #25
 8005a40:	e7f5      	b.n	8005a2e <_printf_i+0x22e>
 8005a42:	bf00      	nop
 8005a44:	08009a7e 	.word	0x08009a7e
 8005a48:	08009a8f 	.word	0x08009a8f

08005a4c <_scanf_float>:
 8005a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a50:	b087      	sub	sp, #28
 8005a52:	4617      	mov	r7, r2
 8005a54:	9303      	str	r3, [sp, #12]
 8005a56:	688b      	ldr	r3, [r1, #8]
 8005a58:	1e5a      	subs	r2, r3, #1
 8005a5a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005a5e:	bf83      	ittte	hi
 8005a60:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005a64:	195b      	addhi	r3, r3, r5
 8005a66:	9302      	strhi	r3, [sp, #8]
 8005a68:	2300      	movls	r3, #0
 8005a6a:	bf86      	itte	hi
 8005a6c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005a70:	608b      	strhi	r3, [r1, #8]
 8005a72:	9302      	strls	r3, [sp, #8]
 8005a74:	680b      	ldr	r3, [r1, #0]
 8005a76:	468b      	mov	fp, r1
 8005a78:	2500      	movs	r5, #0
 8005a7a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005a7e:	f84b 3b1c 	str.w	r3, [fp], #28
 8005a82:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005a86:	4680      	mov	r8, r0
 8005a88:	460c      	mov	r4, r1
 8005a8a:	465e      	mov	r6, fp
 8005a8c:	46aa      	mov	sl, r5
 8005a8e:	46a9      	mov	r9, r5
 8005a90:	9501      	str	r5, [sp, #4]
 8005a92:	68a2      	ldr	r2, [r4, #8]
 8005a94:	b152      	cbz	r2, 8005aac <_scanf_float+0x60>
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	2b4e      	cmp	r3, #78	; 0x4e
 8005a9c:	d864      	bhi.n	8005b68 <_scanf_float+0x11c>
 8005a9e:	2b40      	cmp	r3, #64	; 0x40
 8005aa0:	d83c      	bhi.n	8005b1c <_scanf_float+0xd0>
 8005aa2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005aa6:	b2c8      	uxtb	r0, r1
 8005aa8:	280e      	cmp	r0, #14
 8005aaa:	d93a      	bls.n	8005b22 <_scanf_float+0xd6>
 8005aac:	f1b9 0f00 	cmp.w	r9, #0
 8005ab0:	d003      	beq.n	8005aba <_scanf_float+0x6e>
 8005ab2:	6823      	ldr	r3, [r4, #0]
 8005ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ab8:	6023      	str	r3, [r4, #0]
 8005aba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005abe:	f1ba 0f01 	cmp.w	sl, #1
 8005ac2:	f200 8113 	bhi.w	8005cec <_scanf_float+0x2a0>
 8005ac6:	455e      	cmp	r6, fp
 8005ac8:	f200 8105 	bhi.w	8005cd6 <_scanf_float+0x28a>
 8005acc:	2501      	movs	r5, #1
 8005ace:	4628      	mov	r0, r5
 8005ad0:	b007      	add	sp, #28
 8005ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ad6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005ada:	2a0d      	cmp	r2, #13
 8005adc:	d8e6      	bhi.n	8005aac <_scanf_float+0x60>
 8005ade:	a101      	add	r1, pc, #4	; (adr r1, 8005ae4 <_scanf_float+0x98>)
 8005ae0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005ae4:	08005c23 	.word	0x08005c23
 8005ae8:	08005aad 	.word	0x08005aad
 8005aec:	08005aad 	.word	0x08005aad
 8005af0:	08005aad 	.word	0x08005aad
 8005af4:	08005c83 	.word	0x08005c83
 8005af8:	08005c5b 	.word	0x08005c5b
 8005afc:	08005aad 	.word	0x08005aad
 8005b00:	08005aad 	.word	0x08005aad
 8005b04:	08005c31 	.word	0x08005c31
 8005b08:	08005aad 	.word	0x08005aad
 8005b0c:	08005aad 	.word	0x08005aad
 8005b10:	08005aad 	.word	0x08005aad
 8005b14:	08005aad 	.word	0x08005aad
 8005b18:	08005be9 	.word	0x08005be9
 8005b1c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005b20:	e7db      	b.n	8005ada <_scanf_float+0x8e>
 8005b22:	290e      	cmp	r1, #14
 8005b24:	d8c2      	bhi.n	8005aac <_scanf_float+0x60>
 8005b26:	a001      	add	r0, pc, #4	; (adr r0, 8005b2c <_scanf_float+0xe0>)
 8005b28:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005b2c:	08005bdb 	.word	0x08005bdb
 8005b30:	08005aad 	.word	0x08005aad
 8005b34:	08005bdb 	.word	0x08005bdb
 8005b38:	08005c6f 	.word	0x08005c6f
 8005b3c:	08005aad 	.word	0x08005aad
 8005b40:	08005b89 	.word	0x08005b89
 8005b44:	08005bc5 	.word	0x08005bc5
 8005b48:	08005bc5 	.word	0x08005bc5
 8005b4c:	08005bc5 	.word	0x08005bc5
 8005b50:	08005bc5 	.word	0x08005bc5
 8005b54:	08005bc5 	.word	0x08005bc5
 8005b58:	08005bc5 	.word	0x08005bc5
 8005b5c:	08005bc5 	.word	0x08005bc5
 8005b60:	08005bc5 	.word	0x08005bc5
 8005b64:	08005bc5 	.word	0x08005bc5
 8005b68:	2b6e      	cmp	r3, #110	; 0x6e
 8005b6a:	d809      	bhi.n	8005b80 <_scanf_float+0x134>
 8005b6c:	2b60      	cmp	r3, #96	; 0x60
 8005b6e:	d8b2      	bhi.n	8005ad6 <_scanf_float+0x8a>
 8005b70:	2b54      	cmp	r3, #84	; 0x54
 8005b72:	d077      	beq.n	8005c64 <_scanf_float+0x218>
 8005b74:	2b59      	cmp	r3, #89	; 0x59
 8005b76:	d199      	bne.n	8005aac <_scanf_float+0x60>
 8005b78:	2d07      	cmp	r5, #7
 8005b7a:	d197      	bne.n	8005aac <_scanf_float+0x60>
 8005b7c:	2508      	movs	r5, #8
 8005b7e:	e029      	b.n	8005bd4 <_scanf_float+0x188>
 8005b80:	2b74      	cmp	r3, #116	; 0x74
 8005b82:	d06f      	beq.n	8005c64 <_scanf_float+0x218>
 8005b84:	2b79      	cmp	r3, #121	; 0x79
 8005b86:	e7f6      	b.n	8005b76 <_scanf_float+0x12a>
 8005b88:	6821      	ldr	r1, [r4, #0]
 8005b8a:	05c8      	lsls	r0, r1, #23
 8005b8c:	d51a      	bpl.n	8005bc4 <_scanf_float+0x178>
 8005b8e:	9b02      	ldr	r3, [sp, #8]
 8005b90:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005b94:	6021      	str	r1, [r4, #0]
 8005b96:	f109 0901 	add.w	r9, r9, #1
 8005b9a:	b11b      	cbz	r3, 8005ba4 <_scanf_float+0x158>
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	3201      	adds	r2, #1
 8005ba0:	9302      	str	r3, [sp, #8]
 8005ba2:	60a2      	str	r2, [r4, #8]
 8005ba4:	68a3      	ldr	r3, [r4, #8]
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	60a3      	str	r3, [r4, #8]
 8005baa:	6923      	ldr	r3, [r4, #16]
 8005bac:	3301      	adds	r3, #1
 8005bae:	6123      	str	r3, [r4, #16]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	607b      	str	r3, [r7, #4]
 8005bb8:	f340 8084 	ble.w	8005cc4 <_scanf_float+0x278>
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	603b      	str	r3, [r7, #0]
 8005bc2:	e766      	b.n	8005a92 <_scanf_float+0x46>
 8005bc4:	eb1a 0f05 	cmn.w	sl, r5
 8005bc8:	f47f af70 	bne.w	8005aac <_scanf_float+0x60>
 8005bcc:	6822      	ldr	r2, [r4, #0]
 8005bce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005bd2:	6022      	str	r2, [r4, #0]
 8005bd4:	f806 3b01 	strb.w	r3, [r6], #1
 8005bd8:	e7e4      	b.n	8005ba4 <_scanf_float+0x158>
 8005bda:	6822      	ldr	r2, [r4, #0]
 8005bdc:	0610      	lsls	r0, r2, #24
 8005bde:	f57f af65 	bpl.w	8005aac <_scanf_float+0x60>
 8005be2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005be6:	e7f4      	b.n	8005bd2 <_scanf_float+0x186>
 8005be8:	f1ba 0f00 	cmp.w	sl, #0
 8005bec:	d10e      	bne.n	8005c0c <_scanf_float+0x1c0>
 8005bee:	f1b9 0f00 	cmp.w	r9, #0
 8005bf2:	d10e      	bne.n	8005c12 <_scanf_float+0x1c6>
 8005bf4:	6822      	ldr	r2, [r4, #0]
 8005bf6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005bfa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005bfe:	d108      	bne.n	8005c12 <_scanf_float+0x1c6>
 8005c00:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005c04:	6022      	str	r2, [r4, #0]
 8005c06:	f04f 0a01 	mov.w	sl, #1
 8005c0a:	e7e3      	b.n	8005bd4 <_scanf_float+0x188>
 8005c0c:	f1ba 0f02 	cmp.w	sl, #2
 8005c10:	d055      	beq.n	8005cbe <_scanf_float+0x272>
 8005c12:	2d01      	cmp	r5, #1
 8005c14:	d002      	beq.n	8005c1c <_scanf_float+0x1d0>
 8005c16:	2d04      	cmp	r5, #4
 8005c18:	f47f af48 	bne.w	8005aac <_scanf_float+0x60>
 8005c1c:	3501      	adds	r5, #1
 8005c1e:	b2ed      	uxtb	r5, r5
 8005c20:	e7d8      	b.n	8005bd4 <_scanf_float+0x188>
 8005c22:	f1ba 0f01 	cmp.w	sl, #1
 8005c26:	f47f af41 	bne.w	8005aac <_scanf_float+0x60>
 8005c2a:	f04f 0a02 	mov.w	sl, #2
 8005c2e:	e7d1      	b.n	8005bd4 <_scanf_float+0x188>
 8005c30:	b97d      	cbnz	r5, 8005c52 <_scanf_float+0x206>
 8005c32:	f1b9 0f00 	cmp.w	r9, #0
 8005c36:	f47f af3c 	bne.w	8005ab2 <_scanf_float+0x66>
 8005c3a:	6822      	ldr	r2, [r4, #0]
 8005c3c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005c40:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005c44:	f47f af39 	bne.w	8005aba <_scanf_float+0x6e>
 8005c48:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005c4c:	6022      	str	r2, [r4, #0]
 8005c4e:	2501      	movs	r5, #1
 8005c50:	e7c0      	b.n	8005bd4 <_scanf_float+0x188>
 8005c52:	2d03      	cmp	r5, #3
 8005c54:	d0e2      	beq.n	8005c1c <_scanf_float+0x1d0>
 8005c56:	2d05      	cmp	r5, #5
 8005c58:	e7de      	b.n	8005c18 <_scanf_float+0x1cc>
 8005c5a:	2d02      	cmp	r5, #2
 8005c5c:	f47f af26 	bne.w	8005aac <_scanf_float+0x60>
 8005c60:	2503      	movs	r5, #3
 8005c62:	e7b7      	b.n	8005bd4 <_scanf_float+0x188>
 8005c64:	2d06      	cmp	r5, #6
 8005c66:	f47f af21 	bne.w	8005aac <_scanf_float+0x60>
 8005c6a:	2507      	movs	r5, #7
 8005c6c:	e7b2      	b.n	8005bd4 <_scanf_float+0x188>
 8005c6e:	6822      	ldr	r2, [r4, #0]
 8005c70:	0591      	lsls	r1, r2, #22
 8005c72:	f57f af1b 	bpl.w	8005aac <_scanf_float+0x60>
 8005c76:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005c7a:	6022      	str	r2, [r4, #0]
 8005c7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005c80:	e7a8      	b.n	8005bd4 <_scanf_float+0x188>
 8005c82:	6822      	ldr	r2, [r4, #0]
 8005c84:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005c88:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005c8c:	d006      	beq.n	8005c9c <_scanf_float+0x250>
 8005c8e:	0550      	lsls	r0, r2, #21
 8005c90:	f57f af0c 	bpl.w	8005aac <_scanf_float+0x60>
 8005c94:	f1b9 0f00 	cmp.w	r9, #0
 8005c98:	f43f af0f 	beq.w	8005aba <_scanf_float+0x6e>
 8005c9c:	0591      	lsls	r1, r2, #22
 8005c9e:	bf58      	it	pl
 8005ca0:	9901      	ldrpl	r1, [sp, #4]
 8005ca2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005ca6:	bf58      	it	pl
 8005ca8:	eba9 0101 	subpl.w	r1, r9, r1
 8005cac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005cb0:	bf58      	it	pl
 8005cb2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005cb6:	6022      	str	r2, [r4, #0]
 8005cb8:	f04f 0900 	mov.w	r9, #0
 8005cbc:	e78a      	b.n	8005bd4 <_scanf_float+0x188>
 8005cbe:	f04f 0a03 	mov.w	sl, #3
 8005cc2:	e787      	b.n	8005bd4 <_scanf_float+0x188>
 8005cc4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005cc8:	4639      	mov	r1, r7
 8005cca:	4640      	mov	r0, r8
 8005ccc:	4798      	blx	r3
 8005cce:	2800      	cmp	r0, #0
 8005cd0:	f43f aedf 	beq.w	8005a92 <_scanf_float+0x46>
 8005cd4:	e6ea      	b.n	8005aac <_scanf_float+0x60>
 8005cd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005cda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005cde:	463a      	mov	r2, r7
 8005ce0:	4640      	mov	r0, r8
 8005ce2:	4798      	blx	r3
 8005ce4:	6923      	ldr	r3, [r4, #16]
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	6123      	str	r3, [r4, #16]
 8005cea:	e6ec      	b.n	8005ac6 <_scanf_float+0x7a>
 8005cec:	1e6b      	subs	r3, r5, #1
 8005cee:	2b06      	cmp	r3, #6
 8005cf0:	d825      	bhi.n	8005d3e <_scanf_float+0x2f2>
 8005cf2:	2d02      	cmp	r5, #2
 8005cf4:	d836      	bhi.n	8005d64 <_scanf_float+0x318>
 8005cf6:	455e      	cmp	r6, fp
 8005cf8:	f67f aee8 	bls.w	8005acc <_scanf_float+0x80>
 8005cfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d00:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005d04:	463a      	mov	r2, r7
 8005d06:	4640      	mov	r0, r8
 8005d08:	4798      	blx	r3
 8005d0a:	6923      	ldr	r3, [r4, #16]
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	6123      	str	r3, [r4, #16]
 8005d10:	e7f1      	b.n	8005cf6 <_scanf_float+0x2aa>
 8005d12:	9802      	ldr	r0, [sp, #8]
 8005d14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d18:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005d1c:	9002      	str	r0, [sp, #8]
 8005d1e:	463a      	mov	r2, r7
 8005d20:	4640      	mov	r0, r8
 8005d22:	4798      	blx	r3
 8005d24:	6923      	ldr	r3, [r4, #16]
 8005d26:	3b01      	subs	r3, #1
 8005d28:	6123      	str	r3, [r4, #16]
 8005d2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d2e:	fa5f fa8a 	uxtb.w	sl, sl
 8005d32:	f1ba 0f02 	cmp.w	sl, #2
 8005d36:	d1ec      	bne.n	8005d12 <_scanf_float+0x2c6>
 8005d38:	3d03      	subs	r5, #3
 8005d3a:	b2ed      	uxtb	r5, r5
 8005d3c:	1b76      	subs	r6, r6, r5
 8005d3e:	6823      	ldr	r3, [r4, #0]
 8005d40:	05da      	lsls	r2, r3, #23
 8005d42:	d52f      	bpl.n	8005da4 <_scanf_float+0x358>
 8005d44:	055b      	lsls	r3, r3, #21
 8005d46:	d510      	bpl.n	8005d6a <_scanf_float+0x31e>
 8005d48:	455e      	cmp	r6, fp
 8005d4a:	f67f aebf 	bls.w	8005acc <_scanf_float+0x80>
 8005d4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005d56:	463a      	mov	r2, r7
 8005d58:	4640      	mov	r0, r8
 8005d5a:	4798      	blx	r3
 8005d5c:	6923      	ldr	r3, [r4, #16]
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	6123      	str	r3, [r4, #16]
 8005d62:	e7f1      	b.n	8005d48 <_scanf_float+0x2fc>
 8005d64:	46aa      	mov	sl, r5
 8005d66:	9602      	str	r6, [sp, #8]
 8005d68:	e7df      	b.n	8005d2a <_scanf_float+0x2de>
 8005d6a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005d6e:	6923      	ldr	r3, [r4, #16]
 8005d70:	2965      	cmp	r1, #101	; 0x65
 8005d72:	f103 33ff 	add.w	r3, r3, #4294967295
 8005d76:	f106 35ff 	add.w	r5, r6, #4294967295
 8005d7a:	6123      	str	r3, [r4, #16]
 8005d7c:	d00c      	beq.n	8005d98 <_scanf_float+0x34c>
 8005d7e:	2945      	cmp	r1, #69	; 0x45
 8005d80:	d00a      	beq.n	8005d98 <_scanf_float+0x34c>
 8005d82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d86:	463a      	mov	r2, r7
 8005d88:	4640      	mov	r0, r8
 8005d8a:	4798      	blx	r3
 8005d8c:	6923      	ldr	r3, [r4, #16]
 8005d8e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005d92:	3b01      	subs	r3, #1
 8005d94:	1eb5      	subs	r5, r6, #2
 8005d96:	6123      	str	r3, [r4, #16]
 8005d98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d9c:	463a      	mov	r2, r7
 8005d9e:	4640      	mov	r0, r8
 8005da0:	4798      	blx	r3
 8005da2:	462e      	mov	r6, r5
 8005da4:	6825      	ldr	r5, [r4, #0]
 8005da6:	f015 0510 	ands.w	r5, r5, #16
 8005daa:	d158      	bne.n	8005e5e <_scanf_float+0x412>
 8005dac:	7035      	strb	r5, [r6, #0]
 8005dae:	6823      	ldr	r3, [r4, #0]
 8005db0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005db8:	d11c      	bne.n	8005df4 <_scanf_float+0x3a8>
 8005dba:	9b01      	ldr	r3, [sp, #4]
 8005dbc:	454b      	cmp	r3, r9
 8005dbe:	eba3 0209 	sub.w	r2, r3, r9
 8005dc2:	d124      	bne.n	8005e0e <_scanf_float+0x3c2>
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	4659      	mov	r1, fp
 8005dc8:	4640      	mov	r0, r8
 8005dca:	f000 feab 	bl	8006b24 <_strtod_r>
 8005dce:	9b03      	ldr	r3, [sp, #12]
 8005dd0:	6821      	ldr	r1, [r4, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f011 0f02 	tst.w	r1, #2
 8005dd8:	ec57 6b10 	vmov	r6, r7, d0
 8005ddc:	f103 0204 	add.w	r2, r3, #4
 8005de0:	d020      	beq.n	8005e24 <_scanf_float+0x3d8>
 8005de2:	9903      	ldr	r1, [sp, #12]
 8005de4:	600a      	str	r2, [r1, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	e9c3 6700 	strd	r6, r7, [r3]
 8005dec:	68e3      	ldr	r3, [r4, #12]
 8005dee:	3301      	adds	r3, #1
 8005df0:	60e3      	str	r3, [r4, #12]
 8005df2:	e66c      	b.n	8005ace <_scanf_float+0x82>
 8005df4:	9b04      	ldr	r3, [sp, #16]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d0e4      	beq.n	8005dc4 <_scanf_float+0x378>
 8005dfa:	9905      	ldr	r1, [sp, #20]
 8005dfc:	230a      	movs	r3, #10
 8005dfe:	462a      	mov	r2, r5
 8005e00:	3101      	adds	r1, #1
 8005e02:	4640      	mov	r0, r8
 8005e04:	f000 ff18 	bl	8006c38 <_strtol_r>
 8005e08:	9b04      	ldr	r3, [sp, #16]
 8005e0a:	9e05      	ldr	r6, [sp, #20]
 8005e0c:	1ac2      	subs	r2, r0, r3
 8005e0e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005e12:	429e      	cmp	r6, r3
 8005e14:	bf28      	it	cs
 8005e16:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005e1a:	4912      	ldr	r1, [pc, #72]	; (8005e64 <_scanf_float+0x418>)
 8005e1c:	4630      	mov	r0, r6
 8005e1e:	f000 f82b 	bl	8005e78 <siprintf>
 8005e22:	e7cf      	b.n	8005dc4 <_scanf_float+0x378>
 8005e24:	f011 0f04 	tst.w	r1, #4
 8005e28:	9903      	ldr	r1, [sp, #12]
 8005e2a:	600a      	str	r2, [r1, #0]
 8005e2c:	d1db      	bne.n	8005de6 <_scanf_float+0x39a>
 8005e2e:	f8d3 8000 	ldr.w	r8, [r3]
 8005e32:	ee10 2a10 	vmov	r2, s0
 8005e36:	ee10 0a10 	vmov	r0, s0
 8005e3a:	463b      	mov	r3, r7
 8005e3c:	4639      	mov	r1, r7
 8005e3e:	f7fa fe75 	bl	8000b2c <__aeabi_dcmpun>
 8005e42:	b128      	cbz	r0, 8005e50 <_scanf_float+0x404>
 8005e44:	4808      	ldr	r0, [pc, #32]	; (8005e68 <_scanf_float+0x41c>)
 8005e46:	f000 f811 	bl	8005e6c <nanf>
 8005e4a:	ed88 0a00 	vstr	s0, [r8]
 8005e4e:	e7cd      	b.n	8005dec <_scanf_float+0x3a0>
 8005e50:	4630      	mov	r0, r6
 8005e52:	4639      	mov	r1, r7
 8005e54:	f7fa fec8 	bl	8000be8 <__aeabi_d2f>
 8005e58:	f8c8 0000 	str.w	r0, [r8]
 8005e5c:	e7c6      	b.n	8005dec <_scanf_float+0x3a0>
 8005e5e:	2500      	movs	r5, #0
 8005e60:	e635      	b.n	8005ace <_scanf_float+0x82>
 8005e62:	bf00      	nop
 8005e64:	08009aa0 	.word	0x08009aa0
 8005e68:	08009eb8 	.word	0x08009eb8

08005e6c <nanf>:
 8005e6c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005e74 <nanf+0x8>
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	7fc00000 	.word	0x7fc00000

08005e78 <siprintf>:
 8005e78:	b40e      	push	{r1, r2, r3}
 8005e7a:	b500      	push	{lr}
 8005e7c:	b09c      	sub	sp, #112	; 0x70
 8005e7e:	ab1d      	add	r3, sp, #116	; 0x74
 8005e80:	9002      	str	r0, [sp, #8]
 8005e82:	9006      	str	r0, [sp, #24]
 8005e84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e88:	4809      	ldr	r0, [pc, #36]	; (8005eb0 <siprintf+0x38>)
 8005e8a:	9107      	str	r1, [sp, #28]
 8005e8c:	9104      	str	r1, [sp, #16]
 8005e8e:	4909      	ldr	r1, [pc, #36]	; (8005eb4 <siprintf+0x3c>)
 8005e90:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e94:	9105      	str	r1, [sp, #20]
 8005e96:	6800      	ldr	r0, [r0, #0]
 8005e98:	9301      	str	r3, [sp, #4]
 8005e9a:	a902      	add	r1, sp, #8
 8005e9c:	f002 fea6 	bl	8008bec <_svfiprintf_r>
 8005ea0:	9b02      	ldr	r3, [sp, #8]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	701a      	strb	r2, [r3, #0]
 8005ea6:	b01c      	add	sp, #112	; 0x70
 8005ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005eac:	b003      	add	sp, #12
 8005eae:	4770      	bx	lr
 8005eb0:	2000002c 	.word	0x2000002c
 8005eb4:	ffff0208 	.word	0xffff0208

08005eb8 <strcat>:
 8005eb8:	b510      	push	{r4, lr}
 8005eba:	4602      	mov	r2, r0
 8005ebc:	7814      	ldrb	r4, [r2, #0]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	3201      	adds	r2, #1
 8005ec2:	2c00      	cmp	r4, #0
 8005ec4:	d1fa      	bne.n	8005ebc <strcat+0x4>
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ecc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ed0:	2a00      	cmp	r2, #0
 8005ed2:	d1f9      	bne.n	8005ec8 <strcat+0x10>
 8005ed4:	bd10      	pop	{r4, pc}

08005ed6 <sulp>:
 8005ed6:	b570      	push	{r4, r5, r6, lr}
 8005ed8:	4604      	mov	r4, r0
 8005eda:	460d      	mov	r5, r1
 8005edc:	ec45 4b10 	vmov	d0, r4, r5
 8005ee0:	4616      	mov	r6, r2
 8005ee2:	f002 fc1f 	bl	8008724 <__ulp>
 8005ee6:	ec51 0b10 	vmov	r0, r1, d0
 8005eea:	b17e      	cbz	r6, 8005f0c <sulp+0x36>
 8005eec:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005ef0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	dd09      	ble.n	8005f0c <sulp+0x36>
 8005ef8:	051b      	lsls	r3, r3, #20
 8005efa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005efe:	2400      	movs	r4, #0
 8005f00:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005f04:	4622      	mov	r2, r4
 8005f06:	462b      	mov	r3, r5
 8005f08:	f7fa fb76 	bl	80005f8 <__aeabi_dmul>
 8005f0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005f10 <_strtod_l>:
 8005f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f14:	b0a3      	sub	sp, #140	; 0x8c
 8005f16:	461f      	mov	r7, r3
 8005f18:	2300      	movs	r3, #0
 8005f1a:	931e      	str	r3, [sp, #120]	; 0x78
 8005f1c:	4ba4      	ldr	r3, [pc, #656]	; (80061b0 <_strtod_l+0x2a0>)
 8005f1e:	9219      	str	r2, [sp, #100]	; 0x64
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	9307      	str	r3, [sp, #28]
 8005f24:	4604      	mov	r4, r0
 8005f26:	4618      	mov	r0, r3
 8005f28:	4688      	mov	r8, r1
 8005f2a:	f7fa f951 	bl	80001d0 <strlen>
 8005f2e:	f04f 0a00 	mov.w	sl, #0
 8005f32:	4605      	mov	r5, r0
 8005f34:	f04f 0b00 	mov.w	fp, #0
 8005f38:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005f3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005f3e:	781a      	ldrb	r2, [r3, #0]
 8005f40:	2a2b      	cmp	r2, #43	; 0x2b
 8005f42:	d04c      	beq.n	8005fde <_strtod_l+0xce>
 8005f44:	d839      	bhi.n	8005fba <_strtod_l+0xaa>
 8005f46:	2a0d      	cmp	r2, #13
 8005f48:	d832      	bhi.n	8005fb0 <_strtod_l+0xa0>
 8005f4a:	2a08      	cmp	r2, #8
 8005f4c:	d832      	bhi.n	8005fb4 <_strtod_l+0xa4>
 8005f4e:	2a00      	cmp	r2, #0
 8005f50:	d03c      	beq.n	8005fcc <_strtod_l+0xbc>
 8005f52:	2300      	movs	r3, #0
 8005f54:	930e      	str	r3, [sp, #56]	; 0x38
 8005f56:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005f58:	7833      	ldrb	r3, [r6, #0]
 8005f5a:	2b30      	cmp	r3, #48	; 0x30
 8005f5c:	f040 80b4 	bne.w	80060c8 <_strtod_l+0x1b8>
 8005f60:	7873      	ldrb	r3, [r6, #1]
 8005f62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005f66:	2b58      	cmp	r3, #88	; 0x58
 8005f68:	d16c      	bne.n	8006044 <_strtod_l+0x134>
 8005f6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f6c:	9301      	str	r3, [sp, #4]
 8005f6e:	ab1e      	add	r3, sp, #120	; 0x78
 8005f70:	9702      	str	r7, [sp, #8]
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	4a8f      	ldr	r2, [pc, #572]	; (80061b4 <_strtod_l+0x2a4>)
 8005f76:	ab1f      	add	r3, sp, #124	; 0x7c
 8005f78:	a91d      	add	r1, sp, #116	; 0x74
 8005f7a:	4620      	mov	r0, r4
 8005f7c:	f001 fd40 	bl	8007a00 <__gethex>
 8005f80:	f010 0707 	ands.w	r7, r0, #7
 8005f84:	4605      	mov	r5, r0
 8005f86:	d005      	beq.n	8005f94 <_strtod_l+0x84>
 8005f88:	2f06      	cmp	r7, #6
 8005f8a:	d12a      	bne.n	8005fe2 <_strtod_l+0xd2>
 8005f8c:	3601      	adds	r6, #1
 8005f8e:	2300      	movs	r3, #0
 8005f90:	961d      	str	r6, [sp, #116]	; 0x74
 8005f92:	930e      	str	r3, [sp, #56]	; 0x38
 8005f94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f040 8596 	bne.w	8006ac8 <_strtod_l+0xbb8>
 8005f9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f9e:	b1db      	cbz	r3, 8005fd8 <_strtod_l+0xc8>
 8005fa0:	4652      	mov	r2, sl
 8005fa2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005fa6:	ec43 2b10 	vmov	d0, r2, r3
 8005faa:	b023      	add	sp, #140	; 0x8c
 8005fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb0:	2a20      	cmp	r2, #32
 8005fb2:	d1ce      	bne.n	8005f52 <_strtod_l+0x42>
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	931d      	str	r3, [sp, #116]	; 0x74
 8005fb8:	e7c0      	b.n	8005f3c <_strtod_l+0x2c>
 8005fba:	2a2d      	cmp	r2, #45	; 0x2d
 8005fbc:	d1c9      	bne.n	8005f52 <_strtod_l+0x42>
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	920e      	str	r2, [sp, #56]	; 0x38
 8005fc2:	1c5a      	adds	r2, r3, #1
 8005fc4:	921d      	str	r2, [sp, #116]	; 0x74
 8005fc6:	785b      	ldrb	r3, [r3, #1]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1c4      	bne.n	8005f56 <_strtod_l+0x46>
 8005fcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005fce:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f040 8576 	bne.w	8006ac4 <_strtod_l+0xbb4>
 8005fd8:	4652      	mov	r2, sl
 8005fda:	465b      	mov	r3, fp
 8005fdc:	e7e3      	b.n	8005fa6 <_strtod_l+0x96>
 8005fde:	2200      	movs	r2, #0
 8005fe0:	e7ee      	b.n	8005fc0 <_strtod_l+0xb0>
 8005fe2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005fe4:	b13a      	cbz	r2, 8005ff6 <_strtod_l+0xe6>
 8005fe6:	2135      	movs	r1, #53	; 0x35
 8005fe8:	a820      	add	r0, sp, #128	; 0x80
 8005fea:	f002 fca6 	bl	800893a <__copybits>
 8005fee:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	f002 f86b 	bl	80080cc <_Bfree>
 8005ff6:	3f01      	subs	r7, #1
 8005ff8:	2f05      	cmp	r7, #5
 8005ffa:	d807      	bhi.n	800600c <_strtod_l+0xfc>
 8005ffc:	e8df f007 	tbb	[pc, r7]
 8006000:	1d180b0e 	.word	0x1d180b0e
 8006004:	030e      	.short	0x030e
 8006006:	f04f 0b00 	mov.w	fp, #0
 800600a:	46da      	mov	sl, fp
 800600c:	0728      	lsls	r0, r5, #28
 800600e:	d5c1      	bpl.n	8005f94 <_strtod_l+0x84>
 8006010:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006014:	e7be      	b.n	8005f94 <_strtod_l+0x84>
 8006016:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800601a:	e7f7      	b.n	800600c <_strtod_l+0xfc>
 800601c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8006020:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006022:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006026:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800602a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800602e:	e7ed      	b.n	800600c <_strtod_l+0xfc>
 8006030:	f8df b184 	ldr.w	fp, [pc, #388]	; 80061b8 <_strtod_l+0x2a8>
 8006034:	f04f 0a00 	mov.w	sl, #0
 8006038:	e7e8      	b.n	800600c <_strtod_l+0xfc>
 800603a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800603e:	f04f 3aff 	mov.w	sl, #4294967295
 8006042:	e7e3      	b.n	800600c <_strtod_l+0xfc>
 8006044:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006046:	1c5a      	adds	r2, r3, #1
 8006048:	921d      	str	r2, [sp, #116]	; 0x74
 800604a:	785b      	ldrb	r3, [r3, #1]
 800604c:	2b30      	cmp	r3, #48	; 0x30
 800604e:	d0f9      	beq.n	8006044 <_strtod_l+0x134>
 8006050:	2b00      	cmp	r3, #0
 8006052:	d09f      	beq.n	8005f94 <_strtod_l+0x84>
 8006054:	2301      	movs	r3, #1
 8006056:	f04f 0900 	mov.w	r9, #0
 800605a:	9304      	str	r3, [sp, #16]
 800605c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800605e:	930a      	str	r3, [sp, #40]	; 0x28
 8006060:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006064:	464f      	mov	r7, r9
 8006066:	220a      	movs	r2, #10
 8006068:	981d      	ldr	r0, [sp, #116]	; 0x74
 800606a:	7806      	ldrb	r6, [r0, #0]
 800606c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006070:	b2d9      	uxtb	r1, r3
 8006072:	2909      	cmp	r1, #9
 8006074:	d92a      	bls.n	80060cc <_strtod_l+0x1bc>
 8006076:	9907      	ldr	r1, [sp, #28]
 8006078:	462a      	mov	r2, r5
 800607a:	f002 fed1 	bl	8008e20 <strncmp>
 800607e:	b398      	cbz	r0, 80060e8 <_strtod_l+0x1d8>
 8006080:	2000      	movs	r0, #0
 8006082:	4633      	mov	r3, r6
 8006084:	463d      	mov	r5, r7
 8006086:	9007      	str	r0, [sp, #28]
 8006088:	4602      	mov	r2, r0
 800608a:	2b65      	cmp	r3, #101	; 0x65
 800608c:	d001      	beq.n	8006092 <_strtod_l+0x182>
 800608e:	2b45      	cmp	r3, #69	; 0x45
 8006090:	d118      	bne.n	80060c4 <_strtod_l+0x1b4>
 8006092:	b91d      	cbnz	r5, 800609c <_strtod_l+0x18c>
 8006094:	9b04      	ldr	r3, [sp, #16]
 8006096:	4303      	orrs	r3, r0
 8006098:	d098      	beq.n	8005fcc <_strtod_l+0xbc>
 800609a:	2500      	movs	r5, #0
 800609c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80060a0:	f108 0301 	add.w	r3, r8, #1
 80060a4:	931d      	str	r3, [sp, #116]	; 0x74
 80060a6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80060aa:	2b2b      	cmp	r3, #43	; 0x2b
 80060ac:	d075      	beq.n	800619a <_strtod_l+0x28a>
 80060ae:	2b2d      	cmp	r3, #45	; 0x2d
 80060b0:	d07b      	beq.n	80061aa <_strtod_l+0x29a>
 80060b2:	f04f 0c00 	mov.w	ip, #0
 80060b6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80060ba:	2909      	cmp	r1, #9
 80060bc:	f240 8082 	bls.w	80061c4 <_strtod_l+0x2b4>
 80060c0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80060c4:	2600      	movs	r6, #0
 80060c6:	e09d      	b.n	8006204 <_strtod_l+0x2f4>
 80060c8:	2300      	movs	r3, #0
 80060ca:	e7c4      	b.n	8006056 <_strtod_l+0x146>
 80060cc:	2f08      	cmp	r7, #8
 80060ce:	bfd8      	it	le
 80060d0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80060d2:	f100 0001 	add.w	r0, r0, #1
 80060d6:	bfda      	itte	le
 80060d8:	fb02 3301 	mlale	r3, r2, r1, r3
 80060dc:	9309      	strle	r3, [sp, #36]	; 0x24
 80060de:	fb02 3909 	mlagt	r9, r2, r9, r3
 80060e2:	3701      	adds	r7, #1
 80060e4:	901d      	str	r0, [sp, #116]	; 0x74
 80060e6:	e7bf      	b.n	8006068 <_strtod_l+0x158>
 80060e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80060ea:	195a      	adds	r2, r3, r5
 80060ec:	921d      	str	r2, [sp, #116]	; 0x74
 80060ee:	5d5b      	ldrb	r3, [r3, r5]
 80060f0:	2f00      	cmp	r7, #0
 80060f2:	d037      	beq.n	8006164 <_strtod_l+0x254>
 80060f4:	9007      	str	r0, [sp, #28]
 80060f6:	463d      	mov	r5, r7
 80060f8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80060fc:	2a09      	cmp	r2, #9
 80060fe:	d912      	bls.n	8006126 <_strtod_l+0x216>
 8006100:	2201      	movs	r2, #1
 8006102:	e7c2      	b.n	800608a <_strtod_l+0x17a>
 8006104:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006106:	1c5a      	adds	r2, r3, #1
 8006108:	921d      	str	r2, [sp, #116]	; 0x74
 800610a:	785b      	ldrb	r3, [r3, #1]
 800610c:	3001      	adds	r0, #1
 800610e:	2b30      	cmp	r3, #48	; 0x30
 8006110:	d0f8      	beq.n	8006104 <_strtod_l+0x1f4>
 8006112:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006116:	2a08      	cmp	r2, #8
 8006118:	f200 84db 	bhi.w	8006ad2 <_strtod_l+0xbc2>
 800611c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800611e:	9007      	str	r0, [sp, #28]
 8006120:	2000      	movs	r0, #0
 8006122:	920a      	str	r2, [sp, #40]	; 0x28
 8006124:	4605      	mov	r5, r0
 8006126:	3b30      	subs	r3, #48	; 0x30
 8006128:	f100 0201 	add.w	r2, r0, #1
 800612c:	d014      	beq.n	8006158 <_strtod_l+0x248>
 800612e:	9907      	ldr	r1, [sp, #28]
 8006130:	4411      	add	r1, r2
 8006132:	9107      	str	r1, [sp, #28]
 8006134:	462a      	mov	r2, r5
 8006136:	eb00 0e05 	add.w	lr, r0, r5
 800613a:	210a      	movs	r1, #10
 800613c:	4572      	cmp	r2, lr
 800613e:	d113      	bne.n	8006168 <_strtod_l+0x258>
 8006140:	182a      	adds	r2, r5, r0
 8006142:	2a08      	cmp	r2, #8
 8006144:	f105 0501 	add.w	r5, r5, #1
 8006148:	4405      	add	r5, r0
 800614a:	dc1c      	bgt.n	8006186 <_strtod_l+0x276>
 800614c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800614e:	220a      	movs	r2, #10
 8006150:	fb02 3301 	mla	r3, r2, r1, r3
 8006154:	9309      	str	r3, [sp, #36]	; 0x24
 8006156:	2200      	movs	r2, #0
 8006158:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800615a:	1c59      	adds	r1, r3, #1
 800615c:	911d      	str	r1, [sp, #116]	; 0x74
 800615e:	785b      	ldrb	r3, [r3, #1]
 8006160:	4610      	mov	r0, r2
 8006162:	e7c9      	b.n	80060f8 <_strtod_l+0x1e8>
 8006164:	4638      	mov	r0, r7
 8006166:	e7d2      	b.n	800610e <_strtod_l+0x1fe>
 8006168:	2a08      	cmp	r2, #8
 800616a:	dc04      	bgt.n	8006176 <_strtod_l+0x266>
 800616c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800616e:	434e      	muls	r6, r1
 8006170:	9609      	str	r6, [sp, #36]	; 0x24
 8006172:	3201      	adds	r2, #1
 8006174:	e7e2      	b.n	800613c <_strtod_l+0x22c>
 8006176:	f102 0c01 	add.w	ip, r2, #1
 800617a:	f1bc 0f10 	cmp.w	ip, #16
 800617e:	bfd8      	it	le
 8006180:	fb01 f909 	mulle.w	r9, r1, r9
 8006184:	e7f5      	b.n	8006172 <_strtod_l+0x262>
 8006186:	2d10      	cmp	r5, #16
 8006188:	bfdc      	itt	le
 800618a:	220a      	movle	r2, #10
 800618c:	fb02 3909 	mlale	r9, r2, r9, r3
 8006190:	e7e1      	b.n	8006156 <_strtod_l+0x246>
 8006192:	2300      	movs	r3, #0
 8006194:	9307      	str	r3, [sp, #28]
 8006196:	2201      	movs	r2, #1
 8006198:	e77c      	b.n	8006094 <_strtod_l+0x184>
 800619a:	f04f 0c00 	mov.w	ip, #0
 800619e:	f108 0302 	add.w	r3, r8, #2
 80061a2:	931d      	str	r3, [sp, #116]	; 0x74
 80061a4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80061a8:	e785      	b.n	80060b6 <_strtod_l+0x1a6>
 80061aa:	f04f 0c01 	mov.w	ip, #1
 80061ae:	e7f6      	b.n	800619e <_strtod_l+0x28e>
 80061b0:	08009cf8 	.word	0x08009cf8
 80061b4:	08009aa8 	.word	0x08009aa8
 80061b8:	7ff00000 	.word	0x7ff00000
 80061bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80061be:	1c59      	adds	r1, r3, #1
 80061c0:	911d      	str	r1, [sp, #116]	; 0x74
 80061c2:	785b      	ldrb	r3, [r3, #1]
 80061c4:	2b30      	cmp	r3, #48	; 0x30
 80061c6:	d0f9      	beq.n	80061bc <_strtod_l+0x2ac>
 80061c8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80061cc:	2908      	cmp	r1, #8
 80061ce:	f63f af79 	bhi.w	80060c4 <_strtod_l+0x1b4>
 80061d2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80061d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80061d8:	9308      	str	r3, [sp, #32]
 80061da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80061dc:	1c59      	adds	r1, r3, #1
 80061de:	911d      	str	r1, [sp, #116]	; 0x74
 80061e0:	785b      	ldrb	r3, [r3, #1]
 80061e2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80061e6:	2e09      	cmp	r6, #9
 80061e8:	d937      	bls.n	800625a <_strtod_l+0x34a>
 80061ea:	9e08      	ldr	r6, [sp, #32]
 80061ec:	1b89      	subs	r1, r1, r6
 80061ee:	2908      	cmp	r1, #8
 80061f0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80061f4:	dc02      	bgt.n	80061fc <_strtod_l+0x2ec>
 80061f6:	4576      	cmp	r6, lr
 80061f8:	bfa8      	it	ge
 80061fa:	4676      	movge	r6, lr
 80061fc:	f1bc 0f00 	cmp.w	ip, #0
 8006200:	d000      	beq.n	8006204 <_strtod_l+0x2f4>
 8006202:	4276      	negs	r6, r6
 8006204:	2d00      	cmp	r5, #0
 8006206:	d14f      	bne.n	80062a8 <_strtod_l+0x398>
 8006208:	9904      	ldr	r1, [sp, #16]
 800620a:	4301      	orrs	r1, r0
 800620c:	f47f aec2 	bne.w	8005f94 <_strtod_l+0x84>
 8006210:	2a00      	cmp	r2, #0
 8006212:	f47f aedb 	bne.w	8005fcc <_strtod_l+0xbc>
 8006216:	2b69      	cmp	r3, #105	; 0x69
 8006218:	d027      	beq.n	800626a <_strtod_l+0x35a>
 800621a:	dc24      	bgt.n	8006266 <_strtod_l+0x356>
 800621c:	2b49      	cmp	r3, #73	; 0x49
 800621e:	d024      	beq.n	800626a <_strtod_l+0x35a>
 8006220:	2b4e      	cmp	r3, #78	; 0x4e
 8006222:	f47f aed3 	bne.w	8005fcc <_strtod_l+0xbc>
 8006226:	499e      	ldr	r1, [pc, #632]	; (80064a0 <_strtod_l+0x590>)
 8006228:	a81d      	add	r0, sp, #116	; 0x74
 800622a:	f001 fe41 	bl	8007eb0 <__match>
 800622e:	2800      	cmp	r0, #0
 8006230:	f43f aecc 	beq.w	8005fcc <_strtod_l+0xbc>
 8006234:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	2b28      	cmp	r3, #40	; 0x28
 800623a:	d12d      	bne.n	8006298 <_strtod_l+0x388>
 800623c:	4999      	ldr	r1, [pc, #612]	; (80064a4 <_strtod_l+0x594>)
 800623e:	aa20      	add	r2, sp, #128	; 0x80
 8006240:	a81d      	add	r0, sp, #116	; 0x74
 8006242:	f001 fe49 	bl	8007ed8 <__hexnan>
 8006246:	2805      	cmp	r0, #5
 8006248:	d126      	bne.n	8006298 <_strtod_l+0x388>
 800624a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800624c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8006250:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006254:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006258:	e69c      	b.n	8005f94 <_strtod_l+0x84>
 800625a:	210a      	movs	r1, #10
 800625c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006260:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006264:	e7b9      	b.n	80061da <_strtod_l+0x2ca>
 8006266:	2b6e      	cmp	r3, #110	; 0x6e
 8006268:	e7db      	b.n	8006222 <_strtod_l+0x312>
 800626a:	498f      	ldr	r1, [pc, #572]	; (80064a8 <_strtod_l+0x598>)
 800626c:	a81d      	add	r0, sp, #116	; 0x74
 800626e:	f001 fe1f 	bl	8007eb0 <__match>
 8006272:	2800      	cmp	r0, #0
 8006274:	f43f aeaa 	beq.w	8005fcc <_strtod_l+0xbc>
 8006278:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800627a:	498c      	ldr	r1, [pc, #560]	; (80064ac <_strtod_l+0x59c>)
 800627c:	3b01      	subs	r3, #1
 800627e:	a81d      	add	r0, sp, #116	; 0x74
 8006280:	931d      	str	r3, [sp, #116]	; 0x74
 8006282:	f001 fe15 	bl	8007eb0 <__match>
 8006286:	b910      	cbnz	r0, 800628e <_strtod_l+0x37e>
 8006288:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800628a:	3301      	adds	r3, #1
 800628c:	931d      	str	r3, [sp, #116]	; 0x74
 800628e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80064bc <_strtod_l+0x5ac>
 8006292:	f04f 0a00 	mov.w	sl, #0
 8006296:	e67d      	b.n	8005f94 <_strtod_l+0x84>
 8006298:	4885      	ldr	r0, [pc, #532]	; (80064b0 <_strtod_l+0x5a0>)
 800629a:	f002 fda9 	bl	8008df0 <nan>
 800629e:	ed8d 0b04 	vstr	d0, [sp, #16]
 80062a2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80062a6:	e675      	b.n	8005f94 <_strtod_l+0x84>
 80062a8:	9b07      	ldr	r3, [sp, #28]
 80062aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062ac:	1af3      	subs	r3, r6, r3
 80062ae:	2f00      	cmp	r7, #0
 80062b0:	bf08      	it	eq
 80062b2:	462f      	moveq	r7, r5
 80062b4:	2d10      	cmp	r5, #16
 80062b6:	9308      	str	r3, [sp, #32]
 80062b8:	46a8      	mov	r8, r5
 80062ba:	bfa8      	it	ge
 80062bc:	f04f 0810 	movge.w	r8, #16
 80062c0:	f7fa f920 	bl	8000504 <__aeabi_ui2d>
 80062c4:	2d09      	cmp	r5, #9
 80062c6:	4682      	mov	sl, r0
 80062c8:	468b      	mov	fp, r1
 80062ca:	dd13      	ble.n	80062f4 <_strtod_l+0x3e4>
 80062cc:	4b79      	ldr	r3, [pc, #484]	; (80064b4 <_strtod_l+0x5a4>)
 80062ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80062d2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80062d6:	f7fa f98f 	bl	80005f8 <__aeabi_dmul>
 80062da:	4682      	mov	sl, r0
 80062dc:	4648      	mov	r0, r9
 80062de:	468b      	mov	fp, r1
 80062e0:	f7fa f910 	bl	8000504 <__aeabi_ui2d>
 80062e4:	4602      	mov	r2, r0
 80062e6:	460b      	mov	r3, r1
 80062e8:	4650      	mov	r0, sl
 80062ea:	4659      	mov	r1, fp
 80062ec:	f7f9 ffce 	bl	800028c <__adddf3>
 80062f0:	4682      	mov	sl, r0
 80062f2:	468b      	mov	fp, r1
 80062f4:	2d0f      	cmp	r5, #15
 80062f6:	dc38      	bgt.n	800636a <_strtod_l+0x45a>
 80062f8:	9b08      	ldr	r3, [sp, #32]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f43f ae4a 	beq.w	8005f94 <_strtod_l+0x84>
 8006300:	dd24      	ble.n	800634c <_strtod_l+0x43c>
 8006302:	2b16      	cmp	r3, #22
 8006304:	dc0b      	bgt.n	800631e <_strtod_l+0x40e>
 8006306:	4d6b      	ldr	r5, [pc, #428]	; (80064b4 <_strtod_l+0x5a4>)
 8006308:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800630c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006310:	4652      	mov	r2, sl
 8006312:	465b      	mov	r3, fp
 8006314:	f7fa f970 	bl	80005f8 <__aeabi_dmul>
 8006318:	4682      	mov	sl, r0
 800631a:	468b      	mov	fp, r1
 800631c:	e63a      	b.n	8005f94 <_strtod_l+0x84>
 800631e:	9a08      	ldr	r2, [sp, #32]
 8006320:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006324:	4293      	cmp	r3, r2
 8006326:	db20      	blt.n	800636a <_strtod_l+0x45a>
 8006328:	4c62      	ldr	r4, [pc, #392]	; (80064b4 <_strtod_l+0x5a4>)
 800632a:	f1c5 050f 	rsb	r5, r5, #15
 800632e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006332:	4652      	mov	r2, sl
 8006334:	465b      	mov	r3, fp
 8006336:	e9d1 0100 	ldrd	r0, r1, [r1]
 800633a:	f7fa f95d 	bl	80005f8 <__aeabi_dmul>
 800633e:	9b08      	ldr	r3, [sp, #32]
 8006340:	1b5d      	subs	r5, r3, r5
 8006342:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006346:	e9d4 2300 	ldrd	r2, r3, [r4]
 800634a:	e7e3      	b.n	8006314 <_strtod_l+0x404>
 800634c:	9b08      	ldr	r3, [sp, #32]
 800634e:	3316      	adds	r3, #22
 8006350:	db0b      	blt.n	800636a <_strtod_l+0x45a>
 8006352:	9b07      	ldr	r3, [sp, #28]
 8006354:	4a57      	ldr	r2, [pc, #348]	; (80064b4 <_strtod_l+0x5a4>)
 8006356:	1b9e      	subs	r6, r3, r6
 8006358:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800635c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006360:	4650      	mov	r0, sl
 8006362:	4659      	mov	r1, fp
 8006364:	f7fa fa72 	bl	800084c <__aeabi_ddiv>
 8006368:	e7d6      	b.n	8006318 <_strtod_l+0x408>
 800636a:	9b08      	ldr	r3, [sp, #32]
 800636c:	eba5 0808 	sub.w	r8, r5, r8
 8006370:	4498      	add	r8, r3
 8006372:	f1b8 0f00 	cmp.w	r8, #0
 8006376:	dd71      	ble.n	800645c <_strtod_l+0x54c>
 8006378:	f018 030f 	ands.w	r3, r8, #15
 800637c:	d00a      	beq.n	8006394 <_strtod_l+0x484>
 800637e:	494d      	ldr	r1, [pc, #308]	; (80064b4 <_strtod_l+0x5a4>)
 8006380:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006384:	4652      	mov	r2, sl
 8006386:	465b      	mov	r3, fp
 8006388:	e9d1 0100 	ldrd	r0, r1, [r1]
 800638c:	f7fa f934 	bl	80005f8 <__aeabi_dmul>
 8006390:	4682      	mov	sl, r0
 8006392:	468b      	mov	fp, r1
 8006394:	f038 080f 	bics.w	r8, r8, #15
 8006398:	d04d      	beq.n	8006436 <_strtod_l+0x526>
 800639a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800639e:	dd22      	ble.n	80063e6 <_strtod_l+0x4d6>
 80063a0:	2500      	movs	r5, #0
 80063a2:	462e      	mov	r6, r5
 80063a4:	9509      	str	r5, [sp, #36]	; 0x24
 80063a6:	9507      	str	r5, [sp, #28]
 80063a8:	2322      	movs	r3, #34	; 0x22
 80063aa:	f8df b110 	ldr.w	fp, [pc, #272]	; 80064bc <_strtod_l+0x5ac>
 80063ae:	6023      	str	r3, [r4, #0]
 80063b0:	f04f 0a00 	mov.w	sl, #0
 80063b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f43f adec 	beq.w	8005f94 <_strtod_l+0x84>
 80063bc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80063be:	4620      	mov	r0, r4
 80063c0:	f001 fe84 	bl	80080cc <_Bfree>
 80063c4:	9907      	ldr	r1, [sp, #28]
 80063c6:	4620      	mov	r0, r4
 80063c8:	f001 fe80 	bl	80080cc <_Bfree>
 80063cc:	4631      	mov	r1, r6
 80063ce:	4620      	mov	r0, r4
 80063d0:	f001 fe7c 	bl	80080cc <_Bfree>
 80063d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063d6:	4620      	mov	r0, r4
 80063d8:	f001 fe78 	bl	80080cc <_Bfree>
 80063dc:	4629      	mov	r1, r5
 80063de:	4620      	mov	r0, r4
 80063e0:	f001 fe74 	bl	80080cc <_Bfree>
 80063e4:	e5d6      	b.n	8005f94 <_strtod_l+0x84>
 80063e6:	2300      	movs	r3, #0
 80063e8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80063ec:	4650      	mov	r0, sl
 80063ee:	4659      	mov	r1, fp
 80063f0:	4699      	mov	r9, r3
 80063f2:	f1b8 0f01 	cmp.w	r8, #1
 80063f6:	dc21      	bgt.n	800643c <_strtod_l+0x52c>
 80063f8:	b10b      	cbz	r3, 80063fe <_strtod_l+0x4ee>
 80063fa:	4682      	mov	sl, r0
 80063fc:	468b      	mov	fp, r1
 80063fe:	4b2e      	ldr	r3, [pc, #184]	; (80064b8 <_strtod_l+0x5a8>)
 8006400:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006404:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006408:	4652      	mov	r2, sl
 800640a:	465b      	mov	r3, fp
 800640c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006410:	f7fa f8f2 	bl	80005f8 <__aeabi_dmul>
 8006414:	4b29      	ldr	r3, [pc, #164]	; (80064bc <_strtod_l+0x5ac>)
 8006416:	460a      	mov	r2, r1
 8006418:	400b      	ands	r3, r1
 800641a:	4929      	ldr	r1, [pc, #164]	; (80064c0 <_strtod_l+0x5b0>)
 800641c:	428b      	cmp	r3, r1
 800641e:	4682      	mov	sl, r0
 8006420:	d8be      	bhi.n	80063a0 <_strtod_l+0x490>
 8006422:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006426:	428b      	cmp	r3, r1
 8006428:	bf86      	itte	hi
 800642a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80064c4 <_strtod_l+0x5b4>
 800642e:	f04f 3aff 	movhi.w	sl, #4294967295
 8006432:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006436:	2300      	movs	r3, #0
 8006438:	9304      	str	r3, [sp, #16]
 800643a:	e081      	b.n	8006540 <_strtod_l+0x630>
 800643c:	f018 0f01 	tst.w	r8, #1
 8006440:	d007      	beq.n	8006452 <_strtod_l+0x542>
 8006442:	4b1d      	ldr	r3, [pc, #116]	; (80064b8 <_strtod_l+0x5a8>)
 8006444:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644c:	f7fa f8d4 	bl	80005f8 <__aeabi_dmul>
 8006450:	2301      	movs	r3, #1
 8006452:	f109 0901 	add.w	r9, r9, #1
 8006456:	ea4f 0868 	mov.w	r8, r8, asr #1
 800645a:	e7ca      	b.n	80063f2 <_strtod_l+0x4e2>
 800645c:	d0eb      	beq.n	8006436 <_strtod_l+0x526>
 800645e:	f1c8 0800 	rsb	r8, r8, #0
 8006462:	f018 020f 	ands.w	r2, r8, #15
 8006466:	d00a      	beq.n	800647e <_strtod_l+0x56e>
 8006468:	4b12      	ldr	r3, [pc, #72]	; (80064b4 <_strtod_l+0x5a4>)
 800646a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800646e:	4650      	mov	r0, sl
 8006470:	4659      	mov	r1, fp
 8006472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006476:	f7fa f9e9 	bl	800084c <__aeabi_ddiv>
 800647a:	4682      	mov	sl, r0
 800647c:	468b      	mov	fp, r1
 800647e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006482:	d0d8      	beq.n	8006436 <_strtod_l+0x526>
 8006484:	f1b8 0f1f 	cmp.w	r8, #31
 8006488:	dd1e      	ble.n	80064c8 <_strtod_l+0x5b8>
 800648a:	2500      	movs	r5, #0
 800648c:	462e      	mov	r6, r5
 800648e:	9509      	str	r5, [sp, #36]	; 0x24
 8006490:	9507      	str	r5, [sp, #28]
 8006492:	2322      	movs	r3, #34	; 0x22
 8006494:	f04f 0a00 	mov.w	sl, #0
 8006498:	f04f 0b00 	mov.w	fp, #0
 800649c:	6023      	str	r3, [r4, #0]
 800649e:	e789      	b.n	80063b4 <_strtod_l+0x4a4>
 80064a0:	08009a79 	.word	0x08009a79
 80064a4:	08009abc 	.word	0x08009abc
 80064a8:	08009a71 	.word	0x08009a71
 80064ac:	08009bfc 	.word	0x08009bfc
 80064b0:	08009eb8 	.word	0x08009eb8
 80064b4:	08009d98 	.word	0x08009d98
 80064b8:	08009d70 	.word	0x08009d70
 80064bc:	7ff00000 	.word	0x7ff00000
 80064c0:	7ca00000 	.word	0x7ca00000
 80064c4:	7fefffff 	.word	0x7fefffff
 80064c8:	f018 0310 	ands.w	r3, r8, #16
 80064cc:	bf18      	it	ne
 80064ce:	236a      	movne	r3, #106	; 0x6a
 80064d0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8006888 <_strtod_l+0x978>
 80064d4:	9304      	str	r3, [sp, #16]
 80064d6:	4650      	mov	r0, sl
 80064d8:	4659      	mov	r1, fp
 80064da:	2300      	movs	r3, #0
 80064dc:	f018 0f01 	tst.w	r8, #1
 80064e0:	d004      	beq.n	80064ec <_strtod_l+0x5dc>
 80064e2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80064e6:	f7fa f887 	bl	80005f8 <__aeabi_dmul>
 80064ea:	2301      	movs	r3, #1
 80064ec:	ea5f 0868 	movs.w	r8, r8, asr #1
 80064f0:	f109 0908 	add.w	r9, r9, #8
 80064f4:	d1f2      	bne.n	80064dc <_strtod_l+0x5cc>
 80064f6:	b10b      	cbz	r3, 80064fc <_strtod_l+0x5ec>
 80064f8:	4682      	mov	sl, r0
 80064fa:	468b      	mov	fp, r1
 80064fc:	9b04      	ldr	r3, [sp, #16]
 80064fe:	b1bb      	cbz	r3, 8006530 <_strtod_l+0x620>
 8006500:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006504:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006508:	2b00      	cmp	r3, #0
 800650a:	4659      	mov	r1, fp
 800650c:	dd10      	ble.n	8006530 <_strtod_l+0x620>
 800650e:	2b1f      	cmp	r3, #31
 8006510:	f340 8128 	ble.w	8006764 <_strtod_l+0x854>
 8006514:	2b34      	cmp	r3, #52	; 0x34
 8006516:	bfde      	ittt	le
 8006518:	3b20      	suble	r3, #32
 800651a:	f04f 32ff 	movle.w	r2, #4294967295
 800651e:	fa02 f303 	lslle.w	r3, r2, r3
 8006522:	f04f 0a00 	mov.w	sl, #0
 8006526:	bfcc      	ite	gt
 8006528:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800652c:	ea03 0b01 	andle.w	fp, r3, r1
 8006530:	2200      	movs	r2, #0
 8006532:	2300      	movs	r3, #0
 8006534:	4650      	mov	r0, sl
 8006536:	4659      	mov	r1, fp
 8006538:	f7fa fac6 	bl	8000ac8 <__aeabi_dcmpeq>
 800653c:	2800      	cmp	r0, #0
 800653e:	d1a4      	bne.n	800648a <_strtod_l+0x57a>
 8006540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006546:	462b      	mov	r3, r5
 8006548:	463a      	mov	r2, r7
 800654a:	4620      	mov	r0, r4
 800654c:	f001 fe2a 	bl	80081a4 <__s2b>
 8006550:	9009      	str	r0, [sp, #36]	; 0x24
 8006552:	2800      	cmp	r0, #0
 8006554:	f43f af24 	beq.w	80063a0 <_strtod_l+0x490>
 8006558:	9b07      	ldr	r3, [sp, #28]
 800655a:	1b9e      	subs	r6, r3, r6
 800655c:	9b08      	ldr	r3, [sp, #32]
 800655e:	2b00      	cmp	r3, #0
 8006560:	bfb4      	ite	lt
 8006562:	4633      	movlt	r3, r6
 8006564:	2300      	movge	r3, #0
 8006566:	9310      	str	r3, [sp, #64]	; 0x40
 8006568:	9b08      	ldr	r3, [sp, #32]
 800656a:	2500      	movs	r5, #0
 800656c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006570:	9318      	str	r3, [sp, #96]	; 0x60
 8006572:	462e      	mov	r6, r5
 8006574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006576:	4620      	mov	r0, r4
 8006578:	6859      	ldr	r1, [r3, #4]
 800657a:	f001 fd67 	bl	800804c <_Balloc>
 800657e:	9007      	str	r0, [sp, #28]
 8006580:	2800      	cmp	r0, #0
 8006582:	f43f af11 	beq.w	80063a8 <_strtod_l+0x498>
 8006586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006588:	691a      	ldr	r2, [r3, #16]
 800658a:	3202      	adds	r2, #2
 800658c:	f103 010c 	add.w	r1, r3, #12
 8006590:	0092      	lsls	r2, r2, #2
 8006592:	300c      	adds	r0, #12
 8006594:	f7fe fdda 	bl	800514c <memcpy>
 8006598:	ec4b ab10 	vmov	d0, sl, fp
 800659c:	aa20      	add	r2, sp, #128	; 0x80
 800659e:	a91f      	add	r1, sp, #124	; 0x7c
 80065a0:	4620      	mov	r0, r4
 80065a2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80065a6:	f002 f939 	bl	800881c <__d2b>
 80065aa:	901e      	str	r0, [sp, #120]	; 0x78
 80065ac:	2800      	cmp	r0, #0
 80065ae:	f43f aefb 	beq.w	80063a8 <_strtod_l+0x498>
 80065b2:	2101      	movs	r1, #1
 80065b4:	4620      	mov	r0, r4
 80065b6:	f001 fe8f 	bl	80082d8 <__i2b>
 80065ba:	4606      	mov	r6, r0
 80065bc:	2800      	cmp	r0, #0
 80065be:	f43f aef3 	beq.w	80063a8 <_strtod_l+0x498>
 80065c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80065c4:	9904      	ldr	r1, [sp, #16]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	bfab      	itete	ge
 80065ca:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80065cc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80065ce:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80065d0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80065d4:	bfac      	ite	ge
 80065d6:	eb03 0902 	addge.w	r9, r3, r2
 80065da:	1ad7      	sublt	r7, r2, r3
 80065dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80065de:	eba3 0801 	sub.w	r8, r3, r1
 80065e2:	4490      	add	r8, r2
 80065e4:	4ba3      	ldr	r3, [pc, #652]	; (8006874 <_strtod_l+0x964>)
 80065e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80065ea:	4598      	cmp	r8, r3
 80065ec:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80065f0:	f280 80cc 	bge.w	800678c <_strtod_l+0x87c>
 80065f4:	eba3 0308 	sub.w	r3, r3, r8
 80065f8:	2b1f      	cmp	r3, #31
 80065fa:	eba2 0203 	sub.w	r2, r2, r3
 80065fe:	f04f 0101 	mov.w	r1, #1
 8006602:	f300 80b6 	bgt.w	8006772 <_strtod_l+0x862>
 8006606:	fa01 f303 	lsl.w	r3, r1, r3
 800660a:	9311      	str	r3, [sp, #68]	; 0x44
 800660c:	2300      	movs	r3, #0
 800660e:	930c      	str	r3, [sp, #48]	; 0x30
 8006610:	eb09 0802 	add.w	r8, r9, r2
 8006614:	9b04      	ldr	r3, [sp, #16]
 8006616:	45c1      	cmp	r9, r8
 8006618:	4417      	add	r7, r2
 800661a:	441f      	add	r7, r3
 800661c:	464b      	mov	r3, r9
 800661e:	bfa8      	it	ge
 8006620:	4643      	movge	r3, r8
 8006622:	42bb      	cmp	r3, r7
 8006624:	bfa8      	it	ge
 8006626:	463b      	movge	r3, r7
 8006628:	2b00      	cmp	r3, #0
 800662a:	bfc2      	ittt	gt
 800662c:	eba8 0803 	subgt.w	r8, r8, r3
 8006630:	1aff      	subgt	r7, r7, r3
 8006632:	eba9 0903 	subgt.w	r9, r9, r3
 8006636:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006638:	2b00      	cmp	r3, #0
 800663a:	dd17      	ble.n	800666c <_strtod_l+0x75c>
 800663c:	4631      	mov	r1, r6
 800663e:	461a      	mov	r2, r3
 8006640:	4620      	mov	r0, r4
 8006642:	f001 ff05 	bl	8008450 <__pow5mult>
 8006646:	4606      	mov	r6, r0
 8006648:	2800      	cmp	r0, #0
 800664a:	f43f aead 	beq.w	80063a8 <_strtod_l+0x498>
 800664e:	4601      	mov	r1, r0
 8006650:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006652:	4620      	mov	r0, r4
 8006654:	f001 fe56 	bl	8008304 <__multiply>
 8006658:	900f      	str	r0, [sp, #60]	; 0x3c
 800665a:	2800      	cmp	r0, #0
 800665c:	f43f aea4 	beq.w	80063a8 <_strtod_l+0x498>
 8006660:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006662:	4620      	mov	r0, r4
 8006664:	f001 fd32 	bl	80080cc <_Bfree>
 8006668:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800666a:	931e      	str	r3, [sp, #120]	; 0x78
 800666c:	f1b8 0f00 	cmp.w	r8, #0
 8006670:	f300 8091 	bgt.w	8006796 <_strtod_l+0x886>
 8006674:	9b08      	ldr	r3, [sp, #32]
 8006676:	2b00      	cmp	r3, #0
 8006678:	dd08      	ble.n	800668c <_strtod_l+0x77c>
 800667a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800667c:	9907      	ldr	r1, [sp, #28]
 800667e:	4620      	mov	r0, r4
 8006680:	f001 fee6 	bl	8008450 <__pow5mult>
 8006684:	9007      	str	r0, [sp, #28]
 8006686:	2800      	cmp	r0, #0
 8006688:	f43f ae8e 	beq.w	80063a8 <_strtod_l+0x498>
 800668c:	2f00      	cmp	r7, #0
 800668e:	dd08      	ble.n	80066a2 <_strtod_l+0x792>
 8006690:	9907      	ldr	r1, [sp, #28]
 8006692:	463a      	mov	r2, r7
 8006694:	4620      	mov	r0, r4
 8006696:	f001 ff35 	bl	8008504 <__lshift>
 800669a:	9007      	str	r0, [sp, #28]
 800669c:	2800      	cmp	r0, #0
 800669e:	f43f ae83 	beq.w	80063a8 <_strtod_l+0x498>
 80066a2:	f1b9 0f00 	cmp.w	r9, #0
 80066a6:	dd08      	ble.n	80066ba <_strtod_l+0x7aa>
 80066a8:	4631      	mov	r1, r6
 80066aa:	464a      	mov	r2, r9
 80066ac:	4620      	mov	r0, r4
 80066ae:	f001 ff29 	bl	8008504 <__lshift>
 80066b2:	4606      	mov	r6, r0
 80066b4:	2800      	cmp	r0, #0
 80066b6:	f43f ae77 	beq.w	80063a8 <_strtod_l+0x498>
 80066ba:	9a07      	ldr	r2, [sp, #28]
 80066bc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80066be:	4620      	mov	r0, r4
 80066c0:	f001 ffa8 	bl	8008614 <__mdiff>
 80066c4:	4605      	mov	r5, r0
 80066c6:	2800      	cmp	r0, #0
 80066c8:	f43f ae6e 	beq.w	80063a8 <_strtod_l+0x498>
 80066cc:	68c3      	ldr	r3, [r0, #12]
 80066ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80066d0:	2300      	movs	r3, #0
 80066d2:	60c3      	str	r3, [r0, #12]
 80066d4:	4631      	mov	r1, r6
 80066d6:	f001 ff81 	bl	80085dc <__mcmp>
 80066da:	2800      	cmp	r0, #0
 80066dc:	da65      	bge.n	80067aa <_strtod_l+0x89a>
 80066de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066e0:	ea53 030a 	orrs.w	r3, r3, sl
 80066e4:	f040 8087 	bne.w	80067f6 <_strtod_l+0x8e6>
 80066e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f040 8082 	bne.w	80067f6 <_strtod_l+0x8e6>
 80066f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80066f6:	0d1b      	lsrs	r3, r3, #20
 80066f8:	051b      	lsls	r3, r3, #20
 80066fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80066fe:	d97a      	bls.n	80067f6 <_strtod_l+0x8e6>
 8006700:	696b      	ldr	r3, [r5, #20]
 8006702:	b913      	cbnz	r3, 800670a <_strtod_l+0x7fa>
 8006704:	692b      	ldr	r3, [r5, #16]
 8006706:	2b01      	cmp	r3, #1
 8006708:	dd75      	ble.n	80067f6 <_strtod_l+0x8e6>
 800670a:	4629      	mov	r1, r5
 800670c:	2201      	movs	r2, #1
 800670e:	4620      	mov	r0, r4
 8006710:	f001 fef8 	bl	8008504 <__lshift>
 8006714:	4631      	mov	r1, r6
 8006716:	4605      	mov	r5, r0
 8006718:	f001 ff60 	bl	80085dc <__mcmp>
 800671c:	2800      	cmp	r0, #0
 800671e:	dd6a      	ble.n	80067f6 <_strtod_l+0x8e6>
 8006720:	9904      	ldr	r1, [sp, #16]
 8006722:	4a55      	ldr	r2, [pc, #340]	; (8006878 <_strtod_l+0x968>)
 8006724:	465b      	mov	r3, fp
 8006726:	2900      	cmp	r1, #0
 8006728:	f000 8085 	beq.w	8006836 <_strtod_l+0x926>
 800672c:	ea02 010b 	and.w	r1, r2, fp
 8006730:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006734:	dc7f      	bgt.n	8006836 <_strtod_l+0x926>
 8006736:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800673a:	f77f aeaa 	ble.w	8006492 <_strtod_l+0x582>
 800673e:	4a4f      	ldr	r2, [pc, #316]	; (800687c <_strtod_l+0x96c>)
 8006740:	2300      	movs	r3, #0
 8006742:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8006746:	4650      	mov	r0, sl
 8006748:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800674c:	4659      	mov	r1, fp
 800674e:	f7f9 ff53 	bl	80005f8 <__aeabi_dmul>
 8006752:	460b      	mov	r3, r1
 8006754:	4303      	orrs	r3, r0
 8006756:	bf08      	it	eq
 8006758:	2322      	moveq	r3, #34	; 0x22
 800675a:	4682      	mov	sl, r0
 800675c:	468b      	mov	fp, r1
 800675e:	bf08      	it	eq
 8006760:	6023      	streq	r3, [r4, #0]
 8006762:	e62b      	b.n	80063bc <_strtod_l+0x4ac>
 8006764:	f04f 32ff 	mov.w	r2, #4294967295
 8006768:	fa02 f303 	lsl.w	r3, r2, r3
 800676c:	ea03 0a0a 	and.w	sl, r3, sl
 8006770:	e6de      	b.n	8006530 <_strtod_l+0x620>
 8006772:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006776:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800677a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800677e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006782:	fa01 f308 	lsl.w	r3, r1, r8
 8006786:	930c      	str	r3, [sp, #48]	; 0x30
 8006788:	9111      	str	r1, [sp, #68]	; 0x44
 800678a:	e741      	b.n	8006610 <_strtod_l+0x700>
 800678c:	2300      	movs	r3, #0
 800678e:	930c      	str	r3, [sp, #48]	; 0x30
 8006790:	2301      	movs	r3, #1
 8006792:	9311      	str	r3, [sp, #68]	; 0x44
 8006794:	e73c      	b.n	8006610 <_strtod_l+0x700>
 8006796:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006798:	4642      	mov	r2, r8
 800679a:	4620      	mov	r0, r4
 800679c:	f001 feb2 	bl	8008504 <__lshift>
 80067a0:	901e      	str	r0, [sp, #120]	; 0x78
 80067a2:	2800      	cmp	r0, #0
 80067a4:	f47f af66 	bne.w	8006674 <_strtod_l+0x764>
 80067a8:	e5fe      	b.n	80063a8 <_strtod_l+0x498>
 80067aa:	465f      	mov	r7, fp
 80067ac:	d16e      	bne.n	800688c <_strtod_l+0x97c>
 80067ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80067b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80067b4:	b342      	cbz	r2, 8006808 <_strtod_l+0x8f8>
 80067b6:	4a32      	ldr	r2, [pc, #200]	; (8006880 <_strtod_l+0x970>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d128      	bne.n	800680e <_strtod_l+0x8fe>
 80067bc:	9b04      	ldr	r3, [sp, #16]
 80067be:	4650      	mov	r0, sl
 80067c0:	b1eb      	cbz	r3, 80067fe <_strtod_l+0x8ee>
 80067c2:	4a2d      	ldr	r2, [pc, #180]	; (8006878 <_strtod_l+0x968>)
 80067c4:	403a      	ands	r2, r7
 80067c6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80067ca:	f04f 31ff 	mov.w	r1, #4294967295
 80067ce:	d819      	bhi.n	8006804 <_strtod_l+0x8f4>
 80067d0:	0d12      	lsrs	r2, r2, #20
 80067d2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80067d6:	fa01 f303 	lsl.w	r3, r1, r3
 80067da:	4298      	cmp	r0, r3
 80067dc:	d117      	bne.n	800680e <_strtod_l+0x8fe>
 80067de:	4b29      	ldr	r3, [pc, #164]	; (8006884 <_strtod_l+0x974>)
 80067e0:	429f      	cmp	r7, r3
 80067e2:	d102      	bne.n	80067ea <_strtod_l+0x8da>
 80067e4:	3001      	adds	r0, #1
 80067e6:	f43f addf 	beq.w	80063a8 <_strtod_l+0x498>
 80067ea:	4b23      	ldr	r3, [pc, #140]	; (8006878 <_strtod_l+0x968>)
 80067ec:	403b      	ands	r3, r7
 80067ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80067f2:	f04f 0a00 	mov.w	sl, #0
 80067f6:	9b04      	ldr	r3, [sp, #16]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1a0      	bne.n	800673e <_strtod_l+0x82e>
 80067fc:	e5de      	b.n	80063bc <_strtod_l+0x4ac>
 80067fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006802:	e7ea      	b.n	80067da <_strtod_l+0x8ca>
 8006804:	460b      	mov	r3, r1
 8006806:	e7e8      	b.n	80067da <_strtod_l+0x8ca>
 8006808:	ea53 030a 	orrs.w	r3, r3, sl
 800680c:	d088      	beq.n	8006720 <_strtod_l+0x810>
 800680e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006810:	b1db      	cbz	r3, 800684a <_strtod_l+0x93a>
 8006812:	423b      	tst	r3, r7
 8006814:	d0ef      	beq.n	80067f6 <_strtod_l+0x8e6>
 8006816:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006818:	9a04      	ldr	r2, [sp, #16]
 800681a:	4650      	mov	r0, sl
 800681c:	4659      	mov	r1, fp
 800681e:	b1c3      	cbz	r3, 8006852 <_strtod_l+0x942>
 8006820:	f7ff fb59 	bl	8005ed6 <sulp>
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800682c:	f7f9 fd2e 	bl	800028c <__adddf3>
 8006830:	4682      	mov	sl, r0
 8006832:	468b      	mov	fp, r1
 8006834:	e7df      	b.n	80067f6 <_strtod_l+0x8e6>
 8006836:	4013      	ands	r3, r2
 8006838:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800683c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006840:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006844:	f04f 3aff 	mov.w	sl, #4294967295
 8006848:	e7d5      	b.n	80067f6 <_strtod_l+0x8e6>
 800684a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800684c:	ea13 0f0a 	tst.w	r3, sl
 8006850:	e7e0      	b.n	8006814 <_strtod_l+0x904>
 8006852:	f7ff fb40 	bl	8005ed6 <sulp>
 8006856:	4602      	mov	r2, r0
 8006858:	460b      	mov	r3, r1
 800685a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800685e:	f7f9 fd13 	bl	8000288 <__aeabi_dsub>
 8006862:	2200      	movs	r2, #0
 8006864:	2300      	movs	r3, #0
 8006866:	4682      	mov	sl, r0
 8006868:	468b      	mov	fp, r1
 800686a:	f7fa f92d 	bl	8000ac8 <__aeabi_dcmpeq>
 800686e:	2800      	cmp	r0, #0
 8006870:	d0c1      	beq.n	80067f6 <_strtod_l+0x8e6>
 8006872:	e60e      	b.n	8006492 <_strtod_l+0x582>
 8006874:	fffffc02 	.word	0xfffffc02
 8006878:	7ff00000 	.word	0x7ff00000
 800687c:	39500000 	.word	0x39500000
 8006880:	000fffff 	.word	0x000fffff
 8006884:	7fefffff 	.word	0x7fefffff
 8006888:	08009ad0 	.word	0x08009ad0
 800688c:	4631      	mov	r1, r6
 800688e:	4628      	mov	r0, r5
 8006890:	f002 f820 	bl	80088d4 <__ratio>
 8006894:	ec59 8b10 	vmov	r8, r9, d0
 8006898:	ee10 0a10 	vmov	r0, s0
 800689c:	2200      	movs	r2, #0
 800689e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80068a2:	4649      	mov	r1, r9
 80068a4:	f7fa f924 	bl	8000af0 <__aeabi_dcmple>
 80068a8:	2800      	cmp	r0, #0
 80068aa:	d07c      	beq.n	80069a6 <_strtod_l+0xa96>
 80068ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d04c      	beq.n	800694c <_strtod_l+0xa3c>
 80068b2:	4b95      	ldr	r3, [pc, #596]	; (8006b08 <_strtod_l+0xbf8>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80068ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006b08 <_strtod_l+0xbf8>
 80068be:	f04f 0800 	mov.w	r8, #0
 80068c2:	4b92      	ldr	r3, [pc, #584]	; (8006b0c <_strtod_l+0xbfc>)
 80068c4:	403b      	ands	r3, r7
 80068c6:	9311      	str	r3, [sp, #68]	; 0x44
 80068c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80068ca:	4b91      	ldr	r3, [pc, #580]	; (8006b10 <_strtod_l+0xc00>)
 80068cc:	429a      	cmp	r2, r3
 80068ce:	f040 80b2 	bne.w	8006a36 <_strtod_l+0xb26>
 80068d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80068d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068da:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80068de:	ec4b ab10 	vmov	d0, sl, fp
 80068e2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80068e6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80068ea:	f001 ff1b 	bl	8008724 <__ulp>
 80068ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068f2:	ec53 2b10 	vmov	r2, r3, d0
 80068f6:	f7f9 fe7f 	bl	80005f8 <__aeabi_dmul>
 80068fa:	4652      	mov	r2, sl
 80068fc:	465b      	mov	r3, fp
 80068fe:	f7f9 fcc5 	bl	800028c <__adddf3>
 8006902:	460b      	mov	r3, r1
 8006904:	4981      	ldr	r1, [pc, #516]	; (8006b0c <_strtod_l+0xbfc>)
 8006906:	4a83      	ldr	r2, [pc, #524]	; (8006b14 <_strtod_l+0xc04>)
 8006908:	4019      	ands	r1, r3
 800690a:	4291      	cmp	r1, r2
 800690c:	4682      	mov	sl, r0
 800690e:	d95e      	bls.n	80069ce <_strtod_l+0xabe>
 8006910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006912:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006916:	4293      	cmp	r3, r2
 8006918:	d103      	bne.n	8006922 <_strtod_l+0xa12>
 800691a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800691c:	3301      	adds	r3, #1
 800691e:	f43f ad43 	beq.w	80063a8 <_strtod_l+0x498>
 8006922:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8006b20 <_strtod_l+0xc10>
 8006926:	f04f 3aff 	mov.w	sl, #4294967295
 800692a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800692c:	4620      	mov	r0, r4
 800692e:	f001 fbcd 	bl	80080cc <_Bfree>
 8006932:	9907      	ldr	r1, [sp, #28]
 8006934:	4620      	mov	r0, r4
 8006936:	f001 fbc9 	bl	80080cc <_Bfree>
 800693a:	4631      	mov	r1, r6
 800693c:	4620      	mov	r0, r4
 800693e:	f001 fbc5 	bl	80080cc <_Bfree>
 8006942:	4629      	mov	r1, r5
 8006944:	4620      	mov	r0, r4
 8006946:	f001 fbc1 	bl	80080cc <_Bfree>
 800694a:	e613      	b.n	8006574 <_strtod_l+0x664>
 800694c:	f1ba 0f00 	cmp.w	sl, #0
 8006950:	d11b      	bne.n	800698a <_strtod_l+0xa7a>
 8006952:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006956:	b9f3      	cbnz	r3, 8006996 <_strtod_l+0xa86>
 8006958:	4b6b      	ldr	r3, [pc, #428]	; (8006b08 <_strtod_l+0xbf8>)
 800695a:	2200      	movs	r2, #0
 800695c:	4640      	mov	r0, r8
 800695e:	4649      	mov	r1, r9
 8006960:	f7fa f8bc 	bl	8000adc <__aeabi_dcmplt>
 8006964:	b9d0      	cbnz	r0, 800699c <_strtod_l+0xa8c>
 8006966:	4640      	mov	r0, r8
 8006968:	4649      	mov	r1, r9
 800696a:	4b6b      	ldr	r3, [pc, #428]	; (8006b18 <_strtod_l+0xc08>)
 800696c:	2200      	movs	r2, #0
 800696e:	f7f9 fe43 	bl	80005f8 <__aeabi_dmul>
 8006972:	4680      	mov	r8, r0
 8006974:	4689      	mov	r9, r1
 8006976:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800697a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800697e:	931b      	str	r3, [sp, #108]	; 0x6c
 8006980:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8006984:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006988:	e79b      	b.n	80068c2 <_strtod_l+0x9b2>
 800698a:	f1ba 0f01 	cmp.w	sl, #1
 800698e:	d102      	bne.n	8006996 <_strtod_l+0xa86>
 8006990:	2f00      	cmp	r7, #0
 8006992:	f43f ad7e 	beq.w	8006492 <_strtod_l+0x582>
 8006996:	4b61      	ldr	r3, [pc, #388]	; (8006b1c <_strtod_l+0xc0c>)
 8006998:	2200      	movs	r2, #0
 800699a:	e78c      	b.n	80068b6 <_strtod_l+0x9a6>
 800699c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006b18 <_strtod_l+0xc08>
 80069a0:	f04f 0800 	mov.w	r8, #0
 80069a4:	e7e7      	b.n	8006976 <_strtod_l+0xa66>
 80069a6:	4b5c      	ldr	r3, [pc, #368]	; (8006b18 <_strtod_l+0xc08>)
 80069a8:	4640      	mov	r0, r8
 80069aa:	4649      	mov	r1, r9
 80069ac:	2200      	movs	r2, #0
 80069ae:	f7f9 fe23 	bl	80005f8 <__aeabi_dmul>
 80069b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069b4:	4680      	mov	r8, r0
 80069b6:	4689      	mov	r9, r1
 80069b8:	b933      	cbnz	r3, 80069c8 <_strtod_l+0xab8>
 80069ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069be:	9012      	str	r0, [sp, #72]	; 0x48
 80069c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80069c2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80069c6:	e7dd      	b.n	8006984 <_strtod_l+0xa74>
 80069c8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80069cc:	e7f9      	b.n	80069c2 <_strtod_l+0xab2>
 80069ce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80069d2:	9b04      	ldr	r3, [sp, #16]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1a8      	bne.n	800692a <_strtod_l+0xa1a>
 80069d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80069dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80069de:	0d1b      	lsrs	r3, r3, #20
 80069e0:	051b      	lsls	r3, r3, #20
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d1a1      	bne.n	800692a <_strtod_l+0xa1a>
 80069e6:	4640      	mov	r0, r8
 80069e8:	4649      	mov	r1, r9
 80069ea:	f7fa f965 	bl	8000cb8 <__aeabi_d2lz>
 80069ee:	f7f9 fdd5 	bl	800059c <__aeabi_l2d>
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	4640      	mov	r0, r8
 80069f8:	4649      	mov	r1, r9
 80069fa:	f7f9 fc45 	bl	8000288 <__aeabi_dsub>
 80069fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a04:	ea43 030a 	orr.w	r3, r3, sl
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	4680      	mov	r8, r0
 8006a0c:	4689      	mov	r9, r1
 8006a0e:	d053      	beq.n	8006ab8 <_strtod_l+0xba8>
 8006a10:	a335      	add	r3, pc, #212	; (adr r3, 8006ae8 <_strtod_l+0xbd8>)
 8006a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a16:	f7fa f861 	bl	8000adc <__aeabi_dcmplt>
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	f47f acce 	bne.w	80063bc <_strtod_l+0x4ac>
 8006a20:	a333      	add	r3, pc, #204	; (adr r3, 8006af0 <_strtod_l+0xbe0>)
 8006a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a26:	4640      	mov	r0, r8
 8006a28:	4649      	mov	r1, r9
 8006a2a:	f7fa f875 	bl	8000b18 <__aeabi_dcmpgt>
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	f43f af7b 	beq.w	800692a <_strtod_l+0xa1a>
 8006a34:	e4c2      	b.n	80063bc <_strtod_l+0x4ac>
 8006a36:	9b04      	ldr	r3, [sp, #16]
 8006a38:	b333      	cbz	r3, 8006a88 <_strtod_l+0xb78>
 8006a3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a3c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006a40:	d822      	bhi.n	8006a88 <_strtod_l+0xb78>
 8006a42:	a32d      	add	r3, pc, #180	; (adr r3, 8006af8 <_strtod_l+0xbe8>)
 8006a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a48:	4640      	mov	r0, r8
 8006a4a:	4649      	mov	r1, r9
 8006a4c:	f7fa f850 	bl	8000af0 <__aeabi_dcmple>
 8006a50:	b1a0      	cbz	r0, 8006a7c <_strtod_l+0xb6c>
 8006a52:	4649      	mov	r1, r9
 8006a54:	4640      	mov	r0, r8
 8006a56:	f7fa f8a7 	bl	8000ba8 <__aeabi_d2uiz>
 8006a5a:	2801      	cmp	r0, #1
 8006a5c:	bf38      	it	cc
 8006a5e:	2001      	movcc	r0, #1
 8006a60:	f7f9 fd50 	bl	8000504 <__aeabi_ui2d>
 8006a64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a66:	4680      	mov	r8, r0
 8006a68:	4689      	mov	r9, r1
 8006a6a:	bb13      	cbnz	r3, 8006ab2 <_strtod_l+0xba2>
 8006a6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a70:	9014      	str	r0, [sp, #80]	; 0x50
 8006a72:	9315      	str	r3, [sp, #84]	; 0x54
 8006a74:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006a78:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006a7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a7e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006a80:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006a84:	1a9b      	subs	r3, r3, r2
 8006a86:	930d      	str	r3, [sp, #52]	; 0x34
 8006a88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a8c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006a90:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006a94:	f001 fe46 	bl	8008724 <__ulp>
 8006a98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a9c:	ec53 2b10 	vmov	r2, r3, d0
 8006aa0:	f7f9 fdaa 	bl	80005f8 <__aeabi_dmul>
 8006aa4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006aa8:	f7f9 fbf0 	bl	800028c <__adddf3>
 8006aac:	4682      	mov	sl, r0
 8006aae:	468b      	mov	fp, r1
 8006ab0:	e78f      	b.n	80069d2 <_strtod_l+0xac2>
 8006ab2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8006ab6:	e7dd      	b.n	8006a74 <_strtod_l+0xb64>
 8006ab8:	a311      	add	r3, pc, #68	; (adr r3, 8006b00 <_strtod_l+0xbf0>)
 8006aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abe:	f7fa f80d 	bl	8000adc <__aeabi_dcmplt>
 8006ac2:	e7b4      	b.n	8006a2e <_strtod_l+0xb1e>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	930e      	str	r3, [sp, #56]	; 0x38
 8006ac8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006aca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006acc:	6013      	str	r3, [r2, #0]
 8006ace:	f7ff ba65 	b.w	8005f9c <_strtod_l+0x8c>
 8006ad2:	2b65      	cmp	r3, #101	; 0x65
 8006ad4:	f43f ab5d 	beq.w	8006192 <_strtod_l+0x282>
 8006ad8:	2b45      	cmp	r3, #69	; 0x45
 8006ada:	f43f ab5a 	beq.w	8006192 <_strtod_l+0x282>
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f7ff bb92 	b.w	8006208 <_strtod_l+0x2f8>
 8006ae4:	f3af 8000 	nop.w
 8006ae8:	94a03595 	.word	0x94a03595
 8006aec:	3fdfffff 	.word	0x3fdfffff
 8006af0:	35afe535 	.word	0x35afe535
 8006af4:	3fe00000 	.word	0x3fe00000
 8006af8:	ffc00000 	.word	0xffc00000
 8006afc:	41dfffff 	.word	0x41dfffff
 8006b00:	94a03595 	.word	0x94a03595
 8006b04:	3fcfffff 	.word	0x3fcfffff
 8006b08:	3ff00000 	.word	0x3ff00000
 8006b0c:	7ff00000 	.word	0x7ff00000
 8006b10:	7fe00000 	.word	0x7fe00000
 8006b14:	7c9fffff 	.word	0x7c9fffff
 8006b18:	3fe00000 	.word	0x3fe00000
 8006b1c:	bff00000 	.word	0xbff00000
 8006b20:	7fefffff 	.word	0x7fefffff

08006b24 <_strtod_r>:
 8006b24:	4b01      	ldr	r3, [pc, #4]	; (8006b2c <_strtod_r+0x8>)
 8006b26:	f7ff b9f3 	b.w	8005f10 <_strtod_l>
 8006b2a:	bf00      	nop
 8006b2c:	20000094 	.word	0x20000094

08006b30 <_strtol_l.isra.0>:
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b36:	d001      	beq.n	8006b3c <_strtol_l.isra.0+0xc>
 8006b38:	2b24      	cmp	r3, #36	; 0x24
 8006b3a:	d906      	bls.n	8006b4a <_strtol_l.isra.0+0x1a>
 8006b3c:	f7fe fadc 	bl	80050f8 <__errno>
 8006b40:	2316      	movs	r3, #22
 8006b42:	6003      	str	r3, [r0, #0]
 8006b44:	2000      	movs	r0, #0
 8006b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b4a:	4f3a      	ldr	r7, [pc, #232]	; (8006c34 <_strtol_l.isra.0+0x104>)
 8006b4c:	468e      	mov	lr, r1
 8006b4e:	4676      	mov	r6, lr
 8006b50:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006b54:	5de5      	ldrb	r5, [r4, r7]
 8006b56:	f015 0508 	ands.w	r5, r5, #8
 8006b5a:	d1f8      	bne.n	8006b4e <_strtol_l.isra.0+0x1e>
 8006b5c:	2c2d      	cmp	r4, #45	; 0x2d
 8006b5e:	d134      	bne.n	8006bca <_strtol_l.isra.0+0x9a>
 8006b60:	f89e 4000 	ldrb.w	r4, [lr]
 8006b64:	f04f 0801 	mov.w	r8, #1
 8006b68:	f106 0e02 	add.w	lr, r6, #2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d05c      	beq.n	8006c2a <_strtol_l.isra.0+0xfa>
 8006b70:	2b10      	cmp	r3, #16
 8006b72:	d10c      	bne.n	8006b8e <_strtol_l.isra.0+0x5e>
 8006b74:	2c30      	cmp	r4, #48	; 0x30
 8006b76:	d10a      	bne.n	8006b8e <_strtol_l.isra.0+0x5e>
 8006b78:	f89e 4000 	ldrb.w	r4, [lr]
 8006b7c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006b80:	2c58      	cmp	r4, #88	; 0x58
 8006b82:	d14d      	bne.n	8006c20 <_strtol_l.isra.0+0xf0>
 8006b84:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006b88:	2310      	movs	r3, #16
 8006b8a:	f10e 0e02 	add.w	lr, lr, #2
 8006b8e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8006b92:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006b96:	2600      	movs	r6, #0
 8006b98:	fbbc f9f3 	udiv	r9, ip, r3
 8006b9c:	4635      	mov	r5, r6
 8006b9e:	fb03 ca19 	mls	sl, r3, r9, ip
 8006ba2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006ba6:	2f09      	cmp	r7, #9
 8006ba8:	d818      	bhi.n	8006bdc <_strtol_l.isra.0+0xac>
 8006baa:	463c      	mov	r4, r7
 8006bac:	42a3      	cmp	r3, r4
 8006bae:	dd24      	ble.n	8006bfa <_strtol_l.isra.0+0xca>
 8006bb0:	2e00      	cmp	r6, #0
 8006bb2:	db1f      	blt.n	8006bf4 <_strtol_l.isra.0+0xc4>
 8006bb4:	45a9      	cmp	r9, r5
 8006bb6:	d31d      	bcc.n	8006bf4 <_strtol_l.isra.0+0xc4>
 8006bb8:	d101      	bne.n	8006bbe <_strtol_l.isra.0+0x8e>
 8006bba:	45a2      	cmp	sl, r4
 8006bbc:	db1a      	blt.n	8006bf4 <_strtol_l.isra.0+0xc4>
 8006bbe:	fb05 4503 	mla	r5, r5, r3, r4
 8006bc2:	2601      	movs	r6, #1
 8006bc4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006bc8:	e7eb      	b.n	8006ba2 <_strtol_l.isra.0+0x72>
 8006bca:	2c2b      	cmp	r4, #43	; 0x2b
 8006bcc:	bf08      	it	eq
 8006bce:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006bd2:	46a8      	mov	r8, r5
 8006bd4:	bf08      	it	eq
 8006bd6:	f106 0e02 	addeq.w	lr, r6, #2
 8006bda:	e7c7      	b.n	8006b6c <_strtol_l.isra.0+0x3c>
 8006bdc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006be0:	2f19      	cmp	r7, #25
 8006be2:	d801      	bhi.n	8006be8 <_strtol_l.isra.0+0xb8>
 8006be4:	3c37      	subs	r4, #55	; 0x37
 8006be6:	e7e1      	b.n	8006bac <_strtol_l.isra.0+0x7c>
 8006be8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006bec:	2f19      	cmp	r7, #25
 8006bee:	d804      	bhi.n	8006bfa <_strtol_l.isra.0+0xca>
 8006bf0:	3c57      	subs	r4, #87	; 0x57
 8006bf2:	e7db      	b.n	8006bac <_strtol_l.isra.0+0x7c>
 8006bf4:	f04f 36ff 	mov.w	r6, #4294967295
 8006bf8:	e7e4      	b.n	8006bc4 <_strtol_l.isra.0+0x94>
 8006bfa:	2e00      	cmp	r6, #0
 8006bfc:	da05      	bge.n	8006c0a <_strtol_l.isra.0+0xda>
 8006bfe:	2322      	movs	r3, #34	; 0x22
 8006c00:	6003      	str	r3, [r0, #0]
 8006c02:	4665      	mov	r5, ip
 8006c04:	b942      	cbnz	r2, 8006c18 <_strtol_l.isra.0+0xe8>
 8006c06:	4628      	mov	r0, r5
 8006c08:	e79d      	b.n	8006b46 <_strtol_l.isra.0+0x16>
 8006c0a:	f1b8 0f00 	cmp.w	r8, #0
 8006c0e:	d000      	beq.n	8006c12 <_strtol_l.isra.0+0xe2>
 8006c10:	426d      	negs	r5, r5
 8006c12:	2a00      	cmp	r2, #0
 8006c14:	d0f7      	beq.n	8006c06 <_strtol_l.isra.0+0xd6>
 8006c16:	b10e      	cbz	r6, 8006c1c <_strtol_l.isra.0+0xec>
 8006c18:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006c1c:	6011      	str	r1, [r2, #0]
 8006c1e:	e7f2      	b.n	8006c06 <_strtol_l.isra.0+0xd6>
 8006c20:	2430      	movs	r4, #48	; 0x30
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1b3      	bne.n	8006b8e <_strtol_l.isra.0+0x5e>
 8006c26:	2308      	movs	r3, #8
 8006c28:	e7b1      	b.n	8006b8e <_strtol_l.isra.0+0x5e>
 8006c2a:	2c30      	cmp	r4, #48	; 0x30
 8006c2c:	d0a4      	beq.n	8006b78 <_strtol_l.isra.0+0x48>
 8006c2e:	230a      	movs	r3, #10
 8006c30:	e7ad      	b.n	8006b8e <_strtol_l.isra.0+0x5e>
 8006c32:	bf00      	nop
 8006c34:	08009af9 	.word	0x08009af9

08006c38 <_strtol_r>:
 8006c38:	f7ff bf7a 	b.w	8006b30 <_strtol_l.isra.0>

08006c3c <quorem>:
 8006c3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c40:	6903      	ldr	r3, [r0, #16]
 8006c42:	690c      	ldr	r4, [r1, #16]
 8006c44:	42a3      	cmp	r3, r4
 8006c46:	4607      	mov	r7, r0
 8006c48:	f2c0 8081 	blt.w	8006d4e <quorem+0x112>
 8006c4c:	3c01      	subs	r4, #1
 8006c4e:	f101 0814 	add.w	r8, r1, #20
 8006c52:	f100 0514 	add.w	r5, r0, #20
 8006c56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c5a:	9301      	str	r3, [sp, #4]
 8006c5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c64:	3301      	adds	r3, #1
 8006c66:	429a      	cmp	r2, r3
 8006c68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006c6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c70:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c74:	d331      	bcc.n	8006cda <quorem+0x9e>
 8006c76:	f04f 0e00 	mov.w	lr, #0
 8006c7a:	4640      	mov	r0, r8
 8006c7c:	46ac      	mov	ip, r5
 8006c7e:	46f2      	mov	sl, lr
 8006c80:	f850 2b04 	ldr.w	r2, [r0], #4
 8006c84:	b293      	uxth	r3, r2
 8006c86:	fb06 e303 	mla	r3, r6, r3, lr
 8006c8a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	ebaa 0303 	sub.w	r3, sl, r3
 8006c94:	0c12      	lsrs	r2, r2, #16
 8006c96:	f8dc a000 	ldr.w	sl, [ip]
 8006c9a:	fb06 e202 	mla	r2, r6, r2, lr
 8006c9e:	fa13 f38a 	uxtah	r3, r3, sl
 8006ca2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ca6:	fa1f fa82 	uxth.w	sl, r2
 8006caa:	f8dc 2000 	ldr.w	r2, [ip]
 8006cae:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006cb2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006cbc:	4581      	cmp	r9, r0
 8006cbe:	f84c 3b04 	str.w	r3, [ip], #4
 8006cc2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006cc6:	d2db      	bcs.n	8006c80 <quorem+0x44>
 8006cc8:	f855 300b 	ldr.w	r3, [r5, fp]
 8006ccc:	b92b      	cbnz	r3, 8006cda <quorem+0x9e>
 8006cce:	9b01      	ldr	r3, [sp, #4]
 8006cd0:	3b04      	subs	r3, #4
 8006cd2:	429d      	cmp	r5, r3
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	d32e      	bcc.n	8006d36 <quorem+0xfa>
 8006cd8:	613c      	str	r4, [r7, #16]
 8006cda:	4638      	mov	r0, r7
 8006cdc:	f001 fc7e 	bl	80085dc <__mcmp>
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	db24      	blt.n	8006d2e <quorem+0xf2>
 8006ce4:	3601      	adds	r6, #1
 8006ce6:	4628      	mov	r0, r5
 8006ce8:	f04f 0c00 	mov.w	ip, #0
 8006cec:	f858 2b04 	ldr.w	r2, [r8], #4
 8006cf0:	f8d0 e000 	ldr.w	lr, [r0]
 8006cf4:	b293      	uxth	r3, r2
 8006cf6:	ebac 0303 	sub.w	r3, ip, r3
 8006cfa:	0c12      	lsrs	r2, r2, #16
 8006cfc:	fa13 f38e 	uxtah	r3, r3, lr
 8006d00:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006d04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d0e:	45c1      	cmp	r9, r8
 8006d10:	f840 3b04 	str.w	r3, [r0], #4
 8006d14:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006d18:	d2e8      	bcs.n	8006cec <quorem+0xb0>
 8006d1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d22:	b922      	cbnz	r2, 8006d2e <quorem+0xf2>
 8006d24:	3b04      	subs	r3, #4
 8006d26:	429d      	cmp	r5, r3
 8006d28:	461a      	mov	r2, r3
 8006d2a:	d30a      	bcc.n	8006d42 <quorem+0x106>
 8006d2c:	613c      	str	r4, [r7, #16]
 8006d2e:	4630      	mov	r0, r6
 8006d30:	b003      	add	sp, #12
 8006d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d36:	6812      	ldr	r2, [r2, #0]
 8006d38:	3b04      	subs	r3, #4
 8006d3a:	2a00      	cmp	r2, #0
 8006d3c:	d1cc      	bne.n	8006cd8 <quorem+0x9c>
 8006d3e:	3c01      	subs	r4, #1
 8006d40:	e7c7      	b.n	8006cd2 <quorem+0x96>
 8006d42:	6812      	ldr	r2, [r2, #0]
 8006d44:	3b04      	subs	r3, #4
 8006d46:	2a00      	cmp	r2, #0
 8006d48:	d1f0      	bne.n	8006d2c <quorem+0xf0>
 8006d4a:	3c01      	subs	r4, #1
 8006d4c:	e7eb      	b.n	8006d26 <quorem+0xea>
 8006d4e:	2000      	movs	r0, #0
 8006d50:	e7ee      	b.n	8006d30 <quorem+0xf4>
 8006d52:	0000      	movs	r0, r0
 8006d54:	0000      	movs	r0, r0
	...

08006d58 <_dtoa_r>:
 8006d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d5c:	ed2d 8b02 	vpush	{d8}
 8006d60:	ec57 6b10 	vmov	r6, r7, d0
 8006d64:	b095      	sub	sp, #84	; 0x54
 8006d66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006d68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006d6c:	9105      	str	r1, [sp, #20]
 8006d6e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006d72:	4604      	mov	r4, r0
 8006d74:	9209      	str	r2, [sp, #36]	; 0x24
 8006d76:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d78:	b975      	cbnz	r5, 8006d98 <_dtoa_r+0x40>
 8006d7a:	2010      	movs	r0, #16
 8006d7c:	f001 f94c 	bl	8008018 <malloc>
 8006d80:	4602      	mov	r2, r0
 8006d82:	6260      	str	r0, [r4, #36]	; 0x24
 8006d84:	b920      	cbnz	r0, 8006d90 <_dtoa_r+0x38>
 8006d86:	4bb2      	ldr	r3, [pc, #712]	; (8007050 <_dtoa_r+0x2f8>)
 8006d88:	21ea      	movs	r1, #234	; 0xea
 8006d8a:	48b2      	ldr	r0, [pc, #712]	; (8007054 <_dtoa_r+0x2fc>)
 8006d8c:	f002 f868 	bl	8008e60 <__assert_func>
 8006d90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006d94:	6005      	str	r5, [r0, #0]
 8006d96:	60c5      	str	r5, [r0, #12]
 8006d98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d9a:	6819      	ldr	r1, [r3, #0]
 8006d9c:	b151      	cbz	r1, 8006db4 <_dtoa_r+0x5c>
 8006d9e:	685a      	ldr	r2, [r3, #4]
 8006da0:	604a      	str	r2, [r1, #4]
 8006da2:	2301      	movs	r3, #1
 8006da4:	4093      	lsls	r3, r2
 8006da6:	608b      	str	r3, [r1, #8]
 8006da8:	4620      	mov	r0, r4
 8006daa:	f001 f98f 	bl	80080cc <_Bfree>
 8006dae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006db0:	2200      	movs	r2, #0
 8006db2:	601a      	str	r2, [r3, #0]
 8006db4:	1e3b      	subs	r3, r7, #0
 8006db6:	bfb9      	ittee	lt
 8006db8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006dbc:	9303      	strlt	r3, [sp, #12]
 8006dbe:	2300      	movge	r3, #0
 8006dc0:	f8c8 3000 	strge.w	r3, [r8]
 8006dc4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006dc8:	4ba3      	ldr	r3, [pc, #652]	; (8007058 <_dtoa_r+0x300>)
 8006dca:	bfbc      	itt	lt
 8006dcc:	2201      	movlt	r2, #1
 8006dce:	f8c8 2000 	strlt.w	r2, [r8]
 8006dd2:	ea33 0309 	bics.w	r3, r3, r9
 8006dd6:	d11b      	bne.n	8006e10 <_dtoa_r+0xb8>
 8006dd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006dda:	f242 730f 	movw	r3, #9999	; 0x270f
 8006dde:	6013      	str	r3, [r2, #0]
 8006de0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006de4:	4333      	orrs	r3, r6
 8006de6:	f000 857a 	beq.w	80078de <_dtoa_r+0xb86>
 8006dea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006dec:	b963      	cbnz	r3, 8006e08 <_dtoa_r+0xb0>
 8006dee:	4b9b      	ldr	r3, [pc, #620]	; (800705c <_dtoa_r+0x304>)
 8006df0:	e024      	b.n	8006e3c <_dtoa_r+0xe4>
 8006df2:	4b9b      	ldr	r3, [pc, #620]	; (8007060 <_dtoa_r+0x308>)
 8006df4:	9300      	str	r3, [sp, #0]
 8006df6:	3308      	adds	r3, #8
 8006df8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006dfa:	6013      	str	r3, [r2, #0]
 8006dfc:	9800      	ldr	r0, [sp, #0]
 8006dfe:	b015      	add	sp, #84	; 0x54
 8006e00:	ecbd 8b02 	vpop	{d8}
 8006e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e08:	4b94      	ldr	r3, [pc, #592]	; (800705c <_dtoa_r+0x304>)
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	3303      	adds	r3, #3
 8006e0e:	e7f3      	b.n	8006df8 <_dtoa_r+0xa0>
 8006e10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006e14:	2200      	movs	r2, #0
 8006e16:	ec51 0b17 	vmov	r0, r1, d7
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006e20:	f7f9 fe52 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e24:	4680      	mov	r8, r0
 8006e26:	b158      	cbz	r0, 8006e40 <_dtoa_r+0xe8>
 8006e28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	6013      	str	r3, [r2, #0]
 8006e2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 8551 	beq.w	80078d8 <_dtoa_r+0xb80>
 8006e36:	488b      	ldr	r0, [pc, #556]	; (8007064 <_dtoa_r+0x30c>)
 8006e38:	6018      	str	r0, [r3, #0]
 8006e3a:	1e43      	subs	r3, r0, #1
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	e7dd      	b.n	8006dfc <_dtoa_r+0xa4>
 8006e40:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006e44:	aa12      	add	r2, sp, #72	; 0x48
 8006e46:	a913      	add	r1, sp, #76	; 0x4c
 8006e48:	4620      	mov	r0, r4
 8006e4a:	f001 fce7 	bl	800881c <__d2b>
 8006e4e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006e52:	4683      	mov	fp, r0
 8006e54:	2d00      	cmp	r5, #0
 8006e56:	d07c      	beq.n	8006f52 <_dtoa_r+0x1fa>
 8006e58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e5a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006e5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e62:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006e66:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006e6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006e6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006e72:	4b7d      	ldr	r3, [pc, #500]	; (8007068 <_dtoa_r+0x310>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	4630      	mov	r0, r6
 8006e78:	4639      	mov	r1, r7
 8006e7a:	f7f9 fa05 	bl	8000288 <__aeabi_dsub>
 8006e7e:	a36e      	add	r3, pc, #440	; (adr r3, 8007038 <_dtoa_r+0x2e0>)
 8006e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e84:	f7f9 fbb8 	bl	80005f8 <__aeabi_dmul>
 8006e88:	a36d      	add	r3, pc, #436	; (adr r3, 8007040 <_dtoa_r+0x2e8>)
 8006e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8e:	f7f9 f9fd 	bl	800028c <__adddf3>
 8006e92:	4606      	mov	r6, r0
 8006e94:	4628      	mov	r0, r5
 8006e96:	460f      	mov	r7, r1
 8006e98:	f7f9 fb44 	bl	8000524 <__aeabi_i2d>
 8006e9c:	a36a      	add	r3, pc, #424	; (adr r3, 8007048 <_dtoa_r+0x2f0>)
 8006e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea2:	f7f9 fba9 	bl	80005f8 <__aeabi_dmul>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	4630      	mov	r0, r6
 8006eac:	4639      	mov	r1, r7
 8006eae:	f7f9 f9ed 	bl	800028c <__adddf3>
 8006eb2:	4606      	mov	r6, r0
 8006eb4:	460f      	mov	r7, r1
 8006eb6:	f7f9 fe4f 	bl	8000b58 <__aeabi_d2iz>
 8006eba:	2200      	movs	r2, #0
 8006ebc:	4682      	mov	sl, r0
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	4630      	mov	r0, r6
 8006ec2:	4639      	mov	r1, r7
 8006ec4:	f7f9 fe0a 	bl	8000adc <__aeabi_dcmplt>
 8006ec8:	b148      	cbz	r0, 8006ede <_dtoa_r+0x186>
 8006eca:	4650      	mov	r0, sl
 8006ecc:	f7f9 fb2a 	bl	8000524 <__aeabi_i2d>
 8006ed0:	4632      	mov	r2, r6
 8006ed2:	463b      	mov	r3, r7
 8006ed4:	f7f9 fdf8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ed8:	b908      	cbnz	r0, 8006ede <_dtoa_r+0x186>
 8006eda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ede:	f1ba 0f16 	cmp.w	sl, #22
 8006ee2:	d854      	bhi.n	8006f8e <_dtoa_r+0x236>
 8006ee4:	4b61      	ldr	r3, [pc, #388]	; (800706c <_dtoa_r+0x314>)
 8006ee6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006ef2:	f7f9 fdf3 	bl	8000adc <__aeabi_dcmplt>
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	d04b      	beq.n	8006f92 <_dtoa_r+0x23a>
 8006efa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006efe:	2300      	movs	r3, #0
 8006f00:	930e      	str	r3, [sp, #56]	; 0x38
 8006f02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f04:	1b5d      	subs	r5, r3, r5
 8006f06:	1e6b      	subs	r3, r5, #1
 8006f08:	9304      	str	r3, [sp, #16]
 8006f0a:	bf43      	ittte	mi
 8006f0c:	2300      	movmi	r3, #0
 8006f0e:	f1c5 0801 	rsbmi	r8, r5, #1
 8006f12:	9304      	strmi	r3, [sp, #16]
 8006f14:	f04f 0800 	movpl.w	r8, #0
 8006f18:	f1ba 0f00 	cmp.w	sl, #0
 8006f1c:	db3b      	blt.n	8006f96 <_dtoa_r+0x23e>
 8006f1e:	9b04      	ldr	r3, [sp, #16]
 8006f20:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006f24:	4453      	add	r3, sl
 8006f26:	9304      	str	r3, [sp, #16]
 8006f28:	2300      	movs	r3, #0
 8006f2a:	9306      	str	r3, [sp, #24]
 8006f2c:	9b05      	ldr	r3, [sp, #20]
 8006f2e:	2b09      	cmp	r3, #9
 8006f30:	d869      	bhi.n	8007006 <_dtoa_r+0x2ae>
 8006f32:	2b05      	cmp	r3, #5
 8006f34:	bfc4      	itt	gt
 8006f36:	3b04      	subgt	r3, #4
 8006f38:	9305      	strgt	r3, [sp, #20]
 8006f3a:	9b05      	ldr	r3, [sp, #20]
 8006f3c:	f1a3 0302 	sub.w	r3, r3, #2
 8006f40:	bfcc      	ite	gt
 8006f42:	2500      	movgt	r5, #0
 8006f44:	2501      	movle	r5, #1
 8006f46:	2b03      	cmp	r3, #3
 8006f48:	d869      	bhi.n	800701e <_dtoa_r+0x2c6>
 8006f4a:	e8df f003 	tbb	[pc, r3]
 8006f4e:	4e2c      	.short	0x4e2c
 8006f50:	5a4c      	.short	0x5a4c
 8006f52:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006f56:	441d      	add	r5, r3
 8006f58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006f5c:	2b20      	cmp	r3, #32
 8006f5e:	bfc1      	itttt	gt
 8006f60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006f64:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006f68:	fa09 f303 	lslgt.w	r3, r9, r3
 8006f6c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006f70:	bfda      	itte	le
 8006f72:	f1c3 0320 	rsble	r3, r3, #32
 8006f76:	fa06 f003 	lslle.w	r0, r6, r3
 8006f7a:	4318      	orrgt	r0, r3
 8006f7c:	f7f9 fac2 	bl	8000504 <__aeabi_ui2d>
 8006f80:	2301      	movs	r3, #1
 8006f82:	4606      	mov	r6, r0
 8006f84:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006f88:	3d01      	subs	r5, #1
 8006f8a:	9310      	str	r3, [sp, #64]	; 0x40
 8006f8c:	e771      	b.n	8006e72 <_dtoa_r+0x11a>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e7b6      	b.n	8006f00 <_dtoa_r+0x1a8>
 8006f92:	900e      	str	r0, [sp, #56]	; 0x38
 8006f94:	e7b5      	b.n	8006f02 <_dtoa_r+0x1aa>
 8006f96:	f1ca 0300 	rsb	r3, sl, #0
 8006f9a:	9306      	str	r3, [sp, #24]
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	eba8 080a 	sub.w	r8, r8, sl
 8006fa2:	930d      	str	r3, [sp, #52]	; 0x34
 8006fa4:	e7c2      	b.n	8006f2c <_dtoa_r+0x1d4>
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	9308      	str	r3, [sp, #32]
 8006faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	dc39      	bgt.n	8007024 <_dtoa_r+0x2cc>
 8006fb0:	f04f 0901 	mov.w	r9, #1
 8006fb4:	f8cd 9004 	str.w	r9, [sp, #4]
 8006fb8:	464b      	mov	r3, r9
 8006fba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006fbe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	6042      	str	r2, [r0, #4]
 8006fc4:	2204      	movs	r2, #4
 8006fc6:	f102 0614 	add.w	r6, r2, #20
 8006fca:	429e      	cmp	r6, r3
 8006fcc:	6841      	ldr	r1, [r0, #4]
 8006fce:	d92f      	bls.n	8007030 <_dtoa_r+0x2d8>
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f001 f83b 	bl	800804c <_Balloc>
 8006fd6:	9000      	str	r0, [sp, #0]
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	d14b      	bne.n	8007074 <_dtoa_r+0x31c>
 8006fdc:	4b24      	ldr	r3, [pc, #144]	; (8007070 <_dtoa_r+0x318>)
 8006fde:	4602      	mov	r2, r0
 8006fe0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006fe4:	e6d1      	b.n	8006d8a <_dtoa_r+0x32>
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e7de      	b.n	8006fa8 <_dtoa_r+0x250>
 8006fea:	2300      	movs	r3, #0
 8006fec:	9308      	str	r3, [sp, #32]
 8006fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ff0:	eb0a 0903 	add.w	r9, sl, r3
 8006ff4:	f109 0301 	add.w	r3, r9, #1
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	9301      	str	r3, [sp, #4]
 8006ffc:	bfb8      	it	lt
 8006ffe:	2301      	movlt	r3, #1
 8007000:	e7dd      	b.n	8006fbe <_dtoa_r+0x266>
 8007002:	2301      	movs	r3, #1
 8007004:	e7f2      	b.n	8006fec <_dtoa_r+0x294>
 8007006:	2501      	movs	r5, #1
 8007008:	2300      	movs	r3, #0
 800700a:	9305      	str	r3, [sp, #20]
 800700c:	9508      	str	r5, [sp, #32]
 800700e:	f04f 39ff 	mov.w	r9, #4294967295
 8007012:	2200      	movs	r2, #0
 8007014:	f8cd 9004 	str.w	r9, [sp, #4]
 8007018:	2312      	movs	r3, #18
 800701a:	9209      	str	r2, [sp, #36]	; 0x24
 800701c:	e7cf      	b.n	8006fbe <_dtoa_r+0x266>
 800701e:	2301      	movs	r3, #1
 8007020:	9308      	str	r3, [sp, #32]
 8007022:	e7f4      	b.n	800700e <_dtoa_r+0x2b6>
 8007024:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007028:	f8cd 9004 	str.w	r9, [sp, #4]
 800702c:	464b      	mov	r3, r9
 800702e:	e7c6      	b.n	8006fbe <_dtoa_r+0x266>
 8007030:	3101      	adds	r1, #1
 8007032:	6041      	str	r1, [r0, #4]
 8007034:	0052      	lsls	r2, r2, #1
 8007036:	e7c6      	b.n	8006fc6 <_dtoa_r+0x26e>
 8007038:	636f4361 	.word	0x636f4361
 800703c:	3fd287a7 	.word	0x3fd287a7
 8007040:	8b60c8b3 	.word	0x8b60c8b3
 8007044:	3fc68a28 	.word	0x3fc68a28
 8007048:	509f79fb 	.word	0x509f79fb
 800704c:	3fd34413 	.word	0x3fd34413
 8007050:	08009c06 	.word	0x08009c06
 8007054:	08009c1d 	.word	0x08009c1d
 8007058:	7ff00000 	.word	0x7ff00000
 800705c:	08009c02 	.word	0x08009c02
 8007060:	08009bf9 	.word	0x08009bf9
 8007064:	08009a7d 	.word	0x08009a7d
 8007068:	3ff80000 	.word	0x3ff80000
 800706c:	08009d98 	.word	0x08009d98
 8007070:	08009c7c 	.word	0x08009c7c
 8007074:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007076:	9a00      	ldr	r2, [sp, #0]
 8007078:	601a      	str	r2, [r3, #0]
 800707a:	9b01      	ldr	r3, [sp, #4]
 800707c:	2b0e      	cmp	r3, #14
 800707e:	f200 80ad 	bhi.w	80071dc <_dtoa_r+0x484>
 8007082:	2d00      	cmp	r5, #0
 8007084:	f000 80aa 	beq.w	80071dc <_dtoa_r+0x484>
 8007088:	f1ba 0f00 	cmp.w	sl, #0
 800708c:	dd36      	ble.n	80070fc <_dtoa_r+0x3a4>
 800708e:	4ac3      	ldr	r2, [pc, #780]	; (800739c <_dtoa_r+0x644>)
 8007090:	f00a 030f 	and.w	r3, sl, #15
 8007094:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007098:	ed93 7b00 	vldr	d7, [r3]
 800709c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80070a0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80070a4:	eeb0 8a47 	vmov.f32	s16, s14
 80070a8:	eef0 8a67 	vmov.f32	s17, s15
 80070ac:	d016      	beq.n	80070dc <_dtoa_r+0x384>
 80070ae:	4bbc      	ldr	r3, [pc, #752]	; (80073a0 <_dtoa_r+0x648>)
 80070b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80070b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80070b8:	f7f9 fbc8 	bl	800084c <__aeabi_ddiv>
 80070bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070c0:	f007 070f 	and.w	r7, r7, #15
 80070c4:	2503      	movs	r5, #3
 80070c6:	4eb6      	ldr	r6, [pc, #728]	; (80073a0 <_dtoa_r+0x648>)
 80070c8:	b957      	cbnz	r7, 80070e0 <_dtoa_r+0x388>
 80070ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070ce:	ec53 2b18 	vmov	r2, r3, d8
 80070d2:	f7f9 fbbb 	bl	800084c <__aeabi_ddiv>
 80070d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070da:	e029      	b.n	8007130 <_dtoa_r+0x3d8>
 80070dc:	2502      	movs	r5, #2
 80070de:	e7f2      	b.n	80070c6 <_dtoa_r+0x36e>
 80070e0:	07f9      	lsls	r1, r7, #31
 80070e2:	d508      	bpl.n	80070f6 <_dtoa_r+0x39e>
 80070e4:	ec51 0b18 	vmov	r0, r1, d8
 80070e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80070ec:	f7f9 fa84 	bl	80005f8 <__aeabi_dmul>
 80070f0:	ec41 0b18 	vmov	d8, r0, r1
 80070f4:	3501      	adds	r5, #1
 80070f6:	107f      	asrs	r7, r7, #1
 80070f8:	3608      	adds	r6, #8
 80070fa:	e7e5      	b.n	80070c8 <_dtoa_r+0x370>
 80070fc:	f000 80a6 	beq.w	800724c <_dtoa_r+0x4f4>
 8007100:	f1ca 0600 	rsb	r6, sl, #0
 8007104:	4ba5      	ldr	r3, [pc, #660]	; (800739c <_dtoa_r+0x644>)
 8007106:	4fa6      	ldr	r7, [pc, #664]	; (80073a0 <_dtoa_r+0x648>)
 8007108:	f006 020f 	and.w	r2, r6, #15
 800710c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007114:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007118:	f7f9 fa6e 	bl	80005f8 <__aeabi_dmul>
 800711c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007120:	1136      	asrs	r6, r6, #4
 8007122:	2300      	movs	r3, #0
 8007124:	2502      	movs	r5, #2
 8007126:	2e00      	cmp	r6, #0
 8007128:	f040 8085 	bne.w	8007236 <_dtoa_r+0x4de>
 800712c:	2b00      	cmp	r3, #0
 800712e:	d1d2      	bne.n	80070d6 <_dtoa_r+0x37e>
 8007130:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007132:	2b00      	cmp	r3, #0
 8007134:	f000 808c 	beq.w	8007250 <_dtoa_r+0x4f8>
 8007138:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800713c:	4b99      	ldr	r3, [pc, #612]	; (80073a4 <_dtoa_r+0x64c>)
 800713e:	2200      	movs	r2, #0
 8007140:	4630      	mov	r0, r6
 8007142:	4639      	mov	r1, r7
 8007144:	f7f9 fcca 	bl	8000adc <__aeabi_dcmplt>
 8007148:	2800      	cmp	r0, #0
 800714a:	f000 8081 	beq.w	8007250 <_dtoa_r+0x4f8>
 800714e:	9b01      	ldr	r3, [sp, #4]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d07d      	beq.n	8007250 <_dtoa_r+0x4f8>
 8007154:	f1b9 0f00 	cmp.w	r9, #0
 8007158:	dd3c      	ble.n	80071d4 <_dtoa_r+0x47c>
 800715a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800715e:	9307      	str	r3, [sp, #28]
 8007160:	2200      	movs	r2, #0
 8007162:	4b91      	ldr	r3, [pc, #580]	; (80073a8 <_dtoa_r+0x650>)
 8007164:	4630      	mov	r0, r6
 8007166:	4639      	mov	r1, r7
 8007168:	f7f9 fa46 	bl	80005f8 <__aeabi_dmul>
 800716c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007170:	3501      	adds	r5, #1
 8007172:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007176:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800717a:	4628      	mov	r0, r5
 800717c:	f7f9 f9d2 	bl	8000524 <__aeabi_i2d>
 8007180:	4632      	mov	r2, r6
 8007182:	463b      	mov	r3, r7
 8007184:	f7f9 fa38 	bl	80005f8 <__aeabi_dmul>
 8007188:	4b88      	ldr	r3, [pc, #544]	; (80073ac <_dtoa_r+0x654>)
 800718a:	2200      	movs	r2, #0
 800718c:	f7f9 f87e 	bl	800028c <__adddf3>
 8007190:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007194:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007198:	9303      	str	r3, [sp, #12]
 800719a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800719c:	2b00      	cmp	r3, #0
 800719e:	d15c      	bne.n	800725a <_dtoa_r+0x502>
 80071a0:	4b83      	ldr	r3, [pc, #524]	; (80073b0 <_dtoa_r+0x658>)
 80071a2:	2200      	movs	r2, #0
 80071a4:	4630      	mov	r0, r6
 80071a6:	4639      	mov	r1, r7
 80071a8:	f7f9 f86e 	bl	8000288 <__aeabi_dsub>
 80071ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071b0:	4606      	mov	r6, r0
 80071b2:	460f      	mov	r7, r1
 80071b4:	f7f9 fcb0 	bl	8000b18 <__aeabi_dcmpgt>
 80071b8:	2800      	cmp	r0, #0
 80071ba:	f040 8296 	bne.w	80076ea <_dtoa_r+0x992>
 80071be:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80071c2:	4630      	mov	r0, r6
 80071c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071c8:	4639      	mov	r1, r7
 80071ca:	f7f9 fc87 	bl	8000adc <__aeabi_dcmplt>
 80071ce:	2800      	cmp	r0, #0
 80071d0:	f040 8288 	bne.w	80076e4 <_dtoa_r+0x98c>
 80071d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80071d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80071dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071de:	2b00      	cmp	r3, #0
 80071e0:	f2c0 8158 	blt.w	8007494 <_dtoa_r+0x73c>
 80071e4:	f1ba 0f0e 	cmp.w	sl, #14
 80071e8:	f300 8154 	bgt.w	8007494 <_dtoa_r+0x73c>
 80071ec:	4b6b      	ldr	r3, [pc, #428]	; (800739c <_dtoa_r+0x644>)
 80071ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80071f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80071f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f280 80e3 	bge.w	80073c4 <_dtoa_r+0x66c>
 80071fe:	9b01      	ldr	r3, [sp, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	f300 80df 	bgt.w	80073c4 <_dtoa_r+0x66c>
 8007206:	f040 826d 	bne.w	80076e4 <_dtoa_r+0x98c>
 800720a:	4b69      	ldr	r3, [pc, #420]	; (80073b0 <_dtoa_r+0x658>)
 800720c:	2200      	movs	r2, #0
 800720e:	4640      	mov	r0, r8
 8007210:	4649      	mov	r1, r9
 8007212:	f7f9 f9f1 	bl	80005f8 <__aeabi_dmul>
 8007216:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800721a:	f7f9 fc73 	bl	8000b04 <__aeabi_dcmpge>
 800721e:	9e01      	ldr	r6, [sp, #4]
 8007220:	4637      	mov	r7, r6
 8007222:	2800      	cmp	r0, #0
 8007224:	f040 8243 	bne.w	80076ae <_dtoa_r+0x956>
 8007228:	9d00      	ldr	r5, [sp, #0]
 800722a:	2331      	movs	r3, #49	; 0x31
 800722c:	f805 3b01 	strb.w	r3, [r5], #1
 8007230:	f10a 0a01 	add.w	sl, sl, #1
 8007234:	e23f      	b.n	80076b6 <_dtoa_r+0x95e>
 8007236:	07f2      	lsls	r2, r6, #31
 8007238:	d505      	bpl.n	8007246 <_dtoa_r+0x4ee>
 800723a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800723e:	f7f9 f9db 	bl	80005f8 <__aeabi_dmul>
 8007242:	3501      	adds	r5, #1
 8007244:	2301      	movs	r3, #1
 8007246:	1076      	asrs	r6, r6, #1
 8007248:	3708      	adds	r7, #8
 800724a:	e76c      	b.n	8007126 <_dtoa_r+0x3ce>
 800724c:	2502      	movs	r5, #2
 800724e:	e76f      	b.n	8007130 <_dtoa_r+0x3d8>
 8007250:	9b01      	ldr	r3, [sp, #4]
 8007252:	f8cd a01c 	str.w	sl, [sp, #28]
 8007256:	930c      	str	r3, [sp, #48]	; 0x30
 8007258:	e78d      	b.n	8007176 <_dtoa_r+0x41e>
 800725a:	9900      	ldr	r1, [sp, #0]
 800725c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800725e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007260:	4b4e      	ldr	r3, [pc, #312]	; (800739c <_dtoa_r+0x644>)
 8007262:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007266:	4401      	add	r1, r0
 8007268:	9102      	str	r1, [sp, #8]
 800726a:	9908      	ldr	r1, [sp, #32]
 800726c:	eeb0 8a47 	vmov.f32	s16, s14
 8007270:	eef0 8a67 	vmov.f32	s17, s15
 8007274:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007278:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800727c:	2900      	cmp	r1, #0
 800727e:	d045      	beq.n	800730c <_dtoa_r+0x5b4>
 8007280:	494c      	ldr	r1, [pc, #304]	; (80073b4 <_dtoa_r+0x65c>)
 8007282:	2000      	movs	r0, #0
 8007284:	f7f9 fae2 	bl	800084c <__aeabi_ddiv>
 8007288:	ec53 2b18 	vmov	r2, r3, d8
 800728c:	f7f8 fffc 	bl	8000288 <__aeabi_dsub>
 8007290:	9d00      	ldr	r5, [sp, #0]
 8007292:	ec41 0b18 	vmov	d8, r0, r1
 8007296:	4639      	mov	r1, r7
 8007298:	4630      	mov	r0, r6
 800729a:	f7f9 fc5d 	bl	8000b58 <__aeabi_d2iz>
 800729e:	900c      	str	r0, [sp, #48]	; 0x30
 80072a0:	f7f9 f940 	bl	8000524 <__aeabi_i2d>
 80072a4:	4602      	mov	r2, r0
 80072a6:	460b      	mov	r3, r1
 80072a8:	4630      	mov	r0, r6
 80072aa:	4639      	mov	r1, r7
 80072ac:	f7f8 ffec 	bl	8000288 <__aeabi_dsub>
 80072b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072b2:	3330      	adds	r3, #48	; 0x30
 80072b4:	f805 3b01 	strb.w	r3, [r5], #1
 80072b8:	ec53 2b18 	vmov	r2, r3, d8
 80072bc:	4606      	mov	r6, r0
 80072be:	460f      	mov	r7, r1
 80072c0:	f7f9 fc0c 	bl	8000adc <__aeabi_dcmplt>
 80072c4:	2800      	cmp	r0, #0
 80072c6:	d165      	bne.n	8007394 <_dtoa_r+0x63c>
 80072c8:	4632      	mov	r2, r6
 80072ca:	463b      	mov	r3, r7
 80072cc:	4935      	ldr	r1, [pc, #212]	; (80073a4 <_dtoa_r+0x64c>)
 80072ce:	2000      	movs	r0, #0
 80072d0:	f7f8 ffda 	bl	8000288 <__aeabi_dsub>
 80072d4:	ec53 2b18 	vmov	r2, r3, d8
 80072d8:	f7f9 fc00 	bl	8000adc <__aeabi_dcmplt>
 80072dc:	2800      	cmp	r0, #0
 80072de:	f040 80b9 	bne.w	8007454 <_dtoa_r+0x6fc>
 80072e2:	9b02      	ldr	r3, [sp, #8]
 80072e4:	429d      	cmp	r5, r3
 80072e6:	f43f af75 	beq.w	80071d4 <_dtoa_r+0x47c>
 80072ea:	4b2f      	ldr	r3, [pc, #188]	; (80073a8 <_dtoa_r+0x650>)
 80072ec:	ec51 0b18 	vmov	r0, r1, d8
 80072f0:	2200      	movs	r2, #0
 80072f2:	f7f9 f981 	bl	80005f8 <__aeabi_dmul>
 80072f6:	4b2c      	ldr	r3, [pc, #176]	; (80073a8 <_dtoa_r+0x650>)
 80072f8:	ec41 0b18 	vmov	d8, r0, r1
 80072fc:	2200      	movs	r2, #0
 80072fe:	4630      	mov	r0, r6
 8007300:	4639      	mov	r1, r7
 8007302:	f7f9 f979 	bl	80005f8 <__aeabi_dmul>
 8007306:	4606      	mov	r6, r0
 8007308:	460f      	mov	r7, r1
 800730a:	e7c4      	b.n	8007296 <_dtoa_r+0x53e>
 800730c:	ec51 0b17 	vmov	r0, r1, d7
 8007310:	f7f9 f972 	bl	80005f8 <__aeabi_dmul>
 8007314:	9b02      	ldr	r3, [sp, #8]
 8007316:	9d00      	ldr	r5, [sp, #0]
 8007318:	930c      	str	r3, [sp, #48]	; 0x30
 800731a:	ec41 0b18 	vmov	d8, r0, r1
 800731e:	4639      	mov	r1, r7
 8007320:	4630      	mov	r0, r6
 8007322:	f7f9 fc19 	bl	8000b58 <__aeabi_d2iz>
 8007326:	9011      	str	r0, [sp, #68]	; 0x44
 8007328:	f7f9 f8fc 	bl	8000524 <__aeabi_i2d>
 800732c:	4602      	mov	r2, r0
 800732e:	460b      	mov	r3, r1
 8007330:	4630      	mov	r0, r6
 8007332:	4639      	mov	r1, r7
 8007334:	f7f8 ffa8 	bl	8000288 <__aeabi_dsub>
 8007338:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800733a:	3330      	adds	r3, #48	; 0x30
 800733c:	f805 3b01 	strb.w	r3, [r5], #1
 8007340:	9b02      	ldr	r3, [sp, #8]
 8007342:	429d      	cmp	r5, r3
 8007344:	4606      	mov	r6, r0
 8007346:	460f      	mov	r7, r1
 8007348:	f04f 0200 	mov.w	r2, #0
 800734c:	d134      	bne.n	80073b8 <_dtoa_r+0x660>
 800734e:	4b19      	ldr	r3, [pc, #100]	; (80073b4 <_dtoa_r+0x65c>)
 8007350:	ec51 0b18 	vmov	r0, r1, d8
 8007354:	f7f8 ff9a 	bl	800028c <__adddf3>
 8007358:	4602      	mov	r2, r0
 800735a:	460b      	mov	r3, r1
 800735c:	4630      	mov	r0, r6
 800735e:	4639      	mov	r1, r7
 8007360:	f7f9 fbda 	bl	8000b18 <__aeabi_dcmpgt>
 8007364:	2800      	cmp	r0, #0
 8007366:	d175      	bne.n	8007454 <_dtoa_r+0x6fc>
 8007368:	ec53 2b18 	vmov	r2, r3, d8
 800736c:	4911      	ldr	r1, [pc, #68]	; (80073b4 <_dtoa_r+0x65c>)
 800736e:	2000      	movs	r0, #0
 8007370:	f7f8 ff8a 	bl	8000288 <__aeabi_dsub>
 8007374:	4602      	mov	r2, r0
 8007376:	460b      	mov	r3, r1
 8007378:	4630      	mov	r0, r6
 800737a:	4639      	mov	r1, r7
 800737c:	f7f9 fbae 	bl	8000adc <__aeabi_dcmplt>
 8007380:	2800      	cmp	r0, #0
 8007382:	f43f af27 	beq.w	80071d4 <_dtoa_r+0x47c>
 8007386:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007388:	1e6b      	subs	r3, r5, #1
 800738a:	930c      	str	r3, [sp, #48]	; 0x30
 800738c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007390:	2b30      	cmp	r3, #48	; 0x30
 8007392:	d0f8      	beq.n	8007386 <_dtoa_r+0x62e>
 8007394:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007398:	e04a      	b.n	8007430 <_dtoa_r+0x6d8>
 800739a:	bf00      	nop
 800739c:	08009d98 	.word	0x08009d98
 80073a0:	08009d70 	.word	0x08009d70
 80073a4:	3ff00000 	.word	0x3ff00000
 80073a8:	40240000 	.word	0x40240000
 80073ac:	401c0000 	.word	0x401c0000
 80073b0:	40140000 	.word	0x40140000
 80073b4:	3fe00000 	.word	0x3fe00000
 80073b8:	4baf      	ldr	r3, [pc, #700]	; (8007678 <_dtoa_r+0x920>)
 80073ba:	f7f9 f91d 	bl	80005f8 <__aeabi_dmul>
 80073be:	4606      	mov	r6, r0
 80073c0:	460f      	mov	r7, r1
 80073c2:	e7ac      	b.n	800731e <_dtoa_r+0x5c6>
 80073c4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80073c8:	9d00      	ldr	r5, [sp, #0]
 80073ca:	4642      	mov	r2, r8
 80073cc:	464b      	mov	r3, r9
 80073ce:	4630      	mov	r0, r6
 80073d0:	4639      	mov	r1, r7
 80073d2:	f7f9 fa3b 	bl	800084c <__aeabi_ddiv>
 80073d6:	f7f9 fbbf 	bl	8000b58 <__aeabi_d2iz>
 80073da:	9002      	str	r0, [sp, #8]
 80073dc:	f7f9 f8a2 	bl	8000524 <__aeabi_i2d>
 80073e0:	4642      	mov	r2, r8
 80073e2:	464b      	mov	r3, r9
 80073e4:	f7f9 f908 	bl	80005f8 <__aeabi_dmul>
 80073e8:	4602      	mov	r2, r0
 80073ea:	460b      	mov	r3, r1
 80073ec:	4630      	mov	r0, r6
 80073ee:	4639      	mov	r1, r7
 80073f0:	f7f8 ff4a 	bl	8000288 <__aeabi_dsub>
 80073f4:	9e02      	ldr	r6, [sp, #8]
 80073f6:	9f01      	ldr	r7, [sp, #4]
 80073f8:	3630      	adds	r6, #48	; 0x30
 80073fa:	f805 6b01 	strb.w	r6, [r5], #1
 80073fe:	9e00      	ldr	r6, [sp, #0]
 8007400:	1bae      	subs	r6, r5, r6
 8007402:	42b7      	cmp	r7, r6
 8007404:	4602      	mov	r2, r0
 8007406:	460b      	mov	r3, r1
 8007408:	d137      	bne.n	800747a <_dtoa_r+0x722>
 800740a:	f7f8 ff3f 	bl	800028c <__adddf3>
 800740e:	4642      	mov	r2, r8
 8007410:	464b      	mov	r3, r9
 8007412:	4606      	mov	r6, r0
 8007414:	460f      	mov	r7, r1
 8007416:	f7f9 fb7f 	bl	8000b18 <__aeabi_dcmpgt>
 800741a:	b9c8      	cbnz	r0, 8007450 <_dtoa_r+0x6f8>
 800741c:	4642      	mov	r2, r8
 800741e:	464b      	mov	r3, r9
 8007420:	4630      	mov	r0, r6
 8007422:	4639      	mov	r1, r7
 8007424:	f7f9 fb50 	bl	8000ac8 <__aeabi_dcmpeq>
 8007428:	b110      	cbz	r0, 8007430 <_dtoa_r+0x6d8>
 800742a:	9b02      	ldr	r3, [sp, #8]
 800742c:	07d9      	lsls	r1, r3, #31
 800742e:	d40f      	bmi.n	8007450 <_dtoa_r+0x6f8>
 8007430:	4620      	mov	r0, r4
 8007432:	4659      	mov	r1, fp
 8007434:	f000 fe4a 	bl	80080cc <_Bfree>
 8007438:	2300      	movs	r3, #0
 800743a:	702b      	strb	r3, [r5, #0]
 800743c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800743e:	f10a 0001 	add.w	r0, sl, #1
 8007442:	6018      	str	r0, [r3, #0]
 8007444:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007446:	2b00      	cmp	r3, #0
 8007448:	f43f acd8 	beq.w	8006dfc <_dtoa_r+0xa4>
 800744c:	601d      	str	r5, [r3, #0]
 800744e:	e4d5      	b.n	8006dfc <_dtoa_r+0xa4>
 8007450:	f8cd a01c 	str.w	sl, [sp, #28]
 8007454:	462b      	mov	r3, r5
 8007456:	461d      	mov	r5, r3
 8007458:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800745c:	2a39      	cmp	r2, #57	; 0x39
 800745e:	d108      	bne.n	8007472 <_dtoa_r+0x71a>
 8007460:	9a00      	ldr	r2, [sp, #0]
 8007462:	429a      	cmp	r2, r3
 8007464:	d1f7      	bne.n	8007456 <_dtoa_r+0x6fe>
 8007466:	9a07      	ldr	r2, [sp, #28]
 8007468:	9900      	ldr	r1, [sp, #0]
 800746a:	3201      	adds	r2, #1
 800746c:	9207      	str	r2, [sp, #28]
 800746e:	2230      	movs	r2, #48	; 0x30
 8007470:	700a      	strb	r2, [r1, #0]
 8007472:	781a      	ldrb	r2, [r3, #0]
 8007474:	3201      	adds	r2, #1
 8007476:	701a      	strb	r2, [r3, #0]
 8007478:	e78c      	b.n	8007394 <_dtoa_r+0x63c>
 800747a:	4b7f      	ldr	r3, [pc, #508]	; (8007678 <_dtoa_r+0x920>)
 800747c:	2200      	movs	r2, #0
 800747e:	f7f9 f8bb 	bl	80005f8 <__aeabi_dmul>
 8007482:	2200      	movs	r2, #0
 8007484:	2300      	movs	r3, #0
 8007486:	4606      	mov	r6, r0
 8007488:	460f      	mov	r7, r1
 800748a:	f7f9 fb1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800748e:	2800      	cmp	r0, #0
 8007490:	d09b      	beq.n	80073ca <_dtoa_r+0x672>
 8007492:	e7cd      	b.n	8007430 <_dtoa_r+0x6d8>
 8007494:	9a08      	ldr	r2, [sp, #32]
 8007496:	2a00      	cmp	r2, #0
 8007498:	f000 80c4 	beq.w	8007624 <_dtoa_r+0x8cc>
 800749c:	9a05      	ldr	r2, [sp, #20]
 800749e:	2a01      	cmp	r2, #1
 80074a0:	f300 80a8 	bgt.w	80075f4 <_dtoa_r+0x89c>
 80074a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80074a6:	2a00      	cmp	r2, #0
 80074a8:	f000 80a0 	beq.w	80075ec <_dtoa_r+0x894>
 80074ac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80074b0:	9e06      	ldr	r6, [sp, #24]
 80074b2:	4645      	mov	r5, r8
 80074b4:	9a04      	ldr	r2, [sp, #16]
 80074b6:	2101      	movs	r1, #1
 80074b8:	441a      	add	r2, r3
 80074ba:	4620      	mov	r0, r4
 80074bc:	4498      	add	r8, r3
 80074be:	9204      	str	r2, [sp, #16]
 80074c0:	f000 ff0a 	bl	80082d8 <__i2b>
 80074c4:	4607      	mov	r7, r0
 80074c6:	2d00      	cmp	r5, #0
 80074c8:	dd0b      	ble.n	80074e2 <_dtoa_r+0x78a>
 80074ca:	9b04      	ldr	r3, [sp, #16]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	dd08      	ble.n	80074e2 <_dtoa_r+0x78a>
 80074d0:	42ab      	cmp	r3, r5
 80074d2:	9a04      	ldr	r2, [sp, #16]
 80074d4:	bfa8      	it	ge
 80074d6:	462b      	movge	r3, r5
 80074d8:	eba8 0803 	sub.w	r8, r8, r3
 80074dc:	1aed      	subs	r5, r5, r3
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	9304      	str	r3, [sp, #16]
 80074e2:	9b06      	ldr	r3, [sp, #24]
 80074e4:	b1fb      	cbz	r3, 8007526 <_dtoa_r+0x7ce>
 80074e6:	9b08      	ldr	r3, [sp, #32]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f000 809f 	beq.w	800762c <_dtoa_r+0x8d4>
 80074ee:	2e00      	cmp	r6, #0
 80074f0:	dd11      	ble.n	8007516 <_dtoa_r+0x7be>
 80074f2:	4639      	mov	r1, r7
 80074f4:	4632      	mov	r2, r6
 80074f6:	4620      	mov	r0, r4
 80074f8:	f000 ffaa 	bl	8008450 <__pow5mult>
 80074fc:	465a      	mov	r2, fp
 80074fe:	4601      	mov	r1, r0
 8007500:	4607      	mov	r7, r0
 8007502:	4620      	mov	r0, r4
 8007504:	f000 fefe 	bl	8008304 <__multiply>
 8007508:	4659      	mov	r1, fp
 800750a:	9007      	str	r0, [sp, #28]
 800750c:	4620      	mov	r0, r4
 800750e:	f000 fddd 	bl	80080cc <_Bfree>
 8007512:	9b07      	ldr	r3, [sp, #28]
 8007514:	469b      	mov	fp, r3
 8007516:	9b06      	ldr	r3, [sp, #24]
 8007518:	1b9a      	subs	r2, r3, r6
 800751a:	d004      	beq.n	8007526 <_dtoa_r+0x7ce>
 800751c:	4659      	mov	r1, fp
 800751e:	4620      	mov	r0, r4
 8007520:	f000 ff96 	bl	8008450 <__pow5mult>
 8007524:	4683      	mov	fp, r0
 8007526:	2101      	movs	r1, #1
 8007528:	4620      	mov	r0, r4
 800752a:	f000 fed5 	bl	80082d8 <__i2b>
 800752e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007530:	2b00      	cmp	r3, #0
 8007532:	4606      	mov	r6, r0
 8007534:	dd7c      	ble.n	8007630 <_dtoa_r+0x8d8>
 8007536:	461a      	mov	r2, r3
 8007538:	4601      	mov	r1, r0
 800753a:	4620      	mov	r0, r4
 800753c:	f000 ff88 	bl	8008450 <__pow5mult>
 8007540:	9b05      	ldr	r3, [sp, #20]
 8007542:	2b01      	cmp	r3, #1
 8007544:	4606      	mov	r6, r0
 8007546:	dd76      	ble.n	8007636 <_dtoa_r+0x8de>
 8007548:	2300      	movs	r3, #0
 800754a:	9306      	str	r3, [sp, #24]
 800754c:	6933      	ldr	r3, [r6, #16]
 800754e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007552:	6918      	ldr	r0, [r3, #16]
 8007554:	f000 fe70 	bl	8008238 <__hi0bits>
 8007558:	f1c0 0020 	rsb	r0, r0, #32
 800755c:	9b04      	ldr	r3, [sp, #16]
 800755e:	4418      	add	r0, r3
 8007560:	f010 001f 	ands.w	r0, r0, #31
 8007564:	f000 8086 	beq.w	8007674 <_dtoa_r+0x91c>
 8007568:	f1c0 0320 	rsb	r3, r0, #32
 800756c:	2b04      	cmp	r3, #4
 800756e:	dd7f      	ble.n	8007670 <_dtoa_r+0x918>
 8007570:	f1c0 001c 	rsb	r0, r0, #28
 8007574:	9b04      	ldr	r3, [sp, #16]
 8007576:	4403      	add	r3, r0
 8007578:	4480      	add	r8, r0
 800757a:	4405      	add	r5, r0
 800757c:	9304      	str	r3, [sp, #16]
 800757e:	f1b8 0f00 	cmp.w	r8, #0
 8007582:	dd05      	ble.n	8007590 <_dtoa_r+0x838>
 8007584:	4659      	mov	r1, fp
 8007586:	4642      	mov	r2, r8
 8007588:	4620      	mov	r0, r4
 800758a:	f000 ffbb 	bl	8008504 <__lshift>
 800758e:	4683      	mov	fp, r0
 8007590:	9b04      	ldr	r3, [sp, #16]
 8007592:	2b00      	cmp	r3, #0
 8007594:	dd05      	ble.n	80075a2 <_dtoa_r+0x84a>
 8007596:	4631      	mov	r1, r6
 8007598:	461a      	mov	r2, r3
 800759a:	4620      	mov	r0, r4
 800759c:	f000 ffb2 	bl	8008504 <__lshift>
 80075a0:	4606      	mov	r6, r0
 80075a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d069      	beq.n	800767c <_dtoa_r+0x924>
 80075a8:	4631      	mov	r1, r6
 80075aa:	4658      	mov	r0, fp
 80075ac:	f001 f816 	bl	80085dc <__mcmp>
 80075b0:	2800      	cmp	r0, #0
 80075b2:	da63      	bge.n	800767c <_dtoa_r+0x924>
 80075b4:	2300      	movs	r3, #0
 80075b6:	4659      	mov	r1, fp
 80075b8:	220a      	movs	r2, #10
 80075ba:	4620      	mov	r0, r4
 80075bc:	f000 fda8 	bl	8008110 <__multadd>
 80075c0:	9b08      	ldr	r3, [sp, #32]
 80075c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075c6:	4683      	mov	fp, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f000 818f 	beq.w	80078ec <_dtoa_r+0xb94>
 80075ce:	4639      	mov	r1, r7
 80075d0:	2300      	movs	r3, #0
 80075d2:	220a      	movs	r2, #10
 80075d4:	4620      	mov	r0, r4
 80075d6:	f000 fd9b 	bl	8008110 <__multadd>
 80075da:	f1b9 0f00 	cmp.w	r9, #0
 80075de:	4607      	mov	r7, r0
 80075e0:	f300 808e 	bgt.w	8007700 <_dtoa_r+0x9a8>
 80075e4:	9b05      	ldr	r3, [sp, #20]
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	dc50      	bgt.n	800768c <_dtoa_r+0x934>
 80075ea:	e089      	b.n	8007700 <_dtoa_r+0x9a8>
 80075ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80075f2:	e75d      	b.n	80074b0 <_dtoa_r+0x758>
 80075f4:	9b01      	ldr	r3, [sp, #4]
 80075f6:	1e5e      	subs	r6, r3, #1
 80075f8:	9b06      	ldr	r3, [sp, #24]
 80075fa:	42b3      	cmp	r3, r6
 80075fc:	bfbf      	itttt	lt
 80075fe:	9b06      	ldrlt	r3, [sp, #24]
 8007600:	9606      	strlt	r6, [sp, #24]
 8007602:	1af2      	sublt	r2, r6, r3
 8007604:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007606:	bfb6      	itet	lt
 8007608:	189b      	addlt	r3, r3, r2
 800760a:	1b9e      	subge	r6, r3, r6
 800760c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800760e:	9b01      	ldr	r3, [sp, #4]
 8007610:	bfb8      	it	lt
 8007612:	2600      	movlt	r6, #0
 8007614:	2b00      	cmp	r3, #0
 8007616:	bfb5      	itete	lt
 8007618:	eba8 0503 	sublt.w	r5, r8, r3
 800761c:	9b01      	ldrge	r3, [sp, #4]
 800761e:	2300      	movlt	r3, #0
 8007620:	4645      	movge	r5, r8
 8007622:	e747      	b.n	80074b4 <_dtoa_r+0x75c>
 8007624:	9e06      	ldr	r6, [sp, #24]
 8007626:	9f08      	ldr	r7, [sp, #32]
 8007628:	4645      	mov	r5, r8
 800762a:	e74c      	b.n	80074c6 <_dtoa_r+0x76e>
 800762c:	9a06      	ldr	r2, [sp, #24]
 800762e:	e775      	b.n	800751c <_dtoa_r+0x7c4>
 8007630:	9b05      	ldr	r3, [sp, #20]
 8007632:	2b01      	cmp	r3, #1
 8007634:	dc18      	bgt.n	8007668 <_dtoa_r+0x910>
 8007636:	9b02      	ldr	r3, [sp, #8]
 8007638:	b9b3      	cbnz	r3, 8007668 <_dtoa_r+0x910>
 800763a:	9b03      	ldr	r3, [sp, #12]
 800763c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007640:	b9a3      	cbnz	r3, 800766c <_dtoa_r+0x914>
 8007642:	9b03      	ldr	r3, [sp, #12]
 8007644:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007648:	0d1b      	lsrs	r3, r3, #20
 800764a:	051b      	lsls	r3, r3, #20
 800764c:	b12b      	cbz	r3, 800765a <_dtoa_r+0x902>
 800764e:	9b04      	ldr	r3, [sp, #16]
 8007650:	3301      	adds	r3, #1
 8007652:	9304      	str	r3, [sp, #16]
 8007654:	f108 0801 	add.w	r8, r8, #1
 8007658:	2301      	movs	r3, #1
 800765a:	9306      	str	r3, [sp, #24]
 800765c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800765e:	2b00      	cmp	r3, #0
 8007660:	f47f af74 	bne.w	800754c <_dtoa_r+0x7f4>
 8007664:	2001      	movs	r0, #1
 8007666:	e779      	b.n	800755c <_dtoa_r+0x804>
 8007668:	2300      	movs	r3, #0
 800766a:	e7f6      	b.n	800765a <_dtoa_r+0x902>
 800766c:	9b02      	ldr	r3, [sp, #8]
 800766e:	e7f4      	b.n	800765a <_dtoa_r+0x902>
 8007670:	d085      	beq.n	800757e <_dtoa_r+0x826>
 8007672:	4618      	mov	r0, r3
 8007674:	301c      	adds	r0, #28
 8007676:	e77d      	b.n	8007574 <_dtoa_r+0x81c>
 8007678:	40240000 	.word	0x40240000
 800767c:	9b01      	ldr	r3, [sp, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	dc38      	bgt.n	80076f4 <_dtoa_r+0x99c>
 8007682:	9b05      	ldr	r3, [sp, #20]
 8007684:	2b02      	cmp	r3, #2
 8007686:	dd35      	ble.n	80076f4 <_dtoa_r+0x99c>
 8007688:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800768c:	f1b9 0f00 	cmp.w	r9, #0
 8007690:	d10d      	bne.n	80076ae <_dtoa_r+0x956>
 8007692:	4631      	mov	r1, r6
 8007694:	464b      	mov	r3, r9
 8007696:	2205      	movs	r2, #5
 8007698:	4620      	mov	r0, r4
 800769a:	f000 fd39 	bl	8008110 <__multadd>
 800769e:	4601      	mov	r1, r0
 80076a0:	4606      	mov	r6, r0
 80076a2:	4658      	mov	r0, fp
 80076a4:	f000 ff9a 	bl	80085dc <__mcmp>
 80076a8:	2800      	cmp	r0, #0
 80076aa:	f73f adbd 	bgt.w	8007228 <_dtoa_r+0x4d0>
 80076ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076b0:	9d00      	ldr	r5, [sp, #0]
 80076b2:	ea6f 0a03 	mvn.w	sl, r3
 80076b6:	f04f 0800 	mov.w	r8, #0
 80076ba:	4631      	mov	r1, r6
 80076bc:	4620      	mov	r0, r4
 80076be:	f000 fd05 	bl	80080cc <_Bfree>
 80076c2:	2f00      	cmp	r7, #0
 80076c4:	f43f aeb4 	beq.w	8007430 <_dtoa_r+0x6d8>
 80076c8:	f1b8 0f00 	cmp.w	r8, #0
 80076cc:	d005      	beq.n	80076da <_dtoa_r+0x982>
 80076ce:	45b8      	cmp	r8, r7
 80076d0:	d003      	beq.n	80076da <_dtoa_r+0x982>
 80076d2:	4641      	mov	r1, r8
 80076d4:	4620      	mov	r0, r4
 80076d6:	f000 fcf9 	bl	80080cc <_Bfree>
 80076da:	4639      	mov	r1, r7
 80076dc:	4620      	mov	r0, r4
 80076de:	f000 fcf5 	bl	80080cc <_Bfree>
 80076e2:	e6a5      	b.n	8007430 <_dtoa_r+0x6d8>
 80076e4:	2600      	movs	r6, #0
 80076e6:	4637      	mov	r7, r6
 80076e8:	e7e1      	b.n	80076ae <_dtoa_r+0x956>
 80076ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80076ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80076f0:	4637      	mov	r7, r6
 80076f2:	e599      	b.n	8007228 <_dtoa_r+0x4d0>
 80076f4:	9b08      	ldr	r3, [sp, #32]
 80076f6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f000 80fd 	beq.w	80078fa <_dtoa_r+0xba2>
 8007700:	2d00      	cmp	r5, #0
 8007702:	dd05      	ble.n	8007710 <_dtoa_r+0x9b8>
 8007704:	4639      	mov	r1, r7
 8007706:	462a      	mov	r2, r5
 8007708:	4620      	mov	r0, r4
 800770a:	f000 fefb 	bl	8008504 <__lshift>
 800770e:	4607      	mov	r7, r0
 8007710:	9b06      	ldr	r3, [sp, #24]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d05c      	beq.n	80077d0 <_dtoa_r+0xa78>
 8007716:	6879      	ldr	r1, [r7, #4]
 8007718:	4620      	mov	r0, r4
 800771a:	f000 fc97 	bl	800804c <_Balloc>
 800771e:	4605      	mov	r5, r0
 8007720:	b928      	cbnz	r0, 800772e <_dtoa_r+0x9d6>
 8007722:	4b80      	ldr	r3, [pc, #512]	; (8007924 <_dtoa_r+0xbcc>)
 8007724:	4602      	mov	r2, r0
 8007726:	f240 21ea 	movw	r1, #746	; 0x2ea
 800772a:	f7ff bb2e 	b.w	8006d8a <_dtoa_r+0x32>
 800772e:	693a      	ldr	r2, [r7, #16]
 8007730:	3202      	adds	r2, #2
 8007732:	0092      	lsls	r2, r2, #2
 8007734:	f107 010c 	add.w	r1, r7, #12
 8007738:	300c      	adds	r0, #12
 800773a:	f7fd fd07 	bl	800514c <memcpy>
 800773e:	2201      	movs	r2, #1
 8007740:	4629      	mov	r1, r5
 8007742:	4620      	mov	r0, r4
 8007744:	f000 fede 	bl	8008504 <__lshift>
 8007748:	9b00      	ldr	r3, [sp, #0]
 800774a:	3301      	adds	r3, #1
 800774c:	9301      	str	r3, [sp, #4]
 800774e:	9b00      	ldr	r3, [sp, #0]
 8007750:	444b      	add	r3, r9
 8007752:	9307      	str	r3, [sp, #28]
 8007754:	9b02      	ldr	r3, [sp, #8]
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	46b8      	mov	r8, r7
 800775c:	9306      	str	r3, [sp, #24]
 800775e:	4607      	mov	r7, r0
 8007760:	9b01      	ldr	r3, [sp, #4]
 8007762:	4631      	mov	r1, r6
 8007764:	3b01      	subs	r3, #1
 8007766:	4658      	mov	r0, fp
 8007768:	9302      	str	r3, [sp, #8]
 800776a:	f7ff fa67 	bl	8006c3c <quorem>
 800776e:	4603      	mov	r3, r0
 8007770:	3330      	adds	r3, #48	; 0x30
 8007772:	9004      	str	r0, [sp, #16]
 8007774:	4641      	mov	r1, r8
 8007776:	4658      	mov	r0, fp
 8007778:	9308      	str	r3, [sp, #32]
 800777a:	f000 ff2f 	bl	80085dc <__mcmp>
 800777e:	463a      	mov	r2, r7
 8007780:	4681      	mov	r9, r0
 8007782:	4631      	mov	r1, r6
 8007784:	4620      	mov	r0, r4
 8007786:	f000 ff45 	bl	8008614 <__mdiff>
 800778a:	68c2      	ldr	r2, [r0, #12]
 800778c:	9b08      	ldr	r3, [sp, #32]
 800778e:	4605      	mov	r5, r0
 8007790:	bb02      	cbnz	r2, 80077d4 <_dtoa_r+0xa7c>
 8007792:	4601      	mov	r1, r0
 8007794:	4658      	mov	r0, fp
 8007796:	f000 ff21 	bl	80085dc <__mcmp>
 800779a:	9b08      	ldr	r3, [sp, #32]
 800779c:	4602      	mov	r2, r0
 800779e:	4629      	mov	r1, r5
 80077a0:	4620      	mov	r0, r4
 80077a2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80077a6:	f000 fc91 	bl	80080cc <_Bfree>
 80077aa:	9b05      	ldr	r3, [sp, #20]
 80077ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077ae:	9d01      	ldr	r5, [sp, #4]
 80077b0:	ea43 0102 	orr.w	r1, r3, r2
 80077b4:	9b06      	ldr	r3, [sp, #24]
 80077b6:	430b      	orrs	r3, r1
 80077b8:	9b08      	ldr	r3, [sp, #32]
 80077ba:	d10d      	bne.n	80077d8 <_dtoa_r+0xa80>
 80077bc:	2b39      	cmp	r3, #57	; 0x39
 80077be:	d029      	beq.n	8007814 <_dtoa_r+0xabc>
 80077c0:	f1b9 0f00 	cmp.w	r9, #0
 80077c4:	dd01      	ble.n	80077ca <_dtoa_r+0xa72>
 80077c6:	9b04      	ldr	r3, [sp, #16]
 80077c8:	3331      	adds	r3, #49	; 0x31
 80077ca:	9a02      	ldr	r2, [sp, #8]
 80077cc:	7013      	strb	r3, [r2, #0]
 80077ce:	e774      	b.n	80076ba <_dtoa_r+0x962>
 80077d0:	4638      	mov	r0, r7
 80077d2:	e7b9      	b.n	8007748 <_dtoa_r+0x9f0>
 80077d4:	2201      	movs	r2, #1
 80077d6:	e7e2      	b.n	800779e <_dtoa_r+0xa46>
 80077d8:	f1b9 0f00 	cmp.w	r9, #0
 80077dc:	db06      	blt.n	80077ec <_dtoa_r+0xa94>
 80077de:	9905      	ldr	r1, [sp, #20]
 80077e0:	ea41 0909 	orr.w	r9, r1, r9
 80077e4:	9906      	ldr	r1, [sp, #24]
 80077e6:	ea59 0101 	orrs.w	r1, r9, r1
 80077ea:	d120      	bne.n	800782e <_dtoa_r+0xad6>
 80077ec:	2a00      	cmp	r2, #0
 80077ee:	ddec      	ble.n	80077ca <_dtoa_r+0xa72>
 80077f0:	4659      	mov	r1, fp
 80077f2:	2201      	movs	r2, #1
 80077f4:	4620      	mov	r0, r4
 80077f6:	9301      	str	r3, [sp, #4]
 80077f8:	f000 fe84 	bl	8008504 <__lshift>
 80077fc:	4631      	mov	r1, r6
 80077fe:	4683      	mov	fp, r0
 8007800:	f000 feec 	bl	80085dc <__mcmp>
 8007804:	2800      	cmp	r0, #0
 8007806:	9b01      	ldr	r3, [sp, #4]
 8007808:	dc02      	bgt.n	8007810 <_dtoa_r+0xab8>
 800780a:	d1de      	bne.n	80077ca <_dtoa_r+0xa72>
 800780c:	07da      	lsls	r2, r3, #31
 800780e:	d5dc      	bpl.n	80077ca <_dtoa_r+0xa72>
 8007810:	2b39      	cmp	r3, #57	; 0x39
 8007812:	d1d8      	bne.n	80077c6 <_dtoa_r+0xa6e>
 8007814:	9a02      	ldr	r2, [sp, #8]
 8007816:	2339      	movs	r3, #57	; 0x39
 8007818:	7013      	strb	r3, [r2, #0]
 800781a:	462b      	mov	r3, r5
 800781c:	461d      	mov	r5, r3
 800781e:	3b01      	subs	r3, #1
 8007820:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007824:	2a39      	cmp	r2, #57	; 0x39
 8007826:	d050      	beq.n	80078ca <_dtoa_r+0xb72>
 8007828:	3201      	adds	r2, #1
 800782a:	701a      	strb	r2, [r3, #0]
 800782c:	e745      	b.n	80076ba <_dtoa_r+0x962>
 800782e:	2a00      	cmp	r2, #0
 8007830:	dd03      	ble.n	800783a <_dtoa_r+0xae2>
 8007832:	2b39      	cmp	r3, #57	; 0x39
 8007834:	d0ee      	beq.n	8007814 <_dtoa_r+0xabc>
 8007836:	3301      	adds	r3, #1
 8007838:	e7c7      	b.n	80077ca <_dtoa_r+0xa72>
 800783a:	9a01      	ldr	r2, [sp, #4]
 800783c:	9907      	ldr	r1, [sp, #28]
 800783e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007842:	428a      	cmp	r2, r1
 8007844:	d02a      	beq.n	800789c <_dtoa_r+0xb44>
 8007846:	4659      	mov	r1, fp
 8007848:	2300      	movs	r3, #0
 800784a:	220a      	movs	r2, #10
 800784c:	4620      	mov	r0, r4
 800784e:	f000 fc5f 	bl	8008110 <__multadd>
 8007852:	45b8      	cmp	r8, r7
 8007854:	4683      	mov	fp, r0
 8007856:	f04f 0300 	mov.w	r3, #0
 800785a:	f04f 020a 	mov.w	r2, #10
 800785e:	4641      	mov	r1, r8
 8007860:	4620      	mov	r0, r4
 8007862:	d107      	bne.n	8007874 <_dtoa_r+0xb1c>
 8007864:	f000 fc54 	bl	8008110 <__multadd>
 8007868:	4680      	mov	r8, r0
 800786a:	4607      	mov	r7, r0
 800786c:	9b01      	ldr	r3, [sp, #4]
 800786e:	3301      	adds	r3, #1
 8007870:	9301      	str	r3, [sp, #4]
 8007872:	e775      	b.n	8007760 <_dtoa_r+0xa08>
 8007874:	f000 fc4c 	bl	8008110 <__multadd>
 8007878:	4639      	mov	r1, r7
 800787a:	4680      	mov	r8, r0
 800787c:	2300      	movs	r3, #0
 800787e:	220a      	movs	r2, #10
 8007880:	4620      	mov	r0, r4
 8007882:	f000 fc45 	bl	8008110 <__multadd>
 8007886:	4607      	mov	r7, r0
 8007888:	e7f0      	b.n	800786c <_dtoa_r+0xb14>
 800788a:	f1b9 0f00 	cmp.w	r9, #0
 800788e:	9a00      	ldr	r2, [sp, #0]
 8007890:	bfcc      	ite	gt
 8007892:	464d      	movgt	r5, r9
 8007894:	2501      	movle	r5, #1
 8007896:	4415      	add	r5, r2
 8007898:	f04f 0800 	mov.w	r8, #0
 800789c:	4659      	mov	r1, fp
 800789e:	2201      	movs	r2, #1
 80078a0:	4620      	mov	r0, r4
 80078a2:	9301      	str	r3, [sp, #4]
 80078a4:	f000 fe2e 	bl	8008504 <__lshift>
 80078a8:	4631      	mov	r1, r6
 80078aa:	4683      	mov	fp, r0
 80078ac:	f000 fe96 	bl	80085dc <__mcmp>
 80078b0:	2800      	cmp	r0, #0
 80078b2:	dcb2      	bgt.n	800781a <_dtoa_r+0xac2>
 80078b4:	d102      	bne.n	80078bc <_dtoa_r+0xb64>
 80078b6:	9b01      	ldr	r3, [sp, #4]
 80078b8:	07db      	lsls	r3, r3, #31
 80078ba:	d4ae      	bmi.n	800781a <_dtoa_r+0xac2>
 80078bc:	462b      	mov	r3, r5
 80078be:	461d      	mov	r5, r3
 80078c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078c4:	2a30      	cmp	r2, #48	; 0x30
 80078c6:	d0fa      	beq.n	80078be <_dtoa_r+0xb66>
 80078c8:	e6f7      	b.n	80076ba <_dtoa_r+0x962>
 80078ca:	9a00      	ldr	r2, [sp, #0]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d1a5      	bne.n	800781c <_dtoa_r+0xac4>
 80078d0:	f10a 0a01 	add.w	sl, sl, #1
 80078d4:	2331      	movs	r3, #49	; 0x31
 80078d6:	e779      	b.n	80077cc <_dtoa_r+0xa74>
 80078d8:	4b13      	ldr	r3, [pc, #76]	; (8007928 <_dtoa_r+0xbd0>)
 80078da:	f7ff baaf 	b.w	8006e3c <_dtoa_r+0xe4>
 80078de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f47f aa86 	bne.w	8006df2 <_dtoa_r+0x9a>
 80078e6:	4b11      	ldr	r3, [pc, #68]	; (800792c <_dtoa_r+0xbd4>)
 80078e8:	f7ff baa8 	b.w	8006e3c <_dtoa_r+0xe4>
 80078ec:	f1b9 0f00 	cmp.w	r9, #0
 80078f0:	dc03      	bgt.n	80078fa <_dtoa_r+0xba2>
 80078f2:	9b05      	ldr	r3, [sp, #20]
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	f73f aec9 	bgt.w	800768c <_dtoa_r+0x934>
 80078fa:	9d00      	ldr	r5, [sp, #0]
 80078fc:	4631      	mov	r1, r6
 80078fe:	4658      	mov	r0, fp
 8007900:	f7ff f99c 	bl	8006c3c <quorem>
 8007904:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007908:	f805 3b01 	strb.w	r3, [r5], #1
 800790c:	9a00      	ldr	r2, [sp, #0]
 800790e:	1aaa      	subs	r2, r5, r2
 8007910:	4591      	cmp	r9, r2
 8007912:	ddba      	ble.n	800788a <_dtoa_r+0xb32>
 8007914:	4659      	mov	r1, fp
 8007916:	2300      	movs	r3, #0
 8007918:	220a      	movs	r2, #10
 800791a:	4620      	mov	r0, r4
 800791c:	f000 fbf8 	bl	8008110 <__multadd>
 8007920:	4683      	mov	fp, r0
 8007922:	e7eb      	b.n	80078fc <_dtoa_r+0xba4>
 8007924:	08009c7c 	.word	0x08009c7c
 8007928:	08009a7c 	.word	0x08009a7c
 800792c:	08009bf9 	.word	0x08009bf9

08007930 <rshift>:
 8007930:	6903      	ldr	r3, [r0, #16]
 8007932:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007936:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800793a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800793e:	f100 0414 	add.w	r4, r0, #20
 8007942:	dd45      	ble.n	80079d0 <rshift+0xa0>
 8007944:	f011 011f 	ands.w	r1, r1, #31
 8007948:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800794c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007950:	d10c      	bne.n	800796c <rshift+0x3c>
 8007952:	f100 0710 	add.w	r7, r0, #16
 8007956:	4629      	mov	r1, r5
 8007958:	42b1      	cmp	r1, r6
 800795a:	d334      	bcc.n	80079c6 <rshift+0x96>
 800795c:	1a9b      	subs	r3, r3, r2
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	1eea      	subs	r2, r5, #3
 8007962:	4296      	cmp	r6, r2
 8007964:	bf38      	it	cc
 8007966:	2300      	movcc	r3, #0
 8007968:	4423      	add	r3, r4
 800796a:	e015      	b.n	8007998 <rshift+0x68>
 800796c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007970:	f1c1 0820 	rsb	r8, r1, #32
 8007974:	40cf      	lsrs	r7, r1
 8007976:	f105 0e04 	add.w	lr, r5, #4
 800797a:	46a1      	mov	r9, r4
 800797c:	4576      	cmp	r6, lr
 800797e:	46f4      	mov	ip, lr
 8007980:	d815      	bhi.n	80079ae <rshift+0x7e>
 8007982:	1a9b      	subs	r3, r3, r2
 8007984:	009a      	lsls	r2, r3, #2
 8007986:	3a04      	subs	r2, #4
 8007988:	3501      	adds	r5, #1
 800798a:	42ae      	cmp	r6, r5
 800798c:	bf38      	it	cc
 800798e:	2200      	movcc	r2, #0
 8007990:	18a3      	adds	r3, r4, r2
 8007992:	50a7      	str	r7, [r4, r2]
 8007994:	b107      	cbz	r7, 8007998 <rshift+0x68>
 8007996:	3304      	adds	r3, #4
 8007998:	1b1a      	subs	r2, r3, r4
 800799a:	42a3      	cmp	r3, r4
 800799c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80079a0:	bf08      	it	eq
 80079a2:	2300      	moveq	r3, #0
 80079a4:	6102      	str	r2, [r0, #16]
 80079a6:	bf08      	it	eq
 80079a8:	6143      	streq	r3, [r0, #20]
 80079aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079ae:	f8dc c000 	ldr.w	ip, [ip]
 80079b2:	fa0c fc08 	lsl.w	ip, ip, r8
 80079b6:	ea4c 0707 	orr.w	r7, ip, r7
 80079ba:	f849 7b04 	str.w	r7, [r9], #4
 80079be:	f85e 7b04 	ldr.w	r7, [lr], #4
 80079c2:	40cf      	lsrs	r7, r1
 80079c4:	e7da      	b.n	800797c <rshift+0x4c>
 80079c6:	f851 cb04 	ldr.w	ip, [r1], #4
 80079ca:	f847 cf04 	str.w	ip, [r7, #4]!
 80079ce:	e7c3      	b.n	8007958 <rshift+0x28>
 80079d0:	4623      	mov	r3, r4
 80079d2:	e7e1      	b.n	8007998 <rshift+0x68>

080079d4 <__hexdig_fun>:
 80079d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80079d8:	2b09      	cmp	r3, #9
 80079da:	d802      	bhi.n	80079e2 <__hexdig_fun+0xe>
 80079dc:	3820      	subs	r0, #32
 80079de:	b2c0      	uxtb	r0, r0
 80079e0:	4770      	bx	lr
 80079e2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80079e6:	2b05      	cmp	r3, #5
 80079e8:	d801      	bhi.n	80079ee <__hexdig_fun+0x1a>
 80079ea:	3847      	subs	r0, #71	; 0x47
 80079ec:	e7f7      	b.n	80079de <__hexdig_fun+0xa>
 80079ee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80079f2:	2b05      	cmp	r3, #5
 80079f4:	d801      	bhi.n	80079fa <__hexdig_fun+0x26>
 80079f6:	3827      	subs	r0, #39	; 0x27
 80079f8:	e7f1      	b.n	80079de <__hexdig_fun+0xa>
 80079fa:	2000      	movs	r0, #0
 80079fc:	4770      	bx	lr
	...

08007a00 <__gethex>:
 8007a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a04:	ed2d 8b02 	vpush	{d8}
 8007a08:	b089      	sub	sp, #36	; 0x24
 8007a0a:	ee08 0a10 	vmov	s16, r0
 8007a0e:	9304      	str	r3, [sp, #16]
 8007a10:	4bbc      	ldr	r3, [pc, #752]	; (8007d04 <__gethex+0x304>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	9301      	str	r3, [sp, #4]
 8007a16:	4618      	mov	r0, r3
 8007a18:	468b      	mov	fp, r1
 8007a1a:	4690      	mov	r8, r2
 8007a1c:	f7f8 fbd8 	bl	80001d0 <strlen>
 8007a20:	9b01      	ldr	r3, [sp, #4]
 8007a22:	f8db 2000 	ldr.w	r2, [fp]
 8007a26:	4403      	add	r3, r0
 8007a28:	4682      	mov	sl, r0
 8007a2a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007a2e:	9305      	str	r3, [sp, #20]
 8007a30:	1c93      	adds	r3, r2, #2
 8007a32:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007a36:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007a3a:	32fe      	adds	r2, #254	; 0xfe
 8007a3c:	18d1      	adds	r1, r2, r3
 8007a3e:	461f      	mov	r7, r3
 8007a40:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007a44:	9100      	str	r1, [sp, #0]
 8007a46:	2830      	cmp	r0, #48	; 0x30
 8007a48:	d0f8      	beq.n	8007a3c <__gethex+0x3c>
 8007a4a:	f7ff ffc3 	bl	80079d4 <__hexdig_fun>
 8007a4e:	4604      	mov	r4, r0
 8007a50:	2800      	cmp	r0, #0
 8007a52:	d13a      	bne.n	8007aca <__gethex+0xca>
 8007a54:	9901      	ldr	r1, [sp, #4]
 8007a56:	4652      	mov	r2, sl
 8007a58:	4638      	mov	r0, r7
 8007a5a:	f001 f9e1 	bl	8008e20 <strncmp>
 8007a5e:	4605      	mov	r5, r0
 8007a60:	2800      	cmp	r0, #0
 8007a62:	d168      	bne.n	8007b36 <__gethex+0x136>
 8007a64:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007a68:	eb07 060a 	add.w	r6, r7, sl
 8007a6c:	f7ff ffb2 	bl	80079d4 <__hexdig_fun>
 8007a70:	2800      	cmp	r0, #0
 8007a72:	d062      	beq.n	8007b3a <__gethex+0x13a>
 8007a74:	4633      	mov	r3, r6
 8007a76:	7818      	ldrb	r0, [r3, #0]
 8007a78:	2830      	cmp	r0, #48	; 0x30
 8007a7a:	461f      	mov	r7, r3
 8007a7c:	f103 0301 	add.w	r3, r3, #1
 8007a80:	d0f9      	beq.n	8007a76 <__gethex+0x76>
 8007a82:	f7ff ffa7 	bl	80079d4 <__hexdig_fun>
 8007a86:	2301      	movs	r3, #1
 8007a88:	fab0 f480 	clz	r4, r0
 8007a8c:	0964      	lsrs	r4, r4, #5
 8007a8e:	4635      	mov	r5, r6
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	463a      	mov	r2, r7
 8007a94:	4616      	mov	r6, r2
 8007a96:	3201      	adds	r2, #1
 8007a98:	7830      	ldrb	r0, [r6, #0]
 8007a9a:	f7ff ff9b 	bl	80079d4 <__hexdig_fun>
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	d1f8      	bne.n	8007a94 <__gethex+0x94>
 8007aa2:	9901      	ldr	r1, [sp, #4]
 8007aa4:	4652      	mov	r2, sl
 8007aa6:	4630      	mov	r0, r6
 8007aa8:	f001 f9ba 	bl	8008e20 <strncmp>
 8007aac:	b980      	cbnz	r0, 8007ad0 <__gethex+0xd0>
 8007aae:	b94d      	cbnz	r5, 8007ac4 <__gethex+0xc4>
 8007ab0:	eb06 050a 	add.w	r5, r6, sl
 8007ab4:	462a      	mov	r2, r5
 8007ab6:	4616      	mov	r6, r2
 8007ab8:	3201      	adds	r2, #1
 8007aba:	7830      	ldrb	r0, [r6, #0]
 8007abc:	f7ff ff8a 	bl	80079d4 <__hexdig_fun>
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	d1f8      	bne.n	8007ab6 <__gethex+0xb6>
 8007ac4:	1bad      	subs	r5, r5, r6
 8007ac6:	00ad      	lsls	r5, r5, #2
 8007ac8:	e004      	b.n	8007ad4 <__gethex+0xd4>
 8007aca:	2400      	movs	r4, #0
 8007acc:	4625      	mov	r5, r4
 8007ace:	e7e0      	b.n	8007a92 <__gethex+0x92>
 8007ad0:	2d00      	cmp	r5, #0
 8007ad2:	d1f7      	bne.n	8007ac4 <__gethex+0xc4>
 8007ad4:	7833      	ldrb	r3, [r6, #0]
 8007ad6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007ada:	2b50      	cmp	r3, #80	; 0x50
 8007adc:	d13b      	bne.n	8007b56 <__gethex+0x156>
 8007ade:	7873      	ldrb	r3, [r6, #1]
 8007ae0:	2b2b      	cmp	r3, #43	; 0x2b
 8007ae2:	d02c      	beq.n	8007b3e <__gethex+0x13e>
 8007ae4:	2b2d      	cmp	r3, #45	; 0x2d
 8007ae6:	d02e      	beq.n	8007b46 <__gethex+0x146>
 8007ae8:	1c71      	adds	r1, r6, #1
 8007aea:	f04f 0900 	mov.w	r9, #0
 8007aee:	7808      	ldrb	r0, [r1, #0]
 8007af0:	f7ff ff70 	bl	80079d4 <__hexdig_fun>
 8007af4:	1e43      	subs	r3, r0, #1
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	2b18      	cmp	r3, #24
 8007afa:	d82c      	bhi.n	8007b56 <__gethex+0x156>
 8007afc:	f1a0 0210 	sub.w	r2, r0, #16
 8007b00:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007b04:	f7ff ff66 	bl	80079d4 <__hexdig_fun>
 8007b08:	1e43      	subs	r3, r0, #1
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	2b18      	cmp	r3, #24
 8007b0e:	d91d      	bls.n	8007b4c <__gethex+0x14c>
 8007b10:	f1b9 0f00 	cmp.w	r9, #0
 8007b14:	d000      	beq.n	8007b18 <__gethex+0x118>
 8007b16:	4252      	negs	r2, r2
 8007b18:	4415      	add	r5, r2
 8007b1a:	f8cb 1000 	str.w	r1, [fp]
 8007b1e:	b1e4      	cbz	r4, 8007b5a <__gethex+0x15a>
 8007b20:	9b00      	ldr	r3, [sp, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	bf14      	ite	ne
 8007b26:	2700      	movne	r7, #0
 8007b28:	2706      	moveq	r7, #6
 8007b2a:	4638      	mov	r0, r7
 8007b2c:	b009      	add	sp, #36	; 0x24
 8007b2e:	ecbd 8b02 	vpop	{d8}
 8007b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b36:	463e      	mov	r6, r7
 8007b38:	4625      	mov	r5, r4
 8007b3a:	2401      	movs	r4, #1
 8007b3c:	e7ca      	b.n	8007ad4 <__gethex+0xd4>
 8007b3e:	f04f 0900 	mov.w	r9, #0
 8007b42:	1cb1      	adds	r1, r6, #2
 8007b44:	e7d3      	b.n	8007aee <__gethex+0xee>
 8007b46:	f04f 0901 	mov.w	r9, #1
 8007b4a:	e7fa      	b.n	8007b42 <__gethex+0x142>
 8007b4c:	230a      	movs	r3, #10
 8007b4e:	fb03 0202 	mla	r2, r3, r2, r0
 8007b52:	3a10      	subs	r2, #16
 8007b54:	e7d4      	b.n	8007b00 <__gethex+0x100>
 8007b56:	4631      	mov	r1, r6
 8007b58:	e7df      	b.n	8007b1a <__gethex+0x11a>
 8007b5a:	1bf3      	subs	r3, r6, r7
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	4621      	mov	r1, r4
 8007b60:	2b07      	cmp	r3, #7
 8007b62:	dc0b      	bgt.n	8007b7c <__gethex+0x17c>
 8007b64:	ee18 0a10 	vmov	r0, s16
 8007b68:	f000 fa70 	bl	800804c <_Balloc>
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	b940      	cbnz	r0, 8007b82 <__gethex+0x182>
 8007b70:	4b65      	ldr	r3, [pc, #404]	; (8007d08 <__gethex+0x308>)
 8007b72:	4602      	mov	r2, r0
 8007b74:	21de      	movs	r1, #222	; 0xde
 8007b76:	4865      	ldr	r0, [pc, #404]	; (8007d0c <__gethex+0x30c>)
 8007b78:	f001 f972 	bl	8008e60 <__assert_func>
 8007b7c:	3101      	adds	r1, #1
 8007b7e:	105b      	asrs	r3, r3, #1
 8007b80:	e7ee      	b.n	8007b60 <__gethex+0x160>
 8007b82:	f100 0914 	add.w	r9, r0, #20
 8007b86:	f04f 0b00 	mov.w	fp, #0
 8007b8a:	f1ca 0301 	rsb	r3, sl, #1
 8007b8e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007b92:	f8cd b000 	str.w	fp, [sp]
 8007b96:	9306      	str	r3, [sp, #24]
 8007b98:	42b7      	cmp	r7, r6
 8007b9a:	d340      	bcc.n	8007c1e <__gethex+0x21e>
 8007b9c:	9802      	ldr	r0, [sp, #8]
 8007b9e:	9b00      	ldr	r3, [sp, #0]
 8007ba0:	f840 3b04 	str.w	r3, [r0], #4
 8007ba4:	eba0 0009 	sub.w	r0, r0, r9
 8007ba8:	1080      	asrs	r0, r0, #2
 8007baa:	0146      	lsls	r6, r0, #5
 8007bac:	6120      	str	r0, [r4, #16]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f000 fb42 	bl	8008238 <__hi0bits>
 8007bb4:	1a30      	subs	r0, r6, r0
 8007bb6:	f8d8 6000 	ldr.w	r6, [r8]
 8007bba:	42b0      	cmp	r0, r6
 8007bbc:	dd63      	ble.n	8007c86 <__gethex+0x286>
 8007bbe:	1b87      	subs	r7, r0, r6
 8007bc0:	4639      	mov	r1, r7
 8007bc2:	4620      	mov	r0, r4
 8007bc4:	f000 fedc 	bl	8008980 <__any_on>
 8007bc8:	4682      	mov	sl, r0
 8007bca:	b1a8      	cbz	r0, 8007bf8 <__gethex+0x1f8>
 8007bcc:	1e7b      	subs	r3, r7, #1
 8007bce:	1159      	asrs	r1, r3, #5
 8007bd0:	f003 021f 	and.w	r2, r3, #31
 8007bd4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007bd8:	f04f 0a01 	mov.w	sl, #1
 8007bdc:	fa0a f202 	lsl.w	r2, sl, r2
 8007be0:	420a      	tst	r2, r1
 8007be2:	d009      	beq.n	8007bf8 <__gethex+0x1f8>
 8007be4:	4553      	cmp	r3, sl
 8007be6:	dd05      	ble.n	8007bf4 <__gethex+0x1f4>
 8007be8:	1eb9      	subs	r1, r7, #2
 8007bea:	4620      	mov	r0, r4
 8007bec:	f000 fec8 	bl	8008980 <__any_on>
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	d145      	bne.n	8007c80 <__gethex+0x280>
 8007bf4:	f04f 0a02 	mov.w	sl, #2
 8007bf8:	4639      	mov	r1, r7
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	f7ff fe98 	bl	8007930 <rshift>
 8007c00:	443d      	add	r5, r7
 8007c02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007c06:	42ab      	cmp	r3, r5
 8007c08:	da4c      	bge.n	8007ca4 <__gethex+0x2a4>
 8007c0a:	ee18 0a10 	vmov	r0, s16
 8007c0e:	4621      	mov	r1, r4
 8007c10:	f000 fa5c 	bl	80080cc <_Bfree>
 8007c14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007c16:	2300      	movs	r3, #0
 8007c18:	6013      	str	r3, [r2, #0]
 8007c1a:	27a3      	movs	r7, #163	; 0xa3
 8007c1c:	e785      	b.n	8007b2a <__gethex+0x12a>
 8007c1e:	1e73      	subs	r3, r6, #1
 8007c20:	9a05      	ldr	r2, [sp, #20]
 8007c22:	9303      	str	r3, [sp, #12]
 8007c24:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d019      	beq.n	8007c60 <__gethex+0x260>
 8007c2c:	f1bb 0f20 	cmp.w	fp, #32
 8007c30:	d107      	bne.n	8007c42 <__gethex+0x242>
 8007c32:	9b02      	ldr	r3, [sp, #8]
 8007c34:	9a00      	ldr	r2, [sp, #0]
 8007c36:	f843 2b04 	str.w	r2, [r3], #4
 8007c3a:	9302      	str	r3, [sp, #8]
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	9300      	str	r3, [sp, #0]
 8007c40:	469b      	mov	fp, r3
 8007c42:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007c46:	f7ff fec5 	bl	80079d4 <__hexdig_fun>
 8007c4a:	9b00      	ldr	r3, [sp, #0]
 8007c4c:	f000 000f 	and.w	r0, r0, #15
 8007c50:	fa00 f00b 	lsl.w	r0, r0, fp
 8007c54:	4303      	orrs	r3, r0
 8007c56:	9300      	str	r3, [sp, #0]
 8007c58:	f10b 0b04 	add.w	fp, fp, #4
 8007c5c:	9b03      	ldr	r3, [sp, #12]
 8007c5e:	e00d      	b.n	8007c7c <__gethex+0x27c>
 8007c60:	9b03      	ldr	r3, [sp, #12]
 8007c62:	9a06      	ldr	r2, [sp, #24]
 8007c64:	4413      	add	r3, r2
 8007c66:	42bb      	cmp	r3, r7
 8007c68:	d3e0      	bcc.n	8007c2c <__gethex+0x22c>
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	9901      	ldr	r1, [sp, #4]
 8007c6e:	9307      	str	r3, [sp, #28]
 8007c70:	4652      	mov	r2, sl
 8007c72:	f001 f8d5 	bl	8008e20 <strncmp>
 8007c76:	9b07      	ldr	r3, [sp, #28]
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	d1d7      	bne.n	8007c2c <__gethex+0x22c>
 8007c7c:	461e      	mov	r6, r3
 8007c7e:	e78b      	b.n	8007b98 <__gethex+0x198>
 8007c80:	f04f 0a03 	mov.w	sl, #3
 8007c84:	e7b8      	b.n	8007bf8 <__gethex+0x1f8>
 8007c86:	da0a      	bge.n	8007c9e <__gethex+0x29e>
 8007c88:	1a37      	subs	r7, r6, r0
 8007c8a:	4621      	mov	r1, r4
 8007c8c:	ee18 0a10 	vmov	r0, s16
 8007c90:	463a      	mov	r2, r7
 8007c92:	f000 fc37 	bl	8008504 <__lshift>
 8007c96:	1bed      	subs	r5, r5, r7
 8007c98:	4604      	mov	r4, r0
 8007c9a:	f100 0914 	add.w	r9, r0, #20
 8007c9e:	f04f 0a00 	mov.w	sl, #0
 8007ca2:	e7ae      	b.n	8007c02 <__gethex+0x202>
 8007ca4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007ca8:	42a8      	cmp	r0, r5
 8007caa:	dd72      	ble.n	8007d92 <__gethex+0x392>
 8007cac:	1b45      	subs	r5, r0, r5
 8007cae:	42ae      	cmp	r6, r5
 8007cb0:	dc36      	bgt.n	8007d20 <__gethex+0x320>
 8007cb2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d02a      	beq.n	8007d10 <__gethex+0x310>
 8007cba:	2b03      	cmp	r3, #3
 8007cbc:	d02c      	beq.n	8007d18 <__gethex+0x318>
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d115      	bne.n	8007cee <__gethex+0x2ee>
 8007cc2:	42ae      	cmp	r6, r5
 8007cc4:	d113      	bne.n	8007cee <__gethex+0x2ee>
 8007cc6:	2e01      	cmp	r6, #1
 8007cc8:	d10b      	bne.n	8007ce2 <__gethex+0x2e2>
 8007cca:	9a04      	ldr	r2, [sp, #16]
 8007ccc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007cd0:	6013      	str	r3, [r2, #0]
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	6123      	str	r3, [r4, #16]
 8007cd6:	f8c9 3000 	str.w	r3, [r9]
 8007cda:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007cdc:	2762      	movs	r7, #98	; 0x62
 8007cde:	601c      	str	r4, [r3, #0]
 8007ce0:	e723      	b.n	8007b2a <__gethex+0x12a>
 8007ce2:	1e71      	subs	r1, r6, #1
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	f000 fe4b 	bl	8008980 <__any_on>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	d1ed      	bne.n	8007cca <__gethex+0x2ca>
 8007cee:	ee18 0a10 	vmov	r0, s16
 8007cf2:	4621      	mov	r1, r4
 8007cf4:	f000 f9ea 	bl	80080cc <_Bfree>
 8007cf8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	6013      	str	r3, [r2, #0]
 8007cfe:	2750      	movs	r7, #80	; 0x50
 8007d00:	e713      	b.n	8007b2a <__gethex+0x12a>
 8007d02:	bf00      	nop
 8007d04:	08009cf8 	.word	0x08009cf8
 8007d08:	08009c7c 	.word	0x08009c7c
 8007d0c:	08009c8d 	.word	0x08009c8d
 8007d10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1eb      	bne.n	8007cee <__gethex+0x2ee>
 8007d16:	e7d8      	b.n	8007cca <__gethex+0x2ca>
 8007d18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1d5      	bne.n	8007cca <__gethex+0x2ca>
 8007d1e:	e7e6      	b.n	8007cee <__gethex+0x2ee>
 8007d20:	1e6f      	subs	r7, r5, #1
 8007d22:	f1ba 0f00 	cmp.w	sl, #0
 8007d26:	d131      	bne.n	8007d8c <__gethex+0x38c>
 8007d28:	b127      	cbz	r7, 8007d34 <__gethex+0x334>
 8007d2a:	4639      	mov	r1, r7
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	f000 fe27 	bl	8008980 <__any_on>
 8007d32:	4682      	mov	sl, r0
 8007d34:	117b      	asrs	r3, r7, #5
 8007d36:	2101      	movs	r1, #1
 8007d38:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007d3c:	f007 071f 	and.w	r7, r7, #31
 8007d40:	fa01 f707 	lsl.w	r7, r1, r7
 8007d44:	421f      	tst	r7, r3
 8007d46:	4629      	mov	r1, r5
 8007d48:	4620      	mov	r0, r4
 8007d4a:	bf18      	it	ne
 8007d4c:	f04a 0a02 	orrne.w	sl, sl, #2
 8007d50:	1b76      	subs	r6, r6, r5
 8007d52:	f7ff fded 	bl	8007930 <rshift>
 8007d56:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007d5a:	2702      	movs	r7, #2
 8007d5c:	f1ba 0f00 	cmp.w	sl, #0
 8007d60:	d048      	beq.n	8007df4 <__gethex+0x3f4>
 8007d62:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d015      	beq.n	8007d96 <__gethex+0x396>
 8007d6a:	2b03      	cmp	r3, #3
 8007d6c:	d017      	beq.n	8007d9e <__gethex+0x39e>
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d109      	bne.n	8007d86 <__gethex+0x386>
 8007d72:	f01a 0f02 	tst.w	sl, #2
 8007d76:	d006      	beq.n	8007d86 <__gethex+0x386>
 8007d78:	f8d9 0000 	ldr.w	r0, [r9]
 8007d7c:	ea4a 0a00 	orr.w	sl, sl, r0
 8007d80:	f01a 0f01 	tst.w	sl, #1
 8007d84:	d10e      	bne.n	8007da4 <__gethex+0x3a4>
 8007d86:	f047 0710 	orr.w	r7, r7, #16
 8007d8a:	e033      	b.n	8007df4 <__gethex+0x3f4>
 8007d8c:	f04f 0a01 	mov.w	sl, #1
 8007d90:	e7d0      	b.n	8007d34 <__gethex+0x334>
 8007d92:	2701      	movs	r7, #1
 8007d94:	e7e2      	b.n	8007d5c <__gethex+0x35c>
 8007d96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d98:	f1c3 0301 	rsb	r3, r3, #1
 8007d9c:	9315      	str	r3, [sp, #84]	; 0x54
 8007d9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d0f0      	beq.n	8007d86 <__gethex+0x386>
 8007da4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007da8:	f104 0314 	add.w	r3, r4, #20
 8007dac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007db0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007db4:	f04f 0c00 	mov.w	ip, #0
 8007db8:	4618      	mov	r0, r3
 8007dba:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dbe:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007dc2:	d01c      	beq.n	8007dfe <__gethex+0x3fe>
 8007dc4:	3201      	adds	r2, #1
 8007dc6:	6002      	str	r2, [r0, #0]
 8007dc8:	2f02      	cmp	r7, #2
 8007dca:	f104 0314 	add.w	r3, r4, #20
 8007dce:	d13f      	bne.n	8007e50 <__gethex+0x450>
 8007dd0:	f8d8 2000 	ldr.w	r2, [r8]
 8007dd4:	3a01      	subs	r2, #1
 8007dd6:	42b2      	cmp	r2, r6
 8007dd8:	d10a      	bne.n	8007df0 <__gethex+0x3f0>
 8007dda:	1171      	asrs	r1, r6, #5
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007de2:	f006 061f 	and.w	r6, r6, #31
 8007de6:	fa02 f606 	lsl.w	r6, r2, r6
 8007dea:	421e      	tst	r6, r3
 8007dec:	bf18      	it	ne
 8007dee:	4617      	movne	r7, r2
 8007df0:	f047 0720 	orr.w	r7, r7, #32
 8007df4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007df6:	601c      	str	r4, [r3, #0]
 8007df8:	9b04      	ldr	r3, [sp, #16]
 8007dfa:	601d      	str	r5, [r3, #0]
 8007dfc:	e695      	b.n	8007b2a <__gethex+0x12a>
 8007dfe:	4299      	cmp	r1, r3
 8007e00:	f843 cc04 	str.w	ip, [r3, #-4]
 8007e04:	d8d8      	bhi.n	8007db8 <__gethex+0x3b8>
 8007e06:	68a3      	ldr	r3, [r4, #8]
 8007e08:	459b      	cmp	fp, r3
 8007e0a:	db19      	blt.n	8007e40 <__gethex+0x440>
 8007e0c:	6861      	ldr	r1, [r4, #4]
 8007e0e:	ee18 0a10 	vmov	r0, s16
 8007e12:	3101      	adds	r1, #1
 8007e14:	f000 f91a 	bl	800804c <_Balloc>
 8007e18:	4681      	mov	r9, r0
 8007e1a:	b918      	cbnz	r0, 8007e24 <__gethex+0x424>
 8007e1c:	4b1a      	ldr	r3, [pc, #104]	; (8007e88 <__gethex+0x488>)
 8007e1e:	4602      	mov	r2, r0
 8007e20:	2184      	movs	r1, #132	; 0x84
 8007e22:	e6a8      	b.n	8007b76 <__gethex+0x176>
 8007e24:	6922      	ldr	r2, [r4, #16]
 8007e26:	3202      	adds	r2, #2
 8007e28:	f104 010c 	add.w	r1, r4, #12
 8007e2c:	0092      	lsls	r2, r2, #2
 8007e2e:	300c      	adds	r0, #12
 8007e30:	f7fd f98c 	bl	800514c <memcpy>
 8007e34:	4621      	mov	r1, r4
 8007e36:	ee18 0a10 	vmov	r0, s16
 8007e3a:	f000 f947 	bl	80080cc <_Bfree>
 8007e3e:	464c      	mov	r4, r9
 8007e40:	6923      	ldr	r3, [r4, #16]
 8007e42:	1c5a      	adds	r2, r3, #1
 8007e44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007e48:	6122      	str	r2, [r4, #16]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	615a      	str	r2, [r3, #20]
 8007e4e:	e7bb      	b.n	8007dc8 <__gethex+0x3c8>
 8007e50:	6922      	ldr	r2, [r4, #16]
 8007e52:	455a      	cmp	r2, fp
 8007e54:	dd0b      	ble.n	8007e6e <__gethex+0x46e>
 8007e56:	2101      	movs	r1, #1
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f7ff fd69 	bl	8007930 <rshift>
 8007e5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007e62:	3501      	adds	r5, #1
 8007e64:	42ab      	cmp	r3, r5
 8007e66:	f6ff aed0 	blt.w	8007c0a <__gethex+0x20a>
 8007e6a:	2701      	movs	r7, #1
 8007e6c:	e7c0      	b.n	8007df0 <__gethex+0x3f0>
 8007e6e:	f016 061f 	ands.w	r6, r6, #31
 8007e72:	d0fa      	beq.n	8007e6a <__gethex+0x46a>
 8007e74:	449a      	add	sl, r3
 8007e76:	f1c6 0620 	rsb	r6, r6, #32
 8007e7a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007e7e:	f000 f9db 	bl	8008238 <__hi0bits>
 8007e82:	42b0      	cmp	r0, r6
 8007e84:	dbe7      	blt.n	8007e56 <__gethex+0x456>
 8007e86:	e7f0      	b.n	8007e6a <__gethex+0x46a>
 8007e88:	08009c7c 	.word	0x08009c7c

08007e8c <L_shift>:
 8007e8c:	f1c2 0208 	rsb	r2, r2, #8
 8007e90:	0092      	lsls	r2, r2, #2
 8007e92:	b570      	push	{r4, r5, r6, lr}
 8007e94:	f1c2 0620 	rsb	r6, r2, #32
 8007e98:	6843      	ldr	r3, [r0, #4]
 8007e9a:	6804      	ldr	r4, [r0, #0]
 8007e9c:	fa03 f506 	lsl.w	r5, r3, r6
 8007ea0:	432c      	orrs	r4, r5
 8007ea2:	40d3      	lsrs	r3, r2
 8007ea4:	6004      	str	r4, [r0, #0]
 8007ea6:	f840 3f04 	str.w	r3, [r0, #4]!
 8007eaa:	4288      	cmp	r0, r1
 8007eac:	d3f4      	bcc.n	8007e98 <L_shift+0xc>
 8007eae:	bd70      	pop	{r4, r5, r6, pc}

08007eb0 <__match>:
 8007eb0:	b530      	push	{r4, r5, lr}
 8007eb2:	6803      	ldr	r3, [r0, #0]
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007eba:	b914      	cbnz	r4, 8007ec2 <__match+0x12>
 8007ebc:	6003      	str	r3, [r0, #0]
 8007ebe:	2001      	movs	r0, #1
 8007ec0:	bd30      	pop	{r4, r5, pc}
 8007ec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ec6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007eca:	2d19      	cmp	r5, #25
 8007ecc:	bf98      	it	ls
 8007ece:	3220      	addls	r2, #32
 8007ed0:	42a2      	cmp	r2, r4
 8007ed2:	d0f0      	beq.n	8007eb6 <__match+0x6>
 8007ed4:	2000      	movs	r0, #0
 8007ed6:	e7f3      	b.n	8007ec0 <__match+0x10>

08007ed8 <__hexnan>:
 8007ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007edc:	680b      	ldr	r3, [r1, #0]
 8007ede:	6801      	ldr	r1, [r0, #0]
 8007ee0:	115e      	asrs	r6, r3, #5
 8007ee2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007ee6:	f013 031f 	ands.w	r3, r3, #31
 8007eea:	b087      	sub	sp, #28
 8007eec:	bf18      	it	ne
 8007eee:	3604      	addne	r6, #4
 8007ef0:	2500      	movs	r5, #0
 8007ef2:	1f37      	subs	r7, r6, #4
 8007ef4:	4682      	mov	sl, r0
 8007ef6:	4690      	mov	r8, r2
 8007ef8:	9301      	str	r3, [sp, #4]
 8007efa:	f846 5c04 	str.w	r5, [r6, #-4]
 8007efe:	46b9      	mov	r9, r7
 8007f00:	463c      	mov	r4, r7
 8007f02:	9502      	str	r5, [sp, #8]
 8007f04:	46ab      	mov	fp, r5
 8007f06:	784a      	ldrb	r2, [r1, #1]
 8007f08:	1c4b      	adds	r3, r1, #1
 8007f0a:	9303      	str	r3, [sp, #12]
 8007f0c:	b342      	cbz	r2, 8007f60 <__hexnan+0x88>
 8007f0e:	4610      	mov	r0, r2
 8007f10:	9105      	str	r1, [sp, #20]
 8007f12:	9204      	str	r2, [sp, #16]
 8007f14:	f7ff fd5e 	bl	80079d4 <__hexdig_fun>
 8007f18:	2800      	cmp	r0, #0
 8007f1a:	d14f      	bne.n	8007fbc <__hexnan+0xe4>
 8007f1c:	9a04      	ldr	r2, [sp, #16]
 8007f1e:	9905      	ldr	r1, [sp, #20]
 8007f20:	2a20      	cmp	r2, #32
 8007f22:	d818      	bhi.n	8007f56 <__hexnan+0x7e>
 8007f24:	9b02      	ldr	r3, [sp, #8]
 8007f26:	459b      	cmp	fp, r3
 8007f28:	dd13      	ble.n	8007f52 <__hexnan+0x7a>
 8007f2a:	454c      	cmp	r4, r9
 8007f2c:	d206      	bcs.n	8007f3c <__hexnan+0x64>
 8007f2e:	2d07      	cmp	r5, #7
 8007f30:	dc04      	bgt.n	8007f3c <__hexnan+0x64>
 8007f32:	462a      	mov	r2, r5
 8007f34:	4649      	mov	r1, r9
 8007f36:	4620      	mov	r0, r4
 8007f38:	f7ff ffa8 	bl	8007e8c <L_shift>
 8007f3c:	4544      	cmp	r4, r8
 8007f3e:	d950      	bls.n	8007fe2 <__hexnan+0x10a>
 8007f40:	2300      	movs	r3, #0
 8007f42:	f1a4 0904 	sub.w	r9, r4, #4
 8007f46:	f844 3c04 	str.w	r3, [r4, #-4]
 8007f4a:	f8cd b008 	str.w	fp, [sp, #8]
 8007f4e:	464c      	mov	r4, r9
 8007f50:	461d      	mov	r5, r3
 8007f52:	9903      	ldr	r1, [sp, #12]
 8007f54:	e7d7      	b.n	8007f06 <__hexnan+0x2e>
 8007f56:	2a29      	cmp	r2, #41	; 0x29
 8007f58:	d156      	bne.n	8008008 <__hexnan+0x130>
 8007f5a:	3102      	adds	r1, #2
 8007f5c:	f8ca 1000 	str.w	r1, [sl]
 8007f60:	f1bb 0f00 	cmp.w	fp, #0
 8007f64:	d050      	beq.n	8008008 <__hexnan+0x130>
 8007f66:	454c      	cmp	r4, r9
 8007f68:	d206      	bcs.n	8007f78 <__hexnan+0xa0>
 8007f6a:	2d07      	cmp	r5, #7
 8007f6c:	dc04      	bgt.n	8007f78 <__hexnan+0xa0>
 8007f6e:	462a      	mov	r2, r5
 8007f70:	4649      	mov	r1, r9
 8007f72:	4620      	mov	r0, r4
 8007f74:	f7ff ff8a 	bl	8007e8c <L_shift>
 8007f78:	4544      	cmp	r4, r8
 8007f7a:	d934      	bls.n	8007fe6 <__hexnan+0x10e>
 8007f7c:	f1a8 0204 	sub.w	r2, r8, #4
 8007f80:	4623      	mov	r3, r4
 8007f82:	f853 1b04 	ldr.w	r1, [r3], #4
 8007f86:	f842 1f04 	str.w	r1, [r2, #4]!
 8007f8a:	429f      	cmp	r7, r3
 8007f8c:	d2f9      	bcs.n	8007f82 <__hexnan+0xaa>
 8007f8e:	1b3b      	subs	r3, r7, r4
 8007f90:	f023 0303 	bic.w	r3, r3, #3
 8007f94:	3304      	adds	r3, #4
 8007f96:	3401      	adds	r4, #1
 8007f98:	3e03      	subs	r6, #3
 8007f9a:	42b4      	cmp	r4, r6
 8007f9c:	bf88      	it	hi
 8007f9e:	2304      	movhi	r3, #4
 8007fa0:	4443      	add	r3, r8
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f843 2b04 	str.w	r2, [r3], #4
 8007fa8:	429f      	cmp	r7, r3
 8007faa:	d2fb      	bcs.n	8007fa4 <__hexnan+0xcc>
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	b91b      	cbnz	r3, 8007fb8 <__hexnan+0xe0>
 8007fb0:	4547      	cmp	r7, r8
 8007fb2:	d127      	bne.n	8008004 <__hexnan+0x12c>
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	603b      	str	r3, [r7, #0]
 8007fb8:	2005      	movs	r0, #5
 8007fba:	e026      	b.n	800800a <__hexnan+0x132>
 8007fbc:	3501      	adds	r5, #1
 8007fbe:	2d08      	cmp	r5, #8
 8007fc0:	f10b 0b01 	add.w	fp, fp, #1
 8007fc4:	dd06      	ble.n	8007fd4 <__hexnan+0xfc>
 8007fc6:	4544      	cmp	r4, r8
 8007fc8:	d9c3      	bls.n	8007f52 <__hexnan+0x7a>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	f844 3c04 	str.w	r3, [r4, #-4]
 8007fd0:	2501      	movs	r5, #1
 8007fd2:	3c04      	subs	r4, #4
 8007fd4:	6822      	ldr	r2, [r4, #0]
 8007fd6:	f000 000f 	and.w	r0, r0, #15
 8007fda:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007fde:	6022      	str	r2, [r4, #0]
 8007fe0:	e7b7      	b.n	8007f52 <__hexnan+0x7a>
 8007fe2:	2508      	movs	r5, #8
 8007fe4:	e7b5      	b.n	8007f52 <__hexnan+0x7a>
 8007fe6:	9b01      	ldr	r3, [sp, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d0df      	beq.n	8007fac <__hexnan+0xd4>
 8007fec:	f04f 32ff 	mov.w	r2, #4294967295
 8007ff0:	f1c3 0320 	rsb	r3, r3, #32
 8007ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ff8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007ffc:	401a      	ands	r2, r3
 8007ffe:	f846 2c04 	str.w	r2, [r6, #-4]
 8008002:	e7d3      	b.n	8007fac <__hexnan+0xd4>
 8008004:	3f04      	subs	r7, #4
 8008006:	e7d1      	b.n	8007fac <__hexnan+0xd4>
 8008008:	2004      	movs	r0, #4
 800800a:	b007      	add	sp, #28
 800800c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008010 <_localeconv_r>:
 8008010:	4800      	ldr	r0, [pc, #0]	; (8008014 <_localeconv_r+0x4>)
 8008012:	4770      	bx	lr
 8008014:	20000184 	.word	0x20000184

08008018 <malloc>:
 8008018:	4b02      	ldr	r3, [pc, #8]	; (8008024 <malloc+0xc>)
 800801a:	4601      	mov	r1, r0
 800801c:	6818      	ldr	r0, [r3, #0]
 800801e:	f000 bd2f 	b.w	8008a80 <_malloc_r>
 8008022:	bf00      	nop
 8008024:	2000002c 	.word	0x2000002c

08008028 <__ascii_mbtowc>:
 8008028:	b082      	sub	sp, #8
 800802a:	b901      	cbnz	r1, 800802e <__ascii_mbtowc+0x6>
 800802c:	a901      	add	r1, sp, #4
 800802e:	b142      	cbz	r2, 8008042 <__ascii_mbtowc+0x1a>
 8008030:	b14b      	cbz	r3, 8008046 <__ascii_mbtowc+0x1e>
 8008032:	7813      	ldrb	r3, [r2, #0]
 8008034:	600b      	str	r3, [r1, #0]
 8008036:	7812      	ldrb	r2, [r2, #0]
 8008038:	1e10      	subs	r0, r2, #0
 800803a:	bf18      	it	ne
 800803c:	2001      	movne	r0, #1
 800803e:	b002      	add	sp, #8
 8008040:	4770      	bx	lr
 8008042:	4610      	mov	r0, r2
 8008044:	e7fb      	b.n	800803e <__ascii_mbtowc+0x16>
 8008046:	f06f 0001 	mvn.w	r0, #1
 800804a:	e7f8      	b.n	800803e <__ascii_mbtowc+0x16>

0800804c <_Balloc>:
 800804c:	b570      	push	{r4, r5, r6, lr}
 800804e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008050:	4604      	mov	r4, r0
 8008052:	460d      	mov	r5, r1
 8008054:	b976      	cbnz	r6, 8008074 <_Balloc+0x28>
 8008056:	2010      	movs	r0, #16
 8008058:	f7ff ffde 	bl	8008018 <malloc>
 800805c:	4602      	mov	r2, r0
 800805e:	6260      	str	r0, [r4, #36]	; 0x24
 8008060:	b920      	cbnz	r0, 800806c <_Balloc+0x20>
 8008062:	4b18      	ldr	r3, [pc, #96]	; (80080c4 <_Balloc+0x78>)
 8008064:	4818      	ldr	r0, [pc, #96]	; (80080c8 <_Balloc+0x7c>)
 8008066:	2166      	movs	r1, #102	; 0x66
 8008068:	f000 fefa 	bl	8008e60 <__assert_func>
 800806c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008070:	6006      	str	r6, [r0, #0]
 8008072:	60c6      	str	r6, [r0, #12]
 8008074:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008076:	68f3      	ldr	r3, [r6, #12]
 8008078:	b183      	cbz	r3, 800809c <_Balloc+0x50>
 800807a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008082:	b9b8      	cbnz	r0, 80080b4 <_Balloc+0x68>
 8008084:	2101      	movs	r1, #1
 8008086:	fa01 f605 	lsl.w	r6, r1, r5
 800808a:	1d72      	adds	r2, r6, #5
 800808c:	0092      	lsls	r2, r2, #2
 800808e:	4620      	mov	r0, r4
 8008090:	f000 fc97 	bl	80089c2 <_calloc_r>
 8008094:	b160      	cbz	r0, 80080b0 <_Balloc+0x64>
 8008096:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800809a:	e00e      	b.n	80080ba <_Balloc+0x6e>
 800809c:	2221      	movs	r2, #33	; 0x21
 800809e:	2104      	movs	r1, #4
 80080a0:	4620      	mov	r0, r4
 80080a2:	f000 fc8e 	bl	80089c2 <_calloc_r>
 80080a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080a8:	60f0      	str	r0, [r6, #12]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1e4      	bne.n	800807a <_Balloc+0x2e>
 80080b0:	2000      	movs	r0, #0
 80080b2:	bd70      	pop	{r4, r5, r6, pc}
 80080b4:	6802      	ldr	r2, [r0, #0]
 80080b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80080ba:	2300      	movs	r3, #0
 80080bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80080c0:	e7f7      	b.n	80080b2 <_Balloc+0x66>
 80080c2:	bf00      	nop
 80080c4:	08009c06 	.word	0x08009c06
 80080c8:	08009d0c 	.word	0x08009d0c

080080cc <_Bfree>:
 80080cc:	b570      	push	{r4, r5, r6, lr}
 80080ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80080d0:	4605      	mov	r5, r0
 80080d2:	460c      	mov	r4, r1
 80080d4:	b976      	cbnz	r6, 80080f4 <_Bfree+0x28>
 80080d6:	2010      	movs	r0, #16
 80080d8:	f7ff ff9e 	bl	8008018 <malloc>
 80080dc:	4602      	mov	r2, r0
 80080de:	6268      	str	r0, [r5, #36]	; 0x24
 80080e0:	b920      	cbnz	r0, 80080ec <_Bfree+0x20>
 80080e2:	4b09      	ldr	r3, [pc, #36]	; (8008108 <_Bfree+0x3c>)
 80080e4:	4809      	ldr	r0, [pc, #36]	; (800810c <_Bfree+0x40>)
 80080e6:	218a      	movs	r1, #138	; 0x8a
 80080e8:	f000 feba 	bl	8008e60 <__assert_func>
 80080ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080f0:	6006      	str	r6, [r0, #0]
 80080f2:	60c6      	str	r6, [r0, #12]
 80080f4:	b13c      	cbz	r4, 8008106 <_Bfree+0x3a>
 80080f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80080f8:	6862      	ldr	r2, [r4, #4]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008100:	6021      	str	r1, [r4, #0]
 8008102:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008106:	bd70      	pop	{r4, r5, r6, pc}
 8008108:	08009c06 	.word	0x08009c06
 800810c:	08009d0c 	.word	0x08009d0c

08008110 <__multadd>:
 8008110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008114:	690e      	ldr	r6, [r1, #16]
 8008116:	4607      	mov	r7, r0
 8008118:	4698      	mov	r8, r3
 800811a:	460c      	mov	r4, r1
 800811c:	f101 0014 	add.w	r0, r1, #20
 8008120:	2300      	movs	r3, #0
 8008122:	6805      	ldr	r5, [r0, #0]
 8008124:	b2a9      	uxth	r1, r5
 8008126:	fb02 8101 	mla	r1, r2, r1, r8
 800812a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800812e:	0c2d      	lsrs	r5, r5, #16
 8008130:	fb02 c505 	mla	r5, r2, r5, ip
 8008134:	b289      	uxth	r1, r1
 8008136:	3301      	adds	r3, #1
 8008138:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800813c:	429e      	cmp	r6, r3
 800813e:	f840 1b04 	str.w	r1, [r0], #4
 8008142:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008146:	dcec      	bgt.n	8008122 <__multadd+0x12>
 8008148:	f1b8 0f00 	cmp.w	r8, #0
 800814c:	d022      	beq.n	8008194 <__multadd+0x84>
 800814e:	68a3      	ldr	r3, [r4, #8]
 8008150:	42b3      	cmp	r3, r6
 8008152:	dc19      	bgt.n	8008188 <__multadd+0x78>
 8008154:	6861      	ldr	r1, [r4, #4]
 8008156:	4638      	mov	r0, r7
 8008158:	3101      	adds	r1, #1
 800815a:	f7ff ff77 	bl	800804c <_Balloc>
 800815e:	4605      	mov	r5, r0
 8008160:	b928      	cbnz	r0, 800816e <__multadd+0x5e>
 8008162:	4602      	mov	r2, r0
 8008164:	4b0d      	ldr	r3, [pc, #52]	; (800819c <__multadd+0x8c>)
 8008166:	480e      	ldr	r0, [pc, #56]	; (80081a0 <__multadd+0x90>)
 8008168:	21b5      	movs	r1, #181	; 0xb5
 800816a:	f000 fe79 	bl	8008e60 <__assert_func>
 800816e:	6922      	ldr	r2, [r4, #16]
 8008170:	3202      	adds	r2, #2
 8008172:	f104 010c 	add.w	r1, r4, #12
 8008176:	0092      	lsls	r2, r2, #2
 8008178:	300c      	adds	r0, #12
 800817a:	f7fc ffe7 	bl	800514c <memcpy>
 800817e:	4621      	mov	r1, r4
 8008180:	4638      	mov	r0, r7
 8008182:	f7ff ffa3 	bl	80080cc <_Bfree>
 8008186:	462c      	mov	r4, r5
 8008188:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800818c:	3601      	adds	r6, #1
 800818e:	f8c3 8014 	str.w	r8, [r3, #20]
 8008192:	6126      	str	r6, [r4, #16]
 8008194:	4620      	mov	r0, r4
 8008196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800819a:	bf00      	nop
 800819c:	08009c7c 	.word	0x08009c7c
 80081a0:	08009d0c 	.word	0x08009d0c

080081a4 <__s2b>:
 80081a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081a8:	460c      	mov	r4, r1
 80081aa:	4615      	mov	r5, r2
 80081ac:	461f      	mov	r7, r3
 80081ae:	2209      	movs	r2, #9
 80081b0:	3308      	adds	r3, #8
 80081b2:	4606      	mov	r6, r0
 80081b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80081b8:	2100      	movs	r1, #0
 80081ba:	2201      	movs	r2, #1
 80081bc:	429a      	cmp	r2, r3
 80081be:	db09      	blt.n	80081d4 <__s2b+0x30>
 80081c0:	4630      	mov	r0, r6
 80081c2:	f7ff ff43 	bl	800804c <_Balloc>
 80081c6:	b940      	cbnz	r0, 80081da <__s2b+0x36>
 80081c8:	4602      	mov	r2, r0
 80081ca:	4b19      	ldr	r3, [pc, #100]	; (8008230 <__s2b+0x8c>)
 80081cc:	4819      	ldr	r0, [pc, #100]	; (8008234 <__s2b+0x90>)
 80081ce:	21ce      	movs	r1, #206	; 0xce
 80081d0:	f000 fe46 	bl	8008e60 <__assert_func>
 80081d4:	0052      	lsls	r2, r2, #1
 80081d6:	3101      	adds	r1, #1
 80081d8:	e7f0      	b.n	80081bc <__s2b+0x18>
 80081da:	9b08      	ldr	r3, [sp, #32]
 80081dc:	6143      	str	r3, [r0, #20]
 80081de:	2d09      	cmp	r5, #9
 80081e0:	f04f 0301 	mov.w	r3, #1
 80081e4:	6103      	str	r3, [r0, #16]
 80081e6:	dd16      	ble.n	8008216 <__s2b+0x72>
 80081e8:	f104 0909 	add.w	r9, r4, #9
 80081ec:	46c8      	mov	r8, r9
 80081ee:	442c      	add	r4, r5
 80081f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80081f4:	4601      	mov	r1, r0
 80081f6:	3b30      	subs	r3, #48	; 0x30
 80081f8:	220a      	movs	r2, #10
 80081fa:	4630      	mov	r0, r6
 80081fc:	f7ff ff88 	bl	8008110 <__multadd>
 8008200:	45a0      	cmp	r8, r4
 8008202:	d1f5      	bne.n	80081f0 <__s2b+0x4c>
 8008204:	f1a5 0408 	sub.w	r4, r5, #8
 8008208:	444c      	add	r4, r9
 800820a:	1b2d      	subs	r5, r5, r4
 800820c:	1963      	adds	r3, r4, r5
 800820e:	42bb      	cmp	r3, r7
 8008210:	db04      	blt.n	800821c <__s2b+0x78>
 8008212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008216:	340a      	adds	r4, #10
 8008218:	2509      	movs	r5, #9
 800821a:	e7f6      	b.n	800820a <__s2b+0x66>
 800821c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008220:	4601      	mov	r1, r0
 8008222:	3b30      	subs	r3, #48	; 0x30
 8008224:	220a      	movs	r2, #10
 8008226:	4630      	mov	r0, r6
 8008228:	f7ff ff72 	bl	8008110 <__multadd>
 800822c:	e7ee      	b.n	800820c <__s2b+0x68>
 800822e:	bf00      	nop
 8008230:	08009c7c 	.word	0x08009c7c
 8008234:	08009d0c 	.word	0x08009d0c

08008238 <__hi0bits>:
 8008238:	0c03      	lsrs	r3, r0, #16
 800823a:	041b      	lsls	r3, r3, #16
 800823c:	b9d3      	cbnz	r3, 8008274 <__hi0bits+0x3c>
 800823e:	0400      	lsls	r0, r0, #16
 8008240:	2310      	movs	r3, #16
 8008242:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008246:	bf04      	itt	eq
 8008248:	0200      	lsleq	r0, r0, #8
 800824a:	3308      	addeq	r3, #8
 800824c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008250:	bf04      	itt	eq
 8008252:	0100      	lsleq	r0, r0, #4
 8008254:	3304      	addeq	r3, #4
 8008256:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800825a:	bf04      	itt	eq
 800825c:	0080      	lsleq	r0, r0, #2
 800825e:	3302      	addeq	r3, #2
 8008260:	2800      	cmp	r0, #0
 8008262:	db05      	blt.n	8008270 <__hi0bits+0x38>
 8008264:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008268:	f103 0301 	add.w	r3, r3, #1
 800826c:	bf08      	it	eq
 800826e:	2320      	moveq	r3, #32
 8008270:	4618      	mov	r0, r3
 8008272:	4770      	bx	lr
 8008274:	2300      	movs	r3, #0
 8008276:	e7e4      	b.n	8008242 <__hi0bits+0xa>

08008278 <__lo0bits>:
 8008278:	6803      	ldr	r3, [r0, #0]
 800827a:	f013 0207 	ands.w	r2, r3, #7
 800827e:	4601      	mov	r1, r0
 8008280:	d00b      	beq.n	800829a <__lo0bits+0x22>
 8008282:	07da      	lsls	r2, r3, #31
 8008284:	d424      	bmi.n	80082d0 <__lo0bits+0x58>
 8008286:	0798      	lsls	r0, r3, #30
 8008288:	bf49      	itett	mi
 800828a:	085b      	lsrmi	r3, r3, #1
 800828c:	089b      	lsrpl	r3, r3, #2
 800828e:	2001      	movmi	r0, #1
 8008290:	600b      	strmi	r3, [r1, #0]
 8008292:	bf5c      	itt	pl
 8008294:	600b      	strpl	r3, [r1, #0]
 8008296:	2002      	movpl	r0, #2
 8008298:	4770      	bx	lr
 800829a:	b298      	uxth	r0, r3
 800829c:	b9b0      	cbnz	r0, 80082cc <__lo0bits+0x54>
 800829e:	0c1b      	lsrs	r3, r3, #16
 80082a0:	2010      	movs	r0, #16
 80082a2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80082a6:	bf04      	itt	eq
 80082a8:	0a1b      	lsreq	r3, r3, #8
 80082aa:	3008      	addeq	r0, #8
 80082ac:	071a      	lsls	r2, r3, #28
 80082ae:	bf04      	itt	eq
 80082b0:	091b      	lsreq	r3, r3, #4
 80082b2:	3004      	addeq	r0, #4
 80082b4:	079a      	lsls	r2, r3, #30
 80082b6:	bf04      	itt	eq
 80082b8:	089b      	lsreq	r3, r3, #2
 80082ba:	3002      	addeq	r0, #2
 80082bc:	07da      	lsls	r2, r3, #31
 80082be:	d403      	bmi.n	80082c8 <__lo0bits+0x50>
 80082c0:	085b      	lsrs	r3, r3, #1
 80082c2:	f100 0001 	add.w	r0, r0, #1
 80082c6:	d005      	beq.n	80082d4 <__lo0bits+0x5c>
 80082c8:	600b      	str	r3, [r1, #0]
 80082ca:	4770      	bx	lr
 80082cc:	4610      	mov	r0, r2
 80082ce:	e7e8      	b.n	80082a2 <__lo0bits+0x2a>
 80082d0:	2000      	movs	r0, #0
 80082d2:	4770      	bx	lr
 80082d4:	2020      	movs	r0, #32
 80082d6:	4770      	bx	lr

080082d8 <__i2b>:
 80082d8:	b510      	push	{r4, lr}
 80082da:	460c      	mov	r4, r1
 80082dc:	2101      	movs	r1, #1
 80082de:	f7ff feb5 	bl	800804c <_Balloc>
 80082e2:	4602      	mov	r2, r0
 80082e4:	b928      	cbnz	r0, 80082f2 <__i2b+0x1a>
 80082e6:	4b05      	ldr	r3, [pc, #20]	; (80082fc <__i2b+0x24>)
 80082e8:	4805      	ldr	r0, [pc, #20]	; (8008300 <__i2b+0x28>)
 80082ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80082ee:	f000 fdb7 	bl	8008e60 <__assert_func>
 80082f2:	2301      	movs	r3, #1
 80082f4:	6144      	str	r4, [r0, #20]
 80082f6:	6103      	str	r3, [r0, #16]
 80082f8:	bd10      	pop	{r4, pc}
 80082fa:	bf00      	nop
 80082fc:	08009c7c 	.word	0x08009c7c
 8008300:	08009d0c 	.word	0x08009d0c

08008304 <__multiply>:
 8008304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008308:	4614      	mov	r4, r2
 800830a:	690a      	ldr	r2, [r1, #16]
 800830c:	6923      	ldr	r3, [r4, #16]
 800830e:	429a      	cmp	r2, r3
 8008310:	bfb8      	it	lt
 8008312:	460b      	movlt	r3, r1
 8008314:	460d      	mov	r5, r1
 8008316:	bfbc      	itt	lt
 8008318:	4625      	movlt	r5, r4
 800831a:	461c      	movlt	r4, r3
 800831c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008320:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008324:	68ab      	ldr	r3, [r5, #8]
 8008326:	6869      	ldr	r1, [r5, #4]
 8008328:	eb0a 0709 	add.w	r7, sl, r9
 800832c:	42bb      	cmp	r3, r7
 800832e:	b085      	sub	sp, #20
 8008330:	bfb8      	it	lt
 8008332:	3101      	addlt	r1, #1
 8008334:	f7ff fe8a 	bl	800804c <_Balloc>
 8008338:	b930      	cbnz	r0, 8008348 <__multiply+0x44>
 800833a:	4602      	mov	r2, r0
 800833c:	4b42      	ldr	r3, [pc, #264]	; (8008448 <__multiply+0x144>)
 800833e:	4843      	ldr	r0, [pc, #268]	; (800844c <__multiply+0x148>)
 8008340:	f240 115d 	movw	r1, #349	; 0x15d
 8008344:	f000 fd8c 	bl	8008e60 <__assert_func>
 8008348:	f100 0614 	add.w	r6, r0, #20
 800834c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008350:	4633      	mov	r3, r6
 8008352:	2200      	movs	r2, #0
 8008354:	4543      	cmp	r3, r8
 8008356:	d31e      	bcc.n	8008396 <__multiply+0x92>
 8008358:	f105 0c14 	add.w	ip, r5, #20
 800835c:	f104 0314 	add.w	r3, r4, #20
 8008360:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008364:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008368:	9202      	str	r2, [sp, #8]
 800836a:	ebac 0205 	sub.w	r2, ip, r5
 800836e:	3a15      	subs	r2, #21
 8008370:	f022 0203 	bic.w	r2, r2, #3
 8008374:	3204      	adds	r2, #4
 8008376:	f105 0115 	add.w	r1, r5, #21
 800837a:	458c      	cmp	ip, r1
 800837c:	bf38      	it	cc
 800837e:	2204      	movcc	r2, #4
 8008380:	9201      	str	r2, [sp, #4]
 8008382:	9a02      	ldr	r2, [sp, #8]
 8008384:	9303      	str	r3, [sp, #12]
 8008386:	429a      	cmp	r2, r3
 8008388:	d808      	bhi.n	800839c <__multiply+0x98>
 800838a:	2f00      	cmp	r7, #0
 800838c:	dc55      	bgt.n	800843a <__multiply+0x136>
 800838e:	6107      	str	r7, [r0, #16]
 8008390:	b005      	add	sp, #20
 8008392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008396:	f843 2b04 	str.w	r2, [r3], #4
 800839a:	e7db      	b.n	8008354 <__multiply+0x50>
 800839c:	f8b3 a000 	ldrh.w	sl, [r3]
 80083a0:	f1ba 0f00 	cmp.w	sl, #0
 80083a4:	d020      	beq.n	80083e8 <__multiply+0xe4>
 80083a6:	f105 0e14 	add.w	lr, r5, #20
 80083aa:	46b1      	mov	r9, r6
 80083ac:	2200      	movs	r2, #0
 80083ae:	f85e 4b04 	ldr.w	r4, [lr], #4
 80083b2:	f8d9 b000 	ldr.w	fp, [r9]
 80083b6:	b2a1      	uxth	r1, r4
 80083b8:	fa1f fb8b 	uxth.w	fp, fp
 80083bc:	fb0a b101 	mla	r1, sl, r1, fp
 80083c0:	4411      	add	r1, r2
 80083c2:	f8d9 2000 	ldr.w	r2, [r9]
 80083c6:	0c24      	lsrs	r4, r4, #16
 80083c8:	0c12      	lsrs	r2, r2, #16
 80083ca:	fb0a 2404 	mla	r4, sl, r4, r2
 80083ce:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80083d2:	b289      	uxth	r1, r1
 80083d4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80083d8:	45f4      	cmp	ip, lr
 80083da:	f849 1b04 	str.w	r1, [r9], #4
 80083de:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80083e2:	d8e4      	bhi.n	80083ae <__multiply+0xaa>
 80083e4:	9901      	ldr	r1, [sp, #4]
 80083e6:	5072      	str	r2, [r6, r1]
 80083e8:	9a03      	ldr	r2, [sp, #12]
 80083ea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80083ee:	3304      	adds	r3, #4
 80083f0:	f1b9 0f00 	cmp.w	r9, #0
 80083f4:	d01f      	beq.n	8008436 <__multiply+0x132>
 80083f6:	6834      	ldr	r4, [r6, #0]
 80083f8:	f105 0114 	add.w	r1, r5, #20
 80083fc:	46b6      	mov	lr, r6
 80083fe:	f04f 0a00 	mov.w	sl, #0
 8008402:	880a      	ldrh	r2, [r1, #0]
 8008404:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008408:	fb09 b202 	mla	r2, r9, r2, fp
 800840c:	4492      	add	sl, r2
 800840e:	b2a4      	uxth	r4, r4
 8008410:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008414:	f84e 4b04 	str.w	r4, [lr], #4
 8008418:	f851 4b04 	ldr.w	r4, [r1], #4
 800841c:	f8be 2000 	ldrh.w	r2, [lr]
 8008420:	0c24      	lsrs	r4, r4, #16
 8008422:	fb09 2404 	mla	r4, r9, r4, r2
 8008426:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800842a:	458c      	cmp	ip, r1
 800842c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008430:	d8e7      	bhi.n	8008402 <__multiply+0xfe>
 8008432:	9a01      	ldr	r2, [sp, #4]
 8008434:	50b4      	str	r4, [r6, r2]
 8008436:	3604      	adds	r6, #4
 8008438:	e7a3      	b.n	8008382 <__multiply+0x7e>
 800843a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1a5      	bne.n	800838e <__multiply+0x8a>
 8008442:	3f01      	subs	r7, #1
 8008444:	e7a1      	b.n	800838a <__multiply+0x86>
 8008446:	bf00      	nop
 8008448:	08009c7c 	.word	0x08009c7c
 800844c:	08009d0c 	.word	0x08009d0c

08008450 <__pow5mult>:
 8008450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008454:	4615      	mov	r5, r2
 8008456:	f012 0203 	ands.w	r2, r2, #3
 800845a:	4606      	mov	r6, r0
 800845c:	460f      	mov	r7, r1
 800845e:	d007      	beq.n	8008470 <__pow5mult+0x20>
 8008460:	4c25      	ldr	r4, [pc, #148]	; (80084f8 <__pow5mult+0xa8>)
 8008462:	3a01      	subs	r2, #1
 8008464:	2300      	movs	r3, #0
 8008466:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800846a:	f7ff fe51 	bl	8008110 <__multadd>
 800846e:	4607      	mov	r7, r0
 8008470:	10ad      	asrs	r5, r5, #2
 8008472:	d03d      	beq.n	80084f0 <__pow5mult+0xa0>
 8008474:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008476:	b97c      	cbnz	r4, 8008498 <__pow5mult+0x48>
 8008478:	2010      	movs	r0, #16
 800847a:	f7ff fdcd 	bl	8008018 <malloc>
 800847e:	4602      	mov	r2, r0
 8008480:	6270      	str	r0, [r6, #36]	; 0x24
 8008482:	b928      	cbnz	r0, 8008490 <__pow5mult+0x40>
 8008484:	4b1d      	ldr	r3, [pc, #116]	; (80084fc <__pow5mult+0xac>)
 8008486:	481e      	ldr	r0, [pc, #120]	; (8008500 <__pow5mult+0xb0>)
 8008488:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800848c:	f000 fce8 	bl	8008e60 <__assert_func>
 8008490:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008494:	6004      	str	r4, [r0, #0]
 8008496:	60c4      	str	r4, [r0, #12]
 8008498:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800849c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80084a0:	b94c      	cbnz	r4, 80084b6 <__pow5mult+0x66>
 80084a2:	f240 2171 	movw	r1, #625	; 0x271
 80084a6:	4630      	mov	r0, r6
 80084a8:	f7ff ff16 	bl	80082d8 <__i2b>
 80084ac:	2300      	movs	r3, #0
 80084ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80084b2:	4604      	mov	r4, r0
 80084b4:	6003      	str	r3, [r0, #0]
 80084b6:	f04f 0900 	mov.w	r9, #0
 80084ba:	07eb      	lsls	r3, r5, #31
 80084bc:	d50a      	bpl.n	80084d4 <__pow5mult+0x84>
 80084be:	4639      	mov	r1, r7
 80084c0:	4622      	mov	r2, r4
 80084c2:	4630      	mov	r0, r6
 80084c4:	f7ff ff1e 	bl	8008304 <__multiply>
 80084c8:	4639      	mov	r1, r7
 80084ca:	4680      	mov	r8, r0
 80084cc:	4630      	mov	r0, r6
 80084ce:	f7ff fdfd 	bl	80080cc <_Bfree>
 80084d2:	4647      	mov	r7, r8
 80084d4:	106d      	asrs	r5, r5, #1
 80084d6:	d00b      	beq.n	80084f0 <__pow5mult+0xa0>
 80084d8:	6820      	ldr	r0, [r4, #0]
 80084da:	b938      	cbnz	r0, 80084ec <__pow5mult+0x9c>
 80084dc:	4622      	mov	r2, r4
 80084de:	4621      	mov	r1, r4
 80084e0:	4630      	mov	r0, r6
 80084e2:	f7ff ff0f 	bl	8008304 <__multiply>
 80084e6:	6020      	str	r0, [r4, #0]
 80084e8:	f8c0 9000 	str.w	r9, [r0]
 80084ec:	4604      	mov	r4, r0
 80084ee:	e7e4      	b.n	80084ba <__pow5mult+0x6a>
 80084f0:	4638      	mov	r0, r7
 80084f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084f6:	bf00      	nop
 80084f8:	08009e60 	.word	0x08009e60
 80084fc:	08009c06 	.word	0x08009c06
 8008500:	08009d0c 	.word	0x08009d0c

08008504 <__lshift>:
 8008504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008508:	460c      	mov	r4, r1
 800850a:	6849      	ldr	r1, [r1, #4]
 800850c:	6923      	ldr	r3, [r4, #16]
 800850e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008512:	68a3      	ldr	r3, [r4, #8]
 8008514:	4607      	mov	r7, r0
 8008516:	4691      	mov	r9, r2
 8008518:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800851c:	f108 0601 	add.w	r6, r8, #1
 8008520:	42b3      	cmp	r3, r6
 8008522:	db0b      	blt.n	800853c <__lshift+0x38>
 8008524:	4638      	mov	r0, r7
 8008526:	f7ff fd91 	bl	800804c <_Balloc>
 800852a:	4605      	mov	r5, r0
 800852c:	b948      	cbnz	r0, 8008542 <__lshift+0x3e>
 800852e:	4602      	mov	r2, r0
 8008530:	4b28      	ldr	r3, [pc, #160]	; (80085d4 <__lshift+0xd0>)
 8008532:	4829      	ldr	r0, [pc, #164]	; (80085d8 <__lshift+0xd4>)
 8008534:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008538:	f000 fc92 	bl	8008e60 <__assert_func>
 800853c:	3101      	adds	r1, #1
 800853e:	005b      	lsls	r3, r3, #1
 8008540:	e7ee      	b.n	8008520 <__lshift+0x1c>
 8008542:	2300      	movs	r3, #0
 8008544:	f100 0114 	add.w	r1, r0, #20
 8008548:	f100 0210 	add.w	r2, r0, #16
 800854c:	4618      	mov	r0, r3
 800854e:	4553      	cmp	r3, sl
 8008550:	db33      	blt.n	80085ba <__lshift+0xb6>
 8008552:	6920      	ldr	r0, [r4, #16]
 8008554:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008558:	f104 0314 	add.w	r3, r4, #20
 800855c:	f019 091f 	ands.w	r9, r9, #31
 8008560:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008564:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008568:	d02b      	beq.n	80085c2 <__lshift+0xbe>
 800856a:	f1c9 0e20 	rsb	lr, r9, #32
 800856e:	468a      	mov	sl, r1
 8008570:	2200      	movs	r2, #0
 8008572:	6818      	ldr	r0, [r3, #0]
 8008574:	fa00 f009 	lsl.w	r0, r0, r9
 8008578:	4302      	orrs	r2, r0
 800857a:	f84a 2b04 	str.w	r2, [sl], #4
 800857e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008582:	459c      	cmp	ip, r3
 8008584:	fa22 f20e 	lsr.w	r2, r2, lr
 8008588:	d8f3      	bhi.n	8008572 <__lshift+0x6e>
 800858a:	ebac 0304 	sub.w	r3, ip, r4
 800858e:	3b15      	subs	r3, #21
 8008590:	f023 0303 	bic.w	r3, r3, #3
 8008594:	3304      	adds	r3, #4
 8008596:	f104 0015 	add.w	r0, r4, #21
 800859a:	4584      	cmp	ip, r0
 800859c:	bf38      	it	cc
 800859e:	2304      	movcc	r3, #4
 80085a0:	50ca      	str	r2, [r1, r3]
 80085a2:	b10a      	cbz	r2, 80085a8 <__lshift+0xa4>
 80085a4:	f108 0602 	add.w	r6, r8, #2
 80085a8:	3e01      	subs	r6, #1
 80085aa:	4638      	mov	r0, r7
 80085ac:	612e      	str	r6, [r5, #16]
 80085ae:	4621      	mov	r1, r4
 80085b0:	f7ff fd8c 	bl	80080cc <_Bfree>
 80085b4:	4628      	mov	r0, r5
 80085b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80085be:	3301      	adds	r3, #1
 80085c0:	e7c5      	b.n	800854e <__lshift+0x4a>
 80085c2:	3904      	subs	r1, #4
 80085c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80085c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80085cc:	459c      	cmp	ip, r3
 80085ce:	d8f9      	bhi.n	80085c4 <__lshift+0xc0>
 80085d0:	e7ea      	b.n	80085a8 <__lshift+0xa4>
 80085d2:	bf00      	nop
 80085d4:	08009c7c 	.word	0x08009c7c
 80085d8:	08009d0c 	.word	0x08009d0c

080085dc <__mcmp>:
 80085dc:	b530      	push	{r4, r5, lr}
 80085de:	6902      	ldr	r2, [r0, #16]
 80085e0:	690c      	ldr	r4, [r1, #16]
 80085e2:	1b12      	subs	r2, r2, r4
 80085e4:	d10e      	bne.n	8008604 <__mcmp+0x28>
 80085e6:	f100 0314 	add.w	r3, r0, #20
 80085ea:	3114      	adds	r1, #20
 80085ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80085f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80085f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80085f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80085fc:	42a5      	cmp	r5, r4
 80085fe:	d003      	beq.n	8008608 <__mcmp+0x2c>
 8008600:	d305      	bcc.n	800860e <__mcmp+0x32>
 8008602:	2201      	movs	r2, #1
 8008604:	4610      	mov	r0, r2
 8008606:	bd30      	pop	{r4, r5, pc}
 8008608:	4283      	cmp	r3, r0
 800860a:	d3f3      	bcc.n	80085f4 <__mcmp+0x18>
 800860c:	e7fa      	b.n	8008604 <__mcmp+0x28>
 800860e:	f04f 32ff 	mov.w	r2, #4294967295
 8008612:	e7f7      	b.n	8008604 <__mcmp+0x28>

08008614 <__mdiff>:
 8008614:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008618:	460c      	mov	r4, r1
 800861a:	4606      	mov	r6, r0
 800861c:	4611      	mov	r1, r2
 800861e:	4620      	mov	r0, r4
 8008620:	4617      	mov	r7, r2
 8008622:	f7ff ffdb 	bl	80085dc <__mcmp>
 8008626:	1e05      	subs	r5, r0, #0
 8008628:	d110      	bne.n	800864c <__mdiff+0x38>
 800862a:	4629      	mov	r1, r5
 800862c:	4630      	mov	r0, r6
 800862e:	f7ff fd0d 	bl	800804c <_Balloc>
 8008632:	b930      	cbnz	r0, 8008642 <__mdiff+0x2e>
 8008634:	4b39      	ldr	r3, [pc, #228]	; (800871c <__mdiff+0x108>)
 8008636:	4602      	mov	r2, r0
 8008638:	f240 2132 	movw	r1, #562	; 0x232
 800863c:	4838      	ldr	r0, [pc, #224]	; (8008720 <__mdiff+0x10c>)
 800863e:	f000 fc0f 	bl	8008e60 <__assert_func>
 8008642:	2301      	movs	r3, #1
 8008644:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008648:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800864c:	bfa4      	itt	ge
 800864e:	463b      	movge	r3, r7
 8008650:	4627      	movge	r7, r4
 8008652:	4630      	mov	r0, r6
 8008654:	6879      	ldr	r1, [r7, #4]
 8008656:	bfa6      	itte	ge
 8008658:	461c      	movge	r4, r3
 800865a:	2500      	movge	r5, #0
 800865c:	2501      	movlt	r5, #1
 800865e:	f7ff fcf5 	bl	800804c <_Balloc>
 8008662:	b920      	cbnz	r0, 800866e <__mdiff+0x5a>
 8008664:	4b2d      	ldr	r3, [pc, #180]	; (800871c <__mdiff+0x108>)
 8008666:	4602      	mov	r2, r0
 8008668:	f44f 7110 	mov.w	r1, #576	; 0x240
 800866c:	e7e6      	b.n	800863c <__mdiff+0x28>
 800866e:	693e      	ldr	r6, [r7, #16]
 8008670:	60c5      	str	r5, [r0, #12]
 8008672:	6925      	ldr	r5, [r4, #16]
 8008674:	f107 0114 	add.w	r1, r7, #20
 8008678:	f104 0914 	add.w	r9, r4, #20
 800867c:	f100 0e14 	add.w	lr, r0, #20
 8008680:	f107 0210 	add.w	r2, r7, #16
 8008684:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008688:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800868c:	46f2      	mov	sl, lr
 800868e:	2700      	movs	r7, #0
 8008690:	f859 3b04 	ldr.w	r3, [r9], #4
 8008694:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008698:	fa1f f883 	uxth.w	r8, r3
 800869c:	fa17 f78b 	uxtah	r7, r7, fp
 80086a0:	0c1b      	lsrs	r3, r3, #16
 80086a2:	eba7 0808 	sub.w	r8, r7, r8
 80086a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80086aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80086ae:	fa1f f888 	uxth.w	r8, r8
 80086b2:	141f      	asrs	r7, r3, #16
 80086b4:	454d      	cmp	r5, r9
 80086b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80086ba:	f84a 3b04 	str.w	r3, [sl], #4
 80086be:	d8e7      	bhi.n	8008690 <__mdiff+0x7c>
 80086c0:	1b2b      	subs	r3, r5, r4
 80086c2:	3b15      	subs	r3, #21
 80086c4:	f023 0303 	bic.w	r3, r3, #3
 80086c8:	3304      	adds	r3, #4
 80086ca:	3415      	adds	r4, #21
 80086cc:	42a5      	cmp	r5, r4
 80086ce:	bf38      	it	cc
 80086d0:	2304      	movcc	r3, #4
 80086d2:	4419      	add	r1, r3
 80086d4:	4473      	add	r3, lr
 80086d6:	469e      	mov	lr, r3
 80086d8:	460d      	mov	r5, r1
 80086da:	4565      	cmp	r5, ip
 80086dc:	d30e      	bcc.n	80086fc <__mdiff+0xe8>
 80086de:	f10c 0203 	add.w	r2, ip, #3
 80086e2:	1a52      	subs	r2, r2, r1
 80086e4:	f022 0203 	bic.w	r2, r2, #3
 80086e8:	3903      	subs	r1, #3
 80086ea:	458c      	cmp	ip, r1
 80086ec:	bf38      	it	cc
 80086ee:	2200      	movcc	r2, #0
 80086f0:	441a      	add	r2, r3
 80086f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80086f6:	b17b      	cbz	r3, 8008718 <__mdiff+0x104>
 80086f8:	6106      	str	r6, [r0, #16]
 80086fa:	e7a5      	b.n	8008648 <__mdiff+0x34>
 80086fc:	f855 8b04 	ldr.w	r8, [r5], #4
 8008700:	fa17 f488 	uxtah	r4, r7, r8
 8008704:	1422      	asrs	r2, r4, #16
 8008706:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800870a:	b2a4      	uxth	r4, r4
 800870c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008710:	f84e 4b04 	str.w	r4, [lr], #4
 8008714:	1417      	asrs	r7, r2, #16
 8008716:	e7e0      	b.n	80086da <__mdiff+0xc6>
 8008718:	3e01      	subs	r6, #1
 800871a:	e7ea      	b.n	80086f2 <__mdiff+0xde>
 800871c:	08009c7c 	.word	0x08009c7c
 8008720:	08009d0c 	.word	0x08009d0c

08008724 <__ulp>:
 8008724:	b082      	sub	sp, #8
 8008726:	ed8d 0b00 	vstr	d0, [sp]
 800872a:	9b01      	ldr	r3, [sp, #4]
 800872c:	4912      	ldr	r1, [pc, #72]	; (8008778 <__ulp+0x54>)
 800872e:	4019      	ands	r1, r3
 8008730:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008734:	2900      	cmp	r1, #0
 8008736:	dd05      	ble.n	8008744 <__ulp+0x20>
 8008738:	2200      	movs	r2, #0
 800873a:	460b      	mov	r3, r1
 800873c:	ec43 2b10 	vmov	d0, r2, r3
 8008740:	b002      	add	sp, #8
 8008742:	4770      	bx	lr
 8008744:	4249      	negs	r1, r1
 8008746:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800874a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800874e:	f04f 0200 	mov.w	r2, #0
 8008752:	f04f 0300 	mov.w	r3, #0
 8008756:	da04      	bge.n	8008762 <__ulp+0x3e>
 8008758:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800875c:	fa41 f300 	asr.w	r3, r1, r0
 8008760:	e7ec      	b.n	800873c <__ulp+0x18>
 8008762:	f1a0 0114 	sub.w	r1, r0, #20
 8008766:	291e      	cmp	r1, #30
 8008768:	bfda      	itte	le
 800876a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800876e:	fa20 f101 	lsrle.w	r1, r0, r1
 8008772:	2101      	movgt	r1, #1
 8008774:	460a      	mov	r2, r1
 8008776:	e7e1      	b.n	800873c <__ulp+0x18>
 8008778:	7ff00000 	.word	0x7ff00000

0800877c <__b2d>:
 800877c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800877e:	6905      	ldr	r5, [r0, #16]
 8008780:	f100 0714 	add.w	r7, r0, #20
 8008784:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008788:	1f2e      	subs	r6, r5, #4
 800878a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800878e:	4620      	mov	r0, r4
 8008790:	f7ff fd52 	bl	8008238 <__hi0bits>
 8008794:	f1c0 0320 	rsb	r3, r0, #32
 8008798:	280a      	cmp	r0, #10
 800879a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008818 <__b2d+0x9c>
 800879e:	600b      	str	r3, [r1, #0]
 80087a0:	dc14      	bgt.n	80087cc <__b2d+0x50>
 80087a2:	f1c0 0e0b 	rsb	lr, r0, #11
 80087a6:	fa24 f10e 	lsr.w	r1, r4, lr
 80087aa:	42b7      	cmp	r7, r6
 80087ac:	ea41 030c 	orr.w	r3, r1, ip
 80087b0:	bf34      	ite	cc
 80087b2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80087b6:	2100      	movcs	r1, #0
 80087b8:	3015      	adds	r0, #21
 80087ba:	fa04 f000 	lsl.w	r0, r4, r0
 80087be:	fa21 f10e 	lsr.w	r1, r1, lr
 80087c2:	ea40 0201 	orr.w	r2, r0, r1
 80087c6:	ec43 2b10 	vmov	d0, r2, r3
 80087ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087cc:	42b7      	cmp	r7, r6
 80087ce:	bf3a      	itte	cc
 80087d0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80087d4:	f1a5 0608 	subcc.w	r6, r5, #8
 80087d8:	2100      	movcs	r1, #0
 80087da:	380b      	subs	r0, #11
 80087dc:	d017      	beq.n	800880e <__b2d+0x92>
 80087de:	f1c0 0c20 	rsb	ip, r0, #32
 80087e2:	fa04 f500 	lsl.w	r5, r4, r0
 80087e6:	42be      	cmp	r6, r7
 80087e8:	fa21 f40c 	lsr.w	r4, r1, ip
 80087ec:	ea45 0504 	orr.w	r5, r5, r4
 80087f0:	bf8c      	ite	hi
 80087f2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80087f6:	2400      	movls	r4, #0
 80087f8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80087fc:	fa01 f000 	lsl.w	r0, r1, r0
 8008800:	fa24 f40c 	lsr.w	r4, r4, ip
 8008804:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008808:	ea40 0204 	orr.w	r2, r0, r4
 800880c:	e7db      	b.n	80087c6 <__b2d+0x4a>
 800880e:	ea44 030c 	orr.w	r3, r4, ip
 8008812:	460a      	mov	r2, r1
 8008814:	e7d7      	b.n	80087c6 <__b2d+0x4a>
 8008816:	bf00      	nop
 8008818:	3ff00000 	.word	0x3ff00000

0800881c <__d2b>:
 800881c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008820:	4689      	mov	r9, r1
 8008822:	2101      	movs	r1, #1
 8008824:	ec57 6b10 	vmov	r6, r7, d0
 8008828:	4690      	mov	r8, r2
 800882a:	f7ff fc0f 	bl	800804c <_Balloc>
 800882e:	4604      	mov	r4, r0
 8008830:	b930      	cbnz	r0, 8008840 <__d2b+0x24>
 8008832:	4602      	mov	r2, r0
 8008834:	4b25      	ldr	r3, [pc, #148]	; (80088cc <__d2b+0xb0>)
 8008836:	4826      	ldr	r0, [pc, #152]	; (80088d0 <__d2b+0xb4>)
 8008838:	f240 310a 	movw	r1, #778	; 0x30a
 800883c:	f000 fb10 	bl	8008e60 <__assert_func>
 8008840:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008844:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008848:	bb35      	cbnz	r5, 8008898 <__d2b+0x7c>
 800884a:	2e00      	cmp	r6, #0
 800884c:	9301      	str	r3, [sp, #4]
 800884e:	d028      	beq.n	80088a2 <__d2b+0x86>
 8008850:	4668      	mov	r0, sp
 8008852:	9600      	str	r6, [sp, #0]
 8008854:	f7ff fd10 	bl	8008278 <__lo0bits>
 8008858:	9900      	ldr	r1, [sp, #0]
 800885a:	b300      	cbz	r0, 800889e <__d2b+0x82>
 800885c:	9a01      	ldr	r2, [sp, #4]
 800885e:	f1c0 0320 	rsb	r3, r0, #32
 8008862:	fa02 f303 	lsl.w	r3, r2, r3
 8008866:	430b      	orrs	r3, r1
 8008868:	40c2      	lsrs	r2, r0
 800886a:	6163      	str	r3, [r4, #20]
 800886c:	9201      	str	r2, [sp, #4]
 800886e:	9b01      	ldr	r3, [sp, #4]
 8008870:	61a3      	str	r3, [r4, #24]
 8008872:	2b00      	cmp	r3, #0
 8008874:	bf14      	ite	ne
 8008876:	2202      	movne	r2, #2
 8008878:	2201      	moveq	r2, #1
 800887a:	6122      	str	r2, [r4, #16]
 800887c:	b1d5      	cbz	r5, 80088b4 <__d2b+0x98>
 800887e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008882:	4405      	add	r5, r0
 8008884:	f8c9 5000 	str.w	r5, [r9]
 8008888:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800888c:	f8c8 0000 	str.w	r0, [r8]
 8008890:	4620      	mov	r0, r4
 8008892:	b003      	add	sp, #12
 8008894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008898:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800889c:	e7d5      	b.n	800884a <__d2b+0x2e>
 800889e:	6161      	str	r1, [r4, #20]
 80088a0:	e7e5      	b.n	800886e <__d2b+0x52>
 80088a2:	a801      	add	r0, sp, #4
 80088a4:	f7ff fce8 	bl	8008278 <__lo0bits>
 80088a8:	9b01      	ldr	r3, [sp, #4]
 80088aa:	6163      	str	r3, [r4, #20]
 80088ac:	2201      	movs	r2, #1
 80088ae:	6122      	str	r2, [r4, #16]
 80088b0:	3020      	adds	r0, #32
 80088b2:	e7e3      	b.n	800887c <__d2b+0x60>
 80088b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80088b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80088bc:	f8c9 0000 	str.w	r0, [r9]
 80088c0:	6918      	ldr	r0, [r3, #16]
 80088c2:	f7ff fcb9 	bl	8008238 <__hi0bits>
 80088c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80088ca:	e7df      	b.n	800888c <__d2b+0x70>
 80088cc:	08009c7c 	.word	0x08009c7c
 80088d0:	08009d0c 	.word	0x08009d0c

080088d4 <__ratio>:
 80088d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d8:	4688      	mov	r8, r1
 80088da:	4669      	mov	r1, sp
 80088dc:	4681      	mov	r9, r0
 80088de:	f7ff ff4d 	bl	800877c <__b2d>
 80088e2:	a901      	add	r1, sp, #4
 80088e4:	4640      	mov	r0, r8
 80088e6:	ec55 4b10 	vmov	r4, r5, d0
 80088ea:	f7ff ff47 	bl	800877c <__b2d>
 80088ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80088f2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80088f6:	eba3 0c02 	sub.w	ip, r3, r2
 80088fa:	e9dd 3200 	ldrd	r3, r2, [sp]
 80088fe:	1a9b      	subs	r3, r3, r2
 8008900:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008904:	ec51 0b10 	vmov	r0, r1, d0
 8008908:	2b00      	cmp	r3, #0
 800890a:	bfd6      	itet	le
 800890c:	460a      	movle	r2, r1
 800890e:	462a      	movgt	r2, r5
 8008910:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008914:	468b      	mov	fp, r1
 8008916:	462f      	mov	r7, r5
 8008918:	bfd4      	ite	le
 800891a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800891e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008922:	4620      	mov	r0, r4
 8008924:	ee10 2a10 	vmov	r2, s0
 8008928:	465b      	mov	r3, fp
 800892a:	4639      	mov	r1, r7
 800892c:	f7f7 ff8e 	bl	800084c <__aeabi_ddiv>
 8008930:	ec41 0b10 	vmov	d0, r0, r1
 8008934:	b003      	add	sp, #12
 8008936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800893a <__copybits>:
 800893a:	3901      	subs	r1, #1
 800893c:	b570      	push	{r4, r5, r6, lr}
 800893e:	1149      	asrs	r1, r1, #5
 8008940:	6914      	ldr	r4, [r2, #16]
 8008942:	3101      	adds	r1, #1
 8008944:	f102 0314 	add.w	r3, r2, #20
 8008948:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800894c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008950:	1f05      	subs	r5, r0, #4
 8008952:	42a3      	cmp	r3, r4
 8008954:	d30c      	bcc.n	8008970 <__copybits+0x36>
 8008956:	1aa3      	subs	r3, r4, r2
 8008958:	3b11      	subs	r3, #17
 800895a:	f023 0303 	bic.w	r3, r3, #3
 800895e:	3211      	adds	r2, #17
 8008960:	42a2      	cmp	r2, r4
 8008962:	bf88      	it	hi
 8008964:	2300      	movhi	r3, #0
 8008966:	4418      	add	r0, r3
 8008968:	2300      	movs	r3, #0
 800896a:	4288      	cmp	r0, r1
 800896c:	d305      	bcc.n	800897a <__copybits+0x40>
 800896e:	bd70      	pop	{r4, r5, r6, pc}
 8008970:	f853 6b04 	ldr.w	r6, [r3], #4
 8008974:	f845 6f04 	str.w	r6, [r5, #4]!
 8008978:	e7eb      	b.n	8008952 <__copybits+0x18>
 800897a:	f840 3b04 	str.w	r3, [r0], #4
 800897e:	e7f4      	b.n	800896a <__copybits+0x30>

08008980 <__any_on>:
 8008980:	f100 0214 	add.w	r2, r0, #20
 8008984:	6900      	ldr	r0, [r0, #16]
 8008986:	114b      	asrs	r3, r1, #5
 8008988:	4298      	cmp	r0, r3
 800898a:	b510      	push	{r4, lr}
 800898c:	db11      	blt.n	80089b2 <__any_on+0x32>
 800898e:	dd0a      	ble.n	80089a6 <__any_on+0x26>
 8008990:	f011 011f 	ands.w	r1, r1, #31
 8008994:	d007      	beq.n	80089a6 <__any_on+0x26>
 8008996:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800899a:	fa24 f001 	lsr.w	r0, r4, r1
 800899e:	fa00 f101 	lsl.w	r1, r0, r1
 80089a2:	428c      	cmp	r4, r1
 80089a4:	d10b      	bne.n	80089be <__any_on+0x3e>
 80089a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d803      	bhi.n	80089b6 <__any_on+0x36>
 80089ae:	2000      	movs	r0, #0
 80089b0:	bd10      	pop	{r4, pc}
 80089b2:	4603      	mov	r3, r0
 80089b4:	e7f7      	b.n	80089a6 <__any_on+0x26>
 80089b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80089ba:	2900      	cmp	r1, #0
 80089bc:	d0f5      	beq.n	80089aa <__any_on+0x2a>
 80089be:	2001      	movs	r0, #1
 80089c0:	e7f6      	b.n	80089b0 <__any_on+0x30>

080089c2 <_calloc_r>:
 80089c2:	b513      	push	{r0, r1, r4, lr}
 80089c4:	434a      	muls	r2, r1
 80089c6:	4611      	mov	r1, r2
 80089c8:	9201      	str	r2, [sp, #4]
 80089ca:	f000 f859 	bl	8008a80 <_malloc_r>
 80089ce:	4604      	mov	r4, r0
 80089d0:	b118      	cbz	r0, 80089da <_calloc_r+0x18>
 80089d2:	9a01      	ldr	r2, [sp, #4]
 80089d4:	2100      	movs	r1, #0
 80089d6:	f7fc fbc7 	bl	8005168 <memset>
 80089da:	4620      	mov	r0, r4
 80089dc:	b002      	add	sp, #8
 80089de:	bd10      	pop	{r4, pc}

080089e0 <_free_r>:
 80089e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089e2:	2900      	cmp	r1, #0
 80089e4:	d048      	beq.n	8008a78 <_free_r+0x98>
 80089e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089ea:	9001      	str	r0, [sp, #4]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f1a1 0404 	sub.w	r4, r1, #4
 80089f2:	bfb8      	it	lt
 80089f4:	18e4      	addlt	r4, r4, r3
 80089f6:	f000 fa7d 	bl	8008ef4 <__malloc_lock>
 80089fa:	4a20      	ldr	r2, [pc, #128]	; (8008a7c <_free_r+0x9c>)
 80089fc:	9801      	ldr	r0, [sp, #4]
 80089fe:	6813      	ldr	r3, [r2, #0]
 8008a00:	4615      	mov	r5, r2
 8008a02:	b933      	cbnz	r3, 8008a12 <_free_r+0x32>
 8008a04:	6063      	str	r3, [r4, #4]
 8008a06:	6014      	str	r4, [r2, #0]
 8008a08:	b003      	add	sp, #12
 8008a0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a0e:	f000 ba77 	b.w	8008f00 <__malloc_unlock>
 8008a12:	42a3      	cmp	r3, r4
 8008a14:	d90b      	bls.n	8008a2e <_free_r+0x4e>
 8008a16:	6821      	ldr	r1, [r4, #0]
 8008a18:	1862      	adds	r2, r4, r1
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	bf04      	itt	eq
 8008a1e:	681a      	ldreq	r2, [r3, #0]
 8008a20:	685b      	ldreq	r3, [r3, #4]
 8008a22:	6063      	str	r3, [r4, #4]
 8008a24:	bf04      	itt	eq
 8008a26:	1852      	addeq	r2, r2, r1
 8008a28:	6022      	streq	r2, [r4, #0]
 8008a2a:	602c      	str	r4, [r5, #0]
 8008a2c:	e7ec      	b.n	8008a08 <_free_r+0x28>
 8008a2e:	461a      	mov	r2, r3
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	b10b      	cbz	r3, 8008a38 <_free_r+0x58>
 8008a34:	42a3      	cmp	r3, r4
 8008a36:	d9fa      	bls.n	8008a2e <_free_r+0x4e>
 8008a38:	6811      	ldr	r1, [r2, #0]
 8008a3a:	1855      	adds	r5, r2, r1
 8008a3c:	42a5      	cmp	r5, r4
 8008a3e:	d10b      	bne.n	8008a58 <_free_r+0x78>
 8008a40:	6824      	ldr	r4, [r4, #0]
 8008a42:	4421      	add	r1, r4
 8008a44:	1854      	adds	r4, r2, r1
 8008a46:	42a3      	cmp	r3, r4
 8008a48:	6011      	str	r1, [r2, #0]
 8008a4a:	d1dd      	bne.n	8008a08 <_free_r+0x28>
 8008a4c:	681c      	ldr	r4, [r3, #0]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	6053      	str	r3, [r2, #4]
 8008a52:	4421      	add	r1, r4
 8008a54:	6011      	str	r1, [r2, #0]
 8008a56:	e7d7      	b.n	8008a08 <_free_r+0x28>
 8008a58:	d902      	bls.n	8008a60 <_free_r+0x80>
 8008a5a:	230c      	movs	r3, #12
 8008a5c:	6003      	str	r3, [r0, #0]
 8008a5e:	e7d3      	b.n	8008a08 <_free_r+0x28>
 8008a60:	6825      	ldr	r5, [r4, #0]
 8008a62:	1961      	adds	r1, r4, r5
 8008a64:	428b      	cmp	r3, r1
 8008a66:	bf04      	itt	eq
 8008a68:	6819      	ldreq	r1, [r3, #0]
 8008a6a:	685b      	ldreq	r3, [r3, #4]
 8008a6c:	6063      	str	r3, [r4, #4]
 8008a6e:	bf04      	itt	eq
 8008a70:	1949      	addeq	r1, r1, r5
 8008a72:	6021      	streq	r1, [r4, #0]
 8008a74:	6054      	str	r4, [r2, #4]
 8008a76:	e7c7      	b.n	8008a08 <_free_r+0x28>
 8008a78:	b003      	add	sp, #12
 8008a7a:	bd30      	pop	{r4, r5, pc}
 8008a7c:	20000a14 	.word	0x20000a14

08008a80 <_malloc_r>:
 8008a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a82:	1ccd      	adds	r5, r1, #3
 8008a84:	f025 0503 	bic.w	r5, r5, #3
 8008a88:	3508      	adds	r5, #8
 8008a8a:	2d0c      	cmp	r5, #12
 8008a8c:	bf38      	it	cc
 8008a8e:	250c      	movcc	r5, #12
 8008a90:	2d00      	cmp	r5, #0
 8008a92:	4606      	mov	r6, r0
 8008a94:	db01      	blt.n	8008a9a <_malloc_r+0x1a>
 8008a96:	42a9      	cmp	r1, r5
 8008a98:	d903      	bls.n	8008aa2 <_malloc_r+0x22>
 8008a9a:	230c      	movs	r3, #12
 8008a9c:	6033      	str	r3, [r6, #0]
 8008a9e:	2000      	movs	r0, #0
 8008aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008aa2:	f000 fa27 	bl	8008ef4 <__malloc_lock>
 8008aa6:	4921      	ldr	r1, [pc, #132]	; (8008b2c <_malloc_r+0xac>)
 8008aa8:	680a      	ldr	r2, [r1, #0]
 8008aaa:	4614      	mov	r4, r2
 8008aac:	b99c      	cbnz	r4, 8008ad6 <_malloc_r+0x56>
 8008aae:	4f20      	ldr	r7, [pc, #128]	; (8008b30 <_malloc_r+0xb0>)
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	b923      	cbnz	r3, 8008abe <_malloc_r+0x3e>
 8008ab4:	4621      	mov	r1, r4
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	f000 f9a2 	bl	8008e00 <_sbrk_r>
 8008abc:	6038      	str	r0, [r7, #0]
 8008abe:	4629      	mov	r1, r5
 8008ac0:	4630      	mov	r0, r6
 8008ac2:	f000 f99d 	bl	8008e00 <_sbrk_r>
 8008ac6:	1c43      	adds	r3, r0, #1
 8008ac8:	d123      	bne.n	8008b12 <_malloc_r+0x92>
 8008aca:	230c      	movs	r3, #12
 8008acc:	6033      	str	r3, [r6, #0]
 8008ace:	4630      	mov	r0, r6
 8008ad0:	f000 fa16 	bl	8008f00 <__malloc_unlock>
 8008ad4:	e7e3      	b.n	8008a9e <_malloc_r+0x1e>
 8008ad6:	6823      	ldr	r3, [r4, #0]
 8008ad8:	1b5b      	subs	r3, r3, r5
 8008ada:	d417      	bmi.n	8008b0c <_malloc_r+0x8c>
 8008adc:	2b0b      	cmp	r3, #11
 8008ade:	d903      	bls.n	8008ae8 <_malloc_r+0x68>
 8008ae0:	6023      	str	r3, [r4, #0]
 8008ae2:	441c      	add	r4, r3
 8008ae4:	6025      	str	r5, [r4, #0]
 8008ae6:	e004      	b.n	8008af2 <_malloc_r+0x72>
 8008ae8:	6863      	ldr	r3, [r4, #4]
 8008aea:	42a2      	cmp	r2, r4
 8008aec:	bf0c      	ite	eq
 8008aee:	600b      	streq	r3, [r1, #0]
 8008af0:	6053      	strne	r3, [r2, #4]
 8008af2:	4630      	mov	r0, r6
 8008af4:	f000 fa04 	bl	8008f00 <__malloc_unlock>
 8008af8:	f104 000b 	add.w	r0, r4, #11
 8008afc:	1d23      	adds	r3, r4, #4
 8008afe:	f020 0007 	bic.w	r0, r0, #7
 8008b02:	1ac2      	subs	r2, r0, r3
 8008b04:	d0cc      	beq.n	8008aa0 <_malloc_r+0x20>
 8008b06:	1a1b      	subs	r3, r3, r0
 8008b08:	50a3      	str	r3, [r4, r2]
 8008b0a:	e7c9      	b.n	8008aa0 <_malloc_r+0x20>
 8008b0c:	4622      	mov	r2, r4
 8008b0e:	6864      	ldr	r4, [r4, #4]
 8008b10:	e7cc      	b.n	8008aac <_malloc_r+0x2c>
 8008b12:	1cc4      	adds	r4, r0, #3
 8008b14:	f024 0403 	bic.w	r4, r4, #3
 8008b18:	42a0      	cmp	r0, r4
 8008b1a:	d0e3      	beq.n	8008ae4 <_malloc_r+0x64>
 8008b1c:	1a21      	subs	r1, r4, r0
 8008b1e:	4630      	mov	r0, r6
 8008b20:	f000 f96e 	bl	8008e00 <_sbrk_r>
 8008b24:	3001      	adds	r0, #1
 8008b26:	d1dd      	bne.n	8008ae4 <_malloc_r+0x64>
 8008b28:	e7cf      	b.n	8008aca <_malloc_r+0x4a>
 8008b2a:	bf00      	nop
 8008b2c:	20000a14 	.word	0x20000a14
 8008b30:	20000a18 	.word	0x20000a18

08008b34 <__ssputs_r>:
 8008b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b38:	688e      	ldr	r6, [r1, #8]
 8008b3a:	429e      	cmp	r6, r3
 8008b3c:	4682      	mov	sl, r0
 8008b3e:	460c      	mov	r4, r1
 8008b40:	4690      	mov	r8, r2
 8008b42:	461f      	mov	r7, r3
 8008b44:	d838      	bhi.n	8008bb8 <__ssputs_r+0x84>
 8008b46:	898a      	ldrh	r2, [r1, #12]
 8008b48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b4c:	d032      	beq.n	8008bb4 <__ssputs_r+0x80>
 8008b4e:	6825      	ldr	r5, [r4, #0]
 8008b50:	6909      	ldr	r1, [r1, #16]
 8008b52:	eba5 0901 	sub.w	r9, r5, r1
 8008b56:	6965      	ldr	r5, [r4, #20]
 8008b58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b60:	3301      	adds	r3, #1
 8008b62:	444b      	add	r3, r9
 8008b64:	106d      	asrs	r5, r5, #1
 8008b66:	429d      	cmp	r5, r3
 8008b68:	bf38      	it	cc
 8008b6a:	461d      	movcc	r5, r3
 8008b6c:	0553      	lsls	r3, r2, #21
 8008b6e:	d531      	bpl.n	8008bd4 <__ssputs_r+0xa0>
 8008b70:	4629      	mov	r1, r5
 8008b72:	f7ff ff85 	bl	8008a80 <_malloc_r>
 8008b76:	4606      	mov	r6, r0
 8008b78:	b950      	cbnz	r0, 8008b90 <__ssputs_r+0x5c>
 8008b7a:	230c      	movs	r3, #12
 8008b7c:	f8ca 3000 	str.w	r3, [sl]
 8008b80:	89a3      	ldrh	r3, [r4, #12]
 8008b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b86:	81a3      	strh	r3, [r4, #12]
 8008b88:	f04f 30ff 	mov.w	r0, #4294967295
 8008b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b90:	6921      	ldr	r1, [r4, #16]
 8008b92:	464a      	mov	r2, r9
 8008b94:	f7fc fada 	bl	800514c <memcpy>
 8008b98:	89a3      	ldrh	r3, [r4, #12]
 8008b9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ba2:	81a3      	strh	r3, [r4, #12]
 8008ba4:	6126      	str	r6, [r4, #16]
 8008ba6:	6165      	str	r5, [r4, #20]
 8008ba8:	444e      	add	r6, r9
 8008baa:	eba5 0509 	sub.w	r5, r5, r9
 8008bae:	6026      	str	r6, [r4, #0]
 8008bb0:	60a5      	str	r5, [r4, #8]
 8008bb2:	463e      	mov	r6, r7
 8008bb4:	42be      	cmp	r6, r7
 8008bb6:	d900      	bls.n	8008bba <__ssputs_r+0x86>
 8008bb8:	463e      	mov	r6, r7
 8008bba:	4632      	mov	r2, r6
 8008bbc:	6820      	ldr	r0, [r4, #0]
 8008bbe:	4641      	mov	r1, r8
 8008bc0:	f000 f97e 	bl	8008ec0 <memmove>
 8008bc4:	68a3      	ldr	r3, [r4, #8]
 8008bc6:	6822      	ldr	r2, [r4, #0]
 8008bc8:	1b9b      	subs	r3, r3, r6
 8008bca:	4432      	add	r2, r6
 8008bcc:	60a3      	str	r3, [r4, #8]
 8008bce:	6022      	str	r2, [r4, #0]
 8008bd0:	2000      	movs	r0, #0
 8008bd2:	e7db      	b.n	8008b8c <__ssputs_r+0x58>
 8008bd4:	462a      	mov	r2, r5
 8008bd6:	f000 f999 	bl	8008f0c <_realloc_r>
 8008bda:	4606      	mov	r6, r0
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	d1e1      	bne.n	8008ba4 <__ssputs_r+0x70>
 8008be0:	6921      	ldr	r1, [r4, #16]
 8008be2:	4650      	mov	r0, sl
 8008be4:	f7ff fefc 	bl	80089e0 <_free_r>
 8008be8:	e7c7      	b.n	8008b7a <__ssputs_r+0x46>
	...

08008bec <_svfiprintf_r>:
 8008bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf0:	4698      	mov	r8, r3
 8008bf2:	898b      	ldrh	r3, [r1, #12]
 8008bf4:	061b      	lsls	r3, r3, #24
 8008bf6:	b09d      	sub	sp, #116	; 0x74
 8008bf8:	4607      	mov	r7, r0
 8008bfa:	460d      	mov	r5, r1
 8008bfc:	4614      	mov	r4, r2
 8008bfe:	d50e      	bpl.n	8008c1e <_svfiprintf_r+0x32>
 8008c00:	690b      	ldr	r3, [r1, #16]
 8008c02:	b963      	cbnz	r3, 8008c1e <_svfiprintf_r+0x32>
 8008c04:	2140      	movs	r1, #64	; 0x40
 8008c06:	f7ff ff3b 	bl	8008a80 <_malloc_r>
 8008c0a:	6028      	str	r0, [r5, #0]
 8008c0c:	6128      	str	r0, [r5, #16]
 8008c0e:	b920      	cbnz	r0, 8008c1a <_svfiprintf_r+0x2e>
 8008c10:	230c      	movs	r3, #12
 8008c12:	603b      	str	r3, [r7, #0]
 8008c14:	f04f 30ff 	mov.w	r0, #4294967295
 8008c18:	e0d1      	b.n	8008dbe <_svfiprintf_r+0x1d2>
 8008c1a:	2340      	movs	r3, #64	; 0x40
 8008c1c:	616b      	str	r3, [r5, #20]
 8008c1e:	2300      	movs	r3, #0
 8008c20:	9309      	str	r3, [sp, #36]	; 0x24
 8008c22:	2320      	movs	r3, #32
 8008c24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c28:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c2c:	2330      	movs	r3, #48	; 0x30
 8008c2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008dd8 <_svfiprintf_r+0x1ec>
 8008c32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c36:	f04f 0901 	mov.w	r9, #1
 8008c3a:	4623      	mov	r3, r4
 8008c3c:	469a      	mov	sl, r3
 8008c3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c42:	b10a      	cbz	r2, 8008c48 <_svfiprintf_r+0x5c>
 8008c44:	2a25      	cmp	r2, #37	; 0x25
 8008c46:	d1f9      	bne.n	8008c3c <_svfiprintf_r+0x50>
 8008c48:	ebba 0b04 	subs.w	fp, sl, r4
 8008c4c:	d00b      	beq.n	8008c66 <_svfiprintf_r+0x7a>
 8008c4e:	465b      	mov	r3, fp
 8008c50:	4622      	mov	r2, r4
 8008c52:	4629      	mov	r1, r5
 8008c54:	4638      	mov	r0, r7
 8008c56:	f7ff ff6d 	bl	8008b34 <__ssputs_r>
 8008c5a:	3001      	adds	r0, #1
 8008c5c:	f000 80aa 	beq.w	8008db4 <_svfiprintf_r+0x1c8>
 8008c60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c62:	445a      	add	r2, fp
 8008c64:	9209      	str	r2, [sp, #36]	; 0x24
 8008c66:	f89a 3000 	ldrb.w	r3, [sl]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f000 80a2 	beq.w	8008db4 <_svfiprintf_r+0x1c8>
 8008c70:	2300      	movs	r3, #0
 8008c72:	f04f 32ff 	mov.w	r2, #4294967295
 8008c76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c7a:	f10a 0a01 	add.w	sl, sl, #1
 8008c7e:	9304      	str	r3, [sp, #16]
 8008c80:	9307      	str	r3, [sp, #28]
 8008c82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c86:	931a      	str	r3, [sp, #104]	; 0x68
 8008c88:	4654      	mov	r4, sl
 8008c8a:	2205      	movs	r2, #5
 8008c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c90:	4851      	ldr	r0, [pc, #324]	; (8008dd8 <_svfiprintf_r+0x1ec>)
 8008c92:	f7f7 faa5 	bl	80001e0 <memchr>
 8008c96:	9a04      	ldr	r2, [sp, #16]
 8008c98:	b9d8      	cbnz	r0, 8008cd2 <_svfiprintf_r+0xe6>
 8008c9a:	06d0      	lsls	r0, r2, #27
 8008c9c:	bf44      	itt	mi
 8008c9e:	2320      	movmi	r3, #32
 8008ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ca4:	0711      	lsls	r1, r2, #28
 8008ca6:	bf44      	itt	mi
 8008ca8:	232b      	movmi	r3, #43	; 0x2b
 8008caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cae:	f89a 3000 	ldrb.w	r3, [sl]
 8008cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8008cb4:	d015      	beq.n	8008ce2 <_svfiprintf_r+0xf6>
 8008cb6:	9a07      	ldr	r2, [sp, #28]
 8008cb8:	4654      	mov	r4, sl
 8008cba:	2000      	movs	r0, #0
 8008cbc:	f04f 0c0a 	mov.w	ip, #10
 8008cc0:	4621      	mov	r1, r4
 8008cc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cc6:	3b30      	subs	r3, #48	; 0x30
 8008cc8:	2b09      	cmp	r3, #9
 8008cca:	d94e      	bls.n	8008d6a <_svfiprintf_r+0x17e>
 8008ccc:	b1b0      	cbz	r0, 8008cfc <_svfiprintf_r+0x110>
 8008cce:	9207      	str	r2, [sp, #28]
 8008cd0:	e014      	b.n	8008cfc <_svfiprintf_r+0x110>
 8008cd2:	eba0 0308 	sub.w	r3, r0, r8
 8008cd6:	fa09 f303 	lsl.w	r3, r9, r3
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	9304      	str	r3, [sp, #16]
 8008cde:	46a2      	mov	sl, r4
 8008ce0:	e7d2      	b.n	8008c88 <_svfiprintf_r+0x9c>
 8008ce2:	9b03      	ldr	r3, [sp, #12]
 8008ce4:	1d19      	adds	r1, r3, #4
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	9103      	str	r1, [sp, #12]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	bfbb      	ittet	lt
 8008cee:	425b      	neglt	r3, r3
 8008cf0:	f042 0202 	orrlt.w	r2, r2, #2
 8008cf4:	9307      	strge	r3, [sp, #28]
 8008cf6:	9307      	strlt	r3, [sp, #28]
 8008cf8:	bfb8      	it	lt
 8008cfa:	9204      	strlt	r2, [sp, #16]
 8008cfc:	7823      	ldrb	r3, [r4, #0]
 8008cfe:	2b2e      	cmp	r3, #46	; 0x2e
 8008d00:	d10c      	bne.n	8008d1c <_svfiprintf_r+0x130>
 8008d02:	7863      	ldrb	r3, [r4, #1]
 8008d04:	2b2a      	cmp	r3, #42	; 0x2a
 8008d06:	d135      	bne.n	8008d74 <_svfiprintf_r+0x188>
 8008d08:	9b03      	ldr	r3, [sp, #12]
 8008d0a:	1d1a      	adds	r2, r3, #4
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	9203      	str	r2, [sp, #12]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	bfb8      	it	lt
 8008d14:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d18:	3402      	adds	r4, #2
 8008d1a:	9305      	str	r3, [sp, #20]
 8008d1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008de8 <_svfiprintf_r+0x1fc>
 8008d20:	7821      	ldrb	r1, [r4, #0]
 8008d22:	2203      	movs	r2, #3
 8008d24:	4650      	mov	r0, sl
 8008d26:	f7f7 fa5b 	bl	80001e0 <memchr>
 8008d2a:	b140      	cbz	r0, 8008d3e <_svfiprintf_r+0x152>
 8008d2c:	2340      	movs	r3, #64	; 0x40
 8008d2e:	eba0 000a 	sub.w	r0, r0, sl
 8008d32:	fa03 f000 	lsl.w	r0, r3, r0
 8008d36:	9b04      	ldr	r3, [sp, #16]
 8008d38:	4303      	orrs	r3, r0
 8008d3a:	3401      	adds	r4, #1
 8008d3c:	9304      	str	r3, [sp, #16]
 8008d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d42:	4826      	ldr	r0, [pc, #152]	; (8008ddc <_svfiprintf_r+0x1f0>)
 8008d44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d48:	2206      	movs	r2, #6
 8008d4a:	f7f7 fa49 	bl	80001e0 <memchr>
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	d038      	beq.n	8008dc4 <_svfiprintf_r+0x1d8>
 8008d52:	4b23      	ldr	r3, [pc, #140]	; (8008de0 <_svfiprintf_r+0x1f4>)
 8008d54:	bb1b      	cbnz	r3, 8008d9e <_svfiprintf_r+0x1b2>
 8008d56:	9b03      	ldr	r3, [sp, #12]
 8008d58:	3307      	adds	r3, #7
 8008d5a:	f023 0307 	bic.w	r3, r3, #7
 8008d5e:	3308      	adds	r3, #8
 8008d60:	9303      	str	r3, [sp, #12]
 8008d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d64:	4433      	add	r3, r6
 8008d66:	9309      	str	r3, [sp, #36]	; 0x24
 8008d68:	e767      	b.n	8008c3a <_svfiprintf_r+0x4e>
 8008d6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d6e:	460c      	mov	r4, r1
 8008d70:	2001      	movs	r0, #1
 8008d72:	e7a5      	b.n	8008cc0 <_svfiprintf_r+0xd4>
 8008d74:	2300      	movs	r3, #0
 8008d76:	3401      	adds	r4, #1
 8008d78:	9305      	str	r3, [sp, #20]
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	f04f 0c0a 	mov.w	ip, #10
 8008d80:	4620      	mov	r0, r4
 8008d82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d86:	3a30      	subs	r2, #48	; 0x30
 8008d88:	2a09      	cmp	r2, #9
 8008d8a:	d903      	bls.n	8008d94 <_svfiprintf_r+0x1a8>
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d0c5      	beq.n	8008d1c <_svfiprintf_r+0x130>
 8008d90:	9105      	str	r1, [sp, #20]
 8008d92:	e7c3      	b.n	8008d1c <_svfiprintf_r+0x130>
 8008d94:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d98:	4604      	mov	r4, r0
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e7f0      	b.n	8008d80 <_svfiprintf_r+0x194>
 8008d9e:	ab03      	add	r3, sp, #12
 8008da0:	9300      	str	r3, [sp, #0]
 8008da2:	462a      	mov	r2, r5
 8008da4:	4b0f      	ldr	r3, [pc, #60]	; (8008de4 <_svfiprintf_r+0x1f8>)
 8008da6:	a904      	add	r1, sp, #16
 8008da8:	4638      	mov	r0, r7
 8008daa:	f7fc fa85 	bl	80052b8 <_printf_float>
 8008dae:	1c42      	adds	r2, r0, #1
 8008db0:	4606      	mov	r6, r0
 8008db2:	d1d6      	bne.n	8008d62 <_svfiprintf_r+0x176>
 8008db4:	89ab      	ldrh	r3, [r5, #12]
 8008db6:	065b      	lsls	r3, r3, #25
 8008db8:	f53f af2c 	bmi.w	8008c14 <_svfiprintf_r+0x28>
 8008dbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dbe:	b01d      	add	sp, #116	; 0x74
 8008dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dc4:	ab03      	add	r3, sp, #12
 8008dc6:	9300      	str	r3, [sp, #0]
 8008dc8:	462a      	mov	r2, r5
 8008dca:	4b06      	ldr	r3, [pc, #24]	; (8008de4 <_svfiprintf_r+0x1f8>)
 8008dcc:	a904      	add	r1, sp, #16
 8008dce:	4638      	mov	r0, r7
 8008dd0:	f7fc fd16 	bl	8005800 <_printf_i>
 8008dd4:	e7eb      	b.n	8008dae <_svfiprintf_r+0x1c2>
 8008dd6:	bf00      	nop
 8008dd8:	08009e6c 	.word	0x08009e6c
 8008ddc:	08009e76 	.word	0x08009e76
 8008de0:	080052b9 	.word	0x080052b9
 8008de4:	08008b35 	.word	0x08008b35
 8008de8:	08009e72 	.word	0x08009e72
 8008dec:	00000000 	.word	0x00000000

08008df0 <nan>:
 8008df0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008df8 <nan+0x8>
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	00000000 	.word	0x00000000
 8008dfc:	7ff80000 	.word	0x7ff80000

08008e00 <_sbrk_r>:
 8008e00:	b538      	push	{r3, r4, r5, lr}
 8008e02:	4d06      	ldr	r5, [pc, #24]	; (8008e1c <_sbrk_r+0x1c>)
 8008e04:	2300      	movs	r3, #0
 8008e06:	4604      	mov	r4, r0
 8008e08:	4608      	mov	r0, r1
 8008e0a:	602b      	str	r3, [r5, #0]
 8008e0c:	f7f8 fafa 	bl	8001404 <_sbrk>
 8008e10:	1c43      	adds	r3, r0, #1
 8008e12:	d102      	bne.n	8008e1a <_sbrk_r+0x1a>
 8008e14:	682b      	ldr	r3, [r5, #0]
 8008e16:	b103      	cbz	r3, 8008e1a <_sbrk_r+0x1a>
 8008e18:	6023      	str	r3, [r4, #0]
 8008e1a:	bd38      	pop	{r3, r4, r5, pc}
 8008e1c:	20000b28 	.word	0x20000b28

08008e20 <strncmp>:
 8008e20:	b510      	push	{r4, lr}
 8008e22:	b16a      	cbz	r2, 8008e40 <strncmp+0x20>
 8008e24:	3901      	subs	r1, #1
 8008e26:	1884      	adds	r4, r0, r2
 8008e28:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008e2c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d103      	bne.n	8008e3c <strncmp+0x1c>
 8008e34:	42a0      	cmp	r0, r4
 8008e36:	d001      	beq.n	8008e3c <strncmp+0x1c>
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d1f5      	bne.n	8008e28 <strncmp+0x8>
 8008e3c:	1a98      	subs	r0, r3, r2
 8008e3e:	bd10      	pop	{r4, pc}
 8008e40:	4610      	mov	r0, r2
 8008e42:	e7fc      	b.n	8008e3e <strncmp+0x1e>

08008e44 <__ascii_wctomb>:
 8008e44:	b149      	cbz	r1, 8008e5a <__ascii_wctomb+0x16>
 8008e46:	2aff      	cmp	r2, #255	; 0xff
 8008e48:	bf85      	ittet	hi
 8008e4a:	238a      	movhi	r3, #138	; 0x8a
 8008e4c:	6003      	strhi	r3, [r0, #0]
 8008e4e:	700a      	strbls	r2, [r1, #0]
 8008e50:	f04f 30ff 	movhi.w	r0, #4294967295
 8008e54:	bf98      	it	ls
 8008e56:	2001      	movls	r0, #1
 8008e58:	4770      	bx	lr
 8008e5a:	4608      	mov	r0, r1
 8008e5c:	4770      	bx	lr
	...

08008e60 <__assert_func>:
 8008e60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e62:	4614      	mov	r4, r2
 8008e64:	461a      	mov	r2, r3
 8008e66:	4b09      	ldr	r3, [pc, #36]	; (8008e8c <__assert_func+0x2c>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4605      	mov	r5, r0
 8008e6c:	68d8      	ldr	r0, [r3, #12]
 8008e6e:	b14c      	cbz	r4, 8008e84 <__assert_func+0x24>
 8008e70:	4b07      	ldr	r3, [pc, #28]	; (8008e90 <__assert_func+0x30>)
 8008e72:	9100      	str	r1, [sp, #0]
 8008e74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e78:	4906      	ldr	r1, [pc, #24]	; (8008e94 <__assert_func+0x34>)
 8008e7a:	462b      	mov	r3, r5
 8008e7c:	f000 f80e 	bl	8008e9c <fiprintf>
 8008e80:	f000 fa84 	bl	800938c <abort>
 8008e84:	4b04      	ldr	r3, [pc, #16]	; (8008e98 <__assert_func+0x38>)
 8008e86:	461c      	mov	r4, r3
 8008e88:	e7f3      	b.n	8008e72 <__assert_func+0x12>
 8008e8a:	bf00      	nop
 8008e8c:	2000002c 	.word	0x2000002c
 8008e90:	08009e7d 	.word	0x08009e7d
 8008e94:	08009e8a 	.word	0x08009e8a
 8008e98:	08009eb8 	.word	0x08009eb8

08008e9c <fiprintf>:
 8008e9c:	b40e      	push	{r1, r2, r3}
 8008e9e:	b503      	push	{r0, r1, lr}
 8008ea0:	4601      	mov	r1, r0
 8008ea2:	ab03      	add	r3, sp, #12
 8008ea4:	4805      	ldr	r0, [pc, #20]	; (8008ebc <fiprintf+0x20>)
 8008ea6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eaa:	6800      	ldr	r0, [r0, #0]
 8008eac:	9301      	str	r3, [sp, #4]
 8008eae:	f000 f87d 	bl	8008fac <_vfiprintf_r>
 8008eb2:	b002      	add	sp, #8
 8008eb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008eb8:	b003      	add	sp, #12
 8008eba:	4770      	bx	lr
 8008ebc:	2000002c 	.word	0x2000002c

08008ec0 <memmove>:
 8008ec0:	4288      	cmp	r0, r1
 8008ec2:	b510      	push	{r4, lr}
 8008ec4:	eb01 0402 	add.w	r4, r1, r2
 8008ec8:	d902      	bls.n	8008ed0 <memmove+0x10>
 8008eca:	4284      	cmp	r4, r0
 8008ecc:	4623      	mov	r3, r4
 8008ece:	d807      	bhi.n	8008ee0 <memmove+0x20>
 8008ed0:	1e43      	subs	r3, r0, #1
 8008ed2:	42a1      	cmp	r1, r4
 8008ed4:	d008      	beq.n	8008ee8 <memmove+0x28>
 8008ed6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008eda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ede:	e7f8      	b.n	8008ed2 <memmove+0x12>
 8008ee0:	4402      	add	r2, r0
 8008ee2:	4601      	mov	r1, r0
 8008ee4:	428a      	cmp	r2, r1
 8008ee6:	d100      	bne.n	8008eea <memmove+0x2a>
 8008ee8:	bd10      	pop	{r4, pc}
 8008eea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008eee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ef2:	e7f7      	b.n	8008ee4 <memmove+0x24>

08008ef4 <__malloc_lock>:
 8008ef4:	4801      	ldr	r0, [pc, #4]	; (8008efc <__malloc_lock+0x8>)
 8008ef6:	f000 bc09 	b.w	800970c <__retarget_lock_acquire_recursive>
 8008efa:	bf00      	nop
 8008efc:	20000b30 	.word	0x20000b30

08008f00 <__malloc_unlock>:
 8008f00:	4801      	ldr	r0, [pc, #4]	; (8008f08 <__malloc_unlock+0x8>)
 8008f02:	f000 bc04 	b.w	800970e <__retarget_lock_release_recursive>
 8008f06:	bf00      	nop
 8008f08:	20000b30 	.word	0x20000b30

08008f0c <_realloc_r>:
 8008f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f0e:	4607      	mov	r7, r0
 8008f10:	4614      	mov	r4, r2
 8008f12:	460e      	mov	r6, r1
 8008f14:	b921      	cbnz	r1, 8008f20 <_realloc_r+0x14>
 8008f16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008f1a:	4611      	mov	r1, r2
 8008f1c:	f7ff bdb0 	b.w	8008a80 <_malloc_r>
 8008f20:	b922      	cbnz	r2, 8008f2c <_realloc_r+0x20>
 8008f22:	f7ff fd5d 	bl	80089e0 <_free_r>
 8008f26:	4625      	mov	r5, r4
 8008f28:	4628      	mov	r0, r5
 8008f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f2c:	f000 fc54 	bl	80097d8 <_malloc_usable_size_r>
 8008f30:	42a0      	cmp	r0, r4
 8008f32:	d20f      	bcs.n	8008f54 <_realloc_r+0x48>
 8008f34:	4621      	mov	r1, r4
 8008f36:	4638      	mov	r0, r7
 8008f38:	f7ff fda2 	bl	8008a80 <_malloc_r>
 8008f3c:	4605      	mov	r5, r0
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	d0f2      	beq.n	8008f28 <_realloc_r+0x1c>
 8008f42:	4631      	mov	r1, r6
 8008f44:	4622      	mov	r2, r4
 8008f46:	f7fc f901 	bl	800514c <memcpy>
 8008f4a:	4631      	mov	r1, r6
 8008f4c:	4638      	mov	r0, r7
 8008f4e:	f7ff fd47 	bl	80089e0 <_free_r>
 8008f52:	e7e9      	b.n	8008f28 <_realloc_r+0x1c>
 8008f54:	4635      	mov	r5, r6
 8008f56:	e7e7      	b.n	8008f28 <_realloc_r+0x1c>

08008f58 <__sfputc_r>:
 8008f58:	6893      	ldr	r3, [r2, #8]
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	b410      	push	{r4}
 8008f60:	6093      	str	r3, [r2, #8]
 8008f62:	da08      	bge.n	8008f76 <__sfputc_r+0x1e>
 8008f64:	6994      	ldr	r4, [r2, #24]
 8008f66:	42a3      	cmp	r3, r4
 8008f68:	db01      	blt.n	8008f6e <__sfputc_r+0x16>
 8008f6a:	290a      	cmp	r1, #10
 8008f6c:	d103      	bne.n	8008f76 <__sfputc_r+0x1e>
 8008f6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f72:	f000 b94b 	b.w	800920c <__swbuf_r>
 8008f76:	6813      	ldr	r3, [r2, #0]
 8008f78:	1c58      	adds	r0, r3, #1
 8008f7a:	6010      	str	r0, [r2, #0]
 8008f7c:	7019      	strb	r1, [r3, #0]
 8008f7e:	4608      	mov	r0, r1
 8008f80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f84:	4770      	bx	lr

08008f86 <__sfputs_r>:
 8008f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f88:	4606      	mov	r6, r0
 8008f8a:	460f      	mov	r7, r1
 8008f8c:	4614      	mov	r4, r2
 8008f8e:	18d5      	adds	r5, r2, r3
 8008f90:	42ac      	cmp	r4, r5
 8008f92:	d101      	bne.n	8008f98 <__sfputs_r+0x12>
 8008f94:	2000      	movs	r0, #0
 8008f96:	e007      	b.n	8008fa8 <__sfputs_r+0x22>
 8008f98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f9c:	463a      	mov	r2, r7
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	f7ff ffda 	bl	8008f58 <__sfputc_r>
 8008fa4:	1c43      	adds	r3, r0, #1
 8008fa6:	d1f3      	bne.n	8008f90 <__sfputs_r+0xa>
 8008fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008fac <_vfiprintf_r>:
 8008fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb0:	460d      	mov	r5, r1
 8008fb2:	b09d      	sub	sp, #116	; 0x74
 8008fb4:	4614      	mov	r4, r2
 8008fb6:	4698      	mov	r8, r3
 8008fb8:	4606      	mov	r6, r0
 8008fba:	b118      	cbz	r0, 8008fc4 <_vfiprintf_r+0x18>
 8008fbc:	6983      	ldr	r3, [r0, #24]
 8008fbe:	b90b      	cbnz	r3, 8008fc4 <_vfiprintf_r+0x18>
 8008fc0:	f000 fb06 	bl	80095d0 <__sinit>
 8008fc4:	4b89      	ldr	r3, [pc, #548]	; (80091ec <_vfiprintf_r+0x240>)
 8008fc6:	429d      	cmp	r5, r3
 8008fc8:	d11b      	bne.n	8009002 <_vfiprintf_r+0x56>
 8008fca:	6875      	ldr	r5, [r6, #4]
 8008fcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fce:	07d9      	lsls	r1, r3, #31
 8008fd0:	d405      	bmi.n	8008fde <_vfiprintf_r+0x32>
 8008fd2:	89ab      	ldrh	r3, [r5, #12]
 8008fd4:	059a      	lsls	r2, r3, #22
 8008fd6:	d402      	bmi.n	8008fde <_vfiprintf_r+0x32>
 8008fd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fda:	f000 fb97 	bl	800970c <__retarget_lock_acquire_recursive>
 8008fde:	89ab      	ldrh	r3, [r5, #12]
 8008fe0:	071b      	lsls	r3, r3, #28
 8008fe2:	d501      	bpl.n	8008fe8 <_vfiprintf_r+0x3c>
 8008fe4:	692b      	ldr	r3, [r5, #16]
 8008fe6:	b9eb      	cbnz	r3, 8009024 <_vfiprintf_r+0x78>
 8008fe8:	4629      	mov	r1, r5
 8008fea:	4630      	mov	r0, r6
 8008fec:	f000 f960 	bl	80092b0 <__swsetup_r>
 8008ff0:	b1c0      	cbz	r0, 8009024 <_vfiprintf_r+0x78>
 8008ff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ff4:	07dc      	lsls	r4, r3, #31
 8008ff6:	d50e      	bpl.n	8009016 <_vfiprintf_r+0x6a>
 8008ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ffc:	b01d      	add	sp, #116	; 0x74
 8008ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009002:	4b7b      	ldr	r3, [pc, #492]	; (80091f0 <_vfiprintf_r+0x244>)
 8009004:	429d      	cmp	r5, r3
 8009006:	d101      	bne.n	800900c <_vfiprintf_r+0x60>
 8009008:	68b5      	ldr	r5, [r6, #8]
 800900a:	e7df      	b.n	8008fcc <_vfiprintf_r+0x20>
 800900c:	4b79      	ldr	r3, [pc, #484]	; (80091f4 <_vfiprintf_r+0x248>)
 800900e:	429d      	cmp	r5, r3
 8009010:	bf08      	it	eq
 8009012:	68f5      	ldreq	r5, [r6, #12]
 8009014:	e7da      	b.n	8008fcc <_vfiprintf_r+0x20>
 8009016:	89ab      	ldrh	r3, [r5, #12]
 8009018:	0598      	lsls	r0, r3, #22
 800901a:	d4ed      	bmi.n	8008ff8 <_vfiprintf_r+0x4c>
 800901c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800901e:	f000 fb76 	bl	800970e <__retarget_lock_release_recursive>
 8009022:	e7e9      	b.n	8008ff8 <_vfiprintf_r+0x4c>
 8009024:	2300      	movs	r3, #0
 8009026:	9309      	str	r3, [sp, #36]	; 0x24
 8009028:	2320      	movs	r3, #32
 800902a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800902e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009032:	2330      	movs	r3, #48	; 0x30
 8009034:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80091f8 <_vfiprintf_r+0x24c>
 8009038:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800903c:	f04f 0901 	mov.w	r9, #1
 8009040:	4623      	mov	r3, r4
 8009042:	469a      	mov	sl, r3
 8009044:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009048:	b10a      	cbz	r2, 800904e <_vfiprintf_r+0xa2>
 800904a:	2a25      	cmp	r2, #37	; 0x25
 800904c:	d1f9      	bne.n	8009042 <_vfiprintf_r+0x96>
 800904e:	ebba 0b04 	subs.w	fp, sl, r4
 8009052:	d00b      	beq.n	800906c <_vfiprintf_r+0xc0>
 8009054:	465b      	mov	r3, fp
 8009056:	4622      	mov	r2, r4
 8009058:	4629      	mov	r1, r5
 800905a:	4630      	mov	r0, r6
 800905c:	f7ff ff93 	bl	8008f86 <__sfputs_r>
 8009060:	3001      	adds	r0, #1
 8009062:	f000 80aa 	beq.w	80091ba <_vfiprintf_r+0x20e>
 8009066:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009068:	445a      	add	r2, fp
 800906a:	9209      	str	r2, [sp, #36]	; 0x24
 800906c:	f89a 3000 	ldrb.w	r3, [sl]
 8009070:	2b00      	cmp	r3, #0
 8009072:	f000 80a2 	beq.w	80091ba <_vfiprintf_r+0x20e>
 8009076:	2300      	movs	r3, #0
 8009078:	f04f 32ff 	mov.w	r2, #4294967295
 800907c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009080:	f10a 0a01 	add.w	sl, sl, #1
 8009084:	9304      	str	r3, [sp, #16]
 8009086:	9307      	str	r3, [sp, #28]
 8009088:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800908c:	931a      	str	r3, [sp, #104]	; 0x68
 800908e:	4654      	mov	r4, sl
 8009090:	2205      	movs	r2, #5
 8009092:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009096:	4858      	ldr	r0, [pc, #352]	; (80091f8 <_vfiprintf_r+0x24c>)
 8009098:	f7f7 f8a2 	bl	80001e0 <memchr>
 800909c:	9a04      	ldr	r2, [sp, #16]
 800909e:	b9d8      	cbnz	r0, 80090d8 <_vfiprintf_r+0x12c>
 80090a0:	06d1      	lsls	r1, r2, #27
 80090a2:	bf44      	itt	mi
 80090a4:	2320      	movmi	r3, #32
 80090a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090aa:	0713      	lsls	r3, r2, #28
 80090ac:	bf44      	itt	mi
 80090ae:	232b      	movmi	r3, #43	; 0x2b
 80090b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090b4:	f89a 3000 	ldrb.w	r3, [sl]
 80090b8:	2b2a      	cmp	r3, #42	; 0x2a
 80090ba:	d015      	beq.n	80090e8 <_vfiprintf_r+0x13c>
 80090bc:	9a07      	ldr	r2, [sp, #28]
 80090be:	4654      	mov	r4, sl
 80090c0:	2000      	movs	r0, #0
 80090c2:	f04f 0c0a 	mov.w	ip, #10
 80090c6:	4621      	mov	r1, r4
 80090c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090cc:	3b30      	subs	r3, #48	; 0x30
 80090ce:	2b09      	cmp	r3, #9
 80090d0:	d94e      	bls.n	8009170 <_vfiprintf_r+0x1c4>
 80090d2:	b1b0      	cbz	r0, 8009102 <_vfiprintf_r+0x156>
 80090d4:	9207      	str	r2, [sp, #28]
 80090d6:	e014      	b.n	8009102 <_vfiprintf_r+0x156>
 80090d8:	eba0 0308 	sub.w	r3, r0, r8
 80090dc:	fa09 f303 	lsl.w	r3, r9, r3
 80090e0:	4313      	orrs	r3, r2
 80090e2:	9304      	str	r3, [sp, #16]
 80090e4:	46a2      	mov	sl, r4
 80090e6:	e7d2      	b.n	800908e <_vfiprintf_r+0xe2>
 80090e8:	9b03      	ldr	r3, [sp, #12]
 80090ea:	1d19      	adds	r1, r3, #4
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	9103      	str	r1, [sp, #12]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	bfbb      	ittet	lt
 80090f4:	425b      	neglt	r3, r3
 80090f6:	f042 0202 	orrlt.w	r2, r2, #2
 80090fa:	9307      	strge	r3, [sp, #28]
 80090fc:	9307      	strlt	r3, [sp, #28]
 80090fe:	bfb8      	it	lt
 8009100:	9204      	strlt	r2, [sp, #16]
 8009102:	7823      	ldrb	r3, [r4, #0]
 8009104:	2b2e      	cmp	r3, #46	; 0x2e
 8009106:	d10c      	bne.n	8009122 <_vfiprintf_r+0x176>
 8009108:	7863      	ldrb	r3, [r4, #1]
 800910a:	2b2a      	cmp	r3, #42	; 0x2a
 800910c:	d135      	bne.n	800917a <_vfiprintf_r+0x1ce>
 800910e:	9b03      	ldr	r3, [sp, #12]
 8009110:	1d1a      	adds	r2, r3, #4
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	9203      	str	r2, [sp, #12]
 8009116:	2b00      	cmp	r3, #0
 8009118:	bfb8      	it	lt
 800911a:	f04f 33ff 	movlt.w	r3, #4294967295
 800911e:	3402      	adds	r4, #2
 8009120:	9305      	str	r3, [sp, #20]
 8009122:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009208 <_vfiprintf_r+0x25c>
 8009126:	7821      	ldrb	r1, [r4, #0]
 8009128:	2203      	movs	r2, #3
 800912a:	4650      	mov	r0, sl
 800912c:	f7f7 f858 	bl	80001e0 <memchr>
 8009130:	b140      	cbz	r0, 8009144 <_vfiprintf_r+0x198>
 8009132:	2340      	movs	r3, #64	; 0x40
 8009134:	eba0 000a 	sub.w	r0, r0, sl
 8009138:	fa03 f000 	lsl.w	r0, r3, r0
 800913c:	9b04      	ldr	r3, [sp, #16]
 800913e:	4303      	orrs	r3, r0
 8009140:	3401      	adds	r4, #1
 8009142:	9304      	str	r3, [sp, #16]
 8009144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009148:	482c      	ldr	r0, [pc, #176]	; (80091fc <_vfiprintf_r+0x250>)
 800914a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800914e:	2206      	movs	r2, #6
 8009150:	f7f7 f846 	bl	80001e0 <memchr>
 8009154:	2800      	cmp	r0, #0
 8009156:	d03f      	beq.n	80091d8 <_vfiprintf_r+0x22c>
 8009158:	4b29      	ldr	r3, [pc, #164]	; (8009200 <_vfiprintf_r+0x254>)
 800915a:	bb1b      	cbnz	r3, 80091a4 <_vfiprintf_r+0x1f8>
 800915c:	9b03      	ldr	r3, [sp, #12]
 800915e:	3307      	adds	r3, #7
 8009160:	f023 0307 	bic.w	r3, r3, #7
 8009164:	3308      	adds	r3, #8
 8009166:	9303      	str	r3, [sp, #12]
 8009168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800916a:	443b      	add	r3, r7
 800916c:	9309      	str	r3, [sp, #36]	; 0x24
 800916e:	e767      	b.n	8009040 <_vfiprintf_r+0x94>
 8009170:	fb0c 3202 	mla	r2, ip, r2, r3
 8009174:	460c      	mov	r4, r1
 8009176:	2001      	movs	r0, #1
 8009178:	e7a5      	b.n	80090c6 <_vfiprintf_r+0x11a>
 800917a:	2300      	movs	r3, #0
 800917c:	3401      	adds	r4, #1
 800917e:	9305      	str	r3, [sp, #20]
 8009180:	4619      	mov	r1, r3
 8009182:	f04f 0c0a 	mov.w	ip, #10
 8009186:	4620      	mov	r0, r4
 8009188:	f810 2b01 	ldrb.w	r2, [r0], #1
 800918c:	3a30      	subs	r2, #48	; 0x30
 800918e:	2a09      	cmp	r2, #9
 8009190:	d903      	bls.n	800919a <_vfiprintf_r+0x1ee>
 8009192:	2b00      	cmp	r3, #0
 8009194:	d0c5      	beq.n	8009122 <_vfiprintf_r+0x176>
 8009196:	9105      	str	r1, [sp, #20]
 8009198:	e7c3      	b.n	8009122 <_vfiprintf_r+0x176>
 800919a:	fb0c 2101 	mla	r1, ip, r1, r2
 800919e:	4604      	mov	r4, r0
 80091a0:	2301      	movs	r3, #1
 80091a2:	e7f0      	b.n	8009186 <_vfiprintf_r+0x1da>
 80091a4:	ab03      	add	r3, sp, #12
 80091a6:	9300      	str	r3, [sp, #0]
 80091a8:	462a      	mov	r2, r5
 80091aa:	4b16      	ldr	r3, [pc, #88]	; (8009204 <_vfiprintf_r+0x258>)
 80091ac:	a904      	add	r1, sp, #16
 80091ae:	4630      	mov	r0, r6
 80091b0:	f7fc f882 	bl	80052b8 <_printf_float>
 80091b4:	4607      	mov	r7, r0
 80091b6:	1c78      	adds	r0, r7, #1
 80091b8:	d1d6      	bne.n	8009168 <_vfiprintf_r+0x1bc>
 80091ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091bc:	07d9      	lsls	r1, r3, #31
 80091be:	d405      	bmi.n	80091cc <_vfiprintf_r+0x220>
 80091c0:	89ab      	ldrh	r3, [r5, #12]
 80091c2:	059a      	lsls	r2, r3, #22
 80091c4:	d402      	bmi.n	80091cc <_vfiprintf_r+0x220>
 80091c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091c8:	f000 faa1 	bl	800970e <__retarget_lock_release_recursive>
 80091cc:	89ab      	ldrh	r3, [r5, #12]
 80091ce:	065b      	lsls	r3, r3, #25
 80091d0:	f53f af12 	bmi.w	8008ff8 <_vfiprintf_r+0x4c>
 80091d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091d6:	e711      	b.n	8008ffc <_vfiprintf_r+0x50>
 80091d8:	ab03      	add	r3, sp, #12
 80091da:	9300      	str	r3, [sp, #0]
 80091dc:	462a      	mov	r2, r5
 80091de:	4b09      	ldr	r3, [pc, #36]	; (8009204 <_vfiprintf_r+0x258>)
 80091e0:	a904      	add	r1, sp, #16
 80091e2:	4630      	mov	r0, r6
 80091e4:	f7fc fb0c 	bl	8005800 <_printf_i>
 80091e8:	e7e4      	b.n	80091b4 <_vfiprintf_r+0x208>
 80091ea:	bf00      	nop
 80091ec:	08009edc 	.word	0x08009edc
 80091f0:	08009efc 	.word	0x08009efc
 80091f4:	08009ebc 	.word	0x08009ebc
 80091f8:	08009e6c 	.word	0x08009e6c
 80091fc:	08009e76 	.word	0x08009e76
 8009200:	080052b9 	.word	0x080052b9
 8009204:	08008f87 	.word	0x08008f87
 8009208:	08009e72 	.word	0x08009e72

0800920c <__swbuf_r>:
 800920c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800920e:	460e      	mov	r6, r1
 8009210:	4614      	mov	r4, r2
 8009212:	4605      	mov	r5, r0
 8009214:	b118      	cbz	r0, 800921e <__swbuf_r+0x12>
 8009216:	6983      	ldr	r3, [r0, #24]
 8009218:	b90b      	cbnz	r3, 800921e <__swbuf_r+0x12>
 800921a:	f000 f9d9 	bl	80095d0 <__sinit>
 800921e:	4b21      	ldr	r3, [pc, #132]	; (80092a4 <__swbuf_r+0x98>)
 8009220:	429c      	cmp	r4, r3
 8009222:	d12b      	bne.n	800927c <__swbuf_r+0x70>
 8009224:	686c      	ldr	r4, [r5, #4]
 8009226:	69a3      	ldr	r3, [r4, #24]
 8009228:	60a3      	str	r3, [r4, #8]
 800922a:	89a3      	ldrh	r3, [r4, #12]
 800922c:	071a      	lsls	r2, r3, #28
 800922e:	d52f      	bpl.n	8009290 <__swbuf_r+0x84>
 8009230:	6923      	ldr	r3, [r4, #16]
 8009232:	b36b      	cbz	r3, 8009290 <__swbuf_r+0x84>
 8009234:	6923      	ldr	r3, [r4, #16]
 8009236:	6820      	ldr	r0, [r4, #0]
 8009238:	1ac0      	subs	r0, r0, r3
 800923a:	6963      	ldr	r3, [r4, #20]
 800923c:	b2f6      	uxtb	r6, r6
 800923e:	4283      	cmp	r3, r0
 8009240:	4637      	mov	r7, r6
 8009242:	dc04      	bgt.n	800924e <__swbuf_r+0x42>
 8009244:	4621      	mov	r1, r4
 8009246:	4628      	mov	r0, r5
 8009248:	f000 f92e 	bl	80094a8 <_fflush_r>
 800924c:	bb30      	cbnz	r0, 800929c <__swbuf_r+0x90>
 800924e:	68a3      	ldr	r3, [r4, #8]
 8009250:	3b01      	subs	r3, #1
 8009252:	60a3      	str	r3, [r4, #8]
 8009254:	6823      	ldr	r3, [r4, #0]
 8009256:	1c5a      	adds	r2, r3, #1
 8009258:	6022      	str	r2, [r4, #0]
 800925a:	701e      	strb	r6, [r3, #0]
 800925c:	6963      	ldr	r3, [r4, #20]
 800925e:	3001      	adds	r0, #1
 8009260:	4283      	cmp	r3, r0
 8009262:	d004      	beq.n	800926e <__swbuf_r+0x62>
 8009264:	89a3      	ldrh	r3, [r4, #12]
 8009266:	07db      	lsls	r3, r3, #31
 8009268:	d506      	bpl.n	8009278 <__swbuf_r+0x6c>
 800926a:	2e0a      	cmp	r6, #10
 800926c:	d104      	bne.n	8009278 <__swbuf_r+0x6c>
 800926e:	4621      	mov	r1, r4
 8009270:	4628      	mov	r0, r5
 8009272:	f000 f919 	bl	80094a8 <_fflush_r>
 8009276:	b988      	cbnz	r0, 800929c <__swbuf_r+0x90>
 8009278:	4638      	mov	r0, r7
 800927a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800927c:	4b0a      	ldr	r3, [pc, #40]	; (80092a8 <__swbuf_r+0x9c>)
 800927e:	429c      	cmp	r4, r3
 8009280:	d101      	bne.n	8009286 <__swbuf_r+0x7a>
 8009282:	68ac      	ldr	r4, [r5, #8]
 8009284:	e7cf      	b.n	8009226 <__swbuf_r+0x1a>
 8009286:	4b09      	ldr	r3, [pc, #36]	; (80092ac <__swbuf_r+0xa0>)
 8009288:	429c      	cmp	r4, r3
 800928a:	bf08      	it	eq
 800928c:	68ec      	ldreq	r4, [r5, #12]
 800928e:	e7ca      	b.n	8009226 <__swbuf_r+0x1a>
 8009290:	4621      	mov	r1, r4
 8009292:	4628      	mov	r0, r5
 8009294:	f000 f80c 	bl	80092b0 <__swsetup_r>
 8009298:	2800      	cmp	r0, #0
 800929a:	d0cb      	beq.n	8009234 <__swbuf_r+0x28>
 800929c:	f04f 37ff 	mov.w	r7, #4294967295
 80092a0:	e7ea      	b.n	8009278 <__swbuf_r+0x6c>
 80092a2:	bf00      	nop
 80092a4:	08009edc 	.word	0x08009edc
 80092a8:	08009efc 	.word	0x08009efc
 80092ac:	08009ebc 	.word	0x08009ebc

080092b0 <__swsetup_r>:
 80092b0:	4b32      	ldr	r3, [pc, #200]	; (800937c <__swsetup_r+0xcc>)
 80092b2:	b570      	push	{r4, r5, r6, lr}
 80092b4:	681d      	ldr	r5, [r3, #0]
 80092b6:	4606      	mov	r6, r0
 80092b8:	460c      	mov	r4, r1
 80092ba:	b125      	cbz	r5, 80092c6 <__swsetup_r+0x16>
 80092bc:	69ab      	ldr	r3, [r5, #24]
 80092be:	b913      	cbnz	r3, 80092c6 <__swsetup_r+0x16>
 80092c0:	4628      	mov	r0, r5
 80092c2:	f000 f985 	bl	80095d0 <__sinit>
 80092c6:	4b2e      	ldr	r3, [pc, #184]	; (8009380 <__swsetup_r+0xd0>)
 80092c8:	429c      	cmp	r4, r3
 80092ca:	d10f      	bne.n	80092ec <__swsetup_r+0x3c>
 80092cc:	686c      	ldr	r4, [r5, #4]
 80092ce:	89a3      	ldrh	r3, [r4, #12]
 80092d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092d4:	0719      	lsls	r1, r3, #28
 80092d6:	d42c      	bmi.n	8009332 <__swsetup_r+0x82>
 80092d8:	06dd      	lsls	r5, r3, #27
 80092da:	d411      	bmi.n	8009300 <__swsetup_r+0x50>
 80092dc:	2309      	movs	r3, #9
 80092de:	6033      	str	r3, [r6, #0]
 80092e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80092e4:	81a3      	strh	r3, [r4, #12]
 80092e6:	f04f 30ff 	mov.w	r0, #4294967295
 80092ea:	e03e      	b.n	800936a <__swsetup_r+0xba>
 80092ec:	4b25      	ldr	r3, [pc, #148]	; (8009384 <__swsetup_r+0xd4>)
 80092ee:	429c      	cmp	r4, r3
 80092f0:	d101      	bne.n	80092f6 <__swsetup_r+0x46>
 80092f2:	68ac      	ldr	r4, [r5, #8]
 80092f4:	e7eb      	b.n	80092ce <__swsetup_r+0x1e>
 80092f6:	4b24      	ldr	r3, [pc, #144]	; (8009388 <__swsetup_r+0xd8>)
 80092f8:	429c      	cmp	r4, r3
 80092fa:	bf08      	it	eq
 80092fc:	68ec      	ldreq	r4, [r5, #12]
 80092fe:	e7e6      	b.n	80092ce <__swsetup_r+0x1e>
 8009300:	0758      	lsls	r0, r3, #29
 8009302:	d512      	bpl.n	800932a <__swsetup_r+0x7a>
 8009304:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009306:	b141      	cbz	r1, 800931a <__swsetup_r+0x6a>
 8009308:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800930c:	4299      	cmp	r1, r3
 800930e:	d002      	beq.n	8009316 <__swsetup_r+0x66>
 8009310:	4630      	mov	r0, r6
 8009312:	f7ff fb65 	bl	80089e0 <_free_r>
 8009316:	2300      	movs	r3, #0
 8009318:	6363      	str	r3, [r4, #52]	; 0x34
 800931a:	89a3      	ldrh	r3, [r4, #12]
 800931c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009320:	81a3      	strh	r3, [r4, #12]
 8009322:	2300      	movs	r3, #0
 8009324:	6063      	str	r3, [r4, #4]
 8009326:	6923      	ldr	r3, [r4, #16]
 8009328:	6023      	str	r3, [r4, #0]
 800932a:	89a3      	ldrh	r3, [r4, #12]
 800932c:	f043 0308 	orr.w	r3, r3, #8
 8009330:	81a3      	strh	r3, [r4, #12]
 8009332:	6923      	ldr	r3, [r4, #16]
 8009334:	b94b      	cbnz	r3, 800934a <__swsetup_r+0x9a>
 8009336:	89a3      	ldrh	r3, [r4, #12]
 8009338:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800933c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009340:	d003      	beq.n	800934a <__swsetup_r+0x9a>
 8009342:	4621      	mov	r1, r4
 8009344:	4630      	mov	r0, r6
 8009346:	f000 fa07 	bl	8009758 <__smakebuf_r>
 800934a:	89a0      	ldrh	r0, [r4, #12]
 800934c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009350:	f010 0301 	ands.w	r3, r0, #1
 8009354:	d00a      	beq.n	800936c <__swsetup_r+0xbc>
 8009356:	2300      	movs	r3, #0
 8009358:	60a3      	str	r3, [r4, #8]
 800935a:	6963      	ldr	r3, [r4, #20]
 800935c:	425b      	negs	r3, r3
 800935e:	61a3      	str	r3, [r4, #24]
 8009360:	6923      	ldr	r3, [r4, #16]
 8009362:	b943      	cbnz	r3, 8009376 <__swsetup_r+0xc6>
 8009364:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009368:	d1ba      	bne.n	80092e0 <__swsetup_r+0x30>
 800936a:	bd70      	pop	{r4, r5, r6, pc}
 800936c:	0781      	lsls	r1, r0, #30
 800936e:	bf58      	it	pl
 8009370:	6963      	ldrpl	r3, [r4, #20]
 8009372:	60a3      	str	r3, [r4, #8]
 8009374:	e7f4      	b.n	8009360 <__swsetup_r+0xb0>
 8009376:	2000      	movs	r0, #0
 8009378:	e7f7      	b.n	800936a <__swsetup_r+0xba>
 800937a:	bf00      	nop
 800937c:	2000002c 	.word	0x2000002c
 8009380:	08009edc 	.word	0x08009edc
 8009384:	08009efc 	.word	0x08009efc
 8009388:	08009ebc 	.word	0x08009ebc

0800938c <abort>:
 800938c:	b508      	push	{r3, lr}
 800938e:	2006      	movs	r0, #6
 8009390:	f000 fa52 	bl	8009838 <raise>
 8009394:	2001      	movs	r0, #1
 8009396:	f7f7 ffbd 	bl	8001314 <_exit>
	...

0800939c <__sflush_r>:
 800939c:	898a      	ldrh	r2, [r1, #12]
 800939e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093a2:	4605      	mov	r5, r0
 80093a4:	0710      	lsls	r0, r2, #28
 80093a6:	460c      	mov	r4, r1
 80093a8:	d458      	bmi.n	800945c <__sflush_r+0xc0>
 80093aa:	684b      	ldr	r3, [r1, #4]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	dc05      	bgt.n	80093bc <__sflush_r+0x20>
 80093b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	dc02      	bgt.n	80093bc <__sflush_r+0x20>
 80093b6:	2000      	movs	r0, #0
 80093b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093be:	2e00      	cmp	r6, #0
 80093c0:	d0f9      	beq.n	80093b6 <__sflush_r+0x1a>
 80093c2:	2300      	movs	r3, #0
 80093c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80093c8:	682f      	ldr	r7, [r5, #0]
 80093ca:	602b      	str	r3, [r5, #0]
 80093cc:	d032      	beq.n	8009434 <__sflush_r+0x98>
 80093ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80093d0:	89a3      	ldrh	r3, [r4, #12]
 80093d2:	075a      	lsls	r2, r3, #29
 80093d4:	d505      	bpl.n	80093e2 <__sflush_r+0x46>
 80093d6:	6863      	ldr	r3, [r4, #4]
 80093d8:	1ac0      	subs	r0, r0, r3
 80093da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80093dc:	b10b      	cbz	r3, 80093e2 <__sflush_r+0x46>
 80093de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80093e0:	1ac0      	subs	r0, r0, r3
 80093e2:	2300      	movs	r3, #0
 80093e4:	4602      	mov	r2, r0
 80093e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093e8:	6a21      	ldr	r1, [r4, #32]
 80093ea:	4628      	mov	r0, r5
 80093ec:	47b0      	blx	r6
 80093ee:	1c43      	adds	r3, r0, #1
 80093f0:	89a3      	ldrh	r3, [r4, #12]
 80093f2:	d106      	bne.n	8009402 <__sflush_r+0x66>
 80093f4:	6829      	ldr	r1, [r5, #0]
 80093f6:	291d      	cmp	r1, #29
 80093f8:	d82c      	bhi.n	8009454 <__sflush_r+0xb8>
 80093fa:	4a2a      	ldr	r2, [pc, #168]	; (80094a4 <__sflush_r+0x108>)
 80093fc:	40ca      	lsrs	r2, r1
 80093fe:	07d6      	lsls	r6, r2, #31
 8009400:	d528      	bpl.n	8009454 <__sflush_r+0xb8>
 8009402:	2200      	movs	r2, #0
 8009404:	6062      	str	r2, [r4, #4]
 8009406:	04d9      	lsls	r1, r3, #19
 8009408:	6922      	ldr	r2, [r4, #16]
 800940a:	6022      	str	r2, [r4, #0]
 800940c:	d504      	bpl.n	8009418 <__sflush_r+0x7c>
 800940e:	1c42      	adds	r2, r0, #1
 8009410:	d101      	bne.n	8009416 <__sflush_r+0x7a>
 8009412:	682b      	ldr	r3, [r5, #0]
 8009414:	b903      	cbnz	r3, 8009418 <__sflush_r+0x7c>
 8009416:	6560      	str	r0, [r4, #84]	; 0x54
 8009418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800941a:	602f      	str	r7, [r5, #0]
 800941c:	2900      	cmp	r1, #0
 800941e:	d0ca      	beq.n	80093b6 <__sflush_r+0x1a>
 8009420:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009424:	4299      	cmp	r1, r3
 8009426:	d002      	beq.n	800942e <__sflush_r+0x92>
 8009428:	4628      	mov	r0, r5
 800942a:	f7ff fad9 	bl	80089e0 <_free_r>
 800942e:	2000      	movs	r0, #0
 8009430:	6360      	str	r0, [r4, #52]	; 0x34
 8009432:	e7c1      	b.n	80093b8 <__sflush_r+0x1c>
 8009434:	6a21      	ldr	r1, [r4, #32]
 8009436:	2301      	movs	r3, #1
 8009438:	4628      	mov	r0, r5
 800943a:	47b0      	blx	r6
 800943c:	1c41      	adds	r1, r0, #1
 800943e:	d1c7      	bne.n	80093d0 <__sflush_r+0x34>
 8009440:	682b      	ldr	r3, [r5, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d0c4      	beq.n	80093d0 <__sflush_r+0x34>
 8009446:	2b1d      	cmp	r3, #29
 8009448:	d001      	beq.n	800944e <__sflush_r+0xb2>
 800944a:	2b16      	cmp	r3, #22
 800944c:	d101      	bne.n	8009452 <__sflush_r+0xb6>
 800944e:	602f      	str	r7, [r5, #0]
 8009450:	e7b1      	b.n	80093b6 <__sflush_r+0x1a>
 8009452:	89a3      	ldrh	r3, [r4, #12]
 8009454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009458:	81a3      	strh	r3, [r4, #12]
 800945a:	e7ad      	b.n	80093b8 <__sflush_r+0x1c>
 800945c:	690f      	ldr	r7, [r1, #16]
 800945e:	2f00      	cmp	r7, #0
 8009460:	d0a9      	beq.n	80093b6 <__sflush_r+0x1a>
 8009462:	0793      	lsls	r3, r2, #30
 8009464:	680e      	ldr	r6, [r1, #0]
 8009466:	bf08      	it	eq
 8009468:	694b      	ldreq	r3, [r1, #20]
 800946a:	600f      	str	r7, [r1, #0]
 800946c:	bf18      	it	ne
 800946e:	2300      	movne	r3, #0
 8009470:	eba6 0807 	sub.w	r8, r6, r7
 8009474:	608b      	str	r3, [r1, #8]
 8009476:	f1b8 0f00 	cmp.w	r8, #0
 800947a:	dd9c      	ble.n	80093b6 <__sflush_r+0x1a>
 800947c:	6a21      	ldr	r1, [r4, #32]
 800947e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009480:	4643      	mov	r3, r8
 8009482:	463a      	mov	r2, r7
 8009484:	4628      	mov	r0, r5
 8009486:	47b0      	blx	r6
 8009488:	2800      	cmp	r0, #0
 800948a:	dc06      	bgt.n	800949a <__sflush_r+0xfe>
 800948c:	89a3      	ldrh	r3, [r4, #12]
 800948e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009492:	81a3      	strh	r3, [r4, #12]
 8009494:	f04f 30ff 	mov.w	r0, #4294967295
 8009498:	e78e      	b.n	80093b8 <__sflush_r+0x1c>
 800949a:	4407      	add	r7, r0
 800949c:	eba8 0800 	sub.w	r8, r8, r0
 80094a0:	e7e9      	b.n	8009476 <__sflush_r+0xda>
 80094a2:	bf00      	nop
 80094a4:	20400001 	.word	0x20400001

080094a8 <_fflush_r>:
 80094a8:	b538      	push	{r3, r4, r5, lr}
 80094aa:	690b      	ldr	r3, [r1, #16]
 80094ac:	4605      	mov	r5, r0
 80094ae:	460c      	mov	r4, r1
 80094b0:	b913      	cbnz	r3, 80094b8 <_fflush_r+0x10>
 80094b2:	2500      	movs	r5, #0
 80094b4:	4628      	mov	r0, r5
 80094b6:	bd38      	pop	{r3, r4, r5, pc}
 80094b8:	b118      	cbz	r0, 80094c2 <_fflush_r+0x1a>
 80094ba:	6983      	ldr	r3, [r0, #24]
 80094bc:	b90b      	cbnz	r3, 80094c2 <_fflush_r+0x1a>
 80094be:	f000 f887 	bl	80095d0 <__sinit>
 80094c2:	4b14      	ldr	r3, [pc, #80]	; (8009514 <_fflush_r+0x6c>)
 80094c4:	429c      	cmp	r4, r3
 80094c6:	d11b      	bne.n	8009500 <_fflush_r+0x58>
 80094c8:	686c      	ldr	r4, [r5, #4]
 80094ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d0ef      	beq.n	80094b2 <_fflush_r+0xa>
 80094d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80094d4:	07d0      	lsls	r0, r2, #31
 80094d6:	d404      	bmi.n	80094e2 <_fflush_r+0x3a>
 80094d8:	0599      	lsls	r1, r3, #22
 80094da:	d402      	bmi.n	80094e2 <_fflush_r+0x3a>
 80094dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094de:	f000 f915 	bl	800970c <__retarget_lock_acquire_recursive>
 80094e2:	4628      	mov	r0, r5
 80094e4:	4621      	mov	r1, r4
 80094e6:	f7ff ff59 	bl	800939c <__sflush_r>
 80094ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80094ec:	07da      	lsls	r2, r3, #31
 80094ee:	4605      	mov	r5, r0
 80094f0:	d4e0      	bmi.n	80094b4 <_fflush_r+0xc>
 80094f2:	89a3      	ldrh	r3, [r4, #12]
 80094f4:	059b      	lsls	r3, r3, #22
 80094f6:	d4dd      	bmi.n	80094b4 <_fflush_r+0xc>
 80094f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094fa:	f000 f908 	bl	800970e <__retarget_lock_release_recursive>
 80094fe:	e7d9      	b.n	80094b4 <_fflush_r+0xc>
 8009500:	4b05      	ldr	r3, [pc, #20]	; (8009518 <_fflush_r+0x70>)
 8009502:	429c      	cmp	r4, r3
 8009504:	d101      	bne.n	800950a <_fflush_r+0x62>
 8009506:	68ac      	ldr	r4, [r5, #8]
 8009508:	e7df      	b.n	80094ca <_fflush_r+0x22>
 800950a:	4b04      	ldr	r3, [pc, #16]	; (800951c <_fflush_r+0x74>)
 800950c:	429c      	cmp	r4, r3
 800950e:	bf08      	it	eq
 8009510:	68ec      	ldreq	r4, [r5, #12]
 8009512:	e7da      	b.n	80094ca <_fflush_r+0x22>
 8009514:	08009edc 	.word	0x08009edc
 8009518:	08009efc 	.word	0x08009efc
 800951c:	08009ebc 	.word	0x08009ebc

08009520 <std>:
 8009520:	2300      	movs	r3, #0
 8009522:	b510      	push	{r4, lr}
 8009524:	4604      	mov	r4, r0
 8009526:	e9c0 3300 	strd	r3, r3, [r0]
 800952a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800952e:	6083      	str	r3, [r0, #8]
 8009530:	8181      	strh	r1, [r0, #12]
 8009532:	6643      	str	r3, [r0, #100]	; 0x64
 8009534:	81c2      	strh	r2, [r0, #14]
 8009536:	6183      	str	r3, [r0, #24]
 8009538:	4619      	mov	r1, r3
 800953a:	2208      	movs	r2, #8
 800953c:	305c      	adds	r0, #92	; 0x5c
 800953e:	f7fb fe13 	bl	8005168 <memset>
 8009542:	4b05      	ldr	r3, [pc, #20]	; (8009558 <std+0x38>)
 8009544:	6263      	str	r3, [r4, #36]	; 0x24
 8009546:	4b05      	ldr	r3, [pc, #20]	; (800955c <std+0x3c>)
 8009548:	62a3      	str	r3, [r4, #40]	; 0x28
 800954a:	4b05      	ldr	r3, [pc, #20]	; (8009560 <std+0x40>)
 800954c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800954e:	4b05      	ldr	r3, [pc, #20]	; (8009564 <std+0x44>)
 8009550:	6224      	str	r4, [r4, #32]
 8009552:	6323      	str	r3, [r4, #48]	; 0x30
 8009554:	bd10      	pop	{r4, pc}
 8009556:	bf00      	nop
 8009558:	08009871 	.word	0x08009871
 800955c:	08009893 	.word	0x08009893
 8009560:	080098cb 	.word	0x080098cb
 8009564:	080098ef 	.word	0x080098ef

08009568 <_cleanup_r>:
 8009568:	4901      	ldr	r1, [pc, #4]	; (8009570 <_cleanup_r+0x8>)
 800956a:	f000 b8af 	b.w	80096cc <_fwalk_reent>
 800956e:	bf00      	nop
 8009570:	080094a9 	.word	0x080094a9

08009574 <__sfmoreglue>:
 8009574:	b570      	push	{r4, r5, r6, lr}
 8009576:	1e4a      	subs	r2, r1, #1
 8009578:	2568      	movs	r5, #104	; 0x68
 800957a:	4355      	muls	r5, r2
 800957c:	460e      	mov	r6, r1
 800957e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009582:	f7ff fa7d 	bl	8008a80 <_malloc_r>
 8009586:	4604      	mov	r4, r0
 8009588:	b140      	cbz	r0, 800959c <__sfmoreglue+0x28>
 800958a:	2100      	movs	r1, #0
 800958c:	e9c0 1600 	strd	r1, r6, [r0]
 8009590:	300c      	adds	r0, #12
 8009592:	60a0      	str	r0, [r4, #8]
 8009594:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009598:	f7fb fde6 	bl	8005168 <memset>
 800959c:	4620      	mov	r0, r4
 800959e:	bd70      	pop	{r4, r5, r6, pc}

080095a0 <__sfp_lock_acquire>:
 80095a0:	4801      	ldr	r0, [pc, #4]	; (80095a8 <__sfp_lock_acquire+0x8>)
 80095a2:	f000 b8b3 	b.w	800970c <__retarget_lock_acquire_recursive>
 80095a6:	bf00      	nop
 80095a8:	20000b34 	.word	0x20000b34

080095ac <__sfp_lock_release>:
 80095ac:	4801      	ldr	r0, [pc, #4]	; (80095b4 <__sfp_lock_release+0x8>)
 80095ae:	f000 b8ae 	b.w	800970e <__retarget_lock_release_recursive>
 80095b2:	bf00      	nop
 80095b4:	20000b34 	.word	0x20000b34

080095b8 <__sinit_lock_acquire>:
 80095b8:	4801      	ldr	r0, [pc, #4]	; (80095c0 <__sinit_lock_acquire+0x8>)
 80095ba:	f000 b8a7 	b.w	800970c <__retarget_lock_acquire_recursive>
 80095be:	bf00      	nop
 80095c0:	20000b2f 	.word	0x20000b2f

080095c4 <__sinit_lock_release>:
 80095c4:	4801      	ldr	r0, [pc, #4]	; (80095cc <__sinit_lock_release+0x8>)
 80095c6:	f000 b8a2 	b.w	800970e <__retarget_lock_release_recursive>
 80095ca:	bf00      	nop
 80095cc:	20000b2f 	.word	0x20000b2f

080095d0 <__sinit>:
 80095d0:	b510      	push	{r4, lr}
 80095d2:	4604      	mov	r4, r0
 80095d4:	f7ff fff0 	bl	80095b8 <__sinit_lock_acquire>
 80095d8:	69a3      	ldr	r3, [r4, #24]
 80095da:	b11b      	cbz	r3, 80095e4 <__sinit+0x14>
 80095dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095e0:	f7ff bff0 	b.w	80095c4 <__sinit_lock_release>
 80095e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80095e8:	6523      	str	r3, [r4, #80]	; 0x50
 80095ea:	4b13      	ldr	r3, [pc, #76]	; (8009638 <__sinit+0x68>)
 80095ec:	4a13      	ldr	r2, [pc, #76]	; (800963c <__sinit+0x6c>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80095f2:	42a3      	cmp	r3, r4
 80095f4:	bf04      	itt	eq
 80095f6:	2301      	moveq	r3, #1
 80095f8:	61a3      	streq	r3, [r4, #24]
 80095fa:	4620      	mov	r0, r4
 80095fc:	f000 f820 	bl	8009640 <__sfp>
 8009600:	6060      	str	r0, [r4, #4]
 8009602:	4620      	mov	r0, r4
 8009604:	f000 f81c 	bl	8009640 <__sfp>
 8009608:	60a0      	str	r0, [r4, #8]
 800960a:	4620      	mov	r0, r4
 800960c:	f000 f818 	bl	8009640 <__sfp>
 8009610:	2200      	movs	r2, #0
 8009612:	60e0      	str	r0, [r4, #12]
 8009614:	2104      	movs	r1, #4
 8009616:	6860      	ldr	r0, [r4, #4]
 8009618:	f7ff ff82 	bl	8009520 <std>
 800961c:	68a0      	ldr	r0, [r4, #8]
 800961e:	2201      	movs	r2, #1
 8009620:	2109      	movs	r1, #9
 8009622:	f7ff ff7d 	bl	8009520 <std>
 8009626:	68e0      	ldr	r0, [r4, #12]
 8009628:	2202      	movs	r2, #2
 800962a:	2112      	movs	r1, #18
 800962c:	f7ff ff78 	bl	8009520 <std>
 8009630:	2301      	movs	r3, #1
 8009632:	61a3      	str	r3, [r4, #24]
 8009634:	e7d2      	b.n	80095dc <__sinit+0xc>
 8009636:	bf00      	nop
 8009638:	08009a68 	.word	0x08009a68
 800963c:	08009569 	.word	0x08009569

08009640 <__sfp>:
 8009640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009642:	4607      	mov	r7, r0
 8009644:	f7ff ffac 	bl	80095a0 <__sfp_lock_acquire>
 8009648:	4b1e      	ldr	r3, [pc, #120]	; (80096c4 <__sfp+0x84>)
 800964a:	681e      	ldr	r6, [r3, #0]
 800964c:	69b3      	ldr	r3, [r6, #24]
 800964e:	b913      	cbnz	r3, 8009656 <__sfp+0x16>
 8009650:	4630      	mov	r0, r6
 8009652:	f7ff ffbd 	bl	80095d0 <__sinit>
 8009656:	3648      	adds	r6, #72	; 0x48
 8009658:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800965c:	3b01      	subs	r3, #1
 800965e:	d503      	bpl.n	8009668 <__sfp+0x28>
 8009660:	6833      	ldr	r3, [r6, #0]
 8009662:	b30b      	cbz	r3, 80096a8 <__sfp+0x68>
 8009664:	6836      	ldr	r6, [r6, #0]
 8009666:	e7f7      	b.n	8009658 <__sfp+0x18>
 8009668:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800966c:	b9d5      	cbnz	r5, 80096a4 <__sfp+0x64>
 800966e:	4b16      	ldr	r3, [pc, #88]	; (80096c8 <__sfp+0x88>)
 8009670:	60e3      	str	r3, [r4, #12]
 8009672:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009676:	6665      	str	r5, [r4, #100]	; 0x64
 8009678:	f000 f847 	bl	800970a <__retarget_lock_init_recursive>
 800967c:	f7ff ff96 	bl	80095ac <__sfp_lock_release>
 8009680:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009684:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009688:	6025      	str	r5, [r4, #0]
 800968a:	61a5      	str	r5, [r4, #24]
 800968c:	2208      	movs	r2, #8
 800968e:	4629      	mov	r1, r5
 8009690:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009694:	f7fb fd68 	bl	8005168 <memset>
 8009698:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800969c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80096a0:	4620      	mov	r0, r4
 80096a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096a4:	3468      	adds	r4, #104	; 0x68
 80096a6:	e7d9      	b.n	800965c <__sfp+0x1c>
 80096a8:	2104      	movs	r1, #4
 80096aa:	4638      	mov	r0, r7
 80096ac:	f7ff ff62 	bl	8009574 <__sfmoreglue>
 80096b0:	4604      	mov	r4, r0
 80096b2:	6030      	str	r0, [r6, #0]
 80096b4:	2800      	cmp	r0, #0
 80096b6:	d1d5      	bne.n	8009664 <__sfp+0x24>
 80096b8:	f7ff ff78 	bl	80095ac <__sfp_lock_release>
 80096bc:	230c      	movs	r3, #12
 80096be:	603b      	str	r3, [r7, #0]
 80096c0:	e7ee      	b.n	80096a0 <__sfp+0x60>
 80096c2:	bf00      	nop
 80096c4:	08009a68 	.word	0x08009a68
 80096c8:	ffff0001 	.word	0xffff0001

080096cc <_fwalk_reent>:
 80096cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096d0:	4606      	mov	r6, r0
 80096d2:	4688      	mov	r8, r1
 80096d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80096d8:	2700      	movs	r7, #0
 80096da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80096de:	f1b9 0901 	subs.w	r9, r9, #1
 80096e2:	d505      	bpl.n	80096f0 <_fwalk_reent+0x24>
 80096e4:	6824      	ldr	r4, [r4, #0]
 80096e6:	2c00      	cmp	r4, #0
 80096e8:	d1f7      	bne.n	80096da <_fwalk_reent+0xe>
 80096ea:	4638      	mov	r0, r7
 80096ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096f0:	89ab      	ldrh	r3, [r5, #12]
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d907      	bls.n	8009706 <_fwalk_reent+0x3a>
 80096f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096fa:	3301      	adds	r3, #1
 80096fc:	d003      	beq.n	8009706 <_fwalk_reent+0x3a>
 80096fe:	4629      	mov	r1, r5
 8009700:	4630      	mov	r0, r6
 8009702:	47c0      	blx	r8
 8009704:	4307      	orrs	r7, r0
 8009706:	3568      	adds	r5, #104	; 0x68
 8009708:	e7e9      	b.n	80096de <_fwalk_reent+0x12>

0800970a <__retarget_lock_init_recursive>:
 800970a:	4770      	bx	lr

0800970c <__retarget_lock_acquire_recursive>:
 800970c:	4770      	bx	lr

0800970e <__retarget_lock_release_recursive>:
 800970e:	4770      	bx	lr

08009710 <__swhatbuf_r>:
 8009710:	b570      	push	{r4, r5, r6, lr}
 8009712:	460e      	mov	r6, r1
 8009714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009718:	2900      	cmp	r1, #0
 800971a:	b096      	sub	sp, #88	; 0x58
 800971c:	4614      	mov	r4, r2
 800971e:	461d      	mov	r5, r3
 8009720:	da07      	bge.n	8009732 <__swhatbuf_r+0x22>
 8009722:	2300      	movs	r3, #0
 8009724:	602b      	str	r3, [r5, #0]
 8009726:	89b3      	ldrh	r3, [r6, #12]
 8009728:	061a      	lsls	r2, r3, #24
 800972a:	d410      	bmi.n	800974e <__swhatbuf_r+0x3e>
 800972c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009730:	e00e      	b.n	8009750 <__swhatbuf_r+0x40>
 8009732:	466a      	mov	r2, sp
 8009734:	f000 f902 	bl	800993c <_fstat_r>
 8009738:	2800      	cmp	r0, #0
 800973a:	dbf2      	blt.n	8009722 <__swhatbuf_r+0x12>
 800973c:	9a01      	ldr	r2, [sp, #4]
 800973e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009742:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009746:	425a      	negs	r2, r3
 8009748:	415a      	adcs	r2, r3
 800974a:	602a      	str	r2, [r5, #0]
 800974c:	e7ee      	b.n	800972c <__swhatbuf_r+0x1c>
 800974e:	2340      	movs	r3, #64	; 0x40
 8009750:	2000      	movs	r0, #0
 8009752:	6023      	str	r3, [r4, #0]
 8009754:	b016      	add	sp, #88	; 0x58
 8009756:	bd70      	pop	{r4, r5, r6, pc}

08009758 <__smakebuf_r>:
 8009758:	898b      	ldrh	r3, [r1, #12]
 800975a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800975c:	079d      	lsls	r5, r3, #30
 800975e:	4606      	mov	r6, r0
 8009760:	460c      	mov	r4, r1
 8009762:	d507      	bpl.n	8009774 <__smakebuf_r+0x1c>
 8009764:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009768:	6023      	str	r3, [r4, #0]
 800976a:	6123      	str	r3, [r4, #16]
 800976c:	2301      	movs	r3, #1
 800976e:	6163      	str	r3, [r4, #20]
 8009770:	b002      	add	sp, #8
 8009772:	bd70      	pop	{r4, r5, r6, pc}
 8009774:	ab01      	add	r3, sp, #4
 8009776:	466a      	mov	r2, sp
 8009778:	f7ff ffca 	bl	8009710 <__swhatbuf_r>
 800977c:	9900      	ldr	r1, [sp, #0]
 800977e:	4605      	mov	r5, r0
 8009780:	4630      	mov	r0, r6
 8009782:	f7ff f97d 	bl	8008a80 <_malloc_r>
 8009786:	b948      	cbnz	r0, 800979c <__smakebuf_r+0x44>
 8009788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800978c:	059a      	lsls	r2, r3, #22
 800978e:	d4ef      	bmi.n	8009770 <__smakebuf_r+0x18>
 8009790:	f023 0303 	bic.w	r3, r3, #3
 8009794:	f043 0302 	orr.w	r3, r3, #2
 8009798:	81a3      	strh	r3, [r4, #12]
 800979a:	e7e3      	b.n	8009764 <__smakebuf_r+0xc>
 800979c:	4b0d      	ldr	r3, [pc, #52]	; (80097d4 <__smakebuf_r+0x7c>)
 800979e:	62b3      	str	r3, [r6, #40]	; 0x28
 80097a0:	89a3      	ldrh	r3, [r4, #12]
 80097a2:	6020      	str	r0, [r4, #0]
 80097a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097a8:	81a3      	strh	r3, [r4, #12]
 80097aa:	9b00      	ldr	r3, [sp, #0]
 80097ac:	6163      	str	r3, [r4, #20]
 80097ae:	9b01      	ldr	r3, [sp, #4]
 80097b0:	6120      	str	r0, [r4, #16]
 80097b2:	b15b      	cbz	r3, 80097cc <__smakebuf_r+0x74>
 80097b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097b8:	4630      	mov	r0, r6
 80097ba:	f000 f8d1 	bl	8009960 <_isatty_r>
 80097be:	b128      	cbz	r0, 80097cc <__smakebuf_r+0x74>
 80097c0:	89a3      	ldrh	r3, [r4, #12]
 80097c2:	f023 0303 	bic.w	r3, r3, #3
 80097c6:	f043 0301 	orr.w	r3, r3, #1
 80097ca:	81a3      	strh	r3, [r4, #12]
 80097cc:	89a0      	ldrh	r0, [r4, #12]
 80097ce:	4305      	orrs	r5, r0
 80097d0:	81a5      	strh	r5, [r4, #12]
 80097d2:	e7cd      	b.n	8009770 <__smakebuf_r+0x18>
 80097d4:	08009569 	.word	0x08009569

080097d8 <_malloc_usable_size_r>:
 80097d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097dc:	1f18      	subs	r0, r3, #4
 80097de:	2b00      	cmp	r3, #0
 80097e0:	bfbc      	itt	lt
 80097e2:	580b      	ldrlt	r3, [r1, r0]
 80097e4:	18c0      	addlt	r0, r0, r3
 80097e6:	4770      	bx	lr

080097e8 <_raise_r>:
 80097e8:	291f      	cmp	r1, #31
 80097ea:	b538      	push	{r3, r4, r5, lr}
 80097ec:	4604      	mov	r4, r0
 80097ee:	460d      	mov	r5, r1
 80097f0:	d904      	bls.n	80097fc <_raise_r+0x14>
 80097f2:	2316      	movs	r3, #22
 80097f4:	6003      	str	r3, [r0, #0]
 80097f6:	f04f 30ff 	mov.w	r0, #4294967295
 80097fa:	bd38      	pop	{r3, r4, r5, pc}
 80097fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80097fe:	b112      	cbz	r2, 8009806 <_raise_r+0x1e>
 8009800:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009804:	b94b      	cbnz	r3, 800981a <_raise_r+0x32>
 8009806:	4620      	mov	r0, r4
 8009808:	f000 f830 	bl	800986c <_getpid_r>
 800980c:	462a      	mov	r2, r5
 800980e:	4601      	mov	r1, r0
 8009810:	4620      	mov	r0, r4
 8009812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009816:	f000 b817 	b.w	8009848 <_kill_r>
 800981a:	2b01      	cmp	r3, #1
 800981c:	d00a      	beq.n	8009834 <_raise_r+0x4c>
 800981e:	1c59      	adds	r1, r3, #1
 8009820:	d103      	bne.n	800982a <_raise_r+0x42>
 8009822:	2316      	movs	r3, #22
 8009824:	6003      	str	r3, [r0, #0]
 8009826:	2001      	movs	r0, #1
 8009828:	e7e7      	b.n	80097fa <_raise_r+0x12>
 800982a:	2400      	movs	r4, #0
 800982c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009830:	4628      	mov	r0, r5
 8009832:	4798      	blx	r3
 8009834:	2000      	movs	r0, #0
 8009836:	e7e0      	b.n	80097fa <_raise_r+0x12>

08009838 <raise>:
 8009838:	4b02      	ldr	r3, [pc, #8]	; (8009844 <raise+0xc>)
 800983a:	4601      	mov	r1, r0
 800983c:	6818      	ldr	r0, [r3, #0]
 800983e:	f7ff bfd3 	b.w	80097e8 <_raise_r>
 8009842:	bf00      	nop
 8009844:	2000002c 	.word	0x2000002c

08009848 <_kill_r>:
 8009848:	b538      	push	{r3, r4, r5, lr}
 800984a:	4d07      	ldr	r5, [pc, #28]	; (8009868 <_kill_r+0x20>)
 800984c:	2300      	movs	r3, #0
 800984e:	4604      	mov	r4, r0
 8009850:	4608      	mov	r0, r1
 8009852:	4611      	mov	r1, r2
 8009854:	602b      	str	r3, [r5, #0]
 8009856:	f7f7 fd4d 	bl	80012f4 <_kill>
 800985a:	1c43      	adds	r3, r0, #1
 800985c:	d102      	bne.n	8009864 <_kill_r+0x1c>
 800985e:	682b      	ldr	r3, [r5, #0]
 8009860:	b103      	cbz	r3, 8009864 <_kill_r+0x1c>
 8009862:	6023      	str	r3, [r4, #0]
 8009864:	bd38      	pop	{r3, r4, r5, pc}
 8009866:	bf00      	nop
 8009868:	20000b28 	.word	0x20000b28

0800986c <_getpid_r>:
 800986c:	f7f7 bd3a 	b.w	80012e4 <_getpid>

08009870 <__sread>:
 8009870:	b510      	push	{r4, lr}
 8009872:	460c      	mov	r4, r1
 8009874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009878:	f000 f894 	bl	80099a4 <_read_r>
 800987c:	2800      	cmp	r0, #0
 800987e:	bfab      	itete	ge
 8009880:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009882:	89a3      	ldrhlt	r3, [r4, #12]
 8009884:	181b      	addge	r3, r3, r0
 8009886:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800988a:	bfac      	ite	ge
 800988c:	6563      	strge	r3, [r4, #84]	; 0x54
 800988e:	81a3      	strhlt	r3, [r4, #12]
 8009890:	bd10      	pop	{r4, pc}

08009892 <__swrite>:
 8009892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009896:	461f      	mov	r7, r3
 8009898:	898b      	ldrh	r3, [r1, #12]
 800989a:	05db      	lsls	r3, r3, #23
 800989c:	4605      	mov	r5, r0
 800989e:	460c      	mov	r4, r1
 80098a0:	4616      	mov	r6, r2
 80098a2:	d505      	bpl.n	80098b0 <__swrite+0x1e>
 80098a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098a8:	2302      	movs	r3, #2
 80098aa:	2200      	movs	r2, #0
 80098ac:	f000 f868 	bl	8009980 <_lseek_r>
 80098b0:	89a3      	ldrh	r3, [r4, #12]
 80098b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098ba:	81a3      	strh	r3, [r4, #12]
 80098bc:	4632      	mov	r2, r6
 80098be:	463b      	mov	r3, r7
 80098c0:	4628      	mov	r0, r5
 80098c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098c6:	f000 b817 	b.w	80098f8 <_write_r>

080098ca <__sseek>:
 80098ca:	b510      	push	{r4, lr}
 80098cc:	460c      	mov	r4, r1
 80098ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098d2:	f000 f855 	bl	8009980 <_lseek_r>
 80098d6:	1c43      	adds	r3, r0, #1
 80098d8:	89a3      	ldrh	r3, [r4, #12]
 80098da:	bf15      	itete	ne
 80098dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80098de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80098e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80098e6:	81a3      	strheq	r3, [r4, #12]
 80098e8:	bf18      	it	ne
 80098ea:	81a3      	strhne	r3, [r4, #12]
 80098ec:	bd10      	pop	{r4, pc}

080098ee <__sclose>:
 80098ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098f2:	f000 b813 	b.w	800991c <_close_r>
	...

080098f8 <_write_r>:
 80098f8:	b538      	push	{r3, r4, r5, lr}
 80098fa:	4d07      	ldr	r5, [pc, #28]	; (8009918 <_write_r+0x20>)
 80098fc:	4604      	mov	r4, r0
 80098fe:	4608      	mov	r0, r1
 8009900:	4611      	mov	r1, r2
 8009902:	2200      	movs	r2, #0
 8009904:	602a      	str	r2, [r5, #0]
 8009906:	461a      	mov	r2, r3
 8009908:	f7f7 fd2b 	bl	8001362 <_write>
 800990c:	1c43      	adds	r3, r0, #1
 800990e:	d102      	bne.n	8009916 <_write_r+0x1e>
 8009910:	682b      	ldr	r3, [r5, #0]
 8009912:	b103      	cbz	r3, 8009916 <_write_r+0x1e>
 8009914:	6023      	str	r3, [r4, #0]
 8009916:	bd38      	pop	{r3, r4, r5, pc}
 8009918:	20000b28 	.word	0x20000b28

0800991c <_close_r>:
 800991c:	b538      	push	{r3, r4, r5, lr}
 800991e:	4d06      	ldr	r5, [pc, #24]	; (8009938 <_close_r+0x1c>)
 8009920:	2300      	movs	r3, #0
 8009922:	4604      	mov	r4, r0
 8009924:	4608      	mov	r0, r1
 8009926:	602b      	str	r3, [r5, #0]
 8009928:	f7f7 fd37 	bl	800139a <_close>
 800992c:	1c43      	adds	r3, r0, #1
 800992e:	d102      	bne.n	8009936 <_close_r+0x1a>
 8009930:	682b      	ldr	r3, [r5, #0]
 8009932:	b103      	cbz	r3, 8009936 <_close_r+0x1a>
 8009934:	6023      	str	r3, [r4, #0]
 8009936:	bd38      	pop	{r3, r4, r5, pc}
 8009938:	20000b28 	.word	0x20000b28

0800993c <_fstat_r>:
 800993c:	b538      	push	{r3, r4, r5, lr}
 800993e:	4d07      	ldr	r5, [pc, #28]	; (800995c <_fstat_r+0x20>)
 8009940:	2300      	movs	r3, #0
 8009942:	4604      	mov	r4, r0
 8009944:	4608      	mov	r0, r1
 8009946:	4611      	mov	r1, r2
 8009948:	602b      	str	r3, [r5, #0]
 800994a:	f7f7 fd32 	bl	80013b2 <_fstat>
 800994e:	1c43      	adds	r3, r0, #1
 8009950:	d102      	bne.n	8009958 <_fstat_r+0x1c>
 8009952:	682b      	ldr	r3, [r5, #0]
 8009954:	b103      	cbz	r3, 8009958 <_fstat_r+0x1c>
 8009956:	6023      	str	r3, [r4, #0]
 8009958:	bd38      	pop	{r3, r4, r5, pc}
 800995a:	bf00      	nop
 800995c:	20000b28 	.word	0x20000b28

08009960 <_isatty_r>:
 8009960:	b538      	push	{r3, r4, r5, lr}
 8009962:	4d06      	ldr	r5, [pc, #24]	; (800997c <_isatty_r+0x1c>)
 8009964:	2300      	movs	r3, #0
 8009966:	4604      	mov	r4, r0
 8009968:	4608      	mov	r0, r1
 800996a:	602b      	str	r3, [r5, #0]
 800996c:	f7f7 fd31 	bl	80013d2 <_isatty>
 8009970:	1c43      	adds	r3, r0, #1
 8009972:	d102      	bne.n	800997a <_isatty_r+0x1a>
 8009974:	682b      	ldr	r3, [r5, #0]
 8009976:	b103      	cbz	r3, 800997a <_isatty_r+0x1a>
 8009978:	6023      	str	r3, [r4, #0]
 800997a:	bd38      	pop	{r3, r4, r5, pc}
 800997c:	20000b28 	.word	0x20000b28

08009980 <_lseek_r>:
 8009980:	b538      	push	{r3, r4, r5, lr}
 8009982:	4d07      	ldr	r5, [pc, #28]	; (80099a0 <_lseek_r+0x20>)
 8009984:	4604      	mov	r4, r0
 8009986:	4608      	mov	r0, r1
 8009988:	4611      	mov	r1, r2
 800998a:	2200      	movs	r2, #0
 800998c:	602a      	str	r2, [r5, #0]
 800998e:	461a      	mov	r2, r3
 8009990:	f7f7 fd2a 	bl	80013e8 <_lseek>
 8009994:	1c43      	adds	r3, r0, #1
 8009996:	d102      	bne.n	800999e <_lseek_r+0x1e>
 8009998:	682b      	ldr	r3, [r5, #0]
 800999a:	b103      	cbz	r3, 800999e <_lseek_r+0x1e>
 800999c:	6023      	str	r3, [r4, #0]
 800999e:	bd38      	pop	{r3, r4, r5, pc}
 80099a0:	20000b28 	.word	0x20000b28

080099a4 <_read_r>:
 80099a4:	b538      	push	{r3, r4, r5, lr}
 80099a6:	4d07      	ldr	r5, [pc, #28]	; (80099c4 <_read_r+0x20>)
 80099a8:	4604      	mov	r4, r0
 80099aa:	4608      	mov	r0, r1
 80099ac:	4611      	mov	r1, r2
 80099ae:	2200      	movs	r2, #0
 80099b0:	602a      	str	r2, [r5, #0]
 80099b2:	461a      	mov	r2, r3
 80099b4:	f7f7 fcb8 	bl	8001328 <_read>
 80099b8:	1c43      	adds	r3, r0, #1
 80099ba:	d102      	bne.n	80099c2 <_read_r+0x1e>
 80099bc:	682b      	ldr	r3, [r5, #0]
 80099be:	b103      	cbz	r3, 80099c2 <_read_r+0x1e>
 80099c0:	6023      	str	r3, [r4, #0]
 80099c2:	bd38      	pop	{r3, r4, r5, pc}
 80099c4:	20000b28 	.word	0x20000b28

080099c8 <_init>:
 80099c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ca:	bf00      	nop
 80099cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ce:	bc08      	pop	{r3}
 80099d0:	469e      	mov	lr, r3
 80099d2:	4770      	bx	lr

080099d4 <_fini>:
 80099d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099d6:	bf00      	nop
 80099d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099da:	bc08      	pop	{r3}
 80099dc:	469e      	mov	lr, r3
 80099de:	4770      	bx	lr
