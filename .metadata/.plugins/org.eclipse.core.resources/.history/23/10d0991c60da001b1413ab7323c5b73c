/*
 * Flash.c
 *
 *  Created on: Jul 1, 2021
 *      Author: ASUS
 */

#include <hw.h>

//void flash_testFunc() {
//
//
//}
//
//
//
//void Flash_erase( uint32_t _page ) {
//	FLASH_EraseInitTypeDef EraseStruct ;
//	static uint32_t PageEraseERROR_Addr  ;
//	HAL_FLASH_Unlock() ;
//	if( _page <= LAST_PAGE_ADDR_BANK1)
//		EraseStruct.Banks = FLASH_BANK_1 ;
//	else
//		EraseStruct.Banks = FLASH_BANK_2 ;
//	EraseStruct.NbPages = 1 ;
//	EraseStruct.TypeErase = FLASH_TYPEERASE_PAGES ;
//	EraseStruct.Page = _page ;
//
//	if( HAL_FLASHEx_Erase( &EraseStruct, &PageEraseERROR_Addr ) != HAL_OK )
//		return (void)HAL_FLASH_GetError() ;
//
//	HAL_FLASH_Lock() ;
//}
//
//
//
//void Flash_program( uint32_t _address, const char* _data ) {
//	HAL_FLASH_Unlock() ;
//
//	unsigned int size = strlen( _data ) + 1 ;
//	char dataArr[ size ] ;
//	memset( dataArr, 0, size ) ;
//	memcpy( dataArr, _data, size - 1 ) ;
//	uint32_t data = 0x0000000000000000 ;
//	for( int i = 0; i < strlen( _data ); i++ ){
//		if( (i % 4 == 1) || ( strlen( _data ) - i == 0 ) ) {
//			HAL_FLASH_Program( FLASH_TYPEPROGRAM_DOUBLEWORD, _address + i*2, data ) ;
//			data = 0x0000000000000000 ;
//		}else {
//			data = data | dataArr[ i ]  ;
//			data = data << 4 ;
//		}
//	}
//
//	HAL_FLASH_Lock() ;
//}


uint8_t lengthPage;

void deleteBuffer(char* data)
{
	uint8_t len = strlen(data);
	for(uint8_t i = 0; i < len; i++)
	{
		data[i] = 0;
	}
}

void Flash_Lock()
{
	HAL_FLASH_Lock();
}

void Flash_Unlock()
{
	HAL_FLASH_Unlock();
}

void Flash_Erase(uint32_t addr)
{
	FLASH_EraseInitTypeDef EraseStruct ;
	static uint32_t PageEraseERROR_Addr  ;

	if( _page <= LAST_PAGE_ADDR_BANK1)
		EraseStruct.Banks = FLASH_BANK_1 ;
	else
		EraseStruct.Banks = FLASH_BANK_2 ;
	EraseStruct.NbPages = 1 ;
	EraseStruct.TypeErase = FLASH_TYPEERASE_PAGES ;
	EraseStruct.Page = _page ;

	if( HAL_FLASHEx_Erase( &EraseStruct, &PageEraseERROR_Addr ) != HAL_OK )
		return (void)HAL_FLASH_GetError() ;

}

void Flash_Write_Int(uint32_t addr, int data)
{
	Flash_Unlock();
	FLASH->CR |= FLASH_CR_PG;				/*!< Programming */
	while((FLASH->SR&FLASH_SR_BSY));
	*(__IO uint16_t*)addr = data;
	while((FLASH->SR&FLASH_SR_BSY));
	FLASH->CR &= ~FLASH_CR_PG;
	Flash_Lock();
}

uint16_t Flash_Read_Int(uint32_t addr)
{
	uint16_t* val = (uint16_t *)addr;
	return *val;
}

void Flash_Write_Char(uint32_t addr, char* data)
{
	Flash_Unlock();
	int i;
  FLASH->CR |= FLASH_CR_PG;
	int var = 0;
	lengthPage = strlen(data);
  for(i=0; i<lengthPage; i+=1)
  {
    while((FLASH->SR&FLASH_SR_BSY));
		var = (int)data[i];
    *(__IO uint16_t*)(addr + i*2) = var;
  }
	while((FLASH->SR&FLASH_SR_BSY)){};
  FLASH->CR &= ~FLASH_CR_PG;
  FLASH->CR |= FLASH_CR_LOCK;
}

void Flash_ReadChar(char* dataOut, uint32_t addr1, uint32_t addr2)
{
	int check = 0;
	deleteBuffer(dataOut);
	if((unsigned char)Flash_Read_Int(addr2+(uint32_t)2) == 255)
	{
		check = (unsigned char)Flash_Read_Int(addr2)-48;
	}
	else
	{
		check = ((unsigned char)Flash_Read_Int(addr2)-48)*10 + (unsigned char)Flash_Read_Int(addr2+2)-48;
	}
	for(int i = 0; i < check; i++)
	{
		dataOut[i] = Flash_Read_Int(addr1 + (uint32_t)(i*2));
	}
}

void Flash_ProgramPage(char* dataIn, uint32_t addr1, uint32_t addr2)
{
	//FLASH_Unlock
	Flash_Unlock();
	//Flash_Erase Page
	Flash_Erase(addr1);
	//FLASH_Program HalfWord
	Flash_Write_Char(addr1,dataIn);
	HAL_Delay(100);
	char tempbuf[5] = {0};
	sprintf(tempbuf,"%d",lengthPage);
	//FLASH_Unlock
	Flash_Unlock();
	//Flash_Erase Page
	Flash_Erase(addr2);
	//FLASH_Program HalfWord
	Flash_Write_Char(addr2,tempbuf);
}
